{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Anyref","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","Feature","featureToString","Target","Typeinfo","TypeinfoFlags","x","DiagnosticCategory","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","code","message","range","relatedRange","arg0","arg1","arg2","replace","DiagnosticMessage","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","showContext","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","DiagnosticEmitter","Token","Range","NodeKind","kind","LITERAL","NULL","TRUE","FALSE","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","createTypeName","typeName","TypeName","identifier","next","createSimpleTypeName","Node","createIdentifierExpression","createNamedType","typeArguments","isNullable","type","NamedTypeNode","createFunctionType","parameters","returnType","explicitThisType","FunctionTypeNode","createOmittedType","createTypeParameter","extendsType","defaultType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","DecoratorKind","fromNode","createComment","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","flags","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","createExportDefaultStatement","ExportDefaultStatement","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","localName","exportedName","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","foreignName","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","arrowKind","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","hasGenericComponent","typeParameterNodes","NAMEDTYPE","typeArgumentNodes","k","FUNCTIONTYPE","parameterNodes","TypeNode","TYPENAME","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","NONE","is","flag","isAny","set","nameNode","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","UNMANAGED","UNSAFE","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","literalKind","FLOAT","INTEGER","LiteralExpression","ARRAY","AssertionKind","BINARY","numTypeArguments","numArguments","CLASS","COMMA","CONSTRUCTOR","FUNCTION","INSTANCEOF","NEW","OBJECT","REGEXP","TERNARY","STRING","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","SOURCE","parent","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","Source","DeclarationStatement","INDEXSIGNATUREDECLARATION","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","CONTINUE","DO","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","EXPORTDEFAULT","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","ArrowKind","FUNCTIONDECLARATION","clone","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","endsWith","decorator","OperatorKind","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","pathLiteral","fromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","fromBinaryToken","token","PLUS_EQUALS","MINUS_EQUALS","ASTERISK","ASTERISK_EQUALS","SLASH","SLASH_EQUALS","PERCENT","PERCENT_EQUALS","ASTERISK_ASTERISK","ASTERISK_ASTERISK_EQUALS","AMPERSAND","AMPERSAND_EQUALS","BAR","BAR_EQUALS","CARET","CARET_EQUALS","LESSTHAN_LESSTHAN","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","GREATERTHAN","GREATERTHAN_EQUALS","LESSTHAN","LESSTHAN_EQUALS","fromUnaryPrefixToken","EXCLAMATION","TILDE","PLUS_PLUS","MINUS_MINUS","fromUnaryPostfixToken","ElementKind","DecoratorFlags","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","nextClassId","nextSignatureId","nativeDummySignature","nativeSource","nativeFile","File","internalName","resolver","Resolver","getSource","writeRuntimeHeader","buffer","offset","classInstance","payloadSize","writeI32","id","makeNativeVariableDeclaration","makeNativeTypeDeclaration","makeNativeFunctionDeclaration","makeNativeNamespaceDeclaration","makeNativeFunction","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","GENERIC","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerWrapperClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","firstChar","parseInt","Error","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","USER_ENTRY","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FIELD","setType","className","classReference","classElement","wrappedType","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","existing","merged","tryMerge","isDeclaredElement","Duplicate_identifier_0","requireGlobal","lookupExport","fileQueuedExports","checkDecorators","acceptedFlags","fromKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Not_implemented","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeProperty","initializeMethod","STATIC","INTERFACE_PROTOTYPE","READONLY","ABSTRACT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","_0_is_not_a_valid_operator","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","QueuedExportStar","Export_declaration_conflicts_with_exported_declaration_of_0","QueuedExport","initializeImport","QueuedImport","validDecorators","AMBIENT","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","Program","program","shadowType","FILE","current","unset","originalDeclaration","isBound","Element","declaredElements","typedElements","RESOLVED","TypedElement","startFunction","Signature","isImport","lookup","includes","memberName","TYPEDEFINITION","mangleInternalName","NAMESPACE","ENUM","ConstantValueKind","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","VariableLikeElement","ENUMVALUE","isImmutable","Parameter","index","LOCAL","Local","instances","boundPrototypes","toBound","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","__s","FUNCTION_TARGET","toSignatureString","FunctionTarget","FIELD_PROTOTYPE","memoryOffset","Field","firstDeclaration","getterInstance","setterInstance","Property","INDEXSIGNATURE","getGetterInstance","isUnchecked","lookupOverload","getSetterInstance","IndexSignature","AcyclicState","_isInterface","constructorPrototype","extends","basePtototype","base","INTERFACE","currentMemoryOffset","constructorInstance","indexSignature","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","baseName","baseType","isBuiltinArray","lengthField","isAssignableTo","target","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","writeField","baseOffset","writeI8","writeI16","writeF32","writeF64","getTypeArgumentsTo","extendedPrototype","getArrayValueType","abvInstance","acyclic","hasCycle","cyclesTo","other","except","Class","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","Interface","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeAnyref","_BinaryenTypeExnref","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureMVP","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenFeatureTailCall","_BinaryenFeatureReferenceTypes","_BinaryenFeatureAll","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenAtomicFenceId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDTernaryId","_BinaryenSIMDShiftId","_BinaryenSIMDLoadId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","_BinaryenTryId","_BinaryenThrowId","_BinaryenRethrowId","_BinaryenBrOnExnId","_BinaryenPushId","_BinaryenPopId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenTruncSatSFloat32ToInt32","_BinaryenTruncSatUFloat32ToInt32","_BinaryenTruncSatSFloat64ToInt32","_BinaryenTruncSatUFloat64ToInt32","_BinaryenTruncSatSFloat32ToInt64","_BinaryenTruncSatUFloat32ToInt64","_BinaryenTruncSatSFloat64ToInt64","_BinaryenTruncSatUFloat64ToInt64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","_BinaryenWidenLowSVecI8x16ToVecI16x8","_BinaryenWidenLowUVecI8x16ToVecI16x8","_BinaryenWidenHighSVecI8x16ToVecI16x8","_BinaryenWidenHighUVecI8x16ToVecI16x8","_BinaryenWidenLowSVecI16x8ToVecI32x4","_BinaryenWidenLowUVecI16x8ToVecI32x4","_BinaryenWidenHighSVecI16x8ToVecI32x4","_BinaryenWidenHighUVecI16x8ToVecI32x4","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAndNotVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","_BinaryenNarrowSVecI16x8ToVecI8x16","_BinaryenNarrowUVecI16x8ToVecI8x16","_BinaryenNarrowSVecI32x4ToVecI16x8","_BinaryenNarrowUVecI32x4ToVecI16x8","_BinaryenSwizzleVec8x16","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","SIMDTernaryOp","_BinaryenBitselectVec128","_BinaryenQFMAVecF32x4","_BinaryenQFMSVecF32x4","_BinaryenQFMAVecF64x2","_BinaryenQFMSVecF64x2","SIMDLoadOp","_BinaryenLoadSplatVec8x16","_BinaryenLoadSplatVec16x8","_BinaryenLoadSplatVec32x4","_BinaryenLoadSplatVec64x2","_BinaryenLoadExtSVec8x8ToVecI16x8","_BinaryenLoadExtUVec8x8ToVecI16x8","_BinaryenLoadExtSVec16x4ToVecI32x4","_BinaryenLoadExtUVec16x4ToVecI32x4","_BinaryenLoadExtSVec32x2ToVecI64x2","_BinaryenLoadExtUVec32x2ToVecI64x2","segment","MemorySegment","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","Module","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","store","_BinaryenLiteralVec128","unary","op","_BinaryenUnary","binary","_BinaryenBinary","host","operands","allocPtrArray","_BinaryenHost","local_get","_BinaryenLocalGet","local_tee","_BinaryenLocalTee","global_get","_BinaryenGlobalGet","load","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","atomic_load","_BinaryenAtomicLoad","atomic_store","_BinaryenAtomicStore","atomic_rmw","_BinaryenAtomicRMW","atomic_cmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","atomic_wait","timeout","expectedType","_BinaryenAtomicWait","atomic_notify","notifyCount","_BinaryenAtomicNotify","atomic_fence","_BinaryenAtomicFence","local_set","_BinaryenLocalSet","global_set","_BinaryenGlobalSet","block","children","_BinaryenBlock","br","_BinaryenBreak","drop","_BinaryenDrop","loop","_BinaryenLoop","if","_BinaryenIf","nop","_BinaryenNop","return","_BinaryenReturn","select","_BinaryenSelect","switch","defaultName","numNames","strs","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","return_call","call_indirect","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","return_call_indirect","unreachable","_BinaryenUnreachable","memory_copy","size","_BinaryenMemoryCopy","memory_fill","_BinaryenMemoryFill","try","catchBody","_BinaryenTry","throw","eventName","_BinaryenThrow","rethrow","exnref","_BinaryenRethrow","br_on_exn","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPush","pop","_BinaryenPop","simd_extract","vec","idx","_BinaryenSIMDExtract","simd_replace","_BinaryenSIMDReplace","simd_shuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","simd_ternary","a","b","_BinaryenSIMDTernary","simd_shift","shift","_BinaryenSIMDShift","simd_load","_BinaryenSIMDLoad","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addEvent","attribute","_BinaryenAddEvent","addFunction","varTypes","_BinaryenAddFunction","getFunction","_BinaryenGetFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","addEventExport","_BinaryenAddEventExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","addEventImport","eventType","_BinaryenAddEventImport","setMemory","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","addCustomSection","contents","_BinaryenAddCustomSection","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","getFeatures","_BinaryenModuleGetFeatures","setFeatures","featureFlags","_BinaryenModuleSetFeatures","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","Return","_BinaryenReturnGetValue","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperand","_BinaryenHostGetOp","_BinaryenHostGetNumOperands","_BinaryenHostGetOperand","_BinaryenHostGetNameOperand","_BinaryenFunctionGetName","_BinaryenFunctionGetNumParams","_BinaryenFunctionGetParam","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","hasSideEffects","Nop","Block","If","Drop","Select","needsExplicitUnreachable","Unreachable","Break","numChildren","data","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","Throw","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperand","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","Push","_BinaryenPushGetValue","Pop","Host","TypeKind","TypeFlags","v128_zero","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","isChangeableTo","commonDenominator","signednessIsImportant","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","types","numTypes","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","equals","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","DOT_DOT_DOT","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","Tokenizer","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveType","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","typeNode","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","maybeInferCall","ctxFlow","resolveFunctionInclTypeArguments","actualFunction","numTypeParameters","typeParameterNames","functionTypeNode","argumentNodes","argumentExpression","resolveExpression","SWALLOW","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","atEnd","currentType","getTypeOfElement","ensureResolvedLazyGlobal","isTypedElement","getElementOfType","lookupExpression","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","Expression_cannot_be_represented_by_a_type","initializerNode","targetNode","propertyName","indexedGet","resolvedType","targetExpression","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","NONNULL","Type_0_is_illegal_in_this_context","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","i64_sub","i64_zero","intType","leftType","rightType","commonType","Operator_0_cannot_be_applied_to_types_1_and_2","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","BuiltinSymbols","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","This_expression_is_not_constructable","actualParent","typesToString","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","baseClass","nameInclTypeParamters","baseMembers","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","fieldInstance","isPowerOf2","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","Type_0_is_not_assignable_to_type_1","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","createInline","fork","branch","slice","getTempLocal","temps","unsetLocalFlag","getAutoreleaseLocal","SCOPED","setLocalFlag","RETAINED","freeTempLocal","getScopedLocal","addScopedLocal","scopedLocal","addScopedAlias","existingLocal","isNative","scopedAlias","freeScopedLocals","scope","isLocalFlag","defaultIfInlined","isAnyLocalFlag","pushBreakLabel","stack","popBreakLabel","inherit","inheritConditional","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","RETURNED","CONDITIONALLY_RETURNED","inheritMutual","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","unifyLocalFlags","numThisLocalFlags","numOtherLocalFlags","min","WRAPPED","ANY_RETAINED","isNonnull","isLocalTee","getLocalSetIndex","getLocalGetIndex","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","EqI32","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","getCallOperand","canOverflow","canConversionOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChild","getSelectThen","getSelectElse","instanceName","levels","findUsedLocalsVisit","used","traverse","importMemory","sharedMemory","importTable","explicitStart","features","noUnsafe","feature","Options","Constraints","RuntimeFeatures","mangleImportName_moduleName","mangleImportName_elementName","currentInlineFunctions","currentParent","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","compile","Compiler","startFunctionInstance","startFunctionBody","currentFlow","currentBody","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","funcRef","ensureFunctionType","typesToNativeTypes","compileVisitGlobals","compileVisitMembers","compileRTTI","i64_align","isSharedMemory","i64_shr_u","ensureModuleExports","ensureModuleExport","prefix","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeRetainRelease","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","compileExpression","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","Feature_0_is_not_enabled","initializeInStart","Mutable_value_cannot_be_inlined","findDecorator","decoratorNodes","previousParent","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","makeGlobalAssignment","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","temp","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureStaticString","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","ensureStaticArrayBuffer","elementType","byteLength","bufferInstance","buf","writeI64","ensureStaticArrayHeader","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condFlow","condExpr","makeIsTrueish","hasScopedLocals","alwaysFalse","terminates","continues","breaks","fallsThrough","alwaysTrue","incrExpr","incrFlow","bodyFlow","loopLabel","bodyStatement","needsLabel","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","valueExpression","constraints","numCases","context","tempLocal","tempLocalIndex","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","CONSTANT","compileInlineConstant","contextualType","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","explicit","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","Expression_is_never_null","leftExpr","rightExpr","compound","compileBinaryOverload","AllTrueI8x16","EqI8x16","AnyTrueI8x16","NeI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","makeAssignment","compileUnaryOverload","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr","elementExpr","tempTarget","tempElement","makeSkippedRelease","nativeFieldType","nativeThisType","tempThis","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","compileCallIndirect","checkCallSignature","hasThis","The_this_types_of_each_signature_are_incompatible","minimum","Expected_at_least_0_arguments_but_got_1","Operation_is_unsafe","argumentExpressions","thisArg","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","usedLocals","paramExpr","paramType","argumentLocal","findUsedLocals","baseInstance","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","oldExpr","newExpr","temp1","temp2","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","theOperands","numOperands","isCallImport","allOptionalsAreConstant","nodeIsConstantValue","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","arrayType","tempDataStart","nativeElementType","bufferAddress","arraySegment","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","compileInstantiate","baseCtor","allocExpr","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","setValue","NegF32","NegF64","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","thisLocalIndex","fieldPrototype","makeInstanceOfClass","idTemp","idExpr","conditions","single","Auto","compileCall","compiler","isAsm","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","isConstant","isVoid","lengthof","sizeof","checkTypeRequired","Operation_0_cannot_be_applied_to_type_1","typeArgumentsRange","alignof","ctz","checkArgsOptional","Type_0_has_no_property_1","nameof","checkTypeOptional","ClzI64","CtzI64","popcnt","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","AbsF32","AbsF64","isNumericLiteral","MaxF32","MaxF64","MinF32","MinF64","CeilF32","CeilF64","floor","FloorF32","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","checkFeatureEnabled","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","opName","Add","Sub","And","Or","Xor","Xchg","memory_size","MemorySize","memory_grow","MemoryGrow","Type_0_cannot_be_changed_to_type_1","alreadyUnchecked","call_direct","arg0Type","Type_0_is_not_a_function_index_or_function_reference","operandExprs","nativeParamTypes","operandType","Expression_must_be_a_compile_time_constant","instantiate","User_defined_0","off","v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","v128_extract_lane","maxIdx","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","v128_replace_lane","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_swizzle","SwizzleV8x16","v128_load_splat","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","v128_div","DivF32x4","DivF64x2","v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","v128_min","MinF32x4","MinF64x2","v128_max","MaxF32x4","MaxF64x2","v128_eq","EqI16x8","EqI32x4","EqF32x4","EqF64x2","v128_ne","NeI16x8","NeI32x4","NeF32x4","NeF64x2","v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","v128_abs","AbsF32x4","AbsF64x2","v128_sqrt","SqrtF32x4","SqrtF64x2","v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","v128_shl","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","v128_and","AndV128","v128_or","OrV128","v128_xor","XorV128","v128_andnot","AndNotV128","v128_not","NotV128","v128_bitselect","Bitselect","v128_any_true","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","v128_all_true","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","v128_qfma","QFMAF32x4","QFMAF64x2","v128_qfms","QFMSF32x4","QFMSF64x2","idof","visit_globals","visit_members","isNaN","isFinite","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i16x8_load8x8_s","i16x8_load8x8_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i32x4_load16x4_s","i32x4_load16x4_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","i64x2_load32x2_s","i64x2_load32x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","v8x16_swizzle","v8x16_load_splat","v16x8_load_splat","v32x4_load_splat","v64x2_load_splat","tryDeferASM","messageArg","filenameArg","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","ftype","blocks","outer","lastId","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","fieldOffset","abvPrototype","isAcyclic","functionId","decompile","decompiler","Decompiler","decompileFunction","getFunctionName","getFunctionBody","getFunctionParamCount","nativeTypeToType","getFunctionParamType","getFunctionResultType","decompileExpression","nested","getLoopName","getLoopBody","getBreakCondition","getBreakName","getLoadOffset","getLoadPtr","getStoreOffset","getStorePtr","getStoreValue","i64_to_string","getSelectCondition","getDropValue","getReturnValue","getHostOp","getHostOperand","includePrivate","seen","walk","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","ExportsWalker","indentLevel","build","IDLBuilder","indent","typeToString","visitInterface","unknown","TSDBuilder","numMembers","isInterface","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","parseFile","isEntry","indexOf","USER","currentSource","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","getDependee","dependent","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","firstParamNameNoType","firstParamKind","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","isIllegalVariableIdentifier","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","nodeIsCallable","nodeIsGenericCallable","skipBlock","depth","Parser","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","fround","clz32","round","y","sign","isTrueish","apply","fromCodePoint","replaceAll","search","replacment","res","split","arraySort","sort","comparator","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","unmanaged","formatDiagnostic","formatDiagnosticMessage","parser","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","optimizeLevel","shrinkLevel","cls","map","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","cloned","v","overrides","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","valueI64"],"mappings":"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O,IA1UpB,SAAY3V,GAKV,2BACA,eACA,qBACA,qBACA,qBACA,mBACA,qBACA,qBACA,qBACA,2BACA,kCACA,4BACA,0BACA,0BACA,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kBACA,sBACA,kCACA,sBACA,kDACA,0BACA,4BACA,sBACA,yBACA,mCACA,qCACA,2CACA,6DACA,qCACA,yCACA,6DACA,yEACA,iGACA,6CACA,iCACA,qCACA,iBAIA,iCACA,uCACA,yCACA,qCAIA,2BACA,+BArIF,CAAYA,EAAA,EAAAA,QAAA,EAAAA,MAAK,KAwIjB,SAAYyrD,GACV,yBACA,uBACA,uBAHF,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAM9B,qBAwKA,0BAwBA,uCAA4Cn4D,GAE1C,OADAwJ,OAAOxJ,EAAKuL,QACJvL,EAAK2L,WAAW,IACtB,KAAK,IAAY,MAAe,UAAR3L,EACxB,KAAK,IAAY,MAAe,OAARA,EACxB,KAAK,IAAY,MAAe,cAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EAE1B,OAAO,GAGT,iCAAsCklB,GACpC,OAAQA,GACN,KAAKxY,EAAMksD,OAAQ,MAAO,SAC1B,KAAKlsD,EAAMwsD,GAAI,MAAO,KACtB,KAAKxsD,EAAMgS,WAAY,MAAO,aAC9B,KAA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C6C,GArsRK,EAAAmoE,WAqrRb,a,8EC97RA,SAAY1sE,GACV,2CACA,mDACA,yCACA,6DACA,uHACA,iMACA,iFACA,2FACA,2EACA,yEACA,2EACA,yIACA,uGACA,6EACA,6DACA,6FACA,uEACA,mDACA,+EACA,mGACA,uHACA,6FACA,2JACA,uFACA,iGACA,qHACA,qGACA,+DACA,iEACA,iGACA,oEACA,oDACA,oCACA,8FACA,kEACA,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,0DACA,kDACA,gFACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,wGACA,wFACA,4KACA,sHACA,gFACA,gLACA,0MACA,kQACA,8DACA,kGACA,gKACA,oIACA,4DACA,oJACA,oJACA,0GACA,0EACA,4FACA,oFACA,0QACA,kLACA,sLACA,gHACA,sFACA,8IACA,sDACA,wEACA,8CACA,4FACA,gIACA,iLACA,+MA1IF,CAAY,EAAAA,iBAAA,EAAAA,eAAc,KA8I1B,kCAAuCG,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,mBACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,mDACjB,KAAK,IAAK,MAAO,uCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,mCACjB,KAAK,IAAK,MAAO,kEACj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QACA,SACA,QACA,QACA,QACA,QACA,S,8ECxOA,oBAAyB6yH,EAAUl9F,GAEjC,OADAruB,OAAOquB,GAAS,GAAKA,EAAQ,IACtBy0F,OACLd,QACEuJ,EACA11D,QACEmrD,QACAjgG,QAAQsN,KAGZowC,WAKJ,qBAA0B8sD,EAAUl9F,EAAYm9F,GAE9C,OADAxrH,OAAOquB,GAAS,GAAKA,EAAQ,IACtBm9F,EACHtJ,OACEqJ,EACA11D,QACEmrD,QACAjgG,QAAQsN,KAGZ2zF,QACEuJ,EACA7I,QACE7sD,QACEmrD,QACAjgG,QAAQsN,Q,8EC9BpB,SAAkBo9F,GAEhB,mBACA,4BACA,wCACA,wCACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4Bn1H,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,0BAA+BA,GAC7B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,6BAAkCA,GAChC,OAAOA,GAAK,IAAcA,GAAK,KACxBA,GAAK,IAAcA,GAAK,IACnB,IAALA,GACK,IAALA,GACAA,EAAI,SAmLqBkK,EAnLYlK,GAoL9B,GAAKkK,EAAO,QACnBkrH,EAAmBlrH,EAAamrH,IAFzC,IAAkCnrH,GA/KlC,8BAAmClK,GACjC,OAAOA,GAAK,IAAcA,GAAK,KAIjC,4BAAiCA,GAC/B,OAAOA,GAAK,IAAcA,GAAK,KACxBA,GAAK,IAAcA,GAAK,IACxBA,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoBkK,EAzKYlK,GA0K7B,GAAKkK,EAAO,QACnBkrH,EAAmBlrH,EAAaorH,IAFzC,IAAiCprH,GArKjC,IAAMmrH,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,M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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\r\n * Common constants.\r\n * @module common\r\n *//***/\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\r\n  DEFINITE_ASSIGNMENT = 1 << 13,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 14,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 15,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 16,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 17,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 18,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 19,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 20,\r\n\r\n  // Compilation states\r\n\r\n  /** Is resolved. */\r\n  RESOLVED = 1 << 21,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 22,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 23,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 24,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 25,\r\n  /** Is a virtual method. */\r\n  VIRTUAL = 1 << 26,\r\n  /** Is the main function. */\r\n  MAIN = 1 << 27,\r\n\r\n  // Other\r\n\r\n  /** Is quoted. */\r\n  QUOTED = 1 << 28\r\n}\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n/** Path index suffix. */\r\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\r\n\r\n/** Common compiler symbols. */\r\nexport namespace CommonSymbols {\r\n  // special\r\n  export const EMPTY = \"\";\r\n  // types\r\n  export const i8 = \"i8\";\r\n  export const i16 = \"i16\";\r\n  export const i32 = \"i32\";\r\n  export const i64 = \"i64\";\r\n  export const isize = \"isize\";\r\n  export const u8 = \"u8\";\r\n  export const u16 = \"u16\";\r\n  export const u32 = \"u32\";\r\n  export const u64 = \"u64\";\r\n  export const usize = \"usize\";\r\n  export const bool = \"bool\";\r\n  export const f32 = \"f32\";\r\n  export const f64 = \"f64\";\r\n  export const v128 = \"v128\";\r\n  export const anyref = \"anyref\";\r\n  export const i8x16 = \"i8x16\";\r\n  export const u8x16 = \"u8x16\";\r\n  export const i16x8 = \"i16x8\";\r\n  export const u16x8 = \"u16x8\";\r\n  export const i32x4 = \"i32x4\";\r\n  export const u32x4 = \"u32x4\";\r\n  export const i64x2 = \"i64x2\";\r\n  export const u64x2 = \"u64x2\";\r\n  export const f32x4 = \"f32x4\";\r\n  export const f64x2 = \"f64x2\";\r\n  export const void_ = \"void\";\r\n  export const number = \"number\";\r\n  export const boolean = \"boolean\";\r\n  export const string = \"string\";\r\n  export const native = \"native\";\r\n  export const indexof = \"indexof\";\r\n  export const valueof = \"valueof\";\r\n  export const returnof = \"returnof\";\r\n  // aliases\r\n  export const null_ = \"null\";\r\n  export const true_ = \"true\";\r\n  export const false_ = \"false\";\r\n  // objects\r\n  export const this_ = \"this\";\r\n  export const super_ = \"super\";\r\n  export const constructor = \"constructor\";\r\n  // constants\r\n  export const ASC_TARGET = \"ASC_TARGET\";\r\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\r\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\r\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\r\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\r\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\r\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\r\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\r\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\r\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\r\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\r\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\r\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\r\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\r\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\r\n  // classes\r\n  export const I8 = \"I8\";\r\n  export const I16 = \"I16\";\r\n  export const I32 = \"I32\";\r\n  export const I64 = \"I64\";\r\n  export const Isize = \"Isize\";\r\n  export const U8 = \"U8\";\r\n  export const U16 = \"U16\";\r\n  export const U32 = \"U32\";\r\n  export const U64 = \"U64\";\r\n  export const Usize = \"Usize\";\r\n  export const Bool = \"Bool\";\r\n  export const F32 = \"F32\";\r\n  export const F64 = \"F64\";\r\n  export const V128 = \"V128\";\r\n  export const Anyref = \"Anyref\";\r\n  export const String = \"String\";\r\n  export const Array = \"Array\";\r\n  export const FixedArray = \"FixedArray\";\r\n  export const Set = \"Set\";\r\n  export const Map = \"Map\";\r\n  export const ArrayBufferView = \"ArrayBufferView\";\r\n  export const ArrayBuffer = \"ArrayBuffer\";\r\n  export const Math = \"Math\";\r\n  export const Mathf = \"Mathf\";\r\n  export const Int8Array = \"Int8Array\";\r\n  export const Int16Array = \"Int16Array\";\r\n  export const Int32Array = \"Int32Array\";\r\n  export const Int64Array = \"Int64Array\";\r\n  export const Uint8Array = \"Uint8Array\";\r\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\r\n  export const Uint16Array = \"Uint16Array\";\r\n  export const Uint32Array = \"Uint32Array\";\r\n  export const Uint64Array = \"Uint64Array\";\r\n  export const Float32Array = \"Float32Array\";\r\n  export const Float64Array = \"Float64Array\";\r\n  // runtime\r\n  export const abort = \"abort\";\r\n  export const pow = \"pow\";\r\n  export const mod = \"mod\";\r\n  export const alloc = \"__alloc\";\r\n  export const realloc = \"__realloc\";\r\n  export const free = \"__free\";\r\n  export const retain = \"__retain\";\r\n  export const release = \"__release\";\r\n  export const collect = \"__collect\";\r\n  export const typeinfo = \"__typeinfo\";\r\n  export const instanceof_ = \"__instanceof\";\r\n  export const visit = \"__visit\";\r\n  export const allocArray = \"__allocArray\";\r\n}\r\n\r\n// shared\r\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\r\nexport { Target } from \"../std/assembly/shared/target\";\r\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./bitset\";\r\nexport * from \"./charcode\";\r\nexport * from \"./collections\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n\r\n/** Tests if `x` is a power of two. */\r\nexport function isPowerOf2(x: i32): bool {\r\n  return x != 0 && (x & (x - 1)) == 0;\r\n}\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n  /** Related range, if any. */\r\n  relatedRange: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Adds a related source range to this message. */\r\n  withRelatedRange(range: Range): this {\r\n    this.relatedRange = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(range, useColors));\r\n    }\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n\r\n    let relatedRange = message.relatedRange;\r\n    if (relatedRange) {\r\n      if (showContext) {\r\n        sb.push(\"\\n\");\r\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\r\n      }\r\n      sb.push(\"\\n\");\r\n      sb.push(\" in \");\r\n      sb.push(relatedRange.source.normalizedPath);\r\n      sb.push(\"(\");\r\n      sb.push(relatedRange.line.toString(10));\r\n      sb.push(\",\");\r\n      sb.push(relatedRange.column.toString(10));\r\n      sb.push(\")\");\r\n    }\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) {\r\n      if (isLineBreak(text.charCodeAt(start))) {\r\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\r\n        break;\r\n      }\r\n      sb.push(\"~\");\r\n    }\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    relatedRange: Range | null,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    if (relatedRange) message.relatedRange = relatedRange;\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message with a related range. */\r\n  infoRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message with a related range. */\r\n  warningRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message with a related range. */\r\n  errorRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  CommonSymbols,\r\n  PATH_DELIMITER,\r\n  LIBRARY_PREFIX,\r\n  LIBRARY_SUBST\r\n} from \"./common\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath,\r\n  CharCode\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  NAMEDTYPE,\r\n  FUNCTIONTYPE,\r\n  TYPENAME,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  CLASS,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  INSTANCEOF,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTDEFAULT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INDEXSIGNATUREDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Checks if a node represents a constant value. */\r\nexport function nodeIsConstantValue(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.LITERAL:\r\n    case NodeKind.NULL:\r\n    case NodeKind.TRUE:\r\n    case NodeKind.FALSE: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable. */\r\nexport function nodeIsCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.ASSERTION: // if kind=NONNULL\r\n    case NodeKind.CALL:\r\n    case NodeKind.ELEMENTACCESS:\r\n    case NodeKind.PARENTHESIZED:\r\n    case NodeKind.PROPERTYACCESS:\r\n    case NodeKind.SUPER: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable with generic arguments. */\r\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.PROPERTYACCESS: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n\r\n  // types\r\n\r\n  static createTypeName(\r\n    name: IdentifierExpression,\r\n    range: Range\r\n  ): TypeName {\r\n    var typeName = new TypeName();\r\n    typeName.range = range;\r\n    typeName.identifier = name;\r\n    typeName.next = null;\r\n    return typeName;\r\n  }\r\n\r\n  static createSimpleTypeName(\r\n    name: string,\r\n    range: Range\r\n  ): TypeName {\r\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\r\n  }\r\n\r\n  static createNamedType(\r\n    name: TypeName,\r\n    typeArguments: TypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): NamedTypeNode {\r\n    var type = new NamedTypeNode();\r\n    type.range = range;\r\n    type.name = name;\r\n    type.typeArguments = typeArguments;\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createFunctionType(\r\n    parameters: ParameterNode[],\r\n    returnType: TypeNode,\r\n    explicitThisType: NamedTypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): FunctionTypeNode {\r\n    var type = new FunctionTypeNode();\r\n    type.range = range;\r\n    type.parameters = parameters;\r\n    type.returnType = returnType;\r\n    type.explicitThisType = explicitThisType;\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): NamedTypeNode {\r\n    return Node.createNamedType(\r\n      Node.createSimpleTypeName(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: NamedTypeNode | null,\r\n    defaultType: NamedTypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name;\r\n    elem.extendsType = extendsType;\r\n    elem.defaultType = defaultType;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: TypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name;\r\n    elem.type = type;\r\n    elem.initializer = initializer;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    name: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = name;\r\n    stmt.arguments = args;\r\n    stmt.decoratorKind = DecoratorKind.fromNode(name);\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range,\r\n    isQuoted: bool = false\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name; // TODO: extract from range\r\n    expr.symbol = name; // TODO: Symbol.for(name)\r\n    expr.isQuoted = isQuoted;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements;\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: TypeNode | null,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression;\r\n    expr.toType = toType;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left;\r\n    expr.right = right;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: TypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.typeArguments = typeArgs;\r\n    expr.arguments = args;\r\n    return expr;\r\n  }\r\n\r\n  static createClassExpression(\r\n    declaration: ClassDeclaration\r\n  ): ClassExpression {\r\n    var expr = new ClassExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions;\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.elementExpression = element;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createInstanceOfExpression(\r\n    expression: Expression,\r\n    isType: TypeNode,\r\n    range: Range\r\n  ): InstanceOfExpression {\r\n    var expr = new InstanceOfExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.isType = isType;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: TypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.typeArguments = typeArgs;\r\n    expr.arguments = args;\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createObjectLiteralExpression(\r\n    names: IdentifierExpression[],\r\n    values: Expression[],\r\n    range: Range\r\n  ): ObjectLiteralExpression {\r\n    var expr = new ObjectLiteralExpression();\r\n    expr.range = range;\r\n    expr.names = names;\r\n    expr.values = values;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.property = property;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition;\r\n    expr.ifThen = ifThen;\r\n    expr.ifElse = ifElse;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements;\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    extendsType: NamedTypeNode | null, // can't be a function\r\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.extendsType = extendsType;\r\n    stmt.implementsTypes = implementsTypes;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement;\r\n    stmt.condition = condition;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.values = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[] | null,\r\n    path: StringLiteralExpression | null,\r\n    isDeclare: bool,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.members = members;\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\r\n      } else { // absolute\r\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(normalizedPath);\r\n    } else {\r\n      stmt.internalPath = null;\r\n    }\r\n    stmt.isDeclare = isDeclare;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportDefaultStatement(\r\n    declaration: DeclarationStatement,\r\n    range: Range\r\n  ): ExportDefaultStatement {\r\n    var stmt = new ExportDefaultStatement();\r\n    stmt.declaration = declaration;\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name;\r\n    stmt.externalName = externalName;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.localName = name;\r\n    if (!externalName) externalName = name;\r\n    elem.exportedName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.ifTrue = ifTrue;\r\n    stmt.ifFalse = ifFalse;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls;\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) {\r\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\r\n    } else {\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    foreignName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.foreignName = foreignName;\r\n    if (!name) name = foreignName;\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    extendsType: NamedTypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.extendsType = extendsType;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: TypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.type = type;\r\n    stmt.initializer = initializer;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer;\r\n    stmt.condition = condition;\r\n    stmt.incrementor = incrementor;\r\n    stmt.statement = statement;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: FunctionTypeNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    arrowKind: ArrowKind,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.signature = signature;\r\n    stmt.body = body;\r\n    stmt.decorators = decorators;\r\n    stmt.arrowKind = arrowKind;\r\n    return stmt;\r\n  }\r\n\r\n  static createIndexSignatureDeclaration(\r\n    keyType: NamedTypeNode,\r\n    valueType: TypeNode,\r\n    range: Range\r\n  ): IndexSignatureDeclaration {\r\n    var elem = new IndexSignatureDeclaration();\r\n    elem.range = range;\r\n    elem.keyType = keyType;\r\n    elem.valueType = valueType;\r\n    return elem;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: FunctionTypeNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.signature = signature;\r\n    stmt.body = body;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.cases = cases;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label;\r\n    elem.statements = statements;\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements;\r\n    stmt.catchVariable = catchVariable;\r\n    stmt.catchStatements = catchStatements;\r\n    stmt.finallyStatements = finallyStatements;\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: TypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.type = alias;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = declarations;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: TypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name;\r\n    elem.type = type;\r\n    elem.initializer = initializer;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.statement = statement;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class TypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n\r\n  /** Tests if this type has a generic component matching one of the given type parameters. */\r\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\r\n    var self = <TypeNode>this; // TS otherwise complains\r\n    if (this.kind == NodeKind.NAMEDTYPE) {\r\n      if (!(<NamedTypeNode>self).name.next) {\r\n        let typeArgumentNodes = (<NamedTypeNode>self).typeArguments;\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\r\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\r\n          }\r\n        } else {\r\n          let name = (<NamedTypeNode>self).name.identifier.text;\r\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\r\n            if (typeParameterNodes[i].name.text == name) return true;\r\n          }\r\n        }\r\n      }\r\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\r\n      let parameterNodes = (<FunctionTypeNode>self).parameters;\r\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\r\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\r\n      }\r\n      if ((<FunctionTypeNode>self).returnType.hasGenericComponent(typeParameterNodes)) return true;\r\n      let explicitThisType = (<FunctionTypeNode>self).explicitThisType;\r\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\r\n    } else {\r\n      assert(false);\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/** Represents a type name. */\r\nexport class TypeName extends Node {\r\n  kind = NodeKind.TYPENAME;\r\n\r\n  /** Identifier of this part. */\r\n  identifier: IdentifierExpression;\r\n  /** Next part of the type name or `null` if this is the last part. */\r\n  next: TypeName | null;\r\n}\r\n\r\n/** Represents a named type. */\r\nexport class NamedTypeNode extends TypeNode {\r\n  kind = NodeKind.NAMEDTYPE;\r\n\r\n  /** Type name. */\r\n  name: TypeName;\r\n  /** Type argument references. */\r\n  typeArguments: TypeNode[] | null;\r\n}\r\n\r\n/** Represents a function type. */\r\nexport class FunctionTypeNode extends TypeNode {\r\n  kind = NodeKind.FUNCTIONTYPE;\r\n\r\n  /** Accepted parameters. */\r\n  parameters: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: TypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: NamedTypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: NamedTypeNode | null; // can't be a function\r\n  /** Default type if omitted, if any. */\r\n  defaultType: NamedTypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: TypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  OPERATOR_BINARY,\r\n  OPERATOR_PREFIX,\r\n  OPERATOR_POSTFIX,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE,\r\n  EXTERNAL,\r\n  BUILTIN,\r\n  LAZY,\r\n  UNSAFE\r\n}\r\n\r\nexport namespace DecoratorKind {\r\n\r\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\r\n  export function fromNode(nameNode: Expression): DecoratorKind {\r\n    // @global, @inline, @operator, @sealed, @unmanaged\r\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\r\n      let nameStr = (<IdentifierExpression>nameNode).text;\r\n      assert(nameStr.length);\r\n      switch (nameStr.charCodeAt(0)) {\r\n        case CharCode.b: {\r\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\r\n          break;\r\n        }\r\n        case CharCode.e: {\r\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\r\n          break;\r\n        }\r\n        case CharCode.g: {\r\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\r\n          break;\r\n        }\r\n        case CharCode.l: {\r\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\r\n          break;\r\n        }\r\n        case CharCode.o: {\r\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\r\n          break;\r\n        }\r\n        case CharCode.s: {\r\n          if (nameStr == \"sealed\") return DecoratorKind.SEALED;\r\n          break;\r\n        }\r\n        case CharCode.u: {\r\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\r\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\r\n          break;\r\n        }\r\n      }\r\n    } else if (\r\n      nameNode.kind == NodeKind.PROPERTYACCESS &&\r\n      (<PropertyAccessExpression>nameNode).expression.kind == NodeKind.IDENTIFIER\r\n    ) {\r\n      let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>nameNode).expression).text;\r\n      assert(nameStr.length);\r\n      let propStr = (<PropertyAccessExpression>nameNode).property.text;\r\n      assert(propStr.length);\r\n      // @operator.binary, @operator.prefix, @operator.postfix\r\n      if (nameStr == \"operator\") {\r\n        switch (propStr.charCodeAt(0)) {\r\n          case CharCode.b: {\r\n            if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\r\n            break;\r\n          }\r\n          case CharCode.p: {\r\n            switch (propStr) {\r\n              case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\r\n              case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return DecoratorKind.CUSTOM;\r\n  }\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n  /** Symbol. */\r\n  symbol: string; // TODO: symbol\r\n  /** Whether quoted or not. */\r\n  isQuoted: bool;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Checks if the given node represents a numeric (float or integer) literal. */\r\nexport function isNumericLiteral(node: Expression): bool {\r\n  if (node.kind == NodeKind.LITERAL) {\r\n    switch ((<LiteralExpression>node).literalKind) {\r\n      case LiteralKind.FLOAT:\r\n      case LiteralKind.INTEGER: return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS,\r\n  NONNULL\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: TypeNode | null;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: TypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n\r\n  /** Gets the type arguments range for reporting. */\r\n  get typeArgumentsRange(): Range {\r\n    var typeArguments = this.typeArguments;\r\n    var numTypeArguments: i32;\r\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\r\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\r\n    }\r\n    return this.expression.range;\r\n  }\r\n\r\n  /** Gets the arguments range for reporting. */\r\n  get argumentsRange(): Range {\r\n    var args = this.arguments;\r\n    var numArguments = args.length;\r\n    if (numArguments) {\r\n      return Range.join(args[0].range, args[numArguments - 1].range);\r\n    }\r\n    return this.expression.range;\r\n  }\r\n}\r\n\r\n/** Represents a class expression using the 'class' keyword. */\r\nexport class ClassExpression extends Expression {\r\n  kind = NodeKind.CLASS;\r\n\r\n  /** Inline class declaration. */\r\n  declaration: ClassDeclaration;\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n  symbol = CommonSymbols.constructor;\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an `instanceof` expression. */\r\nexport class InstanceOfExpression extends Expression {\r\n  kind = NodeKind.INSTANCEOF;\r\n\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Type to test for. */\r\n  isType: TypeNode;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n  symbol = CommonSymbols.null_;\r\n}\r\n\r\n/** Represents an object literal expression. */\r\nexport class ObjectLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.OBJECT;\r\n\r\n  /** Field names. */\r\n  names: IdentifierExpression[];\r\n  /** Field values. */\r\n  values: Expression[];\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n  symbol = CommonSymbols.super_;\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n  symbol = CommonSymbols.this_;\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n  symbol = CommonSymbols.true_;\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n  symbol = CommonSymbols.false_;\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** User-provided file. */\r\n  USER = 0,\r\n  /** User-provided entry file. */\r\n  USER_ENTRY = 1,\r\n  /** Library-provided file. */\r\n  LIBRARY = 2,\r\n  /** Library-provided entry file. */\r\n  LIBRARY_ENTRY = 3\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path with file extension. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Simple path (last part without extension). */\r\n  simplePath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n  /** Re-exported sources. */\r\n  exportPaths: Set<string> | null = null;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    var internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.internalPath = internalPath;\r\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\r\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Checks if this source represents native code. */\r\n  get isNative(): bool {\r\n    return this.internalPath == LIBRARY_SUBST;\r\n  }\r\n\r\n  /** Checks if this source is part of the (standard) library. */\r\n  get isLibrary(): bool {\r\n    var kind = this.sourceKind;\r\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\r\n  }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** Represents an index signature declaration. */\r\nexport class IndexSignatureDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\r\n\r\n  /** Key type. */\r\n  keyType: NamedTypeNode;\r\n  /** Value type. */\r\n  valueType: TypeNode;\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: TypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Base class type being extended, if any. */\r\n  extendsType: NamedTypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Local identifier. */\r\n  localName: IdentifierExpression;\r\n  /** Exported identifier. */\r\n  exportedName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members if a set of named exports, or `null` if a file export. */\r\n  members: ExportMember[] | null;\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n  /** Whether this is a declared export. */\r\n  isDeclare: bool;\r\n}\r\n\r\n/** Represents an `export default` statement. */\r\nexport class ExportDefaultStatement extends Statement {\r\n  kind = NodeKind.EXPORTDEFAULT;\r\n\r\n  /** Declaration being exported as default. */\r\n  declaration: DeclarationStatement;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Indicates the kind of an array function. */\r\nexport const enum ArrowKind {\r\n  /** Not an arrow function. */\r\n  NONE,\r\n  /** Parenthesized parameter list. */\r\n  ARROW_PARENTHESIZED,\r\n  /** Single parameter without parenthesis. */\r\n  ARROW_SINGLE\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: FunctionTypeNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n  /** Arrow function kind, if applicable. */\r\n  arrowKind: ArrowKind;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n\r\n  /** Clones this function declaration. */\r\n  clone(): FunctionDeclaration {\r\n    return Node.createFunctionDeclaration(\r\n      this.name,\r\n      this.typeParameters,\r\n      this.signature,\r\n      this.body,\r\n      this.decorators,\r\n      this.flags,\r\n      this.arrowKind,\r\n      this.range\r\n    );\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  foreignName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: TypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Finds the first decorator matching the specified kind. */\r\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      if (decorator.decoratorKind == kind) return decorator;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n/** Tests if the specified type node represents an omitted type. */\r\nexport function isTypeOmitted(type: TypeNode): bool {\r\n  if (type.kind == NodeKind.NAMEDTYPE) {\r\n    let name = (<NamedTypeNode>type).name;\r\n    return !(name.next || name.identifier.text.length);\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  INNER_DELIMITER,\r\n  LIBRARY_SUBST,\r\n  INDEX_SUFFIX,\r\n  CommonSymbols,\r\n  Feature,\r\n  Target\r\n} from \"./common\";\r\n\r\nimport {\r\n  Options\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  Range,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n  TypeParameterNode,\r\n  TypeNode,\r\n  NamedTypeNode,\r\n  FunctionTypeNode,\r\n  ArrowKind,\r\n\r\n  Expression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  ExportDefaultStatement,\r\n  Token,\r\n  ParameterNode\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  FunctionRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  CharCode,\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeF32,\r\n  writeF64\r\n} from \"./util\";\r\n\r\nimport {\r\n  Resolver\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Flow\r\n} from \"./flow\";\r\n\r\n/** Represents a yet unresolved `import`. */\r\nclass QueuedImport {\r\n  constructor(\r\n    /** File being imported into. */\r\n    public localFile: File,\r\n    /** Identifier within the local file. */\r\n    public localIdentifier: IdentifierExpression,\r\n    /** Identifier within the other file. Is an `import *` if not set. */\r\n    public foreignIdentifier: IdentifierExpression | null,\r\n    /** Path to the other file. */\r\n    public foreignPath: string,\r\n    /** Alternative path to the other file. */\r\n    public foreignPathAlt: string\r\n  ) {}\r\n}\r\n\r\n/** Represents a yet unresolved `export`. */\r\nclass QueuedExport {\r\n  constructor(\r\n    /** Identifier within the local file. */\r\n    public localIdentifier: IdentifierExpression,\r\n    /** Identifier within the other file. */\r\n    public foreignIdentifier: IdentifierExpression,\r\n    /** Path to the other file if a re-export. */\r\n    public foreignPath: string | null,\r\n    /** Alternative path to the other file if a re-export. */\r\n    public foreignPathAlt: string | null\r\n  ) {}\r\n}\r\n\r\n/** Represents a yet unresolved `export *`. */\r\nclass QueuedExportStar {\r\n  // stored in a map with localFile as the key\r\n  constructor(\r\n    /** Path to the other file. */\r\n    public foreignPath: string,\r\n    /** Alternative path to the other file. */\r\n    public foreignPathAlt: string,\r\n    /** Reference to the path literal for reporting. */\r\n    public pathLiteral: StringLiteralExpression\r\n  ) {}\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n\r\n  // indexed access\r\n  INDEXED_GET,            // a[]\r\n  INDEXED_SET,            // a[]=b\r\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\r\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\r\n\r\n  // binary\r\n  ADD,                    // a + b\r\n  SUB,                    // a - b\r\n  MUL,                    // a * b\r\n  DIV,                    // a / b\r\n  REM,                    // a % b\r\n  POW,                    // a ** b\r\n  BITWISE_AND,            // a & b\r\n  BITWISE_OR,             // a | b\r\n  BITWISE_XOR,            // a ^ b\r\n  BITWISE_SHL,            // a << b\r\n  BITWISE_SHR,            // a >> b\r\n  BITWISE_SHR_U,          // a >>> b\r\n  EQ,                     // a == b\r\n  NE,                     // a != b\r\n  GT,                     // a > b\r\n  GE,                     // a >= b\r\n  LT,                     // a < b\r\n  LE,                     // a <= b\r\n\r\n  // unary prefix\r\n  PLUS,                   // +a\r\n  MINUS,                  // -a\r\n  NOT,                    // !a\r\n  BITWISE_NOT,            // ~a\r\n  PREFIX_INC,             // ++a\r\n  PREFIX_DEC,             // --a\r\n\r\n  // unary postfix\r\n  POSTFIX_INC,            // a++\r\n  POSTFIX_DEC             // a--\r\n\r\n  // not overridable:\r\n  // IDENTITY             // a === b\r\n  // LOGICAL_AND          // a && b\r\n  // LOGICAL_OR           // a || b\r\n}\r\n\r\nexport namespace OperatorKind {\r\n\r\n  /** Returns the operator kind represented by the specified decorator and string argument. */\r\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\r\n    assert(arg.length);\r\n    switch (decoratorKind) {\r\n      case DecoratorKind.OPERATOR:\r\n      case DecoratorKind.OPERATOR_BINARY: {\r\n        switch (arg.charCodeAt(0)) {\r\n          case CharCode.OPENBRACKET: {\r\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\r\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\r\n            break;\r\n          }\r\n          case CharCode.OPENBRACE: {\r\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\r\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\r\n            break;\r\n          }\r\n          case CharCode.PLUS: {\r\n            if (arg == \"+\") return OperatorKind.ADD;\r\n            break;\r\n          }\r\n          case CharCode.MINUS: {\r\n            if (arg == \"-\") return OperatorKind.SUB;\r\n            break;\r\n          }\r\n          case CharCode.ASTERISK: {\r\n            if (arg == \"*\") return OperatorKind.MUL;\r\n            if (arg == \"**\") return OperatorKind.POW;\r\n            break;\r\n          }\r\n          case CharCode.SLASH: {\r\n            if (arg == \"/\") return OperatorKind.DIV;\r\n            break;\r\n          }\r\n          case CharCode.PERCENT: {\r\n            if (arg == \"%\") return OperatorKind.REM;\r\n            break;\r\n          }\r\n          case CharCode.AMPERSAND: {\r\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\r\n            break;\r\n          }\r\n          case CharCode.BAR: {\r\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\r\n            break;\r\n          }\r\n          case CharCode.CARET: {\r\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\r\n            break;\r\n          }\r\n          case CharCode.EQUALS: {\r\n            if (arg == \"==\") return OperatorKind.EQ;\r\n            break;\r\n          }\r\n          case CharCode.EXCLAMATION: {\r\n            if (arg == \"!=\") return OperatorKind.NE;\r\n            break;\r\n          }\r\n          case CharCode.GREATERTHAN: {\r\n            if (arg == \">\") return OperatorKind.GT;\r\n            if (arg == \">=\") return OperatorKind.GE;\r\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\r\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\r\n            break;\r\n          }\r\n          case CharCode.LESSTHAN: {\r\n            if (arg == \"<\") return OperatorKind.LT;\r\n            if (arg == \"<=\") return OperatorKind.LE;\r\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case DecoratorKind.OPERATOR_PREFIX: {\r\n        switch (arg.charCodeAt(0)) {\r\n          case CharCode.PLUS: {\r\n            if (arg == \"+\") return OperatorKind.PLUS;\r\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\r\n            break;\r\n          }\r\n          case CharCode.MINUS: {\r\n            if (arg == \"-\") return OperatorKind.MINUS;\r\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\r\n            break;\r\n          }\r\n          case CharCode.EXCLAMATION: {\r\n            if (arg == \"!\") return OperatorKind.NOT;\r\n            break;\r\n          }\r\n          case CharCode.TILDE: {\r\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case DecoratorKind.OPERATOR_POSTFIX: {\r\n        switch (arg.charCodeAt(0)) {\r\n          case CharCode.PLUS: {\r\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\r\n            break;\r\n          }\r\n          case CharCode.MINUS: {\r\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return OperatorKind.INVALID;\r\n  }\r\n\r\n  /** Converts a binary operator token to the respective operator kind. */\r\n  export function fromBinaryToken(token: Token): OperatorKind {\r\n    switch (token) {\r\n      case Token.PLUS:\r\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\r\n      case Token.MINUS:\r\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\r\n      case Token.ASTERISK:\r\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\r\n      case Token.SLASH:\r\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\r\n      case Token.PERCENT:\r\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\r\n      case Token.ASTERISK_ASTERISK:\r\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\r\n      case Token.AMPERSAND:\r\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\r\n      case Token.BAR:\r\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\r\n      case Token.CARET:\r\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\r\n      case Token.LESSTHAN_LESSTHAN:\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\r\n      case Token.GREATERTHAN_GREATERTHAN:\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\r\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\r\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\r\n      case Token.GREATERTHAN: return OperatorKind.GT;\r\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\r\n      case Token.LESSTHAN: return OperatorKind.LT;\r\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\r\n    }\r\n    return OperatorKind.INVALID;\r\n  }\r\n\r\n  /** Converts a unary prefix operator token to the respective operator kind. */\r\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\r\n    switch (token) {\r\n      case Token.PLUS: return OperatorKind.PLUS;\r\n      case Token.MINUS: return OperatorKind.MINUS;\r\n      case Token.EXCLAMATION: return OperatorKind.NOT;\r\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\r\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\r\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\r\n    }\r\n    return OperatorKind.INVALID;\r\n  }\r\n\r\n  /** Converts a unary postfix operator token to the respective operator kind. */\r\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\r\n    switch (token) {\r\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\r\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\r\n    }\r\n    return OperatorKind.INVALID;\r\n  }\r\n}\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Resolver instance. */\r\n  resolver: Resolver;\r\n  /** Array of sources. */\r\n  sources: Source[] = [];\r\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Special native code source. */\r\n  nativeSource: Source;\r\n  /** Special native code file. */\r\n  nativeFile: File;\r\n\r\n  // lookup maps\r\n\r\n  /** Files by unique internal name. */\r\n  filesByName: Map<string,File> = new Map();\r\n  /** Elements by unique internal name in element space. */\r\n  elementsByName: Map<string,Element> = new Map();\r\n  /** Elements by declaration. */\r\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\r\n  /** Element instances by unique internal name. */\r\n  instancesByName: Map<string,Element> = new Map();\r\n  /** Classes wrapping basic types like `i32`. */\r\n  wrapperClasses: Map<Type,Class> = new Map();\r\n  /** Managed classes contained in the program, by id. */\r\n  managedClasses: Map<i32,Class> = new Map();\r\n  /** A set of unique function signatures contained in the program, by id. */\r\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\r\n\r\n  // standard references\r\n\r\n  /** ArrayBufferView reference. */\r\n  arrayBufferViewInstance: Class;\r\n  /** ArrayBuffer instance reference. */\r\n  arrayBufferInstance: Class;\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype;\r\n  /** Set prototype reference. */\r\n  setPrototype: ClassPrototype;\r\n  /** Map prototype reference. */\r\n  mapPrototype: ClassPrototype;\r\n  /** Fixed array prototype reference. */\r\n  fixedArrayPrototype: ClassPrototype;\r\n  /** Int8Array prototype. */\r\n  i8ArrayPrototype: ClassPrototype;\r\n  /** Int16Array prototype. */\r\n  i16ArrayPrototype: ClassPrototype;\r\n  /** Int32Array prototype. */\r\n  i32ArrayPrototype: ClassPrototype;\r\n  /** Int64Array prototype. */\r\n  i64ArrayPrototype: ClassPrototype;\r\n  /** Uint8Array prototype. */\r\n  u8ArrayPrototype: ClassPrototype;\r\n  /** Uint8ClampedArray prototype. */\r\n  u8ClampedArrayPrototype: ClassPrototype;\r\n  /** Uint16Array prototype. */\r\n  u16ArrayPrototype: ClassPrototype;\r\n  /** Uint32Array prototype. */\r\n  u32ArrayPrototype: ClassPrototype;\r\n  /** Uint64Array prototype. */\r\n  u64ArrayPrototype: ClassPrototype;\r\n  /** Float32Array prototype. */\r\n  f32ArrayPrototype: ClassPrototype;\r\n  /** Float64Array prototype. */\r\n  f64ArrayPrototype: ClassPrototype;\r\n  /** String instance reference. */\r\n  stringInstance: Class;\r\n  /** Abort function reference, if not explicitly disabled. */\r\n  abortInstance: Function | null;\r\n\r\n  // runtime references\r\n\r\n  /** RT `__alloc(size: usize, id: u32): usize` */\r\n  allocInstance: Function;\r\n  /** RT `__realloc(ref: usize, newSize: usize): usize` */\r\n  reallocInstance: Function;\r\n  /** RT `__free(ref: usize): void` */\r\n  freeInstance: Function;\r\n  /** RT `__retain(ref: usize): usize` */\r\n  retainInstance: Function;\r\n  /** RT `__release(ref: usize): void` */\r\n  releaseInstance: Function;\r\n  /** RT `__collect(): void` */\r\n  collectInstance: Function;\r\n  /** RT `__visit(ref: usize, cookie: u32): void` */\r\n  visitInstance: Function;\r\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\r\n  typeinfoInstance: Function;\r\n  /** RT `__instanceof(ref: usize, superId: u32): bool` */\r\n  instanceofInstance: Function;\r\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\r\n  allocArrayInstance: Function;\r\n\r\n  /** Next class id. */\r\n  nextClassId: u32 = 0;\r\n  /** Next signature id. */\r\n  nextSignatureId: i32 = 0;\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(\r\n    /** Shared array of diagnostic messages (emitted so far). */\r\n    diagnostics: DiagnosticMessage[] | null = null\r\n  ) {\r\n    super(diagnostics);\r\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY_ENTRY);\r\n    this.nativeSource = nativeSource;\r\n    var nativeFile = new File(this, nativeSource);\r\n    this.nativeFile = nativeFile;\r\n    this.filesByName.set(nativeFile.internalName, nativeFile);\r\n    this.resolver = new Resolver(this);\r\n  }\r\n\r\n  /** Obtains the source matching the specified internal path. */\r\n  getSource(internalPath: string): string | null {\r\n    var sources = this.sources;\r\n    for (let i = 0; i < sources.length; ++i) {\r\n      let source = sources[i];\r\n      if (source.internalPath == internalPath) return source.text;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Writes a common runtime header to the specified buffer. */\r\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\r\n    // BLOCK {\r\n    //   mmInfo: usize // WASM64 TODO\r\n    //   gcInfo: u32\r\n    //   rtId: u32\r\n    //   rtSize: u32\r\n    // }\r\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\r\n    writeI32(payloadSize, buffer, offset);\r\n    writeI32(1, buffer, offset + 4); // RC=1\r\n    writeI32(classInstance.id, buffer, offset + 8);\r\n    writeI32(payloadSize, buffer, offset + 12);\r\n  }\r\n\r\n  /** Gets the size of a runtime header. */\r\n  get runtimeHeaderSize(): i32 {\r\n    return 16;\r\n  }\r\n\r\n  /** Creates a native variable declaration. */\r\n  makeNativeVariableDeclaration(\r\n    /** The simple name of the variable */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `CONST`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): VariableDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createVariableDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      null, null, null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native type declaration. */\r\n  makeNativeTypeDeclaration(\r\n    /** The simple name of the type. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): TypeDeclaration {\r\n    var range = this.nativeSource.range;\r\n    var identifier = Node.createIdentifierExpression(name, range);\r\n    return Node.createTypeDeclaration(\r\n      identifier,\r\n      null,\r\n      Node.createOmittedType(range),\r\n      null, flags, range\r\n    );\r\n  }\r\n\r\n  // a dummy signature for programmatically generated native functions\r\n  private nativeDummySignature: FunctionTypeNode | null = null;\r\n\r\n  /** Creates a native function declaration. */\r\n  makeNativeFunctionDeclaration(\r\n    /** The simple name of the function. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): FunctionDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createFunctionDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      null,\r\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createFunctionType([],\r\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\r\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\r\n          null, false, range\r\n        ),\r\n        null, false, range)\r\n      ),\r\n      null, null, flags, ArrowKind.NONE, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native namespace declaration. */\r\n  makeNativeNamespaceDeclaration(\r\n    /** The simple name of the namespace. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): NamespaceDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createNamespaceDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      [], null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native function. */\r\n  makeNativeFunction(\r\n    /** The simple name of the function. */\r\n    name: string,\r\n    /** Concrete function signature. */\r\n    signature: Signature,\r\n    /** Parent element, usually a file, class or namespace. */\r\n    parent: Element = this.nativeFile,\r\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\r\n    flags: CommonFlags = CommonFlags.NONE,\r\n    /** Decorator flags representing built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ): Function {\r\n    return new Function(\r\n      name,\r\n      new FunctionPrototype(\r\n        name,\r\n        parent,\r\n        this.makeNativeFunctionDeclaration(name, flags),\r\n        decoratorFlags\r\n      ),\r\n      signature\r\n    );\r\n  }\r\n\r\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\r\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\r\n    var elementsByDeclaration = this.elementsByDeclaration;\r\n    return elementsByDeclaration.has(declaration)\r\n      ? elementsByDeclaration.get(declaration)\r\n      : null;\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n\r\n    // register native types\r\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\r\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\r\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\r\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\r\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\r\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\r\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\r\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\r\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\r\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\r\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\r\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\r\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\r\n    this.registerNativeType(CommonSymbols.void_, Type.void);\r\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\r\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\r\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\r\n      CommonSymbols.native,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\r\n      DecoratorFlags.BUILTIN\r\n    ));\r\n    this.nativeFile.add(CommonSymbols.indexof, new TypeDefinition(\r\n      CommonSymbols.indexof,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(CommonSymbols.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\r\n      DecoratorFlags.BUILTIN\r\n    ));\r\n    this.nativeFile.add(CommonSymbols.valueof, new TypeDefinition(\r\n      CommonSymbols.valueof,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(CommonSymbols.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\r\n      DecoratorFlags.BUILTIN\r\n    ));\r\n    this.nativeFile.add(CommonSymbols.returnof, new TypeDefinition(\r\n      CommonSymbols.returnof,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(CommonSymbols.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\r\n      DecoratorFlags.BUILTIN\r\n    ));\r\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\r\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerNativeType(CommonSymbols.anyref, Type.anyref);\r\n\r\n    // register compiler hints\r\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\r\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\r\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\r\n      i64_new(options.noAssert ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\r\n      i64_new(options.memoryBase, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\r\n      i64_new(options.optimizeLevelHint, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\r\n      i64_new(options.shrinkLevelHint, 0));\r\n\r\n    // register feature hints\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\r\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\r\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\r\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\r\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\r\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_TAIL_CALLS, Type.bool,\r\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\r\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\r\n\r\n    // remember deferred elements\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\r\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // initialize relevant declaration-like statements of the entire program\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let file = new File(this, source);\r\n      this.filesByName.set(file.internalName, file);\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORTDEFAULT: {\r\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports * should be linkable now that all files have been processed\r\n    for (let [file, exportsStar] of queuedExportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        let exportStar = exportsStar[i];\r\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\r\n        if (!foreignFile) {\r\n          this.error(\r\n            DiagnosticCode.File_0_not_found,\r\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\r\n          );\r\n          continue;\r\n        }\r\n        file.ensureExportStar(foreignFile);\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\r\n      let queuedImport = queuedImports[i];\r\n      let foreignIdentifier = queuedImport.foreignIdentifier;\r\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\r\n        let element = this.lookupForeign(\r\n          foreignIdentifier.text,\r\n          queuedImport.foreignPath,\r\n          queuedImport.foreignPathAlt,\r\n          queuedExports\r\n        );\r\n        if (element) {\r\n          queuedImport.localFile.add(\r\n            queuedImport.localIdentifier.text,\r\n            element,\r\n            true // isImport\r\n          );\r\n        } else {\r\n          // FIXME: file not found is not reported if this happens?\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\r\n          );\r\n        }\r\n      } else { // i.e. import * as bar from \"./bar\"\r\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\r\n        if (foreignFile) {\r\n          let localFile = queuedImport.localFile;\r\n          let localName = queuedImport.localIdentifier.text;\r\n          localFile.add(\r\n            localName,\r\n            foreignFile.asImportedNamespace(\r\n              localName,\r\n              localFile\r\n            ),\r\n            true // isImport\r\n          );\r\n        } else {\r\n          assert(false); // already reported by the parser not finding the file\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [file, exports] of queuedExports) {\r\n      for (let [exportName, queuedExport] of exports) {\r\n        let localName = queuedExport.localIdentifier.text;\r\n        let foreignPath = queuedExport.foreignPath;\r\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\r\n          let element = this.lookupForeign(\r\n            localName,\r\n            foreignPath,\r\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\r\n            queuedExports\r\n          );\r\n          if (element) {\r\n            file.ensureExport(exportName, element);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.localIdentifier.range,\r\n              foreignPath, localName\r\n            );\r\n          }\r\n        } else { // i.e. export { foo [as bar] }\r\n          let element = file.lookupInSelf(localName);\r\n          if (element) {\r\n            file.ensureExport(exportName, element);\r\n          } else {\r\n            let globalElement = this.lookupGlobal(localName);\r\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\r\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Module_0_has_no_exported_member_1,\r\n                queuedExport.foreignIdentifier.range,\r\n                file.internalName, queuedExport.foreignIdentifier.text\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\r\n    assert(this.nextClassId == 0);\r\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\r\n    assert(this.arrayBufferInstance.id == 0);\r\n    this.stringInstance = this.requireClass(CommonSymbols.String);\r\n    assert(this.stringInstance.id == 1);\r\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\r\n    assert(this.arrayBufferViewInstance.id == 2);\r\n\r\n    // register classes backing basic types\r\n    this.registerWrapperClass(Type.i8, CommonSymbols.I8);\r\n    this.registerWrapperClass(Type.i16, CommonSymbols.I16);\r\n    this.registerWrapperClass(Type.i32, CommonSymbols.I32);\r\n    this.registerWrapperClass(Type.i64, CommonSymbols.I64);\r\n    this.registerWrapperClass(options.isizeType, CommonSymbols.Isize);\r\n    this.registerWrapperClass(Type.u8, CommonSymbols.U8);\r\n    this.registerWrapperClass(Type.u16, CommonSymbols.U16);\r\n    this.registerWrapperClass(Type.u32, CommonSymbols.U32);\r\n    this.registerWrapperClass(Type.u64, CommonSymbols.U64);\r\n    this.registerWrapperClass(options.usizeType, CommonSymbols.Usize);\r\n    this.registerWrapperClass(Type.bool, CommonSymbols.Bool);\r\n    this.registerWrapperClass(Type.f32, CommonSymbols.F32);\r\n    this.registerWrapperClass(Type.f64, CommonSymbols.F64);\r\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonSymbols.V128);\r\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.anyref, CommonSymbols.Anyref);\r\n\r\n    // register views but don't instantiate them yet\r\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\r\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\r\n\r\n    // resolve base prototypes of derived classes\r\n    var resolver = this.resolver;\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let thisPrototype = queuedExtends[i];\r\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\r\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\r\n          this.error(\r\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\r\n          );\r\n        }\r\n        if (\r\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\r\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\r\n          );\r\n        }\r\n        thisPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          extendsNode.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    {\r\n      let globalAliases = options.globalAliases;\r\n      if (globalAliases) {\r\n        for (let [alias, name] of globalAliases) {\r\n          if (!name.length) continue; // explicitly disabled\r\n          let firstChar = name.charCodeAt(0);\r\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\r\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\r\n          } else {\r\n            let elementsByName = this.elementsByName;\r\n            let element = elementsByName.get(name);\r\n            if (element) {\r\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\r\n              elementsByName.set(alias, element);\r\n            }\r\n            else throw new Error(\"no such global element: \" + name);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // register stdlib components\r\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\r\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\r\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\r\n    this.abortInstance = this.lookupFunction(CommonSymbols.abort); // can be disabled\r\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\r\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\r\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\r\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\r\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\r\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\r\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\r\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\r\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\r\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\r\n\r\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\r\n    for (let file of this.filesByName.values()) {\r\n      let exports = file.exports;\r\n      if (exports !== null && file.source.sourceKind == SourceKind.USER_ENTRY) {\r\n        for (let element of exports.values()) this.markModuleExport(element);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Requires that a global library element of the specified kind is present and returns it. */\r\n  private require(name: string, kind: ElementKind): Element {\r\n    var element = this.lookupGlobal(name);\r\n    if (!element) throw new Error(\"missing \" + name);\r\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\r\n    return element;\r\n  }\r\n\r\n  /** Requires that a non-generic global class is present and returns it. */\r\n  private requireClass(name: string): Class {\r\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\r\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\r\n    if (!resolved) throw new Error(\"invalid \" + name);\r\n    return resolved;\r\n  }\r\n\r\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\r\n  private lookupFunction(name: string): Function | null {\r\n    var prototype = this.lookupGlobal(name);\r\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\r\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n  }\r\n\r\n  /** Requires that a global function is present and returns it. */\r\n  private requireFunction(name: string, typeArguments: Type[] | null = null): Function {\r\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\r\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, typeArguments);\r\n    if (!resolved) throw new Error(\"invalid \" + name);\r\n    return resolved;\r\n  }\r\n\r\n  /** Marks an element and its children as a module export. */\r\n  private markModuleExport(element: Element): void {\r\n    element.set(CommonFlags.MODULE_EXPORT);\r\n    switch (element.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\r\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\r\n        if (getterPrototype) this.markModuleExport(getterPrototype);\r\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\r\n        if (setterPrototype) this.markModuleExport(setterPrototype);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY:\r\n      case ElementKind.FUNCTION:\r\n      case ElementKind.FIELD:\r\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\r\n    }\r\n    {\r\n      let members = element.members;\r\n      if (members) for (let member of members.values()) this.markModuleExport(member);\r\n    }\r\n  }\r\n\r\n  /** Registers a native type with the program. */\r\n  private registerNativeType(name: string, type: Type): void {\r\n    var element = new TypeDefinition(\r\n      name,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\r\n      DecoratorFlags.BUILTIN\r\n    );\r\n    element.setType(type);\r\n    this.nativeFile.add(name, element);\r\n  }\r\n\r\n  /** Registers the backing class of a native type. */\r\n  private registerWrapperClass(type: Type, className: string): void {\r\n    var wrapperClasses = this.wrapperClasses;\r\n    assert(!type.classReference && !wrapperClasses.has(type));\r\n    var element = this.lookupGlobal(className);\r\n    if (!element) return;\r\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n    var classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\r\n    if (!classElement) return;\r\n    classElement.wrappedType = type;\r\n    wrapperClasses.set(type, classElement);\r\n  }\r\n\r\n  /** Registers a constant integer value within the global scope. */\r\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\r\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\r\n    var global = new Global(\r\n      name,\r\n      this.nativeFile,\r\n      DecoratorFlags.NONE,\r\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\r\n    );\r\n    global.setConstantIntegerValue(value, type);\r\n    this.nativeFile.add(name, global);\r\n  }\r\n\r\n  /** Registers a constant float value within the global scope. */\r\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\r\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\r\n    var global = new Global(\r\n      name,\r\n      this.nativeFile,\r\n      DecoratorFlags.NONE,\r\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\r\n    );\r\n    global.setConstantFloatValue(value, type);\r\n    this.nativeFile.add(name, global);\r\n  }\r\n\r\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\r\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\r\n    var elementsByName = this.elementsByName;\r\n    if (elementsByName.has(name)) {\r\n      let existing = elementsByName.get(name)!;\r\n      // NOTE: this is effectively only performed when merging native types with\r\n      // their respective namespaces in std/builtins, but can also trigger when a\r\n      // user has multiple global elements of the same name in different files,\r\n      // which might result in unexpected shared symbols accross files. considering\r\n      // this a wonky feature for now that we might want to revisit later.\r\n      if (existing !== element) {\r\n        let merged = tryMerge(existing, element);\r\n        if (!merged) {\r\n          if (isDeclaredElement(existing.kind)) {\r\n            this.errorRelated(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              element.identifierNode.range,\r\n              (<DeclaredElement>existing).declaration.name.range,\r\n              name\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              element.identifierNode.range, name\r\n            );\r\n          }\r\n          return element;\r\n        }\r\n        element = merged;\r\n      }\r\n    }\r\n    elementsByName.set(name, element);\r\n    return element;\r\n  }\r\n\r\n  /** Looks up the element of the specified name in the global scope. */\r\n  lookupGlobal(name: string): Element | null {\r\n    var elements = this.elementsByName;\r\n    if (elements.has(name)) return elements.get(name);\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\r\n  requireGlobal(name: string): Element {\r\n    var elements = this.elementsByName;\r\n    if (elements.has(name)) return elements.get(name)!;\r\n    throw new Error(\"missing global\");\r\n  }\r\n\r\n  /** Tries to locate a foreign file given its normalized path. */\r\n  private lookupForeignFile(\r\n    /** Normalized path to the other file. */\r\n    foreignPath: string,\r\n    /** Alternative normalized path to the other file. */\r\n    foreignPathAlt: string\r\n  ): File | null {\r\n    var filesByName = this.filesByName;\r\n    return filesByName.has(foreignPath)\r\n         ? filesByName.get(foreignPath)!\r\n         : filesByName.has(foreignPathAlt)\r\n         ? filesByName.get(foreignPathAlt)!\r\n         : null;\r\n  }\r\n\r\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\r\n  private lookupForeign(\r\n    /** Identifier within the other file. */\r\n    foreignName: string,\r\n    /** Normalized path to the other file. */\r\n    foreignPath: string,\r\n    /** Alternative normalized path to the other file. */\r\n    foreignPathAlt: string,\r\n    /** So far queued exports. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): DeclaredElement | null {\r\n    do {\r\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\r\n      if (!foreignFile) return null; // no such file\r\n\r\n      // search already resolved exports\r\n      let element = foreignFile.lookupExport(foreignName);\r\n      if (element) return element;\r\n\r\n      // otherwise traverse queued exports\r\n      if (queuedExports.has(foreignFile)) {\r\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\r\n        if (fileQueuedExports.has(foreignName)) {\r\n          let queuedExport = fileQueuedExports.get(foreignName)!;\r\n          if (queuedExport.foreignPath) { // imported from another file\r\n            foreignName = queuedExport.localIdentifier.text;\r\n            foreignPath = queuedExport.foreignPath;\r\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\r\n            continue;\r\n          } else { // local element of this file\r\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\r\n            if (element) return element;\r\n          }\r\n        }\r\n      }\r\n      break;\r\n    } while (true);\r\n    return null;\r\n  }\r\n\r\n  /** Validates that only supported decorators are present. */\r\n  private checkDecorators(\r\n    /** Decorators present on an element. */\r\n    decorators: DecoratorNode[] | null,\r\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\r\n    acceptedFlags: DecoratorFlags\r\n  ): DecoratorFlags {\r\n    var flags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        let kind = DecoratorKind.fromNode(decorator.name);\r\n        let flag = DecoratorFlags.fromKind(kind);\r\n        if (flag) {\r\n          if (flag == DecoratorFlags.BUILTIN) {\r\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\r\n              this.error(\r\n                DiagnosticCode.Decorator_0_is_not_valid_here,\r\n                decorator.range, decorator.name.range.toString()\r\n              );\r\n            } else {\r\n              flags |= flag;\r\n            }\r\n          } else if (!(acceptedFlags & flag)) {\r\n            this.error(\r\n              DiagnosticCode.Decorator_0_is_not_valid_here,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          } else if (flags & flag) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_decorator,\r\n              decorator.range\r\n            );\r\n          } else {\r\n            flags |= flag;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return flags;\r\n  }\r\n\r\n  /** Initializes a class declaration. */\r\n  private initializeClass(\r\n    /** The declaration to initialize. */\r\n    declaration: ClassDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: ClassPrototype[],\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): ClassPrototype | null {\r\n    var name = declaration.name.text;\r\n    var element = new ClassPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL |\r\n        DecoratorFlags.SEALED |\r\n        DecoratorFlags.UNMANAGED\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      // cannot implement interfaces when unmanaged\r\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n      } else if (numImplementsTypes) {\r\n        // remember classes that implement interfaces\r\n        for (let i = 0; i < numImplementsTypes; ++i) {\r\n          this.warning(\r\n            DiagnosticCode.Not_implemented,\r\n            implementsTypes[i].range\r\n          );\r\n        }\r\n        queuedImplements.push(element);\r\n      }\r\n    }\r\n    // remember classes that extend another class\r\n    if (declaration.extendsType) queuedExtends.push(element);\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\r\n        default: assert(false); // class member expected\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Initializes a field of a class or interface. */\r\n  private initializeField(\r\n    /** The declaration to initialize. */\r\n    declaration: FieldDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var element: DeclaredElement;\r\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\r\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\r\n      element = new Global(\r\n        name,\r\n        parent,\r\n        this.checkDecorators(decorators,\r\n          (declaration.is(CommonFlags.READONLY)\r\n            ? DecoratorFlags.INLINE\r\n            : DecoratorFlags.NONE\r\n          ) | DecoratorFlags.LAZY | DecoratorFlags.UNSAFE\r\n        ),\r\n        declaration\r\n      );\r\n      if (!parent.add(name, element)) return;\r\n    } else { // actual instance field\r\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\r\n      element = new FieldPrototype(\r\n        name,\r\n        parent,\r\n        declaration,\r\n        this.checkDecorators(decorators, DecoratorFlags.UNSAFE)\r\n      );\r\n      if (!parent.addInstance(name, element)) return;\r\n    }\r\n  }\r\n\r\n  /** Initializes a method of a class or interface. */\r\n  private initializeMethod(\r\n    /** The declaration to initialize. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var isStatic = declaration.is(CommonFlags.STATIC);\r\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\r\n    if (!declaration.is(CommonFlags.GENERIC)) {\r\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\r\n                    |  DecoratorFlags.OPERATOR_PREFIX\r\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\r\n    }\r\n    var element = new FunctionPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, acceptedFlags)\r\n    );\r\n    if (isStatic) { // global function\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n      if (!parent.add(name, element)) return;\r\n    } else { // actual instance method\r\n      if (!parent.addInstance(name, element)) return;\r\n    }\r\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\r\n  }\r\n\r\n  /** Checks that operator overloads are generally valid, if present. */\r\n  private checkOperatorOverloads(\r\n    /** Decorators to check. */\r\n    decorators: DecoratorNode[] | null,\r\n    /** Decorated method. */\r\n    prototype: FunctionPrototype,\r\n    /** Parent class. */\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\r\n        switch (decorator.decoratorKind) {\r\n          case DecoratorKind.OPERATOR:\r\n          case DecoratorKind.OPERATOR_BINARY:\r\n          case DecoratorKind.OPERATOR_PREFIX:\r\n          case DecoratorKind.OPERATOR_POSTFIX: {\r\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n            if (numArgs == 1) {\r\n              let firstArg = (<Expression[]>decorator.arguments)[0];\r\n              if (\r\n                firstArg.kind == NodeKind.LITERAL &&\r\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n              ) {\r\n                let text = (<StringLiteralExpression>firstArg).value;\r\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\r\n                if (kind == OperatorKind.INVALID) {\r\n                  this.error(\r\n                    DiagnosticCode._0_is_not_a_valid_operator,\r\n                    firstArg.range, text\r\n                  );\r\n                } else {\r\n                  let overloads = classPrototype.overloadPrototypes;\r\n                  if (overloads.has(kind)) {\r\n                    this.error(\r\n                      DiagnosticCode.Duplicate_function_implementation,\r\n                      firstArg.range\r\n                    );\r\n                  } else {\r\n                    prototype.operatorKind = kind;\r\n                    overloads.set(kind, prototype);\r\n                  }\r\n                }\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.String_literal_expected,\r\n                  firstArg.range\r\n                );\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                decorator.range, \"1\", numArgs.toString(10)\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\r\n  private ensureProperty(\r\n    /** The declaration of the getter or setter introducing the property. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): PropertyPrototype | null {\r\n    var name = declaration.name.text;\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let parentMembers = parent.members;\r\n      if (parentMembers && parentMembers.has(name)) {\r\n        let element = <Element>parentMembers.get(name)!;\r\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\r\n      } else {\r\n        let element = new PropertyPrototype(name, parent, declaration);\r\n        if (!parent.add(name, element)) return null;\r\n        return element;\r\n      }\r\n    } else {\r\n      let parentMembers = parent.instanceMembers;\r\n      if (parentMembers && parentMembers.has(name)) {\r\n        let element = <Element>parentMembers.get(name);\r\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\r\n      } else {\r\n        let element = new PropertyPrototype(name, parent, declaration);\r\n        if (!parent.addInstance(name, element)) return null;\r\n        return element;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Duplicate_property_0,\r\n      declaration.name.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Initializes a property of a class. */\r\n  private initializeProperty(\r\n    /** The declaration of the getter or setter. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var property = this.ensureProperty(declaration, parent);\r\n    if (!property) return;\r\n    var name = declaration.name.text;\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    if (isGetter) {\r\n      if (property.getterPrototype) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_property_0,\r\n          declaration.name.range, name\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      if (property.setterPrototype) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_property_0,\r\n          declaration.name.range, name\r\n        );\r\n        return;\r\n      }\r\n    }\r\n    var element = new FunctionPrototype(\r\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\r\n      property,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\r\n      )\r\n    );\r\n    if (isGetter) {\r\n      property.getterPrototype = element;\r\n    } else {\r\n      property.setterPrototype = element;\r\n    }\r\n  }\r\n\r\n  /** Initializes an enum. */\r\n  private initializeEnum(\r\n    /** The declaration to initialize. */\r\n    declaration: EnumDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): Enum | null {\r\n    var name = declaration.name.text;\r\n    var element = new Enum(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL |\r\n        DecoratorFlags.INLINE |\r\n        DecoratorFlags.LAZY\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Initializes an enum value. */\r\n  private initializeEnumValue(\r\n    /** The declaration to initialize. */\r\n    declaration: EnumValueDeclaration,\r\n    /** Parent enum. */\r\n    parent: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new EnumValue(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.NONE\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n  }\r\n\r\n  /** Initializes an `export` statement. */\r\n  private initializeExports(\r\n    /** The statement to initialize. */\r\n    statement: ExportStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>,\r\n    /** So far queued `export *`s. */\r\n    queuedExportsStar: Map<File,QueuedExportStar[]>\r\n  ): void {\r\n    var members = statement.members;\r\n    if (members) { // export { foo, bar } [from \"./baz\"]\r\n      for (let i = 0, k = members.length; i < k; ++i) {\r\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\r\n      }\r\n    } else { // export * from \"./baz\"\r\n      let queued: QueuedExportStar[];\r\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\r\n      else queuedExportsStar.set(parent, queued = []);\r\n      let foreignPath = assert(statement.internalPath); // must be set for export *\r\n      queued.push(new QueuedExportStar(\r\n        foreignPath,\r\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n          : foreignPath + INDEX_SUFFIX,\r\n        assert(statement.path)\r\n      ));\r\n    }\r\n  }\r\n\r\n  /** Initializes a single `export` member. Does not handle `export *`. */\r\n  private initializeExport(\r\n    /** The member to initialize. */\r\n    member: ExportMember,\r\n    /** Local file. */\r\n    localFile: File,\r\n    /** Path to the other file, if present. */\r\n    foreignPath: string | null,\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var localName = member.localName.text;\r\n    var foreignName = member.exportedName.text;\r\n\r\n    // check for duplicates\r\n    var element = localFile.lookupExport(foreignName);\r\n    if (element) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.exportedName.range, foreignName\r\n      );\r\n      return;\r\n    }\r\n    // local element, i.e. export { foo [as bar] }\r\n    if (foreignPath === null) {\r\n\r\n      // resolve right away if the local element already exists\r\n      if (element = localFile.lookupInSelf(localName)) {\r\n        localFile.ensureExport(foreignName, element);\r\n\r\n      // otherwise queue it\r\n      } else {\r\n        let queued: Map<string,QueuedExport>;\r\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\r\n        else queuedExports.set(localFile, queued = new Map());\r\n        queued.set(foreignName, new QueuedExport(\r\n          member.localName,\r\n          member.exportedName,\r\n          null, null\r\n        ));\r\n      }\r\n\r\n    // foreign element, i.e. export { foo } from \"./bar\"\r\n    } else {\r\n      let queued: Map<string,QueuedExport>;\r\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\r\n      else queuedExports.set(localFile, queued = new Map());\r\n      queued.set(foreignName, new QueuedExport(\r\n        member.localName,\r\n        member.exportedName,\r\n        foreignPath,\r\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n          : foreignPath + INDEX_SUFFIX\r\n      ));\r\n    }\r\n  }\r\n\r\n  private initializeExportDefault(\r\n    /** The statement to initialize. */\r\n    statement: ExportDefaultStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: Array<ClassPrototype>,\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): void {\r\n    var declaration = statement.declaration;\r\n    var element: DeclaredElement | null = null;\r\n    switch (declaration.kind) {\r\n      case NodeKind.ENUMDECLARATION: {\r\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTIONDECLARATION: {\r\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\r\n        break;\r\n      }\r\n      case NodeKind.CLASSDECLARATION: {\r\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\r\n        break;\r\n      }\r\n      case NodeKind.INTERFACEDECLARATION: {\r\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\r\n        break;\r\n      }\r\n      case NodeKind.NAMESPACEDECLARATION: {\r\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (element) {\r\n      let exports = parent.exports;\r\n      if (!exports) parent.exports = exports = new Map();\r\n      else {\r\n        if (exports.has(\"default\")) {\r\n          let existing = exports.get(\"default\")!;\r\n          this.errorRelated(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range,\r\n            existing.declaration.name.range,\r\n            \"default\"\r\n          );\r\n          return;\r\n        }\r\n      }\r\n      exports.set(\"default\", element);\r\n    }\r\n  }\r\n\r\n  /** Initializes an `import` statement. */\r\n  private initializeImports(\r\n    /** The statement to initialize. */\r\n    statement: ImportStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `import`s. */\r\n    queuedImports: QueuedImport[],\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          parent,\r\n          statement.internalPath,\r\n          queuedImports,\r\n          queuedExports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\r\n      queuedImports.push(new QueuedImport(\r\n        parent,\r\n        statement.namespaceName,\r\n        null, // indicates import *\r\n        statement.internalPath,\r\n        statement.internalPath + INDEX_SUFFIX\r\n      ));\r\n    } else {\r\n      // import \"./foo\"\r\n    }\r\n  }\r\n\r\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\r\n  private initializeImport( // { foo [as bar] }\r\n    /** The declaration to initialize. */\r\n    declaration: ImportDeclaration,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** Path to the other file. */\r\n    foreignPath: string,\r\n    /** So far queued `import`s. */\r\n    queuedImports: QueuedImport[],\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n      : foreignPath + INDEX_SUFFIX;\r\n\r\n    // resolve right away if the element exists\r\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\r\n    if (element) {\r\n      parent.add(declaration.name.text, element, true);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    queuedImports.push(new QueuedImport(\r\n      parent,\r\n      declaration.name,\r\n      declaration.foreignName,\r\n      foreignPath,\r\n      foreignPathAlt\r\n    ));\r\n  }\r\n\r\n  /** Initializes a function. Does not handle methods. */\r\n  private initializeFunction(\r\n    /** The declaration to initialize. */\r\n    declaration: FunctionDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): FunctionPrototype | null {\r\n    var name = declaration.name.text;\r\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\r\n    if (declaration.is(CommonFlags.AMBIENT)) {\r\n      validDecorators |= DecoratorFlags.EXTERNAL;\r\n    } else {\r\n      validDecorators |= DecoratorFlags.INLINE;\r\n    }\r\n    if (!declaration.is(CommonFlags.INSTANCE)) {\r\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\r\n        validDecorators |= DecoratorFlags.GLOBAL;\r\n      }\r\n    }\r\n    var element = new FunctionPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, validDecorators)\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n    return element;\r\n  }\r\n\r\n  /** Initializes an interface. */\r\n  private initializeInterface(\r\n    /** The declaration to initialize. */\r\n    declaration: InterfaceDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): InterfacePrototype | null {\r\n    var name = declaration.name.text;\r\n    var element = new InterfacePrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\r\n          }\r\n          break;\r\n        }\r\n        default: assert(false); // interface member expected\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Initializes a namespace. */\r\n  private initializeNamespace(\r\n    /** The declaration to initialize. */\r\n    declaration: NamespaceDeclaration,\r\n    /** Parent element, usually a file or another namespace. */\r\n    parent: Element,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: ClassPrototype[],\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): Namespace | null {\r\n    var name = declaration.name.text;\r\n    var original = new Namespace(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\r\n    );\r\n    if (!parent.add(name, original)) return null;\r\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>member, original);\r\n          break;\r\n        }\r\n        default: assert(false); // namespace member expected\r\n      }\r\n    }\r\n    if (original != element) copyMembers(original, element); // retain original parent\r\n    return element;\r\n  }\r\n\r\n  /** Initializes a `type` definition. */\r\n  private initializeTypeDefinition(\r\n    /** The declaration to initialize. */\r\n    declaration: TypeDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new TypeDefinition(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\r\n    );\r\n    parent.add(name, element); // reports\r\n  }\r\n\r\n  /** Initializes a variable statement. */\r\n  private initializeVariables(\r\n    /** The statement to initialize. */\r\n    statement: VariableStatement,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\r\n      if (declaration.is(CommonFlags.DECLARE)) {\r\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\r\n      }\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        acceptedFlags |= DecoratorFlags.INLINE;\r\n      }\r\n      let element = new Global(\r\n        name,\r\n        parent,\r\n        this.checkDecorators(declaration.decorators, acceptedFlags),\r\n        declaration\r\n      );\r\n      if (!parent.add(name, element)) continue; // reports\r\n    }\r\n  }\r\n\r\n  /** Determines the element type of a built-in array. */\r\n  // determineBuiltinArrayType(target: Class): Type | null {\r\n  //   switch (target.internalName) {\r\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\r\n  //     case BuiltinSymbols.Uint8ClampedArray:\r\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\r\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\r\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\r\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\r\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\r\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\r\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\r\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\r\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\r\n  //   }\r\n  //   var current: Class | null = target;\r\n  //   var arrayPrototype = this.arrayPrototype;\r\n  //   do {\r\n  //     if (current.prototype == arrayPrototype) { // Array<T>\r\n  //       let typeArguments = assert(current.typeArguments);\r\n  //       assert(typeArguments.length == 1);\r\n  //       return typeArguments[0];\r\n  //     }\r\n  //   } while (current = current.base);\r\n  //   return null;\r\n  // }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link PropertyPrototype}.  */\r\n  PROPERTY_PROTOTYPE,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE,\r\n  /** A {@link File}. */\r\n  FILE,\r\n  /** A {@link TypeDefinition}.  */\r\n  TYPEDEFINITION,\r\n  /** An {@link IndexSignature}. */\r\n  INDEXSIGNATURE\r\n}\r\n\r\n/** Indicates built-in decorators that are present. */\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is a binary operator overload. */\r\n  OPERATOR_BINARY = 1 << 1,\r\n  /** Is a unary prefix operator overload. */\r\n  OPERATOR_PREFIX = 1 << 2,\r\n  /** Is a unary postfix operator overload. */\r\n  OPERATOR_POSTFIX = 1 << 3,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 4,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 5,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 6,\r\n  /** Is using a different external name. */\r\n  EXTERNAL = 1 << 7,\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 8,\r\n  /** Is compiled lazily. */\r\n  LAZY = 1 << 9,\r\n  /** Is considered unsafe code. */\r\n  UNSAFE = 1 << 10\r\n}\r\n\r\nexport namespace DecoratorFlags {\r\n\r\n  /** Translates a decorator kind to the respective decorator flag. */\r\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\r\n    switch (kind) {\r\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n      case DecoratorKind.OPERATOR:\r\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\r\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\r\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\r\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n      case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\r\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\r\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\r\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\r\n      default: return DecoratorFlags.NONE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Parent element. */\r\n  parent: Element;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Member elements. */\r\n  members: Map<string,DeclaredElement> | null = null;\r\n  /** Shadowing type in type space, if any. */\r\n  shadowType: TypeDefinition | null = null;\r\n\r\n  /** Constructs a new program element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    public kind: ElementKind,\r\n    /** Simple name. */\r\n    public name: string,\r\n    /** Internal name referring to this element. */\r\n    public internalName: string,\r\n    /** Containing {@link Program}. */\r\n    public program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null\r\n  ) {\r\n    this.program = program;\r\n    this.name = name;\r\n    this.internalName = internalName;\r\n    if (parent) {\r\n      this.parent = parent;\r\n    } else {\r\n      assert(this.kind == ElementKind.FILE);\r\n      this.parent = this; // special case to keep this.parent non-nullable\r\n    }\r\n  }\r\n\r\n  /** Gets the enclosing file. */\r\n  get file(): File {\r\n    var current: Element = this;\r\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\r\n    while (true);\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Unsets the specific flag or flags. */\r\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n\r\n  /** Looks up the element with the specified name within this element. */\r\n  lookupInSelf(name: string): DeclaredElement | null {\r\n    var members = this.members;\r\n    if (members && members.has(name)) return members.get(name)!;\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the element with the specified name relative to this element, like in JS. */\r\n  abstract lookup(name: string): Element | null;\r\n\r\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\r\n  add(name: string, element: DeclaredElement): bool {\r\n    var originalDeclaration = element.declaration;\r\n    var members = this.members;\r\n    if (!members) this.members = members = new Map();\r\n    else if (members.has(name)) {\r\n      let existing = members.get(name)!;\r\n      if (existing.parent !== this) {\r\n        // override non-own element\r\n      } else {\r\n        let merged = tryMerge(existing, element);\r\n        if (merged) {\r\n          element = merged; // use merged element\r\n        } else {\r\n          if (isDeclaredElement(existing.kind)) {\r\n            this.program.errorRelated(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              element.identifierNode.range,\r\n              (<DeclaredElement>existing).declaration.name.range,\r\n              element.identifierNode.text\r\n            );\r\n          } else {\r\n            this.program.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              element.identifierNode.range, element.identifierNode.text\r\n            );\r\n          }\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    members.set(name, element);\r\n    var program = this.program;\r\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\r\n      // prefer unbound prototypes in global lookup maps\r\n      program.elementsByName.set(element.internalName, element);\r\n      program.elementsByDeclaration.set(originalDeclaration, element);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** Returns a string representation of this element. */\r\n  toString(): string {\r\n    return ElementKind[this.kind] + \":\" + this.internalName;\r\n  }\r\n}\r\n\r\n// Kinds of all declared elements\r\nvar declaredElements = new Set<ElementKind>();\r\n\r\n/** Tests if the specified element kind indicates a declared element. */\r\nexport function isDeclaredElement(kind: ElementKind): bool {\r\n  return declaredElements.has(kind);\r\n}\r\n\r\n/** Base class of elements with an associated declaration statement. */\r\nexport abstract class DeclaredElement extends Element {\r\n\r\n  /** Constructs a new declared program element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Internal name referring to this element. */\r\n    internalName: string,\r\n    /** Containing {@link Program}. */\r\n    program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null,\r\n    /** Declaration reference. */\r\n    public declaration: DeclarationStatement\r\n  ) {\r\n    super(kind, name, internalName, program, parent);\r\n    declaredElements.add(kind);\r\n    // It is necessary to have access to identifiers of all members and exports\r\n    // for reporting purposes and this is the lowest common denominator. Comes\r\n    // at the expense of not having more specific type information in derived\r\n    // classes, though. Instead, derived classes implement getters for other\r\n    // important AST nodes directly through manual casting, allowing the resolver\r\n    // etc. to not worry about actual declarations.\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags; // inherit\r\n  }\r\n\r\n  /** Tests if this element is a library element. */\r\n  get isDeclaredInLibrary(): bool {\r\n    return this.declaration.range.source.isLibrary;\r\n  }\r\n\r\n  /** Gets the associated identifier node. */\r\n  get identifierNode(): IdentifierExpression {\r\n    return this.declaration.name;\r\n  }\r\n\r\n  /** Gets the assiciated decorator nodes. */\r\n  get decoratorNodes(): DecoratorNode[] | null {\r\n    return this.declaration.decorators;\r\n  }\r\n}\r\n\r\n// Kinds of all typed elements\r\nvar typedElements = new Set<ElementKind>();\r\n\r\n/** Checks if the specified element kind indicates a typed element. */\r\nexport function isTypedElement(kind: ElementKind): bool {\r\n  return typedElements.has(kind);\r\n}\r\n\r\n/** Base class of elements that can be resolved to a concrete type. */\r\nexport abstract class TypedElement extends DeclaredElement {\r\n\r\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\r\n  type: Type = Type.void;\r\n\r\n  constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Internal name referring to this element. */\r\n    internalName: string,\r\n    /** Containing {@link Program}. */\r\n    program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null,\r\n    /** Declaration reference. */\r\n    declaration: DeclarationStatement\r\n  ) {\r\n    super(kind, name, internalName, program, parent, declaration);\r\n    typedElements.add(kind);\r\n  }\r\n\r\n  /** Sets the resolved type of this element. */\r\n  setType(type: Type): void {\r\n    assert(!this.is(CommonFlags.RESOLVED));\r\n    this.type = type;\r\n    this.set(CommonFlags.RESOLVED);\r\n  }\r\n}\r\n\r\n/** A file representing the implicit top-level namespace of a source. */\r\nexport class File extends Element {\r\n\r\n  /** File exports. */\r\n  exports: Map<string,DeclaredElement> | null = null;\r\n  /** File re-exports. */\r\n  exportsStar: File[] | null = null;\r\n  /** Top-level start function of this file. */\r\n  startFunction: Function;\r\n\r\n  /** Constructs a new file. */\r\n  constructor(\r\n    /** Program this file belongs to. */\r\n    program: Program,\r\n    /** Source of this file. */\r\n    public source: Source\r\n  ) {\r\n    super(\r\n      ElementKind.FILE,\r\n      source.normalizedPath,\r\n      source.internalPath,\r\n      program,\r\n      null // special case for files\r\n    );\r\n    this.source = source;\r\n    assert(!program.filesByName.has(this.internalName));\r\n    program.filesByName.set(this.internalName, this);\r\n    var startFunction = this.program.makeNativeFunction(\r\n      \"start:\" + this.internalName,\r\n      new Signature(program, null, Type.void),\r\n      this\r\n    );\r\n    startFunction.internalName = startFunction.name;\r\n    this.startFunction = startFunction;\r\n  }\r\n\r\n  /* @override */\r\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\r\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\r\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\r\n    }\r\n    if (!super.add(name, element)) return false;\r\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\r\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\r\n      this.ensureExport(\r\n        element.name,\r\n        element\r\n      );\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /* @override */\r\n  lookupInSelf(name: string): DeclaredElement | null {\r\n    var element = super.lookupInSelf(name);\r\n    if (element) return element;\r\n    var exportsStar = this.exportsStar;\r\n    if (exportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    var element = this.lookupInSelf(name);\r\n    if (element) return element;\r\n    return this.program.lookupGlobal(name);\r\n  }\r\n\r\n  /** Ensures that an element is an export of this file. */\r\n  ensureExport(name: string, element: DeclaredElement): void {\r\n    var exports = this.exports;\r\n    if (!exports) this.exports = exports = new Map();\r\n    exports.set(name, element);\r\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\r\n  }\r\n\r\n  /** Ensures that another file is a re-export of this file. */\r\n  ensureExportStar(file: File): void {\r\n    var exportsStar = this.exportsStar;\r\n    if (!exportsStar) this.exportsStar = exportsStar = [];\r\n    else if (exportsStar.includes(file)) return;\r\n    exportsStar.push(file);\r\n  }\r\n\r\n  /** Looks up the export of the specified name. */\r\n  lookupExport(name: string): DeclaredElement | null {\r\n    var exports = this.exports;\r\n    if (exports && exports.has(name)) return exports.get(name)!;\r\n    var exportsStar = this.exportsStar;\r\n    if (exportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        let element = exportsStar[i].lookupExport(name);\r\n        if (element) return element;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Creates an imported namespace from this file. */\r\n  asImportedNamespace(name: string, parent: Element): Namespace {\r\n    var ns = new Namespace(\r\n      name,\r\n      parent,\r\n      this.program.makeNativeNamespaceDeclaration(name)\r\n    );\r\n    var exports = this.exports;\r\n    if (exports) {\r\n      for (let [memberName, member] of exports) {\r\n        ns.add(memberName, member);\r\n      }\r\n    }\r\n    return ns;\r\n  }\r\n}\r\n\r\n/** A type definition. */\r\nexport class TypeDefinition extends TypedElement {\r\n\r\n  /** Constructs a new type definition. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: TypeDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.TYPEDEFINITION,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<TypeDeclaration>this.declaration).typeParameters;\r\n  }\r\n\r\n  /** Gets the associated type node. */\r\n  get typeNode(): TypeNode {\r\n    return (<TypeDeclaration>this.declaration).type;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A namespace that differs from a file in being user-declared with a name. */\r\nexport class Namespace extends DeclaredElement {\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or another namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: NamespaceDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.NAMESPACE,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.lookupInSelf(name)\r\n        || this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends TypedElement {\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: EnumDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.ENUM,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.setType(Type.i32);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.lookupInSelf(name)\r\n        || this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** Indicates the kind of an inlined constant value. */\r\nexport const enum ConstantValueKind {\r\n  /** No constant value. */\r\n  NONE,\r\n  /** Constant integer value. */\r\n  INTEGER,\r\n  /** Constant float value. */\r\n  FLOAT\r\n}\r\n\r\n/** Base class of all variable-like program elements. */\r\nexport abstract class VariableLikeElement extends TypedElement {\r\n\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  /** Constructs a new variable-like element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or class. */\r\n    parent: Element,\r\n    /** Declaration reference. Creates a native declaration if omitted. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      kind,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.flags = declaration.flags;\r\n  }\r\n\r\n  /** Gets the associated type node.s */\r\n  get typeNode(): TypeNode | null {\r\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\r\n  }\r\n\r\n  /** Gets the associated initializer node. */\r\n  get initializerNode(): Expression | null {\r\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\r\n  }\r\n\r\n  /** Applies a constant integer value to this element. */\r\n  setConstantIntegerValue(value: I64, type: Type): void {\r\n    assert(type.is(TypeFlags.INTEGER));\r\n    this.type = type;\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\r\n  }\r\n\r\n  /** Applies a constant float value to this element. */\r\n  setConstantFloatValue(value: f64, type: Type): void {\r\n    assert(type.is(TypeFlags.FLOAT));\r\n    this.type = type;\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\r\n  }\r\n\r\n  /** @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends VariableLikeElement {\r\n\r\n  /** Constructs a new enum value. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent enum. */\r\n    parent: Enum,\r\n    /** Declaration reference. */\r\n    declaration: EnumValueDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.ENUMVALUE,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.setType(Type.i32);\r\n  }\r\n\r\n  /** Whether this enum value is immutable. */\r\n  isImmutable: bool = false;\r\n\r\n  /** Gets the associated value node. */\r\n  get valueNode(): Expression | null {\r\n    return (<EnumValueDeclaration>this.declaration).value;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  /** Constructs a new global variable. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or static class. */\r\n    parent: Element,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags,\r\n    /** Declaration reference. Creates a native declaration if omitted. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      ElementKind.GLOBAL,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n  /** Constructs a new function parameter. */\r\n  constructor(\r\n    /** Parameter name. */\r\n    public name: string,\r\n    /** Parameter type. */\r\n    public type: Type,\r\n    /** Parameter initializer, if present. */\r\n    public initializer: Expression | null = null\r\n  ) {}\r\n}\r\n\r\n/** A local variable. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  /** Constructs a new local variable. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\r\n    public index: i32,\r\n    /** Resolved type. */\r\n    type: Type,\r\n    /** Parent function. */\r\n    parent: Function,\r\n    /** Declaration reference. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      ElementKind.LOCAL,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.index = index;\r\n    assert(type != Type.void);\r\n    this.setType(type);\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends DeclaredElement {\r\n\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n  /** Already resolved instances. */\r\n  instances: Map<string,Function> | null = null;\r\n\r\n  /** Clones of this prototype that are bounds to specific classes. */\r\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    /** Simple name */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or class (if a method). */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: FunctionDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<FunctionDeclaration>this.declaration).typeParameters;\r\n  }\r\n\r\n  /** Gets the associated function type node. */\r\n  get functionTypeNode(): FunctionTypeNode {\r\n    return (<FunctionDeclaration>this.declaration).signature;\r\n  }\r\n\r\n  /** Gets the associated body node. */\r\n  get bodyNode(): Statement | null {\r\n    return (<FunctionDeclaration>this.declaration).body;\r\n  }\r\n\r\n  /** Gets the arrow function kind. */\r\n  get arrowKind(): ArrowKind {\r\n    return (<FunctionDeclaration>this.declaration).arrowKind;\r\n  }\r\n\r\n  /** Tests if this prototype is bound to a class. */\r\n  get isBound(): bool {\r\n    var parent = this.parent;\r\n    return parent.kind == ElementKind.CLASS\r\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\r\n  }\r\n\r\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\r\n  toBound(classInstance: Class): FunctionPrototype {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    assert(!this.isBound);\r\n    var boundPrototypes = this.boundPrototypes;\r\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\r\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\r\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\r\n    var bound = new FunctionPrototype(\r\n      this.name,\r\n      classInstance, // !\r\n      <MethodDeclaration>declaration,\r\n      this.decoratorFlags\r\n    );\r\n    bound.flags = this.flags;\r\n    bound.operatorKind = this.operatorKind;\r\n    // NOTE: this.instances holds instances per bound class / unbound\r\n    boundPrototypes.set(classInstance, bound);\r\n    return bound;\r\n  }\r\n\r\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\r\n  getResolvedInstance(instanceKey: string): Function | null {\r\n    var instances = this.instances;\r\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\r\n    return null;\r\n  }\r\n\r\n  /** Sets the resolved instance for the specified instance key. */\r\n  setResolvedInstance(instanceKey: string, instance: Function): void {\r\n    var instances = this.instances;\r\n    if (!instances) this.instances = instances = new Map();\r\n    else assert(!instances.has(instanceKey));\r\n    instances.set(instanceKey, instance);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends TypedElement {\r\n\r\n  /** Function prototype. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  localsByName: Map<string,Local> = new Map();\r\n  /** Array of locals by index. */\r\n  localsByIndex: Local[] = [];\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Default control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] = [];\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n\r\n  /** Counting id of inline operations involving this function. */\r\n  nextInlineId: i32 = 0;\r\n  /** Counting id of anonymous inner functions. */\r\n  nextAnonymousId: i32 = 0;\r\n  /** Counting id of autorelease variables. */\r\n  nextAutoreleaseId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\r\n    nameInclTypeParameters: string,\r\n    /** Respective function prototype. */\r\n    prototype: FunctionPrototype,\r\n    /** Concrete signature. */\r\n    signature: Signature, // pre-resolved\r\n    /** Contextual type arguments inherited from its parent class, if any. */\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION,\r\n      nameInclTypeParameters,\r\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\r\n      prototype.program,\r\n      prototype.parent,\r\n      prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    this.type = Type.u32.asFunction(signature);\r\n    if (!prototype.is(CommonFlags.AMBIENT)) {\r\n      let localIndex = 0;\r\n      if (this.is(CommonFlags.INSTANCE)) {\r\n        let local = new Local(\r\n          CommonSymbols.this_,\r\n          localIndex++,\r\n          assert(signature.thisType),\r\n          this\r\n        );\r\n        this.localsByName.set(CommonSymbols.this_, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        let local = new Local(\r\n          parameterName,\r\n          localIndex++,\r\n          parameterType,\r\n          this\r\n        );\r\n        this.localsByName.set(parameterName, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var localName = name !== null\r\n      ? name\r\n      : \"var$\" + localIndex.toString();\r\n    var local = new Local(\r\n      localName,\r\n      localIndex,\r\n      type,\r\n      this,\r\n      declaration || this.program.makeNativeVariableDeclaration(localName)\r\n    );\r\n    if (name) {\r\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\r\n      this.localsByName.set(name, local);\r\n    }\r\n    this.localsByIndex[local.index] = local;\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    var locals = this.localsByName;\r\n    if (locals.has(name)) return locals.get(name);\r\n    return this.parent.lookup(name);\r\n  }\r\n\r\n  // used by flows to keep track of temporary locals\r\n  tempI32s: Local[] | null = null;\r\n  tempI64s: Local[] | null = null;\r\n  tempF32s: Local[] | null = null;\r\n  tempF64s: Local[] | null = null;\r\n  tempV128s: Local[] | null = null;\r\n\r\n  // used by flows to keep track of break labels\r\n  nextBreakId: i32 = 0;\r\n  breakStack: i32[] | null = null;\r\n  breakLabel: string | null = null;\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakLabel = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n        let debugLocation = debugLocations[i];\r\n        module.setDebugLocation(\r\n          ref,\r\n          debugLocation.debugInfoRef,\r\n          debugLocation.source.debugInfoIndex,\r\n          debugLocation.line,\r\n          debugLocation.column\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(\r\n    /** Concrete signature. */\r\n    signature: Signature,\r\n    /** Program reference. */\r\n    program: Program,\r\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION_TARGET,\r\n      __s = \"sig:\" + signature.toSignatureString(),\r\n      __s,\r\n      program,\r\n      program.nativeFile\r\n    );\r\n    this.signature = signature;\r\n    this.flags = CommonFlags.RESOLVED;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return null;\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends DeclaredElement {\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent class. */\r\n    parent: ClassPrototype,\r\n    /** Declaration reference. */\r\n    declaration: FieldDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.FIELD_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type node. */\r\n  get typeNode(): TypeNode | null {\r\n    return (<FieldDeclaration>this.declaration).type;\r\n  }\r\n\r\n  /** Gets the associated initializer node. */\r\n  get initializerNode(): Expression | null {\r\n    return (<FieldDeclaration>this.declaration).initializer;\r\n  }\r\n\r\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\r\n  get parameterIndex(): i32 {\r\n    return (<FieldDeclaration>this.declaration).parameterIndex;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    /** Respective field prototype. */\r\n    prototype: FieldPrototype,\r\n    /** Parent class. */\r\n    parent: Class,\r\n    /** Concrete type. */\r\n    type: Type\r\n  ) {\r\n    super(\r\n      ElementKind.FIELD,\r\n      prototype.name,\r\n      parent,\r\n      <VariableLikeDeclarationStatement>prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    assert(type != Type.void);\r\n    this.setType(type);\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class PropertyPrototype extends DeclaredElement {\r\n\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent class. */\r\n    parent: ClassPrototype,\r\n    /** Declaration of the getter or setter introducing the property. */\r\n    firstDeclaration: FunctionDeclaration\r\n  ) {\r\n    super(\r\n      ElementKind.PROPERTY_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      firstDeclaration\r\n    );\r\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved property. */\r\nexport class Property extends VariableLikeElement {\r\n\r\n  /** Prototype reference. */\r\n  prototype: PropertyPrototype;\r\n  /** Getter instance. */\r\n  getterInstance: Function | null = null;\r\n  /** Setter instance. */\r\n  setterInstance: Function | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    /** Respective property prototype. */\r\n    prototype: PropertyPrototype,\r\n    /** Parent element, usually a static class prototype or class instance. */\r\n    parent: Element\r\n  ) {\r\n    super(\r\n      ElementKind.PROPERTY,\r\n      prototype.name,\r\n      parent,\r\n      prototype.program.makeNativeVariableDeclaration(\r\n        prototype.name,\r\n        prototype.is(CommonFlags.INSTANCE)\r\n          ? CommonFlags.INSTANCE\r\n          : CommonFlags.NONE\r\n      )\r\n    );\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An resolved index signature. */\r\nexport class IndexSignature extends VariableLikeElement {\r\n\r\n  /** Constructs a new index prototype. */\r\n  constructor(\r\n    /** Parent class. */\r\n    parent: Class\r\n  ) {\r\n    super(ElementKind.INDEXSIGNATURE, parent.internalName + \"[]\", parent);\r\n  }\r\n\r\n  /** Obtains the getter instance. */\r\n  getGetterInstance(isUnchecked: bool): Function | null {\r\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n  }\r\n\r\n  /** Obtains the setter instance. */\r\n  getSetterInstance(isUnchecked: bool): Function | null {\r\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends DeclaredElement {\r\n\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n  /** Already resolved instances. */\r\n  instances: Map<string,Class> | null = null;\r\n\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: ClassDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\r\n    _isInterface: bool = false // FIXME\r\n  ) {\r\n    super(\r\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<ClassDeclaration>this.declaration).typeParameters;\r\n  }\r\n  /** Gets the associated extends node. */\r\n  get extendsNode(): NamedTypeNode | null {\r\n    return (<ClassDeclaration>this.declaration).extendsType;\r\n  }\r\n  /** Gets the associated implements nodes. */\r\n  get implementsNodes(): NamedTypeNode[] | null {\r\n    return (<ClassDeclaration>this.declaration).implementsTypes;\r\n  }\r\n\r\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\r\n  get isBuiltinArray(): bool {\r\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\r\n    return arrayBufferViewInstance !== null\r\n        && this.extends(arrayBufferViewInstance.prototype);\r\n  }\r\n\r\n  /** Tests if this prototype extends the specified. */\r\n  extends(basePtototype: ClassPrototype | null): bool {\r\n    var current: ClassPrototype | null = this;\r\n    do if (current === basePtototype) return true;\r\n    while (current = current.basePrototype);\r\n    return false;\r\n  }\r\n\r\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\r\n  addInstance(name: string, element: DeclaredElement): bool {\r\n    var originalDeclaration = element.declaration;\r\n    var instanceMembers = this.instanceMembers;\r\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\r\n    else if (instanceMembers.has(name)) {\r\n      let existing = instanceMembers.get(name)!;\r\n      let merged = tryMerge(existing, element);\r\n      if (!merged) {\r\n        if (isDeclaredElement(existing.kind)) {\r\n          this.program.errorRelated(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            element.identifierNode.range,\r\n            (<DeclaredElement>existing).declaration.name.range,\r\n            element.identifierNode.text\r\n          );\r\n        } else {\r\n          this.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            element.identifierNode.range, element.identifierNode.text\r\n          );\r\n        }\r\n        return false;\r\n      }\r\n      element = merged;\r\n    }\r\n    instanceMembers.set(name, element);\r\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\r\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\r\n    }\r\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\r\n    return true;\r\n  }\r\n\r\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\r\n  getResolvedInstance(instanceKey: string): Class | null {\r\n    var instances = this.instances;\r\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\r\n    return null;\r\n  }\r\n\r\n  /** Sets the resolved instance for the specified instance key. */\r\n  setResolvedInstance(instanceKey: string, instance: Class): void {\r\n    var instances = this.instances;\r\n    if (!instances) this.instances = instances = new Map();\r\n    else assert(!instances.has(instanceKey));\r\n    instances.set(instanceKey, instance);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\nconst enum AcyclicState {\r\n  UNKNOWN,\r\n  ACYCLIC,\r\n  NOT_ACYCLIC\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends TypedElement {\r\n\r\n  /** Class prototype. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n  /** Index signature, if present. */\r\n  indexSignature: IndexSignature | null = null;\r\n  /** Unique class id. */\r\n  private _id: u32 = 0;\r\n  /** Remembers acyclic state. */\r\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\r\n  /** Runtime type information flags. */\r\n  rttiFlags: u32 = 0;\r\n  /** Wrapped type, if a wrapper for a basic type. */\r\n  wrappedType: Type | null = null;\r\n\r\n  /** Gets the unique runtime id of this class. */\r\n  get id(): u32 {\r\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\r\n  }\r\n\r\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\r\n  get isBuiltinArray(): bool {\r\n    return this.prototype.isBuiltinArray;\r\n  }\r\n\r\n  /** Tests if this class is array-like. */\r\n  get isArrayLike(): bool {\r\n    if (this.isBuiltinArray) return true;\r\n    var lengthField = this.lookupInSelf(\"length\");\r\n    return lengthField !== null && (\r\n      lengthField.kind == ElementKind.FIELD ||\r\n      (\r\n        lengthField.kind == ElementKind.PROPERTY &&\r\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\r\n      )\r\n    ) && (\r\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\r\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\r\n    );\r\n  }\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\r\n    nameInclTypeParameters: string,\r\n    /** The respective class prototype. */\r\n    prototype: ClassPrototype,\r\n    /** Concrete type arguments, if any. */\r\n    typeArguments: Type[] | null = null,\r\n    /** Base class, if derived. */\r\n    base: Class | null = null,\r\n    _isInterface: bool = false // FIXME\r\n  ) {\r\n    super(\r\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\r\n      nameInclTypeParameters,\r\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\r\n      prototype.program,\r\n      prototype.parent,\r\n      prototype.declaration\r\n    );\r\n    var program = this.program;\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.setType(program.options.usizeType.asClass(this));\r\n    this.base = base;\r\n\r\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n      let id = program.nextClassId++;\r\n      this._id = id;\r\n      program.managedClasses.set(id, this);\r\n    }\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        let contextualTypeArguments = this.contextualTypeArguments;\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\r\n          contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply pre-checked instance-specific contextual type arguments\r\n    var typeParameters = prototype.typeParameterNodes;\r\n    if (typeArguments) {\r\n      let numTypeArguments = typeArguments.length;\r\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      if (numTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let i = 0; i < numTypeArguments; ++i) {\r\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n        }\r\n      }\r\n    } else if (typeParameters && typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n    registerConcreteElement(program, this);\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\r\n    if (unchecked) {\r\n      switch (kind) {\r\n        case OperatorKind.INDEXED_GET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        case OperatorKind.INDEXED_SET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n\r\n  /** Calculates the memory offset of the specified field. */\r\n  offsetof(fieldName: string): u32 {\r\n    var members = assert(this.members);\r\n    assert(members.has(fieldName));\r\n    var field = <Element>members.get(fieldName);\r\n    assert(field.kind == ElementKind.FIELD);\r\n    return (<Field>field).memoryOffset;\r\n  }\r\n\r\n  /** Writes a field value to a buffer and returns the number of bytes written. */\r\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\r\n    var field = this.lookupInSelf(name);\r\n    if (field && field.kind == ElementKind.FIELD) {\r\n      let offset = baseOffset + (<Field>field).memoryOffset;\r\n      switch ((<Field>field).type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8: {\r\n          writeI8(i32(value), buffer, offset);\r\n          return 1;\r\n        }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: {\r\n          writeI16(i32(value), buffer, offset);\r\n          return 2;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          writeI32(i32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          assert(!this.program.options.isWasm64); // TODO\r\n          writeI32(i32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.F32: {\r\n          writeF32(f32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.F64: {\r\n          writeF64(f64(value), buffer, offset);\r\n          return 8;\r\n        }\r\n      }\r\n    }\r\n    assert(false);\r\n    return 0;\r\n  }\r\n\r\n  /** Tests if this class extends the specified prototype. */\r\n  extends(prototype: ClassPrototype): bool {\r\n    return this.prototype.extends(prototype);\r\n  }\r\n\r\n  /** Gets the concrete type arguments to the specified extendend prototype. */\r\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\r\n    var current: Class | null = this;\r\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\r\n    while (current = current.base);\r\n    return null;\r\n  }\r\n\r\n  /** Gets the value type of an array. Must be an array. */\r\n  getArrayValueType(): Type {\r\n    var current: Class = this;\r\n    var program = this.program;\r\n    var abvInstance = program.arrayBufferViewInstance;\r\n    while (current.base !== abvInstance) {\r\n      current = assert(current.base);\r\n    }\r\n    switch (current.prototype) {\r\n      case program.i8ArrayPrototype: return Type.i8;\r\n      case program.i16ArrayPrototype: return Type.i16;\r\n      case program.i32ArrayPrototype: return Type.i32;\r\n      case program.i64ArrayPrototype: return Type.i64;\r\n      case program.u8ArrayPrototype:\r\n      case program.u8ClampedArrayPrototype: return Type.u8;\r\n      case program.u16ArrayPrototype: return Type.u16;\r\n      case program.u32ArrayPrototype: return Type.u32;\r\n      case program.u64ArrayPrototype: return Type.u64;\r\n      case program.f32ArrayPrototype: return Type.f32;\r\n      case program.f64ArrayPrototype: return Type.f64;\r\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\r\n      default: assert(false);\r\n    }\r\n    return Type.void;\r\n  }\r\n\r\n  /** Tests if this class is inherently acyclic. */\r\n  get isAcyclic(): bool {\r\n    var acyclic = this._acyclic;\r\n    if (acyclic == AcyclicState.UNKNOWN) {\r\n      let hasCycle = this.cyclesTo(this);\r\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\r\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\r\n    }\r\n    return acyclic == AcyclicState.ACYCLIC;\r\n  }\r\n\r\n  /** Tests if this class potentially forms a reference cycle to another one. */\r\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\r\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\r\n    //\r\n    // - scalars\r\n    // - references to classes that are both acyclic and final (here: Java); and\r\n    // - arrays (in our case: also sets, maps) of either of the above\r\n    //\r\n    // Our implementation, however, treats all objects that do not reference themselves directly\r\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\r\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\r\n\r\n    if (except.has(this)) return false;\r\n    except.add(this); // don't recurse indefinitely\r\n\r\n    // Find out if any field references 'other' directly or indirectly\r\n    var current: Class | null;\r\n    var members = this.members;\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        if (member.kind == ElementKind.FIELD) {\r\n          let type = (<Field>member).type;\r\n          if (type.is(TypeFlags.REFERENCE)) {\r\n            if ((current = type.classReference) !== null && (\r\n              current === other ||\r\n              current.cyclesTo(other, except)\r\n            )) return true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Do the same for non-field data\r\n    var basePrototype: ClassPrototype | null;\r\n\r\n    // Array<T->other?>\r\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 1);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n\r\n    // Set<K->other?>\r\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 1);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n\r\n    // Map<K->other?,V->other?>\r\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 2);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n      if (\r\n        (current = typeArguments[1].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype { // FIXME\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    name: string,\r\n    parent: Element,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      decoratorFlags,\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class { // FIXME\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    nameInclTypeParameters: string,\r\n    prototype: InterfacePrototype,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(\r\n      nameInclTypeParameters,\r\n      prototype,\r\n      typeArguments,\r\n      base,\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\n/** Registers a concrete element with a program. */\r\nfunction registerConcreteElement(program: Program, element: Element): void {\r\n  assert(!program.instancesByName.has(element.internalName));\r\n  program.instancesByName.set(element.internalName, element);\r\n}\r\n\r\n/** Attempts to merge two elements. Returns the merged element on success. */\r\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\r\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\r\n  // suggesting to just merge what seems to be possible for now and revisit later.\r\n  assert(older.program === newer.program);\r\n  assert(!newer.members);\r\n  var merged: DeclaredElement | null = null;\r\n  switch (older.kind) {\r\n    case ElementKind.FUNCTION_PROTOTYPE: {\r\n      switch (newer.kind) {\r\n        case ElementKind.NAMESPACE: {\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n          break;\r\n        }\r\n        case ElementKind.TYPEDEFINITION: {\r\n          if (!older.shadowType) {\r\n            older.shadowType = <TypeDefinition>newer;\r\n            copyMembers(newer, older);\r\n            merged = <DeclaredElement>older;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.CLASS_PROTOTYPE:\r\n    case ElementKind.ENUM: {\r\n      if (newer.kind == ElementKind.NAMESPACE) {\r\n        copyMembers(newer, older);\r\n        merged = <DeclaredElement>older;\r\n        break;\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.NAMESPACE: {\r\n      switch (newer.kind) {\r\n        case ElementKind.ENUM:\r\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\r\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\r\n          copyMembers(older, newer);\r\n          merged = <DeclaredElement>newer;\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n          break;\r\n        }\r\n        case ElementKind.TYPEDEFINITION: {\r\n          if (!older.shadowType) {\r\n            older.shadowType = <TypeDefinition>newer;\r\n            copyMembers(newer, older);\r\n            merged = <DeclaredElement>older;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.GLOBAL: {\r\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\r\n        if (!older.shadowType) {\r\n          older.shadowType = <TypeDefinition>newer;\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.TYPEDEFINITION: {\r\n      switch (newer.kind) {\r\n        case ElementKind.GLOBAL:\r\n        case ElementKind.FUNCTION_PROTOTYPE:\r\n        case ElementKind.NAMESPACE: {\r\n          if (!newer.shadowType) {\r\n            newer.shadowType = <TypeDefinition>older;\r\n            copyMembers(older, newer);\r\n            merged = <DeclaredElement>newer;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  if (merged) {\r\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\r\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\r\n    if (olderIsExport != newerIsExport) {\r\n      older.program.error(\r\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n        merged.identifierNode.range, merged.identifierNode.text\r\n      );\r\n    }\r\n  }\r\n  return merged;\r\n}\r\n\r\n/** Copies the members of `src` to `dest`. */\r\nfunction copyMembers(src: Element, dest: Element): void {\r\n  var srcMembers = src.members;\r\n  if (srcMembers) {\r\n    let destMembers = dest.members;\r\n    if (!destMembers) dest.members = destMembers = new Map();\r\n    for (let [memberName, member] of srcMembers) {\r\n      destMembers.set(memberName, member);\r\n    }\r\n  }\r\n}\r\n\r\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\r\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\r\n  switch (parent.kind) {\r\n    case ElementKind.FILE: {\r\n      if (asGlobal) return name;\r\n      return parent.internalName + PATH_DELIMITER + name;\r\n    }\r\n    case ElementKind.FUNCTION: {\r\n      if (asGlobal) return name;\r\n      assert(!isInstance);\r\n      return parent.internalName + INNER_DELIMITER + name;\r\n    }\r\n    default: {\r\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\r\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport { Target } from \"./common\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type EventRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type RelooperRef = usize;\r\nexport type RelooperBlockRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32  = _BinaryenTypeInt32(),\r\n  I64  = _BinaryenTypeInt64(),\r\n  F32  = _BinaryenTypeFloat32(),\r\n  F64  = _BinaryenTypeFloat64(),\r\n  V128 = _BinaryenTypeVec128(),\r\n  Anyref = _BinaryenTypeAnyref(),\r\n  Exnref = _BinaryenTypeExnref(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum FeatureFlags {\r\n  MVP = _BinaryenFeatureMVP(),\r\n  Atomics = _BinaryenFeatureAtomics(),\r\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\r\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\r\n  SIMD128 = _BinaryenFeatureSIMD128(),\r\n  BulkMemory = _BinaryenFeatureBulkMemory(),\r\n  SignExt = _BinaryenFeatureSignExt(),\r\n  ExceptionHandling = _BinaryenFeatureExceptionHandling(),\r\n  TailCall = _BinaryenFeatureTailCall(),\r\n  ReferenceTypes = _BinaryenFeatureReferenceTypes(),\r\n  All = _BinaryenFeatureAll()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  LocalGet = _BinaryenLocalGetId(),\r\n  LocalSet = _BinaryenLocalSetId(),\r\n  GlobalGet = _BinaryenGlobalGetId(),\r\n  GlobalSet = _BinaryenGlobalSetId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicNotify = _BinaryenAtomicNotifyId(),\r\n  AtomicFence = _BinaryenAtomicFenceId(),\r\n  SIMDExtract = _BinaryenSIMDExtractId(),\r\n  SIMDReplace = _BinaryenSIMDReplaceId(),\r\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\r\n  SIMDTernary = _BinaryenSIMDTernaryId(),\r\n  SIMDShift = _BinaryenSIMDShiftId(),\r\n  SIMDLoad = _BinaryenSIMDLoadId(),\r\n  MemoryInit = _BinaryenMemoryInitId(),\r\n  DataDrop = _BinaryenDataDropId(),\r\n  MemoryCopy = _BinaryenMemoryCopyId(),\r\n  MemoryFill = _BinaryenMemoryFillId(),\r\n  Try = _BinaryenTryId(),\r\n  Throw = _BinaryenThrowId(),\r\n  Rethrow = _BinaryenRethrowId(),\r\n  BrOnExn = _BinaryenBrOnExnId(),\r\n  Push = _BinaryenPushId(),\r\n  Pop = _BinaryenPopId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/sign-extension-ops\r\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\r\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\r\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\r\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\r\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  TruncF32ToI32Sat = _BinaryenTruncSatSFloat32ToInt32(),\r\n  TruncF32ToU32Sat = _BinaryenTruncSatUFloat32ToInt32(),\r\n  TruncF64ToI32Sat = _BinaryenTruncSatSFloat64ToInt32(),\r\n  TruncF64ToU32Sat = _BinaryenTruncSatUFloat64ToInt32(),\r\n  TruncF32ToI64Sat = _BinaryenTruncSatSFloat32ToInt64(),\r\n  TruncF32ToU64Sat = _BinaryenTruncSatUFloat32ToInt64(),\r\n  TruncF64ToI64Sat = _BinaryenTruncSatSFloat64ToInt64(),\r\n  TruncF64ToU64Sat = _BinaryenTruncSatUFloat64ToInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/simd\r\n  SplatI8x16 = _BinaryenSplatVecI8x16(),\r\n  SplatI16x8 = _BinaryenSplatVecI16x8(),\r\n  SplatI32x4 = _BinaryenSplatVecI32x4(),\r\n  SplatI64x2 = _BinaryenSplatVecI64x2(),\r\n  SplatF32x4 = _BinaryenSplatVecF32x4(),\r\n  SplatF64x2 = _BinaryenSplatVecF64x2(),\r\n  NotV128 = _BinaryenNotVec128(),\r\n  NegI8x16 = _BinaryenNegVecI8x16(),\r\n  AnyTrueI8x16 = _BinaryenAnyTrueVecI8x16(),\r\n  AllTrueI8x16 = _BinaryenAllTrueVecI8x16(),\r\n  NegI16x8 = _BinaryenNegVecI16x8(),\r\n  AnyTrueI16x8 = _BinaryenAnyTrueVecI16x8(),\r\n  AllTrueI16x8 = _BinaryenAllTrueVecI16x8(),\r\n  NegI32x4 = _BinaryenNegVecI32x4(),\r\n  AnyTrueI32x4 = _BinaryenAnyTrueVecI32x4(),\r\n  AllTrueI32x4 = _BinaryenAllTrueVecI32x4(),\r\n  NegI64x2 = _BinaryenNegVecI64x2(),\r\n  AnyTrueI64x2 = _BinaryenAnyTrueVecI64x2(),\r\n  AllTrueI64x2 = _BinaryenAllTrueVecI64x2(),\r\n  AbsF32x4 = _BinaryenAbsVecF32x4(),\r\n  NegF32x4 = _BinaryenNegVecF32x4(),\r\n  SqrtF32x4 = _BinaryenSqrtVecF32x4(),\r\n  AbsF64x2 = _BinaryenAbsVecF64x2(),\r\n  NegF64x2 = _BinaryenNegVecF64x2(),\r\n  SqrtF64x2 = _BinaryenSqrtVecF64x2(),\r\n  TruncSatF32x4ToI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\r\n  TruncSatF32x4ToU32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\r\n  TruncSatF64x2ToI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\r\n  TruncSatF64x2ToU64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\r\n  ConvertI32x4ToF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\r\n  ConvertU32x4ToF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\r\n  ConvertI64x2ToF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\r\n  ConvertU64x2ToF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2(),\r\n  WidenLowI8x16ToI16x8 = _BinaryenWidenLowSVecI8x16ToVecI16x8(),\r\n  WidenLowU8x16ToU16x8 = _BinaryenWidenLowUVecI8x16ToVecI16x8(),\r\n  WidenHighI8x16ToI16x8 = _BinaryenWidenHighSVecI8x16ToVecI16x8(),\r\n  WidenHighU8x16ToU16x8 = _BinaryenWidenHighUVecI8x16ToVecI16x8(),\r\n  WidenLowI16x8ToI32x4 = _BinaryenWidenLowSVecI16x8ToVecI32x4(),\r\n  WidenLowU16x8ToU32x4 = _BinaryenWidenLowUVecI16x8ToVecI32x4(),\r\n  WidenHighI16x8ToI32x4 = _BinaryenWidenHighSVecI16x8ToVecI32x4(),\r\n  WidenHighU16x8ToU32x4 = _BinaryenWidenHighUVecI16x8ToVecI32x4()\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64(),\r\n\r\n  // see: https://github.com/WebAssembly/simd\r\n  EqI8x16 = _BinaryenEqVecI8x16(),\r\n  NeI8x16 = _BinaryenNeVecI8x16(),\r\n  LtI8x16 = _BinaryenLtSVecI8x16(),\r\n  LtU8x16 = _BinaryenLtUVecI8x16(),\r\n  LeI8x16 = _BinaryenLeSVecI8x16(),\r\n  LeU8x16 = _BinaryenLeUVecI8x16(),\r\n  GtI8x16 = _BinaryenGtSVecI8x16(),\r\n  GtU8x16 = _BinaryenGtUVecI8x16(),\r\n  GeI8x16 = _BinaryenGeSVecI8x16(),\r\n  GeU8x16 = _BinaryenGeUVecI8x16(),\r\n  EqI16x8 = _BinaryenEqVecI16x8(),\r\n  NeI16x8 = _BinaryenNeVecI16x8(),\r\n  LtI16x8 = _BinaryenLtSVecI16x8(),\r\n  LtU16x8 = _BinaryenLtUVecI16x8(),\r\n  LeI16x8 = _BinaryenLeSVecI16x8(),\r\n  LeU16x8 = _BinaryenLeUVecI16x8(),\r\n  GtI16x8 = _BinaryenGtSVecI16x8(),\r\n  GtU16x8 = _BinaryenGtUVecI16x8(),\r\n  GeI16x8 = _BinaryenGeSVecI16x8(),\r\n  GeU16x8 = _BinaryenGeUVecI16x8(),\r\n  EqI32x4 = _BinaryenEqVecI32x4(),\r\n  NeI32x4 = _BinaryenNeVecI32x4(),\r\n  LtI32x4 = _BinaryenLtSVecI32x4(),\r\n  LtU32x4 = _BinaryenLtUVecI32x4(),\r\n  LeI32x4 = _BinaryenLeSVecI32x4(),\r\n  LeU32x4 = _BinaryenLeUVecI32x4(),\r\n  GtI32x4 = _BinaryenGtSVecI32x4(),\r\n  GtU32x4 = _BinaryenGtUVecI32x4(),\r\n  GeI32x4 = _BinaryenGeSVecI32x4(),\r\n  GeU32x4 = _BinaryenGeUVecI32x4(),\r\n  EqF32x4 = _BinaryenEqVecF32x4(),\r\n  NeF32x4 = _BinaryenNeVecF32x4(),\r\n  LtF32x4 = _BinaryenLtVecF32x4(),\r\n  LeF32x4 = _BinaryenLeVecF32x4(),\r\n  GtF32x4 = _BinaryenGtVecF32x4(),\r\n  GeF32x4 = _BinaryenGeVecF32x4(),\r\n  EqF64x2 = _BinaryenEqVecF64x2(),\r\n  NeF64x2 = _BinaryenNeVecF64x2(),\r\n  LtF64x2 = _BinaryenLtVecF64x2(),\r\n  LeF64x2 = _BinaryenLeVecF64x2(),\r\n  GtF64x2 = _BinaryenGtVecF64x2(),\r\n  GeF64x2 = _BinaryenGeVecF64x2(),\r\n  AndV128 = _BinaryenAndVec128(),\r\n  OrV128 = _BinaryenOrVec128(),\r\n  XorV128 = _BinaryenXorVec128(),\r\n  AndNotV128 = _BinaryenAndNotVec128(),\r\n  AddI8x16 = _BinaryenAddVecI8x16(),\r\n  AddSatI8x16 = _BinaryenAddSatSVecI8x16(),\r\n  AddSatU8x16 = _BinaryenAddSatUVecI8x16(),\r\n  SubI8x16 = _BinaryenSubVecI8x16(),\r\n  SubSatI8x16 = _BinaryenSubSatSVecI8x16(),\r\n  SubSatU8x16 = _BinaryenSubSatUVecI8x16(),\r\n  MulI8x16 = _BinaryenMulVecI8x16(),\r\n  AddI16x8 = _BinaryenAddVecI16x8(),\r\n  AddSatI16x8 = _BinaryenAddSatSVecI16x8(),\r\n  AddSatU16x8 = _BinaryenAddSatUVecI16x8(),\r\n  SubI16x8 = _BinaryenSubVecI16x8(),\r\n  SubSatI16x8 = _BinaryenSubSatSVecI16x8(),\r\n  SubSatU16x8 = _BinaryenSubSatUVecI16x8(),\r\n  MulI16x8 = _BinaryenMulVecI16x8(),\r\n  AddI32x4 = _BinaryenAddVecI32x4(),\r\n  SubI32x4 = _BinaryenSubVecI32x4(),\r\n  MulI32x4 = _BinaryenMulVecI32x4(),\r\n  AddI64x2 = _BinaryenAddVecI64x2(),\r\n  SubI64x2 = _BinaryenSubVecI64x2(),\r\n  AddF32x4 = _BinaryenAddVecF32x4(),\r\n  SubF32x4 = _BinaryenSubVecF32x4(),\r\n  MulF32x4 = _BinaryenMulVecF32x4(),\r\n  DivF32x4 = _BinaryenDivVecF32x4(),\r\n  MinF32x4 = _BinaryenMinVecF32x4(),\r\n  MaxF32x4 = _BinaryenMaxVecF32x4(),\r\n  AddF64x2 = _BinaryenAddVecF64x2(),\r\n  SubF64x2 = _BinaryenSubVecF64x2(),\r\n  MulF64x2 = _BinaryenMulVecF64x2(),\r\n  DivF64x2 = _BinaryenDivVecF64x2(),\r\n  MinF64x2 = _BinaryenMinVecF64x2(),\r\n  MaxF64x2 = _BinaryenMaxVecF64x2(),\r\n  NarrowI16x8ToI8x16 = _BinaryenNarrowSVecI16x8ToVecI8x16(),\r\n  NarrowU16x8ToU8x16 = _BinaryenNarrowUVecI16x8ToVecI8x16(),\r\n  NarrowI32x4ToI16x8 = _BinaryenNarrowSVecI32x4ToVecI16x8(),\r\n  NarrowU32x4ToU16x8 = _BinaryenNarrowUVecI32x4ToVecI16x8(),\r\n  SwizzleV8x16 = _BinaryenSwizzleVec8x16()\r\n}\r\n\r\nexport enum HostOp {\r\n  MemorySize = _BinaryenMemorySize(),\r\n  MemoryGrow = _BinaryenMemoryGrow(),\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport enum SIMDExtractOp {\r\n  ExtractLaneI8x16 = _BinaryenExtractLaneSVecI8x16(),\r\n  ExtractLaneU8x16 = _BinaryenExtractLaneUVecI8x16(),\r\n  ExtractLaneI16x8 = _BinaryenExtractLaneSVecI16x8(),\r\n  ExtractLaneU16x8 = _BinaryenExtractLaneUVecI16x8(),\r\n  ExtractLaneI32x4 = _BinaryenExtractLaneVecI32x4(),\r\n  ExtractLaneI64x2 = _BinaryenExtractLaneVecI64x2(),\r\n  ExtractLaneF32x4 = _BinaryenExtractLaneVecF32x4(),\r\n  ExtractLaneF64x2 = _BinaryenExtractLaneVecF64x2(),\r\n}\r\n\r\nexport enum SIMDReplaceOp {\r\n  ReplaceLaneI8x16 = _BinaryenReplaceLaneVecI8x16(),\r\n  ReplaceLaneI16x8 = _BinaryenReplaceLaneVecI16x8(),\r\n  ReplaceLaneI32x4 = _BinaryenReplaceLaneVecI32x4(),\r\n  ReplaceLaneI64x2 = _BinaryenReplaceLaneVecI64x2(),\r\n  ReplaceLaneF32x4 = _BinaryenReplaceLaneVecF32x4(),\r\n  ReplaceLaneF64x2 = _BinaryenReplaceLaneVecF64x2()\r\n}\r\n\r\nexport enum SIMDShiftOp {\r\n  ShlI8x16 = _BinaryenShlVecI8x16(),\r\n  ShrI8x16 = _BinaryenShrSVecI8x16(),\r\n  ShrU8x16 = _BinaryenShrUVecI8x16(),\r\n  ShlI16x8 = _BinaryenShlVecI16x8(),\r\n  ShrI16x8 = _BinaryenShrSVecI16x8(),\r\n  ShrU16x8 = _BinaryenShrUVecI16x8(),\r\n  ShlI32x4 = _BinaryenShlVecI32x4(),\r\n  ShrI32x4 = _BinaryenShrSVecI32x4(),\r\n  ShrU32x4 = _BinaryenShrUVecI32x4(),\r\n  ShlI64x2 = _BinaryenShlVecI64x2(),\r\n  ShrI64x2 = _BinaryenShrSVecI64x2(),\r\n  ShrU64x2 = _BinaryenShrUVecI64x2()\r\n}\r\n\r\nexport enum SIMDTernaryOp {\r\n  Bitselect = _BinaryenBitselectVec128(),\r\n  QFMAF32x4 = _BinaryenQFMAVecF32x4(),\r\n  QFMSF32x4 = _BinaryenQFMSVecF32x4(),\r\n  QFMAF64x2 = _BinaryenQFMAVecF64x2(),\r\n  QFMSF64x2 = _BinaryenQFMSVecF64x2()\r\n}\r\n\r\nexport enum SIMDLoadOp {\r\n  LoadSplatV8x16 = _BinaryenLoadSplatVec8x16(),\r\n  LoadSplatV16x8 = _BinaryenLoadSplatVec16x8(),\r\n  LoadSplatV32x4 = _BinaryenLoadSplatVec32x4(),\r\n  LoadSplatV64x2 = _BinaryenLoadSplatVec64x2(),\r\n  LoadI8ToI16x8 = _BinaryenLoadExtSVec8x8ToVecI16x8(),\r\n  LoadU8ToU16x8 = _BinaryenLoadExtUVec8x8ToVecI16x8(),\r\n  LoadI16ToI32x4 = _BinaryenLoadExtSVec16x4ToVecI32x4(),\r\n  LoadU16ToU32x4 = _BinaryenLoadExtUVec16x4ToVecI32x4(),\r\n  LoadI32ToI64x2 = _BinaryenLoadExtSVec32x2ToVecI64x2(),\r\n  LoadU32ToU64x2 = _BinaryenLoadExtUVec32x2ToVecI64x2()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n\r\n  private lit: usize;\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n      return module;\r\n    } finally {\r\n      memory.free(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunctionType(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunctionType(this.ref, cStr);\r\n  }\r\n\r\n  // constants\r\n\r\n  i32(value: i32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  f32(value: f32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  f64(value: f64): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  v128(bytes: Uint8Array): ExpressionRef {\r\n    assert(bytes.length == 16);\r\n    var out = this.lit;\r\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\r\n    _BinaryenLiteralVec128(out, out);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  unary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  binary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  host(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  local_get(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalGet(this.ref, index, type);\r\n  }\r\n\r\n  local_tee(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalTee(this.ref, index, value);\r\n  }\r\n\r\n  global_get(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenGlobalGet(this.ref, cStr, type);\r\n  }\r\n\r\n  load(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0,\r\n    align: Index = bytes // naturally aligned by default\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\r\n  }\r\n\r\n  store(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0,\r\n    align: Index = bytes // naturally aligned by default\r\n  ): ExpressionRef {\r\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\r\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\r\n  }\r\n\r\n  atomic_load(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  atomic_store(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  atomic_rmw(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  atomic_cmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  atomic_wait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  atomic_notify(\r\n    ptr: ExpressionRef,\r\n    notifyCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\r\n  }\r\n\r\n  atomic_fence(): ExpressionRef {\r\n    return _BinaryenAtomicFence(this.ref);\r\n  }\r\n\r\n  // statements\r\n\r\n  local_set(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalSet(this.ref, index, value);\r\n  }\r\n\r\n  global_set(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenGlobalSet(this.ref, cStr, value);\r\n  }\r\n\r\n  block(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    var cArr = allocPtrArray(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  br(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenBreak(this.ref, cStr, condition, value);\r\n  }\r\n\r\n  drop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  loop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenLoop(this.ref, cStr, body);\r\n  }\r\n\r\n  if(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  nop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  return(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  select(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  switch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = this.allocStringCached(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = this.allocStringCached(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  call(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType,\r\n    isReturn: bool = false\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return isReturn\r\n        ? _BinaryenReturnCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType)\r\n        : _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  return_call(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    return this.call(target, operands, returnType, true);\r\n  }\r\n\r\n  call_indirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string,\r\n    isReturn: bool = false\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(typeName);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return isReturn\r\n        ? _BinaryenReturnCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr)\r\n        : _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  return_call_indirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string,\r\n  ): ExpressionRef {\r\n    return this.call_indirect(index, operands, typeName, true);\r\n  }\r\n\r\n  unreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // bulk memory\r\n\r\n  memory_copy(\r\n    dest: ExpressionRef,\r\n    source: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\r\n  }\r\n\r\n  memory_fill(\r\n    dest: ExpressionRef,\r\n    value: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\r\n  }\r\n\r\n  // exception handling\r\n\r\n  try(\r\n    body: ExpressionRef,\r\n    catchBody: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTry(this.ref, body, catchBody);\r\n  }\r\n\r\n  throw(\r\n    eventName: string,\r\n    operands: ExpressionRef[]\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(eventName);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenThrow(this.ref, cStr, cArr, operands.length);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  rethrow(\r\n    exnref: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenRethrow(this.ref, exnref);\r\n  }\r\n\r\n  br_on_exn(\r\n    name: string,\r\n    eventName: string,\r\n    exnref: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr1 = this.allocStringCached(name);\r\n    var cStr2 = this.allocStringCached(eventName);\r\n    return _BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\r\n  }\r\n\r\n  // push / pop (multi value?)\r\n\r\n  push(\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenPush(this.ref, value);\r\n  }\r\n\r\n  pop(\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenPop(this.ref, type);\r\n  }\r\n\r\n  // simd\r\n\r\n  simd_extract(\r\n    op: SIMDExtractOp,\r\n    vec: ExpressionRef,\r\n    idx: u8\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\r\n  }\r\n\r\n  simd_replace(\r\n    op: SIMDReplaceOp,\r\n    vec: ExpressionRef,\r\n    idx: u8,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\r\n  }\r\n\r\n  simd_shuffle(\r\n    vec1: ExpressionRef,\r\n    vec2: ExpressionRef,\r\n    mask: Uint8Array\r\n  ): ExpressionRef {\r\n    assert(mask.length == 16);\r\n    var cArr = allocU8Array(mask);\r\n    try {\r\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  simd_ternary(\r\n    op: SIMDTernaryOp,\r\n    a: ExpressionRef,\r\n    b: ExpressionRef,\r\n    c: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDTernary(this.ref, op, a, b, c);\r\n  }\r\n\r\n  simd_shift(\r\n    op: SIMDShiftOp,\r\n    vec: ExpressionRef,\r\n    shift: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\r\n  }\r\n\r\n  simd_load(\r\n    op: SIMDLoadOp,\r\n    ptr: ExpressionRef,\r\n    offset: u32,\r\n    align: u32\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\r\n  }\r\n\r\n  removeGlobal(\r\n    name: string\r\n  ): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveGlobal(this.ref, cStr);\r\n  }\r\n\r\n  addEvent(\r\n    name: string,\r\n    attribute: u32,\r\n    type: FunctionRef\r\n  ): EventRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenAddEvent(this.ref, cStr, attribute, type);\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  getFunction(\r\n    name: string\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenGetFunction(this.ref, cStr);\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunction(this.ref, cStr);\r\n  }\r\n\r\n  private hasTemporaryFunction: bool = false;\r\n\r\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\r\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\r\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeTemporaryFunction(): void {\r\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    _BinaryenRemoveFunction(this.ref, tempName);\r\n    _BinaryenRemoveFunctionType(this.ref, tempName);\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addEventExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddEventExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = this.allocStringCached(externalName);\r\n    _BinaryenRemoveExport(this.ref, cStr);\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): void {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): void {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    shared: bool = false,\r\n  ): void {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType,\r\n    mutable: bool = false\r\n  ): void {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\r\n  }\r\n\r\n  addEventImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    attribute: u32,\r\n    eventType: FunctionTypeRef\r\n  ): void {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    _BinaryenAddEventImport(this.ref, cStr1, cStr2, cStr3, attribute, eventType);\r\n  }\r\n\r\n  /** Unlimited memory constant. */\r\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null,\r\n    shared: bool = false\r\n  ): void {\r\n    var cStr = this.allocStringCached(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var psvs = new Array<i8>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      psvs[i] = 0; // no passive segments currently\r\n      offs[i] = target == Target.WASM64\r\n        ? this.i64(i64_low(offset), i64_high(offset))\r\n        : this.i32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocU8Array(psvs);\r\n    var cArr3 = allocI32Array(offs);\r\n    var cArr4 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\r\n    } finally {\r\n      memory.free(cArr4);\r\n      memory.free(cArr3);\r\n      memory.free(cArr2);\r\n      memory.free(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(\r\n    initial: Index,\r\n    maximum: Index,\r\n    funcs: string[],\r\n    offset: ExpressionRef\r\n  ): void {\r\n    var numNames = funcs.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = this.allocStringCached(funcs[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames, offset);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  addCustomSection(name: string, contents: Uint8Array): void {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocU8Array(contents);\r\n    try {\r\n      _BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  getOptimizeLevel(): i32 {\r\n    return _BinaryenGetOptimizeLevel();\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  getShrinkLevel(): i32 {\r\n    return _BinaryenGetShrinkLevel();\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  getFeatures(): BinaryenFeatureFlags {\r\n    return _BinaryenModuleGetFeatures(this.ref);\r\n  }\r\n\r\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\r\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      memory.free(cArr);\r\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\r\n    }\r\n  }\r\n\r\n  private cachedPrecomputeNames: usize = 0;\r\n\r\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\r\n    // remember the previous optimize levels and set to max instead, to be sure\r\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\r\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\r\n    var previousDebugInfo = _BinaryenGetDebugInfo();\r\n    _BinaryenSetOptimizeLevel(4);\r\n    _BinaryenSetShrinkLevel(0);\r\n    _BinaryenSetDebugInfo(false);\r\n\r\n    // wrap the expression in a temp. function and run the precompute pass on it\r\n    var type = _BinaryenExpressionGetType(expr);\r\n    var func = this.addTemporaryFunction(type, null, expr);\r\n    var names = this.cachedPrecomputeNames;\r\n    if (!names) {\r\n      this.cachedPrecomputeNames = names = allocI32Array([\r\n        this.allocStringCached(\"vacuum\"),\r\n        this.allocStringCached(\"precompute\")\r\n      ]);\r\n    }\r\n    _BinaryenFunctionRunPasses(func, this.ref, names, 2);\r\n    expr = _BinaryenFunctionGetBody(func);\r\n    if (_BinaryenExpressionGetId(expr) == ExpressionId.Return) {\r\n      expr = _BinaryenReturnGetValue(expr);\r\n    }\r\n    this.removeTemporaryFunction();\r\n\r\n    // reset optimize levels to previous\r\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\r\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\r\n    _BinaryenSetDebugInfo(previousDebugInfo);\r\n    return expr;\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.lit; // safe to reuse as long as..\r\n    assert(_BinaryenSizeofLiteral() >= 12);\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) memory.free(cStr);\r\n      if (binaryPtr) memory.free(binaryPtr);\r\n      if (sourceMapPtr) memory.free(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  private cachedStrings: Map<string,usize> = new Map();\r\n\r\n  private allocStringCached(str: string | null): usize {\r\n    if (str == null) return 0;\r\n    var cachedStrings = this.cachedStrings;\r\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\r\n    var ptr = allocString(str);\r\n    cachedStrings.set(str, ptr);\r\n    return ptr;\r\n  }\r\n\r\n  dispose(): void {\r\n    assert(this.ref);\r\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\r\n    this.cachedStrings = new Map();\r\n    memory.free(this.lit);\r\n    memory.free(this.cachedPrecomputeNames);\r\n    this.cachedPrecomputeNames = 0;\r\n    _BinaryenModuleDispose(this.ref);\r\n    this.ref = 0;\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(\r\n    expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n    switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.i32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.i64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.f32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.f64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          case NativeType.V128: {\r\n            // TODO\r\n            return 0;\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        return _BinaryenLocalGet(this.ref,\r\n          _BinaryenLocalGetGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GlobalGet: {\r\n        let globalName = _BinaryenGlobalGetGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return (\r\n          _BinaryenLoadIsAtomic(expr)\r\n            ? _BinaryenAtomicLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n            : _BinaryenLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenLoadGetAlign(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n        );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\n// expressions\r\n\r\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\r\n  return _BinaryenExpressionGetId(expr);\r\n}\r\n\r\nexport function getExpressionType(expr: ExpressionRef): NativeType {\r\n  return _BinaryenExpressionGetType(expr);\r\n}\r\n\r\nexport function getConstValueI32(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI32(expr);\r\n}\r\n\r\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64Low(expr);\r\n}\r\n\r\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64High(expr);\r\n}\r\n\r\nexport function getConstValueF32(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF32(expr);\r\n}\r\n\r\nexport function getConstValueF64(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF64(expr);\r\n}\r\n\r\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenLocalGetGetIndex(expr);\r\n}\r\n\r\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenLocalSetGetIndex(expr);\r\n}\r\n\r\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLocalSetGetValue(expr);\r\n}\r\n\r\nexport function isLocalTee(expr: ExpressionRef): bool {\r\n  return _BinaryenLocalSetIsTee(expr);\r\n}\r\n\r\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenGlobalGetGetName(expr));\r\n}\r\n\r\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\r\n  return _BinaryenBinaryGetOp(expr);\r\n}\r\n\r\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetLeft(expr);\r\n}\r\n\r\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetRight(expr);\r\n}\r\n\r\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\r\n  return _BinaryenUnaryGetOp(expr);\r\n}\r\n\r\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenUnaryGetValue(expr);\r\n}\r\n\r\nexport function getLoadBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetBytes(expr);\r\n}\r\n\r\nexport function getLoadOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetOffset(expr);\r\n}\r\n\r\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoadGetPtr(expr);\r\n}\r\n\r\nexport function isLoadSigned(expr: ExpressionRef): bool {\r\n  return _BinaryenLoadIsSigned(expr);\r\n}\r\n\r\nexport function getStoreBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetBytes(expr);\r\n}\r\n\r\nexport function getStoreOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetOffset(expr);\r\n}\r\n\r\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetPtr(expr);\r\n}\r\n\r\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetValue(expr);\r\n}\r\n\r\nexport function getBlockName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBlockGetName(expr));\r\n}\r\n\r\nexport function getBlockChildCount(expr: ExpressionRef): Index {\r\n  return _BinaryenBlockGetNumChildren(expr);\r\n}\r\n\r\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenBlockGetChild(expr, index);\r\n}\r\n\r\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetCondition(expr);\r\n}\r\n\r\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfTrue(expr);\r\n}\r\n\r\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfFalse(expr);\r\n}\r\n\r\nexport function getLoopName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenLoopGetName(expr));\r\n}\r\n\r\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoopGetBody(expr);\r\n}\r\n\r\nexport function getBreakName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBreakGetName(expr));\r\n}\r\n\r\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBreakGetCondition(expr);\r\n}\r\n\r\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfTrue(expr);\r\n}\r\n\r\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfFalse(expr);\r\n}\r\n\r\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetCondition(expr);\r\n}\r\n\r\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenDropGetValue(expr);\r\n}\r\n\r\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenReturnGetValue(expr);\r\n}\r\n\r\nexport function getCallTarget(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenCallGetTarget(expr));\r\n}\r\n\r\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\r\n  return _BinaryenCallGetNumOperands(expr);\r\n}\r\n\r\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenCallGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenHostGetOp(expr);\r\n}\r\n\r\nexport function getHostOperandCount(expr: ExpressionRef): Index {\r\n  return _BinaryenHostGetNumOperands(expr);\r\n}\r\n\r\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenHostGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenHostGetNameOperand(expr));\r\n}\r\n\r\n// functions\r\n\r\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\r\n  return _BinaryenFunctionGetBody(func);\r\n}\r\n\r\nexport function getFunctionName(func: FunctionRef): string | null {\r\n  return readString(_BinaryenFunctionGetName(func));\r\n}\r\n\r\nexport function getFunctionParamCount(func: FunctionRef): Index {\r\n  return _BinaryenFunctionGetNumParams(func);\r\n}\r\n\r\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\r\n  return _BinaryenFunctionGetParam(func, index);\r\n}\r\n\r\nexport function getFunctionResultType(func: FunctionRef): NativeType {\r\n  return _BinaryenFunctionGetResult(func);\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate(module.ref);\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    condition: ExpressionRef = 0,\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    indexes: i32[],\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\r\n  }\r\n}\r\n\r\nexport function hasSideEffects(expr: ExpressionRef): bool {\r\n  // TODO: there's more\r\n  switch (_BinaryenExpressionGetId(expr)) {\r\n    case ExpressionId.LocalGet:\r\n    case ExpressionId.GlobalGet:\r\n    case ExpressionId.Const:\r\n    case ExpressionId.Nop: {\r\n      return false;\r\n    }\r\n    case ExpressionId.Block: {\r\n      for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n        if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n      }\r\n      return false;\r\n    }\r\n    case ExpressionId.If: {\r\n      return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n          || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n          || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n    }\r\n    case ExpressionId.Unary: {\r\n      return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n    }\r\n    case ExpressionId.Binary: {\r\n      return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n          || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n    }\r\n    case ExpressionId.Drop: {\r\n      return hasSideEffects(_BinaryenDropGetValue(expr));\r\n    }\r\n    case ExpressionId.Select: {\r\n      return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n          || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n          || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = memory.allocate(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = memory.allocate(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocPtrArray(ptrs: usize[] | null): usize {\r\n  return allocI32Array(ptrs); // TODO: WASM64 one day\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n\r\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\r\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\r\n  // not applicable if pushing a value to the stack\r\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\r\n\r\n  switch (_BinaryenExpressionGetId(expr)) {\r\n    case ExpressionId.Unreachable:\r\n    case ExpressionId.Return: return false;\r\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\r\n    case ExpressionId.Block: {\r\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\r\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\r\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/** Traverses all expression members of an expression, calling the given visitor. */\r\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\r\n  switch (getExpressionId(expr)) {\r\n    case ExpressionId.Block: {\r\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\r\n        visit(_BinaryenBlockGetChild(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.If: {\r\n      visit(_BinaryenIfGetCondition(expr), data);\r\n      visit(_BinaryenIfGetIfTrue(expr), data);\r\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\r\n      if (ifFalse) visit(ifFalse, data);\r\n      break;\r\n    }\r\n    case ExpressionId.Loop: {\r\n      visit(_BinaryenLoopGetBody(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Break: {\r\n      let condition = _BinaryenBreakGetCondition(expr);\r\n      if (condition) visit(condition, data);\r\n      break;\r\n    }\r\n    case ExpressionId.Switch: {\r\n      visit(_BinaryenSwitchGetCondition(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Call: {\r\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenCallGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.CallIndirect: {\r\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.LocalGet: {\r\n      break;\r\n    }\r\n    case ExpressionId.LocalSet: {\r\n      visit(_BinaryenLocalSetGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.GlobalGet: {\r\n      break;\r\n    }\r\n    case ExpressionId.GlobalSet: {\r\n      visit(_BinaryenGlobalSetGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Load: {\r\n      visit(_BinaryenLoadGetPtr(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Store: {\r\n      visit(_BinaryenStoreGetPtr(expr), data);\r\n      visit(_BinaryenStoreGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicRMW: {\r\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\r\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicCmpxchg: {\r\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\r\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\r\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicWait: {\r\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\r\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\r\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicNotify: {\r\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicFence: {\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDExtract: {\r\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDReplace: {\r\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\r\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDShuffle: {\r\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\r\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDTernary: {\r\n      visit(_BinaryenSIMDTernaryGetA(expr), data);\r\n      visit(_BinaryenSIMDTernaryGetB(expr), data);\r\n      visit(_BinaryenSIMDTernaryGetC(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDShift: {\r\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\r\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDLoad: {\r\n      visit(_BinaryenSIMDLoadGetPtr(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryInit: {\r\n      visit(_BinaryenMemoryInitGetDest(expr), data);\r\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\r\n      visit(_BinaryenMemoryInitGetSize(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.DataDrop: {\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryCopy: {\r\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\r\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\r\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryFill: {\r\n      visit(_BinaryenMemoryFillGetDest(expr), data);\r\n      visit(_BinaryenMemoryFillGetValue(expr), data);\r\n      visit(_BinaryenMemoryFillGetSize(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Try: {\r\n      visit(_BinaryenTryGetBody(expr), data);\r\n      visit(_BinaryenTryGetCatchBody(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Throw: {\r\n      for (let i = 0, n = _BinaryenThrowGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenThrowGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.Rethrow: {\r\n      visit(_BinaryenRethrowGetExnref(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.BrOnExn: {\r\n      visit(_BinaryenBrOnExnGetExnref(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Push: {\r\n      visit(_BinaryenPushGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Pop: {\r\n      break;\r\n    }\r\n    case ExpressionId.Const: {\r\n      break;\r\n    }\r\n    case ExpressionId.Unary: {\r\n      visit(_BinaryenUnaryGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Binary: {\r\n      visit(_BinaryenBinaryGetLeft(expr), data);\r\n      visit(_BinaryenBinaryGetRight(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Select: {\r\n      visit(_BinaryenSelectGetIfTrue(expr), data);\r\n      visit(_BinaryenSelectGetIfFalse(expr), data);\r\n      visit(_BinaryenSelectGetCondition(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Drop: {\r\n      visit(_BinaryenDropGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Return: {\r\n      visit(_BinaryenReturnGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Host: {\r\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenHostGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.Nop: {\r\n      break;\r\n    }\r\n    case ExpressionId.Unreachable: {\r\n      break;\r\n    }\r\n    default: assert(false);\r\n  }\r\n  return true;\r\n}\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget,\r\n  Program,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // vectors\r\n\r\n  /** A 128-bit vector. */\r\n  V128,\r\n\r\n  // references\r\n\r\n  /** A host reference. */\r\n  ANYREF,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type (either a class or a function type). */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9,\r\n  /** Is a vector type. */\r\n  VECTOR = 1 << 10\r\n}\r\n\r\nconst v128_zero = new Uint8Array(16);\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Returns the closest int type representing this type. */\r\n  get intType(): Type {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return Type.i8;\r\n      case TypeKind.I16: return Type.i16;\r\n      case TypeKind.F32:\r\n      case TypeKind.I32: return Type.i32;\r\n      case TypeKind.F64:\r\n      case TypeKind.I64: return Type.i64;\r\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\r\n      case TypeKind.U8: return Type.u8;\r\n      case TypeKind.U16: return Type.u16;\r\n      case TypeKind.U32: return Type.u32;\r\n      case TypeKind.U64: return Type.u64;\r\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\r\n      case TypeKind.BOOL:\r\n      default: return Type.i32;\r\n    }\r\n  }\r\n\r\n  /** Substitutes this type with the auto type if this type is void. */\r\n  get exceptVoid(): Type {\r\n    if (this.kind == TypeKind.VOID) return Type.auto;\r\n    return this;\r\n  }\r\n\r\n  /** Gets this type's logarithmic alignment in memory. */\r\n  get alignLog2(): i32 {\r\n    return 31 - clz<i32>(this.byteSize);\r\n  }\r\n\r\n  /** Tests if this is a managed type that needs GC hooks. */\r\n  get isManaged(): bool {\r\n    var classReference = this.classReference;\r\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n  }\r\n\r\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\r\n  get isUnmanaged(): bool {\r\n    var classReference = this.classReference;\r\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\r\n    return ~0 >>> (targetType.size - size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.nonNullableType = this;\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\r\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\r\n          if (currentClass = this.classReference) {\r\n            if (targetClass = target.classReference) {\r\n              return currentClass.isAssignableTo(targetClass);\r\n            }\r\n          } else if (currentFunction = this.signatureReference) {\r\n            if (targetFunction = target.signatureReference) {\r\n              return currentFunction.isAssignableTo(targetFunction);\r\n            }\r\n          } else if (this.kind == TypeKind.ANYREF && target.kind == TypeKind.ANYREF) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (\r\n            !signednessIsRelevant ||\r\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\r\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n          ) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      } else if (this.is(TypeFlags.VECTOR)) {\r\n        if (target.is(TypeFlags.VECTOR)) {\r\n          return this.size == target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\r\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\r\n    else if (target.is(TypeFlags.REFERENCE)) return false;\r\n    if (this.is(TypeFlags.INTEGER)) {\r\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\r\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n      );\r\n    }\r\n    return this.kind == target.kind;\r\n  }\r\n\r\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\r\n  isChangeableTo(target: Type): bool {\r\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\r\n      let size = this.size;\r\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\r\n    }\r\n    return this.kind == target.kind;\r\n  }\r\n\r\n  /** Determines the common denominator type of two types, if there is any. */\r\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to a string. */\r\n  toString(): string {\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      let classReference = this.classReference;\r\n      if (classReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? classReference.internalName + \" | null\"\r\n          : classReference.internalName;\r\n      }\r\n      let signatureReference = this.signatureReference;\r\n      if (signatureReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? \"(\" + signatureReference.toString() + \") | null\"\r\n          : signatureReference.toString();\r\n      }\r\n      // TODO: Reflect.apply(value, \"toString\", []) ?\r\n      assert(this.kind == TypeKind.ANYREF);\r\n      return \"anyref\";\r\n    }\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: return \"usize\";\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      case TypeKind.ANYREF: return \"anyref\";\r\n      default: assert(false);\r\n      case TypeKind.VOID: return \"void\";\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.V128: return NativeType.V128;\r\n      case TypeKind.ANYREF: return NativeType.Anyref;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.ANYREF:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.i32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.i64(0);\r\n      case TypeKind.F32: return module.f32(0);\r\n      case TypeKind.F64: return module.f64(0);\r\n      case TypeKind.V128: return module.v128(v128_zero);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n      case TypeKind.ANYREF:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.i32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.i64(1);\r\n      case TypeKind.F32: return module.f32(1);\r\n      case TypeKind.F64: return module.f64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n          case TypeKind.ANYREF:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.i32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.i64(-1, -1);\r\n      case TypeKind.F32: return module.f32(-1);\r\n      case TypeKind.F64: return module.f64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      // same naming scheme as Binaryen\r\n      case TypeKind.I8:\r\n      case TypeKind.U8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U16:\r\n      case TypeKind.I32:\r\n      case TypeKind.U32:\r\n      case TypeKind.BOOL: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"j\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"d\";\r\n      case TypeKind.V128: return \"V\";\r\n      case TypeKind.ANYREF: return \"a\";\r\n      case TypeKind.VOID: return \"v\";\r\n      default: assert(false);\r\n    }\r\n    return \"i\";\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 128-bit vector. */\r\n  static readonly v128: Type = new Type(TypeKind.V128,\r\n    TypeFlags.VECTOR   |\r\n    TypeFlags.VALUE, 128\r\n  );\r\n\r\n  /** A host reference. */\r\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\r\n    TypeFlags.REFERENCE, 0\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n\r\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\r\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n  /** The unique program id that represents this signature. */\r\n  id: u32 = 0;\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n  /** The program that created this signature. */\r\n  program: Program;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    program: Program,\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.program = program;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n\r\n    var signatureTypes = program.uniqueSignatures;\r\n    var length = signatureTypes.length;\r\n    for (let i = 0; i < length; i++) {\r\n      let compare = signatureTypes[i];\r\n      if (this.equals(compare)) {\r\n        this.id = compare.id;\r\n        return this;\r\n      }\r\n    }\r\n    program.uniqueSignatures.push(this);\r\n    this.id = program.nextSignatureId++;\r\n  }\r\n\r\n  asFunctionTarget(program: Program): FunctionTarget {\r\n    var target = this.cachedFunctionTarget;\r\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\r\n    else assert(target.program == program);\r\n    return target;\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getDefaultParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    return this.equals(target);\r\n  }\r\n\r\n  /** Tests to see if a signature equals another signature. */\r\n  equals(value: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = value.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != value.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = value.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = value.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    sb.push(returnType.toSignatureString());\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    return \"FUNCSIG$\" + sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      sb.push(\"this: \");\r\n      assert(!thisType.signatureReference);\r\n      sb.push(thisType.toString());\r\n      index = 1;\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getDefaultParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached default parameter names used where names are unknown.\r\nvar cachedDefaultParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached default parameter name for the specified index. */\r\nexport function getDefaultParameterName(index: i32): string {\r\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\r\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\r\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedDefaultParameterNames[index - 1];\r\n}\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport enum IdentifierHandling {\r\n  DEFAULT,\r\n  PREFER,\r\n  ALWAYS\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  assert(text.length);\r\n  switch (text.charCodeAt(0)) {\r\n    case CharCode.a: {\r\n      switch (text) {\r\n        case \"abstract\": return Token.ABSTRACT;\r\n        case \"as\": return Token.AS;\r\n        case \"async\": return Token.ASYNC;\r\n        case \"await\": return Token.AWAIT;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.b: {\r\n      switch (text) {\r\n        case \"break\": return Token.BREAK;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.c: {\r\n      switch (text) {\r\n        case \"case\": return Token.CASE;\r\n        case \"catch\": return Token.CATCH;\r\n        case \"class\": return Token.CLASS;\r\n        case \"continue\": return Token.CONTINUE;\r\n        case \"const\": return Token.CONST;\r\n        case \"constructor\": return Token.CONSTRUCTOR;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.d: {\r\n      switch (text) {\r\n        case \"debugger\": return Token.DEBUGGER;\r\n        case \"declare\": return Token.DECLARE;\r\n        case \"default\": return Token.DEFAULT;\r\n        case \"delete\": return Token.DELETE;\r\n        case \"do\": return Token.DO;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.e: {\r\n      switch (text) {\r\n        case \"else\": return Token.ELSE;\r\n        case \"enum\": return Token.ENUM;\r\n        case \"export\": return Token.EXPORT;\r\n        case \"extends\": return Token.EXTENDS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.f: {\r\n      switch (text) {\r\n        case \"false\": return Token.FALSE;\r\n        case \"finally\": return Token.FINALLY;\r\n        case \"for\": return Token.FOR;\r\n        case \"from\": return Token.FROM;\r\n        case \"function\": return Token.FUNCTION;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.g: {\r\n      switch (text) {\r\n        case \"get\": return Token.GET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.i: {\r\n      switch (text) {\r\n        case \"if\": return Token.IF;\r\n        case \"implements\": return Token.IMPLEMENTS;\r\n        case \"import\": return Token.IMPORT;\r\n        case \"in\": return Token.IN;\r\n        case \"instanceof\": return Token.INSTANCEOF;\r\n        case \"interface\": return Token.INTERFACE;\r\n        case \"is\": return Token.IS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.k: {\r\n      switch (text) {\r\n        case \"keyof\": return Token.KEYOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.l: {\r\n      switch (text) {\r\n        case \"let\": return Token.LET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.m: {\r\n      switch (text) {\r\n        case \"module\": return Token.MODULE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.n: {\r\n      switch (text) {\r\n        case \"namespace\": return Token.NAMESPACE;\r\n        case \"new\": return Token.NEW;\r\n        case \"null\": return Token.NULL;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.o: {\r\n      switch (text) {\r\n        case \"of\": return Token.OF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.p: {\r\n      switch (text) {\r\n        case \"package\": return Token.PACKAGE;\r\n        case \"private\": return Token.PRIVATE;\r\n        case \"protected\": return Token.PROTECTED;\r\n        case \"public\": return Token.PUBLIC;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.r: {\r\n      switch (text) {\r\n        case \"readonly\": return Token.READONLY;\r\n        case \"return\": return Token.RETURN;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.s: {\r\n      switch (text) {\r\n        case \"set\": return Token.SET;\r\n        case \"static\": return Token.STATIC;\r\n        case \"super\": return Token.SUPER;\r\n        case \"switch\": return Token.SWITCH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.t: {\r\n      switch (text) {\r\n        case \"this\": return Token.THIS;\r\n        case \"throw\": return Token.THROW;\r\n        case \"true\": return Token.TRUE;\r\n        case \"try\": return Token.TRY;\r\n        case \"type\": return Token.TYPE;\r\n        case \"typeof\": return Token.TYPEOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.v: {\r\n      switch (text) {\r\n        case \"var\": return Token.VAR;\r\n        case \"void\": return Token.VOID;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.w: {\r\n      switch (text) {\r\n        case \"while\": return Token.WHILE;\r\n        case \"with\": return Token.WITH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.y: {\r\n      switch (text) {\r\n        case \"yield\": return Token.YIELD;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return Token.INVALID;\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.FOR:\r\n    case Token.GET:\r\n    case Token.INSTANCEOF:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.NULL:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE:\r\n    case Token.VOID: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function isIllegalVariableIdentifier(name: string): bool {\r\n  assert(name.length);\r\n  switch (name.charCodeAt(0)) {\r\n    case CharCode.d: return name == \"delete\";\r\n    case CharCode.f: return name == \"for\";\r\n    case CharCode.i: return name == \"instanceof\";\r\n    case CharCode.n: return name == \"null\";\r\n    case CharCode.v: return name == \"void\";\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics || new Array();\r\n\r\n    var end = this.end;\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(identifierHandling);\r\n  }\r\n\r\n  private unsafeNext(\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxTokenLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    while (this.pos < end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (!(\r\n            ++this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          )) break;\r\n          // otherwise fall-through\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (chr == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (isDecimalDigit(chr)) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < end &&\r\n              chr == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (chr == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (chr == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < end) {\r\n                chr = text.charCodeAt(this.pos);\r\n                if (chr == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (chr == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken !== Token.INVALID &&\r\n                identifierHandling !== IdentifierHandling.ALWAYS &&\r\n                !(\r\n                  identifierHandling === IdentifierHandling.PREFER &&\r\n                  tokenIsAlsoIdentifier(keywordToken)\r\n                )\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\r\n          if (isLineBreak(text.charCodeAt(pos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\r\n    return this.skip(Token.IDENTIFIER, identifierHandling);\r\n  }\r\n\r\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    while (\r\n      ++this.pos < end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    var end = this.end;\r\n    if (++this.pos >= end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (!escaped && c == CharCode.SLASH) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var flags = 0;\r\n    while (this.pos < end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    if (this.pos + 1 < end && text.charCodeAt(this.pos) == CharCode._0) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.x:\r\n        case CharCode.X:\r\n        case CharCode.b:\r\n        case CharCode.B:\r\n        case CharCode.o:\r\n        case CharCode.O: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) return false;\r\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\r\n      // does not validate separator placement (this is done in readXYInteger)\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.x:\r\n        case CharCode.X: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.b:\r\n        case CharCode.B: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.o:\r\n        case CharCode.O: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_4 = i64_new(4);\r\n    var sepEnd = start;\r\n    var end = this.end;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = (value << 4) + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = (value << 4) + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(10 + c - CharCode.A)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = (value << 4) + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(10 + c - CharCode.a)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var value = i64_new(0);\r\n    var i64_10 = i64_new(10);\r\n    var sepEnd = start;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_3 = i64_new(3);\r\n    var sepEnd = start;\r\n    var end = this.end;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = (value << 3) + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_shl(value, i64_3),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_1 = i64_new(1);\r\n    var sepEnd = start;\r\n    var end = this.end;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode._0) {\r\n        // value = (value << 1);\r\n        value = i64_shl(value, i64_1);\r\n      } else if (c == CharCode._1) {\r\n        // value = (value << 1) + 1;\r\n        value = i64_add(\r\n          i64_shl(value, i64_1),\r\n          i64_1\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    // TODO: numeric separators (parseFloat can't handle these)\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.e || c == CharCode.E) {\r\n        if (\r\n          ++this.pos < end &&\r\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    while (this.pos < end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = (value << 4) + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = (value << 4) + c + (10 - CharCode.A);\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = (value << 4) + c + (10 - CharCode.a);\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    if (this.pos >= end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        ((value32 - 65536) >>> 10) + 0xD800,\r\n        ((value32 - 65536) & 1023) + 0xDC00\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\r\n * Resolve infrastructure to obtain types and elements.\r\n * @module resolver\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticEmitter,\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Program,\r\n  ElementKind,\r\n  OperatorKind,\r\n  Element,\r\n  Class,\r\n  ClassPrototype,\r\n  Function,\r\n  FunctionPrototype,\r\n  VariableLikeElement,\r\n  Property,\r\n  PropertyPrototype,\r\n  Field,\r\n  FieldPrototype,\r\n  Global,\r\n  TypeDefinition,\r\n  TypedElement,\r\n  FunctionTarget,\r\n  IndexSignature,\r\n  isTypedElement\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  Flow\r\n} from \"./flow\";\r\n\r\nimport {\r\n  FunctionTypeNode,\r\n  ParameterKind,\r\n  TypeNode,\r\n  NodeKind,\r\n  NamedTypeNode,\r\n  TypeName,\r\n  TypeParameterNode,\r\n  Node,\r\n  Range,\r\n  IdentifierExpression,\r\n  CallExpression,\r\n  ElementAccessExpression,\r\n  PropertyAccessExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  AssertionExpression,\r\n  Expression,\r\n  IntegerLiteralExpression,\r\n  UnaryPrefixExpression,\r\n  UnaryPostfixExpression,\r\n  AssertionKind,\r\n  BinaryExpression,\r\n  ThisExpression,\r\n  SuperExpression,\r\n  CommaExpression,\r\n  InstanceOfExpression,\r\n  TernaryExpression,\r\n  isTypeOmitted,\r\n  FunctionExpression,\r\n  NewExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n  typesToString,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  CommonSymbols\r\n} from \"./common\";\r\n\r\nimport {\r\n  makeMap,\r\n  isPowerOf2\r\n} from \"./util\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  BuiltinSymbols\r\n} from \"./builtins\";\r\n\r\n/** Indicates whether errors are reported or not. */\r\nexport enum ReportMode {\r\n  /** Report errors. */\r\n  REPORT,\r\n  /** Swallow errors. */\r\n  SWALLOW\r\n}\r\n\r\n/** Provides tools to resolve types and expressions. */\r\nexport class Resolver extends DiagnosticEmitter {\r\n\r\n  /** The program this resolver belongs to. */\r\n  program: Program;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  currentThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  currentElementExpression : Expression | null = null;\r\n\r\n  /** Constructs the resolver for the specified program. */\r\n  constructor(\r\n    /** The program to construct a resolver for. */\r\n    program: Program\r\n  ) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n  }\r\n\r\n  // ====================================================== Types ======================================================\r\n\r\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    /** The type to resolve. */\r\n    node: TypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    switch (node.kind) {\r\n      case NodeKind.NAMEDTYPE: {\r\n        return this.resolveNamedType(\r\n          <NamedTypeNode>node,\r\n          ctxElement,\r\n          ctxTypes,\r\n          reportMode\r\n        );\r\n      }\r\n      case NodeKind.FUNCTIONTYPE: {\r\n        return this.resolveFunctionType(\r\n          <FunctionTypeNode>node,\r\n          ctxElement,\r\n          ctxTypes,\r\n          reportMode\r\n        );\r\n      }\r\n      default: assert(false);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\r\n  private resolveNamedType(\r\n    /** The type to resolve. */\r\n    node: NamedTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var nameNode = node.name;\r\n    var typeArgumentNodes = node.typeArguments;\r\n    var isSimpleType = !nameNode.next;\r\n\r\n    // Look up in contextual types if a simple type\r\n    if (isSimpleType) {\r\n      let simpleName = nameNode.identifier.text;\r\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\r\n        let type = ctxTypes.get(simpleName)!;\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, type.toString()\r\n            );\r\n          }\r\n        }\r\n        if (node.isNullable) {\r\n          if (type.is(TypeFlags.REFERENCE)) return type.asNullable();\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n              node.range, type.toString()\r\n            );\r\n          }\r\n        }\r\n        return type;\r\n      }\r\n    }\r\n\r\n    // Look up in context\r\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\r\n    if (!element) return null;\r\n\r\n    // Use shadow type if present (i.e. namespace sharing a type)\r\n    if (element.shadowType) {\r\n      element = element.shadowType;\r\n\r\n    } else {\r\n\r\n      // Handle enums (become i32)\r\n      if (element.kind == ElementKind.ENUM) {\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, element.internalName\r\n            );\r\n          }\r\n        }\r\n        if (node.isNullable) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n              node.range, element.name + \"/i32\"\r\n            );\r\n          }\r\n        }\r\n        return Type.i32;\r\n      }\r\n\r\n      // Handle classes\r\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let instance = this.resolveClassInclTypeArguments(\r\n          <ClassPrototype>element,\r\n          typeArgumentNodes,\r\n          ctxElement,\r\n          makeMap<string,Type>(ctxTypes), // don't inherit\r\n          node,\r\n          reportMode\r\n        );\r\n        if (!instance) return null;\r\n        return node.isNullable ? instance.type.asNullable() : instance.type;\r\n      }\r\n    }\r\n\r\n    // Handle type definitions\r\n    if (element.kind == ElementKind.TYPEDEFINITION) {\r\n\r\n      // Shortcut already resolved (mostly builtins)\r\n      if (element.is(CommonFlags.RESOLVED)) {\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, element.internalName\r\n            );\r\n          }\r\n        }\r\n        let type = (<TypeDefinition>element).type;\r\n        if (node.isNullable) {\r\n          if (!type.is(TypeFlags.REFERENCE)) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n                nameNode.range, nameNode.identifier.text\r\n              );\r\n            }\r\n          } else {\r\n            return type.asNullable();\r\n          }\r\n        }\r\n        return type;\r\n      }\r\n\r\n      // Handle special built-in types\r\n      if (isSimpleType) {\r\n        switch (nameNode.identifier.symbol) {\r\n          case CommonSymbols.native: return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\r\n          case CommonSymbols.indexof: return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\r\n          case CommonSymbols.valueof: return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\r\n          case CommonSymbols.returnof: return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\r\n        }\r\n      }\r\n\r\n      // Resolve normally\r\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\r\n      let typeArguments: Type[] | null = null;\r\n      if (typeParameterNodes) {\r\n        typeArguments = this.resolveTypeArguments(\r\n          typeParameterNodes,\r\n          typeArgumentNodes,\r\n          ctxElement,\r\n          ctxTypes = makeMap(ctxTypes), // inherit\r\n          node,\r\n          reportMode\r\n        );\r\n        if (!typeArguments) return null;\r\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          node.range, nameNode.identifier.text\r\n        );\r\n      }\r\n      let type = this.resolveType(\r\n        (<TypeDefinition>element).typeNode,\r\n        element,\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!type) return null;\r\n      if (node.isNullable) {\r\n        if (!type.is(TypeFlags.REFERENCE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n              nameNode.range, nameNode.identifier.text\r\n            );\r\n          }\r\n        } else {\r\n          return type.asNullable();\r\n        }\r\n      }\r\n      return type;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        nameNode.range, nameNode.identifier.text\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\r\n  private resolveFunctionType(\r\n    /** The type to resolve. */\r\n    node: FunctionTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        ctxElement,\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterNodes = node.parameters;\r\n    var numParameters = parameterNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterNode = parameterNodes[i];\r\n      switch (parameterNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterTypeNode = parameterNode.type;\r\n      if (isTypeOmitted(parameterTypeNode)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            parameterTypeNode.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let parameterType = this.resolveType(\r\n        parameterTypeNode,\r\n        ctxElement,\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (isTypeOmitted(returnTypeNode)) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnTypeNode.range\r\n        );\r\n      }\r\n      returnType = Type.void;\r\n    } else {\r\n      returnType = this.resolveType(\r\n        returnTypeNode,\r\n        ctxElement,\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!returnType) return null;\r\n    }\r\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return node.isNullable ? signature.type.asNullable() : signature.type;\r\n  }\r\n\r\n  private resolveBuiltinNativeType(\r\n    /** The type to resolve. */\r\n    node: NamedTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var typeArgumentNodes = node.typeArguments;\r\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\r\n    if (!typeArgument) return null;\r\n    switch (typeArgument.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.I32: return Type.i32;\r\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\r\n      case TypeKind.I64: return Type.i64;\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.U32:\r\n      case TypeKind.BOOL: return Type.u32;\r\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\r\n      case TypeKind.U64: return Type.u64;\r\n      case TypeKind.F32: return Type.f32;\r\n      case TypeKind.F64: return Type.f64;\r\n      case TypeKind.V128: return Type.v128;\r\n      case TypeKind.VOID: return Type.void;\r\n      default: assert(false);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private resolveBuiltinIndexofType(\r\n    /** The type to resolve. */\r\n    node: NamedTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var typeArgumentNodes = node.typeArguments;\r\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\r\n    if (!typeArgument) return null;\r\n    var classReference = typeArgument.classReference;\r\n    if (!classReference) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n          typeArgumentNodes[0].range, typeArgument.toString()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\r\n    if (overload) {\r\n      if (overload.is(CommonFlags.STATIC)) {\r\n        assert(overload.signature.parameterTypes.length == 2);\r\n        return overload.signature.parameterTypes[1];\r\n      } else {\r\n        assert(overload.signature.parameterTypes.length == 1);\r\n        return overload.signature.parameterTypes[0];\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n        typeArgumentNodes[0].range, typeArgument.toString()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private resolveBuiltinValueofType(\r\n    /** The type to resolve. */\r\n    node: NamedTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var typeArgumentNodes = node.typeArguments;\r\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\r\n    if (!typeArgument) return null;\r\n    var classReference = typeArgument.classReference;\r\n    if (!classReference) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n          typeArgumentNodes[0].range, typeArgument.toString()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n\r\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\r\n    if (overload) return overload.signature.returnType;\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n        typeArgumentNodes[0].range, typeArgument.toString()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private resolveBuiltinReturnTypeType(\r\n    /** The type to resolve. */\r\n    node: NamedTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var typeArgumentNodes = node.typeArguments;\r\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\r\n    if (!typeArgument) return null;\r\n    var signatureReference = typeArgument.signatureReference;\r\n    if (!signatureReference) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_has_no_call_signatures,\r\n          typeArgumentNodes[0].range, typeArgument.toString()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    return signatureReference.returnType;\r\n  }\r\n\r\n  /** Resolves a type name to the program element it refers to. */\r\n  resolveTypeName(\r\n    /** The type name to resolve. */\r\n    node: TypeName,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var element = ctxElement.lookup(node.identifier.text);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Cannot_find_name_0,\r\n          node.range, node.identifier.text\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var prev = node;\r\n    var next = node.next;\r\n    while (next) {\r\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            next.range, next.identifier.text, prev.identifier.text\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      prev = next;\r\n      next = next.next;\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    /** Type parameter nodes present. */\r\n    typeParameters: TypeParameterNode[],\r\n    /** Type argument nodes provided. */\r\n    typeArgumentNodes: TypeNode[] | null,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\r\n    /** Alternative report node in case of empty type arguments. */\r\n    alternativeReportNode: Node | null = null,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type[] | null {\r\n    var minParameterCount = 0;\r\n    var maxParameterCount = 0;\r\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\r\n      if (!typeParameters[i].defaultType) ++minParameterCount;\r\n      ++maxParameterCount;\r\n    }\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        argumentCount\r\n          ? Range.join(\r\n              (<NamedTypeNode[]>typeArgumentNodes)[0].range,\r\n              (<NamedTypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n            )\r\n          : assert(alternativeReportNode).range,\r\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\r\n        argumentCount.toString(10)\r\n      );\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(maxParameterCount);\r\n    for (let i = 0; i < maxParameterCount; ++i) {\r\n      let type = i < argumentCount\r\n        ? this.resolveType( // reports\r\n            (<NamedTypeNode[]>typeArgumentNodes)[i],\r\n            ctxElement,\r\n            ctxTypes,\r\n            reportMode\r\n          )\r\n        : this.resolveType( // reports\r\n            assert(typeParameters[i].defaultType),\r\n            ctxElement,\r\n            ctxTypes,\r\n            reportMode\r\n          );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      ctxTypes.set(typeParameters[i].name.text, type);\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves respectively infers the concrete instance of a function by call context. */\r\n  maybeInferCall(\r\n    node: CallExpression,\r\n    prototype: FunctionPrototype,\r\n    ctxFlow: Flow,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var typeArguments = node.typeArguments;\r\n\r\n    // resolve generic call if type arguments have been provided\r\n    if (typeArguments) {\r\n      if (!prototype.is(CommonFlags.GENERIC)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            node.expression.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      return this.resolveFunctionInclTypeArguments(\r\n        prototype,\r\n        node.typeArguments,\r\n        ctxFlow.actualFunction,\r\n        makeMap(ctxFlow.contextualTypeArguments), // don't inherit\r\n        node,\r\n        reportMode\r\n      );\r\n    }\r\n\r\n    // infer generic call if type arguments have been omitted\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n      let contextualTypeArguments = makeMap<string,Type>(ctxFlow.contextualTypeArguments);\r\n\r\n      // fill up contextual types with auto for each generic component\r\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\r\n      let numTypeParameters = typeParameterNodes.length;\r\n      let typeParameterNames = new Set<string>();\r\n      for (let i = 0; i < numTypeParameters; ++i) {\r\n        let name = typeParameterNodes[i].name.text;\r\n        contextualTypeArguments.set(name, Type.auto);\r\n        typeParameterNames.add(name);\r\n      }\r\n\r\n      let parameterNodes = prototype.functionTypeNode.parameters;\r\n      let numParameters = parameterNodes.length;\r\n      let argumentNodes = node.arguments;\r\n      let numArguments = argumentNodes.length;\r\n\r\n      // infer types with generic components while updating contextual types\r\n      for (let i = 0; i < numParameters; ++i) {\r\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\r\n        if (!argumentExpression) { // missing initializer -> too few arguments\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              node.range, numParameters.toString(10), numArguments.toString(10)\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        let typeNode = parameterNodes[i].type;\r\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\r\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\r\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\r\n        }\r\n      }\r\n\r\n      // apply concrete types to the generic function signature\r\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n      for (let i = 0; i < numTypeParameters; ++i) {\r\n        let name = typeParameterNodes[i].name.text;\r\n        if (contextualTypeArguments.has(name)) {\r\n          let inferredType = contextualTypeArguments.get(name)!;\r\n          if (inferredType != Type.auto) {\r\n            resolvedTypeArguments[i] = inferredType;\r\n            continue;\r\n          }\r\n        }\r\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\r\n        // invalid because the type is effectively unknown inside the function body\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_argument_expected,\r\n            node.expression.range.atEnd\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      return this.resolveFunction(\r\n        prototype,\r\n        resolvedTypeArguments,\r\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\r\n        reportMode\r\n      );\r\n    }\r\n\r\n    // otherwise resolve the non-generic call as usual\r\n    return this.resolveFunction(prototype, null, makeMap<string,Type>(), reportMode);\r\n  }\r\n\r\n  /** Updates contextual types with a possibly encapsulated inferred type. */\r\n  private propagateInferredGenericTypes(\r\n    /** The inferred type node. */\r\n    node: TypeNode,\r\n    /** The inferred type. */\r\n    type: Type,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\r\n    ctxTypes: Map<string,Type>,\r\n    /** The names of the type parameters being inferred. */\r\n    typeParameterNames: Set<string>\r\n  ): void {\r\n    if (node.kind == NodeKind.NAMEDTYPE) {\r\n      let typeArgumentNodes = (<NamedTypeNode>node).typeArguments;\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) { // foo<T>(bar: Array<T>)\r\n        let classReference = type.classReference;\r\n        if (classReference) {\r\n          let classPrototype = this.resolveTypeName((<NamedTypeNode>node).name, ctxFlow.actualFunction);\r\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\r\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\r\n            let typeArguments = classReference.typeArguments;\r\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\r\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\r\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\r\n              }\r\n              return;\r\n            }\r\n          }\r\n        }\r\n      } else { // foo<T>(bar: T)\r\n        let name = (<NamedTypeNode>node).name.identifier.text;\r\n        if (ctxTypes.has(name)) {\r\n          let currentType = ctxTypes.get(name)!;\r\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\r\n            ctxTypes.set(name, type);\r\n          }\r\n        }\r\n      }\r\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\r\n      let parameterNodes = (<FunctionTypeNode>node).parameters;\r\n      if (parameterNodes !== null && parameterNodes.length) {\r\n        let signatureReference = type.signatureReference;\r\n        if (signatureReference) {\r\n          let parameterTypes = signatureReference.parameterTypes;\r\n          let thisType = signatureReference.thisType;\r\n          if (parameterTypes.length == parameterNodes.length && !thisType == !(<FunctionTypeNode>node).explicitThisType) {\r\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\r\n            }\r\n            this.propagateInferredGenericTypes((<FunctionTypeNode>node).returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\r\n            if (thisType) this.propagateInferredGenericTypes((<FunctionTypeNode>node).explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\r\n            return;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Gets the concrete type of an element. */\r\n  getTypeOfElement(element: Element): Type | null {\r\n    var kind = element.kind;\r\n    if (kind == ElementKind.GLOBAL) {\r\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\r\n    }\r\n    if (isTypedElement(kind)) {\r\n      let type = (<TypedElement>element).type;\r\n      assert(type != Type.void);\r\n      let classReference = type.classReference;\r\n      if (classReference) {\r\n        let wrappedType = classReference.wrappedType;\r\n        if (wrappedType) type = wrappedType;\r\n      }\r\n      return type;\r\n    }\r\n    if (kind == ElementKind.FUNCTION_TARGET) return (<FunctionTarget>element).type;\r\n    return null;\r\n  }\r\n\r\n  /** Gets the element of a concrete type. */\r\n  getElementOfType(type: Type): Element | null {\r\n    if (type.is(TypeFlags.REFERENCE)) {\r\n      let classReference = type.classReference;\r\n      if (classReference) return classReference;\r\n      let signatureReference = assert(type.signatureReference);\r\n      return signatureReference.asFunctionTarget(this.program);\r\n    } else if (type != Type.void) {\r\n      let wrapperClasses = this.program.wrapperClasses;\r\n      assert(wrapperClasses.has(type));\r\n      return wrapperClasses.get(type);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // =================================================== Expressions ===================================================\r\n\r\n  /** Looks up the program element the specified expression refers to. */\r\n  lookupExpression(\r\n    /** The expression to look up. */\r\n    node: Expression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\r\n      node = (<ParenthesizedExpression>node).expression;\r\n    }\r\n    switch (node.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        return this.lookupAssertionExpression(\r\n          <AssertionExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.BINARY: {\r\n        return this.lookupBinaryExpression(\r\n          <BinaryExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        return this.lookupCallExpression(\r\n          <CallExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.COMMA: {\r\n        return this.lookupCommaExpression(\r\n          <CommaExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.lookupElementAccessExpression(\r\n          <ElementAccessExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        return this.lookupFunctionExpression(\r\n          <FunctionExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.TRUE: {\r\n        return this.lookupIdentifierExpression(\r\n          <IdentifierExpression>node,\r\n          ctxFlow, ctxFlow.actualFunction, reportMode\r\n        );\r\n      }\r\n      case NodeKind.THIS: {\r\n        return this.lookupThisExpression(\r\n          <ThisExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.SUPER: {\r\n        return this.lookupSuperExpression(\r\n          <SuperExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        return this.lookupInstanceOfExpression(\r\n          <InstanceOfExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        return this.lookupLiteralExpression(\r\n          <LiteralExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.NEW: {\r\n        return this.lookupNewExpression(\r\n          <NewExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.lookupPropertyAccessExpression(\r\n          <PropertyAccessExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        return this.lookupTernaryExpression(\r\n          <TernaryExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        return this.lookupUnaryPostfixExpression(\r\n          <UnaryPostfixExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        return this.lookupUnaryPrefixExpression(\r\n          <UnaryPrefixExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Not_implemented,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an expression to its static type. */\r\n  resolveExpression(\r\n    /** The expression to resolve. */\r\n    node: Expression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\r\n      node = (<ParenthesizedExpression>node).expression;\r\n    }\r\n    switch (node.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        return this.resolveAssertionExpression(\r\n          <AssertionExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.BINARY: {\r\n        return this.resolveBinaryExpression(\r\n          <BinaryExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        return this.resolveCallExpression(\r\n          <CallExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.COMMA: {\r\n        return this.resolveCommaExpression(\r\n          <CommaExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccessExpression(\r\n          <ElementAccessExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        return this.resolveFunctionExpression(\r\n          <FunctionExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.TRUE: {\r\n        return this.resolveIdentifierExpression(\r\n          <IdentifierExpression>node,\r\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\r\n        );\r\n      }\r\n      case NodeKind.THIS: {\r\n        return this.resolveThisExpression(\r\n          <ThisExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.SUPER: {\r\n        return this.resolveSuperExpression(\r\n          <SuperExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        return this.resolveInstanceOfExpression(\r\n          <InstanceOfExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        return this.resolveLiteralExpression(\r\n          <LiteralExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.NEW: {\r\n        return this.resolveNewExpression(\r\n          <NewExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccessExpression(\r\n          <PropertyAccessExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        return this.resolveTernaryExpression(\r\n          <TernaryExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        return this.resolveUnaryPostfixExpression(\r\n          <UnaryPostfixExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        return this.resolveUnaryPrefixExpression(\r\n          <UnaryPrefixExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Not_implemented,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the program element the specified identifier expression refers to. */\r\n  lookupIdentifierExpression(\r\n    /** The expression to look up. */\r\n    node: IdentifierExpression,\r\n    /** Flow to search for scoped locals. */\r\n    ctxFlow: Flow,\r\n    /** Element to search. */\r\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    switch (node.kind) {\r\n      case NodeKind.TRUE:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL: {\r\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\r\n        return type ? this.getElementOfType(type) : null;\r\n      }\r\n    }\r\n    var name = node.text;\r\n    var element: Element | null;\r\n    if (element = ctxFlow.lookup(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element;\r\n    }\r\n    if (element = ctxElement.lookup(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element;\r\n    }\r\n    if (element = this.program.lookupGlobal(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        node.range, name\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an identifier to its static type. */\r\n  private resolveIdentifierExpression(\r\n    /** The expression to resolve. */\r\n    node: IdentifierExpression,\r\n    /** Flow to search for scoped locals. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** Element to search. */\r\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    switch (node.kind) {\r\n      case NodeKind.TRUE:\r\n      case NodeKind.FALSE: return Type.bool;\r\n      case NodeKind.NULL: {\r\n        let classReference = ctxType.classReference;\r\n        return ctxType.is(TypeFlags.REFERENCE) && classReference !== null\r\n          ? classReference.type.asNullable()\r\n          : this.program.options.usizeType; // TODO: anyref context?\r\n      }\r\n    }\r\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\r\n    if (!element) return null;\r\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, makeMap(), reportMode);\r\n      if (!instance) return null;\r\n      element = instance;\r\n    }\r\n    var type = this.getTypeOfElement(element);\r\n    if (!type) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\r\n          node.range\r\n        );\r\n      }\r\n    }\r\n    return type;\r\n  }\r\n\r\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\r\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\r\n    if (global.is(CommonFlags.RESOLVED)) return true;\r\n    var type: Type | null;\r\n    var typeNode = global.typeNode;\r\n    if (typeNode) {\r\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\r\n    } else {\r\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\r\n    }\r\n    if (!type) return false;\r\n    global.setType(type); // also sets resolved\r\n    return true;\r\n  }\r\n\r\n  /** Looks up the program element the specified property access expression refers to. */\r\n  private lookupPropertyAccessExpression(\r\n    /** The expression to look up. */\r\n    node: PropertyAccessExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetNode = node.expression;\r\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\r\n    if (!target) return null;\r\n    var propertyName = node.property.text;\r\n\r\n    // Resolve variable-likes to their class type first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.ENUMVALUE:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: { // someVar.prop\r\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\r\n        let classReference = type.classReference;\r\n        if (!classReference) {\r\n          let wrapperClasses = this.program.wrapperClasses;\r\n          if (wrapperClasses.has(type)) {\r\n            classReference = wrapperClasses.get(type)!;\r\n          } else {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n                node.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n              );\r\n            }\r\n            return null;\r\n          }\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\r\n        let getterInstance = this.resolveFunction( // reports\r\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n        if (!getterInstance) return null;\r\n        let type = getterInstance.signature.returnType;\r\n        let classReference = type.classReference;\r\n        if (!classReference) {\r\n          let wrapperClasses = this.program.wrapperClasses;\r\n          if (wrapperClasses.has(type)) {\r\n            classReference = wrapperClasses.get(type)!;\r\n          } else {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n                node.property.range, propertyName, type.toString()\r\n              );\r\n            }\r\n            return null;\r\n          }\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // someInstance.prop\r\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\r\n        let type = getterInstance.signature.returnType;\r\n        let classReference = type.classReference;\r\n        if (!classReference) {\r\n          let wrapperClasses = this.program.wrapperClasses;\r\n          if (wrapperClasses.has(type)) {\r\n            classReference = wrapperClasses.get(type)!;\r\n          } else {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n                node.property.range, propertyName, type.toString()\r\n              );\r\n            }\r\n            return null;\r\n          }\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\r\n        let elementExpression = assert(this.currentElementExpression);\r\n        let parent = (<IndexSignature>target).parent;\r\n        assert(parent.kind == ElementKind.CLASS);\r\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET);\r\n        if (!indexedGet) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementExpression.range, parent.internalName\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        let returnType = indexedGet.signature.returnType;\r\n        let classReference = returnType.classReference;\r\n        if (!classReference) {\r\n          let wrapperClasses = this.program.wrapperClasses;\r\n          if (wrapperClasses.has(returnType)) {\r\n            classReference = wrapperClasses.get(returnType)!;\r\n          } else {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n                node.property.range, propertyName, returnType.toString()\r\n              );\r\n            }\r\n            return null;\r\n          }\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\r\n        let shadowType = target.shadowType;\r\n        if (shadowType) {\r\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\r\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\r\n            if (resolvedType) shadowType.setType(resolvedType);\r\n          }\r\n          let classReference = shadowType.type.classReference;\r\n          if (classReference) target = classReference.prototype;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          if (members && members.has(propertyName)) {\r\n            this.currentThisExpression = targetNode;\r\n            this.currentElementExpression = null;\r\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        if (members && members.has(propertyName)) {\r\n          this.currentThisExpression = targetNode;\r\n          this.currentElementExpression = null;\r\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n        node.property.range, propertyName, target.internalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a property access expression to its static type. */\r\n  private resolvePropertyAccessExpression(\r\n    /** The expression to resolve. */\r\n    node: PropertyAccessExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!element) return null;\r\n    var type = this.getTypeOfElement(element);\r\n    if (!type) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\r\n          node.range\r\n        );\r\n      }\r\n    }\r\n    return type;\r\n  }\r\n\r\n  /** Looks up the program element the specified element access expression refers to. */\r\n  private lookupElementAccessExpression(\r\n    /** The expression to look up. */\r\n    node: ElementAccessExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = node.expression;\r\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\r\n    if (!targetType) return null;\r\n    if (targetType.is(TypeFlags.REFERENCE)) {\r\n      let classReference = targetType.classReference;\r\n      if (classReference) {\r\n        let indexSignature = classReference.indexSignature;\r\n        if (indexSignature) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = node.elementExpression;\r\n          return indexSignature;\r\n        }\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n        targetExpression.range, targetType.toString()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an element access expression to its static type. */\r\n  private resolveElementAccessExpression(\r\n    /** The expression to resolve. */\r\n    node: ElementAccessExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!element) return null;\r\n    var type = this.getTypeOfElement(element);\r\n    if (!type) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\r\n          node.range\r\n        );\r\n      }\r\n    }\r\n    return type;\r\n  }\r\n\r\n  /** Determines the final type of an integer literal given the specified contextual type. */\r\n  determineIntegerLiteralType(\r\n    /** Integer literal value. */\r\n    intValue: I64,\r\n    /** Contextual type. */\r\n    ctxType: Type\r\n  ): Type {\r\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\r\n      // compile to contextual type if matching\r\n      switch (ctxType.kind) {\r\n        case TypeKind.I8: {\r\n          if (i64_is_i8(intValue)) return Type.i8;\r\n          break;\r\n        }\r\n        case TypeKind.U8: {\r\n          if (i64_is_u8(intValue)) return Type.u8;\r\n          break;\r\n        }\r\n        case TypeKind.I16: {\r\n          if (i64_is_i16(intValue)) return Type.i16;\r\n          break;\r\n        }\r\n        case TypeKind.U16: {\r\n          if (i64_is_u16(intValue)) return Type.u16;\r\n          break;\r\n        }\r\n        case TypeKind.I32: {\r\n          if (i64_is_i32(intValue)) return Type.i32;\r\n          break;\r\n        }\r\n        case TypeKind.U32: {\r\n          if (i64_is_u32(intValue)) return Type.u32;\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: {\r\n          if (i64_is_bool(intValue)) return Type.bool;\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_i32(intValue)) return Type.isize32;\r\n            break;\r\n          }\r\n          return Type.isize64;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_u32(intValue)) return Type.usize32;\r\n            break;\r\n          }\r\n          return Type.usize64;\r\n        }\r\n        case TypeKind.I64: return Type.i64;\r\n        case TypeKind.U64: return Type.u64;\r\n        case TypeKind.F32: return Type.f32;\r\n        case TypeKind.F64: return Type.f64;\r\n      }\r\n    }\r\n    // otherwise compile to best fitting native type\r\n    if (i64_is_i32(intValue)) return Type.i32;\r\n    if (i64_is_u32(intValue)) return Type.u32;\r\n    return Type.i64; // TODO: u64 if positive and larger than i64?\r\n  }\r\n\r\n  /** Looks up the program element the specified assertion expression refers to. */\r\n  private lookupAssertionExpression(\r\n    /** The expression to look up. */\r\n    node: AssertionExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (node.assertionKind == AssertionKind.NONNULL) {\r\n      return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\r\n    }\r\n    var type = this.resolveType(\r\n      assert(node.toType), // must be set if not NONNULL\r\n      ctxFlow.actualFunction,\r\n      ctxFlow.contextualTypeArguments,\r\n      reportMode\r\n    );\r\n    if (!type) return null;\r\n    var element = this.getElementOfType(type);\r\n    if (element) return element;\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\r\n        node.range, type.toString()\r\n      );\r\n    }\r\n    this.currentThisExpression = null;\r\n    this.currentElementExpression = null;\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an assertion expression to its static type. */\r\n  private resolveAssertionExpression(\r\n    /** The expression to resolve. */\r\n    node: AssertionExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    if (node.assertionKind == AssertionKind.NONNULL) {\r\n      let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\r\n      return type ? type.nonNullableType : null;\r\n    }\r\n    return this.resolveType(\r\n      assert(node.toType), // must be set if not NONNULL\r\n      ctxFlow.actualFunction,\r\n      ctxFlow.contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n\r\n  /** Looks up the program element the specified unary prefix expression refers to. */\r\n  private lookupUnaryPrefixExpression(\r\n    /** The expression to look up. */\r\n    node: UnaryPrefixExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!type) return null;\r\n    var element = this.getElementOfType(type);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n          node.range, operatorTokenToString(node.operator), type.toString()\r\n        );\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an unary prefix expression to its static type. */\r\n  private resolveUnaryPrefixExpression(\r\n    /** The expression to resolve. */\r\n    node: UnaryPrefixExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var operand = node.operand;\r\n    var operator = node.operator;\r\n    switch (operator) {\r\n      case Token.MINUS: {\r\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\r\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\r\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\r\n        }\r\n        // fall-through\r\n      }\r\n      case Token.PLUS:\r\n      case Token.PLUS_PLUS:\r\n      case Token.MINUS_MINUS: {\r\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\r\n        if (!type) return null;\r\n        if (type.is(TypeFlags.REFERENCE)) {\r\n          let classReference = type.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\r\n            if (overload) return overload.signature.returnType;\r\n            let wrappedType = classReference.wrappedType;\r\n            if (wrappedType) type = wrappedType;\r\n          }\r\n        }\r\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || type.is(TypeFlags.REFERENCE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              node.range, operatorTokenToString(operator), type.toString()\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        return type;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\r\n        if (!type) return null;\r\n        if (type.is(TypeFlags.REFERENCE)) {\r\n          let classReference = type.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        return Type.bool; // incl. references\r\n      }\r\n      case Token.TILDE: {\r\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\r\n        if (!type) return null;\r\n        if (type.is(TypeFlags.REFERENCE)) {\r\n          let classReference = type.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || !type.is(TypeFlags.VALUE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              node.range, \"~\", type.toString()\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        return type.intType;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the program element the specified unary postfix expression refers to. */\r\n  private lookupUnaryPostfixExpression(\r\n    /** The expression to resolve. */\r\n    node: UnaryPostfixExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!type) return null;\r\n    var element = this.getElementOfType(type);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n          node.range, operatorTokenToString(node.operator), type.toString()\r\n        );\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an unary postfix expression to its static type. */\r\n  private resolveUnaryPostfixExpression(\r\n    /** The expression to resolve. */\r\n    node: UnaryPostfixExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var operator = node.operator;\r\n    switch (operator) {\r\n      case Token.PLUS_PLUS:\r\n      case Token.MINUS_MINUS: {\r\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\r\n        if (!type) return null;\r\n        if (type.is(TypeFlags.REFERENCE)) {\r\n          let classReference = type.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        if (!type.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || !type.is(TypeFlags.VALUE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              node.range, operatorTokenToString(operator), type.toString()\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        return type;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Not_implemented,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the program element the specified binary expression refers to. */\r\n  private lookupBinaryExpression(\r\n    /** The expression to look up. */\r\n    node: BinaryExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!type) return null;\r\n    var element = this.getElementOfType(type);\r\n    if (element) return element; // otherwise void\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\r\n        node.range, type.toString()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a binary expression to its static type. */\r\n  private resolveBinaryExpression(\r\n    /** The expression to resolve. */\r\n    node: BinaryExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var left = node.left;\r\n    var right = node.right;\r\n    var operator = node.operator;\r\n\r\n    switch (operator) {\r\n\r\n      // assignment: result is the target's type\r\n\r\n      case Token.EQUALS:\r\n      case Token.PLUS_EQUALS:\r\n      case Token.MINUS_EQUALS:\r\n      case Token.ASTERISK_EQUALS:\r\n      case Token.ASTERISK_ASTERISK_EQUALS:\r\n      case Token.SLASH_EQUALS:\r\n      case Token.PERCENT_EQUALS:\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n      case Token.AMPERSAND_EQUALS:\r\n      case Token.BAR_EQUALS:\r\n      case Token.CARET_EQUALS: {\r\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\r\n      }\r\n\r\n      // comparison: result is Bool, preferring overloads, integer/float only\r\n\r\n      case Token.LESSTHAN:\r\n      case Token.GREATERTHAN:\r\n      case Token.LESSTHAN_EQUALS:\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\r\n        if (!leftType) return null;\r\n        if (leftType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        if (!leftType.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || leftType.is(TypeFlags.REFERENCE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              node.range, operatorTokenToString(operator), leftType.toString()\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        return Type.bool;\r\n      }\r\n\r\n      // equality: result is Bool, preferring overloads, incl. references\r\n\r\n      case Token.EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\r\n        if (!leftType) return null;\r\n        if (leftType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        return Type.bool;\r\n      }\r\n\r\n      // identity: result is Bool, not supporting overloads\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\r\n        return Type.bool;\r\n      }\r\n\r\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\r\n\r\n      case Token.PLUS:\r\n      case Token.MINUS:\r\n      case Token.ASTERISK:\r\n      case Token.SLASH:\r\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\r\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\r\n        if (!leftType) return null;\r\n        if (leftType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\r\n        if (!rightType) return null;\r\n        let commonType = Type.commonDenominator(leftType, rightType, false);\r\n        if (!commonType) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              node.range, leftType.toString(), rightType.toString()\r\n            );\r\n          }\r\n        }\r\n        return commonType;\r\n      }\r\n\r\n      // pow: result is f32 if LHS is f32, otherwise f64, preferring overloads\r\n\r\n      case Token.ASTERISK_ASTERISK: {\r\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\r\n        if (!leftType) return null;\r\n        if (leftType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POW);\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        return leftType == Type.f32 ? Type.f32 : Type.f64;\r\n      }\r\n\r\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\r\n\r\n      case Token.LESSTHAN_LESSTHAN:\r\n      case Token.GREATERTHAN_GREATERTHAN:\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\r\n        if (!leftType) return null;\r\n        if (leftType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        if (!leftType.is(TypeFlags.INTEGER) || leftType.is(TypeFlags.REFERENCE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              node.range, operatorTokenToString(operator), leftType.toString()\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        return leftType;\r\n      }\r\n\r\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\r\n\r\n      case Token.AMPERSAND:\r\n      case Token.BAR:\r\n      case Token.CARET: {\r\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\r\n        if (!leftType) return null;\r\n        if (leftType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\r\n        if (!rightType) return null;\r\n        let commonType = Type.commonDenominator(leftType, rightType, false);\r\n        if (!commonType || !commonType.is(TypeFlags.INTEGER) || commonType.is(TypeFlags.REFERENCE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\r\n            );\r\n          }\r\n        }\r\n        return commonType;\r\n      }\r\n\r\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\r\n\r\n      case Token.AMPERSAND_AMPERSAND:\r\n      case Token.BAR_BAR: {\r\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Not_implemented,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the program element the specified this expression refers to. */\r\n  private lookupThisExpression(\r\n    /** The expression to look up. */\r\n    node: ThisExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      let thisLocal = ctxFlow.lookupLocal(CommonSymbols.this_);\r\n      if (thisLocal) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return thisLocal;\r\n      }\r\n    }\r\n    var parent = ctxFlow.actualFunction.parent;\r\n    if (parent) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return parent;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a this expression to its static type. */\r\n  private resolveThisExpression(\r\n    /** The expression to resolve. */\r\n    node: ThisExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!element) return null;\r\n    var type = this.getTypeOfElement(element);\r\n    if (!type) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\r\n          node.range\r\n        );\r\n      }\r\n    }\r\n    return type;\r\n  }\r\n\r\n  /** Looks up the program element the specified super expression refers to. */\r\n  private lookupSuperExpression(\r\n    /** The expression to look up. */\r\n    node: SuperExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      let superLocal = ctxFlow.lookupLocal(CommonSymbols.super_);\r\n      if (superLocal) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return superLocal;\r\n      }\r\n    }\r\n    var parent: Element | null = ctxFlow.actualFunction.parent;\r\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return parent;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a super expression to its static type. */\r\n  private resolveSuperExpression(\r\n    /** The expression to resolve. */\r\n    node: SuperExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!element) return null;\r\n    var type = this.getTypeOfElement(element);\r\n    if (!type) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\r\n          node.range\r\n        );\r\n      }\r\n    }\r\n    return type;\r\n  }\r\n\r\n  /** Looks up the program element the specified literal expression refers to. */\r\n  private lookupLiteralExpression(\r\n    /** The expression to look up. */\r\n    node: LiteralExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    switch (node.literalKind) {\r\n      case LiteralKind.INTEGER: {\r\n        this.currentThisExpression = node;\r\n        this.currentElementExpression = null;\r\n        let intType = this.determineIntegerLiteralType(\r\n          (<IntegerLiteralExpression>node).value,\r\n          ctxType\r\n        );\r\n        let wrapperClasses = this.program.wrapperClasses;\r\n        assert(wrapperClasses.has(intType));\r\n        return wrapperClasses.get(intType);\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        this.currentThisExpression = node;\r\n        this.currentElementExpression = null;\r\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\r\n        let wrapperClasses = this.program.wrapperClasses;\r\n        assert(wrapperClasses.has(fltType));\r\n        return wrapperClasses.get(fltType);\r\n      }\r\n      case LiteralKind.STRING: {\r\n        this.currentThisExpression = node;\r\n        this.currentElementExpression = null;\r\n        return this.program.stringInstance;\r\n      }\r\n      // TODO\r\n      // case LiteralKind.ARRAY:\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Not_implemented,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a literal expression to its static type. */\r\n  private resolveLiteralExpression(\r\n    /** The expression to resolve. */\r\n    node: LiteralExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!element) return null;\r\n    var type = this.getTypeOfElement(element);\r\n    if (!type) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\r\n          node.range\r\n        );\r\n      }\r\n    }\r\n    return type;\r\n  }\r\n\r\n  /** Looks up the program element the specified call expression refers to. */\r\n  private lookupCallExpression(\r\n    /** The expression to look up. */\r\n    node: CallExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.void,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!type) return null;\r\n    var element = this.getElementOfType(type);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\r\n          node.range, type.toString()\r\n        );\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves a call expression to its static type. */\r\n  private resolveCallExpression(\r\n    /** The expression to resolve. */\r\n    node: CallExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.void,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var targetExpression = node.expression;\r\n    var target = this.lookupExpression( // reports\r\n      targetExpression,\r\n      ctxFlow,\r\n      ctxType,\r\n      reportMode\r\n    );\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        // `unchecked` behaves like parenthesized\r\n        if (\r\n          (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\r\n          node.arguments.length > 0\r\n        ) {\r\n          return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\r\n        }\r\n        let instance = this.maybeInferCall(node, <FunctionPrototype>target, ctxFlow, reportMode);\r\n        if (!instance) return null;\r\n        return instance.signature.returnType;\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: return (<FunctionTarget>target).signature.returnType;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n        targetExpression.range, target.internalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the program element the specified comma expression refers to. */\r\n  private lookupCommaExpression(\r\n    /** The expression to look up. */\r\n    node: CommaExpression,\r\n    /** Flow to search for scoped locals. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var expressions = node.expressions;\r\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\r\n  }\r\n\r\n  /** Resolves a comma expression to its static type. */\r\n  private resolveCommaExpression(\r\n    /** The expression to resolve. */\r\n    node: CommaExpression,\r\n    /** Flow to search for scoped locals. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var expressions = node.expressions;\r\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\r\n  }\r\n\r\n  /** Looks up the program element the specified instanceof expression refers to. */\r\n  private lookupInstanceOfExpression(\r\n    /** The expression to look up. */\r\n    node: InstanceOfExpression,\r\n    /** Flow to search for scoped locals. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var wrapperClasses = this.program.wrapperClasses;\r\n    assert(wrapperClasses.has(Type.bool));\r\n    return wrapperClasses.get(Type.bool);\r\n  }\r\n\r\n  /** Resolves an instanceof expression to its static type. */\r\n  private resolveInstanceOfExpression(\r\n    /** The expression to resolve. */\r\n    node: InstanceOfExpression,\r\n    /** Flow to search for scoped locals. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    return Type.bool;\r\n  }\r\n\r\n  /** Looks up the program element the specified ternary expression refers to. */\r\n  private lookupTernaryExpression(\r\n    /** The expression to look up. */\r\n    node: TernaryExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!type) return null;\r\n    var element = this.getElementOfType(type);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\r\n          node.range, type.toString()\r\n        );\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves a ternary expression to its static type. */\r\n  private resolveTernaryExpression(\r\n    /** The expression to resolve. */\r\n    node: TernaryExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\r\n    if (!thenType) return null;\r\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\r\n    if (!elseType) return null;\r\n    var commonType = Type.commonDenominator(thenType, elseType, false);\r\n    if (!commonType) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n          node.range, \"?:\", thenType.toString(), elseType.toString()\r\n        );\r\n      }\r\n    }\r\n    return commonType;\r\n  }\r\n\r\n  /** Looks up the program element the specified new expression refers to. */\r\n  private lookupNewExpression(\r\n    /** The expression to look up. */\r\n    node: NewExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\r\n    if (!element) return null;\r\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\r\n      return this.resolveClassInclTypeArguments(\r\n        <ClassPrototype>element,\r\n        node.typeArguments,\r\n        ctxFlow.actualFunction,\r\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\r\n        node,\r\n        reportMode\r\n      );\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.This_expression_is_not_constructable,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a new expression to its static type. */\r\n  private resolveNewExpression(\r\n    /** The expression to resolve. */\r\n    node: NewExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!element) return null;\r\n    var type = this.getTypeOfElement(element);\r\n    if (!type) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\r\n          node.range\r\n        );\r\n      }\r\n    }\r\n    return type;\r\n  }\r\n\r\n  /** Looks up the program element the specified function expression refers to. */\r\n  private lookupFunctionExpression(\r\n    /** The expression to look up. */\r\n    node: FunctionExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!type) return null;\r\n    var element = this.getElementOfType(type);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\r\n          node.range, type.toString()\r\n        );\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves a function expression to its static type. */\r\n  private resolveFunctionExpression(\r\n    /** The expression to resolve. */\r\n    node: FunctionExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\r\n  }\r\n\r\n  // ==================================================== Elements =====================================================\r\n\r\n  /** Resolves a function prototype using the specified concrete type arguments. */\r\n  resolveFunction(\r\n    /** The prototype of the function. */\r\n    prototype: FunctionPrototype,\r\n    /** Type arguments provided. */\r\n    typeArguments: Type[] | null,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\r\n      ? prototype.parent.parent\r\n      : prototype.parent;\r\n    var classInstance: Class | null = null; // if an instance method\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Instance method prototypes are pre-bound to their concrete class as their parent\r\n    if (prototype.is(CommonFlags.INSTANCE)) {\r\n      assert(actualParent.kind == ElementKind.CLASS);\r\n      classInstance = <Class>actualParent;\r\n\r\n      // check if this exact concrete class and function combination is known already\r\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\r\n      if (resolvedInstance) return resolvedInstance;\r\n\r\n      // inherit class specific type arguments\r\n      let classTypeArguments = classInstance.typeArguments;\r\n      if (classTypeArguments) {\r\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\r\n        let numClassTypeArguments = classTypeParameters.length;\r\n        assert(numClassTypeArguments == classTypeParameters.length);\r\n        for (let i = 0; i < numClassTypeArguments; ++i) {\r\n          let classTypeParameterName = classTypeParameters[i].name.text;\r\n          if (!ctxTypes.has(classTypeParameterName)) {\r\n            ctxTypes.set(\r\n              classTypeParameterName,\r\n              classTypeArguments[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\r\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\r\n      if (resolvedInstance) return resolvedInstance;\r\n    }\r\n\r\n    // override whatever is contextual with actual function type arguments\r\n    var signatureNode = prototype.functionTypeNode;\r\n    var typeParameterNodes = prototype.typeParameterNodes;\r\n    var numFunctionTypeArguments: i32;\r\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\r\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        ctxTypes.set(\r\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\r\n          typeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\r\n    }\r\n\r\n    // resolve `this` type if applicable\r\n    var thisType: Type | null = null;\r\n    var explicitThisType = signatureNode.explicitThisType;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        prototype.parent, // relative to function\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!thisType) return null;\r\n      ctxTypes.set(CommonSymbols.this_, thisType);\r\n    } else if (classInstance) {\r\n      thisType = classInstance.type;\r\n      ctxTypes.set(CommonSymbols.this_, thisType);\r\n    }\r\n\r\n    // resolve parameter types\r\n    var signatureParameters = signatureNode.parameters;\r\n    var numSignatureParameters = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(numSignatureParameters);\r\n    var parameterNames = new Array<string>(numSignatureParameters);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < numSignatureParameters; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = parameterDeclaration.type;\r\n      if (isTypeOmitted(typeNode)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            typeNode.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let parameterType = this.resolveType(\r\n        typeNode,\r\n        prototype.parent, // relative to function\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    // resolve return type\r\n    var returnType: Type;\r\n    if (prototype.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = signatureNode.returnType;\r\n      if (isTypeOmitted(typeNode)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            typeNode.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let type = this.resolveType(\r\n        typeNode,\r\n        prototype.parent, // relative to function\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var nameInclTypeParameters = prototype.name;\r\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\r\n    var instance = new Function(\r\n      nameInclTypeParameters,\r\n      prototype,\r\n      signature,\r\n      ctxTypes\r\n    );\r\n    prototype.setResolvedInstance(instanceKey, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\r\n  resolveFunctionInclTypeArguments(\r\n    /** The prototype of the function. */\r\n    prototype: FunctionPrototype,\r\n    /** Type arguments provided to be resolved. */\r\n    typeArgumentNodes: TypeNode[] | null,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type>,\r\n    /** The node to use when reporting intermediate errors. */\r\n    reportNode: Node,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\r\n      ? prototype.parent.parent\r\n      : prototype.parent;\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n\r\n      // If this is an instance method, first apply the class's type arguments\r\n      if (prototype.is(CommonFlags.INSTANCE)) {\r\n        assert(actualParent.kind == ElementKind.CLASS);\r\n        let classTypeArguments = (<Class>actualParent).typeArguments;\r\n        if (classTypeArguments) {\r\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\r\n          let numClassTypeArguments = classTypeArguments.length;\r\n          assert(numClassTypeArguments == typeParameterNodes.length);\r\n          for (let i = 0; i < numClassTypeArguments; ++i) {\r\n            ctxTypes.set(\r\n              typeParameterNodes[i].name.text,\r\n              classTypeArguments[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.typeParameterNodes),\r\n        typeArgumentNodes,\r\n        ctxElement,\r\n        ctxTypes,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveFunction(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      ctxTypes,\r\n      reportMode\r\n    );\r\n  }\r\n\r\n  /** Resolves a class prototype using the specified concrete type arguments. */\r\n  resolveClass(\r\n    /** The prototype of the class. */\r\n    prototype: ClassPrototype,\r\n    /** Type arguments provided. */\r\n    typeArguments: Type[] | null,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Check if this exact instance has already been resolved\r\n    var instance = prototype.getResolvedInstance(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // Insert contextual type arguments for this operation. Internally, this method is always\r\n    // called with matching type parameter / argument counts.\r\n    if (typeArguments) {\r\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\r\n      let numTypeParameters = typeParameterNodes.length;\r\n      let numTypeArguments = typeArguments.length;\r\n      assert(numTypeArguments == numTypeParameters);\r\n      for (let i = 0; i < numTypeArguments; ++i) {\r\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\r\n      }\r\n    } else {\r\n      let typeParameterNodes = prototype.typeParameterNodes;\r\n      assert(!(typeParameterNodes && typeParameterNodes.length));\r\n    }\r\n\r\n    // Resolve base class if applicable\r\n    var basePrototype = prototype.basePrototype;\r\n    var baseClass: Class | null = null;\r\n    if (basePrototype) {\r\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\r\n      baseClass = this.resolveClassInclTypeArguments(\r\n        basePrototype,\r\n        extendsNode.typeArguments,\r\n        prototype.parent, // relative to derived class\r\n        makeMap(ctxTypes), // don't inherit\r\n        extendsNode,\r\n        reportMode\r\n      );\r\n      if (!baseClass) return null;\r\n    }\r\n\r\n    // Construct the instance and remember that it has been resolved already\r\n    var nameInclTypeParamters = prototype.name;\r\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\r\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = ctxTypes;\r\n    prototype.setResolvedInstance(instanceKey, instance);\r\n\r\n    // Inherit base class members and set up the initial memory offset for own fields\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      let baseMembers = baseClass.members;\r\n      if (baseMembers) {\r\n        let instanceMembers = instance.members;\r\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\r\n        for (let [baseMemberName, baseMember] of baseMembers) {\r\n          instanceMembers.set(baseMemberName, baseMember);\r\n        }\r\n      }\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n    }\r\n\r\n    // Resolve instance members\r\n    var instanceMemberPrototypes = prototype.instanceMembers;\r\n    if (instanceMemberPrototypes) {\r\n      for (let member of instanceMemberPrototypes.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            let instanceMembers = instance.members;\r\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\r\n            else if (instanceMembers.has(member.name)) {\r\n              let existing = instanceMembers.get(member.name)!;\r\n              this.errorRelated(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                (<FieldPrototype>member).identifierNode.range,\r\n                existing.declaration.name.range,\r\n                member.name\r\n              );\r\n              break;\r\n            }\r\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\r\n            let fieldType: Type | null = null;\r\n            // TODO: handle duplicate non-private fields specifically?\r\n            if (!fieldTypeNode) {\r\n              if (baseClass) {\r\n                let baseMembers = baseClass.members;\r\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\r\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\r\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\r\n                    assert(baseField.kind == ElementKind.FIELD);\r\n                    fieldType = (<Field>baseField).type;\r\n                  }\r\n                }\r\n              }\r\n              if (!fieldType) {\r\n                if (reportMode == ReportMode.REPORT) {\r\n                  this.error(\r\n                    DiagnosticCode.Type_expected,\r\n                    (<FieldPrototype>member).identifierNode.range.atEnd\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n              fieldType = this.resolveType(\r\n                fieldTypeNode,\r\n                prototype.parent, // relative to class\r\n                instance.contextualTypeArguments,\r\n                reportMode\r\n              );\r\n            }\r\n            if (!fieldType) break; // did report above\r\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\r\n            assert(isPowerOf2(fieldType.byteSize));\r\n            let mask = fieldType.byteSize - 1;\r\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\r\n            fieldInstance.memoryOffset = memoryOffset;\r\n            memoryOffset += fieldType.byteSize;\r\n            instance.add(member.name, fieldInstance); // reports\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\r\n            instance.add(boundPrototype.name, boundPrototype); // reports\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY_PROTOTYPE: {\r\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\r\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\r\n            if (getterPrototype) {\r\n              let getterInstance = this.resolveFunction(\r\n                getterPrototype.toBound(instance),\r\n                null,\r\n                makeMap(instance.contextualTypeArguments),\r\n                reportMode\r\n              );\r\n              if (getterInstance) {\r\n                propertyInstance.getterInstance = getterInstance;\r\n                propertyInstance.setType(getterInstance.signature.returnType);\r\n              }\r\n            }\r\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\r\n            if (setterPrototype) {\r\n              let setterInstance = this.resolveFunction(\r\n                setterPrototype.toBound(instance),\r\n                null,\r\n                makeMap(instance.contextualTypeArguments),\r\n                reportMode\r\n              );\r\n              if (setterInstance) {\r\n                propertyInstance.setterInstance = setterInstance;\r\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\r\n                  assert(setterInstance.signature.parameterTypes.length == 1);\r\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\r\n                }\r\n              }\r\n            }\r\n            instance.add(propertyInstance.name, propertyInstance); // reports\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Finalize memory offset\r\n    instance.currentMemoryOffset = memoryOffset;\r\n\r\n    // Link _own_ constructor if present\r\n    {\r\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\r\n      if (ctorPrototype && ctorPrototype.parent === instance) {\r\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n        let ctorInstance = this.resolveFunction(\r\n          <FunctionPrototype>ctorPrototype,\r\n          null,\r\n          instance.contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\r\n      }\r\n    }\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\r\n        let boundPrototype = overloadPrototype.toBound(instance);\r\n        operatorInstance = this.resolveFunction(\r\n          boundPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      } else {\r\n        operatorInstance = this.resolveFunction(\r\n          overloadPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      // inc/dec are special in that an instance overload attempts to re-assign\r\n      // the corresponding value, thus requiring a matching return type, while a\r\n      // static overload works like any other overload.\r\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n        switch (kind) {\r\n          case OperatorKind.PREFIX_INC:\r\n          case OperatorKind.PREFIX_DEC:\r\n          case OperatorKind.POSTFIX_INC:\r\n          case OperatorKind.POSTFIX_DEC: {\r\n            let returnType = operatorInstance.signature.returnType;\r\n            if (!returnType.isAssignableTo(instance.type)) {\r\n              if (reportMode == ReportMode.REPORT) {\r\n                this.error(\r\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (!overloads.has(kind)) {\r\n        overloads.set(kind, operatorInstance);\r\n        if (kind == OperatorKind.INDEXED_GET || kind == OperatorKind.INDEXED_SET) {\r\n          let index = instance.indexSignature;\r\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\r\n          if (kind == OperatorKind.INDEXED_GET) {\r\n            index.setType(operatorInstance.signature.returnType);\r\n          }\r\n        }\r\n      } else {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_decorator,\r\n            operatorInstance.declaration.range\r\n          );\r\n        }\r\n      }\r\n    }\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a class prototype by first resolving the specified type arguments. */\r\n  resolveClassInclTypeArguments(\r\n    /** The prototype of the class. */\r\n    prototype: ClassPrototype,\r\n    /** Type arguments provided to be resolved. */\r\n    typeArgumentNodes: TypeNode[] | null,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type>,\r\n    /** The node to use when reporting intermediate errors. */\r\n    reportNode: Node,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.typeParameterNodes), // must be present if generic\r\n        typeArgumentNodes,\r\n        ctxElement,\r\n        ctxTypes,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveClass(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      ctxTypes,\r\n      reportMode\r\n    );\r\n  }\r\n}\r\n","/**\r\n * A control flow analyzer.\r\n * @module flow\r\n *//***/\r\n\r\nimport {\r\n  Type,\r\n  TypeFlags,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  Local,\r\n  Function,\r\n  Element,\r\n  ElementKind,\r\n  Global\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionId,\r\n  ExpressionRef,\r\n\r\n  getExpressionId,\r\n  getLocalGetIndex,\r\n  isLocalTee,\r\n  getLocalSetValue,\r\n  getGlobalGetName,\r\n  getBinaryOp,\r\n  BinaryOp,\r\n  getBinaryLeft,\r\n  getConstValueI32,\r\n  getBinaryRight,\r\n  getUnaryOp,\r\n  UnaryOp,\r\n  getExpressionType,\r\n  getConstValueI64Low,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getLoadBytes,\r\n  isLoadSigned,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getCallTarget,\r\n  getLocalSetIndex,\r\n  getIfCondition,\r\n  getConstValueI64High,\r\n  getUnaryValue,\r\n  getCallOperand,\r\n  traverse\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node\r\n} from \"./ast\";\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  // categorical\r\n\r\n  /** This flow returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This flow returns a wrapped value. */\r\n  RETURNS_WRAPPED = 1 << 1,\r\n  /** This flow returns a non-null value. */\r\n  RETURNS_NONNULL = 1 << 2,\r\n  /** This flow throws. */\r\n  THROWS = 1 << 3,\r\n  /** This flow breaks. */\r\n  BREAKS = 1 << 4,\r\n  /** This flow continues. */\r\n  CONTINUES = 1 << 5,\r\n  /** This flow allocates. Constructors only. */\r\n  ALLOCATES = 1 << 6,\r\n  /** This flow calls super. Constructors only. */\r\n  CALLS_SUPER = 1 << 7,\r\n  /** This flow terminates (returns, throws or continues). */\r\n  TERMINATES = 1 << 8,\r\n\r\n  // conditional\r\n\r\n  /** This flow conditionally returns in a child flow. */\r\n  CONDITIONALLY_RETURNS = 1 << 9,\r\n  /** This flow conditionally throws in a child flow. */\r\n  CONDITIONALLY_THROWS = 1 << 10,\r\n  /** This flow conditionally terminates in a child flow. */\r\n  CONDITIONALLY_TERMINATES = 1 << 11,\r\n  /** This flow conditionally breaks in a child flow. */\r\n  CONDITIONALLY_BREAKS = 1 << 12,\r\n  /** This flow conditionally continues in a child flow. */\r\n  CONDITIONALLY_CONTINUES = 1 << 13,\r\n  /** This flow conditionally allocates in a child flow. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 14,\r\n\r\n  // special\r\n\r\n  /** This is an inlining flow. */\r\n  INLINE_CONTEXT = 1 << 15,\r\n  /** This is a flow with explicitly disabled bounds checking. */\r\n  UNCHECKED_CONTEXT = 1 << 16,\r\n\r\n  // masks\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = FlowFlags.RETURNS\r\n                  | FlowFlags.RETURNS_WRAPPED\r\n                  | FlowFlags.RETURNS_NONNULL\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES\r\n                  | FlowFlags.ALLOCATES\r\n                  | FlowFlags.CALLS_SUPER\r\n                  | FlowFlags.TERMINATES,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\r\n                  | FlowFlags.CONDITIONALLY_THROWS\r\n                  | FlowFlags.CONDITIONALLY_BREAKS\r\n                  | FlowFlags.CONDITIONALLY_CONTINUES\r\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\r\n}\r\n\r\n/** Flags indicating the current state of a local. */\r\nexport enum LocalFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** Local is constant. */\r\n  CONSTANT = 1 << 0,\r\n  /** Local is a function parameter. */\r\n  PARAMETER = 1 << 1,\r\n  /** Local is properly wrapped. Relevant for small integers. */\r\n  WRAPPED = 1 << 2,\r\n  /** Local is non-null. */\r\n  NONNULL = 1 << 3,\r\n  /** Local is read from. */\r\n  READFROM = 1 << 4,\r\n  /** Local is written to. */\r\n  WRITTENTO = 1 << 5,\r\n  /** Local is retained. */\r\n  RETAINED = 1 << 6,\r\n  /** Local is returned. */\r\n  RETURNED = 1 << 7,\r\n\r\n  /** Local is conditionally read from. */\r\n  CONDITIONALLY_READFROM = 1 << 8,\r\n  /** Local is conditionally written to. */\r\n  CONDITIONALLY_WRITTENTO = 1 << 9,\r\n  /** Local must be conditionally retained. */\r\n  CONDITIONALLY_RETAINED = 1 << 10,\r\n  /** Local is conditionally returned. */\r\n  CONDITIONALLY_RETURNED = 1 << 11,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = CONSTANT\r\n                  | PARAMETER\r\n                  | WRAPPED\r\n                  | NONNULL\r\n                  | READFROM\r\n                  | WRITTENTO\r\n                  | RETAINED\r\n                  | RETURNED,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = RETAINED\r\n                  | CONDITIONALLY_READFROM\r\n                  | CONDITIONALLY_WRITTENTO\r\n                  | CONDITIONALLY_RETAINED\r\n                  | CONDITIONALLY_RETURNED,\r\n\r\n  /** Any written to flag. */\r\n  ANY_WRITTENTO = WRITTENTO\r\n                | CONDITIONALLY_WRITTENTO,\r\n\r\n  /** Any retained flag. */\r\n  ANY_RETAINED = RETAINED\r\n               | CONDITIONALLY_RETAINED,\r\n\r\n  /** Any returned flag. */\r\n  ANY_RETURNED = RETURNED\r\n               | CONDITIONALLY_RETURNED\r\n}\r\nexport namespace LocalFlags {\r\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\r\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\r\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\r\n  }\r\n}\r\n\r\n/** Flags indicating the current state of a field. */\r\nexport enum FieldFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** Field is initialized. Relevant in constructors. */\r\n  INITIALIZED = 1 << 0,\r\n  /** Field is conditionally initialized. Relevant in constructors. */\r\n  CONDITIONALLY_INITIALIZED = 1 << 1,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = INITIALIZED,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\r\n}\r\nexport namespace FieldFlags {\r\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\r\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\r\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\r\n  }\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  parentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Local flags. */\r\n  localFlags: LocalFlags[];\r\n  /** Field flags. Relevant in constructors. */\r\n  fieldFlags: Map<string,FieldFlags> | null = null;\r\n  /** Function being inlined, when inlining. */\r\n  inlineFunction: Function | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  inlineReturnLabel: string | null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(parentFunction: Function): Flow {\r\n    var flow = new Flow();\r\n    flow.parent = null;\r\n    flow.flags = FlowFlags.NONE;\r\n    flow.parentFunction = parentFunction;\r\n    flow.continueLabel = null;\r\n    flow.breakLabel = null;\r\n    flow.returnType = parentFunction.signature.returnType;\r\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\r\n    flow.localFlags = [];\r\n    flow.inlineFunction = null;\r\n    flow.inlineReturnLabel = null;\r\n    return flow;\r\n  }\r\n\r\n  /** Creates an inline flow within `parentFunction`. */\r\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\r\n    var flow = Flow.create(parentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.inlineFunction = inlineFunction;\r\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\r\n    flow.returnType = inlineFunction.signature.returnType;\r\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\r\n    return flow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\r\n  get actualFunction(): Function {\r\n    return this.inlineFunction || this.parentFunction;\r\n  }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this flow has one of the specified flags. */\r\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Forks this flow to a child flow. */\r\n  fork(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.parentFunction = this.parentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    branch.localFlags = this.localFlags.slice();\r\n    branch.inlineFunction = this.inlineFunction;\r\n    branch.inlineReturnLabel = this.inlineReturnLabel;\r\n    return branch;\r\n  }\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\r\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\r\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\r\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\r\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (except) {\r\n      if (temps && temps.length) {\r\n        for (let i = 0, k = temps.length; i < k; ++i) {\r\n          if (!except.has(temps[i].index)) {\r\n            local = temps[i];\r\n            let k = temps.length - 1;\r\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\r\n            temps.length = k;\r\n            local.type = type;\r\n            local.flags = CommonFlags.NONE;\r\n            this.unsetLocalFlag(local.index, ~0);\r\n            return local;\r\n          }\r\n        }\r\n      }\r\n      local = parentFunction.addLocal(type);\r\n    } else {\r\n      if (temps && temps.length) {\r\n        local = temps.pop();\r\n        local.type = type;\r\n        local.flags = CommonFlags.NONE;\r\n      } else {\r\n        local = parentFunction.addLocal(type);\r\n      }\r\n    }\r\n    this.unsetLocalFlag(local.index, ~0);\r\n    return local;\r\n  }\r\n\r\n  /** Gets a local that sticks around until this flow is exited, and then released. */\r\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\r\n    var local = this.getTempLocal(type, except);\r\n    local.set(CommonFlags.SCOPED);\r\n    var scopedLocals = this.scopedLocals;\r\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\r\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\r\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\r\n    return local;\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\r\n        break;\r\n      }\r\n      case NativeType.V128: {\r\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets the scoped local of the specified name. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var scopedLocals = this.scopedLocals;\r\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name);\r\n    return null;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\r\n    var scopedLocal = this.getTempLocal(type, except);\r\n    var scopedLocals = this.scopedLocals;\r\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\r\n    else assert(!scopedLocals.has(name));\r\n    scopedLocal.set(CommonFlags.SCOPED);\r\n    scopedLocals.set(name, scopedLocal);\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\r\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (reportNode) {\r\n          if (!existingLocal.declaration.range.source.isNative) {\r\n            this.parentFunction.program.errorRelated(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              reportNode.range,\r\n              existingLocal.declaration.name.range,\r\n              name\r\n            );\r\n          } else {\r\n            this.parentFunction.program.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              reportNode.range, name\r\n            );\r\n          }\r\n        }\r\n        return existingLocal;\r\n      }\r\n    }\r\n    assert(index < this.parentFunction.localsByIndex.length);\r\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\r\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\r\n    this.scopedLocals.set(name, scopedAlias);\r\n    return scopedAlias;\r\n  }\r\n\r\n  /** Tests if this flow has any scoped locals that must be free'd. */\r\n  get hasScopedLocals(): bool {\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Frees this flow's scoped variables and returns its parent flow. */\r\n  freeScopedLocals(): void {\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          this.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n  }\r\n\r\n  /** Looks up the local of the specified name in the current scope. */\r\n  lookupLocal(name: string): Local | null {\r\n    var current: Flow | null = this;\r\n    var scope: Map<String,Local> | null;\r\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\r\n    while (current = current.parent);\r\n    return this.parentFunction.localsByName.get(name);\r\n  }\r\n\r\n  /** Looks up the element with the specified name relative to the scope of this flow. */\r\n  lookup(name: string): Element | null {\r\n    var element = this.lookupLocal(name);\r\n    if (element) return element;\r\n    return this.actualFunction.lookup(name);\r\n  }\r\n\r\n  /** Tests if the local at the specified index has the specified flag or flags. */\r\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\r\n    if (index < 0) return defaultIfInlined;\r\n    var localFlags = this.localFlags;\r\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\r\n  }\r\n\r\n  /** Tests if the local at the specified index has any of the specified flags. */\r\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\r\n    if (index < 0) return defaultIfInlined;\r\n    var localFlags = this.localFlags;\r\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\r\n  }\r\n\r\n  /** Sets the specified flag or flags on the local at the specified index. */\r\n  setLocalFlag(index: i32, flag: LocalFlags): void {\r\n    if (index < 0) return;\r\n    var localFlags = this.localFlags;\r\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\r\n    this.localFlags[index] = flags | flag;\r\n  }\r\n\r\n  /** Unsets the specified flag or flags on the local at the specified index. */\r\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\r\n    if (index < 0) return;\r\n    var localFlags = this.localFlags;\r\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\r\n    this.localFlags[index] = flags & ~flag;\r\n  }\r\n\r\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\r\n  pushBreakLabel(): string {\r\n    var parentFunction = this.parentFunction;\r\n    var id = parentFunction.nextBreakId++;\r\n    var stack = parentFunction.breakStack;\r\n    if (!stack) parentFunction.breakStack = [ id ];\r\n    else stack.push(id);\r\n    return parentFunction.breakLabel = id.toString(10);\r\n  }\r\n\r\n  /** Pops the most recent break label from the stack. */\r\n  popBreakLabel(): void {\r\n    var parentFunction = this.parentFunction;\r\n    var stack = assert(parentFunction.breakStack);\r\n    var length = assert(stack.length);\r\n    stack.pop();\r\n    if (length > 1) {\r\n      parentFunction.breakLabel = stack[length - 2].toString(10);\r\n    } else {\r\n      parentFunction.breakLabel = null;\r\n      parentFunction.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\r\n  inherit(other: Flow): void {\r\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\r\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\r\n  }\r\n\r\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\r\n  inheritConditional(other: Flow): void {\r\n    this.set(other.flags & FlowFlags.ANY_CONDITIONAL);\r\n    if (other.is(FlowFlags.RETURNS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (other.is(FlowFlags.THROWS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (other.is(FlowFlags.ALLOCATES)) {\r\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n    var localFlags = other.localFlags;\r\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\r\n      let flags = localFlags[i];\r\n      this.setLocalFlag(i, flags & LocalFlags.ANY_CONDITIONAL);\r\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\r\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\r\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\r\n      if (flags & LocalFlags.RETURNED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETURNED);\r\n    }\r\n  }\r\n\r\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\r\n  inheritMutual(left: Flow, right: Flow): void {\r\n    // categorical flags set in both arms\r\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\r\n\r\n    // conditional flags set in any arm\r\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\r\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\r\n\r\n    // categorical flags in either arm as conditional\r\n    this.inheritConditional(left);\r\n    this.inheritConditional(right);\r\n\r\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\r\n    var leftLocalFlags = left.localFlags;\r\n    var numLeftLocalFlags = leftLocalFlags.length;\r\n    var rightLocalFlags = right.localFlags;\r\n    var numRightLocalFlags = rightLocalFlags.length;\r\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\r\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\r\n      combinedFlags[i] = LocalFlags.join(\r\n        unchecked(leftLocalFlags[i]),\r\n        i < numRightLocalFlags\r\n          ? unchecked(rightLocalFlags[i])\r\n          : 0\r\n      );\r\n    }\r\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\r\n      combinedFlags[i] = LocalFlags.join(\r\n        0,\r\n        unchecked(rightLocalFlags[i])\r\n      );\r\n    }\r\n    this.localFlags = combinedFlags;\r\n  }\r\n\r\n  /** Unifies local flags between this and the other flow. */\r\n  unifyLocalFlags(other: Flow): void {\r\n    var numThisLocalFlags = this.localFlags.length;\r\n    var numOtherLocalFlags = other.localFlags.length;\r\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\r\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\r\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\r\n      }\r\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\r\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\r\n      }\r\n      assert(\r\n        // having different retain states would be a problem because the compiler\r\n        // either can't release a retained local or would release a non-retained local\r\n        this.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED) == other.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED)\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\r\n  isNonnull(expr: ExpressionRef, type: Type): bool {\r\n    if (!type.is(TypeFlags.NULLABLE)) return true;\r\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\r\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\r\n    // has already been handled by the nullable type check above.\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: {\r\n        if (!isLocalTee(expr)) break;\r\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\r\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\r\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\r\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\r\n    // A: `expr` is true-ish -> Q: how did that happen?\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: {\r\n        if (!isLocalTee(expr)) break;\r\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\r\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\r\n        break;\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\r\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n        break;\r\n      }\r\n      case ExpressionId.If: {\r\n        let ifFalse = getIfFalse(expr);\r\n        if (!ifFalse) break;\r\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\r\n          // Logical AND: (if (condition ifTrue 0))\r\n          // the only way this had become true is if condition and ifTrue are true\r\n          if (\r\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\r\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\r\n          ) {\r\n            this.inheritNonnullIfTrue(getIfCondition(expr));\r\n            this.inheritNonnullIfTrue(getIfTrue(expr));\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.EqI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\r\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\r\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.EqI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\r\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\r\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Call: {\r\n        let name = getCallTarget(expr);\r\n        let program = this.parentFunction.program;\r\n        switch (name) {\r\n          case program.retainInstance.internalName: {\r\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\r\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\r\n    // A: `expr` is false-ish -> Q: how did that happen?\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.If: {\r\n        let ifTrue = getIfTrue(expr);\r\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\r\n          let ifFalse = getIfFalse(expr);\r\n          if (!ifFalse) break;\r\n          // Logical OR: (if (condition 1 ifFalse))\r\n          // the only way this had become false is if condition and ifFalse are false\r\n          if (\r\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\r\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\r\n          ) {\r\n            this.inheritNonnullIfFalse(getIfCondition(expr));\r\n            this.inheritNonnullIfFalse(getIfFalse(expr));\r\n          }\r\n\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n          // remember: we want to know how the _entire_ expression became FALSE (!)\r\n          case BinaryOp.EqI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.EqI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\r\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\r\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\r\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\r\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\r\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\r\n   * expression might already have overflown and returns `false` only if the operation neglects\r\n   * any possible combination of garbage bits being present.\r\n   */\r\n  canOverflow(expr: ExpressionRef, type: Type): bool {\r\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\r\n    // opportunities here, obviously.\r\n    assert(type != Type.void);\r\n\r\n    // types other than i8, u8, i16, u16 and bool do not overflow\r\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\r\n\r\n    var operand: ExpressionRef;\r\n    switch (getExpressionId(expr)) {\r\n\r\n      // overflows if the local isn't wrapped or the conversion does\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\r\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\r\n            || canConversionOverflow(local.type, type);\r\n      }\r\n\r\n      // overflows if the value does\r\n      case ExpressionId.LocalSet: { // tee\r\n        assert(isLocalTee(expr));\r\n        return this.canOverflow(getLocalSetValue(expr), type);\r\n      }\r\n\r\n      // overflows if the conversion does (globals are wrapped on set)\r\n      case ExpressionId.GlobalGet: {\r\n        // TODO: this is inefficient because it has to read a string\r\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\r\n        assert(global.kind == ElementKind.GLOBAL);\r\n        return canConversionOverflow(assert((<Global>global).type), type);\r\n      }\r\n\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64:\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64:\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtU32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtU64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64:\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeU32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeU64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64:\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtU32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtU64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64:\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeU32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeU64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: return false;\r\n\r\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\r\n          case BinaryOp.MulI32: {\r\n            return !(\r\n              (\r\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryRight(expr), type)\r\n                  )\r\n                )\r\n              ) || (\r\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryLeft(expr), type)\r\n                  )\r\n                )\r\n              )\r\n            );\r\n          }\r\n\r\n          // result won't overflow if one side is a constant less than this type's mask or one side\r\n          // is wrapped\r\n          case BinaryOp.AndI32: {\r\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\r\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\r\n            return !(\r\n              (\r\n                (\r\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              ) || (\r\n                (\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              )\r\n            );\r\n          }\r\n\r\n          // overflows if the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShlI32: {\r\n            let shift = 32 - type.size;\r\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\r\n                || getConstValueI32(operand) < shift;\r\n          }\r\n\r\n          // overflows if the value does and the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShrI32: {\r\n            let shift = 32 - type.size;\r\n            return this.canOverflow(getBinaryLeft(expr), type) && (\r\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\r\n              getConstValueI32(operand) < shift\r\n            );\r\n          }\r\n\r\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\r\n          // wrapped, it can't overflow.\r\n          case BinaryOp.ShrU32: {\r\n            let shift = 32 - type.size;\r\n            return type.is(TypeFlags.SIGNED)\r\n              ? !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) > shift // must clear MSB\r\n                )\r\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) >= shift // can leave MSB\r\n                );\r\n          }\r\n\r\n          // overflows if any side does\r\n          case BinaryOp.DivU32:\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemU32: {\r\n            return this.canOverflow(getBinaryLeft(expr), type)\r\n                || this.canOverflow(getBinaryRight(expr), type);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: return false;\r\n\r\n          // overflow if the maximum result (32) cannot be represented in the target type\r\n          case UnaryOp.ClzI32:\r\n          case UnaryOp.CtzI32:\r\n          case UnaryOp.PopcntI32: return type.size < 7;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the value cannot be represented in the target type\r\n      case ExpressionId.Const: {\r\n        let value: i32 = 0;\r\n        switch (getExpressionType(expr)) {\r\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\r\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\r\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\r\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\r\n          default: assert(false);\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\r\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\r\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\r\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\r\n          case TypeKind.BOOL: return (value & ~1) != 0;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the conversion does\r\n      case ExpressionId.Load: {\r\n        let fromType: Type;\r\n        let signed = isLoadSigned(expr);\r\n        switch (getLoadBytes(expr)) {\r\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\r\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\r\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\r\n        }\r\n        return canConversionOverflow(fromType, type);\r\n      }\r\n\r\n      // overflows if the result does, which is either\r\n      // - the last expression of the block, by contract, if the block doesn't have a label\r\n      // - the last expression or the value of an inner br if the block has a label (TODO)\r\n      case ExpressionId.Block: {\r\n        if (!getBlockName(expr)) {\r\n          let size = assert(getBlockChildCount(expr));\r\n          let last = getBlockChild(expr, size - 1);\r\n          return this.canOverflow(last, type);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.If: {\r\n        return this.canOverflow(getIfTrue(expr), type)\r\n            || this.canOverflow(assert(getIfFalse(expr)), type);\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.Select: {\r\n        return this.canOverflow(getSelectThen(expr), type)\r\n            || this.canOverflow(getSelectElse(expr), type);\r\n      }\r\n\r\n      // overflows if the call does not return a wrapped value or the conversion does\r\n      case ExpressionId.Call: {\r\n        let program = this.parentFunction.program;\r\n        let instancesByName = program.instancesByName;\r\n        let instanceName = assert(getCallTarget(expr));\r\n        if (instancesByName.has(instanceName)) {\r\n          let instance = instancesByName.get(instanceName)!;\r\n          assert(instance.kind == ElementKind.FUNCTION);\r\n          let returnType = (<Function>instance).signature.returnType;\r\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\r\n              || canConversionOverflow(returnType, type);\r\n        }\r\n        return false; // assume no overflow for builtins\r\n      }\r\n\r\n      // doesn't technically overflow\r\n      case ExpressionId.Unreachable: return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  toString(): string {\r\n    var levels = 0;\r\n    var parent = this.parent;\r\n    while (parent) {\r\n      parent = parent.parent;\r\n      ++levels;\r\n    }\r\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\r\n  }\r\n}\r\n\r\n/** Tests if a conversion from one type to another can technically overflow. */\r\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\r\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\r\n      || fromType.size > toType.size\r\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\r\n}\r\n\r\n/** Finds all indexes of locals used in the specified expression. */\r\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\r\n  traverse(expr, used, findUsedLocalsVisit);\r\n  return used;\r\n}\r\n\r\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\r\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\r\n  switch (getExpressionId(expr)) {\r\n    case ExpressionId.LocalGet: {\r\n      used.add(getLocalGetIndex(expr));\r\n      break;\r\n    }\r\n    case ExpressionId.LocalSet: {\r\n      used.add(getLocalSetIndex(expr));\r\n      // fall-through for value\r\n    }\r\n    default: traverse(expr, used, findUsedLocalsVisit);\r\n  }\r\n}\r\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  BuiltinSymbols,\r\n  compileCall as compileBuiltinCall,\r\n  compileAbort,\r\n  compileVisitGlobals,\r\n  compileVisitMembers,\r\n  compileRTTI,\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  getLocalGetIndex,\r\n  isLocalTee,\r\n  getLocalSetIndex,\r\n  FeatureFlags,\r\n  needsExplicitUnreachable,\r\n  getLocalSetValue\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  CommonSymbols,\r\n  INDEX_SUFFIX,\r\n  Feature,\r\n  Target\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  ConstantValueKind,\r\n  OperatorKind,\r\n  DecoratorFlags,\r\n  PropertyPrototype,\r\n  IndexSignature,\r\n  File,\r\n  mangleInternalName\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  Flow,\r\n  LocalFlags,\r\n  findUsedLocals\r\n} from \"./flow\";\r\n\r\nimport {\r\n  Resolver, ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  NamedTypeNode,\r\n  Range,\r\n  DecoratorKind,\r\n  AssertionKind,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FieldDeclaration,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InstanceOfExpression,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ObjectLiteralExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n\r\n  nodeIsConstantValue,\r\n  findDecorator,\r\n  isTypeOmitted,\r\n  ExportDefaultStatement,\r\n  SourceKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64,\r\n  makeMap\r\n} from \"./util\";\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\r\n  sharedMemory: i32 = 0;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** If true, generates an explicit start function. */\r\n  explicitStart: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: i32 = 0;\r\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\r\n  globalAliases: Map<string,string> | null = null;\r\n  /** Features to activate by default. These are the finished proposals. */\r\n  features: Feature = Feature.MUTABLE_GLOBALS;\r\n  /** If true, disallows unsafe features in user code. */\r\n  noUnsafe: bool = false;\r\n\r\n  /** Hinted optimize level. Not applied by the compiler itself. */\r\n  optimizeLevelHint: i32 = 0;\r\n  /** Hinted shrink level. Not applied by the compiler itself. */\r\n  shrinkLevelHint: i32 = 0;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n\r\n  /** Tests if a specific feature is activated. */\r\n  hasFeature(feature: Feature): bool {\r\n    return (this.features & feature) != 0;\r\n  }\r\n}\r\n\r\n/** Various constraints in expression compilation. */\r\nexport const enum Constraints {\r\n  NONE = 0,\r\n\r\n  /** Must implicitly convert to the target type. */\r\n  CONV_IMPLICIT = 1 << 0,\r\n  /** Must explicitly convert to the target type. */\r\n  CONV_EXPLICIT = 1 << 1,\r\n  /** Must wrap small integer values to match the target type. */\r\n  MUST_WRAP = 1 << 2,\r\n\r\n  /** Indicates that the value will be dropped immediately. */\r\n  WILL_DROP = 1 << 3,\r\n  /** Indicates that the value will be retained immediately. */\r\n  WILL_RETAIN = 1 << 4,\r\n  /** Indicates that static data is preferred. */\r\n  PREFER_STATIC = 1 << 5\r\n}\r\n\r\n/** Runtime features to be activated by the compiler. */\r\nexport const enum RuntimeFeatures {\r\n  NONE = 0,\r\n  /** Requires heap setup. */\r\n  HEAP = 1 << 0,\r\n  /** Requires runtime type information setup. */\r\n  RTTI = 1 << 1,\r\n  /** Requires the built-in globals visitor. */\r\n  visitGlobals = 1 << 2,\r\n  /** Requires the built-in members visitor. */\r\n  visitMembers = 1 << 3\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Resolver reference. */\r\n  get resolver(): Resolver { return this.program.resolver; }\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current control flow. */\r\n  currentFlow: Flow;\r\n  /** Current inline functions stack. */\r\n  currentInlineFunctions: Function[] = [];\r\n  /** Current parent element if not a function, i.e. an enum or namespace. */\r\n  currentParent: Element | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function statements. */\r\n  currentBody: ExpressionRef[];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = [];\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: string[] = [ \"null\" ];\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n  /** Requires runtime features. */\r\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\r\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\r\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\r\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\r\n      max(options.memoryBase, 8)\r\n    );\r\n    this.module = Module.create();\r\n    var featureFlags: BinaryenFeatureFlags = 0;\r\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\r\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\r\n    if (this.options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\r\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\r\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\r\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\r\n    if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\r\n    if (this.options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\r\n    if (this.options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\r\n    this.module.setFeatures(featureFlags);\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the main start function\r\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature(program, [], Type.void));\r\n    startFunctionInstance.internalName = \"start\";\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.currentFlow = startFunctionInstance.flow;\r\n    this.currentBody = startFunctionBody;\r\n\r\n    // add a mutable heap and rtti base dummies\r\n    if (options.isWasm64) {\r\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\r\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\r\n    } else {\r\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\r\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\r\n    }\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var files = program.filesByName;\r\n    for (let file of files.values()) {\r\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\r\n        this.compileFile(file);\r\n        this.compileExports(file);\r\n      }\r\n    }\r\n\r\n    // compile the start function if not empty or explicitly requested\r\n    var startIsEmpty = !startFunctionBody.length;\r\n    var explicitStart = options.explicitStart;\r\n    if (!startIsEmpty || explicitStart) {\r\n      let signature = startFunctionInstance.signature;\r\n      if (!startIsEmpty && explicitStart) {\r\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\r\n        startFunctionBody.unshift(\r\n          module.if(\r\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\r\n            module.return(),\r\n            module.global_set(BuiltinSymbols.started, module.i32(1))\r\n          )\r\n        );\r\n      }\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.block(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      if (!explicitStart) module.setStart(funcRef);\r\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\r\n    }\r\n\r\n    // compile runtime features\r\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\r\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\r\n    module.removeGlobal(BuiltinSymbols.rtti_base);\r\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\r\n\r\n    // update the heap base pointer\r\n    var memoryOffset = this.memoryOffset;\r\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n    this.memoryOffset = memoryOffset;\r\n    module.removeGlobal(BuiltinSymbols.heap_base);\r\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\r\n      if (options.isWasm64) {\r\n        module.addGlobal(\r\n          BuiltinSymbols.heap_base,\r\n          NativeType.I64,\r\n          false,\r\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n        );\r\n      } else {\r\n        module.addGlobal(\r\n          BuiltinSymbols.heap_base,\r\n          NativeType.I32,\r\n          false,\r\n          module.i32(i64_low(memoryOffset))\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up memory\r\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\r\n    module.setMemory(\r\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\r\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\r\n        : 0,\r\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\r\n      this.memorySegments,\r\n      options.target,\r\n      \"memory\",\r\n      isSharedMemory\r\n    );\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable, module.i32(0));\r\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\r\n\r\n    // set up module exports\r\n    for (let file of this.program.filesByName.values()) {\r\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\r\n    }\r\n    return module;\r\n  }\r\n\r\n  // === Exports ==================================================================================\r\n\r\n  /** Applies the respective module exports for the specified file. */\r\n  private ensureModuleExports(file: File): void {\r\n    var members = file.exports;\r\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar)  {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\r\n    }\r\n  }\r\n\r\n  /** Applies the respective module export(s) for the specified element. */\r\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\r\n    switch (element.kind) {\r\n\r\n      // traverse instances\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instances = (<FunctionPrototype>element).instances;\r\n        if (instances) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.ensureModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        let instances = (<ClassPrototype>element).instances;\r\n        if (instances) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.ensureModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getter = (<PropertyPrototype>element).getterPrototype;\r\n        let setter = (<PropertyPrototype>element).setterPrototype;\r\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n\r\n      // export concrete elements\r\n      case ElementKind.GLOBAL: {\r\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_export_a_mutable_global,\r\n            (<Global>element).identifierNode.range\r\n          );\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.ENUMVALUE: {\r\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_export_a_mutable_global,\r\n            (<EnumValue>element).identifierNode.range\r\n          );\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION: {\r\n        let instance = <Function>element;\r\n        let signature = instance.signature;\r\n        if (signature.requiredParameters < signature.parameterTypes.length) {\r\n          // utilize trampoline to fill in omitted arguments\r\n          instance = this.ensureTrampoline(instance);\r\n          this.ensureArgcSet();\r\n        }\r\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = (<Property>element).getterInstance;\r\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        let setter = (<Property>element).setterInstance;\r\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\r\n        if (!element.is(CommonFlags.READONLY)) {\r\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        // make the class name itself represent its runtime id\r\n        if (!(<Class>element).type.isUnmanaged) {\r\n          let module = this.module;\r\n          let internalName = (<Class>element).internalName;\r\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\r\n          module.addGlobalExport(internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // just traverse members below\r\n      case ElementKind.ENUM:\r\n      case ElementKind.NAMESPACE:\r\n      case ElementKind.FILE:\r\n      case ElementKind.TYPEDEFINITION:\r\n      case ElementKind.INDEXSIGNATURE: break;\r\n\r\n      default: assert(false); // unexpected module export\r\n    }\r\n\r\n    // traverse members\r\n    var members = element.members;\r\n    if (members) {\r\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\r\n        ? INSTANCE_DELIMITER\r\n        : STATIC_DELIMITER\r\n      );\r\n      if (\r\n        element.kind == ElementKind.NAMESPACE ||\r\n        element.kind == ElementKind.FILE\r\n      ) {\r\n        for (let member of members.values()) {\r\n          if (!member.is(CommonFlags.EXPORT)) continue;\r\n          this.ensureModuleExport(member.name, member, subPrefix);\r\n        }\r\n      } else {\r\n        for (let member of members.values()) {\r\n          if (member.is(CommonFlags.PRIVATE)) continue;\r\n          this.ensureModuleExport(member.name, member, subPrefix);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes a function to get the value of a field of an exported class. */\r\n  private ensureModuleFieldGetter(name: string, field: Field): void {\r\n    var type = field.type;\r\n    var module = this.module;\r\n    var usizeType = this.options.usizeType;\r\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\r\n      module.local_get(0, usizeType.toNativeType()),\r\n      type.toNativeType(), field.memoryOffset\r\n    );\r\n    // a user-defined getter would return a retained value, so:\r\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\r\n    module.addFunction(\r\n      name,\r\n      this.ensureFunctionType(null, type, usizeType),\r\n      null,\r\n      loadExpr\r\n    );\r\n    module.addFunctionExport(name, name);\r\n  }\r\n\r\n  /** Makes a function to set the value of a field of an exported class. */\r\n  private ensureModuleFieldSetter(name: string, field: Field): void {\r\n    var type = field.type;\r\n    var module = this.module;\r\n    var nativeType = type.toNativeType();\r\n    var usizeType = this.options.usizeType;\r\n    var nativeSizeType = usizeType.toNativeType();\r\n    var valueExpr = module.local_get(1, nativeType);\r\n    if (type.isManaged) {\r\n      valueExpr = this.makeRetainRelease(\r\n        module.load(type.byteSize, false, // oldRef\r\n          module.local_get(0, nativeSizeType),\r\n          nativeType, field.memoryOffset\r\n        ),\r\n        valueExpr // newRef\r\n      );\r\n    }\r\n    module.addFunction(\r\n      name,\r\n      this.ensureFunctionType([ type ], Type.void, usizeType),\r\n      null,\r\n      module.store(\r\n        type.byteSize,\r\n        module.local_get(0, nativeSizeType),\r\n        valueExpr,\r\n        nativeType,\r\n        field.memoryOffset\r\n      )\r\n    );\r\n    module.addFunctionExport(name, name);\r\n  }\r\n\r\n  // === Elements =================================================================================\r\n\r\n  /** Compiles any element. */\r\n  compileElement(element: Element, compileMembers: bool = true): void {\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        this.compileGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        this.compileEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        if (!element.is(CommonFlags.GENERIC)) {\r\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        if (!element.is(CommonFlags.GENERIC)) {\r\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\r\n        if (getterPrototype) {\r\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\r\n        }\r\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\r\n        if (setterPrototype) {\r\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE:\r\n      case ElementKind.TYPEDEFINITION:\r\n      case ElementKind.ENUMVALUE:\r\n      case ElementKind.INDEXSIGNATURE: break;\r\n      default: assert(false, ElementKind[element.kind]);\r\n    }\r\n    if (compileMembers) this.compileMembers(element);\r\n  }\r\n\r\n  /** Compiles an element's members. */\r\n  compileMembers(element: Element): void {\r\n    var members = element.members;\r\n    if (members) for (let element of members.values()) this.compileElement(element);\r\n  }\r\n\r\n  /** Compiles a file's exports. */\r\n  compileExports(file: File): void {\r\n    var exports = file.exports;\r\n    if (exports) for (let element of exports.values()) this.compileElement(element);\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar) {\r\n      for (let exportStar of exportsStar) {\r\n        this.compileFile(exportStar);\r\n        this.compileExports(exportStar);\r\n      }\r\n    }\r\n  }\r\n\r\n  // files\r\n\r\n  /** Compiles the file matching the specified path. */\r\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var file: File;\r\n    var filesByName = this.program.filesByName;\r\n    var pathWithIndex: string;\r\n    if (filesByName.has(normalizedPathWithoutExtension)) {\r\n      file = filesByName.get(normalizedPathWithoutExtension)!;\r\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\r\n      file = filesByName.get(pathWithIndex)!;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n      return;\r\n    }\r\n    this.compileFile(file);\r\n  }\r\n\r\n  /** Compiles the specified file. */\r\n  compileFile(file: File): void {\r\n    if (file.is(CommonFlags.COMPILED)) return;\r\n    file.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements within the file's start function\r\n    var startFunction = file.startFunction;\r\n    var previousBody = this.currentBody;\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.currentBody = startFunctionBody;\r\n\r\n    // compile top-level statements\r\n    var previousFlow = this.currentFlow;\r\n    var flow = startFunction.flow;\r\n    this.currentFlow = flow;\r\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\r\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\r\n    }\r\n    this.finishAutoreleases(flow, startFunctionBody);\r\n    this.currentFlow = previousFlow;\r\n    this.currentBody = previousBody;\r\n\r\n    // if top-level statements are present, make the per-file start function and call it in start\r\n    if (startFunctionBody.length) {\r\n      let module = this.module;\r\n      let locals = startFunction.localsByIndex;\r\n      let numLocals = locals.length;\r\n      let varTypes = new Array<NativeType>(numLocals);\r\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\r\n      module.addFunction(\r\n        startFunction.internalName,\r\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\r\n        varTypes,\r\n        startFunctionBody.length > 1\r\n          ? module.block(null, startFunctionBody)\r\n          : startFunctionBody[0]\r\n      );\r\n      previousBody.push(\r\n        module.call(startFunction.internalName, null, NativeType.None)\r\n      );\r\n    }\r\n  }\r\n\r\n  // === Globals ==================================================================================\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var initExpr: ExpressionRef = 0;\r\n    var initAutoreleaseSkipped: bool = false;\r\n    var typeNode = global.typeNode;\r\n    var initializerNode = global.initializerNode;\r\n\r\n    if (!global.is(CommonFlags.RESOLVED)) {\r\n\r\n      // Resolve type if annotated\r\n      if (typeNode) {\r\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\r\n        if (!resolvedType) return false;\r\n        if (resolvedType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            typeNode.range\r\n          );\r\n          return false;\r\n        }\r\n        global.setType(resolvedType);\r\n\r\n      // Otherwise infer type from initializer\r\n      } else if (initializerNode) {\r\n        let previousFlow = this.currentFlow;\r\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = global.file.startFunction.flow;\r\n        }\r\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\r\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\r\n        );\r\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\r\n        this.currentFlow = previousFlow;\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          return false;\r\n        }\r\n        global.setType(this.currentType);\r\n\r\n      // Error if there's neither a type nor an initializer\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          global.identifierNode.range.atEnd\r\n        );\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\r\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\r\n      return true;\r\n    }\r\n\r\n    var type = global.type;\r\n    var nativeType = type.toNativeType();\r\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\r\n\r\n    // Handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // Constant global or mutable globals enabled\r\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        mangleImportName(global, global.declaration);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          mangleImportName_moduleName,\r\n          mangleImportName_elementName,\r\n          nativeType,\r\n          !isDeclaredConstant\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // Importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Feature_0_is_not_enabled,\r\n          global.declaration.range, \"mutable-globals\"\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // The MVP does not yet support initializer expressions other than constant values (and constant\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // Evaluate initializer if present\r\n    if (initializerNode) {\r\n      if (!initExpr) {\r\n        let previousFlow = this.currentFlow;\r\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = global.file.startFunction.flow;\r\n        }\r\n        initExpr = this.compileExpression(initializerNode, type,\r\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\r\n        );\r\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\r\n        this.currentFlow = previousFlow;\r\n      }\r\n\r\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n        if (isDeclaredConstant) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\r\n        } else {\r\n          initializeInStart = true;\r\n        }\r\n      }\r\n\r\n      // Explicitly inline if annotated\r\n      if (isDeclaredInline) {\r\n        if (initializeInStart) {\r\n          this.warning(\r\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\r\n            initializerNode.range\r\n          );\r\n        } else {\r\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\r\n          let exprType = getExpressionType(initExpr);\r\n          switch (exprType) {\r\n            case NativeType.I32: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(\r\n                getConstValueI64Low(initExpr),\r\n                getConstValueI64High(initExpr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF32(initExpr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF64(initExpr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false);\r\n              return false;\r\n            }\r\n          }\r\n          global.set(CommonFlags.INLINED); // inline the value from now on\r\n        }\r\n      }\r\n\r\n    // Initialize to zero if there's no initializer\r\n    } else {\r\n      initExpr = type.toNativeZero(module);\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      if (isDeclaredInline) {\r\n        this.error(\r\n          DiagnosticCode.Decorator_0_is_not_valid_here,\r\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\r\n        );\r\n      }\r\n      module.addGlobal(internalName, nativeType, true, type.toNativeZero(module));\r\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\r\n      this.currentBody.push(\r\n        module.global_set(internalName, initExpr)\r\n      );\r\n    } else if (!isDeclaredInline) { // compile normally\r\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // === Enums ====================================================================================\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var previousParent = this.currentParent;\r\n    this.currentParent = element;\r\n    var previousValue: EnumValue | null = null;\r\n    var previousValueIsMut = false;\r\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueNode = val.valueNode;\r\n        val.set(CommonFlags.COMPILED);\r\n        let previousFlow = this.currentFlow;\r\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = element.file.startFunction.flow;\r\n        }\r\n        let initExpr: ExpressionRef;\r\n        if (valueNode) {\r\n          initExpr = this.compileExpression(valueNode, Type.i32,\r\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\r\n          );\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            initExpr = module.precomputeExpression(initExpr);\r\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n              if (element.is(CommonFlags.CONST)) {\r\n                this.error(\r\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                  valueNode.range\r\n                );\r\n              }\r\n              initInStart = true;\r\n            }\r\n          }\r\n        } else if (previousValue == null) {\r\n          initExpr = module.i32(0);\r\n        } else {\r\n          if (previousValueIsMut) {\r\n            this.error(\r\n              DiagnosticCode.Enum_member_must_have_initializer,\r\n              (<EnumValue>member).identifierNode.range.atEnd\r\n            );\r\n          }\r\n          initExpr = module.binary(BinaryOp.AddI32,\r\n            module.global_get(previousValue.internalName, NativeType.I32),\r\n            module.i32(1)\r\n          );\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.error(\r\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                member.declaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n        }\r\n        this.currentFlow = previousFlow;\r\n        if (initInStart) {\r\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\r\n          this.currentBody.push(\r\n            this.makeGlobalAssignment(val, initExpr, false)\r\n          );\r\n          previousValueIsMut = true;\r\n        } else {\r\n          if (isInline) {\r\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\r\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\r\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            }\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n          }\r\n          val.isImmutable = true;\r\n          previousValueIsMut = false;\r\n        }\r\n        previousValue = <EnumValue>val;\r\n      }\r\n    }\r\n    this.currentParent = previousParent;\r\n    return true;\r\n  }\r\n\r\n  // === Functions ================================================================================\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: NamedTypeNode[],\r\n    contextualTypeArguments: Map<string,Type> = makeMap(),\r\n    alternativeReportNode: Node | null = null\r\n  ): Function | null {\r\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\r\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      prototype.parent, // relative to itself\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return null;\r\n    if (!this.compileFunction(instance)) return null; // reports\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles the body of a function within the specified flow. */\r\n  compileFunctionBody(\r\n    /** Function to compile. */\r\n    instance: Function,\r\n    /** Target array of statements. */\r\n    stmts: ExpressionRef[] | null = null\r\n  ): ExpressionRef[] {\r\n    var module = this.module;\r\n    var bodyNode = assert(instance.prototype.bodyNode);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = this.currentFlow;\r\n\r\n    // compile statements\r\n    if (bodyNode.kind == NodeKind.BLOCK) {\r\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\r\n    } else {\r\n      // must be an expression statement if not a block\r\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\r\n\r\n      // must be an arrow function\r\n      assert(instance.prototype.arrowKind);\r\n\r\n      // none of the following can be an arrow function\r\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\r\n\r\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      if (!stmts) stmts = [ expr ];\r\n      else stmts.push(expr);\r\n      if (!flow.is(FlowFlags.TERMINATES)) { // TODO: detect if returning an autorelease local?\r\n        let indexBefore = stmts.length;\r\n        this.performAutoreleases(flow, stmts);\r\n        this.finishAutoreleases(flow, stmts);\r\n        let canOverflow = flow.canOverflow(expr, returnType);\r\n        let nonNull = flow.isNonnull(expr, returnType);\r\n        if (stmts.length > indexBefore) {\r\n          let temp = flow.getTempLocal(returnType);\r\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\r\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\r\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\r\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\r\n          flow.freeTempLocal(temp);\r\n        }\r\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\r\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\r\n      }\r\n    }\r\n\r\n    // make constructors return their instance pointer\r\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n      assert(instance.is(CommonFlags.INSTANCE));\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n\r\n      if (!flow.is(FlowFlags.TERMINATES)) {\r\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n\r\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\r\n        if (!flow.is(FlowFlags.ALLOCATES)) {\r\n          // {\r\n          //   if (!this) this = <ALLOC>\r\n          //   this.a = X\r\n          //   this.b = Y\r\n          // }\r\n          stmts.push(\r\n            module.if(\r\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                module.local_get(thisLocal.index, nativeSizeType)\r\n              ),\r\n              module.local_set(thisLocal.index,\r\n                this.makeRetain(\r\n                  this.makeAllocation(<Class>classInstance)\r\n                ),\r\n              )\r\n            )\r\n          );\r\n          this.makeFieldInitialization(<Class>classInstance, stmts);\r\n        }\r\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\r\n        this.finishAutoreleases(flow, stmts);\r\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\r\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\r\n      }\r\n\r\n      // check that super has been called if this is a derived class\r\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\r\n        this.error(\r\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\r\n          instance.prototype.declaration.range\r\n        );\r\n      }\r\n\r\n    // if this is a normal function, make sure that all branches terminate\r\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        instance.prototype.functionTypeNode.returnType.range\r\n      );\r\n    }\r\n\r\n    return stmts;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\r\n\r\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var signature = instance.signature;\r\n    var bodyNode = instance.prototype.bodyNode;\r\n\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var funcRef: FunctionRef;\r\n\r\n    // concrete function\r\n    if (bodyNode) {\r\n\r\n      // must not be ambient\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          instance.identifierNode.range\r\n        );\r\n      }\r\n\r\n      // cannot have an annotated external name\r\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\r\n        let decoratorNodes = instance.decoratorNodes;\r\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\r\n        this.error(\r\n          DiagnosticCode.Decorator_0_is_not_valid_here,\r\n          decorator.range, \"external\"\r\n        );\r\n      }\r\n\r\n      // compile body in this function's context\r\n      let previousFlow = this.currentFlow;\r\n      let flow = instance.flow;\r\n      this.currentFlow = flow;\r\n      let stmts = new Array<ExpressionRef>();\r\n\r\n      // retain each argument for as long as the function lives\r\n      let index = 0;\r\n      let thisType = signature.thisType;\r\n      if (thisType) {\r\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\r\n        ++index;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\r\n        let type = parameterTypes[i];\r\n        if (type.isManaged) {\r\n          stmts.push(\r\n            module.drop(\r\n              this.makeRetain(\r\n                module.local_get(index, type.toNativeType())\r\n              )\r\n            )\r\n          );\r\n          flow.setLocalFlag(index, LocalFlags.RETAINED | LocalFlags.PARAMETER);\r\n        }\r\n      }\r\n\r\n      this.compileFunctionBody(instance, stmts);\r\n      if (!flow.is(FlowFlags.TERMINATES)) {\r\n        this.performAutoreleases(flow, stmts);\r\n        this.finishAutoreleases(flow, stmts);\r\n      }\r\n      this.currentFlow = previousFlow;\r\n\r\n      // create the function\r\n      funcRef = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\r\n      );\r\n\r\n    // imported function\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          instance.identifierNode.range\r\n        );\r\n      }\r\n\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\r\n\r\n      // create the import\r\n      module.addFunctionImport(\r\n        instance.internalName,\r\n        mangleImportName_moduleName,\r\n        mangleImportName_elementName,\r\n        typeRef\r\n      );\r\n      funcRef = module.getFunction(instance.internalName);\r\n    }\r\n\r\n    instance.finalize(module, funcRef);\r\n    this.currentType = previousType;\r\n    return true;\r\n  }\r\n\r\n  // === Classes ==================================================================================\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: NamedTypeNode[],\r\n    contextualTypeArguments: Map<string,Type> = makeMap(),\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = this.resolver.resolveClassInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      prototype.parent, // relative to itself\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n    var prototype = instance.prototype;\r\n    var staticMembers = (<ClassPrototype>prototype).members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                (<FunctionPrototype>element).identifierNode\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY_PROTOTYPE: {\r\n            let getter = (<PropertyPrototype>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                getter.identifierNode\r\n              );\r\n            }\r\n            let setter = (<PropertyPrototype>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                setter.identifierNode\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(instance.contextualTypeArguments),\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            element.set(CommonFlags.COMPILED);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterInstance;\r\n            if (getter) this.compileFunction(getter);\r\n            let setter = (<Property>element).setterInstance;\r\n            if (setter) this.compileFunction(setter);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: NamedTypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Not_implemented,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // === Memory ===================================================================================\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\r\n  ensureStaticString(stringValue: string): ExpressionRef {\r\n    var program = this.program;\r\n    var rtHeaderSize = program.runtimeHeaderSize;\r\n    var stringInstance = assert(program.stringInstance);\r\n    var stringSegment: MemorySegment;\r\n    var segments = this.stringSegments;\r\n    if (segments.has(stringValue)) {\r\n      stringSegment = segments.get(stringValue)!; // reuse\r\n    } else {\r\n      let length = stringValue.length;\r\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\r\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\r\n      for (let i = 0; i < length; ++i) {\r\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\r\n      }\r\n      stringSegment = this.addMemorySegment(buffer);\r\n      segments.set(stringValue, stringSegment);\r\n    }\r\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\r\n    this.currentType = stringInstance.type;\r\n    if (this.options.isWasm64) {\r\n      return this.module.i64(i64_low(ref), i64_high(ref));\r\n    } else {\r\n      assert(i64_is_u32(ref));\r\n      return this.module.i32(i64_low(ref));\r\n    }\r\n  }\r\n\r\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\r\n    var program = this.program;\r\n    var length = values.length;\r\n    var byteSize = elementType.byteSize;\r\n    var byteLength = length * byteSize;\r\n    var bufferInstance = assert(program.arrayBufferInstance);\r\n    var runtimeHeaderSize = program.runtimeHeaderSize;\r\n\r\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\r\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\r\n    var pos = runtimeHeaderSize;\r\n    var nativeType = elementType.toNativeType();\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        switch (byteSize) {\r\n          case 1: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI8(getConstValueI32(value), buf, pos);\r\n              pos += 1;\r\n            }\r\n            break;\r\n          }\r\n          case 2: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI16(getConstValueI32(value), buf, pos);\r\n              pos += 2;\r\n            }\r\n            break;\r\n          }\r\n          case 4: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI32(getConstValueI32(value), buf, pos);\r\n              pos += 4;\r\n            }\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF32(getConstValueF32(value), buf, pos);\r\n          pos += 4;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF64(getConstValueF64(value), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    assert(pos == buf.length);\r\n\r\n    return this.addMemorySegment(buf);\r\n  }\r\n\r\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\r\n    var program = this.program;\r\n    var runtimeHeaderSize = program.runtimeHeaderSize;\r\n    var arrayPrototype = assert(program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\r\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\r\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\r\n    var arrayLength = i32(bufferLength / elementType.byteSize);\r\n\r\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\r\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\r\n\r\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\r\n    assert(!program.options.isWasm64); // TODO\r\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress32, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\r\n\r\n    return this.addMemorySegment(buf);\r\n  }\r\n\r\n  // === Table ====================================================================================\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func.internalName);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // === Statements ===============================================================================\r\n\r\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\r\n    switch (statement.kind) {\r\n      case NodeKind.CLASSDECLARATION: {\r\n        let memberStatements = (<ClassDeclaration>statement).members;\r\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\r\n          this.compileTopLevelStatement(memberStatements[i], body);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.ENUMDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\r\n        if (element) {\r\n          assert(element.kind == ElementKind.ENUM);\r\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.NAMESPACEDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<NamespaceDeclaration>statement);\r\n        if (element) {\r\n          // any potentiall merged element\r\n          let previousParent = this.currentParent;\r\n          this.currentParent = element;\r\n          let memberStatements = (<NamespaceDeclaration>statement).members;\r\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\r\n            this.compileTopLevelStatement(memberStatements[i], body);\r\n          }\r\n          this.currentParent = previousParent;\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        let declarations = (<VariableStatement>statement).declarations;\r\n        for (let i = 0, k = declarations.length; i < k; ++i) {\r\n          let element = this.program.getElementByDeclaration(declarations[i]);\r\n          if (element) {\r\n            assert(element.kind == ElementKind.GLOBAL);\r\n            if (\r\n              !element.is(CommonFlags.AMBIENT) && // delay imports\r\n              !element.hasDecorator(DecoratorFlags.LAZY)\r\n            ) this.compileGlobal(<Global>element);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.FIELDDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\r\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\r\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.EXPORT: {\r\n        if ((<ExportStatement>statement).internalPath != null) {\r\n          this.compileFileByPath(\r\n            <string>(<ExportStatement>statement).internalPath,\r\n            <StringLiteralExpression>(<ExportStatement>statement).path\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.EXPORTDEFAULT: {\r\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\r\n        break;\r\n      }\r\n      case NodeKind.IMPORT: {\r\n        this.compileFileByPath(\r\n          (<ImportStatement>statement).internalPath,\r\n          (<ImportStatement>statement).path\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTIONDECLARATION:\r\n      case NodeKind.METHODDECLARATION:\r\n      case NodeKind.INTERFACEDECLARATION:\r\n      case NodeKind.INDEXSIGNATUREDECLARATION:\r\n      case NodeKind.TYPEDECLARATION: break;\r\n      default: { // otherwise a top-level statement that is part of the start function's body\r\n        let stmt = this.compileStatement(statement);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  compileStatement(\r\n    statement: Statement,\r\n    isLastInBody: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var stmt: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        stmt = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        stmt = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        stmt = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        stmt = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!stmt) stmt = module.nop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // TODO: integrate inner type declaration into flow\r\n        this.error(\r\n          DiagnosticCode.Not_implemented,\r\n          statement.range\r\n        );\r\n        stmt = module.unreachable();\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        stmt = module.unreachable();\r\n      }\r\n    }\r\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\r\n    return stmt;\r\n  }\r\n\r\n  compileStatements(\r\n    statements: Statement[],\r\n    isBody: bool = false,\r\n    stmts: ExpressionRef[] | null = null\r\n  ): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    if (!stmts) {\r\n      stmts = new Array<ExpressionRef>(numStatements);\r\n      stmts.length = 0;\r\n    }\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\r\n      switch (getExpressionId(stmt)) {\r\n        case ExpressionId.Block: {\r\n          if (!getBlockName(stmt)) {\r\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: stmts.push(stmt);\r\n        case ExpressionId.Nop:\r\n      }\r\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\r\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\r\n        break;\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  compileBlockStatement(\r\n    statement: BlockStatement\r\n  ): ExpressionRef {\r\n    var statements = statement.statements;\r\n    var outerFlow = this.currentFlow;\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n\r\n    var stmts = this.compileStatements(statements);\r\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\r\n    this.currentFlow = outerFlow;\r\n    return flatten(this.module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileBreakStatement(\r\n    statement: BreakStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Not_implemented,\r\n        statement.label.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    var flow = this.currentFlow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    var parent = flow.parent;\r\n    while (parent !== null && parent.breakLabel == breakLabel) {\r\n      this.performAutoreleases(parent, stmts, /* clearFlags */ false);\r\n      parent = parent.parent;\r\n    }\r\n    flow.freeScopedLocals();\r\n    stmts.push(module.br(breakLabel));\r\n    flow.set(FlowFlags.BREAKS);\r\n    return flatten(module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileContinueStatement(\r\n    statement: ContinueStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Not_implemented,\r\n        label.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFlow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    var current: Flow | null = flow.parent;\r\n    while (current && current.continueLabel === continueLabel) {\r\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\r\n      current = current.parent;\r\n    }\r\n    flow.freeScopedLocals();\r\n    stmts.push(module.br(continueLabel));\r\n    return flatten(module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileDoStatement(\r\n    statement: DoStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n\r\n    // Compile the condition before the body in order to...\r\n    var condFlow = outerFlow.fork();\r\n    this.currentFlow = condFlow;\r\n    var condExpr = module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpression(statement.condition, Type.i32),\r\n        this.currentType\r\n      )\r\n    );\r\n    assert(!condFlow.hasScopedLocals);\r\n    // ...unify local states before and after the condition has been executed the first time\r\n    innerFlow.unifyLocalFlags(condFlow);\r\n    this.currentFlow = innerFlow;\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (statement.statement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(\r\n        this.compileStatement(statement.statement)\r\n      );\r\n    }\r\n    var alwaysFalse = false;\r\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\r\n      assert(getExpressionType(condExpr) == NativeType.I32);\r\n      if (!getConstValueI32(condExpr)) alwaysFalse = true;\r\n    }\r\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\r\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\r\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\r\n\r\n    // (block $break            ;; (1) skip if no breaks\r\n    //  (loop $continue         ;; (2) skip if skipping (4) + no continues\r\n    //   (...)                  ;; (3)\r\n    //   (br_if cond $continue) ;; (4) skip if (3) does not fall through or always false\r\n    //  )\r\n    // )\r\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\r\n\r\n    if (fallsThrough) {\r\n      this.performAutoreleases(innerFlow, stmts);\r\n      if (!alwaysFalse) { // (4)\r\n        stmts.push(module.br(continueLabel, condExpr));\r\n      }\r\n    }\r\n    var expr = flatten(module, stmts, NativeType.None);\r\n    if (fallsThrough && !alwaysFalse || continues) { // (2)\r\n      expr = module.loop(continueLabel, expr);\r\n    }\r\n    if (breaks) { // (1)\r\n      expr = module.block(breakLabel, [ expr ]);\r\n    }\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    outerFlow.inherit(innerFlow);\r\n    this.currentFlow = outerFlow;\r\n    return expr;\r\n  }\r\n\r\n  compileEmptyStatement(\r\n    statement: EmptyStatement\r\n  ): ExpressionRef {\r\n    return this.module.nop();\r\n  }\r\n\r\n  compileExpressionStatement(\r\n    statement: ExpressionStatement\r\n  ): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\r\n  }\r\n\r\n  compileForStatement(\r\n    statement: ForStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // Set up and use the inner flow\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n\r\n    // Compile the initializer\r\n    var initializer = statement.initializer;\r\n    var initExpr: ExpressionRef = 0;\r\n    if (initializer) initExpr = this.compileStatement(initializer);\r\n\r\n    // Compile the condition\r\n    var condExpr: ExpressionRef = 0;\r\n    var alwaysTrue = false;\r\n    if (statement.condition) {\r\n      condExpr = module.precomputeExpression(\r\n        this.makeIsTrueish(\r\n          this.compileExpression(<Expression>statement.condition, Type.bool),\r\n          this.currentType\r\n        )\r\n      );\r\n      // Simplify if the condition is constant\r\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\r\n        assert(getExpressionType(condExpr) == NativeType.I32);\r\n        if (getConstValueI32(condExpr) == /* false */ 0) {\r\n          let stmts = new Array<ExpressionRef>();\r\n          if (initExpr) stmts.push(initExpr);\r\n          this.performAutoreleases(innerFlow, stmts);\r\n          innerFlow.freeScopedLocals();\r\n          outerFlow.popBreakLabel();\r\n          this.currentFlow = outerFlow;\r\n          return flatten(module, stmts, NativeType.None);\r\n        }\r\n        alwaysTrue = true;\r\n      }\r\n    } else { // Omitted condition is always true\r\n      condExpr = module.i32(1);\r\n      alwaysTrue = true;\r\n    }\r\n    innerFlow.inheritNonnullIfTrue(condExpr);\r\n\r\n    // Compile the incrementor before the body in order to...\r\n    var incrementor = statement.incrementor;\r\n    var incrExpr: ExpressionRef = 0;\r\n    if (incrementor) {\r\n      let incrFlow = innerFlow.fork();\r\n      this.currentFlow = incrFlow;\r\n      incrExpr = this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP);\r\n      assert(!incrFlow.hasScopedLocals);\r\n      this.currentFlow = innerFlow;\r\n      // ...unify local states before and after the incrementor has been executed the first time\r\n      innerFlow.unifyLocalFlags(incrFlow);\r\n    }\r\n\r\n    // Compile body (break: drop out, continue: fall through to incrementor, + loop)\r\n    var bodyFlow = innerFlow.fork();\r\n    this.currentFlow = bodyFlow;\r\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label; bodyFlow.breakLabel = breakLabel;\r\n    bodyFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    bodyFlow.continueLabel = continueLabel;\r\n    var loopLabel = \"loop|\" + label;\r\n    var bodyStatement = statement.statement;\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (bodyStatement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(this.compileStatement(bodyStatement));\r\n    }\r\n    var terminates = bodyFlow.is(FlowFlags.TERMINATES);\r\n    var continues = bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\r\n    var breaks = bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\r\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\r\n\r\n    // Finalize body flow\r\n    if (fallsThrough) this.performAutoreleases(bodyFlow, stmts);\r\n    bodyFlow.freeScopedLocals();\r\n    innerFlow.inherit(bodyFlow);\r\n    this.currentFlow = innerFlow;\r\n\r\n    // (block $break          ;; (1) skip label (needed anyway) if skipping (4) + no breaks\r\n    //  (initializer)         ;; (2) [may be empty]\r\n    //  (loop $loop           ;; (3) skip if (6) does not fall through + no continues\r\n    //   (br_if !cond $break) ;; (4) skip if always true\r\n    //   (block $continue     ;; (5) skip if no continues or nothing else than continue\r\n    //    (...)               ;; (6)\r\n    //   )\r\n    //   (incrementor)        ;; (7) skip if skipping (3) [may be empty]\r\n    //   (br $loop)           ;; (8) skip if skipping (3)\r\n    //  )\r\n    // )\r\n    var needsLabel = !alwaysTrue || breaks;\r\n\r\n    var loop = new Array<ExpressionRef>();\r\n    if (!alwaysTrue) { // (4)\r\n      loop.push(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\r\n    }\r\n    if (continues) { // (5)\r\n      if (stmts.length > 1 || getExpressionId(stmts[0]) != ExpressionId.Break) { // otherwise lonely continue\r\n        loop.push(module.block(continueLabel, stmts));\r\n      }\r\n    } else {\r\n      for (let i = 0, k = stmts.length; i < k; ++i) loop.push(stmts[i]);\r\n    }\r\n    var expr: ExpressionRef;\r\n    if (fallsThrough || continues) { // (3)\r\n      if (incrExpr) loop.push(incrExpr); // (7)\r\n      this.performAutoreleases(innerFlow, loop);\r\n      loop.push(module.br(loopLabel)); // (8)\r\n      if (initExpr) { // (2)\r\n        expr = module.block(needsLabel ? breakLabel : null, [\r\n          initExpr,\r\n          module.loop(loopLabel, module.block(null, loop))\r\n        ]);\r\n      } else {\r\n        expr = module.block(needsLabel ? breakLabel : null, [\r\n          module.loop(loopLabel, flatten(module, loop, NativeType.None))\r\n        ]);\r\n      }\r\n    } else {\r\n      if (initExpr) loop.unshift(initExpr); // (2)\r\n      this.performAutoreleases(innerFlow, loop);\r\n      expr = module.block(needsLabel ? breakLabel : null, loop);\r\n    }\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n    this.currentFlow = outerFlow;\r\n    return expr;\r\n  }\r\n\r\n  compileIfStatement(\r\n    statement: IfStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpression(statement.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Try to eliminate unnecesssary branches if the condition is constant\r\n    if (\r\n      getExpressionId(condExpr) == ExpressionId.Const &&\r\n      getExpressionType(condExpr) == NativeType.I32\r\n    ) {\r\n      return getConstValueI32(condExpr)\r\n        ? this.compileStatement(ifTrue)\r\n        : ifFalse\r\n          ? this.compileStatement(ifFalse)\r\n          : module.nop();\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var ifTrueStmts = new Array<ExpressionRef>();\r\n    var ifTrueFlow = outerFlow.fork();\r\n    this.currentFlow = ifTrueFlow;\r\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\r\n    if (ifTrue.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\r\n    } else {\r\n      ifTrueStmts.push(this.compileStatement(ifTrue));\r\n    }\r\n    if (!ifTrueFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\r\n    ifTrueFlow.freeScopedLocals();\r\n    this.currentFlow = outerFlow;\r\n\r\n    if (ifFalse) {\r\n      let ifFalseFlow = outerFlow.fork();\r\n      this.currentFlow = ifFalseFlow;\r\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\r\n      let ifFalseStmts = new Array<ExpressionRef>();\r\n      if (ifFalse.kind == NodeKind.BLOCK) {\r\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\r\n      } else {\r\n        ifFalseStmts.push(this.compileStatement(ifFalse));\r\n      }\r\n      if (!ifFalseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\r\n      ifFalseFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\r\n      return module.if(condExpr,\r\n        flatten(module, ifTrueStmts, NativeType.None),\r\n        flatten(module, ifFalseStmts, NativeType.None)\r\n      );\r\n    } else {\r\n      outerFlow.inheritConditional(ifTrueFlow);\r\n      if (ifTrueFlow.is(FlowFlags.TERMINATES)) outerFlow.inheritNonnullIfFalse(condExpr);\r\n      return module.if(condExpr,\r\n        flatten(module, ifTrueStmts, NativeType.None)\r\n      );\r\n    }\r\n    // TODO: Detect neglected condition\r\n    // if (!foo) {\r\n    //   foo = [notNull]\r\n    // }\r\n    // foo // is possibly null\r\n  }\r\n\r\n  compileReturnStatement(\r\n    statement: ReturnStatement,\r\n    isLastInBody: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var expr: ExpressionRef = 0;\r\n    var flow = this.currentFlow;\r\n    var returnType = flow.returnType;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\r\n\r\n    var valueExpression = statement.value;\r\n    if (valueExpression) {\r\n      if (returnType == Type.void) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          valueExpression.range, this.currentType.toString(), returnType.toString()\r\n        );\r\n        this.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let constraints = Constraints.CONV_IMPLICIT;\r\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\r\n      expr = this.compileExpression(valueExpression, returnType, constraints | Constraints.WILL_RETAIN);\r\n\r\n      // when returning a local, and it is already retained, skip the final set\r\n      // of retaining it as the return value and releasing it as a variable\r\n      if (!this.skippedAutoreleases.has(expr)) {\r\n        if (returnType.isManaged) {\r\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\r\n            let index = getLocalGetIndex(expr);\r\n            if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\r\n              flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\r\n              flow.setLocalFlag(index, LocalFlags.RETURNED);\r\n              this.skippedAutoreleases.add(expr);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // remember return states\r\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\r\n\r\n    } else if (returnType != Type.void) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        statement.range, \"void\", returnType.toString()\r\n      );\r\n      expr = module.unreachable();\r\n    }\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    this.finishAutoreleases(flow, stmts);\r\n\r\n    // Make sure that the return value is retained for the caller\r\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\r\n\r\n    if (returnType != Type.void && stmts.length) {\r\n      let temp = flow.getTempLocal(returnType);\r\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\r\n      stmts.unshift(\r\n        module.local_set(temp.index, expr)\r\n      );\r\n      expr = module.local_get(temp.index, returnType.toNativeType());\r\n      flow.freeTempLocal(temp);\r\n    }\r\n    flow.freeScopedLocals();\r\n\r\n    // If the last statement anyway, make it the block's return value\r\n    if (isLastInBody && expr && returnType != Type.void) {\r\n      if (!stmts.length) return expr;\r\n      stmts.push(expr);\r\n      return module.block(null, stmts, returnType.toNativeType());\r\n    }\r\n\r\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\r\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\r\n      // stmts.push(module.createUnreachable());\r\n      return module.block(null, stmts);\r\n    }\r\n\r\n    // Otherwise emit a normal return\r\n    if (!stmts.length) return module.return(expr);\r\n    stmts.push(module.return(expr));\r\n    return module.block(null, stmts);\r\n  }\r\n\r\n  compileSwitchStatement(\r\n    statement: SwitchStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n    if (!numCases) {\r\n      return this.compileExpression(statement.condition, Type.void,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n    }\r\n\r\n    // Everything within a switch uses the same break context\r\n    var outerFlow = this.currentFlow;\r\n    var context = outerFlow.pushBreakLabel();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\r\n    var tempLocalIndex = tempLocal.index;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.local_set( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32,\r\n        Constraints.CONV_IMPLICIT\r\n      )\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.binary(BinaryOp.EqI32,\r\n            module.local_get(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.u32,\r\n              Constraints.CONV_IMPLICIT\r\n            )\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    outerFlow.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.br((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\r\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\r\n    var commonConditional = 0;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n\r\n      // Each switch case initiates a new branch\r\n      let innerFlow = outerFlow.fork();\r\n      this.currentFlow = innerFlow;\r\n      let breakLabel = \"break|\" + context;\r\n      innerFlow.breakLabel = breakLabel;\r\n\r\n      let isLast = i == numCases - 1;\r\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\r\n      stmts[0] = currentBlock;\r\n      let count = 1;\r\n      let terminates = false;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        let stmt = this.compileStatement(statements[j]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          stmts[count++] = stmt;\r\n        }\r\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\r\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\r\n          break;\r\n        }\r\n      }\r\n      stmts.length = count;\r\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\r\n        commonCategorical &= innerFlow.flags;\r\n      }\r\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\r\n\r\n      // Switch back to the parent flow\r\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\r\n      innerFlow.unset(\r\n        FlowFlags.BREAKS |\r\n        FlowFlags.CONDITIONALLY_BREAKS\r\n      );\r\n      innerFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\r\n    }\r\n    outerFlow.popBreakLabel();\r\n\r\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\r\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\r\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\r\n    // TODO: what about local states?\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(\r\n    statement: ThrowStatement\r\n  ): ExpressionRef {\r\n    var flow = this.currentFlow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.finishAutoreleases(flow, stmts);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    var value = statement.value;\r\n    var message: Expression | null = null;\r\n    if (value.kind == NodeKind.NEW) {\r\n      let newArgs = (<NewExpression>value).arguments;\r\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\r\n    }\r\n    stmts.push(compileAbort(this, message, statement));\r\n\r\n    return flatten(this.module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileTryStatement(\r\n    statement: TryStatement\r\n  ): ExpressionRef {\r\n    // TODO: can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Not_implemented,\r\n      statement.range\r\n    );\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\r\n  compileVariableStatement(\r\n    statement: VariableStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n    var flow = this.currentFlow;\r\n    var initializers = new Array<ExpressionRef>();\r\n    var resolver = this.resolver;\r\n\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let initExpr: ExpressionRef = 0;\r\n      let initAutoreleaseSkipped = false;\r\n\r\n      // Resolve type if annotated\r\n      if (declaration.type) {\r\n        type = resolver.resolveType( // reports\r\n          declaration.type,\r\n          flow.actualFunction,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\r\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\r\n          );\r\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\r\n        }\r\n\r\n      // Otherwise infer type from initializer\r\n      } else if (declaration.initializer) {\r\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\r\n          Constraints.WILL_RETAIN\r\n        ); // reports\r\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n\r\n      // Error if there's neither a type nor an initializer\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n\r\n      // Handle constants, and try to inline if value is static\r\n      let isConst = declaration.is(CommonFlags.CONST);\r\n      let isStatic = false;\r\n      if (isConst) {\r\n        if (initExpr) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\r\n            let local = new Local(name, -1, type, flow.parentFunction);\r\n            switch (getExpressionType(initExpr)) {\r\n              case NativeType.I32: {\r\n                local.setConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI32(initExpr),\r\n                    0\r\n                  ),\r\n                  type\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local.setConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI64Low(initExpr),\r\n                    getConstValueI64High(initExpr)\r\n                  ),\r\n                  type\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                return module.unreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = flow.scopedLocals;\r\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              let existing = scopedLocals.get(name)!;\r\n              this.errorRelated(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range,\r\n                existing.declaration.name.range,\r\n                name\r\n              );\r\n              return this.module.unreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isStatic = true;\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n\r\n      // Otherwise compile as mutable\r\n      if (!isStatic) {\r\n        let local: Local;\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          let existingLocal = flow.getScopedLocal(name);\r\n          if (existingLocal) {\r\n            if (!existingLocal.declaration.range.source.isNative) {\r\n              this.errorRelated(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range,\r\n                existingLocal.declaration.name.range,\r\n                name\r\n              );\r\n            } else { // scoped locals are shared temps that don't track declarations\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n            }\r\n            local = existingLocal;\r\n          } else {\r\n            local = flow.addScopedLocal(name, type);\r\n          }\r\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\r\n        } else {\r\n          let existing = flow.lookupLocal(name);\r\n          if (existing) {\r\n            this.errorRelated(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range,\r\n              existing.declaration.name.range,\r\n              name\r\n            );\r\n            continue;\r\n          }\r\n          local = flow.parentFunction.addLocal(type, name, declaration);\r\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\r\n        }\r\n        let isManaged = type.isManaged;\r\n        if (initExpr) {\r\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n          if (isManaged) {\r\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\r\n            initializers.push(\r\n              module.local_set(local.index,\r\n                initAutoreleaseSkipped\r\n                  ? initExpr\r\n                  : this.makeRetain(initExpr)\r\n              )\r\n            );\r\n          } else {\r\n            initializers.push(\r\n              module.local_set(local.index, initExpr)\r\n            );\r\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\r\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\r\n            }\r\n          }\r\n        } else {\r\n          if (isManaged) {\r\n            // This is necessary because the first use (and assign) of the local could be taking place\r\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\r\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\r\n            // initialized but becomes released later on, whatever was stored before would be released.\r\n            // TODO: Detect this condition inside of a loop instead?\r\n            initializers.push(\r\n              module.local_set(local.index,\r\n                type.toNativeZero(module)\r\n              )\r\n            );\r\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\r\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return initializers.length == 0\r\n      ? 0\r\n      : flatten(module, initializers, NativeType.None);\r\n  }\r\n\r\n  compileVoidStatement(\r\n    statement: VoidStatement\r\n  ): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void,\r\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\r\n    );\r\n  }\r\n\r\n  compileWhileStatement(\r\n    statement: WhileStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    // Compile condition\r\n    var condExpr = module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpression(statement.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Simplify if the condition is constant\r\n    var alwaysTrue = false;\r\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\r\n      assert(getExpressionType(condExpr) == NativeType.I32);\r\n      if (!getConstValueI32(condExpr)) return module.nop(); // simplify\r\n      alwaysTrue = true;\r\n    }\r\n\r\n    // Compile body\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n    innerFlow.inheritNonnullIfTrue(condExpr);\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (statement.statement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(this.compileStatement(statement.statement));\r\n    }\r\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\r\n\r\n    // (block $break          ;; (1) skip if skipping (3) + no breaks\r\n    //  (loop $continue       ;; (2) skip if skipping (5) + no continues\r\n    //   (br_if !cond $break) ;; (3) skip if always true\r\n    //   (...)                ;; (4)\r\n    //   (br $continue)       ;; (5) skip if (4) does not fall through\r\n    //  )\r\n    // )\r\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\r\n\r\n    if (fallsThrough) { // (5)\r\n      this.performAutoreleases(innerFlow, stmts);\r\n      stmts.push(module.br(continueLabel));\r\n    }\r\n    if (!alwaysTrue) { // (3)\r\n      stmts.unshift(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\r\n    }\r\n    var expr = flatten(module, stmts, NativeType.None);\r\n    if (fallsThrough || innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) { // (2)\r\n      expr = module.loop(continueLabel, expr);\r\n    }\r\n    if (!alwaysTrue || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) { // (1)\r\n      expr = module.block(breakLabel, [ expr ]);\r\n    }\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n    this.currentFlow = outerFlow;\r\n    return expr;\r\n  }\r\n\r\n  // === Expressions ==============================================================================\r\n\r\n  /** Compiles the value of an inlined constant element. */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.i32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.i32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.i32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.i32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.i64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.i64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        // monkey-patch for converting built-in floats to f32 implicitly\r\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.unreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    constraints: Constraints = Constraints.NONE\r\n  ): ExpressionRef {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    this.currentType = contextualType;\r\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Not_implemented,\r\n          expression.range\r\n        );\r\n        expr = this.module.unreachable();\r\n      }\r\n    }\r\n    // ensure conversion and wrapping in case the respective function doesn't on its own\r\n    var currentType = this.currentType;\r\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\r\n    if (currentType != contextualType) {\r\n      if (constraints & Constraints.CONV_EXPLICIT) {\r\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\r\n        wrap = false;\r\n        this.currentType = contextualType;\r\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\r\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\r\n        wrap = false;\r\n        this.currentType = contextualType;\r\n      }\r\n    }\r\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\r\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\r\n    // must go through this function, with the respective per-kind functions not being used directly.\r\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n    return expr;\r\n  }\r\n\r\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    constraints: Constraints = Constraints.NONE\r\n  ): ExpressionRef {\r\n    return this.module.precomputeExpression(\r\n      this.compileExpression(expression, contextualType, constraints)\r\n    );\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    /** Original type. */\r\n    fromType: Type,\r\n    /** New type. */\r\n    toType: Type,\r\n    /** Whether the conversion is explicit.*/\r\n    explicit: bool,\r\n    /** Whether the result should be wrapped, if a small integer. */\r\n    wrap: bool,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\r\n\r\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\r\n\r\n    if (!fromType.isAssignableTo(toType)) {\r\n      if (!explicit) {\r\n        if (fromType.nonNullableType == toType) {\r\n          this.error(\r\n            DiagnosticCode.Object_is_possibly_null,\r\n            reportNode.range\r\n          ); // recoverable\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n            reportNode.range, fromType.toString(), toType.toString()\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.unary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.unary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType == Type.bool) {\r\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\r\n            wrap = false;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType == Type.bool) {\r\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\r\n            wrap = false;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.drop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      // i64 to ...\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32 or smaller\r\n        if (toType == Type.bool) {\r\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\r\n          wrap = false;\r\n        } else if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\r\n        }\r\n\r\n      // i32 or smaller to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.unary(\r\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\r\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\r\n        );\r\n        wrap = false;\r\n\r\n      // i32 to i32\r\n      } else {\r\n        // small i32 to ...\r\n        if (fromType.is(TypeFlags.SHORT)) {\r\n          // small i32 to larger i32\r\n          if (fromType.size < toType.size) {\r\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\r\n            wrap = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return wrap\r\n      ? this.ensureSmallIntegerWrap(expr, toType)\r\n      : expr;\r\n  }\r\n\r\n  compileAssertionExpression(\r\n    expression: AssertionExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\r\n    switch (expression.assertionKind) {\r\n      case AssertionKind.PREFIX:\r\n      case AssertionKind.AS: {\r\n        let flow = this.currentFlow;\r\n        let toType = this.resolver.resolveType( // reports\r\n          assert(expression.toType),\r\n          flow.actualFunction,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!toType) return this.module.unreachable();\r\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\r\n      }\r\n      case AssertionKind.NONNULL: {\r\n        assert(!expression.toType);\r\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\r\n        let type = this.currentType;\r\n        if (this.currentFlow.isNonnull(expr, type)) {\r\n          this.info(\r\n            DiagnosticCode.Expression_is_never_null,\r\n            expression.expression.range\r\n          );\r\n        } else if (!this.options.noAssert) {\r\n          let module = this.module;\r\n          let flow = this.currentFlow;\r\n          let temp = flow.getTempLocal(type);\r\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\r\n          flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\r\n          expr = module.if(\r\n            module.local_tee(temp.index, expr),\r\n            module.local_get(temp.index, type.toNativeType()),\r\n            module.unreachable()\r\n          );\r\n          flow.freeTempLocal(temp);\r\n        }\r\n        this.currentType = this.currentType.nonNullableType;\r\n        return expr;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"<\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \">\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"<=\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \">=\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '==' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.V128: {\r\n            expr = module.unary(UnaryOp.AllTrueI8x16,\r\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ANYREF: {\r\n            // TODO: ref.eq\r\n            this.error(\r\n              DiagnosticCode.Not_implemented,\r\n              expression.range\r\n            );\r\n            expr = module.unreachable();\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '!=' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.V128: {\r\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\r\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ANYREF: {\r\n            // TODO: !ref.eq\r\n            this.error(\r\n              DiagnosticCode.Not_implemented,\r\n              expression.range\r\n            );\r\n            expr = module.unreachable();\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"+\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // addition might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"-\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // subtraction might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"*\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POW);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"**\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        let targetType = leftType;\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType.kind == TypeKind.F32) {\r\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            this.currentType, Type.f64,\r\n            false, false,\r\n            left\r\n          );\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.unreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n          if (compound && targetType != this.currentType) {\r\n            // this yields a proper error if target is i32 for example\r\n            expr = this.convertExpression(expr, this.currentType, targetType, false, false, expression);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"/\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, true, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, true, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\r\n          case TypeKind.I16: // ^\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.REM);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"%\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, true, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, true, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.unreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.unreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"<<\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"<<\", this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \">>\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \">>\", this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \">>>\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n          }\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \">>>\", this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"&\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"&\", this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"|\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"|\", this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"^\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"^\", this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\r\n        let flow = this.currentFlow;\r\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\r\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\r\n        leftType = this.currentType;\r\n\r\n        let rightFlow = flow.fork();\r\n        this.currentFlow = rightFlow;\r\n        rightFlow.inheritNonnullIfTrue(leftExpr);\r\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\r\n        rightType = leftType;\r\n\r\n        // simplify if only interested in true or false\r\n        if (contextualType == Type.bool || contextualType == Type.void) {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n          this.currentType = Type.bool;\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            this.makeIsTrueish(rightExpr, rightType),\r\n            module.i32(0)\r\n          );\r\n\r\n        // references must properly retain and release, with the same outcome independent of the branch taken\r\n        } else if (leftType.isManaged) {\r\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\r\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\r\n          let temp = flow.getTempLocal(leftType);\r\n          leftExpr = module.local_tee(temp.index, leftExpr);\r\n\r\n          // instead of retaining left and releasing it again in right when right\r\n          // is taken, we can also just retain left if right is not taken\r\n          let retainLeftInElse = false;\r\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\r\n            if (!leftAutoreleaseSkipped) {\r\n              retainLeftInElse = true;\r\n            } else {\r\n              rightExpr = this.makeRetain(rightExpr);\r\n              rightAutoreleaseSkipped = true;\r\n            }\r\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\r\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\r\n          }\r\n\r\n          let rightStmts = new Array<ExpressionRef>();\r\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\r\n            rightStmts.unshift(\r\n              this.makeRelease(\r\n                module.local_get(temp.index, leftType.toNativeType())\r\n              )\r\n            );\r\n          }\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            rightExpr,\r\n            retainLeftInElse\r\n              ? this.makeRetain(\r\n                  module.local_get(temp.index, leftType.toNativeType())\r\n                )\r\n              : module.local_get(temp.index, leftType.toNativeType())\r\n          );\r\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n          if (temp) flow.freeTempLocal(temp);\r\n\r\n        // basic values can use more aggressive optimizations\r\n        } else {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          // simplify if cloning left without side effects is possible\r\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n            expr = module.if(\r\n              this.makeIsTrueish(leftExpr, this.currentType),\r\n              rightExpr,\r\n              expr\r\n            );\r\n\r\n          // if not possible, tee left to a temp\r\n          } else {\r\n            let tempLocal = flow.getTempLocal(leftType);\r\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\r\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\r\n            expr = module.if(\r\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\r\n              rightExpr,\r\n              module.local_get(tempLocal.index, leftType.toNativeType())\r\n            );\r\n            flow.freeTempLocal(tempLocal);\r\n          }\r\n        }\r\n        this.currentType = leftType;\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\r\n        let flow = this.currentFlow;\r\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\r\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\r\n        leftType = this.currentType;\r\n\r\n        let rightFlow = flow.fork();\r\n        this.currentFlow = rightFlow;\r\n        rightFlow.inheritNonnullIfFalse(leftExpr);\r\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\r\n        rightType = leftType;\r\n\r\n        // simplify if only interested in true or false\r\n        if (contextualType == Type.bool || contextualType == Type.void) {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n          this.currentType = Type.bool;\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            module.i32(1),\r\n            this.makeIsTrueish(rightExpr, rightType)\r\n          );\r\n\r\n        // references must properly retain and release, with the same outcome independent of the branch taken\r\n        } else if (leftType.isManaged) {\r\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\r\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\r\n          let temp = flow.getTempLocal(leftType);\r\n          leftExpr = module.local_tee(temp.index, leftExpr);\r\n\r\n          // instead of retaining left and releasing it again in right when right\r\n          // is taken, we can also just retain left if right is not taken\r\n          let retainLeftInThen = false;\r\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\r\n            if (!leftAutoreleaseSkipped) {\r\n              retainLeftInThen = true;\r\n            } else {\r\n              rightExpr = this.makeRetain(rightExpr);\r\n              rightAutoreleaseSkipped = true;\r\n            }\r\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\r\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\r\n          }\r\n\r\n          let rightStmts = new Array<ExpressionRef>();\r\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\r\n            // TODO: usually, false'ish means left is null, but this might not hold\r\n            // once implicit conversion with strings is performed and left is \"\", so:\r\n            rightStmts.unshift(\r\n              this.makeRelease(\r\n                module.local_get(temp.index, leftType.toNativeType())\r\n              )\r\n            );\r\n          }\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            retainLeftInThen\r\n              ? this.makeRetain(\r\n                  module.local_get(temp.index, leftType.toNativeType())\r\n                )\r\n              : module.local_get(temp.index, leftType.toNativeType()),\r\n            rightExpr\r\n          );\r\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n          if (temp) flow.freeTempLocal(temp);\r\n\r\n        // basic values can use more aggressive optimizations\r\n        } else {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          // simplify if cloning left without side effects is possible\r\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n            expr = module.if(\r\n              this.makeIsTrueish(leftExpr, leftType),\r\n              expr,\r\n              rightExpr\r\n            );\r\n\r\n          // if not possible, tee left to a temp. local\r\n          } else {\r\n            let temp = flow.getTempLocal(leftType);\r\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\r\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\r\n            expr = module.if(\r\n              this.makeIsTrueish(module.local_tee(temp.index, leftExpr), leftType),\r\n              module.local_get(temp.index, leftType.toNativeType()),\r\n              rightExpr\r\n            );\r\n            flow.freeTempLocal(temp);\r\n          }\r\n        }\r\n        this.currentType = leftType;\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.unreachable();\r\n      }\r\n    }\r\n    if (!compound) return expr;\r\n    var resolver = this.resolver;\r\n    var target = resolver.lookupExpression(left, this.currentFlow);\r\n    if (!target) return module.unreachable();\r\n    var targetType = resolver.getTypeOfElement(target) || Type.void;\r\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, this.currentType.toString(), targetType.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    return this.makeAssignment(\r\n      target,\r\n      expr, // TODO: delay release above if possible?\r\n      left,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    valueExpr: ExpressionRef,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\r\n    // is a bad idea currently. so this assumes that the type matches.\r\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    leftExpr: ExpressionRef,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var rightType: Type;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      rightType = operatorInstance.signature.parameterTypes[0];\r\n    } else {\r\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\r\n      // local states, like having retained locals that actually do not even exist, possibly\r\n      // releasing something random in that local before and evil things like that. Hence this\r\n      // assumes that LHS type matches, which in turn means that static overloads must be\r\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\r\n      // things like multiple static overloads for different combinations of LHS/RHS types.\r\n      // We might want that at some point of course, but requires to complete the resolver so\r\n      // it can actually resolve every kind of expression without ever having to recompile.\r\n      rightType = operatorInstance.signature.parameterTypes[1];\r\n    }\r\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\r\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var resolver = program.resolver;\r\n    var flow = this.currentFlow;\r\n    var target = resolver.lookupExpression(expression, flow); // reports\r\n    if (!target) return this.module.unreachable();\r\n    var thisExpression = resolver.currentThisExpression;\r\n    var elementExpression = resolver.currentElementExpression;\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var targetType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        // not yet compiled if a static field compiled as a global\r\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        targetType = (<VariableLikeElement>target).type;\r\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\r\n        if (!setterPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>target).internalName\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!setterInstance) return this.module.unreachable();\r\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n        targetType = setterInstance.signature.parameterTypes[0];\r\n        if (setterPrototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let setterInstance = (<Property>target).setterInstance;\r\n        if (!setterInstance) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>target).internalName\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n        targetType = setterInstance.signature.parameterTypes[0];\r\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n        break;\r\n      }\r\n      case ElementKind.INDEXSIGNATURE: {\r\n        let parent = (<IndexSignature>target).parent;\r\n        assert(parent.kind == ElementKind.CLASS);\r\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n        if (!indexedSet) {\r\n          let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              expression.range, (<Class>parent).internalName\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, (<Class>parent).internalName\r\n            );\r\n          }\r\n          return this.module.unreachable();\r\n        }\r\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\r\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\r\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Not_implemented,\r\n          expression.range\r\n        );\r\n        return this.module.unreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    assert(targetType != Type.void);\r\n    return this.makeAssignment(\r\n      target,\r\n      this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN),\r\n      expression,\r\n      thisExpression,\r\n      elementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  /** Makes an assignment expression or block, assigning a value to a target. */\r\n  makeAssignment(\r\n    /** Target element, e.g. a Local. */\r\n    target: Element,\r\n    /** Value expression that has been compiled in a previous step already. */\r\n    valueExpr: ExpressionRef,\r\n    /** Expression reference. Has already been compiled to `valueExpr`. */\r\n    valueExpression: Expression,\r\n    /** `this` expression reference if a field or property set. */\r\n    thisExpression: Expression | null,\r\n    /** Index expression reference if an indexed set. */\r\n    indexExpression: Expression | null,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\r\n    // everything else must insert the skipped autorelease now. See (*)\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          this.currentType = tee ? (<Local>target).type : Type.void;\r\n          return module.unreachable();\r\n        }\r\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\r\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range,\r\n            target.internalName\r\n          );\r\n          this.currentType = tee ? (<Global>target).type : Type.void;\r\n          return module.unreachable();\r\n        }\r\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let initializerNode = (<Field>target).initializerNode;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            initializerNode\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, (<Field>target).internalName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        return this.makeFieldAssignment(<Field>target,\r\n          valueExpr,\r\n          // FIXME: explicit type (currently fails due to missing null checking)\r\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\r\n          tee\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\r\n        if (!setterPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!setterInstance) return module.unreachable();\r\n        // call just the setter if the return value isn't of interest\r\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\r\n        // otherwise call the setter first, then the getter\r\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\r\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!getterInstance) return module.unreachable();\r\n        let returnType = getterInstance.signature.returnType;\r\n        let nativeReturnType = returnType.toNativeType();\r\n        return module.block(null, [\r\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\r\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\r\n        ], nativeReturnType);\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        let setterInstance = (<Property>target).setterInstance;\r\n        if (!setterInstance) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        // call just the setter if the return value isn't of interest\r\n        if (!tee) {\r\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\r\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\r\n        }\r\n        // otherwise call the setter first, then the getter\r\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\r\n        let returnType = getterInstance.signature.returnType;\r\n        let nativeReturnType = returnType.toNativeType();\r\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\r\n        let temp = flow.getTempLocal(returnType);\r\n        let ret = module.block(null, [\r\n          this.makeCallDirect(setterInstance, [ // set and remember the target\r\n            module.local_tee(temp.index, thisExpr),\r\n            valueExpr\r\n          ], valueExpression),\r\n          this.makeCallDirect(getterInstance, [ // get from remembered target\r\n            module.local_get(temp.index, nativeReturnType)\r\n          ], valueExpression)\r\n        ], nativeReturnType);\r\n        flow.freeTempLocal(temp);\r\n        return ret;\r\n      }\r\n      case ElementKind.INDEXSIGNATURE: {\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n        let parent = (<IndexSignature>target).parent;\r\n        assert(parent.kind == ElementKind.CLASS);\r\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            valueExpression.range, parent.internalName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n        if (!indexedSet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n            valueExpression.range, parent.internalName\r\n          );\r\n          this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n          return module.unreachable();\r\n        }\r\n        let targetType = (<Class>parent).type;\r\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\r\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\r\n        if (tee) {\r\n          let tempTarget = flow.getTempLocal(targetType);\r\n          let tempElement = flow.getTempLocal(this.currentType);\r\n          let returnType = indexedGet.signature.returnType;\r\n          flow.freeTempLocal(tempTarget);\r\n          let ret = module.block(null, [\r\n            this.makeCallDirect(indexedSet, [\r\n              module.local_tee(tempTarget.index, thisExpr),\r\n              module.local_tee(tempElement.index, elementExpr),\r\n              valueExpr\r\n            ], valueExpression),\r\n            this.makeCallDirect(indexedGet, [\r\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\r\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\r\n            ], valueExpression)\r\n          ], returnType.toNativeType());\r\n          flow.freeTempLocal(tempElement);\r\n          flow.freeTempLocal(tempTarget);\r\n          return ret;\r\n        } else {\r\n          return this.makeCallDirect(indexedSet, [\r\n            thisExpr,\r\n            elementExpr,\r\n            valueExpr\r\n          ], valueExpression);\r\n        }\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Not_implemented,\r\n      valueExpression.range\r\n    );\r\n    return module.unreachable();\r\n  }\r\n\r\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\r\n  private makeLocalAssignment(\r\n    /** The local to assign to. */\r\n    local: Local,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var type = local.type;\r\n    assert(type != Type.void);\r\n    var flow = this.currentFlow;\r\n    var localIndex = local.index;\r\n\r\n    if (type.is(TypeFlags.NULLABLE)) {\r\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\r\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\r\n    }\r\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\r\n\r\n    if (type.isManaged) {\r\n      let module = this.module;\r\n      let nativeType = type.toNativeType();\r\n\r\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n        if (this.skippedAutoreleases.has(valueExpr)) {\r\n          valueExpr = this.makeSkippedRelease(\r\n            module.local_get(localIndex, nativeType), // oldRef\r\n            valueExpr // newRef\r\n          );\r\n          if (tee) { // TEE(local = __skippedRelease(local, value))\r\n            this.currentType = type;\r\n            return module.local_tee(localIndex, valueExpr);\r\n          } else { // local = __skippedRelease(local, value)\r\n            this.currentType = Type.void;\r\n            return module.local_set(localIndex, valueExpr);\r\n          }\r\n        } else {\r\n          valueExpr = this.makeRetainRelease(\r\n            module.local_get(localIndex, nativeType), // oldRef\r\n            valueExpr // newRef\r\n          );\r\n          if (tee) { // TEE(local = __retainRelease(local, value))\r\n            this.currentType = type;\r\n            return module.local_tee(localIndex, valueExpr);\r\n          } else { // local = __retainRelease(local, value)\r\n            this.currentType = Type.void;\r\n            return module.local_set(localIndex, valueExpr);\r\n          }\r\n        }\r\n      } else {\r\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\r\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\r\n        if (!this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeRetain(valueExpr);\r\n        if (tee) { // TEE(local = __retain(value, local))\r\n          this.currentType = type;\r\n          return module.local_tee(localIndex, valueExpr);\r\n        } else { // local = __retain(value, local)\r\n          this.currentType = Type.void;\r\n          return module.local_set(localIndex, valueExpr);\r\n        }\r\n      }\r\n    } else {\r\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\r\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\r\n      }\r\n      if (tee) { // TEE(local = value)\r\n        this.currentType = type;\r\n        return this.module.local_tee(localIndex, valueExpr);\r\n      } else { // local = value\r\n        this.currentType = Type.void;\r\n        return this.module.local_set(localIndex, valueExpr);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\r\n  private makeGlobalAssignment(\r\n    /** The global to assign to. */\r\n    global: Global,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var type = global.type;\r\n    assert(type != Type.void);\r\n    var nativeType = type.toNativeType();\r\n\r\n    if (type.isManaged) {\r\n      if (this.skippedAutoreleases.has(valueExpr)) {\r\n        if (tee) { // (global = __skippedRelease(global, value)), global\r\n          this.currentType = type;\r\n          return module.block(null, [\r\n            module.global_set(global.internalName,\r\n              this.makeSkippedRelease(\r\n                module.global_get(global.internalName, nativeType), // oldRef\r\n                valueExpr // newRef\r\n              )\r\n            ),\r\n            module.global_get(global.internalName, nativeType)\r\n          ], nativeType);\r\n        } else { // global = __skippedRelease(global, value)\r\n          this.currentType = Type.void;\r\n          return module.global_set(global.internalName,\r\n            this.makeSkippedRelease(\r\n              module.global_get(global.internalName, nativeType), // oldRef\r\n              valueExpr // newRef\r\n            )\r\n          );\r\n        }\r\n      } else {\r\n        if (tee) { // (global = __retainRelease(global, value)), global\r\n          this.currentType = type;\r\n          return module.block(null, [\r\n            module.global_set(global.internalName,\r\n              this.makeRetainRelease(\r\n                module.global_get(global.internalName, nativeType), // oldRef\r\n                valueExpr // newRef\r\n              )\r\n            ),\r\n            module.global_get(global.internalName, nativeType)\r\n          ], nativeType);\r\n        } else { // global = __retainRelease(global, value)\r\n          this.currentType = Type.void;\r\n          return module.global_set(global.internalName,\r\n            this.makeRetainRelease(\r\n              module.global_get(global.internalName, nativeType), // oldRef\r\n              valueExpr // newRef\r\n            )\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\r\n      if (tee) { // (global = value), global\r\n        this.currentType = type;\r\n        return module.block(null, [\r\n          module.global_set(global.internalName, valueExpr),\r\n          module.global_get(global.internalName, nativeType)\r\n        ], nativeType);\r\n      } else { // global = value\r\n        this.currentType = Type.void;\r\n        return module.global_set(global.internalName,\r\n          valueExpr\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\r\n  makeFieldAssignment(\r\n    /** The field to assign to. */\r\n    field: Field,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** The value of `this`. */\r\n    thisExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var fieldType = field.type;\r\n    var nativeFieldType = fieldType.toNativeType();\r\n    assert(field.parent.kind == ElementKind.CLASS);\r\n    var thisType = (<Class>field.parent).type;\r\n    var nativeThisType = thisType.toNativeType();\r\n\r\n    if (fieldType.isManaged && thisType.isManaged) {\r\n      let tempThis = flow.getTempLocal(thisType);\r\n      if (this.skippedAutoreleases.has(valueExpr)) {\r\n        if (tee) { // ((t1 = this).field = __skippedRelease(t1.field, t2 = value)), t2\r\n          let tempValue = flow.getTempLocal(fieldType);\r\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\r\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\r\n          let ret = module.block(null, [\r\n            module.store(fieldType.byteSize,\r\n              module.local_tee(tempThis.index, thisExpr),\r\n              this.makeSkippedRelease(\r\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                  module.local_get(tempThis.index, nativeThisType),\r\n                  nativeFieldType, field.memoryOffset\r\n                ),\r\n                module.local_tee(tempValue.index, valueExpr), // newRef\r\n              ),\r\n              nativeFieldType, field.memoryOffset\r\n            ),\r\n            module.local_get(tempValue.index, nativeFieldType)\r\n          ], nativeFieldType);\r\n          flow.freeTempLocal(tempValue);\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = fieldType;\r\n          return ret;\r\n        } else { // (t1 = this).field = __skippedRelease(t1.field, value)\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = Type.void;\r\n          return module.store(fieldType.byteSize,\r\n            module.local_tee(tempThis.index, thisExpr),\r\n            this.makeSkippedRelease(\r\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                module.local_get(tempThis.index, nativeThisType),\r\n                nativeFieldType, field.memoryOffset\r\n              ),\r\n              valueExpr, // newRef\r\n            ),\r\n            nativeFieldType, field.memoryOffset\r\n          );\r\n        }\r\n      } else {\r\n        if (tee) { // ((t1 = this).field = __retainRelease(t1.field, t2 = value)), t2\r\n          let tempValue = flow.getTempLocal(fieldType);\r\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\r\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\r\n          let ret = module.block(null, [\r\n            module.store(fieldType.byteSize,\r\n              module.local_tee(tempThis.index, thisExpr),\r\n              this.makeRetainRelease(\r\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                  module.local_get(tempThis.index, nativeThisType),\r\n                  nativeFieldType, field.memoryOffset\r\n                ),\r\n                module.local_tee(tempValue.index, valueExpr) // newRef\r\n              ),\r\n              nativeFieldType, field.memoryOffset\r\n            ),\r\n            module.local_get(tempValue.index, nativeFieldType)\r\n          ], nativeFieldType);\r\n          flow.freeTempLocal(tempValue);\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = fieldType;\r\n          return ret;\r\n        } else { // (t1 = this).field = __retainRelease(t1.field, value)\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = Type.void;\r\n          return module.store(fieldType.byteSize,\r\n            module.local_tee(tempThis.index, thisExpr),\r\n            this.makeRetainRelease(\r\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                module.local_get(tempThis.index, nativeThisType),\r\n                nativeFieldType, field.memoryOffset\r\n              ),\r\n              valueExpr // newRef\r\n            ),\r\n            nativeFieldType, field.memoryOffset\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      if (tee) { // (this.field = (t1 = value)), t1\r\n        let tempValue = flow.getTempLocal(fieldType);\r\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\r\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\r\n        let ret = module.block(null, [\r\n          module.store(fieldType.byteSize,\r\n            thisExpr,\r\n            module.local_tee(tempValue.index, valueExpr),\r\n            nativeFieldType, field.memoryOffset\r\n          ),\r\n          module.local_get(tempValue.index, nativeFieldType)\r\n        ], nativeFieldType);\r\n        flow.freeTempLocal(tempValue);\r\n        this.currentType = fieldType;\r\n        return ret;\r\n      } else { // this.field = value\r\n        this.currentType = Type.void;\r\n        return module.store(fieldType.byteSize,\r\n          thisExpr,\r\n          valueExpr,\r\n          nativeFieldType, field.memoryOffset\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Compiles a call expression according to the specified context. */\r\n  compileCallExpression(\r\n    /** Call expression to compile. */\r\n    expression: CallExpression,\r\n    /** Contextual type indicating the return type the caller expects, if any. */\r\n    contextualType: Type,\r\n    /** Constraints indicating contextual conditions. */\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // handle call to super\r\n    if (expression.expression.kind == NodeKind.SUPER) {\r\n      let flow = this.currentFlow;\r\n      let actualFunction = flow.actualFunction;\r\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n        this.error(\r\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n\r\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let baseClassInstance = assert((<Class>classInstance).base);\r\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n\r\n      // {\r\n      //   this = super(this || <ALLOC>, ...args)\r\n      //   this.a = X\r\n      //   this.b = Y\r\n      // }\r\n      let theCall = this.compileCallDirect(\r\n        this.ensureConstructor(baseClassInstance, expression),\r\n        expression.arguments,\r\n        expression,\r\n        module.if(\r\n          module.local_get(thisLocal.index, nativeSizeType),\r\n          module.local_get(thisLocal.index, nativeSizeType),\r\n          this.makeRetain(\r\n            this.makeAllocation(<Class>classInstance)\r\n          )\r\n        ),\r\n        Constraints.WILL_RETAIN\r\n      );\r\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\r\n      let stmts: ExpressionRef[] = [\r\n        module.local_set(thisLocal.index, theCall)\r\n      ];\r\n      this.makeFieldInitialization(<Class>classInstance, stmts);\r\n\r\n      // check that super had been called before accessing `this`\r\n      if (flow.isAny(\r\n        FlowFlags.ALLOCATES |\r\n        FlowFlags.CONDITIONALLY_ALLOCATES\r\n      )) {\r\n        this.error(\r\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\r\n      this.currentType = Type.void;\r\n      return module.block(null, stmts);\r\n    }\r\n\r\n    // otherwise resolve normally\r\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\r\n    if (!target) return module.unreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let thisExpression = this.resolver.currentThisExpression;\r\n        let instance = this.resolver.maybeInferCall(expression, prototype, flow);\r\n        if (!instance) return this.module.unreachable();\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          instance.is(CommonFlags.INSTANCE)\r\n            ? this.compileExpression(assert(thisExpression), this.options.usizeType)\r\n            : 0,\r\n          constraints\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          if ((<Local>target).is(CommonFlags.INLINED)) {\r\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\r\n          } else {\r\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\r\n          }\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\r\n          indexArg = module.load(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, type.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\r\n        break;\r\n      }\r\n\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\r\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\r\n        if (!getterInstance) return module.unreachable();\r\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\r\n        signature = this.currentType.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let getterInstance = assert((<Property>target).getterInstance);\r\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\r\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\r\n        );\r\n        signature = this.currentType.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        break;\r\n      }\r\n\r\n      // not supported\r\n      default: {\r\n        let type = this.resolver.getTypeOfElement(target);\r\n        if (type) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_has_no_call_signatures,\r\n            expression.range, type.toString()\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\r\n            expression.range\r\n          );\r\n        }\r\n        return module.unreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression,\r\n      0,\r\n      contextualType == Type.void\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n\r\n    var typeArguments: Type[] | null = null;\r\n\r\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\r\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\r\n    var typeParameterNodes = prototype.typeParameterNodes;\r\n    var typeArgumentNodes = expression.typeArguments;\r\n    if (expression.typeArguments) {\r\n      if (!prototype.is(CommonFlags.GENERIC)) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          expression.range, prototype.internalName\r\n        );\r\n      }\r\n      typeArguments = this.resolver.resolveTypeArguments(\r\n        assert(typeParameterNodes),\r\n        typeArgumentNodes,\r\n        this.currentFlow.actualFunction.parent,\r\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n\r\n    // now compile the builtin, which usually returns a block of code that replaces the call.\r\n    return compileBuiltinCall(\r\n      this,\r\n      prototype,\r\n      typeArguments,\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Not_implemented,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Checks that an unsafe expression is allowed. */\r\n  private checkUnsafe(reportNode: Node): void {\r\n    // Library files may always use unsafe features\r\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\r\n      this.error(\r\n        DiagnosticCode.Operation_is_unsafe,\r\n        reportNode.range\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    constraints: Constraints = Constraints.NONE\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      this.currentType = signature.returnType;\r\n      return this.module.unreachable();\r\n    }\r\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\r\n\r\n    // Inline if explicitly requested\r\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      if (this.currentInlineFunctions.includes(instance)) {\r\n        this.warning(\r\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\r\n          reportNode.range, instance.internalName\r\n        );\r\n      } else {\r\n        this.currentInlineFunctions.push(instance);\r\n        let parameterTypes = signature.parameterTypes;\r\n        assert(numArguments <= parameterTypes.length);\r\n        // compile argument expressions\r\n        let args = new Array<ExpressionRef>(numArguments);\r\n        for (let i = 0; i < numArguments; ++i) {\r\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\r\n          );\r\n        }\r\n        // make the inlined call (is aware of autoreleases)\r\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\r\n        if (this.currentType.isManaged) {\r\n          if (!(constraints & Constraints.WILL_RETAIN)) {\r\n            expr = this.makeAutorelease(expr, this.currentFlow);\r\n          } else {\r\n            this.skippedAutoreleases.add(expr);\r\n          }\r\n        }\r\n        this.currentInlineFunctions.pop();\r\n        return expr;\r\n      }\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    if (signature.returnType.isManaged) {\r\n      if (constraints & Constraints.WILL_DROP) {\r\n        // Skip autorelease and simply release\r\n        return this.makeCallDirect(instance, operands, reportNode, true);\r\n      } else if (constraints & Constraints.WILL_RETAIN) {\r\n        // Skip autorelease and remember\r\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\r\n        this.skippedAutoreleases.add(expr);\r\n        return expr;\r\n      } else {\r\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\r\n      }\r\n    }\r\n    return this.makeCallDirect(instance, operands, reportNode,\r\n      (constraints & Constraints.WILL_DROP) != 0\r\n    );\r\n  }\r\n\r\n  makeCallInline(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null,\r\n    thisArg: ExpressionRef = 0,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var numArguments = operands ? operands.length : 0;\r\n    var signature = instance.signature;\r\n    var parameterTypes = signature.parameterTypes;\r\n    var numParameters = parameterTypes.length;\r\n\r\n    // Create a new inline flow and use it to compile the function as a block\r\n    var previousFlow = this.currentFlow;\r\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\r\n    var body = [];\r\n    var usedLocals = new Set<i32>();\r\n\r\n    // Prepare compiled arguments right to left, keeping track of used locals.\r\n    for (let i = numArguments - 1; i >= 0; --i) {\r\n      // This is necessary because a later expression must not set an earlier argument local, which\r\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\r\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\r\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\r\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\r\n      let paramExpr = operands![i];\r\n      let paramType = parameterTypes[i];\r\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\r\n      findUsedLocals(paramExpr, usedLocals);\r\n      // inlining is aware of wrap/nonnull states:\r\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\r\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\r\n      // inlining is aware of skipped autoreleases:\r\n      if (paramType.isManaged) {\r\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\r\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\r\n      }\r\n      body.unshift(\r\n        module.local_set(argumentLocal.index, paramExpr)\r\n      );\r\n    }\r\n    if (thisArg) {\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let thisType = assert(instance.signature.thisType);\r\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\r\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\r\n      body.unshift(\r\n        module.local_set(thisLocal.index, thisArg)\r\n      );\r\n      let baseInstance = (<Class>classInstance).base;\r\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\r\n    } else {\r\n      assert(!instance.signature.thisType);\r\n    }\r\n\r\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\r\n    // side-effects within earlier expressions because these already happened on set.\r\n    this.currentFlow = flow;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let initType = parameterTypes[i];\r\n      let initExpr = this.compileExpression(\r\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\r\n        initType,\r\n        Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\r\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\r\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\r\n      if (initType.isManaged) {\r\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\r\n        if (!this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\r\n      }\r\n      body.push(\r\n        module.local_set(argumentLocal.index, initExpr)\r\n      );\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    this.compileFunctionBody(instance, body);\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    if (!flow.is(FlowFlags.TERMINATES)) {\r\n      this.performAutoreleases(flow, body);\r\n      this.finishAutoreleases(flow, body);\r\n    }\r\n    flow.freeScopedLocals();\r\n    var returnType = flow.returnType;\r\n    this.currentFlow = previousFlow;\r\n\r\n    // Create an outer block that we can break to when returning a value out of order\r\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\r\n    var returnType = originalSignature.returnType;\r\n    var thisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(this.program, originalParameterTypes, returnType, thisType);\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\r\n    trampoline = new Function(\r\n      original.name + \"|trampoline\",\r\n      original.prototype,\r\n      trampolineSignature,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFlow = this.currentFlow;\r\n    var flow = trampoline.flow;\r\n    this.currentFlow = flow;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.block(names[0], [\r\n      module.block(\"outOfRange\", [\r\n        module.switch(names, \"outOfRange\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.binary(\r\n                BinaryOp.SubI32,\r\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\r\n                module.i32(minArguments)\r\n              )\r\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\r\n        )\r\n      ]),\r\n      module.unreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      let declaration = originalParameterDeclarations[minArguments + i];\r\n      let initializer = declaration.initializer;\r\n      let initExpr: ExpressionRef;\r\n      if (initializer) {\r\n        initExpr = module.local_set(operandIndex,\r\n          this.compileExpression(\r\n            initializer,\r\n            type,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\r\n          declaration.range\r\n        );\r\n        initExpr = module.unreachable();\r\n      }\r\n      body = module.block(names[i + 1], [\r\n        body,\r\n        initExpr,\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\r\n    }\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var stmts: ExpressionRef[] = [ body ];\r\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\r\n    if (returnType != Type.void) {\r\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\r\n    } else {\r\n      stmts.push(theCall);\r\n      this.performAutoreleases(flow, stmts);\r\n    }\r\n    flow.freeScopedLocals();\r\n    this.currentFlow = previousFlow;\r\n\r\n    var funcRef = module.addFunction(\r\n      trampoline.internalName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        returnType,\r\n        thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.block(null, stmts, returnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        BuiltinSymbols.argc,\r\n        NativeType.I32,\r\n        true,\r\n        module.i32(0)\r\n      );\r\n    }\r\n    return BuiltinSymbols.argc;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.global_set(this.ensureArgcVar(),\r\n          module.local_get(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\r\n    }\r\n    return BuiltinSymbols.setargc;\r\n  }\r\n\r\n  // <reference-counting>\r\n\r\n  /** Makes retain call, retaining the expression's value. */\r\n  makeRetain(expr: ExpressionRef): ExpressionRef {\r\n    var retainInstance = this.program.retainInstance;\r\n    this.compileFunction(retainInstance);\r\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\r\n  }\r\n\r\n  /** Makes a retainRelease call, retaining the new expression's value and releasing the old expression's value, in this order. */\r\n  makeRetainRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\r\n    // if ((t1=newExpr) != (t2=oldExpr)) {\r\n    //   __retain(t1);\r\n    //   __release(t2);\r\n    // }, t1\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var usizeType = this.options.usizeType;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\r\n    var temp2 = flow.getTempLocal(usizeType);\r\n    var ret = module.block(null, [\r\n      module.if(\r\n        module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\r\n          module.local_tee(temp1.index, newExpr),\r\n          module.local_tee(temp2.index, oldExpr)\r\n        ),\r\n        module.block(null, [\r\n          module.drop(\r\n            this.makeRetain(module.local_get(temp1.index, nativeSizeType))\r\n          ),\r\n          this.makeRelease(module.local_get(temp2.index, nativeSizeType))\r\n        ])\r\n      ),\r\n      module.local_get(temp1.index, nativeSizeType)\r\n    ], nativeSizeType);\r\n    flow.freeTempLocal(temp2);\r\n    flow.freeTempLocal(temp1);\r\n    return ret;\r\n  }\r\n\r\n  /** Makes a skippedRelease call, ignoring the new expression's value and releasing the old expression's value, in this order. */\r\n  makeSkippedRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\r\n    // TODO: this helper can be eliminated altogether if the current logic holds\r\n    // (t1=newExpr), __release(oldExpr), t1\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var usizeType = this.options.usizeType;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var temp = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\r\n    var ret = module.block(null, [\r\n      module.local_set(temp.index, newExpr),\r\n      this.makeRelease(oldExpr),\r\n      module.local_get(temp.index, nativeSizeType)\r\n    ], nativeSizeType);\r\n    flow.freeTempLocal(temp);\r\n    return ret;\r\n  }\r\n\r\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\r\n  makeRelease(expr: ExpressionRef): ExpressionRef {\r\n    var releaseInstance = this.program.releaseInstance;\r\n    this.compileFunction(releaseInstance);\r\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\r\n  }\r\n\r\n  /** Makes an automatic release call at the end of the current flow. */\r\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\r\n    // FIXME: loses track of nonNull state?\r\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\r\n  }\r\n\r\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\r\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\r\n    // NOTE: Can't remove the local.tee completely because it's already compiled\r\n    // and a child of something else. Preventing the final release however should\r\n    // make it optimize away.\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\r\n        if (isLocalTee(expr)) {\r\n          let index = getLocalSetIndex(expr);\r\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\r\n            // Assumes that the expression actually belongs to the flow and that\r\n            // top-level autoreleases are never undone. While that's true, it's\r\n            // not necessary to check presence in scopedLocals.\r\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\r\n            return index;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\r\n        if (getBlockName(expr) === null) { // must not be a break target\r\n          let count = getBlockChildCount(expr);\r\n          if (count) {\r\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Attemps to move a final autorelease from one flow to a parent.\r\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\r\n   * retain would have been written already.\r\n   */\r\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\r\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\r\n    // eliminate the now unnecessary temporary local.tee because it is already part of\r\n    // another expression in the tree. But optimizing should collapse locals again.\r\n    var index = this.undoAutorelease(expr, fromInnerFlow);\r\n    return ~index\r\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\r\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\r\n  }\r\n\r\n  /** Performs any queued autoreleases in the specified flow. */\r\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\r\n    var scopedLocals = flow.scopedLocals;\r\n    if (scopedLocals) {\r\n      let module = this.module;\r\n      for (let local of scopedLocals.values()) {\r\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          let localIndex = local.index;\r\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\r\n            stmts.push(\r\n              this.makeRelease(\r\n                module.local_get(localIndex, local.type.toNativeType())\r\n              )\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\r\n  performAutoreleasesWithValue(\r\n    flow: Flow,\r\n    valueExpr: ExpressionRef,\r\n    valueType: Type,\r\n    stmts: ExpressionRef[] | null = null,\r\n    clearFlags: bool = true\r\n  ): ExpressionRef {\r\n    if (!stmts) stmts = new Array<ExpressionRef>();\r\n    stmts.push(\r\n      this.module.nop()\r\n    );\r\n    var lengthBefore = stmts.length;\r\n    this.performAutoreleases(flow, stmts, clearFlags);\r\n    if (stmts.length > lengthBefore) {\r\n      let nativeType = valueType.toNativeType();\r\n      let temp = flow.getTempLocal(valueType);\r\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\r\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\r\n      let module = this.module;\r\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\r\n      stmts.push(\r\n        module.local_get(temp.index, nativeType) // append get\r\n      );\r\n      let ret = module.block(null, stmts, nativeType);\r\n      flow.freeTempLocal(temp);\r\n      return ret;\r\n    } else if (stmts.length > 1) {\r\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\r\n      return this.module.block(null, stmts, valueType.toNativeType());\r\n    }\r\n    return valueExpr;\r\n  }\r\n\r\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\r\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\r\n    var module = this.module;\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      // traverse to the top-most flow containing the inlined function's\r\n      // locals as scoped locals and release these instead.\r\n      let parent: Flow | null;\r\n      while (parent = flow.parent) flow = parent;\r\n      this.performAutoreleases(flow, stmts, false);\r\n    } else {\r\n      for (let local of flow.parentFunction.localsByIndex) {\r\n        let localIndex = local.index;\r\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\r\n          stmts.push(\r\n            this.makeRelease(\r\n              module.local_get(localIndex, local.type.toNativeType())\r\n            )\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // </reference-counting>\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null,\r\n    reportNode: Node,\r\n    immediatelyDropped: bool = false,\r\n    /** Skip the usual autorelease and manage this at the callsite instead. */\r\n    skipAutorelease: bool = false\r\n  ): ExpressionRef {\r\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      if (this.currentInlineFunctions.includes(instance)) {\r\n        this.warning(\r\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\r\n          reportNode.range, instance.internalName\r\n        );\r\n      } else {\r\n        this.currentInlineFunctions.push(instance);\r\n        let expr: ExpressionRef;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          let theOperands = assert(operands);\r\n          assert(theOperands.length);\r\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\r\n        } else {\r\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\r\n        }\r\n        if (this.currentType.isManaged) {\r\n          if (!skipAutorelease) {\r\n            expr = this.makeAutorelease(expr, this.currentFlow);\r\n          } else {\r\n            this.skippedAutoreleases.add(expr);\r\n          }\r\n        }\r\n        this.currentInlineFunctions.pop();\r\n        return expr;\r\n      }\r\n    }\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.unreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\r\n      assert(parameterNodes.length == parameterTypes.length);\r\n      let allOptionalsAreConstant = true;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        let initializer = parameterNodes[i].initializer;\r\n        if (initializer) {\r\n          if (nodeIsConstantValue(initializer.kind)) {\r\n            operands.push(this.compileExpression(\r\n              <Expression>parameterNodes[i].initializer,\r\n              parameterTypes[i],\r\n              Constraints.CONV_IMPLICIT\r\n            ));\r\n            continue;\r\n          }\r\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i]);\r\n          if (resolved) {\r\n            if (resolved.kind == ElementKind.GLOBAL) {\r\n              let global = <Global>resolved;\r\n              if (this.compileGlobal(global)) {\r\n                if (global.is(CommonFlags.INLINED)) {\r\n                  operands.push(\r\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\r\n                  );\r\n                } else {\r\n                  operands.push(\r\n                    this.convertExpression(\r\n                      module.global_get(global.internalName, global.type.toNativeType()),\r\n                      global.type, parameterTypes[i], false, false, initializer\r\n                    )\r\n                  );\r\n                }\r\n                continue;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n        allOptionalsAreConstant = false;\r\n      }\r\n      if (!allOptionalsAreConstant) {\r\n        if (!isCallImport) {\r\n          let original = instance;\r\n          instance = this.ensureTrampoline(instance);\r\n          if (!this.compileFunction(instance)) return module.unreachable();\r\n          instance.flow.flags = original.flow.flags;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\r\n          this.currentType = returnType;\r\n          if (returnType.isManaged) {\r\n            if (immediatelyDropped) {\r\n              expr = this.makeRelease(expr);\r\n              this.currentType = Type.void;\r\n            } else if (!skipAutorelease) {\r\n              expr = this.makeAutorelease(expr);\r\n            } else {\r\n              this.skippedAutoreleases.add(expr);\r\n            }\r\n          }\r\n          return module.block(null, [\r\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\r\n            expr\r\n          ], this.currentType.toNativeType());\r\n        }\r\n      }\r\n    }\r\n\r\n    // If the return value is of a reference type it has not yet been released but is in flight\r\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\r\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\r\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      } else if (!skipAutorelease) {\r\n        expr = this.makeAutorelease(expr);\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.unreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      } else {\r\n        expr = this.makeAutorelease(expr);\r\n      }\r\n    }\r\n    return module.block(null, [\r\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\r\n        module.i32(numArguments)\r\n      ),\r\n      expr\r\n    ], this.currentType.toNativeType()); // not necessarily wrapped\r\n  }\r\n\r\n  compileCommaExpression(\r\n    expression: CommaExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\r\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\r\n      );\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\r\n    return this.module.block(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(\r\n    expression: ElementAccessExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var targetExpression = expression.expression;\r\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\r\n    if (targetType) {\r\n      if (targetType.is(TypeFlags.REFERENCE)) {\r\n        let classReference = targetType.classReference;\r\n        if (classReference) {\r\n          let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\r\n          if (indexedGet) {\r\n            let thisArg = this.compileExpression(targetExpression, classReference.type,\r\n              Constraints.CONV_IMPLICIT\r\n            );\r\n            return this.compileCallDirect(indexedGet, [\r\n              expression.elementExpression\r\n            ], expression, thisArg, constraints);\r\n          }\r\n        }\r\n      }\r\n      this.error(\r\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n        expression.expression.range, targetType.toString()\r\n      );\r\n    }\r\n    return module.unreachable();\r\n  }\r\n\r\n  compileFunctionExpression(\r\n    expression: FunctionExpression,\r\n    contextualSignature: Signature | null,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\r\n    assert(!declaration.typeParameters); // function expression cannot be generic\r\n    var flow = this.currentFlow;\r\n    var actualFunction = flow.actualFunction;\r\n    var prototype = new FunctionPrototype(\r\n      declaration.name.text.length\r\n        ? declaration.name.text\r\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\r\n      actualFunction,\r\n      declaration,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var instance: Function | null;\r\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\r\n\r\n    // compile according to context. this differs from a normal function in that omitted parameter\r\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\r\n    if (contextualSignature) {\r\n      let signatureNode = prototype.functionTypeNode;\r\n      let parameterNodes = signatureNode.parameters;\r\n      let numPresentParameters = parameterNodes.length;\r\n\r\n      // must not require more than the maximum number of parameters\r\n      let parameterTypes = contextualSignature.parameterTypes;\r\n      let numParameters = parameterTypes.length;\r\n      if (numPresentParameters > numParameters) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          expression.range, numParameters.toString(), numPresentParameters.toString()\r\n        );\r\n        return this.module.unreachable();\r\n      }\r\n\r\n      // check non-omitted parameter types\r\n      let parameterNames = new Array<string>(numPresentParameters);\r\n      for (let i = 0; i < numPresentParameters; ++i) {\r\n        let parameterNode = parameterNodes[i];\r\n        parameterNames[i] = parameterNode.name.text; // use actual name\r\n        if (!isTypeOmitted(parameterNode.type)) {\r\n          let resolvedType = this.resolver.resolveType(\r\n            parameterNode.type,\r\n            actualFunction.parent,\r\n            contextualTypeArguments\r\n          );\r\n          if (!resolvedType) return this.module.unreachable();\r\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\r\n            );\r\n            return this.module.unreachable();\r\n          }\r\n        }\r\n        // any unused parameters are inherited but ignored\r\n      }\r\n\r\n      // check non-omitted return type\r\n      let returnType = contextualSignature.returnType;\r\n      if (!isTypeOmitted(signatureNode.returnType)) {\r\n        let resolvedType = this.resolver.resolveType(\r\n          signatureNode.returnType,\r\n          actualFunction.parent,\r\n          contextualTypeArguments\r\n        );\r\n        if (!resolvedType) return this.module.unreachable();\r\n        if (\r\n          returnType == Type.void\r\n            ? resolvedType != Type.void\r\n            : !resolvedType.isStrictlyAssignableTo(returnType)\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n      }\r\n\r\n      // check explicit this type\r\n      let thisType = contextualSignature.thisType;\r\n      let thisTypeNode = signatureNode.explicitThisType;\r\n      if (thisTypeNode) {\r\n        if (!thisType) {\r\n          this.error(\r\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n            thisTypeNode.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        let resolvedType = this.resolver.resolveType(\r\n          thisTypeNode,\r\n          actualFunction.parent,\r\n          contextualTypeArguments\r\n        );\r\n        if (!resolvedType) return this.module.unreachable();\r\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n      }\r\n\r\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\r\n      signature.requiredParameters = numParameters; // !\r\n      signature.parameterNames = parameterNames;\r\n      instance = new Function(\r\n        prototype.name,\r\n        prototype,\r\n        signature,\r\n        contextualTypeArguments\r\n      );\r\n      if (!this.compileFunction(instance)) return this.module.unreachable();\r\n      this.currentType = contextualSignature.type;\r\n\r\n    // otherwise compile like a normal function\r\n    } else {\r\n      instance = this.compileFunctionUsingTypeArguments(\r\n        prototype,\r\n        [],\r\n        contextualTypeArguments\r\n      );\r\n      if (!instance) return this.module.unreachable();\r\n      this.currentType = instance.signature.type;\r\n    }\r\n\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.unreachable()\r\n      : this.module.i32(index);\r\n  }\r\n\r\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\r\n  private maybeCompileEnclosingSource(expression: Expression): void {\r\n    var internalPath = expression.range.source.internalPath;\r\n    var filesByName = this.program.filesByName;\r\n    assert(filesByName.has(internalPath));\r\n    var enclosingFile = filesByName.get(internalPath)!;\r\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\r\n      this.compileFileByPath(internalPath, expression);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var actualFunction = flow.actualFunction;\r\n\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (contextualType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = contextualType.classReference;\r\n          if (classReference) {\r\n            this.currentType = classReference.type.asNullable();\r\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\r\n          }\r\n          let signatureReference = contextualType.signatureReference;\r\n          if (signatureReference) {\r\n            this.currentType = signatureReference.type.asNullable();\r\n            return module.i32(0);\r\n          }\r\n          // TODO: anyref context yields <usize>0\r\n        }\r\n        this.currentType = options.usizeType;\r\n        return options.isWasm64\r\n          ? module.i64(0)\r\n          : module.i32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.i32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.i32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // {\r\n              //   if (!this) this = <ALLOC>\r\n              //   this.a = X\r\n              //   this.b = Y\r\n              //   return this\r\n              // }\r\n              let stmts: ExpressionRef[] = [\r\n                module.if(\r\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                    module.local_get(thisLocal.index, nativeSizeType)\r\n                  ),\r\n                  module.local_set(thisLocal.index,\r\n                    this.makeRetain(\r\n                      this.makeAllocation(<Class>classInstance)\r\n                    )\r\n                  )\r\n                )\r\n              ];\r\n              this.makeFieldInitialization(<Class>classInstance, stmts);\r\n              stmts.push(\r\n                module.local_get(thisLocal.index, nativeSizeType)\r\n              );\r\n              this.currentType = thisLocal.type;\r\n              return module.block(null, stmts, nativeSizeType);\r\n            }\r\n          }\r\n          // if not a constructor, `this` type can differ\r\n          let thisType = assert(actualFunction.signature.thisType);\r\n          this.currentType = thisType;\r\n          return module.local_get(thisLocal.index, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.unreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let flow = this.currentFlow;\r\n        let actualFunction = flow.actualFunction;\r\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\r\n            // TS1034 in the parser effectively limits this to property accesses\r\n            this.error(\r\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\r\n              expression.range\r\n            );\r\n          }\r\n        }\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.local_get(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let baseClassInstance = (<Class>classInstance).base;\r\n          if (baseClassInstance) {\r\n            let superType = baseClassInstance.type;\r\n            this.currentType = superType;\r\n            return module.local_get(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.unreachable();\r\n      }\r\n    }\r\n\r\n    this.maybeCompileEnclosingSource(expression);\r\n\r\n    // otherwise resolve\r\n    var target = this.resolver.lookupIdentifierExpression( // reports\r\n      expression,\r\n      flow,\r\n      this.currentParent || actualFunction\r\n    );\r\n    if (!target) return module.unreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let type = (<Local>target).type;\r\n        assert(type != Type.void);\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\r\n        }\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\r\n          type = type.nonNullableType;\r\n        }\r\n        this.currentType = type;\r\n        return this.module.local_get(localIndex, type.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.unreachable();\r\n        }\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\r\n        }\r\n        this.currentType = type;\r\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.unreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\r\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\r\n        }\r\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = this.resolver.resolveFunction(\r\n          <FunctionPrototype>target,\r\n          null,\r\n          makeMap<string,Type>(flow.contextualTypeArguments)\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.i32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Not_implemented,\r\n      expression.range\r\n    );\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  compileInstanceOfExpression(\r\n    expression: InstanceOfExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\r\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\r\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\r\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\r\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\r\n    var actualType = this.currentType;\r\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\r\n    this.currentType = Type.bool;\r\n    if (!expectedType) return module.unreachable();\r\n\r\n    // instanceof <basic> - must be exact\r\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\r\n      return module.block(null, [\r\n        module.drop(expr),\r\n        module.i32(actualType == expectedType ? 1 : 0)\r\n      ], NativeType.I32);\r\n    }\r\n\r\n    // <basic> instanceof <reference> - always false\r\n    if (!actualType.is(TypeFlags.REFERENCE)) {\r\n      return module.block(null, [\r\n        module.drop(expr),\r\n        module.i32(0)\r\n      ], NativeType.I32);\r\n    }\r\n\r\n    // both LHS and RHS are references now\r\n    var nativeSizeType = actualType.toNativeType();\r\n\r\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\r\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\r\n\r\n      // downcast - check statically\r\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\r\n        return module.binary(\r\n          nativeSizeType == NativeType.I64\r\n            ? BinaryOp.NeI64\r\n            : BinaryOp.NeI32,\r\n          expr,\r\n          actualType.toNativeZero(module)\r\n        );\r\n      }\r\n\r\n      // upcast - check dynamically\r\n      if (expectedType.isAssignableTo(actualType)) {\r\n        let program = this.program;\r\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\r\n          let flow = this.currentFlow;\r\n          let temp = flow.getTempLocal(actualType);\r\n          let instanceofInstance = assert(program.instanceofInstance);\r\n          this.compileFunction(instanceofInstance);\r\n          let ret = module.if(\r\n            module.unary(\r\n              nativeSizeType == NativeType.I64\r\n                ? UnaryOp.EqzI64\r\n                : UnaryOp.EqzI32,\r\n              module.local_tee(temp.index, expr),\r\n            ),\r\n            module.i32(0),\r\n            this.makeCallDirect(instanceofInstance, [\r\n              module.local_get(temp.index, nativeSizeType),\r\n              module.i32(expectedType.classReference!.id)\r\n            ], expression)\r\n          );\r\n          flow.freeTempLocal(temp);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\r\n          );\r\n        }\r\n      }\r\n\r\n    // either none or both nullable\r\n    } else {\r\n\r\n      // downcast - check statically\r\n      if (actualType.isAssignableTo(expectedType)) {\r\n        return module.block(null, [\r\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\r\n          module.i32(1)\r\n        ], NativeType.I32);\r\n\r\n      // upcast - check dynamically\r\n      } else if (expectedType.isAssignableTo(actualType)) {\r\n        let program = this.program;\r\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\r\n          // FIXME: the temp local and the if can be removed here once flows\r\n          // perform null checking, which would error earlier when checking\r\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\r\n          let flow = this.currentFlow;\r\n          let temp = flow.getTempLocal(actualType);\r\n          let instanceofInstance = assert(program.instanceofInstance);\r\n          this.compileFunction(instanceofInstance);\r\n          let ret = module.if(\r\n            module.unary(\r\n              nativeSizeType == NativeType.I64\r\n                ? UnaryOp.EqzI64\r\n                : UnaryOp.EqzI32,\r\n              module.local_tee(temp.index, expr),\r\n            ),\r\n            module.i32(0),\r\n            this.makeCallDirect(instanceofInstance, [\r\n              module.local_get(temp.index, nativeSizeType),\r\n              module.i32(expectedType.classReference!.id)\r\n            ], expression)\r\n          );\r\n          flow.freeTempLocal(temp);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // false\r\n    return module.block(null, [\r\n      module.drop(expr),\r\n      module.i32(0)\r\n    ], NativeType.I32);\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints,\r\n    implicitlyNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitlyNegate);\r\n        let classType = contextualType.classReference;\r\n        if (classType) {\r\n          if (classType.prototype == this.program.arrayPrototype) {\r\n            return this.compileArrayLiteral(\r\n              assert(classType.typeArguments)[0],\r\n              (<ArrayLiteralExpression>expression).elementExpressions,\r\n              constraints,\r\n              expression\r\n            );\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\r\n          expression.range, \"T\"\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitlyNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.f32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.f64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitlyNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\r\n        this.currentType = type;\r\n        switch (type.kind) {\r\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\r\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\r\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\r\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\r\n          default: return module.i32(i64_low(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitlyNegate);\r\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\r\n      }\r\n      case LiteralKind.OBJECT: {\r\n        assert(!implicitlyNegate);\r\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\r\n      }\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Not_implemented,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.unreachable();\r\n  }\r\n\r\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\r\n    return this.ensureStaticString(expression.value);\r\n  }\r\n\r\n  compileArrayLiteral(\r\n    elementType: Type,\r\n    expressions: (Expression | null)[],\r\n    constraints: Constraints,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var program = this.program;\r\n    var arrayPrototype = assert(program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\r\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\r\n    var arrayType = arrayInstance.type;\r\n    var flow = this.currentFlow;\r\n\r\n    // block those here so compiling expressions doesn't conflict\r\n    var tempThis = flow.getTempLocal(arrayType);\r\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\r\n\r\n    // compile value expressions and find out whether all are constant\r\n    var length = expressions.length;\r\n    var values = new Array<ExpressionRef>(length);\r\n    var isStatic = true;\r\n    var nativeElementType = elementType.toNativeType();\r\n    for (let i = 0; i < length; ++i) {\r\n      let expression = expressions[i];\r\n      let expr = expression\r\n        ? module.precomputeExpression(\r\n            this.compileExpression(<Expression>expression, elementType,\r\n              Constraints.CONV_IMPLICIT\r\n            )\r\n          )\r\n        : elementType.toNativeZero(module);\r\n      if (getExpressionId(expr) == ExpressionId.Const) {\r\n        assert(getExpressionType(expr) == nativeElementType);\r\n      } else {\r\n        isStatic = false;\r\n      }\r\n      values[i] = expr;\r\n    }\r\n\r\n    // if the array is static, make a static arraybuffer segment\r\n    if (isStatic) {\r\n      flow.freeTempLocal(tempThis);\r\n      flow.freeTempLocal(tempDataStart);\r\n\r\n      let runtimeHeaderSize = program.runtimeHeaderSize;\r\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\r\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\r\n\r\n      // make both the buffer and array header static if assigned to a global. this can't be done\r\n      // if inside of a function because each invocation must create a new array reference then.\r\n      if (constraints & Constraints.PREFER_STATIC) {\r\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\r\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\r\n        this.currentType = arrayType;\r\n        return program.options.isWasm64\r\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\r\n          : this.module.i32(i64_low(arrayAddress));\r\n\r\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\r\n      } else {\r\n        // makeArray(length, alignLog2, classId, staticBuffer)\r\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\r\n          module.i32(length),\r\n          program.options.isWasm64\r\n            ? module.i64(elementType.alignLog2)\r\n            : module.i32(elementType.alignLog2),\r\n          module.i32(arrayInstance.id),\r\n          program.options.isWasm64\r\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\r\n            : module.i32(i64_low(bufferAddress))\r\n        ], reportNode);\r\n        this.currentType = arrayType;\r\n        return this.makeAutorelease(this.makeRetain(expr));\r\n      }\r\n    }\r\n\r\n    // otherwise compile an explicit instantiation with indexed sets\r\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\r\n    if (!setter) {\r\n      flow.freeTempLocal(tempThis);\r\n      flow.freeTempLocal(tempDataStart);\r\n      this.error(\r\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n        reportNode.range, arrayInstance.internalName\r\n      );\r\n      this.currentType = arrayType;\r\n      return module.unreachable();\r\n    }\r\n    var nativeArrayType = arrayType.toNativeType();\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\r\n    stmts.push(\r\n      module.local_set(tempThis.index,\r\n        this.makeCallDirect(program.allocArrayInstance, [\r\n          module.i32(length),\r\n          program.options.isWasm64\r\n            ? module.i64(elementType.alignLog2)\r\n            : module.i32(elementType.alignLog2),\r\n          module.i32(arrayInstance.id),\r\n          program.options.isWasm64\r\n            ? module.i64(0)\r\n            : module.i32(0)\r\n        ], reportNode),\r\n      )\r\n    );\r\n    // tempData = tempThis.dataStart\r\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\r\n    assert(dataStart.kind == ElementKind.FIELD);\r\n    stmts.push(\r\n      module.local_set(tempDataStart.index,\r\n        module.load(arrayType.byteSize, false,\r\n          module.local_get(tempThis.index, nativeArrayType),\r\n          nativeArrayType,\r\n          (<Field>dataStart).memoryOffset\r\n        )\r\n      )\r\n    );\r\n    var isManaged = elementType.isManaged;\r\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\r\n      let valueExpr = values[i];\r\n      if (isManaged) {\r\n        // value = __retain(value)\r\n        valueExpr = this.makeRetain(valueExpr);\r\n      }\r\n      // store<T>(tempData, value, immOffset)\r\n      stmts.push(\r\n        module.store(elementType.byteSize,\r\n          module.local_get(tempDataStart.index, nativeArrayType),\r\n          valueExpr,\r\n          nativeElementType,\r\n          i << alignLog2\r\n        )\r\n      );\r\n    }\r\n    // -> tempThis\r\n    stmts.push(\r\n      module.local_get(tempThis.index, nativeArrayType)\r\n    );\r\n    flow.freeTempLocal(tempThis);\r\n    flow.freeTempLocal(tempDataStart);\r\n    this.currentType = arrayType;\r\n    return module.block(null, stmts, nativeArrayType);\r\n  }\r\n\r\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // contextual type must be a class\r\n    var classReference = contextualType.classReference;\r\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, \"<object>\", contextualType.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n\r\n    // if present, check that the constructor is compatible with object literals\r\n    var ctor = classReference.constructorInstance;\r\n    if (ctor) {\r\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\r\n      // object literal and use them to call the ctor while not generating a store.\r\n      if (ctor.signature.requiredParameters) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PRIVATE)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PROTECTED)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n    }\r\n\r\n    // check and compile field values\r\n    var names = expression.names;\r\n    var numNames = names.length;\r\n    var values = expression.values;\r\n    var members = classReference.members;\r\n    var hasErrors = false;\r\n    var exprs = new Array<ExpressionRef>(numNames + 2);\r\n    var flow = this.currentFlow;\r\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\r\n    assert(numNames == values.length);\r\n    for (let i = 0, k = numNames; i < k; ++i) {\r\n      let member = members ? members.get(names[i].text) : null;\r\n      if (!member || member.kind != ElementKind.FIELD) {\r\n        this.error(\r\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n          names[i].range, names[i].text, classReference.toString()\r\n        );\r\n        hasErrors = true;\r\n        continue;\r\n      }\r\n      let type = (<Field>member).type;\r\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\r\n        type.byteSize,\r\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\r\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\r\n        type.toNativeType(),\r\n        (<Field>member).memoryOffset\r\n      );\r\n    }\r\n    this.currentType = classReference.type.nonNullableType;\r\n    if (hasErrors) return module.unreachable();\r\n\r\n    // allocate a new instance first and assign 'this' to the temp. local\r\n    exprs[0] = module.local_set(\r\n      tempLocal.index,\r\n      this.makeRetain(\r\n        this.makeAllocation(classReference)\r\n      )\r\n    );\r\n\r\n    // once all field values have been set, return 'this'\r\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\r\n\r\n    this.currentType = classReference.type;\r\n    return module.block(null, exprs, this.options.nativeSizeType);\r\n  }\r\n\r\n  compileNewExpression(\r\n    expression: NewExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.resolver.lookupExpression( // reports\r\n      expression.expression,\r\n      flow\r\n    );\r\n    if (!target) return module.unreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.This_expression_is_not_constructable,\r\n        expression.expression.range\r\n      );\r\n      return this.module.unreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance: Class | null = null;\r\n    var typeArguments = expression.typeArguments;\r\n    var classReference: Class | null;\r\n    if (\r\n      !typeArguments &&\r\n      (classReference = contextualType.classReference) !== null &&\r\n      classReference.is(CommonFlags.GENERIC)\r\n    ) {\r\n      classInstance = this.resolver.resolveClass(\r\n        classPrototype,\r\n        classReference.typeArguments,\r\n        makeMap<string,Type>(flow.contextualTypeArguments)\r\n      );\r\n    } else {\r\n      classInstance = this.resolver.resolveClassInclTypeArguments(\r\n        classPrototype,\r\n        typeArguments,\r\n        flow.actualFunction.parent, // relative to caller\r\n        makeMap<string,Type>(flow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n    if (!classInstance) return module.unreachable();\r\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\r\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\r\n  }\r\n\r\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\r\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\r\n    var instance = classInstance.constructorInstance;\r\n    if (instance) {\r\n      // do not attempt to compile it if inlined anyway\r\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\r\n      return instance;\r\n    }\r\n\r\n    // clone base constructor if a derived class\r\n    var baseClass = classInstance.base;\r\n    if (baseClass) {\r\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\r\n      instance = new Function(\r\n        CommonSymbols.constructor,\r\n        new FunctionPrototype(\r\n          CommonSymbols.constructor,\r\n          classInstance,\r\n          // declaration is important, i.e. to access optional parameter initializers\r\n          (<FunctionDeclaration>baseCtor.declaration).clone()\r\n        ),\r\n        baseCtor.signature,\r\n        null\r\n      );\r\n\r\n    // otherwise make a default constructor\r\n    } else {\r\n      instance = new Function(\r\n        CommonSymbols.constructor,\r\n        new FunctionPrototype(\r\n          CommonSymbols.constructor,\r\n          classInstance,\r\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\r\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\r\n          )\r\n        ),\r\n        new Signature(this.program, null, classInstance.type, classInstance.type),\r\n        null\r\n      );\r\n    }\r\n\r\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\r\n    instance.set(CommonFlags.COMPILED);\r\n    instance.prototype.setResolvedInstance(\"\", instance);\r\n    classInstance.constructorInstance = instance;\r\n    var previousFlow = this.currentFlow;\r\n    var flow = instance.flow;\r\n    this.currentFlow = flow;\r\n\r\n    // generate body\r\n    var signature = instance.signature;\r\n    var module = this.module;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var stmts = new Array<ExpressionRef>();\r\n\r\n    // {\r\n    //   if (!this) this = <ALLOC>\r\n    //   IF_DERIVED: this = super(this, ...args)\r\n    //   this.a = X\r\n    //   this.b = Y\r\n    //   return this\r\n    // }\r\n    var allocExpr = this.makeAllocation(classInstance);\r\n    if (classInstance.type.isManaged) allocExpr = this.makeRetain(allocExpr);\r\n    stmts.push(\r\n      module.if(\r\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n          module.local_get(0, nativeSizeType)\r\n        ),\r\n        module.local_set(0, allocExpr)\r\n      )\r\n    );\r\n    if (baseClass) {\r\n      let parameterTypes = signature.parameterTypes;\r\n      let numParameters = parameterTypes.length;\r\n      let operands = new Array<ExpressionRef>(1 + numParameters);\r\n      operands[0] = module.local_get(0, nativeSizeType);\r\n      for (let i = 0; i < numParameters; ++i) {\r\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\r\n      }\r\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\r\n      stmts.push(\r\n        module.local_set(0,\r\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\r\n        )\r\n      );\r\n    }\r\n    this.makeFieldInitialization(classInstance, stmts);\r\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\r\n    flow.freeScopedLocals();\r\n    this.currentFlow = previousFlow;\r\n\r\n    // make the function\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var locals = instance.localsByIndex;\r\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\r\n    var numOperands = 1 + signature.parameterTypes.length;\r\n    var numLocals = locals.length;\r\n    if (numLocals > numOperands) {\r\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\r\n    }\r\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\r\n    instance.finalize(module, funcRef);\r\n    return instance;\r\n  }\r\n\r\n  compileInstantiate(\r\n    /** Class to instantiate. */\r\n    classInstance: Class,\r\n    /** Constructor arguments. */\r\n    argumentExpressions: Expression[],\r\n    /** Contextual flags. */\r\n    constraints: Constraints,\r\n    /** Node to report on. */\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var ctor = this.ensureConstructor(classInstance, reportNode);\r\n    if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\r\n    var expr = this.compileCallDirect( // no need for another autoreleased local\r\n      ctor,\r\n      argumentExpressions,\r\n      reportNode,\r\n      this.options.usizeType.toNativeZero(this.module),\r\n      constraints\r\n    );\r\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\r\n      this.currentType = classInstance.type; // important because a super ctor could be called\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    expression: PropertyAccessExpression,\r\n    ctxType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    this.maybeCompileEnclosingSource(expression);\r\n\r\n    var resolver = this.resolver;\r\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\r\n    if (!target) return module.unreachable();\r\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static field\r\n        if (!this.compileGlobal(<Global>target)) return module.unreachable(); // reports\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, ctxType, constraints);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>theEnum)) {\r\n          this.currentType = Type.i32;\r\n          return this.module.unreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\r\n          return this.compileInlineConstant(<EnumValue>target, ctxType, constraints);\r\n        }\r\n        assert((<EnumValue>target).type == Type.i32);\r\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\r\n        this.currentType = (<Field>target).type;\r\n        return module.load(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\r\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\r\n        if (getterPrototype) {\r\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\r\n          if (getter) return this.compileCallDirect(getter, [], expression, 0);\r\n        }\r\n        return module.unreachable();\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let getterInstance = assert((<Property>target).getterInstance);\r\n        return this.compileCallDirect(getterInstance, [], expression,\r\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\r\n        );\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n\r\n        if (prototype.is(CommonFlags.STATIC)) {\r\n          let instance = this.compileFunctionUsingTypeArguments(\r\n            prototype,\r\n            [],\r\n            makeMap<string,Type>(),\r\n            expression,\r\n          );\r\n          if (instance == null) {\r\n            return module.unreachable();\r\n          } else {\r\n            this.currentType = instance.type;\r\n            return module.i32(this.ensureFunctionTableEntry(instance));\r\n          }\r\n        }\r\n\r\n        this.error(\r\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\r\n          expression.range, prototype.name\r\n        );\r\n        return module.unreachable();\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Not_implemented,\r\n      expression.range\r\n    );\r\n    return module.unreachable();\r\n  }\r\n\r\n  compileTernaryExpression(\r\n    expression: TernaryExpression,\r\n    ctxType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    var condExpr = this.module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpression(expression.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Try to eliminate unnecesssary branches if the condition is constant\r\n    // FIXME: skips common denominator, inconsistently picking left type\r\n    if (\r\n      getExpressionId(condExpr) == ExpressionId.Const &&\r\n      getExpressionType(condExpr) == NativeType.I32\r\n    ) {\r\n      return getConstValueI32(condExpr)\r\n        ? this.compileExpression(ifThen, ctxType)\r\n        : this.compileExpression(ifElse, ctxType);\r\n    }\r\n\r\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\r\n\r\n    var ifThenFlow = outerFlow.fork();\r\n    this.currentFlow = ifThenFlow;\r\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\r\n    var ifThenType = this.currentType;\r\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\r\n\r\n    var ifElseFlow = outerFlow.fork();\r\n    this.currentFlow = ifElseFlow;\r\n    var ifElseExpr = this.compileExpression(ifElse, ctxType, inheritedConstraints);\r\n    var ifElseType = this.currentType;\r\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\r\n\r\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\r\n      );\r\n      this.currentType = ctxType;\r\n      return this.module.unreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(\r\n      ifThenExpr,\r\n      ifThenType, commonType,\r\n      false, false,\r\n      ifThen\r\n    );\r\n    ifElseExpr = this.convertExpression(\r\n      ifElseExpr,\r\n      ifElseType, commonType,\r\n      false, false,\r\n      ifElse\r\n    );\r\n    this.currentType = commonType;\r\n\r\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\r\n      if (!IfThenAutoreleaseSkipped) {\r\n        ifThenExpr = this.makeRetain(ifThenExpr);\r\n        IfThenAutoreleaseSkipped = true;\r\n      } else {\r\n        ifElseExpr = this.makeRetain(ifElseExpr);\r\n        ifElseAutoreleaseSkipped = true;\r\n      }\r\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\r\n      // if (!(constraints & Constraints.WILL_RETAIN)) {\r\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\r\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\r\n      // }\r\n    }\r\n\r\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\r\n    ifThenFlow.freeScopedLocals();\r\n\r\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\r\n    ifElseFlow.freeScopedLocals();\r\n\r\n    this.currentFlow = outerFlow;\r\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\r\n\r\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\r\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\r\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n    return expr;\r\n  }\r\n\r\n  compileUnaryPostfixExpression(\r\n    expression: UnaryPostfixExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType.exceptVoid,\r\n      Constraints.NONE\r\n    );\r\n\r\n    // shortcut if compiling the getter already failed\r\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\r\n\r\n    // if the value isn't dropped, a temp. local is required to remember the original value,\r\n    // except if a static overload is found, which reverses the use of a temp. (see below)\r\n    var tempLocal: Local | null = null;\r\n    if (contextualType != Type.void) {\r\n      tempLocal = flow.getTempLocal(this.currentType);\r\n      getValue = module.local_tee(\r\n        tempLocal.index,\r\n        getValue\r\n      );\r\n    }\r\n\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\r\n            if (overload) {\r\n              let isInstance = overload.is(CommonFlags.INSTANCE);\r\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\r\n                getValue = getLocalSetValue(getValue);\r\n                flow.freeTempLocal(tempLocal);\r\n                tempLocal = null;\r\n              }\r\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n              if (isInstance) break;\r\n              return expr; // here\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"++\", this.currentType.toString()\r\n          );\r\n          if (tempLocal) flow.freeTempLocal(tempLocal);\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(\r\n              BinaryOp.AddI32,\r\n              getValue,\r\n              module.i32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            expr = module.binary(\r\n              options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              getValue,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(\r\n              BinaryOp.AddI64,\r\n              getValue,\r\n              module.i64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(\r\n              BinaryOp.AddF32,\r\n              getValue,\r\n              module.f32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(\r\n              BinaryOp.AddF64,\r\n              getValue,\r\n              module.f64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"++\", this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\r\n            if (overload) {\r\n              let isInstance = overload.is(CommonFlags.INSTANCE);\r\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\r\n                getValue = getLocalSetValue(getValue);\r\n                flow.freeTempLocal(tempLocal);\r\n                tempLocal = null;\r\n              }\r\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n              if (overload.is(CommonFlags.INSTANCE)) break;\r\n              return expr; // here\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"--\", this.currentType.toString()\r\n          );\r\n          if (tempLocal) flow.freeTempLocal(tempLocal);\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(\r\n              BinaryOp.SubI32,\r\n              getValue,\r\n              module.i32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            expr = module.binary(\r\n              options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              getValue,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(\r\n              BinaryOp.SubI64,\r\n              getValue,\r\n              module.i64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(\r\n              BinaryOp.SubF32,\r\n              getValue,\r\n              module.f32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(\r\n              BinaryOp.SubF64,\r\n              getValue,\r\n              module.f64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"--\", this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.unreachable();\r\n      }\r\n    }\r\n\r\n    var resolver = this.resolver;\r\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\r\n    if (!target) {\r\n      if (tempLocal) flow.freeTempLocal(tempLocal);\r\n      return module.unreachable();\r\n    }\r\n\r\n    // simplify if dropped anyway\r\n    if (!tempLocal) {\r\n      return this.makeAssignment(\r\n        target,\r\n        expr,\r\n        expression.operand,\r\n        resolver.currentThisExpression,\r\n        resolver.currentElementExpression,\r\n        false\r\n      );\r\n    }\r\n\r\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\r\n    var setValue = this.makeAssignment(\r\n      target,\r\n      expr, // includes a tee of getValue to tempLocal\r\n      expression.operand,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      false\r\n    );\r\n\r\n    this.currentType = tempLocal.type;\r\n    flow.freeTempLocal(tempLocal);\r\n    var nativeType = tempLocal.type.toNativeType();\r\n\r\n    return module.block(null, [\r\n      setValue,\r\n      module.local_get(tempLocal.index, nativeType)\r\n    ], nativeType); // result of 'x++' / 'x--' might overflow\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\r\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"+\", this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        // nop\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\r\n          // compileExpression normally does this:\r\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n          break;\r\n        }\r\n\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\r\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"-\", this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              this.currentType.toNativeZero(module),\r\n              expr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.unary(UnaryOp.NegF32, expr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.unary(UnaryOp.NegF64, expr);\r\n            break;\r\n          }\r\n          default: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"-\", this.currentType.toString()\r\n            );\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\r\n              return expr; // skip re-assign\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"++\", this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"++\", this.currentType.toString()\r\n            );\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\r\n              return expr; // skip re-assign\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"--\", this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"--\", this.currentType.toString()\r\n            );\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\r\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n          }\r\n          // allow '!' for references even without an overload\r\n        }\r\n\r\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType));\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\r\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"~\", this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        } else {\r\n          expr = this.convertExpression(expr,\r\n            this.currentType, this.currentType.intType,\r\n            false, false,\r\n            expression.operand\r\n          );\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              this.currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\r\n            break;\r\n          }\r\n          default: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"~\", this.currentType.toString()\r\n            );\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        return this.compileTypeof(expression, contextualType, constraints);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.unreachable();\r\n      }\r\n    }\r\n    if (!compound) return expr;\r\n    var resolver = this.resolver;\r\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\r\n    if (!target) return module.unreachable();\r\n    return this.makeAssignment(\r\n      target,\r\n      expr,\r\n      expression.operand,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileTypeof(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var operand = expression.operand;\r\n    var expr: ExpressionRef = 0;\r\n    var stringInstance = this.program.stringInstance;\r\n    var typeString: string;\r\n    if (operand.kind == NodeKind.NULL) {\r\n      typeString = \"object\"; // special since `null` without type context is usize\r\n    } else {\r\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\r\n      if (!element) {\r\n        switch (operand.kind) {\r\n          case NodeKind.PROPERTYACCESS:\r\n          case NodeKind.ELEMENTACCESS: {\r\n            operand = operand.kind == NodeKind.PROPERTYACCESS\r\n              ? (<PropertyAccessExpression>operand).expression\r\n              : (<ElementAccessExpression>operand).expression;\r\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\r\n            if (!targetType) {\r\n              this.currentType = stringInstance.type;\r\n              return this.module.unreachable();\r\n            }\r\n            expr = this.compileExpression(operand, Type.auto); // might have side-effects\r\n            break;\r\n          }\r\n          case NodeKind.IDENTIFIER: break; // ignore error\r\n          default: expr = this.compileExpression(operand, Type.auto); // trigger error\r\n        }\r\n        typeString = \"undefined\";\r\n      } else {\r\n        switch (element.kind) {\r\n          case ElementKind.CLASS_PROTOTYPE:\r\n          case ElementKind.NAMESPACE:\r\n          case ElementKind.ENUM: {\r\n            typeString = \"object\";\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            typeString = \"function\";\r\n            break;\r\n          }\r\n          default: {\r\n            expr = this.compileExpression(operand, Type.auto);\r\n            let type = this.currentType;\r\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\r\n            if (type.is(TypeFlags.REFERENCE)) {\r\n              let signatureReference = type.signatureReference;\r\n              if (signatureReference) {\r\n                typeString = \"function\";\r\n              } else {\r\n                let classReference = type.classReference;\r\n                if (classReference) {\r\n                  if (classReference.prototype === stringInstance.prototype) {\r\n                    typeString = \"string\";\r\n                  } else {\r\n                    typeString = \"object\";\r\n                  }\r\n                } else {\r\n                  typeString = \"anyref\"; // TODO?\r\n                }\r\n              }\r\n            } else if (type == Type.bool) {\r\n              typeString = \"boolean\";\r\n            } else if (type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER)) {\r\n              typeString = \"number\";\r\n            } else {\r\n              typeString = \"undefined\"; // failed to compile?\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.currentType = stringInstance.type;\r\n    return expr\r\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\r\n      : this.ensureStaticString(typeString);\r\n  }\r\n\r\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\r\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    switch (type.kind) {\r\n      case TypeKind.I8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\r\n            : module.binary(BinaryOp.ShrI32,\r\n                module.binary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.i32(24)\r\n                ),\r\n                module.i32(24)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.I16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\r\n            : module.binary(BinaryOp.ShrI32,\r\n                module.binary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.i32(16)\r\n                ),\r\n                module.i32(16)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.binary(BinaryOp.AndI32,\r\n            expr,\r\n            module.i32(0xff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.binary(BinaryOp.AndI32,\r\n            expr,\r\n            module.i32(0xffff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.BOOL: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          // bool is special in that it compares to 0 instead of masking with 0x1\r\n          expr = module.binary(BinaryOp.NeI32,\r\n            expr,\r\n            module.i32(0)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\r\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\r\n    var parentFunction = this.currentFlow.parentFunction;\r\n    var source = range.source;\r\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n    range.debugInfoRef = expr;\r\n    parentFunction.debugLocations.push(range);\r\n  }\r\n\r\n  // === Specialized code generation ==============================================================\r\n\r\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\r\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.BOOL: // not a mask, just != 0\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return expr;\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\r\n      }\r\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\r\n      case TypeKind.ISIZE: {\r\n        return type.size == 64\r\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\r\n          : expr;\r\n      }\r\n      case TypeKind.F32: {\r\n        // (x != 0.0) & (x == x)\r\n        let flow = this.currentFlow;\r\n        let temp = flow.getTempLocal(Type.f32);\r\n        let ret = module.binary(BinaryOp.AndI32,\r\n          module.binary(BinaryOp.NeF32, module.local_tee(temp.index, expr), module.f32(0)),\r\n          module.binary(BinaryOp.EqF32,\r\n            module.local_get(temp.index, NativeType.F32),\r\n            module.local_get(temp.index, NativeType.F32)\r\n          )\r\n        );\r\n        flow.freeTempLocal(temp);\r\n        return ret;\r\n      }\r\n      case TypeKind.F64: {\r\n        // (x != 0.0) & (x == x)\r\n        let flow = this.currentFlow;\r\n        let temp = flow.getTempLocal(Type.f64);\r\n        let ret = module.binary(BinaryOp.AndI32,\r\n          module.binary(BinaryOp.NeF64, module.local_tee(temp.index, expr), module.f64(0)),\r\n          module.binary(BinaryOp.EqF64,\r\n            module.local_get(temp.index, NativeType.F64),\r\n            module.local_get(temp.index, NativeType.F64)\r\n          )\r\n        );\r\n        flow.freeTempLocal(temp);\r\n        return ret;\r\n      }\r\n      // case TypeKind.ANYREF: {\r\n      //   TODO: !ref.is_null\r\n      // }\r\n      default: {\r\n        assert(false);\r\n        return module.i32(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\r\n  makeAllocation(\r\n    classInstance: Class\r\n  ): ExpressionRef {\r\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\r\n    var program = this.program;\r\n    assert(classInstance.program == program);\r\n    var module = this.module;\r\n    var options = this.options;\r\n    this.currentType = classInstance.type;\r\n    var allocInstance = program.allocInstance;\r\n    this.compileFunction(allocInstance);\r\n    return module.call(allocInstance.internalName, [\r\n      options.isWasm64\r\n        ? module.i64(classInstance.currentMemoryOffset)\r\n        : module.i32(classInstance.currentMemoryOffset),\r\n      module.i32(\r\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\r\n          ? 0\r\n          : classInstance.id\r\n      )\r\n    ], options.nativeSizeType);\r\n  }\r\n\r\n  /** Makes the initializers for a class's fields. */\r\n  makeFieldInitialization(\r\n    classInstance: Class,\r\n    stmts: ExpressionRef[] = []\r\n  ): ExpressionRef[] {\r\n    var members = classInstance.members;\r\n    if (!members) return [];\r\n\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\r\n    var thisLocalIndex = isInline\r\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\r\n      : 0;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n\r\n    for (let member of members.values()) {\r\n      if (\r\n        member.kind != ElementKind.FIELD || // not a field\r\n        member.parent != classInstance      // inherited field\r\n      ) continue;\r\n\r\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\r\n      let fieldType = field.type;\r\n      let nativeFieldType = fieldType.toNativeType();\r\n      let fieldPrototype = field.prototype;\r\n      let initializerNode = fieldPrototype.initializerNode;\r\n      let parameterIndex = fieldPrototype.parameterIndex;\r\n      let initExpr: ExpressionRef;\r\n      if (initializerNode) { // use initializer\r\n        initExpr = this.compileExpression(initializerNode, fieldType, // reports\r\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\r\n        );\r\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\r\n          initExpr = this.makeRetain(initExpr);\r\n        }\r\n      } else if (parameterIndex >= 0) { // initialized via parameter (here: a local)\r\n        initExpr = module.local_get(\r\n          isInline\r\n            ? assert(flow.lookupLocal(field.name)).index\r\n            : 1 + parameterIndex, // this is local 0\r\n          nativeFieldType\r\n        );\r\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr);\r\n      } else { // initialize with zero\r\n        initExpr = fieldType.toNativeZero(module);\r\n      }\r\n      stmts.push(\r\n        module.store(fieldType.byteSize,\r\n          module.local_get(thisLocalIndex, nativeSizeType),\r\n          initExpr,\r\n          nativeFieldType,\r\n          field.memoryOffset\r\n        )\r\n      );\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  makeInstanceOfClass(\r\n    expr: ExpressionRef,\r\n    classInstance: Class\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var idTemp = flow.getTempLocal(Type.i32);\r\n    var idExpr = module.load(4, false,\r\n      module.binary(BinaryOp.SubI32,\r\n        expr,\r\n        module.i32(this.program.runtimeHeaderSize)\r\n      ),\r\n      NativeType.I32\r\n    );\r\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\r\n    var conditions: ExpressionRef[] = [];\r\n    conditions.push(\r\n      module.drop( // br_if returns the value too\r\n        module.br(label,\r\n          module.binary(BinaryOp.EqI32, // classId == class.id\r\n            module.local_tee(idTemp.index, idExpr),\r\n            module.i32(classInstance.id)\r\n          ),\r\n          module.i32(1) // ? true\r\n        )\r\n      )\r\n    );\r\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\r\n    // TODO: simplify if there are none\r\n    conditions.push(\r\n      module.i32(0) // : false\r\n    );\r\n    flow.freeTempLocal(idTemp);\r\n    flow.popBreakLabel();\r\n    return module.block(label, conditions, NativeType.I32);\r\n  }\r\n\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleImportName(\r\n  element: Element,\r\n  declaration: DeclarationStatement\r\n): void {\r\n  // by default, use the file name as the module name\r\n  mangleImportName_moduleName = declaration.range.source.simplePath;\r\n  // and the internal name of the element within that file as the element name\r\n  mangleImportName_elementName = mangleInternalName(\r\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\r\n  );\r\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\r\n\r\n  var program = element.program;\r\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\r\n  var args = decorator.arguments;\r\n  if (args && args.length) {\r\n    let arg = args[0];\r\n    // if one argument is given, override just the element name\r\n    // if two arguments are given, override both module and element name\r\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n      if (args.length >= 2) {\r\n        arg = args[1];\r\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n          mangleImportName_moduleName = mangleImportName_elementName;\r\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n          if (args.length > 2) {\r\n            program.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"2\", args.length.toString()\r\n            );\r\n          }\r\n        } else {\r\n          program.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            arg.range\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      program.error(\r\n        DiagnosticCode.String_literal_expected,\r\n        arg.range\r\n      );\r\n    }\r\n  } else {\r\n    program.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      decorator.range, \"1\", \"0\"\r\n    );\r\n  }\r\n}\r\n\r\nvar mangleImportName_moduleName: string;\r\nvar mangleImportName_elementName: string;\r\n\r\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\r\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\r\n  var length = stmts.length;\r\n  if (length == 0) return module.nop(); // usually filtered out again\r\n  if (length == 1) {\r\n    let single = stmts[0];\r\n    if (getExpressionType(single) == type) return single;\r\n    if (getExpressionId(single) == ExpressionId.Block) {\r\n      let count = getBlockChildCount(single);\r\n      let children = new Array<ExpressionRef>(count);\r\n      for (let i = 0; i < count; ++i) children[i] = getBlockChild(single, i);\r\n      return module.block(getBlockName(single), children, type);\r\n    }\r\n  }\r\n  return module.block(null, stmts,\r\n    type == NativeType.Auto\r\n      ? getExpressionType(stmts[length - 1])\r\n      : type\r\n  );\r\n}\r\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\n import {\r\n  Compiler,\r\n  Constraints,\r\n  RuntimeFeatures,\r\n  flatten\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression,\r\n  CallExpression,\r\n  isNumericLiteral\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  AtomicRMWOp,\r\n  SIMDExtractOp,\r\n  SIMDReplaceOp,\r\n  SIMDShiftOp,\r\n  SIMDTernaryOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI64High,\r\n  getConstValueI64Low,\r\n  getConstValueI32,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  Relooper,\r\n  RelooperBlockRef,\r\n  SIMDLoadOp,\r\n  getLocalGetIndex,\r\n  hasSideEffects\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  FunctionPrototype,\r\n  Field,\r\n  Global,\r\n  DecoratorFlags,\r\n  Element\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  LocalFlags\r\n} from \"./flow\";\r\n\r\nimport {\r\n  ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  Feature,\r\n  featureToString,\r\n  TypeinfoFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeF32,\r\n  writeF64,\r\n  isPowerOf2\r\n} from \"./util\";\r\n\r\n/** Symbols of various compiler built-ins. */\r\nexport namespace BuiltinSymbols {\r\n  // std/builtins.ts\r\n  export const isInteger = \"~lib/builtins/isInteger\";\r\n  export const isFloat = \"~lib/builtins/isFloat\";\r\n  export const isBoolean = \"~lib/builtins/isBoolean\";\r\n  export const isSigned = \"~lib/builtins/isSigned\";\r\n  export const isReference = \"~lib/builtins/isReference\";\r\n  export const isString = \"~lib/builtins/isString\";\r\n  export const isArray = \"~lib/builtins/isArray\";\r\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\r\n  export const isFunction = \"~lib/builtins/isFunction\";\r\n  export const isNullable = \"~lib/builtins/isNullable\";\r\n  export const isDefined = \"~lib/builtins/isDefined\";\r\n  export const isConstant = \"~lib/builtins/isConstant\";\r\n  export const isManaged = \"~lib/builtins/isManaged\";\r\n  export const isVoid = \"~lib/builtins/isVoid\";\r\n\r\n  export const clz = \"~lib/builtins/clz\";\r\n  export const ctz = \"~lib/builtins/ctz\";\r\n  export const popcnt = \"~lib/builtins/popcnt\";\r\n  export const rotl = \"~lib/builtins/rotl\";\r\n  export const rotr = \"~lib/builtins/rotr\";\r\n  export const abs = \"~lib/builtins/abs\";\r\n  export const max = \"~lib/builtins/max\";\r\n  export const min = \"~lib/builtins/min\";\r\n  export const ceil = \"~lib/builtins/ceil\";\r\n  export const floor = \"~lib/builtins/floor\";\r\n  export const copysign = \"~lib/builtins/copysign\";\r\n  export const nearest = \"~lib/builtins/nearest\";\r\n  export const reinterpret = \"~lib/builtins/reinterpret\";\r\n  export const sqrt = \"~lib/builtins/sqrt\";\r\n  export const trunc = \"~lib/builtins/trunc\";\r\n  export const load = \"~lib/builtins/load\";\r\n  export const store = \"~lib/builtins/store\";\r\n  export const atomic_load = \"~lib/builtins/atomic.load\";\r\n  export const atomic_store = \"~lib/builtins/atomic.store\";\r\n  export const atomic_add = \"~lib/builtins/atomic.add\";\r\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\r\n  export const atomic_and = \"~lib/builtins/atomic.and\";\r\n  export const atomic_or = \"~lib/builtins/atomic.or\";\r\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\r\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\r\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\r\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\r\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\r\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\r\n\r\n  export const sizeof = \"~lib/builtins/sizeof\";\r\n  export const alignof = \"~lib/builtins/alignof\";\r\n  export const offsetof = \"~lib/builtins/offsetof\";\r\n  export const nameof = \"~lib/builtins/nameof\";\r\n  export const lengthof = \"~lib/builtins/lengthof\";\r\n  export const select = \"~lib/builtins/select\";\r\n  export const unreachable = \"~lib/builtins/unreachable\";\r\n  export const changetype = \"~lib/builtins/changetype\";\r\n  export const assert = \"~lib/builtins/assert\";\r\n  export const unchecked = \"~lib/builtins/unchecked\";\r\n  export const call_direct = \"~lib/builtins/call_direct\";\r\n  export const call_indirect = \"~lib/builtins/call_indirect\";\r\n  export const instantiate = \"~lib/builtins/instantiate\";\r\n  export const idof = \"~lib/builtins/idof\";\r\n\r\n  export const i8 = \"~lib/builtins/i8\";\r\n  export const i16 = \"~lib/builtins/i16\";\r\n  export const i32 = \"~lib/builtins/i32\";\r\n  export const i64 = \"~lib/builtins/i64\";\r\n  export const isize = \"~lib/builtins/isize\";\r\n  export const u8 = \"~lib/builtins/u8\";\r\n  export const u16 = \"~lib/builtins/u16\";\r\n  export const u32 = \"~lib/builtins/u32\";\r\n  export const u64 = \"~lib/builtins/u64\";\r\n  export const usize = \"~lib/builtins/usize\";\r\n  export const bool = \"~lib/builtins/bool\";\r\n  export const f32 = \"~lib/builtins/f32\";\r\n  export const f64 = \"~lib/builtins/f64\";\r\n  export const v128 = \"~lib/builtins/v128\";\r\n  export const void_ = \"~lib/builtins/void\";\r\n\r\n  export const i32_clz = \"~lib/builtins/i32.clz\";\r\n  export const i64_clz = \"~lib/builtins/i64.clz\";\r\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\r\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\r\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\r\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\r\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\r\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\r\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\r\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\r\n\r\n  export const f32_abs = \"~lib/builtins/f32.abs\";\r\n  export const f64_abs = \"~lib/builtins/f64.abs\";\r\n  export const f32_max = \"~lib/builtins/f32.max\";\r\n  export const f64_max = \"~lib/builtins/f64.max\";\r\n  export const f32_min = \"~lib/builtins/f32.min\";\r\n  export const f64_min = \"~lib/builtins/f64.min\";\r\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\r\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\r\n  export const f32_floor = \"~lib/builtins/f32.floor\";\r\n  export const f64_floor = \"~lib/builtins/f64.floor\";\r\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\r\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\r\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\r\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\r\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\r\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\r\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\r\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\r\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\r\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\r\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\r\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\r\n\r\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\r\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\r\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\r\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\r\n  export const i32_load = \"~lib/builtins/i32.load\";\r\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\r\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\r\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\r\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\r\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\r\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\r\n  export const i64_load = \"~lib/builtins/i64.load\";\r\n  export const f32_load = \"~lib/builtins/f32.load\";\r\n  export const f64_load = \"~lib/builtins/f64.load\";\r\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\r\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\r\n  export const i32_store = \"~lib/builtins/i32.store\";\r\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\r\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\r\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\r\n  export const i64_store = \"~lib/builtins/i64.store\";\r\n  export const f32_store = \"~lib/builtins/f32.store\";\r\n  export const f64_store = \"~lib/builtins/f64.store\";\r\n\r\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\r\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\r\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\r\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\r\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\r\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\r\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\r\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\r\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\r\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\r\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\r\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\r\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\r\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\r\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\r\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\r\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\r\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\r\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\r\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\r\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\r\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\r\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\r\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\r\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\r\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\r\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\r\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\r\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\r\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\r\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\r\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\r\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\r\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\r\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\r\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\r\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\r\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\r\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\r\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\r\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\r\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\r\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\r\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\r\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\r\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\r\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\r\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\r\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\r\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\r\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\r\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\r\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\r\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\r\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\r\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\r\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\r\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\r\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\r\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\r\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\r\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\r\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\r\n  export const i32_wait = \"~lib/builtins/i32.wait\";\r\n  export const i64_wait = \"~lib/builtins/i64.wait\";\r\n\r\n  export const v128_splat = \"~lib/builtins/v128.splat\";\r\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\r\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\r\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\r\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\r\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\r\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\r\n  export const v128_load = \"~lib/builtins/v128.load\";\r\n  export const v128_store = \"~lib/builtins/v128.store\";\r\n  export const v128_add = \"~lib/builtins/v128.add\";\r\n  export const v128_sub = \"~lib/builtins/v128.sub\";\r\n  export const v128_mul = \"~lib/builtins/v128.mul\";\r\n  export const v128_div = \"~lib/builtins/v128.div\";\r\n  export const v128_neg = \"~lib/builtins/v128.neg\";\r\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\r\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\r\n  export const v128_shl = \"~lib/builtins/v128.shl\";\r\n  export const v128_shr = \"~lib/builtins/v128.shr\";\r\n  export const v128_and = \"~lib/builtins/v128.and\";\r\n  export const v128_or = \"~lib/builtins/v128.or\";\r\n  export const v128_xor = \"~lib/builtins/v128.xor\";\r\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\r\n  export const v128_not = \"~lib/builtins/v128.not\";\r\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\r\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\r\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\r\n  export const v128_min = \"~lib/builtins/v128.min\";\r\n  export const v128_max = \"~lib/builtins/v128.max\";\r\n  export const v128_abs = \"~lib/builtins/v128.abs\";\r\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\r\n  export const v128_eq = \"~lib/builtins/v128.eq\";\r\n  export const v128_ne = \"~lib/builtins/v128.ne\";\r\n  export const v128_lt = \"~lib/builtins/v128.lt\";\r\n  export const v128_le = \"~lib/builtins/v128.le\";\r\n  export const v128_gt = \"~lib/builtins/v128.gt\";\r\n  export const v128_ge = \"~lib/builtins/v128.ge\";\r\n  export const v128_convert = \"~lib/builtins/v128.convert\";\r\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\r\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\r\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\r\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\r\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\r\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\r\n\r\n  export const i8x16 = \"~lib/builtins/i8x16\";\r\n  export const i16x8 = \"~lib/builtins/i16x8\";\r\n  export const i32x4 = \"~lib/builtins/i32x4\";\r\n  export const i64x2 = \"~lib/builtins/i64x2\";\r\n  export const f32x4 = \"~lib/builtins/f32x4\";\r\n  export const f64x2 = \"~lib/builtins/f64x2\";\r\n\r\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\r\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\r\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\r\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\r\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\r\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\r\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\r\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\r\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\r\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\r\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\r\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\r\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\r\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\r\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\r\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\r\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\r\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\r\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\r\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\r\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\r\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\r\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\r\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\r\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\r\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\r\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\r\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\r\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\r\n\r\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\r\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\r\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\r\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\r\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\r\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\r\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\r\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\r\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\r\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\r\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\r\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\r\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\r\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\r\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\r\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\r\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\r\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\r\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\r\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\r\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\r\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\r\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\r\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\r\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\r\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\r\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\r\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\r\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\r\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\r\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\r\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\r\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\r\n  export const i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\r\n  export const i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\r\n\r\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\r\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\r\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\r\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\r\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\r\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\r\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\r\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\r\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\r\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\r\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\r\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\r\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\r\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\r\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\r\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\r\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\r\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\r\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\r\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\r\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\r\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\r\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\r\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\r\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\r\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\r\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\r\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\r\n  export const i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\r\n  export const i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\r\n\r\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\r\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\r\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\r\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\r\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\r\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\r\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\r\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\r\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\r\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\r\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\r\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\r\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\r\n  export const i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\r\n  export const i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\r\n\r\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\r\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\r\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\r\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\r\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\r\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\r\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\r\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\r\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\r\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\r\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\r\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\r\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\r\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\r\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\r\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\r\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\r\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\r\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\r\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\r\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\r\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\r\n\r\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\r\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\r\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\r\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\r\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\r\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\r\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\r\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\r\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\r\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\r\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\r\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\r\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\r\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\r\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\r\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\r\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\r\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\r\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\r\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\r\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\r\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\r\n\r\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\r\n  export const v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\r\n  export const v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\r\n  export const v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\r\n  export const v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\r\n  export const v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\r\n\r\n  // internals\r\n  export const heap_base = \"~lib/heap/__heap_base\";\r\n  export const rtti_base = \"~lib/rt/__rtti_base\";\r\n  export const visit_globals = \"~lib/rt/__visit_globals\";\r\n  export const visit_members = \"~lib/rt/__visit_members\";\r\n\r\n  // std/number.ts\r\n  export const isNaN = \"~lib/number/isNaN\";\r\n  export const isFinite = \"~lib/number/isFinite\";\r\n\r\n  // std/diagnostics.ts\r\n  export const ERROR = \"~lib/diagnostics/ERROR\";\r\n  export const WARNING = \"~lib/diagnostics/WARNING\";\r\n  export const INFO = \"~lib/diagnostics/INFO\";\r\n\r\n  // std/memory.ts\r\n  export const memory_size = \"~lib/memory/memory.size\";\r\n  export const memory_grow = \"~lib/memory/memory.grow\";\r\n  export const memory_copy = \"~lib/memory/memory.copy\";\r\n  export const memory_fill = \"~lib/memory/memory.fill\";\r\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\r\n  export const memory_free = \"~lib/memory/memory.free\";\r\n  export const memory_reset = \"~lib/memory/memory.reset\";\r\n\r\n  // std/runtime.ts\r\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\r\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\r\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\r\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\r\n  export const runtime_register = \"~lib/util/runtime/register\";\r\n  export const runtime_discard = \"~lib/util/runtime/discard\";\r\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\r\n\r\n  // std/typedarray.ts\r\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\r\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\r\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\r\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\r\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\r\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\r\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\r\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\r\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\r\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\r\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\r\n\r\n  // compiler generated\r\n  export const started = \"~lib/started\";\r\n  export const argc = \"~lib/argc\";\r\n  export const setargc = \"~lib/setargc\";\r\n  export const capabilities = \"~lib/capabilities\";\r\n}\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  /* Compiler reference. */\r\n  compiler: Compiler,\r\n  /** Respective function prototype. */\r\n  prototype: FunctionPrototype,\r\n  /** Pre-resolved type arguments. */\r\n  typeArguments: Type[] | null,\r\n  /** Operand expressions. */\r\n  operands: Expression[],\r\n  /** Contextual type. */\r\n  contextualType: Type,\r\n  /** Respective call expression. */\r\n  reportNode: CallExpression,\r\n  /** Indicates that contextual type is ASM type. */\r\n  isAsm: bool = false\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // === Static type evaluation =================================================================\r\n\r\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type == Type.bool\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.SIGNED)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        let classReference = type.classReference;\r\n        if (classReference) {\r\n          let stringInstance = compiler.program.stringInstance;\r\n          if (stringInstance && classReference.isAssignableTo(stringInstance)) return module.i32(1);\r\n        }\r\n      }\r\n      return module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        let classReference = type.classReference;\r\n        if (classReference) {\r\n          return module.i32(classReference.prototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\r\n        }\r\n      }\r\n      return module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        let classReference = type.classReference;\r\n        if (classReference) {\r\n          return module.i32(classReference.isArrayLike ? 1 : 0);\r\n        }\r\n      }\r\n      return module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.signatureReference ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let element = compiler.resolver.lookupExpression(\r\n        operands[0],\r\n        compiler.currentFlow,\r\n        Type.auto,\r\n        ReportMode.SWALLOW\r\n      );\r\n      return module.i32(element ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let expr = compiler.compileExpression(operands[0], Type.auto);\r\n      compiler.currentType = Type.bool;\r\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isManaged: { // isManaged<T!>() -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.isManaged ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isVoid: { // isVoid<T!>() -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.lengthof: { // lengthof<T!>() -> i32\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.i32;\r\n      if (!type) return module.unreachable();\r\n      let signatureReference = type.signatureReference;\r\n      if (!signatureReference) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_has_no_call_signatures,\r\n          reportNode.range, type.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return module.i32(signatureReference.parameterTypes.length);\r\n    }\r\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let byteSize = type.byteSize;\r\n      if (!byteSize) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n          reportNode.typeArgumentsRange, \"sizeof\", type.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.i32(byteSize);\r\n        }\r\n        return module.i64(byteSize, 0);\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.i64(byteSize, 0);\r\n        }\r\n        return module.i32(byteSize);\r\n      }\r\n    }\r\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let byteSize = type.byteSize;\r\n      if (!isPowerOf2(byteSize)) { // implies == 0\r\n        compiler.error(\r\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n          reportNode.typeArgumentsRange, \"alignof\", type.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let alignLog2 = ctz<i32>(byteSize);\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.i32(alignLog2);\r\n        }\r\n        return module.i64(alignLog2, 0);\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.i64(alignLog2, 0);\r\n        }\r\n        return module.i32(alignLog2);\r\n      }\r\n    }\r\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let classType = type.classReference;\r\n      if (!(type.is(TypeFlags.REFERENCE) && classType !== null)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n          reportNode.typeArgumentsRange, \"offsetof\", type.toString()\r\n        );\r\n        if (compiler.options.isWasm64) {\r\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n            compiler.currentType = Type.u32;\r\n          }\r\n        } else {\r\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n            compiler.currentType = Type.u64;\r\n          }\r\n        }\r\n        return module.unreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.i32(offset);\r\n        }\r\n        return module.i64(offset);\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.i64(offset);\r\n        }\r\n        return module.i32(offset);\r\n      }\r\n    }\r\n    case BuiltinSymbols.nameof: {\r\n      let resultType = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      if (!resultType) {\r\n        compiler.currentType = compiler.program.stringInstance.type;\r\n        return module.unreachable();\r\n      }\r\n      let value: string;\r\n      if (resultType.is(TypeFlags.REFERENCE)) {\r\n        let classReference = resultType.classReference;\r\n        if (classReference) {\r\n          value = classReference.name;\r\n        } else {\r\n          let signatureReference = resultType.signatureReference;\r\n          if (signatureReference) {\r\n            value = \"Function\";\r\n          } else {\r\n            value = \"Anyref\";\r\n          }\r\n        }\r\n      } else {\r\n        switch (resultType.kind) {\r\n          case TypeKind.BOOL: { value = \"bool\"; break; }\r\n          case TypeKind.I8: { value = \"i8\"; break; }\r\n          case TypeKind.U8: { value = \"u8\"; break; }\r\n          case TypeKind.I16: { value = \"i16\"; break; }\r\n          case TypeKind.U16: { value = \"u16\"; break; }\r\n          case TypeKind.I32: { value = \"i32\"; break; }\r\n          case TypeKind.U32: { value = \"u32\"; break; }\r\n          case TypeKind.F32: { value = \"f32\"; break; }\r\n          case TypeKind.I64: { value = \"i64\"; break; }\r\n          case TypeKind.U64: { value = \"u64\"; break; }\r\n          case TypeKind.F64: { value = \"f64\"; break; }\r\n          case TypeKind.ISIZE: { value = \"isize\"; break; }\r\n          case TypeKind.USIZE: { value = \"usize\"; break; }\r\n          case TypeKind.V128: { value = \"v128\"; break; }\r\n          case TypeKind.ANYREF: { value = \"anyref\"; break; }\r\n          default: assert(false);\r\n          case TypeKind.VOID: { value = \"void\"; break; }\r\n        }\r\n      }\r\n      return compiler.ensureStaticString(value);\r\n    }\r\n\r\n    // === Math ===================================================================================\r\n\r\n    case BuiltinSymbols.clz: { // clz<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.BOOL: // not wrapped\r\n          case TypeKind.I8:\r\n          case TypeKind.U8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            return module.unary(\r\n              compiler.options.isWasm64\r\n                ? UnaryOp.ClzI64\r\n                : UnaryOp.ClzI32,\r\n              arg0\r\n            );\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"clz\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.ctz: { // ctz<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.BOOL: // not wrapped\r\n          case TypeKind.I8:\r\n          case TypeKind.U8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            return module.unary(\r\n              compiler.options.isWasm64\r\n                ? UnaryOp.CtzI64\r\n                : UnaryOp.CtzI32,\r\n              arg0\r\n            );\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"ctz\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.popcnt: { // popcnt<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (compiler.currentType.kind) {\r\n          case TypeKind.BOOL: // not wrapped\r\n          case TypeKind.I8:\r\n          case TypeKind.U8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            return module.unary(\r\n              compiler.options.isWasm64\r\n                ? UnaryOp.PopcntI64\r\n                : UnaryOp.PopcntI32,\r\n              arg0\r\n            );\r\n          }\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"popcnt\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            return compiler.ensureSmallIntegerWrap(\r\n              module.binary(BinaryOp.RotlI32, arg0, arg1),\r\n              type\r\n            );\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            return module.binary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.RotlI64\r\n                : BinaryOp.RotlI32,\r\n              arg0, arg1\r\n            );\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"rotl\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            return compiler.ensureSmallIntegerWrap(\r\n              module.binary(BinaryOp.RotrI32, arg0, arg1),\r\n              type\r\n            );\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            return module.binary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.RotrI64\r\n                : BinaryOp.RotrI32,\r\n              arg0, arg1\r\n            );\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"rotr\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            let flow = compiler.currentFlow;\r\n\r\n            // possibly overflows, e.g. abs<i8>(-128) == 128\r\n            let temp1 = flow.getTempLocal(Type.i32);\r\n            let temp2 = flow.getTempLocal(Type.i32);\r\n            // (x + (x >> 31)) ^ (x >> 31)\r\n            let ret = module.binary(BinaryOp.XorI32,\r\n              module.binary(BinaryOp.AddI32,\r\n                module.local_tee(\r\n                  temp2.index,\r\n                  module.binary(BinaryOp.ShrI32,\r\n                    module.local_tee(temp1.index, arg0),\r\n                    module.i32(31)\r\n                  )\r\n                ),\r\n                module.local_get(temp1.index, NativeType.I32)\r\n              ),\r\n              module.local_get(temp2.index, NativeType.I32)\r\n            );\r\n            flow.freeTempLocal(temp2);\r\n            flow.freeTempLocal(temp1);\r\n            return ret;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = compiler.options;\r\n            let flow = compiler.currentFlow;\r\n            let isWasm64 = options.isWasm64;\r\n\r\n            let temp1 = flow.getTempLocal(options.usizeType);\r\n            let temp2 = flow.getTempLocal(options.usizeType);\r\n            let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\r\n              module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\r\n                module.local_tee(\r\n                  temp2.index,\r\n                  module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\r\n                    module.local_tee(temp1.index, arg0),\r\n                    isWasm64 ? module.i64(63) : module.i32(31)\r\n                  )\r\n                ),\r\n                module.local_get(temp1.index, options.nativeSizeType)\r\n              ),\r\n              module.local_get(temp2.index, options.nativeSizeType)\r\n            );\r\n            flow.freeTempLocal(temp2);\r\n            flow.freeTempLocal(temp1);\r\n            return ret;\r\n          }\r\n          case TypeKind.I64: {\r\n            let flow = compiler.currentFlow;\r\n\r\n            let temp1 = flow.getTempLocal(Type.i64);\r\n            let temp2 = flow.getTempLocal(Type.i64);\r\n            // (x + (x >> 63)) ^ (x >> 63)\r\n            let ret = module.binary(BinaryOp.XorI64,\r\n              module.binary(BinaryOp.AddI64,\r\n                module.local_tee(\r\n                  temp2.index,\r\n                  module.binary(BinaryOp.ShrI64,\r\n                    module.local_tee(temp1.index, arg0),\r\n                    module.i64(63)\r\n                  )\r\n                ),\r\n                module.local_get(temp1.index, NativeType.I64)\r\n              ),\r\n              module.local_get(temp2.index, NativeType.I64)\r\n            );\r\n            flow.freeTempLocal(temp2);\r\n            flow.freeTempLocal(temp1);\r\n            return ret;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.U64:\r\n          case TypeKind.BOOL: return arg0;\r\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\r\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"abs\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let left = operands[0];\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        let arg1: ExpressionRef;\r\n        if (!typeArguments && isNumericLiteral(left)) { // prefer right type\r\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\r\n          if (compiler.currentType != type) {\r\n            arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\r\n          }\r\n        } else {\r\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\r\n        }\r\n        let op: BinaryOp = -1;\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: { op = BinaryOp.GtI32; break; }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\r\n          case TypeKind.I64: { op = BinaryOp.GtI64; break; }\r\n          case TypeKind.U64: { op = BinaryOp.GtU64; break; }\r\n          case TypeKind.ISIZE: {\r\n            op = compiler.options.isWasm64\r\n              ? BinaryOp.GtI64\r\n              : BinaryOp.GtI32;\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            op = compiler.options.isWasm64\r\n              ? BinaryOp.GtU64\r\n              : BinaryOp.GtU32;\r\n            break;\r\n          }\r\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\r\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\r\n        }\r\n        if (op != -1) {\r\n          let flow = compiler.currentFlow;\r\n          let nativeType = type.toNativeType();\r\n          let temp1 = flow.getTempLocal(type);\r\n          flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\r\n          let temp2 = flow.getTempLocal(type);\r\n          flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\r\n          let ret = module.select(\r\n            module.local_tee(temp1.index, arg0),\r\n            module.local_tee(temp2.index, arg1),\r\n            module.binary(op,\r\n              module.local_get(temp1.index, nativeType),\r\n              module.local_get(temp2.index, nativeType)\r\n            )\r\n          );\r\n          flow.freeTempLocal(temp2);\r\n          flow.freeTempLocal(temp1);\r\n          return ret;\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"max\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let left = operands[0];\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        let arg1: ExpressionRef;\r\n        if (!typeArguments && isNumericLiteral(left)) { // prefer right type\r\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\r\n          if (compiler.currentType != type) {\r\n            arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\r\n          }\r\n        } else {\r\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\r\n        }\r\n        let op: BinaryOp = -1;\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: { op = BinaryOp.LtI32; break; }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\r\n          case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\r\n          case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\r\n          case TypeKind.ISIZE: {\r\n            op = compiler.options.isWasm64\r\n              ? BinaryOp.LtI64\r\n              : BinaryOp.LtI32;\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            op = compiler.options.isWasm64\r\n              ? BinaryOp.LtU64\r\n              : BinaryOp.LtU32;\r\n            break;\r\n          }\r\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\r\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\r\n        }\r\n        if (op != -1) {\r\n          let flow = compiler.currentFlow;\r\n          let nativeType = type.toNativeType();\r\n          let temp1 = flow.getTempLocal(type);\r\n          flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\r\n          let temp2 = flow.getTempLocal(type);\r\n          flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\r\n          let ret = module.select(\r\n            module.local_tee(temp1.index, arg0),\r\n            module.local_tee(temp2.index, arg1),\r\n            module.binary(op,\r\n              module.local_get(temp1.index, nativeType),\r\n              module.local_get(temp2.index, nativeType)\r\n            )\r\n          );\r\n          flow.freeTempLocal(temp2);\r\n          flow.freeTempLocal(temp1);\r\n          return ret;\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"min\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.ceil: { // ceil<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.I64:\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.U64:\r\n          case TypeKind.USIZE:\r\n          case TypeKind.BOOL: return arg0; // considered rounded\r\n          case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\r\n          case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"ceil\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.floor: { // floor<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.I64:\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.U64:\r\n          case TypeKind.USIZE:\r\n          case TypeKind.BOOL: return arg0; // considered rounded\r\n          case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\r\n          case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"floor\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\r\n        switch (type.kind) {\r\n          // TODO: does an integer version make sense?\r\n          case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\r\n          case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"copysign\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.I64:\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.U64:\r\n          case TypeKind.USIZE:\r\n          case TypeKind.BOOL: return arg0;\r\n          case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\r\n          case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"nearest\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\r\n            compiler.currentType = type;\r\n            return module.unary(UnaryOp.ReinterpretF32, arg0);\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\r\n            compiler.currentType = type;\r\n            return module.unary(UnaryOp.ReinterpretF64, arg0);\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let arg0 = compiler.compileExpression(operands[0],\r\n              compiler.options.isWasm64\r\n                ? Type.f64\r\n                : Type.f32,\r\n              Constraints.CONV_IMPLICIT\r\n            );\r\n            compiler.currentType = type;\r\n            return module.unary(\r\n              compiler.options.isWasm64\r\n                ? UnaryOp.ReinterpretF64\r\n                : UnaryOp.ReinterpretF32,\r\n              arg0\r\n            );\r\n          }\r\n          case TypeKind.F32: {\r\n            let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\r\n            compiler.currentType = Type.f32;\r\n            return module.unary(UnaryOp.ReinterpretI32, arg0);\r\n          }\r\n          case TypeKind.F64: {\r\n            let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\r\n            compiler.currentType = Type.f64;\r\n            return module.unary(UnaryOp.ReinterpretI64, arg0);\r\n          }\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          // TODO: integer versions (that return f64 or convert)?\r\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\r\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"sqrt\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.I64:\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.U64:\r\n          case TypeKind.USIZE:\r\n          case TypeKind.BOOL: return arg0; // considered truncated\r\n          case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\r\n          case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"trunc\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n\r\n    // === Memory access ==========================================================================\r\n\r\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let outType = (\r\n        contextualType != Type.auto &&\r\n        type.is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > type.size\r\n      ) ? contextualType : type;\r\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\r\n      let numOperands = operands.length;\r\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = outType;\r\n        return module.unreachable();\r\n      }\r\n      let immAlign: i32;\r\n      let naturalAlign = type.byteSize;\r\n      if (numOperands == 3) {\r\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\r\n        if (immAlign < 0) {\r\n          compiler.currentType = outType;\r\n          return module.unreachable();\r\n        }\r\n        if (immAlign > naturalAlign) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\r\n          );\r\n          compiler.currentType = outType;\r\n          return module.unreachable();\r\n        }\r\n        if (!isPowerOf2(immAlign)) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_power_of_two,\r\n            operands[2].range, \"Alignment\"\r\n          );\r\n          compiler.currentType = outType;\r\n          return module.unreachable();\r\n        }\r\n      } else {\r\n        immAlign = naturalAlign;\r\n      }\r\n      compiler.currentType = outType;\r\n      return module.load(\r\n        type.byteSize,\r\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        outType.toNativeType(),\r\n        immOffset,\r\n        immAlign\r\n      );\r\n    }\r\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\r\n              : Constraints.CONV_IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size          // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let immAlign: i32;\r\n      let naturalAlign = type.byteSize;\r\n      if (operands.length == 4) {\r\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\r\n        if (immAlign < 0) {\r\n          compiler.currentType = Type.void;\r\n          return module.unreachable();\r\n        }\r\n        if (immAlign > naturalAlign) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\r\n          );\r\n          compiler.currentType = Type.void;\r\n          return module.unreachable();\r\n        }\r\n        if (!isPowerOf2(immAlign)) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_power_of_two,\r\n            operands[3].range, \"Alignment\"\r\n          );\r\n          compiler.currentType = Type.void;\r\n          return module.unreachable();\r\n        }\r\n      } else {\r\n        immAlign = naturalAlign;\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\r\n    }\r\n\r\n    // === Atomics ================================================================================\r\n\r\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\r\n      if (\r\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let outType = (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > type.size\r\n      ) ? contextualType : type;\r\n      if (!type.is(TypeFlags.INTEGER)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n          reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\r\n        );\r\n        compiler.currentType = outType;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\r\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = outType;\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = outType;\r\n      return module.atomic_load(\r\n        type.byteSize,\r\n        arg0,\r\n        outType.toNativeType(),\r\n        immOffset\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\r\n      if (\r\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n          reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(\r\n            operands[1],\r\n            contextualType,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\r\n              : Constraints.CONV_IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size          // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\r\n    }\r\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\r\n    case BuiltinSymbols.atomic_sub:\r\n    case BuiltinSymbols.atomic_and:\r\n    case BuiltinSymbols.atomic_or:\r\n    case BuiltinSymbols.atomic_xor:\r\n    case BuiltinSymbols.atomic_xchg: {\r\n      if (\r\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        let opName: string;\r\n        switch (prototype.internalName) {\r\n          default: assert(false);\r\n          case BuiltinSymbols.atomic_add: { opName = \"atomic.add\"; break; }\r\n          case BuiltinSymbols.atomic_sub: { opName = \"atomic.sub\"; break; }\r\n          case BuiltinSymbols.atomic_and: { opName = \"atomic.and\"; break; }\r\n          case BuiltinSymbols.atomic_or: { opName = \"atomic.or\"; break; }\r\n          case BuiltinSymbols.atomic_xor: { opName = \"atomic.xor\"; break; }\r\n          case BuiltinSymbols.atomic_xchg: { opName = \"atomic.xchg\"; break; }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n          reportNode.typeArgumentsRange, opName, type.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\r\n              : Constraints.CONV_IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size       // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = inType;\r\n        return module.unreachable();\r\n      }\r\n      let op: AtomicRMWOp;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\r\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\r\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\r\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\r\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\r\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\r\n      }\r\n      compiler.currentType = inType;\r\n      return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\r\n    }\r\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\r\n      if (\r\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n          reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\r\n              : Constraints.CONV_IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      let arg2 = compiler.compileExpression(operands[2],\r\n        inType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size       // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        arg2 = compiler.convertExpression(arg2,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[2]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = inType;\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = inType;\r\n      return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\r\n    }\r\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\r\n      if (\r\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i32;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.i32;\r\n      switch (type.kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32) -> i32\r\n      if (\r\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i32;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.i32;\r\n      return module.atomic_notify(arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.atomic_fence: { // fence() -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      return module.atomic_fence();\r\n    }\r\n\r\n    // === Control flow ===========================================================================\r\n\r\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.auto);\r\n      let type = compiler.currentType;\r\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n          reportNode.typeArgumentsRange, \"select\", type.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.makeIsTrueish(\r\n        compiler.compileExpression(operands[2], Type.bool),\r\n        compiler.currentType // ^\r\n      );\r\n      compiler.currentType = type;\r\n      return module.select(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.typeArgumentsRange, prototype.internalName\r\n        );\r\n      }\r\n      checkArgsRequired(operands, 0, reportNode, compiler);\r\n      return module.unreachable();\r\n    }\r\n\r\n    // === Memory =================================================================================\r\n\r\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      return module.host(HostOp.MemorySize);\r\n    }\r\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      return module.host(HostOp.MemoryGrow, null, [\r\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\r\n      ]);\r\n    }\r\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.unreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.void;\r\n      return module.memory_copy(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.unreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.void;\r\n      return module.memory_fill(arg0, arg1, arg2);\r\n    }\r\n\r\n    // === Helpers ================================================================================\r\n\r\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let toType = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.auto);\r\n      let fromType = compiler.currentType;\r\n      compiler.currentType = toType;\r\n      if (!fromType.isChangeableTo(toType)) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\r\n          reportNode.range, fromType.toString(), toType.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return arg0;\r\n    }\r\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\r\n      ) {\r\n        if (typeArguments) {\r\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\r\n          compiler.currentType = typeArguments[0].nonNullableType;\r\n        }\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // if the assertion can be proven statically, omit it\r\n      if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\r\n        switch (getExpressionType(arg0)) {\r\n          case NativeType.I32: {\r\n            if (getConstValueI32(arg0) != 0) {\r\n              if (contextualType == Type.void) {\r\n                compiler.currentType = Type.void;\r\n                return module.nop();\r\n              }\r\n              return arg0;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            if (getConstValueI64Low(arg0) != 0 || getConstValueI64High(arg0) != 0) {\r\n              if (contextualType == Type.void) {\r\n                compiler.currentType = Type.void;\r\n                return module.nop();\r\n              }\r\n              return arg0;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            if (getConstValueF32(arg0) != 0) {\r\n              if (contextualType == Type.void) {\r\n                compiler.currentType = Type.void;\r\n                return module.nop();\r\n              }\r\n              return arg0;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            if (getConstValueF64(arg0) != 0) {\r\n              if (contextualType == Type.void) {\r\n                compiler.currentType = Type.void;\r\n                return module.nop();\r\n              }\r\n              return arg0;\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // return ifTrueish if assertions are disabled\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) { // simplify if dropped anyway\r\n          compiler.currentType = Type.void;\r\n          return module.nop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      // otherwise call abort if the assertion is false-ish\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n      compiler.currentType = type.nonNullableType;\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        compiler.currentType = Type.void;\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            return module.if(\r\n              module.unary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\r\n          case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\r\n        }\r\n      } else {\r\n        compiler.currentType = type.nonNullableType;\r\n        let flow = compiler.currentFlow;\r\n        switch (compiler.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            let temp = flow.getTempLocal(type);\r\n            flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\r\n            let ret = module.if(\r\n              module.local_tee(temp.index, arg0),\r\n              module.local_get(temp.index, NativeType.I32),\r\n              abort\r\n            );\r\n            flow.freeTempLocal(temp);\r\n            return ret;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let temp = flow.getTempLocal(Type.i64);\r\n            let ret = module.if(\r\n              module.unary(UnaryOp.EqzI64,\r\n                module.local_tee(temp.index, arg0)\r\n              ),\r\n              abort,\r\n              module.local_get(temp.index, NativeType.I64)\r\n            );\r\n            flow.freeTempLocal(temp);\r\n            return ret;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let temp = flow.getTempLocal(compiler.options.usizeType);\r\n            let ret = module.if(\r\n              module.unary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.local_tee(temp.index, arg0)\r\n              ),\r\n              abort,\r\n              module.local_get(temp.index, compiler.options.nativeSizeType)\r\n            );\r\n            flow.freeTempLocal(temp);\r\n            return ret;\r\n          }\r\n          case TypeKind.F32: {\r\n            let temp = flow.getTempLocal(Type.f32);\r\n            let ret = module.if(\r\n              module.binary(BinaryOp.EqF32,\r\n                module.local_tee(temp.index, arg0),\r\n                module.f32(0)\r\n              ),\r\n              abort,\r\n              module.local_get(temp.index, NativeType.F32)\r\n            );\r\n            flow.freeTempLocal(temp);\r\n            return ret;\r\n          }\r\n          case TypeKind.F64: {\r\n            let temp = flow.getTempLocal(Type.f64);\r\n            let ret = module.if(\r\n              module.binary(BinaryOp.EqF64,\r\n                module.local_tee(temp.index, arg0),\r\n                module.f64(0)\r\n              ),\r\n              abort,\r\n              module.local_get(temp.index, NativeType.F64)\r\n            );\r\n            flow.freeTempLocal(temp);\r\n            return ret;\r\n          }\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Not_implemented,\r\n        reportNode.typeArgumentsRange\r\n      );\r\n      return abort;\r\n    }\r\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let flow = compiler.currentFlow;\r\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\r\n      // eliminate unnecessary tees by preferring contextualType(=void)\r\n      let expr = compiler.compileExpression(operands[0], contextualType);\r\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.call_direct:\r\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\r\n      let arg0 = compiler.compileExpression(operands[0], Type.u32);\r\n      let arg0Type = compiler.currentType;\r\n      if (!(\r\n        arg0Type == Type.u32 ||                                      // either plain index\r\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\r\n      )) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_a_function_index_or_function_reference,\r\n          operands[0].range, arg0Type.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let numOperands = operands.length - 1;\r\n      let operandExprs = new Array<ExpressionRef>(numOperands);\r\n      let nativeReturnType = returnType.toNativeType();\r\n      let parameterTypes = new Array<Type>(numOperands);\r\n      let nativeParamTypes = new Array<NativeType>(numOperands);\r\n      for (let i = 0; i < numOperands; ++i) {\r\n        operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.i32);\r\n        let operandType = compiler.currentType;\r\n        parameterTypes[i] = operandType;\r\n        nativeParamTypes[i] = operandType.toNativeType();\r\n      }\r\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\r\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\r\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\r\n      compiler.currentType = returnType;\r\n      if (prototype.internalName == BuiltinSymbols.call_direct) {\r\n        // if the index expression is precomputable to a constant value, emit a direct call\r\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\r\n          assert(getExpressionType(arg0) == NativeType.I32);\r\n          let index = getConstValueI32(arg0);\r\n          let functionTable = compiler.functionTable;\r\n          if (index >= 0 && index < functionTable.length) {\r\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n          operands[0].range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\r\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\r\n      return module.call_indirect(arg0, operandExprs, typeName);\r\n    }\r\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\r\n      ) return module.unreachable();\r\n      let typeArgument = typeArguments![0];\r\n      let classInstance = typeArgument.classReference;\r\n      if (!(typeArgument.is(TypeFlags.REFERENCE) && classInstance !== null)) {\r\n        compiler.error(\r\n          DiagnosticCode.This_expression_is_not_constructable,\r\n          reportNode.expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = classInstance.type;\r\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\r\n    }\r\n\r\n    // === User-defined diagnostics ===============================================================\r\n\r\n    case BuiltinSymbols.ERROR: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.error(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.WARNING: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.warning(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.nop();\r\n    }\r\n    case BuiltinSymbols.INFO: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.info(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.nop();\r\n    }\r\n\r\n    // === Portable type conversions ==============================================================\r\n\r\n    case BuiltinSymbols.i8: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i8;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i16: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i16;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i32;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i64;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.isize: {\r\n      let isizeType = compiler.options.isizeType;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = isizeType;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u8: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u8;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u16: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u16;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u32;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u64;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.usize: {\r\n      let usizeType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = usizeType;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.bool: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.bool;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.f32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.f32;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.f64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.f64;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\r\n    }\r\n\r\n    // === SIMD ===================================================================================\r\n\r\n    case BuiltinSymbols.v128: // alias for now\r\n    case BuiltinSymbols.i8x16: {\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 16, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 16; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI8(getConstValueI32(expr), bytes, i);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.i16x8: {\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 8, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 8; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI16(getConstValueI32(expr), bytes, i << 1);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.i32x4: {\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 4, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 4; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI32(getConstValueI32(expr), bytes, i << 2);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.i64x2: {\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 2; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I64);\r\n          let off = i << 3;\r\n          writeI32(getConstValueI64Low(expr), bytes, off);\r\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.f32x4: {\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 4, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 4; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.F32);\r\n          writeF32(getConstValueF32(expr), bytes, i << 2);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.f64x2: {\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 2; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.F64);\r\n          writeF64(getConstValueF64(expr), bytes, i << 3);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\r\n          case TypeKind.I16:\r\n          case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            return module.unary(\r\n              compiler.options.isWasm64\r\n                ? UnaryOp.SplatI64x2\r\n                : UnaryOp.SplatI32x4,\r\n              arg0\r\n            );\r\n          }\r\n          case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\r\n          case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = type;\r\n      let idx = 0;\r\n      if (getExpressionId(arg1) == ExpressionId.Const) {\r\n        assert(getExpressionType(arg1) == NativeType.I32);\r\n        idx = getConstValueI32(arg1);\r\n      } else {\r\n        compiler.error(\r\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n          operands[1].range\r\n        );\r\n      }\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\r\n        if (idx < 0 || idx > maxIdx) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\r\n          );\r\n          idx = 0;\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, idx);\r\n          case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, idx);\r\n          case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, idx);\r\n          case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, idx);\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, idx);\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, idx);\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            return module.simd_extract(\r\n              compiler.options.isWasm64\r\n                ? SIMDExtractOp.ExtractLaneI64x2\r\n                : SIMDExtractOp.ExtractLaneI32x4,\r\n              arg0, idx\r\n            );\r\n          }\r\n          case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, idx);\r\n          case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, idx);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      let idx = 0;\r\n      if (getExpressionId(arg1) == ExpressionId.Const) {\r\n        assert(getExpressionType(arg1) == NativeType.I32);\r\n        idx = getConstValueI32(arg1);\r\n      } else {\r\n        compiler.error(\r\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n          operands[1].range\r\n        );\r\n      }\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\r\n        if (idx < 0 || idx > maxIdx) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\r\n          );\r\n          idx = 0;\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, idx, arg2);\r\n          case TypeKind.I16:\r\n          case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, idx, arg2);\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, idx, arg2);\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, idx, arg2);\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            return module.simd_replace(\r\n              compiler.options.isWasm64\r\n                ? SIMDReplaceOp.ReplaceLaneI64x2\r\n                : SIMDReplaceOp.ReplaceLaneI32x4,\r\n              arg0, idx, arg2\r\n            );\r\n          }\r\n          case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, idx, arg2);\r\n          case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, idx, arg2);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        let laneWidth = type.byteSize;\r\n        let laneCount = 16 / laneWidth;\r\n        assert(isInteger(laneCount) && isPowerOf2(laneCount));\r\n        if (\r\n          checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\r\n        ) {\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n        let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n        let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.I64:\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.U64:\r\n          case TypeKind.USIZE:\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            let mask = new Uint8Array(16);\r\n            let maxIdx = (laneCount << 1) - 1;\r\n            for (let i = 0; i < laneCount; ++i) {\r\n              let operand = operands[2 + i];\r\n              let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\r\n              if (getExpressionId(argN) != ExpressionId.Const) {\r\n                compiler.error(\r\n                  DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n                  operand.range\r\n                );\r\n                compiler.currentType = Type.v128;\r\n                return module.unreachable();\r\n              }\r\n              assert(getExpressionType(argN) == NativeType.I32);\r\n              let idx = getConstValueI32(argN);\r\n              if (idx < 0 || idx > maxIdx) {\r\n                compiler.error(\r\n                  DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n                  operand.range, \"Lane index\", \"0\", maxIdx.toString()\r\n                );\r\n                compiler.currentType = Type.v128;\r\n                return module.unreachable();\r\n              }\r\n              switch (laneWidth) {\r\n                case 1: {\r\n                  writeI8(idx, mask, i);\r\n                  break;\r\n                }\r\n                case 2: {\r\n                  let off8 = i << 1;\r\n                  let idx8 = idx << 1;\r\n                  writeI8(idx8    , mask, off8);\r\n                  writeI8(idx8 + 1, mask, off8 + 1);\r\n                  break;\r\n                }\r\n                case 4: {\r\n                  let off8 = i << 2;\r\n                  let idx8 = idx << 2;\r\n                  writeI8(idx8    , mask, off8);\r\n                  writeI8(idx8 + 1, mask, off8 + 1);\r\n                  writeI8(idx8 + 2, mask, off8 + 2);\r\n                  writeI8(idx8 + 3, mask, off8 + 3);\r\n                  break;\r\n                }\r\n                case 8: {\r\n                  let off8 = i << 3;\r\n                  let idx8 = idx << 3;\r\n                  writeI8(idx8    , mask, off8);\r\n                  writeI8(idx8 + 1, mask, off8 + 1);\r\n                  writeI8(idx8 + 2, mask, off8 + 2);\r\n                  writeI8(idx8 + 3, mask, off8 + 3);\r\n                  writeI8(idx8 + 4, mask, off8 + 4);\r\n                  writeI8(idx8 + 5, mask, off8 + 5);\r\n                  writeI8(idx8 + 6, mask, off8 + 6);\r\n                  writeI8(idx8 + 7, mask, off8 + 7);\r\n                  break;\r\n                }\r\n                default: assert(false);\r\n              }\r\n            }\r\n            compiler.currentType = Type.v128;\r\n            return module.simd_shuffle(arg0, arg1, mask);\r\n          }\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\r\n      );\r\n      compiler.currentType = Type.v128;\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_swizzle: { // swizzle(a: v128, b: v128) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_load_splat: { // load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\r\n      let numOperands = operands.length;\r\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let immAlign: i32;\r\n      let naturalAlign = type.byteSize;\r\n      if (numOperands == 3) {\r\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\r\n        if (immAlign < 0) {\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n      } else {\r\n        immAlign = naturalAlign;\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        if (immAlign > naturalAlign) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        if (!isPowerOf2(immAlign)) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_power_of_two,\r\n            operands[2].range, \"Alignment\"\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.U8: {\r\n            return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\r\n          }\r\n          case TypeKind.I16:\r\n          case TypeKind.U16: {\r\n            return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32:\r\n          case TypeKind.F32: {\r\n            return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            if (!compiler.options.isWasm64) {\r\n              return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64:\r\n          case TypeKind.F64: {\r\n            return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\r\n          }\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_load_ext: { // load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\r\n      let numOperands = operands.length;\r\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let immAlign: i32;\r\n      let naturalAlign = type.byteSize;\r\n      if (numOperands == 3) {\r\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\r\n        if (immAlign < 0) {\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n      } else {\r\n        immAlign = naturalAlign;\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        if (immAlign > naturalAlign) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        if (!isPowerOf2(immAlign)) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_power_of_two,\r\n            operands[2].range, \"Alignment\"\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\r\n          case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\r\n          case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\r\n          case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\r\n          case TypeKind.ISIZE: {\r\n            if (compiler.options.isWasm64) break;\r\n            // fall-through\r\n          }\r\n          case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\r\n          case TypeKind.USIZE: {\r\n            if (compiler.options.isWasm64) break;\r\n            // fall-through\r\n          }\r\n          case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_add: { // add<T!>(a: v128, b: v128) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\r\n          case TypeKind.I16:\r\n          case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            return module.binary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.AddI64x2\r\n                : BinaryOp.AddI32x4,\r\n              arg0, arg1\r\n            );\r\n          }\r\n          case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\r\n          case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.add\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_sub: { // sub<T!>(a: v128, b: v128) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\r\n          case TypeKind.I16:\r\n          case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            return module.binary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.SubI64x2\r\n                : BinaryOp.SubI32x4,\r\n              arg0, arg1\r\n            );\r\n          }\r\n          case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\r\n          case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_mul: { // mul<T!>(a: v128, b: v128) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\r\n          case TypeKind.I16:\r\n          case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            if (!compiler.options.isWasm64) {\r\n              return module.binary(BinaryOp.MulI32x4, arg0, arg1);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\r\n          case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_div: { // div<T!>(a: v128, b: v128) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\r\n          case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.div\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_add_saturate: { // add_saturate<T!>(a: v128, b: v128) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\r\n          case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\r\n          case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\r\n          case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_sub_saturate: { // sub_saturate<T!>(a: v128, b: v128) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\r\n          case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\r\n          case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\r\n          case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_min: { // min<T!>(a: v128, b: v128) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\r\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.min\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_max: { // max<T!>(a: v128, b: v128) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\r\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.max\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_eq: { // eq<T!>(a: v128, b: v128) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n            case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                return module.binary(BinaryOp.EqI32x4, arg0, arg1);\r\n              }\r\n              break;\r\n            }\r\n            case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\r\n            case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_ne: { // ne<T!>(a: v128, b: v128) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n            case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                return module.binary(BinaryOp.NeI32x4, arg0, arg1);\r\n              }\r\n              break;\r\n            }\r\n            case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\r\n            case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_lt: { // lt<T!>(a: v128, b: v128) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\r\n          case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\r\n          case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\r\n          case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\r\n          case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\r\n          case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\r\n          case TypeKind.ISIZE: {\r\n            if (!compiler.options.isWasm64) {\r\n              return module.binary(BinaryOp.LtI32x4, arg0, arg1);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (!compiler.options.isWasm64) {\r\n              return module.binary(BinaryOp.LtU32x4, arg0, arg1);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\r\n          case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_le: { // le<T!>(a: v128, b: v128) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\r\n          case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\r\n          case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\r\n          case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\r\n          case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\r\n          case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\r\n          case TypeKind.ISIZE: {\r\n            if (!compiler.options.isWasm64) {\r\n              return module.binary(BinaryOp.LeI32x4, arg0, arg1);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (!compiler.options.isWasm64) {\r\n              return module.binary(BinaryOp.LeU32x4, arg0, arg1);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\r\n          case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.le\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_gt: { // gt<T!>(a: v128, b: v128) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\r\n          case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\r\n          case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\r\n          case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\r\n          case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\r\n          case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\r\n          case TypeKind.ISIZE: {\r\n            if (!compiler.options.isWasm64) {\r\n              return module.binary(BinaryOp.GtI32x4, arg0, arg1);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (!compiler.options.isWasm64) {\r\n              return module.binary(BinaryOp.GtU32x4, arg0, arg1);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\r\n          case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_ge: { // ge<T!>(a: v128, b: v128) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\r\n          case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\r\n          case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\r\n          case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\r\n          case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\r\n          case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\r\n          case TypeKind.ISIZE: {\r\n            if (!compiler.options.isWasm64) {\r\n              return module.binary(BinaryOp.GeI32x4, arg0, arg1);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (!compiler.options.isWasm64) {\r\n              return module.binary(BinaryOp.GeU32x4, arg0, arg1);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\r\n          case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_narrow: {\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\r\n          case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\r\n          case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\r\n          case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_neg: {\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\r\n          case TypeKind.I16:\r\n          case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            return module.unary(\r\n              compiler.options.isWasm64\r\n                ? UnaryOp.NegI64x2\r\n                : UnaryOp.NegI32x4,\r\n              arg0\r\n            );\r\n          }\r\n          case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\r\n          case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_abs: {\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\r\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_sqrt: {\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\r\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_convert: {\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\r\n          case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\r\n          case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\r\n          case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_trunc_sat: {\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\r\n          case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\r\n          case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\r\n          case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_widen_low: {\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\r\n          case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\r\n          case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\r\n          case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_widen_high: {\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\r\n          case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\r\n          case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\r\n          case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_shl: { // shl<T!>(a: v128, b: i32) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\r\n          case TypeKind.I16:\r\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            return module.simd_shift(\r\n              compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShlI64x2\r\n                : SIMDShiftOp.ShlI32x4,\r\n              arg0, arg1\r\n            );\r\n          }\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_shr: { // shr<T!>(a: v128, b: i32) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\r\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\r\n          case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\r\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\r\n          case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\r\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\r\n          case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\r\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\r\n          case TypeKind.ISIZE: {\r\n            return module.simd_shift(\r\n              compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShrI64x2\r\n                : SIMDShiftOp.ShrI32x4,\r\n              arg0, arg1\r\n            );\r\n          }\r\n          case TypeKind.USIZE: {\r\n            return module.simd_shift(\r\n              compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShrU64x2\r\n                : SIMDShiftOp.ShrU32x4,\r\n              arg0, arg1\r\n            );\r\n          }\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_and: { // and(a: v128) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      return module.binary(BinaryOp.AndV128, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_or: { // or(a: v128) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      return module.binary(BinaryOp.OrV128, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_xor: { // xor(a: v128) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      return module.binary(BinaryOp.XorV128, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_andnot: { // andnot(a: v128, b: v128) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      return module.binary(BinaryOp.AndNotV128, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_not: { // not(a: v128) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      return module.unary(UnaryOp.NotV128, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\r\n      return module.simd_ternary(SIMDTernaryOp.Bitselect, arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.v128_any_true: { // any_true<T!>(a: v128) -> bool\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.bool;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.bool;\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\r\n          case TypeKind.I16:\r\n          case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            return module.unary(\r\n              compiler.options.isWasm64\r\n                ? UnaryOp.AnyTrueI64x2\r\n                : UnaryOp.AnyTrueI32x4,\r\n              arg0\r\n            );\r\n          }\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_all_true: { // all_true<T!>(a: v128) -> bool\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.bool;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.bool;\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\r\n          case TypeKind.I16:\r\n          case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            return module.unary(\r\n              compiler.options.isWasm64\r\n                ? UnaryOp.AllTrueI64x2\r\n                : UnaryOp.AllTrueI32x4,\r\n              arg0\r\n            );\r\n          }\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_qfma: { // qfma(a: v128, b: v128, c: v128) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\r\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.v128_qfms: { // qfms(a: v128, b: v128, c: v128) -> v128\r\n      if (\r\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\r\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n\r\n    // === Internal runtime =======================================================================\r\n\r\n    case BuiltinSymbols.idof: {\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.u32;\r\n      if (!type) return module.unreachable();\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        let signatureReference = type.signatureReference;\r\n        if (signatureReference) {\r\n          return module.i32(signatureReference.id);\r\n        }\r\n        let classReference = type.classReference;\r\n        if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n          return module.i32(classReference.id);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"idof\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.visit_globals: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\r\n      ) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\r\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\r\n      compiler.currentType = Type.void;\r\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\r\n    }\r\n    case BuiltinSymbols.visit_members: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\r\n      ) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\r\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\r\n      compiler.currentType = Type.void;\r\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\r\n    }\r\n    case BuiltinSymbols.isNaN: {\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.bool;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.auto);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          // never NaN\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.I64:\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.U64:\r\n          case TypeKind.USIZE: {\r\n            return hasSideEffects(arg0)\r\n              ? module.block(null, [\r\n                  module.drop(arg0),\r\n                  module.i32(0)\r\n                ], NativeType.I32)\r\n              : module.i32(0);\r\n          }\r\n          // (t = arg0) != t\r\n          case TypeKind.F32: {\r\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\r\n              return module.binary(BinaryOp.NeF32,\r\n                arg0,\r\n                module.local_get(getLocalGetIndex(arg0), NativeType.F32)\r\n              );\r\n            }\r\n            let flow = compiler.currentFlow;\r\n            let temp = flow.getTempLocal(Type.f32);\r\n            let ret = module.binary(BinaryOp.NeF32,\r\n              module.local_tee(temp.index, arg0),\r\n              module.local_get(temp.index, NativeType.F32)\r\n            );\r\n            flow.freeTempLocal(temp);\r\n            return ret;\r\n          }\r\n          case TypeKind.F64: {\r\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\r\n              return module.binary(BinaryOp.NeF64,\r\n                arg0,\r\n                module.local_get(getLocalGetIndex(arg0), NativeType.F64)\r\n              );\r\n            }\r\n            let flow = compiler.currentFlow;\r\n            let temp = flow.getTempLocal(Type.f64);\r\n            let ret = module.binary(BinaryOp.NeF64,\r\n              module.local_tee(temp.index, arg0),\r\n              module.local_get(temp.index, NativeType.F64)\r\n            );\r\n            flow.freeTempLocal(temp);\r\n            return ret;\r\n          }\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"isNaN\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.isFinite: {\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.bool;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.auto);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      if (!type.is(TypeFlags.REFERENCE)) {\r\n        switch (type.kind) {\r\n          // always finite\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.I64:\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.U64:\r\n          case TypeKind.USIZE: {\r\n            return hasSideEffects(arg0)\r\n              ? module.block(null, [\r\n                  module.drop(arg0),\r\n                  module.i32(1)\r\n                ], NativeType.I32)\r\n              : module.i32(1);\r\n          }\r\n          // (t = arg0) - t == 0\r\n          case TypeKind.F32: {\r\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\r\n              return module.binary(BinaryOp.EqF32,\r\n                module.binary(BinaryOp.SubF32,\r\n                  arg0,\r\n                  module.local_get(getLocalGetIndex(arg0), NativeType.F32)\r\n                ),\r\n                module.f32(0)\r\n              );\r\n            }\r\n            let flow = compiler.currentFlow;\r\n            let temp = flow.getTempLocal(Type.f32);\r\n            let ret = module.binary(BinaryOp.EqF32,\r\n              module.binary(BinaryOp.SubF32,\r\n                module.local_tee(temp.index, arg0),\r\n                module.local_get(temp.index, NativeType.F32)\r\n              ),\r\n              module.f32(0)\r\n            );\r\n            flow.freeTempLocal(temp);\r\n            return ret;\r\n          }\r\n          case TypeKind.F64: {\r\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\r\n              return module.binary(BinaryOp.EqF64,\r\n                module.binary(BinaryOp.SubF64,\r\n                  arg0,\r\n                  module.local_get(getLocalGetIndex(arg0), NativeType.F64)\r\n                ),\r\n                module.f64(0)\r\n              );\r\n            }\r\n            let flow = compiler.currentFlow;\r\n            let temp = flow.getTempLocal(Type.f64);\r\n            let ret = module.binary(BinaryOp.EqF64,\r\n              module.binary(BinaryOp.SubF64,\r\n                module.local_tee(temp.index, arg0),\r\n                module.local_get(temp.index, NativeType.F64)\r\n              ),\r\n              module.f64(0)\r\n            );\r\n            flow.freeTempLocal(temp);\r\n            return ret;\r\n          }\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\r\n        reportNode.typeArgumentsRange, \"isFinite\", type.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n  }\r\n\r\n  // try to defer inline asm to a concrete built-in\r\n  {\r\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\r\n    if (expr) {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.typeArgumentsRange, prototype.internalName\r\n        );\r\n      }\r\n      return expr;\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Not_implemented,\r\n    reportNode.expression.range\r\n  );\r\n  return module.unreachable();\r\n}\r\n\r\n/** Tries to defer an inline-assembler-like call to a built-in function. */\r\nfunction tryDeferASM(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  operands: Expression[],\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  /* tslint:disable:max-line-length */\r\n  switch (prototype.internalName) {\r\n\r\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\r\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\r\n    //   and, or, xor, shl, shr_u, shr_s\r\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\r\n\r\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case BuiltinSymbols.i32_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\r\n\r\n    case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.v128, reportNode);\r\n\r\n    case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\r\n    case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\r\n    case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i8x16_narrow_i16x8_s: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.i16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i8x16_narrow_i16x8_u: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.u16, operands, Type.v128, reportNode);\r\n\r\n    case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\r\n    case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\r\n    case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_narrow_i32x4_s: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.i32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_narrow_i32x4_u: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.u32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_widen_low_i8x16_s: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_widen_low_i8x16_u: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.u8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_widen_high_i8x16_s: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_widen_high_i8x16_u: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.u8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_load8x8_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i16x8_load8x8_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u8, operands, Type.v128, reportNode);\r\n\r\n    case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i32x4_trunc_sat_f32x4_s: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.i32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i32x4_trunc_sat_f32x4_u: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.u32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i32x4_widen_low_i16x8_s: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.i16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i32x4_widen_low_i16x8_u: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.u16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i32x4_widen_high_i16x8_s: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.i16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i32x4_widen_high_i16x8_u: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.u16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i32x4_load16x4_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i32x4_load16x4_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u16, operands, Type.v128, reportNode);\r\n\r\n    case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64x2_trunc_sat_f64x2_s: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.i64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i64x2_trunc_sat_f64x2_u: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.u64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i64x2_load32x2_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.i64x2_load32x2_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u32, operands, Type.v128, reportNode);\r\n\r\n    case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f32x4_convert_i32x4_s: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f32x4_convert_i32x4_u: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f32x4_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f32x4_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f32, operands, Type.v128, reportNode);\r\n\r\n    case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f64x2_convert_i64x2_s: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f64x2_convert_i64x2_u: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f64x2_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f64, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.f64x2_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f64, operands, Type.v128, reportNode);\r\n\r\n    case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.v8x16_swizzle: return deferASM(BuiltinSymbols.v128_swizzle, compiler, null, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.v8x16_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u8, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.v16x8_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u16, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.v32x4_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u32, operands, Type.v128, reportNode);\r\n    case BuiltinSymbols.v64x2_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u64, operands, Type.v128, reportNode);\r\n  }\r\n  /* tslint:enable:max-line-length */\r\n  return 0;\r\n}\r\n\r\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\r\nfunction deferASM(\r\n  name: string,\r\n  compiler: Compiler,\r\n  typeArgument: Type | null,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  assert(compiler.program.elementsByName.has(name));\r\n  var prototype = compiler.program.elementsByName.get(name)!;\r\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n  return compileCall(\r\n    compiler,\r\n    <FunctionPrototype>prototype,\r\n    typeArgument ? [ typeArgument ] : null,\r\n    operands,\r\n    contextualType,\r\n    reportNode,\r\n    /* isAsm */ true\r\n  );\r\n}\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringInstance = compiler.program.stringInstance;\r\n  if (!stringInstance) return module.unreachable();\r\n\r\n  var abortInstance = program.abortInstance;\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\r\n\r\n  var messageArg: ExpressionRef;\r\n  if (message !== null) {\r\n    // The message argument works much like an arm of an IF that does not become executed if the\r\n    // assertion succeeds respectively is only being computed if the program actually crashes.\r\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\r\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\r\n    messageArg = compiler.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\r\n  } else {\r\n    messageArg = stringInstance.type.toNativeZero(module);\r\n  }\r\n\r\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.block(null, [\r\n    module.call(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.i32(reportNode.range.line),\r\n        module.i32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.unreachable()\r\n  ]);\r\n}\r\n\r\n/** Compiles the `visit_globals` function. */\r\nexport function compileVisitGlobals(compiler: Compiler): void {\r\n  var module = compiler.module;\r\n  var exprs = new Array<ExpressionRef>();\r\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\r\n  var nativeSizeType = compiler.options.nativeSizeType;\r\n  var visitInstance = assert(compiler.program.visitInstance);\r\n\r\n  compiler.compileFunction(visitInstance);\r\n\r\n  for (let element of compiler.program.elementsByName.values()) {\r\n    if (element.kind != ElementKind.GLOBAL) continue;\r\n    let global = <Global>element;\r\n    let globalType = global.type;\r\n    let classType = globalType.classReference;\r\n    if (\r\n      globalType.is(TypeFlags.REFERENCE) &&\r\n      classType !== null &&\r\n      !classType.hasDecorator(DecoratorFlags.UNMANAGED) &&\r\n      global.is(CommonFlags.COMPILED)\r\n    ) {\r\n      if (global.is(CommonFlags.INLINED)) {\r\n        let value = global.constantIntegerValue;\r\n        if (i64_low(value) || i64_high(value)) {\r\n          exprs.push(\r\n            module.call(visitInstance.internalName, [\r\n              compiler.options.isWasm64\r\n                ? module.i64(i64_low(value), i64_high(value))\r\n                : module.i32(i64_low(value))\r\n            ], NativeType.None)\r\n          );\r\n        }\r\n      } else {\r\n        exprs.push(\r\n          module.if(\r\n            module.local_tee(1,\r\n              module.global_get(global.internalName, nativeSizeType)\r\n            ),\r\n            module.call(visitInstance.internalName, [\r\n              module.local_get(1, nativeSizeType), // tempRef != null\r\n              module.local_get(0, NativeType.I32) // cookie\r\n            ], NativeType.None)\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\r\n    exprs.length\r\n      ? module.block(null, exprs)\r\n      : module.nop()\r\n  );\r\n}\r\n\r\n/** Compiles the `visit_members` function. */\r\nexport function compileVisitMembers(compiler: Compiler): void {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n  var usizeType = program.options.usizeType;\r\n  var nativeSizeType = usizeType.toNativeType();\r\n  var nativeSizeSize = usizeType.byteSize;\r\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\r\n  var managedClasses = program.managedClasses;\r\n  var visitInstance = assert(program.visitInstance);\r\n  var blocks = new Array<RelooperBlockRef>();\r\n  var relooper = Relooper.create(module);\r\n\r\n  var outer = relooper.addBlockWithSwitch(\r\n    module.nop(),\r\n    module.load(nativeSizeSize, false,\r\n      nativeSizeType == NativeType.I64\r\n        ? module.binary(BinaryOp.SubI64,\r\n            module.local_get(0, nativeSizeType),\r\n            module.i64(8)\r\n          )\r\n        : module.binary(BinaryOp.SubI32,\r\n            module.local_get(0, nativeSizeType),\r\n            module.i32(8) // rtId is at -8\r\n          ),\r\n      NativeType.I32,\r\n      0\r\n    )\r\n  );\r\n\r\n  var lastId = 0;\r\n  for (let [id, instance] of managedClasses) {\r\n    assert(instance.type.isManaged);\r\n    assert(id == lastId++);\r\n\r\n    let visitImpl: Element | null;\r\n    let code = new Array<ExpressionRef>();\r\n\r\n    // if a library element, check if it implements a custom traversal function\r\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\r\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\r\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\r\n        code.push(\r\n          module.unreachable()\r\n        );\r\n      } else {\r\n        let visitSig = visitFunc.signature;\r\n        assert(\r\n          visitSig.parameterTypes.length == 1 &&\r\n          visitSig.parameterTypes[0] == Type.u32 &&\r\n          visitSig.returnType == Type.void &&\r\n          visitSig.thisType == instance.type\r\n        );\r\n        code.push(\r\n          module.call(visitFunc.internalName, [\r\n            module.local_get(0, nativeSizeType), // ref\r\n            module.local_get(1, NativeType.I32)  // cookie\r\n          ], NativeType.None)\r\n        );\r\n      }\r\n\r\n    // otherwise generate traversal logic for own fields\r\n    } else {\r\n      let members = instance.members;\r\n      if (members) {\r\n        for (let member of members.values()) {\r\n          if (member.kind == ElementKind.FIELD) {\r\n            if ((<Field>member).parent === instance) {\r\n              let fieldType = (<Field>member).type;\r\n              if (fieldType.isManaged) {\r\n                let fieldOffset = (<Field>member).memoryOffset;\r\n                assert(fieldOffset >= 0);\r\n                code.push(\r\n                  // if ($2 = value) FIELDCLASS~traverse($2)\r\n                  module.if(\r\n                    module.local_tee(2,\r\n                      module.load(nativeSizeSize, false,\r\n                        module.local_get(0, nativeSizeType),\r\n                        nativeSizeType, fieldOffset\r\n                      )\r\n                    ),\r\n                    module.call(visitInstance.internalName, [\r\n                      module.local_get(2, nativeSizeType), // ref\r\n                      module.local_get(1, NativeType.I32)  // cookie\r\n                    ], NativeType.None)\r\n                  )\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (!instance.base) code.push(module.return());\r\n    let block = relooper.addBlock(\r\n      flatten(module, code, NativeType.None)\r\n    );\r\n    relooper.addBranchForSwitch(outer, block, [ id ]);\r\n    blocks.push(block);\r\n  }\r\n  for (let [id, instance] of managedClasses) {\r\n    let base = instance.base;\r\n    if (base) {\r\n      relooper.addBranch(blocks[id], blocks[base.id]);\r\n    }\r\n  }\r\n  blocks.push(\r\n    relooper.addBlock(\r\n      module.unreachable()\r\n    )\r\n  );\r\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\r\n  compiler.compileFunction(visitInstance);\r\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\r\n}\r\n\r\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\r\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\r\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\r\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\r\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\r\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\r\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\r\n}\r\n\r\n/** Compiles runtime type information for use by stdlib. */\r\nexport function compileRTTI(compiler: Compiler): void {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n  var managedClasses = program.managedClasses;\r\n  var count = managedClasses.size;\r\n  var size = 4 + 8 * count;\r\n  var data = new Uint8Array(size);\r\n  writeI32(count, data, 0);\r\n  var off = 4;\r\n  var abvInstance = program.arrayBufferViewInstance;\r\n  var abvPrototype = abvInstance.prototype;\r\n  var arrayPrototype = program.arrayPrototype;\r\n  var setPrototype = program.setPrototype;\r\n  var mapPrototype = program.mapPrototype;\r\n  var lastId = 0;\r\n  for (let [id, instance] of managedClasses) {\r\n    assert(id == lastId++);\r\n    let flags: TypeinfoFlags = 0;\r\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\r\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\r\n      let valueType = instance.getArrayValueType();\r\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\r\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\r\n    } else if (instance.extends(setPrototype)) {\r\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\r\n      assert(typeArguments.length == 1);\r\n      flags |= TypeinfoFlags.SET;\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\r\n    } else if (instance.extends(mapPrototype)) {\r\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\r\n      assert(typeArguments.length == 2);\r\n      flags |= TypeinfoFlags.MAP;\r\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\r\n    }\r\n    writeI32(flags, data, off); off += 4;\r\n    instance.rttiFlags = flags;\r\n    let base = instance.base;\r\n    writeI32(base ? base.id : 0, data, off); off += 4;\r\n  }\r\n  assert(off == size);\r\n  var usizeType = program.options.usizeType;\r\n  var segment = compiler.addMemorySegment(data);\r\n  if (usizeType.size == 8) {\r\n    let offset = segment.offset;\r\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\r\n  } else {\r\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\r\n  }\r\n}\r\n\r\n// Helpers\r\n\r\n/** Evaluates the constant type of a type argument *or* expression. */\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: CallExpression\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments !== null && typeArguments.length) {\r\n      if (typeArguments.length > 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\r\n        );\r\n        return null;\r\n      }\r\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\r\n    } else {\r\n      compiler.compileExpression(operands[0], Type.auto);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\n/** Evaluates a compile-time constant immediate offset argument.*/\r\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I64 ||\r\n      getConstValueI64High(expr) != 0 ||\r\n      (value = getConstValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I32 ||\r\n      (value = getConstValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n/** Checks that the specified feature is enabled. */\r\nfunction checkFeatureEnabled(\r\n  feature: Feature,\r\n  reportNode: Node,\r\n  compiler: Compiler\r\n): i32 {\r\n  if (!compiler.options.hasFeature(feature)) {\r\n    compiler.error(\r\n      DiagnosticCode.Feature_0_is_not_enabled,\r\n      reportNode.range, featureToString(feature)\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call with a single required type argument. Returns `1` on error. */\r\nfunction checkTypeRequired(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler,\r\n  setCurrentTypeOnError: bool = false\r\n): i32 {\r\n  if (typeArguments) {\r\n    let numTypeArguments = typeArguments.length;\r\n    if (numTypeArguments == 1) return 0;\r\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\r\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\r\n    );\r\n  } else {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", \"0\"\r\n    );\r\n  }\r\n  return 1;\r\n}\r\n\r\n/** Checks a call with a single optional type argument. Returns `1` on error. */\r\nfunction checkTypeOptional(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler,\r\n  setCurrentTypeOnError: bool = false\r\n): i32 {\r\n  if (typeArguments) {\r\n    let numTypeArguments = typeArguments.length;\r\n    if (numTypeArguments == 1) return 0;\r\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\r\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that is not generic. Returns `1` on error. */\r\nfunction checkTypeAbsent(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  prototype: FunctionPrototype\r\n): i32 {\r\n  if (typeArguments) {\r\n    prototype.program.error(\r\n      DiagnosticCode.Type_0_is_not_generic,\r\n      reportNode.typeArgumentsRange, prototype.internalName\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\r\nfunction checkArgsRequired(\r\n  operands: Expression[],\r\n  expected: i32,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler\r\n): i32 {\r\n  if (operands.length != expected) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_arguments_but_got_1,\r\n      reportNode.range, expected.toString(), operands.length.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\r\nfunction checkArgsOptional(\r\n  operands: Expression[],\r\n  expectedMinimum: i32,\r\n  expectedMaximum: i32,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler\r\n): i32 {\r\n  var numOperands = operands.length;\r\n  if (numOperands < expectedMinimum) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\r\n    );\r\n    return 1;\r\n  } else if (numOperands > expectedMaximum) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_arguments_but_got_1,\r\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  getFunctionName,\r\n  getFunctionBody,\r\n  getFunctionParamCount,\r\n  getFunctionParamType,\r\n  getFunctionResultType,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfCondition,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getLoopName,\r\n  getLoopBody,\r\n  getBreakName,\r\n  getBreakCondition,\r\n  getLocalGetIndex,\r\n  getLocalSetIndex,\r\n  getLocalSetValue,\r\n  getLoadOffset,\r\n  getLoadPtr,\r\n  getStoreOffset,\r\n  getStorePtr,\r\n  getStoreValue,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getUnaryOp,\r\n  getUnaryValue,\r\n  getBinaryOp,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getSelectCondition,\r\n  getDropValue,\r\n  getReturnValue,\r\n  getHostOp,\r\n  getHostOperand\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\r\n    var body = getFunctionBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(getFunctionResultType(func)));\r\n    this.push(\" \");\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = getExpressionId(expr);\r\n    var type = getExpressionType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = getBlockName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = getBlockChildCount(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(getBlockChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          if (nested = getIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(getIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = getLoopName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(getLoopBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = getBreakCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = getBreakName(expr)) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        this.push(\"$\");\r\n        this.push(getLocalGetIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.LocalSet: {\r\n        this.push(\"$\");\r\n        this.push(getLocalSetIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(getLocalSetValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GlobalGet:\r\n      case ExpressionId.GlobalSet: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getLoadOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getLoadPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getStoreOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getStorePtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getStoreValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(getConstValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(getConstValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(getConstValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(getSelectThen(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectElse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(getDropValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = getReturnValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (getHostOp(expr)) {\r\n          case HostOp.MemorySize: {\r\n            this.push(\"memory.size()\");\r\n            return;\r\n          }\r\n          case HostOp.MemoryGrow: {\r\n            this.push(\"memory.grow(\");\r\n            this.decompileExpression(getHostOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicNotify:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.V128: return \"v128\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\n import {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property,\r\n  PropertyPrototype,\r\n  File\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  SourceKind\r\n } from \"./ast\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nexport abstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  includePrivate: bool;\r\n  /** Already seen elements. */\r\n  seen: Map<Element,string> = new Map();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all elements and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let file of this.program.filesByName.values()) {\r\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\r\n    }\r\n  }\r\n\r\n  /** Visits all exported elements of a file. */\r\n  visitFile(file: File): void {\r\n    var members = file.exports;\r\n    if (members) {\r\n      for (let [name, member] of members) this.visitElement(name, member);\r\n    }\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar) {\r\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\r\n    }\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(name: string, element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    var seen = this.seen;\r\n    if (seen.has(element)) {\r\n      this.visitAlias(name, element, <string>seen.get(element));\r\n      return;\r\n    }\r\n    seen.set(element, name);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(name, <ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterInstance;\r\n        if (getter) this.visitFunction(name, getter);\r\n        let setter = prop.setterInstance;\r\n        if (setter) this.visitFunction(name, setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\r\n        break;\r\n      }\r\n      case ElementKind.TYPEDEFINITION: break;\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\r\n    var instances = element.instances;\r\n    if (instances) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(name: string, element: ClassPrototype): void {\r\n    var instances = element.instances;\r\n    if (instances) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\r\n    // var instances = element.instances;\r\n    // if (instances) {\r\n    //   for (let instance of instances.values()) {\r\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\r\n    //   }\r\n    // }\r\n    assert(false);\r\n  }\r\n\r\n  abstract visitGlobal(name: string, element: Global): void;\r\n  abstract visitEnum(name: string, element: Enum): void;\r\n  abstract visitFunction(name: string, element: Function): void;\r\n  abstract visitClass(name: string, element: Class): void;\r\n  abstract visitInterface(name: string, element: Interface): void;\r\n  abstract visitField(name: string, element: Field): void;\r\n  abstract visitNamespace(name: string, element: Element): void;\r\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(name: string, element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(name);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(name: string, element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\r\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(name: string, element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(name);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.name);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member.name, member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(name: string, element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(name: string, element: Interface): void {\r\n    this.visitClass(name, element);\r\n  }\r\n\r\n  visitField(name: string, element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(name: string, element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member.name, member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitAlias(name: string, element: Element, originalName: string): void {\r\n    // TODO\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n  private unknown: Set<string> = new Set();\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(name: string, element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else sb.push(\"static \");\r\n    } else {\r\n      if (isConst) sb.push(\"export const \");\r\n      else sb.push(\"export var \");\r\n    }\r\n    sb.push(name);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(name, element);\r\n  }\r\n\r\n  visitEnum(name: string, element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"export enum \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\r\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(name, element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(name: string, element: Function): void {\r\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(\"get \");\r\n      sb.push(name); // 'get:funcName' internally\r\n      sb.push(\"(): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n      sb.push(\";\\n\");\r\n      return;\r\n    } else {\r\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\r\n      sb.push(name);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(name, element);\r\n  }\r\n\r\n  visitClass(name: string, element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"export interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\r\n      sb.push(\"export class \");\r\n    }\r\n    sb.push(name);\r\n    // var base = element.base;\r\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n    //   sb.push(\" extends \");\r\n    //   sb.push(base.name); // TODO: fqn\r\n    // }\r\n    sb.push(\" {\\n\");\r\n    var staticMembers = element.prototype.members;\r\n    if (staticMembers) {\r\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\r\n    }\r\n    var instanceMembers = element.members;\r\n    if (instanceMembers) {\r\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(name: string, element: Interface): void {\r\n    this.visitClass(name, element);\r\n  }\r\n\r\n  visitField(name: string, element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(name);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitNamespace(name: string, element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"export namespace \");\r\n      sb.push(name);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member.name, member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitAlias(name: string, element: Element, originalName: string): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(\"export const \");\r\n    sb.push(name);\r\n    sb.push(\": typeof \");\r\n    sb.push(originalName);\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"any\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    sb.push(\"export default ASModule;\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          let instances = (<FunctionPrototype>member).instances;\r\n          if (instances) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instances = (<ClassPrototype>member).instances;\r\n          if (instances) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler,\r\n  IdentifierHandling,\r\n  isIllegalVariableIdentifier\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  TypeNode,\r\n  NamedTypeNode,\r\n  FunctionTypeNode,\r\n  ArrowKind,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  ClassExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  IndexSignatureDeclaration,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath,\r\n  nodeIsCallable,\r\n  nodeIsGenericCallable\r\n} from \"./ast\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Source file names to be requested next. */\r\n  backlog: string[] = new Array();\r\n  /** Source file names already seen, that is processed or backlogged. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Source file names already completely processed. */\r\n  donelog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n  /** Current file being parsed. */\r\n  currentSource: Source;\r\n  /** Dependency map **/\r\n  dependees: Map<string, Source> = new Map();\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    /** Source text of the file. */\r\n    text: string,\r\n    /** Normalized path of the file. */\r\n    path: string,\r\n    /** Whether this is an entry file. */\r\n    isEntry: bool\r\n  ): void {\r\n    // the frontend gives us paths with .ts endings\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n    // check if already processed\r\n    if (this.donelog.has(internalPath)) return;\r\n    this.donelog.add(internalPath); // do not parse again\r\n    this.seenlog.add(internalPath); // do not request again\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.USER_ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX)\r\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n            ? SourceKind.LIBRARY_ENTRY\r\n            : SourceKind.LIBRARY\r\n          : SourceKind.USER\r\n    );\r\n    var program = this.program;\r\n    program.sources.push(source);\r\n    this.currentSource = source;\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn, null);\r\n      if (statement) statements.push(statement);\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: NamespaceDeclaration | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [decorator];\r\n      else decorators.push(decorator);\r\n    }\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    var defaultStart: i32 = 0;\r\n    var defaultEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n      if (tn.skip(Token.DEFAULT)) {\r\n        defaultStart = tn.tokenPos;\r\n        defaultEnd = tn.pos;\r\n      }\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      } else {\r\n        if (startPos < 0) startPos = tn.tokenPos;\r\n        declareStart = startPos;\r\n        declareEnd = tn.pos;\r\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n      }\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        }\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (!tn.skip(Token.CLASS)) {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n          break;\r\n        } else {\r\n          tn.discard(state);\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\r\n            if (declareEnd) {\r\n              this.error(\r\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\r\n                tn.range(declareStart, declareEnd)\r\n              );\r\n            }\r\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\r\n            defaultStart = defaultEnd = 0; // consume\r\n          } else {\r\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\r\n          }\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n\r\n    // check if this an `export default` declaration\r\n    if (defaultEnd && statement !== null) {\r\n      switch (statement.kind) {\r\n        case NodeKind.ENUMDECLARATION:\r\n        case NodeKind.FUNCTIONDECLARATION:\r\n        case NodeKind.CLASSDECLARATION:\r\n        case NodeKind.INTERFACEDECLARATION:\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\r\n        }\r\n        default: {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(defaultStart, defaultEnd), \"default\"\r\n          );\r\n        }\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Obtains the dependee of the given imported file. */\r\n  getDependee(dependent: string): string | null {\r\n    var source = this.dependees.get(dependent);\r\n    if (source) return source.internalPath;\r\n    return null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    this.donelog.clear();\r\n    this.dependees.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): TypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    var type: TypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseFunctionType(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \")\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'void'\r\n    } else if (token == Token.VOID) {\r\n      type = Node.createNamedType(\r\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createNamedType(\r\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createNamedType(\r\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createNamedType(\r\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\r\n      let current = first;\r\n      let parameters: NamedTypeNode[] | null = null;\r\n      let nullable = false;\r\n\r\n      // Identifier ('.' Identifier)+\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\r\n          current.next = next;\r\n          current = next;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range(tn.pos)\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          if (!parameters) parameters = [<NamedTypeNode>parameter];\r\n          else parameters.push(<NamedTypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      while (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createNamedType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createNamedType(\r\n        Node.createSimpleTypeName(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function type, as used in type declarations. */\r\n  tryParseFunctionType(\r\n    tn: Tokenizer\r\n  ): FunctionTypeNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: NamedTypeNode | null = null;\r\n    var isSignature: bool = false;\r\n    var firstParamNameNoType: IdentifierExpression | null = null;\r\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.NAMEDTYPE) {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <NamedTypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skipIdentifier()) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (!isSignature) {\r\n              if (tn.peek() == Token.COMMA) {\r\n                isSignature = true;\r\n                tn.discard(state);\r\n              }\r\n            }\r\n            if (isSignature) {\r\n              let param = new ParameterNode();\r\n              param.parameterKind = kind;\r\n              param.name = name;\r\n              param.type = Node.createOmittedType(tn.range().atEnd);\r\n              if (!parameters) parameters = [ param ];\r\n              else parameters.push(param);\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                param.type.range\r\n              ); // recoverable\r\n            } else if (!parameters) {\r\n              // on '(' Identifier ^',' we don't yet know whether this is a\r\n              // parenthesized or a function type, hence we have to delay the\r\n              // respective diagnostic until we know for sure.\r\n              firstParamNameNoType = name;\r\n              firstParamKind = kind;\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        if (isSignature) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: TypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      if (!isSignature) {\r\n        isSignature = true;\r\n        tn.discard(state);\r\n        if (firstParamNameNoType) { // now we know\r\n          let param = new ParameterNode();\r\n          param.parameterKind = firstParamKind;\r\n          param.name = firstParamNameNoType;\r\n          param.type = Node.createOmittedType(firstParamNameNoType.range.atEnd);\r\n          if (!parameters) parameters = [ param ];\r\n          else parameters.push(param);\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            param.type.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createFunctionType(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skipIdentifier()) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (isIllegalVariableIdentifier(identifier.text)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        identifier.range\r\n      );\r\n    }\r\n    var flags = parentFlags;\r\n    if (tn.skip(Token.EXCLAMATION)) {\r\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n    }\r\n\r\n    var type: TypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    var range = Range.join(identifier.range, tn.range());\r\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\r\n      this.error(\r\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n        range);\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      range\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n      if (!member) return null;\r\n      members.push(<EnumValueDeclaration>member);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEBRACE)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    var seenOptional = false;\r\n    while (!tn.skip(Token.GREATERTHAN)) {\r\n      let typeParameter = this.parseTypeParameter(tn);\r\n      if (!typeParameter) return null;\r\n      if (typeParameter.defaultType !== null) {\r\n        seenOptional = true;\r\n      } else if (seenOptional) {\r\n        this.error(\r\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\r\n          typeParameter.range\r\n        );\r\n        typeParameter.defaultType = null;\r\n      }\r\n      if (!typeParameters) typeParameters = [ typeParameter ];\r\n      else typeParameters.push(typeParameter);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.GREATERTHAN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    if (!(typeParameters && typeParameters.length)) {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)? ('=' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: NamedTypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.NAMEDTYPE) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <NamedTypeNode>t;\r\n      }\r\n      let defaultType: NamedTypeNode | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.NAMEDTYPE) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        defaultType = <NamedTypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        defaultType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseParametersThis: NamedTypeNode | null = null;\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n    var thisType: TypeNode | null = null;\r\n\r\n    // check if there is a leading `this` parameter\r\n    this.parseParametersThis = null;\r\n    if (tn.skip(Token.THIS)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        thisType = this.parseType(tn); // reports\r\n        if (!thisType) return null;\r\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\r\n          this.parseParametersThis = <NamedTypeNode>thisType;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            thisType.range\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n        return null;\r\n      }\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          return parameters;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let param = this.parseParameter(tn, isConstructor); // reports\r\n      if (!param) return null;\r\n      if (seenRest && !reportedRest) {\r\n        this.error(\r\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n          seenRest.name.range\r\n        );\r\n        reportedRest = true;\r\n      }\r\n      switch (param.parameterKind) {\r\n        default: {\r\n          if (seenOptional) {\r\n            this.error(\r\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n              param.name.range\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ParameterKind.OPTIONAL: {\r\n          seenOptional = true;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          seenRest = param;\r\n          break;\r\n        }\r\n      }\r\n      parameters.push(param);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (isConstructor) {\r\n      if (tn.skip(Token.PUBLIC)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PUBLIC;\r\n      } else if (tn.skip(Token.PROTECTED)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PROTECTED;\r\n      } else if (tn.skip(Token.PRIVATE)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PRIVATE;\r\n      }\r\n      if (tn.peek() == Token.READONLY) {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek() != Token.COLON) { // modifier\r\n          tn.discard(state);\r\n          if (!startRange) startRange = tn.range();\r\n          accessFlags |= CommonFlags.READONLY;\r\n        } else { // identifier\r\n          tn.reset(state);\r\n        }\r\n      }\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skipIdentifier()) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: TypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n    var thisType = this.parseParametersThis;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: TypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createFunctionType(\r\n      parameters,\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      ArrowKind.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var arrowKind = ArrowKind.NONE;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skipIdentifier()) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    arrowKind: ArrowKind,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: TypeNode | null = null;\r\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n    }\r\n\r\n    if (arrowKind) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createFunctionType(\r\n      parameters,\r\n      returnType,\r\n      null, // TODO?\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (arrowKind) {\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        body = this.parseBlockStatement(tn, false);\r\n      } else {\r\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\r\n      }\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      CommonFlags.NONE,\r\n      arrowKind,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    var extendsType: NamedTypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.NAMEDTYPE) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <NamedTypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: NamedTypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\r\n          else implementsTypes.push(<NamedTypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (member) members.push(<DeclarationStatement>member);\r\n        else {\r\n          this.skipStatement(tn);\r\n          if (tn.skip(Token.ENDOFFILE)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    declaration.range.end = tn.pos;\r\n    return declaration;\r\n  }\r\n\r\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\r\n\r\n    // at 'class': Identifier? '{' ... '}'\r\n\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n\r\n    if (tn.skipIdentifier()) {\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    } else {\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration = Node.createClassDeclaration(\r\n      name,\r\n      [],\r\n      null,\r\n      null,\r\n      members,\r\n      null,\r\n      CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (member) members.push(<DeclarationStatement>member);\r\n        else {\r\n          this.skipStatement(tn);\r\n          if (tn.skip(Token.ENDOFFILE)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    declaration.range.end = tn.pos;\r\n    return Node.createClassExpression(declaration);\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\r\n\r\n    var decorators: DecoratorNode[] | null = null;\r\n    if (tn.skip(Token.AT)) {\r\n      do {\r\n        let decorator = this.parseDecorator(tn);\r\n        if (!decorator) break;\r\n        if (!decorators) decorators = [<DecoratorNode>decorator];\r\n        else decorators.push(<DecoratorNode>decorator);\r\n      } while (tn.skip(Token.AT));\r\n      if (decorators && isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n        );\r\n      }\r\n    }\r\n\r\n    // inherit ambient status\r\n    var flags = parent.flags & CommonFlags.AMBIENT;\r\n\r\n    // implemented methods are virtual\r\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\r\n\r\n    var accessStart = 0;\r\n    var accessEnd = 0;\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"public\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PUBLIC;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"private\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PRIVATE;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"protected\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PROTECTED;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    }\r\n\r\n    var staticStart = 0;\r\n    var staticEnd = 0;\r\n    var abstractStart = 0;\r\n    var abstractEnd = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"static\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      flags |= CommonFlags.INSTANCE;\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        if (isInterface) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(), \"abstract\"\r\n          );\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.peek() == Token.READONLY) {\r\n      let state = tn.mark();\r\n      tn.next();\r\n      if (tn.peek() != Token.COLON) { // modifier\r\n        tn.discard(state);\r\n        flags |= CommonFlags.READONLY;\r\n        readonlyStart = tn.tokenPos;\r\n        readonlyEnd = tn.pos;\r\n      } else { // identifier\r\n        tn.reset(state);\r\n      }\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (!isInterface) {\r\n      if (tn.skip(Token.GET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.GET;\r\n          isGetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.SET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.SET;\r\n          isSetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n        flags |= CommonFlags.CONSTRUCTOR;\r\n        isConstructor = true;\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    var name: IdentifierExpression;\r\n    if (isConstructor) {\r\n      name = Node.createConstructorExpression(tn.range());\r\n    } else {\r\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\r\n        // TODO: also handle symbols, which might have some of these modifiers\r\n        if (flags & CommonFlags.PUBLIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"public\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PROTECTED) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PRIVATE) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\r\n        if (!retIndex) return null;\r\n        tn.skip(Token.SEMICOLON);\r\n        return retIndex;\r\n      }\r\n      if (!tn.skipIdentifier()) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      let thisType = this.parseParametersThis;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: TypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createFunctionType(\r\n        parameters,\r\n        returnType,\r\n        thisType,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\r\n            tn.range(), name.text\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: TypeNode | null = null;\r\n      if (tn.skip(Token.QUESTION)) {\r\n        this.error(\r\n          DiagnosticCode.Optional_properties_are_not_supported,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      if (tn.skip(Token.EXCLAMATION)) {\r\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let range = tn.range(startPos, tn.pos);\r\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\r\n        this.error(\r\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n          range\r\n        );\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        range\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\r\n\r\n    // at: '[': 'key' ':' Type ']' ':' Type\r\n\r\n    if (decorators && decorators.length) {\r\n      this.error(\r\n        DiagnosticCode.Decorators_are_not_valid_here,\r\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n      ); // recoverable\r\n    }\r\n\r\n    var start = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let id = tn.readIdentifier();\r\n      if (id == \"key\") {\r\n        if (tn.skip(Token.COLON)) {\r\n          let keyType = this.parseType(tn);\r\n          if (!keyType) return null;\r\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              tn.range()\r\n            );\r\n            return null;\r\n          }\r\n          if (tn.skip(Token.CLOSEBRACKET)) {\r\n            if (tn.skip(Token.COLON)) {\r\n              let valueType = this.parseType(tn);\r\n              if (!valueType) return null;\r\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, tn.range(start, tn.pos));\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \":\"\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \":\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"key\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let declaration = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, declaration);\r\n          if (member) members.push(member);\r\n          else {\r\n            this.skipStatement(tn);\r\n            if (tn.skip(Token.ENDOFFILE)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        declaration.range.end = tn.pos;\r\n        tn.skip(Token.SEMICOLON);\r\n        return declaration;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    isDeclare: bool\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    var path: StringLiteralExpression | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseExportMember(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\r\n        this.dependees.set(internalPath, this.currentSource);\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\r\n          let internalPath = assert(ret.internalPath);\r\n          let source = tn.source;\r\n          if (!source.exportPaths) source.exportPaths = new Set();\r\n          source.exportPaths.add(internalPath);\r\n          if (!this.seenlog.has(internalPath)) {\r\n            this.dependees.set(internalPath, this.currentSource);\r\n            this.backlog.push(internalPath);\r\n          }\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"from\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportDefaultAlias(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    defaultStart: i32,\r\n    defaultEnd: i32\r\n  ): ExportStatement {\r\n\r\n    // at 'export' 'default': [Known-To-Be-]Identifier\r\n\r\n    var name = tn.readIdentifier();\r\n    var range = tn.range();\r\n    var ret = Node.createExportStatement([\r\n      Node.createExportMember(\r\n        Node.createIdentifierExpression(name, range),\r\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\r\n        range\r\n      )\r\n    ], null, false, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\r\n      members = new Array();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseImportDeclaration(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\r\n      let name = tn.readIdentifier();\r\n      let range = tn.range();\r\n      members = [\r\n        Node.createImportDeclaration(\r\n          Node.createIdentifierExpression(\"default\", range),\r\n          Node.createIdentifierExpression(name, range),\r\n          range\r\n        )\r\n      ];\r\n      if (tn.skip(Token.COMMA)) {\r\n        // TODO: default + star, default + members\r\n        this.error(\r\n          DiagnosticCode.Not_implemented,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n    } else { // import \"file\"\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.dependees.set(internalPath, this.currentSource);\r\n          this.backlog.push(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skipIdentifier()) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        if (tn.token == Token.ENDOFFILE) return null;\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skipIdentifier()) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(IdentifierHandling.PREFER);\r\n    var startPos = tn.tokenPos;\r\n    var precedence = determinePrecedenceStart(token);\r\n    if (precedence != Precedence.NONE) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.This_expression_is_not_constructable,\r\n            operand.range\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, precedence);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var expr: Expression | null = null;\r\n    switch (token) {\r\n\r\n      case Token.NULL: return Node.createNullExpression(tn.range());\r\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\r\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            ArrowKind.ARROW_PARENTHESIZED\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(IdentifierHandling.PREFER)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (\r\n                    !tn.skip(Token.COLON) &&\r\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\r\n                  ) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // optional parameter or parenthesized\r\n                case Token.QUESTION: {\r\n                  if (\r\n                    tn.skip(Token.COLON) ||   // optional parameter with type\r\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\r\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\r\n                  ) {\r\n                    tn.reset(state);\r\n                    return this.parseFunctionExpression(tn);\r\n                  }\r\n                  again = false; // parenthesized\r\n                  break;\r\n                  }\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        while (!tn.skip(Token.CLOSEBRACKET)) {\r\n          if (tn.peek() == Token.COMMA) {\r\n            expr = null; // omitted\r\n          } else {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n          }\r\n          elementExpressions.push(expr);\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACKET)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"]\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // ObjectLiteralExpression\r\n      case Token.OPENBRACE: {\r\n        let startPos = tn.tokenPos;\r\n        let names = new Array<IdentifierExpression>();\r\n        let values = new Array<Expression>();\r\n        let name: IdentifierExpression;\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          if (!tn.skipIdentifier()) {\r\n            if (!tn.skip(Token.STRINGLITERAL)) {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                tn.range(),\r\n              );\r\n              return null;\r\n            }\r\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\r\n            name.isQuoted = true;\r\n          } else {\r\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          }\r\n          names.push(name);\r\n          if (tn.skip(Token.COLON)) {\r\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!value) return null;\r\n            values.push(value);\r\n          } else if (!name.isQuoted) {\r\n            values.push(name);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACE)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        let identifierText = tn.readIdentifier();\r\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\r\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\r\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [\r\n              Node.createParameter(\r\n                identifier,\r\n                Node.createOmittedType(identifier.range.atEnd),\r\n                null,\r\n                ParameterKind.DEFAULT,\r\n                identifier.range\r\n              )\r\n            ],\r\n            ArrowKind.ARROW_SINGLE,\r\n            startPos\r\n          );\r\n        }\r\n        return identifier;\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\r\n          this.error(\r\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\r\n            tn.range()\r\n          );\r\n        }\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      case Token.CLASS: {\r\n        return this.parseClassExpression(tn);\r\n      }\r\n      default: {\r\n        if (token == Token.ENDOFFILE) {\r\n          this.error(\r\n            DiagnosticCode.Unexpected_end_of_text,\r\n            tn.range(startPos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Expression_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): TypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments: TypeNode[] | null = null;\r\n    do {\r\n      if (tn.peek() === Token.GREATERTHAN) {\r\n        break;\r\n      }\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      if (!typeArguments) typeArguments = [ type ];\r\n      else typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!expr) return null;\r\n      args.push(expr);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = Precedence.COMMA\r\n  ): Expression | null {\r\n    assert(precedence != Precedence.NONE);\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\r\n\r\n    var startPos = expr.range.start;\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn); // reports\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        case Token.EXCLAMATION: {\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.NONNULL,\r\n            expr,\r\n            null,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // InstanceOfExpression\r\n        case Token.INSTANCEOF: {\r\n          let isType = this.parseType(tn); // reports\r\n          if (!isType) return null;\r\n          expr = Node.createInstanceOfExpression(\r\n            expr,\r\n            isType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn); // reports\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\r\n            ? Precedence.COMMA + 1\r\n            : Precedence.COMMA\r\n          );\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (tn.skipIdentifier()) {\r\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            } else {\r\n              next = this.parseExpression(tn,\r\n                isRightAssociative(token)\r\n                  ? nextPrecedence\r\n                  : nextPrecedence + 1\r\n              );\r\n              if (!next) return null;\r\n            }\r\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\r\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\r\n              if (!expr) return null;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            next = this.parseExpression(tn,\r\n              isRightAssociative(token)\r\n                ? nextPrecedence\r\n                : nextPrecedence + 1\r\n            );\r\n            if (!next) return null;\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  private joinPropertyCall(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    expr: Expression,\r\n    call: CallExpression\r\n  ): Expression | null {\r\n    var callee = call.expression;\r\n    switch (callee.kind) {\r\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\r\n        call.expression = Node.createPropertyAccessExpression(\r\n          expr,\r\n          <IdentifierExpression>callee,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.CALL: { // join call target und wrap the original call around it\r\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\r\n        if (!inner) return null;\r\n        call.expression = inner;\r\n        call.range = tn.range(startPos, tn.pos);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          call.range\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return call;\r\n  }\r\n\r\n  private maybeParseCallExpression(\r\n    tn: Tokenizer,\r\n    expr: Expression\r\n  ): Expression {\r\n    if (nodeIsCallable(expr.kind)) {\r\n      let typeArguments: TypeNode[] | null = null;\r\n      while (\r\n        tn.skip(Token.OPENPAREN)\r\n        ||\r\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\r\n      ) {\r\n        let args = this.parseArguments(tn);\r\n        if (!args) break;\r\n        expr = Node.createCallExpression( // is again callable\r\n          expr,\r\n          typeArguments,\r\n          args,\r\n          tn.range(expr.range.start, tn.pos)\r\n        );\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.SEMICOLON      // end of the statement for sure\r\n      ) {\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          this.skipBlock(tn);\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipBlock(tn: Tokenizer): void {\r\n    // at '{': ... '}'\r\n    var depth = 1;\r\n    var again = true;\r\n    do {\r\n      switch (tn.next()) {\r\n        case Token.ENDOFFILE: {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          again = false;\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          ++depth;\r\n          break;\r\n        }\r\n        case Token.CLOSEBRACE: {\r\n          --depth;\r\n          if (!depth) again = false;\r\n          break;\r\n        }\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (again);\r\n  }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  NONE,\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET:\r\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\n/// <reference path=\"./node.d.ts\" />\r\n\r\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\r\nimport \"../../../std/portable/index\";\r\nimport \"./float\";\r\nimport \"./i64\";\r\n\r\nimport { Module } from \"../../module\";\r\n\r\nModule.prototype.toText = function(this: Module) {\r\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\r\n  // of unreachable statements not actually emitted by the compiler. Optimizing\r\n  // StackIR removes these again, but may also suppress useless code emitted by\r\n  // the compiler that's then no longer visible in tests. Both not ideal.\r\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\r\n};\r\n\r\nModule.prototype.toAsmjs = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitAsmjs();\r\n};\r\n","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\nglobal.binaryen = binaryen;\r\n\r\nfor (var key in binaryen) {\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\r\n}\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.__memory_allocate = binaryen._malloc;\r\nglobal.__memory_free = binaryen._free;\r\nglobal.__memory_copy = binaryen._memmove;\r\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\r\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nglobalScope.ASC_TARGET = 2; // Target.JS\r\nglobalScope.ASC_NO_ASSERT = false;\r\nglobalScope.ASC_MEMORY_BASE = 0;\r\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\r\nglobalScope.ASC_SHRINK_LEVEL = 0;\r\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\r\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\r\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\r\nglobalScope.ASC_FEATURE_SIMD = false;\r\nglobalScope.ASC_FEATURE_THREADS = false;\r\n\r\nvar F64 = new Float64Array(1);\r\nvar U64 = new Uint32Array(F64.buffer);\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value:  127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value:  32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value:   0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value:     0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value:          0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: false, writable: false },\r\n  \"MAX_VALUE\": { value: true,  writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\r\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\r\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nif (!String.prototype.replaceAll) {\r\n  Object.defineProperty(String.prototype, \"replaceAll\", {\r\n    value: function replaceAll(search, replacment) {\r\n      var res = this.split(search).join(replacment);\r\n      if (!search.length) res = replacment + res + replacment;\r\n      return res;\r\n    }\r\n  });\r\n}\r\n\r\nfunction defaultComparator(a, b) {\r\n  if (a === b) {\r\n    if (a !== 0) return 0;\r\n    a = 1 / a, b = 1 / b;\r\n  } else {\r\n    var nanA = a != a, nanB = b != b;\r\n    if (nanA | nanB) return nanA - nanB;\r\n    if (a == null) a = String(a);\r\n    if (b == null) b = String(b);\r\n  }\r\n  return a > b ? 1 : -1;\r\n}\r\n\r\nconst arraySort = Array.prototype.sort;\r\nArray.prototype.sort = function sort(comparator) {\r\n  return arraySort.call(this, comparator || defaultComparator);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isNullable\"] = function isNullable(arg) {\r\n  return true;\r\n}\r\n\r\nglobalScope[\"isReference\"] = function isReference(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isFunction\"] = function isFunction(arg) {\r\n  return typeof arg === \"function\";\r\n}\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\r\n  return expr\r\n    && typeof expr === 'object'\r\n    && typeof expr.length === 'number'\r\n    && expr.length >= 0\r\n    && Math.trunc(expr.length) === expr.length;\r\n};\r\n\r\nglobalScope[\"isDefined\"] = function isDefined(expr) {\r\n  return typeof expr !== \"undefined\";\r\n}\r\n\r\nglobalScope[\"isConstant\"] = function isConstant(expr) {\r\n  return false;\r\n};\r\n\r\nglobalScope[\"unchecked\"] = function unchecked(expr) {\r\n  return expr;\r\n};\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nglobalScope[\"JSMath\"] = Math;\r\n\r\nObject.defineProperties(globalScope[\"JSMath\"], {\r\n  sincos_sin: { value: 0.0, writable: true },\r\n  sincos_cos: { value: 0.0, writable: true },\r\n  signbit: {\r\n    value: function signbit(x) {\r\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\r\n    }\r\n  },\r\n  sincos: {\r\n    value: function sincos(x) {\r\n      this.sincos_sin = Math.sin(x);\r\n      this.sincos_cos = Math.cos(x);\r\n    }\r\n  }\r\n});\r\n\r\nglobalScope[\"memory\"] = (() => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n  return {\r\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\r\n      if (!(size >>>= 0)) return 0;\r\n      if (HEAP_OFFSET + size > HEAP.length) {\r\n        var oldHeap = HEAP;\r\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n        HEAP.set(oldHeap);\r\n      }\r\n      var ptr = HEAP_OFFSET;\r\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n      return ptr;\r\n    },\r\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\r\n      HEAP.fill(value, dest, dest + size);\r\n    },\r\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\r\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\r\n      HEAP.copyWithin(dest, src, src + size);\r\n    },\r\n    reset: globalScope[\"__memory_reset\"] || function reset() {\r\n      HEAP = new Uint8Array(0);\r\n      HEAP_OFFSET = 0;\r\n    }\r\n  };\r\n})();\r\n\r\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\r\n  HEAP[(ptr | 0) + (offset | 0)] = value;\r\n};\r\n\r\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\r\n  return HEAP[(ptr | 0) + (offset | 0)];\r\n};\r\n\r\nglobalScope[\"unmanaged\"] = function() {};\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_zero = Long.ZERO;\r\n\r\nglobal.i64_one = Long.ONE;\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_eq = function(left, right) {\r\n  return left.eq(right);\r\n};\r\n\r\nglobal.i64_ne = function(left, right) {\r\n  return left.ne(right);\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n/** Indicates specific features to activate. */\r\nexport const enum Feature {\r\n  /** No additional features. */\r\n  NONE = 0,\r\n  /** Sign extension operations. */\r\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\r\n  /** Mutable global imports and exports. */\r\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\r\n  /** Non-trapping float to integer operations. */\r\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  /** Bulk memory operations. */\r\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  /** SIMD types and operations. */\r\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\r\n  /** Threading and atomic operations. */\r\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\r\n  /** Exception handling operations. */\r\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\r\n  /** Tail call operations. */\r\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\r\n  /** Reference types. */\r\n  REFERENCE_TYPES = 1 << 8 // see: https://github.com/WebAssembly/reference-types\r\n}\r\n\r\n/** Gets the name of the specified feature one would specify on the command line. */\r\nexport function featureToString(feature: Feature): string {\r\n  switch (feature) {\r\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\r\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\r\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\r\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\r\n    case Feature.SIMD: return \"simd\";\r\n    case Feature.THREADS: return \"threads\";\r\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\r\n    case Feature.TAIL_CALLS: return \"tail-calls\";\r\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\r\n  }\r\n  assert(false);\r\n  return \"\";\r\n}\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64,\r\n  /** Portable. */\r\n  JS\r\n}\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\r\n//    3                   2                   1\r\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\r\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\r\n// │                             count                             │\r\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\r\n// │                      Typeinfo#flags [id=0]                    │ id < count\r\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\r\n// │                      Typeinfo#base  [id=0]                    │\r\n// ├───────────────────────────────────────────────────────────────┤\r\n// │                              ...                              │\r\n\r\n/** Runtime type information data structure. */\r\n@unmanaged\r\nexport class Typeinfo {\r\n  /** Flags describing the shape of this class type. */\r\n  flags: TypeinfoFlags;\r\n  /** Base class id or `0` if none. */\r\n  base: u32;\r\n}\r\n\r\n/** Runtime type information flags. */\r\nexport const enum TypeinfoFlags {\r\n  /** No specific flags. */\r\n  NONE = 0,\r\n  /** Type is an `ArrayBufferView`. */\r\n  ARRAYBUFFERVIEW = 1 << 0,\r\n  /** Type is an `Array`. */\r\n  ARRAY = 1 << 1,\r\n  /** Type is a `Set`. */\r\n  SET = 1 << 2,\r\n  /** Type is a `Map`. */\r\n  MAP = 1 << 3,\r\n  /** Type is inherently acyclic. */\r\n  ACYCLIC = 1 << 4,\r\n  /** Value alignment of 1 byte. */\r\n  VALUE_ALIGN_0 = 1 << 5,\r\n  /** Value alignment of 2 bytes. */\r\n  VALUE_ALIGN_1 = 1 << 6,\r\n  /** Value alignment of 4 bytes. */\r\n  VALUE_ALIGN_2 = 1 << 7,\r\n  /** Value alignment of 8 bytes. */\r\n  VALUE_ALIGN_3 = 1 << 8,\r\n  /** Value alignment of 16 bytes. */\r\n  VALUE_ALIGN_4 = 1 << 9,\r\n  /** Value is a signed type. */\r\n  VALUE_SIGNED = 1 << 10,\r\n  /** Value is a float type. */\r\n  VALUE_FLOAT = 1 << 11,\r\n  /** Value type is nullable. */\r\n  VALUE_NULLABLE = 1 << 12,\r\n  /** Value type is managed. */\r\n  VALUE_MANAGED = 1 << 13,\r\n  /** Key alignment of 1 byte. */\r\n  KEY_ALIGN_0 = 1 << 14,\r\n  /** Key alignment of 2 bytes. */\r\n  KEY_ALIGN_1 = 1 << 15,\r\n  /** Key alignment of 4 bytes. */\r\n  KEY_ALIGN_2 = 1 << 16,\r\n  /** Key alignment of 8 bytes. */\r\n  KEY_ALIGN_3 = 1 << 17,\r\n  /** Key alignment of 16 bytes. */\r\n  KEY_ALIGN_4 = 1 << 18,\r\n  /** Key is a signed type. */\r\n  KEY_SIGNED = 1 << 19,\r\n  /** Key is a float type. */\r\n  KEY_FLOAT = 1 << 20,\r\n  /** Key type is nullable. */\r\n  KEY_NULLABLE = 1 << 21,\r\n  /** Key type is managed. */\r\n  KEY_MANAGED = 1 << 22\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport { Target, Feature } from \"./common\";\r\nimport { Compiler, Options } from \"./compiler\";\r\nimport { Decompiler } from \"./decompiler\";\r\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\r\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\r\nimport { Module } from \"./module\";\r\nimport { Parser } from \"./parser\";\r\nimport { Program } from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(\r\n  /** Source text of the file. */\r\n  text: string,\r\n  /** Normalized path of the file. */\r\n  path: string,\r\n  /** Whether this is an entry file. */\r\n  isEntry: bool = false,\r\n  /** Parser reference. */\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the path of the dependee of a given imported file. */\r\nexport function getDependee(parser: Parser, file: string): string | null {\r\n  return parser.getDependee(file);\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `sharedMemory` option. */\r\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\r\n  options.sharedMemory = sharedMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(alias, name);\r\n}\r\n\r\n/** Sets the `explicitStart` option. */\r\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\r\n  options.explicitStart = explicitStart;\r\n}\r\n\r\n/** Sets the `noUnsafe` option. */\r\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\r\n  options.noUnsafe = noUnsafe;\r\n}\r\n\r\n/** Sign extension operations. */\r\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\r\n/** Mutable global imports and exports. */\r\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\r\n/** Non-trapping float to int conversion operations. */\r\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\r\n/** Bulk memory operations. */\r\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\r\n/** SIMD types and operations. */\r\nexport const FEATURE_SIMD = Feature.SIMD;\r\n/** Threading and atomic operations. */\r\nexport const FEATURE_THREADS = Feature.THREADS;\r\n/** Exception handling operations. */\r\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\r\n/** Tail call operations. */\r\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\r\n/** Reference types. */\r\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\r\n\r\n/** Enables a specific feature. */\r\nexport function enableFeature(options: Options, feature: Feature): void {\r\n  options.features |= feature;\r\n}\r\n\r\n/** Disables a specific feature. */\r\nexport function disableFeature(options: Options, feature: Feature): void {\r\n  options.features &= ~feature;\r\n}\r\n\r\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\r\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\r\n  options.optimizeLevelHint = optimizeLevel;\r\n  options.shrinkLevelHint = shrinkLevel;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Obtains the source of the given file. */\r\nexport function getSource(program: Program, internalPath: string): string | null {\r\n  return program.getSource(internalPath);\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Builds a JSON file of a program's runtime type information. */\r\nexport function buildRTTI(program: Program): string {\r\n  var sb = new Array<string>();\r\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\r\n  for (let cls of program.managedClasses.values()) {\r\n    sb.push(\"    \\\"\");\r\n    sb.push(cls.internalName);\r\n    sb.push(\"\\\",\\n\");\r\n  }\r\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\r\n  for (let cls of program.managedClasses.values()) {\r\n    let base = cls.base;\r\n    sb.push(\"    \");\r\n    sb.push(base ? base.id.toString() : \"0\");\r\n    sb.push(\",\\n\");\r\n  }\r\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\r\n  for (let cls of program.managedClasses.values()) {\r\n    sb.push(\"    \");\r\n    sb.push(cls.rttiFlags.toString());\r\n    sb.push(\",\\n\");\r\n  }\r\n  sb.push(\"  ]\\n}\\n\");\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX } from \"./common\";\r\n\r\n// Full API\r\nexport * from \"./ast\";\r\n// export * from \"./binary\";\r\nexport * from \"./common\";\r\nexport * from \"./compiler\";\r\nexport * from \"./decompiler\";\r\nexport * from \"./definitions\";\r\nexport * from \"./diagnosticMessages.generated\";\r\nexport * from \"./diagnostics\";\r\nexport * from \"./flow\";\r\nexport * from \"./module\";\r\nexport * from \"./parser\";\r\nexport * from \"./program\";\r\nexport * from \"./resolver\";\r\nexport * from \"./tokenizer\";\r\nexport * from \"./types\";\r\nexport * from \"./util/index\";\r\n","/** @module util *//***/\r\n\r\n/** Tests if the bit at the specified index is set within a 64-bit map. */\r\nexport function bitsetIs(map: I64, index: i32): bool {\r\n  assert(index >= 0 && index < 64);\r\n  return i64_ne(\r\n    i64_and(\r\n      map,\r\n      i64_shl(\r\n        i64_one,\r\n        i64_new(index)\r\n      )\r\n    ),\r\n    i64_zero\r\n  );\r\n}\r\n\r\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\r\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\r\n  assert(index >= 0 && index < 64);\r\n  return isSet\r\n    ? i64_or(\r\n        map,\r\n        i64_shl(\r\n          i64_one,\r\n          i64_new(index)\r\n        )\r\n      )\r\n    : i64_and(\r\n        map,\r\n        i64_not(\r\n          i64_shl(\r\n            i64_one,\r\n            i64_new(index)\r\n          )\r\n        )\r\n      );\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode.A && c <= CharCode.Z\r\n      || c == CharCode._\r\n      || c == CharCode.DOLLAR\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode._\r\n      || c == CharCode.DOLLAR\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n  var midVal: u16;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + ((hi - lo) >> 1);\r\n    mid -= (mid & 1);\r\n    midVal = map[mid];\r\n    if (midVal <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < midVal) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\r\n  if (original) {\r\n    let cloned = new Array<V>(original.length);\r\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\r\n    return cloned;\r\n  }\r\n  return new Array<V>();\r\n}\r\n\r\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\r\n  if (original) {\r\n    let cloned = new Set<V>();\r\n    for (let v of original) cloned.add(v);\r\n    return cloned;\r\n  }\r\n  return new Set<V>();\r\n}\r\n\r\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\r\n  var cloned = new Map<K,V>();\r\n  if (original) {\r\n    for (let [k, v] of original) cloned.set(k, v);\r\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\r\n  } else if (overrides) {\r\n    for (let [k, v] of overrides) cloned.set(k, v);\r\n  }\r\n  return cloned;\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nimport {\r\n  PATH_DELIMITER\r\n} from \"../common\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + PATH_DELIMITER + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  if (pos <= 1) {\r\n    if (pos == 0) return \".\";\r\n    if (normalizedPath.charCodeAt(0) == separator) {\r\n      return normalizedPath;\r\n    }\r\n  }\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\n/** Reads an 8-bit integer from the specified buffer. */\r\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset];\r\n}\r\n\r\n/** Writes an 8-bit integer to the specified buffer. */\r\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset] = value;\r\n}\r\n\r\n/** Reads a 16-bit integer from the specified buffer. */\r\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8;\r\n}\r\n\r\n/** Writes a 16-bit integer to the specified buffer. */\r\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n}\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n"],"sourceRoot":""}