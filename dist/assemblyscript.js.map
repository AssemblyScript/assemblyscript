{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__19__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","null_","true_","false_","this_","super_","constructor","LibrarySymbols","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","ArrayBuffer","Math","Mathf","memory","allocate","abort","main","length","byteLength","pow","mod","__export","isPowerOf2","x","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","common_1","tokenizer_1","Token","Range","NodeKind","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","Node","createTypeName","typeName","TypeName","identifier","next","createSimpleTypeName","createIdentifierExpression","createType","typeArguments","isNullable","type","TypeNode","createOmittedType","createTypeParameter","extendsType","defaultType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createSignature","parameters","returnType","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","flags","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","localName","exportedName","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","foreignName","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","arrowKind","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","_super","__extends","_this","apply","TYPENAME","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","NONE","is","flag","isAny","set","DecoratorKind","SIGNATURE","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","START","UNMANAGED","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","BINARY","numTypeArguments","numArguments","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","STRING","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","SOURCE","parent","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","LIBRARY","DeclarationStatement","INDEXSIGNATUREDECLARATION","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","CONTINUE","DO","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","ArrowKind","FUNCTIONDECLARATION","clone","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","endsWith","findDecorator","k","decorator","isTypeOmitted","OperatorKind","diagnostics_1","types_1","ast_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","sources","diagnosticsOffset","explicitStartFunction","filesByName","Map","elementsByName","elementsByDeclaration","instancesByName","typeClasses","arrayBufferInstance","arrayPrototype","stringInstance","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","nativeDummySignature","nativeSource","nativeFile","File","internalName","resolver","Resolver","makeNativeVariableDeclaration","makeNativeTypeDeclaration","makeNativeFunctionDeclaration","makeNativeNamespaceDeclaration","makeNativeFunction","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","GENERIC","hasFeature","registerConstantInteger","i64_new","isWasm64","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","registerNativeTypeClass","thisPrototype","extendsNode","baseElement","resolveTypeName","CLASS_PROTOTYPE","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","Error","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","parameterTypes","signatureReference","byteSize","_l","_m","isEntry","_o","_p","markModuleExport","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FIELD","_e","_f","setType","typeKind","className","classElement","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","lookupExport","fileQueuedExports","checkDecorators","acceptedFlags","decoratorKindToFlag","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeProperty","initializeMethod","STATIC","INTERFACE_PROTOTYPE","READONLY","ABSTRACT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","AMBIENT","INSTANCE","FILE","Module_cannot_have_multiple_start_functions","InterfacePrototype","Namespace","DECLARE","Element","program","shadowType","current","originalDeclaration","actual","isBound","TypedElement","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Parameter","Local","index","LOCAL","instances","boundPrototypes","toBound","classInstance","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","_isInterface","constructorPrototype","extends","basePtototype","Class","base","INTERFACE","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","isAssignableTo","target","lookupOverload","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","Interface","older","newer","copyMembers","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","NativeType","ExpressionId","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","HostOp","_BinaryenCurrentMemory","_BinaryenGrowMemory","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","MemorySegment","buffer","offset","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createV128","bytes","store","_BinaryenLiteralVec128","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","signed","ptr","align","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","None","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallIndirect","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","createMemoryCopy","size","_BinaryenMemoryCopy","createMemoryFill","_BinaryenMemoryFill","createSIMDExtract","vec","idx","_BinaryenSIMDExtract","createSIMDReplace","_BinaryenSIMDReplace","createSIMDShuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","createSIMDBitselect","cond","_BinaryenSIMDBitselect","createSIMDShift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","globalName","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getGetLocalIndex","getSetLocalIndex","_BinaryenSetLocalGetIndex","getSetLocalValue","_BinaryenSetLocalGetValue","isTeeLocal","_BinaryenSetLocalIsTee","getGetGlobalName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","getCallTarget","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Return","Break","Block","numChildren","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveType","context","reportMode","REPORT","parameterNodes","parameterNode","REST","parameterTypeNode","Type_expected","returnTypeNode","typeNode","typeArgumentNodes","possiblyPlaceholder","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","Expected_0_type_arguments_but_got_1","typeArgument","resolveTypeArguments","Cannot_find_name_0","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveIdentifier","ensureResolvedLazyGlobal","resolvePropertyAccessExpression","propertyAccess","contextualType","targetExpression","resolveExpression","propertyName","indexedGet","Index_signature_is_missing_in_type_0","resolveElementAccessExpression","elementAccess","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","actualFunction","resolveLiteralExpression","resolveCallExpression","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","builtins_1","Options","WASM32","importMemory","sharedMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","CompilerSymbols","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","BuiltinSymbols","HEAP_BASE","files","compileFile","compileExports","funcRef","ensureFunctionType","i64_align","isSharedMemory","i64_shr_u","makeModuleExports","compileIterateRoots","members_1","members_1_1","makeModuleExport","prefix","instanceName","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","nativeType","nativeSizeType","getterName","setterName","subPrefix","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","numLocals","initExpr","initializerNode","resolvedType","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","canOverflow","started","unshift","EqzI32","thisLocalIndex","EqzI64","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","An_implementation_cannot_be_declared_in_ambient_contexts","decoratorNodes","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","Nop","isLastStatementInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","inherit","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","continueLabel","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","pushBreakLabel","condExpr","makeIsTrueish","popBreakLabel","terminated","unset","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","inheritConditional","breakBlock","repeatBlock","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","inheritMutual","inlineReturnLabel","numCases","tempLocal","getTempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","EqI32","freeTempLocal","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","numDeclarations","initializers","isInlined","parentFunction","scopedLocals","_const_declarations_must_be_initialized","addScopedLocal","compileAssignmentWithValue","setLocalWrapped","compileInlineConstant","retainType","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","fromType","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","NeF32","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","NeF64","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","NeI64","WrapI64","ExtendI32","ExtendU32","PREFIX","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","LtI32","LtI64","LtU32","LtU64","LtF32","LtF64","GtI32","GtI64","GtU32","GtU64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","EqF32","EqF64","AllTrueVecI8x16","EqVecI8x16","NeI32","AnyTrueVecI8x16","NeVecI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI32","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","intType","ShlI32","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI32","ShrI64","ShrU32","ShrU64","AndI32","AndI64","OrI32","OrI64","XorI32","XorI64","getAndFreeTempLocal","compileUnaryOverload","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueWithCorrectType","tee","thisExpression","thisExpr","flow_2","nativeReturnType","thisExpr_1","elementExpr","tempLocalTarget","tempLocalElement","flow_3","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","compileCallInlinePrechecked","pop","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","createInline","baseInstance","addScopedAlias","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","numOperands","isCallImport","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","retainConstantType","flow_4","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","ensureStaticArray","elementType","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","buffer_offset","length_offset","isConst","compiledValues","constantValues","nativeElementType","arrayType","nativeArrayType","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseCtor","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","compileGetter","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","calcValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","allocateInstance","nativeFieldType","FlowFlags","wrappedLocals","wrappedLocalsExt","inlineFunction","branch","slice","wrapped","temps","scopedLocal","existingLocal","SCOPED","scopedAlias","scope","isLocalWrapped","bitsetIs","ext","bitsetSet","id","stack","other","i64_and","leftExt","rightExt","thisExt","minLength","min","canConversionOverflow","SetLocal","global_1","ClzI32","CtzI32","PopcntI32","MIN_VALUE","last","If","Select","Call","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","Loop","Switch","CallIndirect","SetGlobal","Store","i64_to_string","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","ExportsWalker","includePrivate","todo","seen","Set","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","NEARBindingsBuilder","typeMapping","nonNullableTypes","generatedEncodeFunctions","generatedDecodeFunctions","exportedClasses","exportedFunctions","build","generateArgsParser","generateWrapperFunction","visitInterface","fields","map","paramName","forEach","generateDecodeFunction","wrappedTypeName","generateHandlerMethods","generateEncodeFunction","generateFieldEncoder","valuePrefix","fieldsWithTypes","filter","indexOf","generateBasicSetterHandlers","nonBasicFields","generatePushHandler","isArrayType","setterType","setterValueType","matchingFields","encodeType","generateArrayHandlerMethods","methodName","tryUsingImport","getFields","sourceExpr","sourcesWithExport","getExports","console","log","importPath","generateHandler","cls","argType","fieldExpr","pushType","__spread","mainSource","copyImports","allImportsStr","concat","getImports","declarationsStr","IDLBuilder","indentLevel","indent","typeToString","TSDBuilder","numMembers","members_2","members_2_1","isInterface","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","Float64Array","Uint32Array","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","abs","floor","trunc","round","sqrt","y","sign","isTrueish","radix","parseInt","undefined","fromCodePoint","Number","isInteger","isArray","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","Float32Array","Int32Array","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","isAsm","evaluateConstantType","isFloat","isSigned","isReference","isString","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","SWALLOW","isConstant","sizeof","checkTypeRequired","alignof","alignLog2","ctz","checkArgsOptional","typeArgumentsRange","Type_0_has_no_property_1","popcnt","checkTypeOptional","rotl","rotr","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","tempLocal0","copysign","nearest","reinterpret","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","Add","Sub","And","Or","Xor","Xchg","atomic_cmpxchg","atomic_wait","atomic_notify","select","unreachable","memory_size","memory_grow","memory_copy","memory_fill","alreadyUnchecked","call_indirect","arg0Type","operandExprs","nativeParamTypes","operandType","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatVecI8x16","SplatVecI16x8","SplatVecI32x4","SplatVecI64x2","SplatVecF32x4","SplatVecF64x2","v128_extract_lane","ExtractLaneSVecI8x16","ExtractLaneUVecI8x16","ExtractLaneSVecI16x8","ExtractLaneUVecI16x8","ExtractLaneVecI32x4","ExtractLaneVecI64x2","ExtractLaneVecF32x4","ExtractLaneVecF64x2","maxIdx","v128_replace_lane","ReplaceLaneVecI8x16","ReplaceLaneVecI16x8","ReplaceLaneVecI32x4","ReplaceLaneVecI64x2","ReplaceLaneVecF32x4","ReplaceLaneVecF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","v128_sub","v128_mul","v128_div","v128_add_saturate","v128_sub_saturate","v128_min","v128_max","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","AddVecI8x16","AddVecI16x8","AddVecI32x4","AddVecI64x2","AddVecF32x4","AddVecF64x2","SubVecI8x16","SubVecI16x8","SubVecI32x4","SubVecI64x2","SubVecF32x4","SubVecF64x2","MulVecI8x16","MulVecI16x8","MulVecI32x4","MulVecF32x4","MulVecF64x2","DivVecF32x4","DivVecF64x2","AddSatSVecI8x16","AddSatUVecI8x16","AddSatSVecI16x8","AddSatUVecI16x8","SubSatSVecI8x16","SubSatUVecI8x16","SubSatSVecI16x8","SubSatUVecI16x8","MinVecF32x4","MinVecF64x2","MaxVecF32x4","MaxVecF64x2","EqVecI16x8","EqVecI32x4","EqVecF32x4","EqVecF64x2","NeVecI16x8","NeVecI32x4","NeVecF32x4","NeVecF64x2","LtSVecI8x16","LtUVecI8x16","LtSVecI16x8","LtUVecI16x8","LtSVecI32x4","LtUVecI32x4","LtVecF32x4","LtVecF64x2","LeSVecI8x16","LeUVecI8x16","LeSVecI16x8","LeUVecI16x8","LeSVecI32x4","LeUVecI32x4","LeVecF32x4","LeVecF64x2","GtSVecI8x16","GtUVecI8x16","GtSVecI16x8","GtUVecI16x8","GtSVecI32x4","GtUVecI32x4","GtVecF32x4","GtVecF64x2","GeSVecI8x16","GeUVecI8x16","GeSVecI16x8","GeUVecI16x8","GeSVecI32x4","GeUVecI32x4","GeVecF32x4","GeVecF64x2","v128_neg","v128_abs","v128_sqrt","v128_convert","v128_trunc","NegVecI8x16","NegVecI16x8","NegVecI32x4","NegVecI64x2","NegVecF32x4","NegVecF64x2","AbsVecF32x4","AbsVecF64x2","SqrtVecF32x4","SqrtVecF64x2","ConvertSVecI32x4ToVecF32x4","ConvertUVecI32x4ToVecF32x4","ConvertSVecI64x2ToVecF64x2","ConvertUVecI64x2ToVecF64x2","TruncSatSVecF32x4ToVecI32x4","TruncSatUVecF32x4ToVecI32x4","TruncSatSVecF64x2ToVecI64x2","TruncSatUVecF64x2ToVecI64x2","v128_shl","v128_shr","ShlVecI8x16","ShlVecI16x8","ShlVecI32x4","ShlVecI64x2","ShrSVecI8x16","ShrUVecI8x16","ShrSVecI16x8","ShrUVecI16x8","ShrSVecI32x4","ShrUVecI32x4","ShrSVecI64x2","ShrUVecI64x2","v128_and","v128_or","v128_xor","AndVec128","OrVec128","XorVec128","v128_not","NotVec128","v128_bitselect","v128_any_true","v128_all_true","AnyTrueVecI16x8","AnyTrueVecI32x4","AnyTrueVecI64x2","AllTrueVecI16x8","AllTrueVecI32x4","AllTrueVecI64x2","iterateRoots","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","i32_notify","i64_notify","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_s_f32x4_sat","i32x4_trunc_u_f32x4_sat","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_s_f64x2_sat","i64x2_trunc_u_f64x2_sat","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_s_i32x4","f32x4_convert_u_i32x4","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_s_i64x2","f64x2_convert_u_i64x2","v8x16_shuffle","tryDeferASM","messageArg","filenameArg","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","existingIndex","isDeclaredInLibrary","gcPrototype","gcInstance","nativeSizeSize","funcName","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","buildNEAR"],"mappings":"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AM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAG1D,SAASF,EAAmBp0G,EAAW45E,GACrC,GAAI55E,EAAO45E,EAAI,GAAI,OAAO,EAO1B,IALA,IAEI26B,EACAC,EAHA7pB,EAAK,EACLC,EAAKhR,EAAIr7E,OAINosF,EAAK,EAAIC,GAAI,CAIlB,GAHA2pB,EAAM5pB,GAAOC,EAAKD,GAAO,IAEzB6pB,EAAS56B,EADT26B,GAAc,EAANA,KAEMv0G,GAAQA,GAAQ45E,EAAI26B,EAAM,GACtC,OAAO,EAELv0G,EAAOw0G,EACT5pB,EAAK2pB,EAEL5pB,EAAK4pB,EAAM,EAGf,OAAO,ikBC9WT99G,EAAAg+G,UAAA,SAA6B9oC,GAC3B,QAD2B,IAAAA,MAAA,MACvBA,EAAU,CAEZ,IADA,IAAI+oC,EAAS,IAAI32G,MAAS4tE,EAASptE,QAC1BnH,EAAI,EAAGqhB,EAAIkzD,EAASptE,OAAQnH,EAAIqhB,IAAKrhB,EAAG44B,UAAU0kF,EAAOt9G,GAAKu0E,EAASv0E,IAChF,OAAOs9G,EAET,OAAO,IAAI32G,OAGbtH,EAAAk+G,QAAA,SAA2BhpC,WACzB,QADyB,IAAAA,MAAA,MACrBA,EAAU,CACZ,IAAI+oC,EAAS,IAAIx8B,QACjB,IAAc,IAAA08B,EAAAr0F,EAAAorD,GAAQkpC,EAAAD,EAAA1wG,QAAA2wG,EAAAp0F,KAAAo0F,EAAAD,EAAA1wG,OAAA,CAAjB,IAAI4wG,EAACD,EAAAx8G,MAAcq8G,EAAO/1F,IAAIm2F,qGACnC,OAAOJ,EAET,OAAO,IAAIx8B,KAGbzhF,EAAAg4D,QAAA,SAA6Bkd,EAAkCopC,wBAAlC,IAAAppC,MAAA,WAAkC,IAAAopC,MAAA,MAC7D,IAAIL,EAAS,IAAIv4F,IACjB,GAAIwvD,EAAU,KACZ,IAAmB,IAAAqpC,EAAAz0F,EAAAorD,GAAQspC,EAAAD,EAAA9wG,QAAA+wG,EAAAx0F,KAAAw0F,EAAAD,EAAA9wG,OAAA,CAAlB,IAAAigB,EAAAxD,EAAAs0F,EAAA58G,MAAA,GAACogB,EAAA0L,EAAA,GAAG2wF,EAAA3wF,EAAA,GAAgBuwF,EAAOniG,IAAIkG,EAAGq8F,qGAC3C,GAAIC,MAAW,IAAmB,IAAAG,EAAA30F,EAAAw0F,GAASI,EAAAD,EAAAhxG,QAAAixG,EAAA10F,KAAA00F,EAAAD,EAAAhxG,OAAA,CAAnB,IAAAwgB,EAAA/D,EAAAw0F,EAAA98G,MAAA,GAACogB,EAAAiM,EAAA,GAAGowF,EAAApwF,EAAA,GAAiBgwF,EAAOniG,IAAIkG,EAAGq8F,2GACtD,GAAIC,MACT,IAAmB,IAAAK,EAAA70F,EAAAw0F,GAASM,EAAAD,EAAAlxG,QAAAmxG,EAAA50F,KAAA40F,EAAAD,EAAAlxG,OAAA,CAAnB,IAAAygB,EAAAhE,EAAA00F,EAAAh9G,MAAA,GAACogB,EAAAkM,EAAA,GAAGmwF,EAAAnwF,EAAA,GAAiB+vF,EAAOniG,IAAIkG,EAAGq8F,qGAE9C,OAAOJ,kFCpBT,IAAAjyG,EAAAvL,EAAA,GAIMo+G,EAAS,GAMf,SAAgBtoG,EAAcH,GAK5B,IAJA,IAiBIymD,EAjBAx9C,EAAM,EACNzU,EAAMwL,EAAKtO,OAGRuX,EAAM,EAAIzU,GACK,IAApBwL,EAAKpL,WAAWqU,IAChBjJ,EAAKpL,WAAWqU,EAAM,IAAMw/F,GAE5Bx/F,GAAO,EAUT,KAPIA,EAAM,GAAKzU,EAAMwL,EAAKtO,UACxBsO,EAAOA,EAAKlL,UAAUmU,EAAKzU,GAC3BA,GAAOyU,EACPA,EAAM,GAIDA,EAAM,EAAIzU,GAAK,CAIpB,GAHAiyD,GAAQ,EAINzmD,EAAKpL,WAAWqU,IAAQw/F,GACA,IAAxBzoG,EAAKpL,WAAWqU,EAAM,GACtB,CAGA,IADAw9C,EAAQx9C,EAAM,GAAKzU,IAEjByU,EAAM,EAAIzU,GACVwL,EAAKpL,WAAWqU,EAAM,IAAMw/F,EAC5B,CACAzoG,EAAOymD,EACHzmD,EAAKlL,UAAU,EAAGmU,GAClBjJ,EAAKlL,UAAU,EAAGmU,GAAOjJ,EAAKlL,UAAUmU,EAAM,GAClDzU,GAAO,EACP,SAKF,IADAiyD,EAAQx9C,EAAM,GAAKzU,IACkB,IAAxBwL,EAAKpL,WAAWqU,EAAM,IACjCA,EAAM,EAAIzU,GACc,IAAxBwL,EAAKpL,WAAWqU,EAAM,IACtBjJ,EAAKpL,WAAWqU,EAAM,IAAMw/F,EAC5B,CAGA,IADA,IAAIC,EAAOz/F,IACFy/F,GAAQ,GACf,GAAI1oG,EAAKpL,WAAW8zG,IAASD,EAAW,CAClCx/F,EAAMy/F,GAAQ,GACS,IAAzB1oG,EAAKpL,WAAW8zG,EAAO,IACE,IAAzB1oG,EAAKpL,WAAW8zG,EAAO,KAEvB1oG,EAAOymD,EACHzmD,EAAKlL,UAAU,EAAG4zG,GAClB1oG,EAAKlL,UAAU,EAAG4zG,GAAQ1oG,EAAKlL,UAAUmU,EAAM,GACnDzU,GAAOyU,EAAM,EAAIy/F,EACjBz/F,EAAMy/F,EAAO,GAEf,MAKJ,GAAIA,EAAO,GAAKz/F,EAAM,IACT,GAAPA,GACgB,IAAlBjJ,EAAKpL,WAAW,IACE,IAAlBoL,EAAKpL,WAAW,IAChB,CAEAJ,GADAwL,EAAOA,EAAKlL,UAAUmU,EAAM,IACjBvX,OACX,WAKRuX,IAEF,OAAOzU,EAAM,EAAIwL,EAAO,IAc1B,SAAgB2oG,EAAQz0G,GACtB,IAAI+U,EAAM/U,EAAexC,OACzB,GAAIuX,GAAO,EAAG,CACZ,GAAW,GAAPA,EAAU,MAAO,IACrB,GAAI/U,EAAeU,WAAW,IAAM6zG,EAClC,OAAOv0G,EAGX,OAAS+U,EAAM,GACb,GAAI/U,EAAeU,WAAWqU,IAAQw/F,EACpC,OAAOv0G,EAAeY,UAAU,EAAGmU,GAGvC,MAAO,IA3GTrf,EAAAuW,gBAoFAvW,EAAAyW,YAAA,SAA4BnM,EAAwB00G,GAClD,OAAI10G,EAAekM,WAAW,QACrBlM,EAEFiM,EACLwoG,EAAQC,GAAUhzG,EAAApJ,eAAiB0H,IAKvCtK,EAAA++G,yFC5GA,IAAME,EAAW,KACXC,EAAW,OACXC,EAAW,WAGjBn/G,EAAA+lF,OAAA,SAAuB96E,EAAcwwC,GACnC,KAAOA,GAAS,GACdxwC,EAAGE,KAAKg0G,GACR1jE,GAAS,EAEPA,GAAS,IACXxwC,EAAGE,KAAK+zG,GACRzjE,GAAS,GAEPA,GACFxwC,EAAGE,KAAK8zG,kCCQZ,SAAgBG,EAAQpwE,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,EACtBD,EAAOC,EAAS,IAAM,GACtBD,EAAOC,EAAS,IAAM,GAI/B,SAAgBqpC,EAAS12E,EAAYotC,EAAoBC,GACvDD,EAAOC,GAAcrtC,EACrBotC,EAAOC,EAAS,GAAKrtC,IAAU,EAC/BotC,EAAOC,EAAS,GAAKrtC,IAAU,GAC/BotC,EAAOC,EAAS,GAAKrtC,IAAU,GAIjC,SAAgBy9G,EAAQrwE,EAAoBC,GAC1C,IAAIilD,EAAKkrB,EAAQpwE,EAAQC,GACrBklD,EAAKirB,EAAQpwE,EAAQC,EAAS,GAClC,OAAO1mB,QAAQ2rE,EAAIC,oDAzCrBn0F,EAAAs/G,OAAA,SAAuBtwE,EAAoBC,GACzC,OAAOD,EAAOC,IAIhBjvC,EAAAi5E,QAAA,SAAwBr3E,EAAYotC,EAAoBC,GACtDD,EAAOC,GAAUrtC,GAInB5B,EAAAu/G,QAAA,SAAwBvwE,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,GAI/BjvC,EAAAw4E,SAAA,SAAyB52E,EAAYotC,EAAoBC,GACvDD,EAAOC,GAAcrtC,EACrBotC,EAAOC,EAAS,GAAKrtC,IAAU,GAIjC5B,EAAAo/G,UAQAp/G,EAAAs4E,WAQAt4E,EAAAq/G,UAOAr/G,EAAAk5E,SAAA,SAAyBt3E,EAAYotC,EAAoBC,GACvDqpC,EAAS59B,QAAQ94C,GAAQotC,EAAQC,GACjCqpC,EAAS39B,SAAS/4C,GAAQotC,EAAQC,EAAS,IAI7CjvC,EAAAw/G,QAAA,SAAwBxwE,EAAoBC,GAC1C,OAAO0kD,WAAWyrB,EAAQpwE,EAAQC,KAIpCjvC,EAAAm5E,SAAA,SAAyBv3E,EAAYotC,EAAoBC,GACvDqpC,EAASob,WAAW9xF,GAAQotC,EAAQC,IAItCjvC,EAAAy/G,QAAA,SAAwBzwE,EAAoBC,GAC1C,OAAO4kD,WAAWwrB,EAAQrwE,EAAQC,KAIpCjvC,EAAAo5E,SAAA,SAAyBx3E,EAAYotC,EAAoBC,GACvD,IAAIywE,EAAW9rB,WAAWhyF,GAC1B02E,EAAS59B,QAAQglE,GAAW1wE,EAAQC,GACpCqpC,EAAS39B,SAAS+kE,GAAW1wE,EAAQC,EAAS,iJCnEhD,IAAArU,EAAAn6B,EAAA,IAOAk/G,EAAAl/G,EAAA,IAIAm/G,EAAAn/G,EAAA,IAMA2hB,EAAA3hB,EAAA,GAyCoCT,EAAA6/G,iBAtClCz9F,EAAA/W,wBAOF,IAAAy0G,EAAAr/G,EAAA,IASAT,EAAA4mF,UAAA,SAA0Bj8E,EAAcyL,EAAc+W,EACpD4yF,GAIA,YALoD,IAAA5yF,OAAA,QACpD,IAAA4yF,MAAA,MAEKA,IAAQA,EAAS,IAAID,EAAAx5B,QAC1By5B,EAAOn5B,UAAUj8E,EAAMyL,EAAM+W,GACtB4yF,GAIT//G,EAAAmoF,SAAA,SAAyB43B,GACvB,OAAOA,EAAO53B,YAIhBnoF,EAAAggH,eAAA,SAA+BD,GAC7B,IAAIrtF,EAAUqtF,EAAOrtF,QACrB,OAAOA,EAAQnN,kBAAoBmN,EAAQlnB,YAAY1D,OACnD4qB,EAAQlnB,YAAYknB,EAAQnN,qBAC5B,MAONvlB,EAAAigH,OAAA,SAAuBz2G,GACrB,OAAOA,EAAQd,UAAY0Z,EAAA/Z,mBAAmBM,MAIhD3I,EAAAkgH,UAAA,SAA0B12G,GACxB,OAAOA,EAAQd,UAAY0Z,EAAA/Z,mBAAmBO,SAIhD5I,EAAAmgH,QAAA,SAAwB32G,GACtB,OAAOA,EAAQd,UAAY0Z,EAAA/Z,mBAAmBQ,OAIhD7I,EAAAogH,cAAA,WACE,OAAO,IAAIxlF,EAAA0iC,SAIbt9D,EAAAqgH,UAAA,SAA0Bz4F,EAAkByR,GAC1CzR,EAAQyR,OAASA,GAInBr5B,EAAAsgH,YAAA,SAA4B14F,EAAkBa,GAC5Cb,EAAQa,SAAWA,GAIrBzoB,EAAAugH,gBAAA,SAAgC34F,EAAkB41C,GAChD51C,EAAQ41C,aAAeA,GAIzBx9D,EAAAwgH,gBAAA,SAAgC54F,EAAkB61C,GAChD71C,EAAQ61C,aAAeA,GAIzBz9D,EAAAygH,eAAA,SAA+B74F,EAAkB81C,GAC/C91C,EAAQ81C,YAAcA,GAIxB19D,EAAA0gH,aAAA,SAA6B94F,EAAkBwP,GAC7CxP,EAAQwP,UAAYA,GAItBp3B,EAAA2gH,cAAA,SAA8B/4F,EAAkBc,GAC9Cd,EAAQc,WAAaA,GAIvB1oB,EAAA4gH,eAAA,SAA+Bh5F,EAAkB1mB,EAAcmZ,GAC7D,IAAIiS,EAAgB1E,EAAQ0E,cACvBA,IAAe1E,EAAQ0E,cAAgBA,EAAgB,IAAI5G,KAChE4G,EAAcxQ,IAAI5a,EAAMmZ,IAIbra,EAAA6gH,uBAAsB,EAEtB7gH,EAAA8gH,uBAAsB,EAEtB9gH,EAAA+gH,oBAAmB,EAEnB/gH,EAAAghH,aAAY,EAEZhhH,EAAAihH,gBAAe,GAG5BjhH,EAAAkhH,cAAA,SAA8Bt5F,EAAkBg2C,GAC9Ch2C,EAAQ+1C,UAAYC,GAItB59D,EAAAmhH,sBAAA,SAAsCv5F,EAAkBw5F,EAAoBC,GAC1Ez5F,EAAQe,kBAAoBy4F,EAC5Bx5F,EAAQgB,gBAAkBy4F,GAI5BrhH,EAAAshH,cAAA,SAA8BvB,GAC5B,OAAOA,EAAOtpD,UAIhBz2D,EAAAuhH,eAAA,SAA+B7uF,EAAkB9K,GAC/C,YAD+C,IAAAA,MAAA,MACxC,IAAIgT,EAAAujC,SAASzrC,EAAS9K,GAASs3C,WAIxCl/D,EAAAwhH,gBAAA,SAAgCvhH,GAC9B,IAAIm+E,EAAa,IAAIuhC,EAAA1hC,WAErB,OADAG,EAAWD,UAAUl+E,GACdm+E,EAAW3nB,UAIpBz2D,EAAAyhH,SAAA,SAAyB/uF,GACvB,OAAOktF,EAAA/5B,WAAW/C,MAAMpwD,IAI1B1yB,EAAA0hH,SAAA,SAAyBhvF,GACvB,OAAOktF,EAAA35B,WAAWnD,MAAMpwD,IAI1B1yB,EAAA2hH,UAAA,SAA0BjvF,GACxB,OAAOktF,EAAAr9B,oBAAoBO,MAAMpwD,IAInC,IAAA1mB,EAAAvL,EAAA,GAAST,EAAAoD,eAAA4I,EAAA5I,eAGT8E,EAAAzH,EAAA,IAEAyH,EAAAzH,EAAA,IACAyH,EAAAzH,EAAA,KACAyH,EAAAzH,EAAA,KACAyH,EAAAzH,EAAA,KACAyH,EAAAzH,EAAA,KACAyH,EAAAzH,EAAA,IACAyH,EAAAzH,EAAA,KACAyH,EAAAzH,EAAA,IACAyH,EAAAzH,EAAA,KACAyH,EAAAzH,EAAA,IACAyH,EAAAzH,EAAA,IACAyH,EAAAzH,EAAA,IACAyH,EAAAzH,EAAA,IACAyH,EAAAzH,EAAA","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__19__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n}\n\n/** Common standard library symbols. */\nexport namespace LibrarySymbols {\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  // runtime\n  export const memory = \"memory\";\n  export const allocate = \"allocate\";\n  export const abort = \"abort\";\n  export const main = \"main\";\n  // other\n  export const length = \"length\";\n  export const byteLength = \"byteLength\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(range.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(range.line.toString(10));\n      sb.push(\",\");\n      sb.push(range.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.ASSERTION: // if kind=NONNULL\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PARENTHESIZED:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.SUPER: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createType(\n    name: TypeName,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    defaultType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters;\n    sig.returnType = returnType;\n    sig.explicitThisType = explicitThisType;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: TypeNode,\n    valueType: CommonTypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  START\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.l: {\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        if (nameStr == \"start\") return DecoratorKind.START;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: TypeNode;\n  /** Value type. */\n  valueType: CommonTypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: CommonTypeNode): bool {\n  if (type.kind == NodeKind.TYPE) {\n    let name = (<TypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  LibrarySymbols\n} from \"./common\";\n\nimport {\n  Options,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  SignatureNode,\n  TypeParameterNode,\n  CommonTypeNode,\n  TypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n  /** Explicitly annotated start function. */\n  explicitStartFunction: FunctionPrototype | null = null;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes backing basic types like `i32`. */\n  typeClasses: Map<TypeKind,Class> = new Map();\n\n  // runtime references\n\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class | null = null;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n  /** Abort function reference, if present. */\n  abortInstance: Function | null = null;\n  /** Memory allocation function. */\n  memoryAllocateInstance: Function | null = null;\n\n  // gc integration\n\n  /** Whether a garbage collector is present or not. */\n  hasGC: bool = false;\n  /** Garbage collector allocation function. */\n  gcAllocateInstance: Function | null = null;\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\n  gcLinkInstance: Function | null = null;\n  /** Garbage collector mark function called to on reachable managed objects. */\n  gcMarkInstance: Function | null = null;\n  /** Size of a managed object header. */\n  gcHeaderSize: u32 = 0;\n  /** Offset of the GC hook. */\n  gcHookOffset: u32 = 0;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: SignatureNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createSignature([],\n        Node.createType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    assert(elementsByDeclaration.has(declaration));\n    return elementsByDeclaration.get(declaration)!;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n\n    // register compiler hints\n    this.registerConstantInteger(LibrarySymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? 2 : 1));\n    this.registerConstantInteger(LibrarySymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range,\n            queuedImport.foreignPath,\n            foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register classes backing basic types\n    this.registerNativeTypeClass(TypeKind.I8, LibrarySymbols.I8);\n    this.registerNativeTypeClass(TypeKind.I16, LibrarySymbols.I16);\n    this.registerNativeTypeClass(TypeKind.I32, LibrarySymbols.I32);\n    this.registerNativeTypeClass(TypeKind.I64, LibrarySymbols.I64);\n    this.registerNativeTypeClass(TypeKind.ISIZE, LibrarySymbols.Isize);\n    this.registerNativeTypeClass(TypeKind.U8, LibrarySymbols.U8);\n    this.registerNativeTypeClass(TypeKind.U16, LibrarySymbols.U16);\n    this.registerNativeTypeClass(TypeKind.U32, LibrarySymbols.U32);\n    this.registerNativeTypeClass(TypeKind.U64, LibrarySymbols.U64);\n    this.registerNativeTypeClass(TypeKind.USIZE, LibrarySymbols.Usize);\n    this.registerNativeTypeClass(TypeKind.BOOL, LibrarySymbols.Bool);\n    this.registerNativeTypeClass(TypeKind.F32, LibrarySymbols.F32);\n    this.registerNativeTypeClass(TypeKind.F64, LibrarySymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, LibrarySymbols.V128);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let elementsByName = this.elementsByName;\n          let element = elementsByName.get(name);\n          if (element) {\n            if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n            elementsByName.set(alias, element);\n          }\n          else throw new Error(\"no such global element: \" + name);\n        }\n      }\n    }\n\n    // register global library elements\n    {\n      let element: Element | null;\n      if (element = this.lookupGlobal(LibrarySymbols.String)) {\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n        this.stringInstance = resolver.resolveClass(<ClassPrototype>element, null);\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.ArrayBuffer)) {\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n        this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.Array)) {\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n        this.arrayPrototype = <ClassPrototype>element;\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.abort)) {\n        assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n        this.abortInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.memory)) {\n        if (element = element.lookupInSelf(LibrarySymbols.allocate)) {\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.memoryAllocateInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n        }\n      }\n    }\n\n    // register GC hooks if present\n    // FIXME: think about a better way than globals to model this, maybe a GC namespace that can be\n    // dynamically extended by a concrete implementation but then has `@unsafe` methods that normal\n    // code cannot call without explicitly enabling it with a flag.\n    if (\n      this.elementsByName.has(\"__gc_allocate\") &&\n      this.elementsByName.has(\"__gc_link\") &&\n      this.elementsByName.has(\"__gc_mark\")\n    ) {\n      // __gc_allocate(usize, (ref: usize) => void): usize\n      let element = <Element>this.elementsByName.get(\"__gc_allocate\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      let signature = gcAllocateInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1].signatureReference);\n      assert(signature.returnType == this.options.usizeType);\n\n      // __gc_link(usize, usize): void\n      element = <Element>this.elementsByName.get(\"__gc_link\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcLinkInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      // __gc_mark(usize): void\n      element = <Element>this.elementsByName.get(\"__gc_mark\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcMarkInstance.signature;\n      assert(signature.parameterTypes.length == 1);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      this.gcAllocateInstance = gcAllocateInstance;\n      this.gcLinkInstance = gcLinkInstance;\n      this.gcMarkInstance = gcMarkInstance;\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\n      this.gcHookOffset =  gcHookOffset;\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\n      this.hasGC = true;\n    }\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (!(file.source.isEntry && exports)) continue;\n      for (let element of exports.values()) this.markModuleExport(element);\n    }\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\n    assert(!this.typeClasses.has(typeKind));\n    var element = this.lookupGlobal(className);\n    if (element) {\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n      if (classElement) this.typeClasses.set(typeKind, classElement);\n    }\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): void {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let actual = elementsByName.get(name);\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (actual !== element) {\n        let merged = tryMerge(elementsByName.get(name)!, element);\n        if (!merged) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, name\n          );\n          return;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name);\n    return null;\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = decoratorNameToKind(decorator.name);\n        let flag = decoratorKindToFlag(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (decorator.range.source.isLibrary) {\n              flags |= flag;\n            } else {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning( // TODO: not yet supported\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators,\n          (declaration.is(CommonFlags.READONLY)\n            ? DecoratorFlags.INLINE\n            : DecoratorFlags.NONE\n          ) | DecoratorFlags.LAZY\n        ),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, DecoratorFlags.NONE)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** SO far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.NONE;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      if (parent.kind == ElementKind.FILE && (<File>parent).source.isEntry) {\n        validDecorators |= DecoratorFlags.START;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return;\n    if (element.hasDecorator(DecoratorFlags.START)) {\n      if (this.explicitStartFunction) {\n        this.error(\n          DiagnosticCode.Module_cannot_have_multiple_start_functions,\n          assert(findDecorator(DecoratorKind.START, declaration.decorators)).range\n        );\n      } else this.explicitStartFunction = element;\n    }\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var name = declaration.name.text;\n    var element = new Namespace(name, parent, declaration);\n    if (!parent.add(name, element)) return;\n    element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, element, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, element);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, element);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, element);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, element, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, element);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, element);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is the explicit start function. */\n  START = 1 << 10\n}\n\n/** Translates a decorator kind to the respective decorator flag. */\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n    case DecoratorKind.START: return DecoratorFlags.START;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let actual = members.get(name)!;\n      if (actual.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(actual, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) this.program.ensureGlobal(name, element);\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.isLibrary) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): CommonTypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): CommonTypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple na,e */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated signature node. */\n  get signatureNode(): SignatureNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name);\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): CommonTypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): TypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): TypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do {\n      if (current === basePtototype) return true;\n    } while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let merged = tryMerge(instanceMembers.get(name)!, element);\n      if (!merged) {\n        this.program.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          element.identifierNode.range, element.identifierNode.text\n        );\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Function index of the GC hook. */\n  gcHookIndex: u32 = <u32>-1;\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(this.program.options.usizeType.asClass(this));\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    if (older.is(CommonFlags.EXPORT) != newer.is(CommonFlags.EXPORT)) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport {\n  Target\n} from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32  = _BinaryenTypeInt32(),\n  I64  = _BinaryenTypeInt64(),\n  F32  = _BinaryenTypeFloat32(),\n  F64  = _BinaryenTypeFloat64(),\n  V128 = _BinaryenTypeVec128(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId(),\n  SIMDExtract = _BinaryenSIMDExtractId(),\n  SIMDReplace = _BinaryenSIMDReplaceId(),\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\n  SIMDShift = _BinaryenSIMDShiftId(),\n  MemoryInit = _BinaryenMemoryInitId(),\n  DataDrop = _BinaryenDataDropId(),\n  MemoryCopy = _BinaryenMemoryCopyId(),\n  MemoryFill = _BinaryenMemoryFillId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n\n  // see: https://github.com/WebAssembly/simd\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\n  NotVec128 = _BinaryenNotVec128(),\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2()\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\n  AndVec128 = _BinaryenAndVec128(),\n  OrVec128 = _BinaryenOrVec128(),\n  XorVec128 = _BinaryenXorVec128(),\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\n}\n\nexport enum HostOp {\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneSVecI8x16 = _BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneUVecI8x16 = _BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneSVecI16x8 = _BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneUVecI16x8 = _BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneVecI32x4 = _BinaryenExtractLaneVecI32x4(),\n  ExtractLaneVecI64x2 = _BinaryenExtractLaneVecI64x2(),\n  ExtractLaneVecF32x4 = _BinaryenExtractLaneVecF32x4(),\n  ExtractLaneVecF64x2 = _BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneVecI8x16 = _BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneVecI16x8 = _BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneVecI32x4 = _BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneVecI64x2 = _BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneVecF32x4 = _BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneVecF64x2 = _BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlVecI8x16 = _BinaryenShlVecI8x16(),\n  ShrSVecI8x16 = _BinaryenShrSVecI8x16(),\n  ShrUVecI8x16 = _BinaryenShrUVecI8x16(),\n  ShlVecI16x8 = _BinaryenShlVecI16x8(),\n  ShrSVecI16x8 = _BinaryenShrSVecI16x8(),\n  ShrUVecI16x8 = _BinaryenShrUVecI16x8(),\n  ShlVecI32x4 = _BinaryenShlVecI32x4(),\n  ShrSVecI32x4 = _BinaryenShrSVecI32x4(),\n  ShrUVecI32x4 = _BinaryenShrUVecI32x4(),\n  ShlVecI64x2 = _BinaryenShlVecI64x2(),\n  ShrSVecI64x2 = _BinaryenShrSVecI64x2(),\n  ShrUVecI64x2 = _BinaryenShrUVecI64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createV128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\n    _BinaryenLiteralVec128(out, out);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGetGlobal(this.ref, cStr, type);\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenSetGlobal(this.ref, cStr, value);\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  createMemoryCopy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  createMemoryFill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // simd\n\n  createSIMDExtract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  createSIMDReplace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  createSIMDShuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    try {\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createSIMDBitselect(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    cond: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDBitselect(this.ref, vec1, vec2, cond);\n  }\n\n  createSIMDShift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k, shared);\n    } finally {\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([ this.allocStringCached(\"precompute\") ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n    expr = _BinaryenFunctionGetBody(func);\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(_BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.lit);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getGetGlobalName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGetGlobalGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  isManaged(program: Program): bool {\n    if (program.hasGC) {\n      let classReference = this.classReference;\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n    }\n    return false;\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n      case TypeKind.V128: return module.createV128(v128_zero);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      // same naming scheme as Binaryen\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"j\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"d\";\n      case TypeKind.V128: return \"V\";\n      case TypeKind.VOID: return \"v\";\n      default: assert(false);\n    }\n    return \"i\";\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    sb.push(returnType.toSignatureString());\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    return \"FUNCSIG$\" + sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (this.pos + 1 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.x:\n        case CharCode.X:\n        case CharCode.b:\n        case CharCode.B:\n        case CharCode.o:\n        case CharCode.O: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) {\n        return false;\n      }\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.x:\n        case CharCode.X: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b:\n        case CharCode.B: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o:\n        case CharCode.O: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.e || c == CharCode.E) {\n        if (\n          ++this.pos < this.end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 65536) >>> 10) + 0xD800,\n        ((value32 - 65536) & 1023) + 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  SignatureNode,\n  ParameterKind,\n  CommonTypeNode,\n  NodeKind,\n  TypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token\n} from \"./tokenizer\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: CommonTypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signature\n    if (node.kind == NodeKind.SIGNATURE) {\n      let explicitThisType = (<SignatureNode>node).explicitThisType;\n      let thisType: Type | null = null;\n      if (explicitThisType) {\n        thisType = this.resolveType(\n          explicitThisType,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!thisType) return null;\n      }\n      let parameterNodes = (<SignatureNode>node).parameters;\n      let numParameters = parameterNodes.length;\n      let parameterTypes = new Array<Type>(numParameters);\n      let parameterNames = new Array<string>(numParameters);\n      let requiredParameters = 0;\n      let hasRest = false;\n      for (let i = 0; i < numParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        switch (parameterNode.parameterKind) {\n          case ParameterKind.DEFAULT: {\n            requiredParameters = i + 1;\n            break;\n          }\n          case ParameterKind.REST: {\n            assert(i == numParameters);\n            hasRest = true;\n            break;\n          }\n        }\n        let parameterTypeNode = parameterNode.type;\n        if (isTypeOmitted(parameterTypeNode)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              parameterTypeNode.range\n            );\n          }\n          return null;\n        }\n        let parameterType = this.resolveType(\n          parameterTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!parameterType) return null;\n        parameterTypes[i] = parameterType;\n        parameterNames[i] = parameterNode.name.text;\n      }\n      let returnTypeNode = (<SignatureNode>node).returnType;\n      if (isTypeOmitted(returnTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnTypeNode.range\n          );\n        }\n        return null;\n      }\n      let returnType: Type | null;\n      if (returnTypeNode) {\n        returnType = this.resolveType(\n          returnTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!returnType) return null;\n      } else {\n        returnType = Type.void;\n      }\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.parameterNames = parameterNames;\n      signature.requiredParameters = requiredParameters;\n      signature.hasRest = hasRest;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.TYPE);\n    var typeNode = <TypeNode>node;\n    var typeName = typeNode.name;\n    var typeArgumentNodes = typeNode.typeArguments;\n    var possiblyPlaceholder = !typeName.next;\n\n    // look up in contextual type arguments if possibly a placeholder\n    if (possiblyPlaceholder) {\n      if (contextualTypeArguments && contextualTypeArguments.has(typeName.identifier.text)) {\n        let type = contextualTypeArguments.get(typeName.identifier.text)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                node.range, type.toString()\n              );\n            }\n          }\n          return type.asNullable();\n        }\n        return type;\n      }\n    }\n\n    // look up in context\n    var element = this.resolveTypeName(typeName, context, reportMode);\n    if (!element) return null;\n\n    // use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n      // handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          context,\n          makeMap<string,Type>(contextualTypeArguments), // don't inherit\n          node\n        ); // reports\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                typeNode.name.range, typeName.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // handle special native type\n      if (possiblyPlaceholder && typeName.identifier.text == CommonSymbols.native) {\n        if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n            );\n          }\n          return null;\n        }\n        let typeArgument = this.resolveType(\n          typeArgumentNodes[0],\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!typeArgument) return null;\n        switch (typeArgument.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: return Type.i32;\n          case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n          case TypeKind.I64: return Type.i64;\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: return Type.u32;\n          case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n          case TypeKind.U64: return Type.u64;\n          case TypeKind.F32: return Type.f32;\n          case TypeKind.F64: return Type.f64;\n          case TypeKind.V128: return Type.v128;\n          case TypeKind.VOID: return Type.void;\n          default: assert(false);\n        }\n      }\n\n      // resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          context,\n          contextualTypeArguments = makeMap(contextualTypeArguments), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          typeNode.range, typeName.identifier.text\n        );\n        // recoverable\n      }\n      return this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        contextualTypeArguments,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, typeName.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    typeName: TypeName,\n    /** Relative context. */\n    context: Element,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = context.lookup(typeName.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          typeName.range, typeName.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = typeName;\n    var next = typeName.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Actual type parameter nodes. */\n    typeParameters: TypeParameterNode[],\n    /** Type arguments provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0; i < typeParameters.length; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<TypeNode[]>typeArgumentNodes)[0].range,\n              (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<TypeNode[]>typeArgumentNodes)[i],\n            context,\n            contextualTypeArguments,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            context,\n            contextualTypeArguments,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the program element it refers to. */\n  resolveIdentifier(\n    /** The expression to resolve. */\n    identifier: IdentifierExpression,\n    /** Optional flow to search for scoped locals. */\n    flow: Flow | null,\n    /** Optional context to search. */\n    context: Element | null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n    if (flow) {\n      if (element = flow.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (context) {\n      if (element = context.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field. */\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var typeNode = global.typeNode;\n    if (!typeNode) return false;\n    var type = this.resolveType( // reports\n      typeNode,\n      global.parent,\n      null,\n      reportMode\n    );\n    if (!type) return false;\n    global.setType(type);\n    return true;\n  }\n\n  /** Resolves a property access expression to the program element it refers to. */\n  resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    propertyAccess: PropertyAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let typeClasses = this.program.typeClasses;\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\n            classReference = typeClasses.get(type.kind)!;\n          } else {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n            );\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: { // property access on element access?\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  /** Resolves an element access expression to the program element it refers to. */\n  resolveElementAccessExpression(\n    /** The expression to resolve. */\n    elementAccess: ElementAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementAccess.range, (<Class>target).internalName\n            );\n          }\n          return null;\n        }\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\n          let returnType = indexedGet.signature.returnType;\n          if (target = returnType.classReference) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = elementAccess.elementExpression;\n            return target;\n          }\n          return null;\n        }\n        this.currentThisExpression = targetExpression;\n        this.currentElementExpression = elementAccess.elementExpression;\n        return target;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Current contextual type. */\n    contextualType: Type\n  ): Type {\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\n      // compile to contextualType if matching\n      switch (contextualType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n        case TypeKind.VOID: break; // best fitting below\n        default: assert(false);\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64;\n  }\n\n  /** Resolves any expression to the program element it refers to. */\n  resolveExpression(\n    /** The expression to resolve. */\n    expression: Expression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // simply skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(\n          <IdentifierExpression>expression,\n          flow, flow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      // TODO: everything else\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an assertion expression to the program element it refers to. */\n  resolveAssertionExpression(\n    /** The expression to resolve. */\n    expression: AssertionExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (expression.assertionKind == AssertionKind.NONNULL) {\n      return this.resolveExpression(\n        expression.expression,\n        flow,\n        contextualType,\n        reportMode\n      );\n    }\n    var type = this.resolveType(\n      assert(expression.toType), // must be set if not NONNULL\n      flow.actualFunction,\n      flow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element: Element | null = type.classReference;\n    if (!element) {\n      let signature = type.signatureReference;\n      if (!signature) return null;\n      element = signature.asFunctionTarget(this.program);\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to the program element it refers to. */\n  resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPrefixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var operand = expression.operand;\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          let type = this.determineIntegerLiteralType(\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\n            contextualType\n          );\n          let typeClasses = this.program.typeClasses;\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\n        }\n        return this.resolveExpression(\n          operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.EXCLAMATION: {\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(TypeKind.BOOL) ? typeClasses.get(TypeKind.BOOL)! : null;\n      }\n      case Token.TILDE: {\n        let resolvedOperand = this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n        if (!resolvedOperand) return null;\n        // TODO\n        break;\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an unary postfix expression to the program element it refers to. */\n  resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPostfixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to the program element it refers to. */\n  resolveBinaryExpression(\n    /** The expression to resolve. */\n    expression: BinaryExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to the program element it refers to. */\n  resolveThisExpression(\n    /** The expression to resolve. */\n    expression: ThisExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = flow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = flow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to the program element it refers to. */\n  resolveSuperExpression(\n    /** The expression to resolve. */\n    expression: SuperExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = flow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = flow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to the program element it refers to. */\n  resolveLiteralExpression(\n    /** The expression to resolve. */\n    expression: LiteralExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (expression.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>expression).value,\n          contextualType\n        );\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = contextualType == Type.f32 ? Type.f32 : Type.f64;\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a call expression to the program element it refers to. */\n  resolveCallExpression(\n    /** The expression to resolve. */\n    expression: CallExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = expression.expression;\n    var target = this.resolveExpression( // reports\n      targetExpression,\n      flow,\n      contextualType,\n      reportMode\n    );\n    if (!target) return null;\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunctionInclTypeArguments(\n        <FunctionPrototype>target,\n        expression.typeArguments,\n        flow.actualFunction,\n        makeMap(flow.contextualTypeArguments), // don't inherit\n        expression,\n        reportMode\n      );\n      if (!instance) return null;\n      let returnType = instance.signature.returnType;\n      let classType = returnType.classReference;\n      if (classType) {\n        // reuse resolvedThisExpression (might be property access)\n        // reuse resolvedElementExpression (might be element access)\n        return classType;\n      } else {\n        let signature = returnType.signatureReference;\n        if (signature) {\n          let functionTarget = signature.asFunctionTarget(this.program);\n          // reuse resolvedThisExpression (might be property access)\n          // reuse resolvedElementExpression (might be element access)\n          return functionTarget;\n        }\n      }\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          targetExpression.range, target.internalName\n        );\n      }\n      return null;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!contextualTypeArguments.has(classTypeParameterName)) {\n            contextualTypeArguments.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.signatureNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!thisType) return null;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      contextualTypeArguments\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            contextualTypeArguments.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(contextualTypeArguments), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type argument nodes provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileIterateRoots,\n  ensureGCHook,\n  BuiltinSymbols\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  LibrarySymbols,\n  CommonSymbols,\n  INDEX_SUFFIX\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Indicates whether the iterateRoots function must be generated. */\n  needsIterateRoots: bool = false;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature([], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap base dummy\n    if (options.isWasm64) {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I64,\n        true,\n        module.createI64(0, 0)\n      );\n    } else {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I32,\n        false,\n        module.createI32(0)\n      );\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.isEntry) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or called by main\n    var explicitStartFunction = program.explicitStartFunction;\n    if (startFunctionBody.length || explicitStartFunction) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStartFunction) module.setStart(funcRef);\n    }\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.HEAP_BASE);\n    if (options.isWasm64) {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I64,\n        false,\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n      );\n    } else {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I32,\n        false,\n        module.createI32(i64_low(memoryOffset))\n      );\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addTableExport(\"0\", \"table\");\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.createBlock(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.isEntry) this.makeModuleExports(file);\n    }\n\n    // set up gc\n    if (this.needsIterateRoots) compileIterateRoots(this);\n\n    return module;\n  }\n\n  /** Applies the respective module exports for the specified file. */\n  private makeModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.makeModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.makeModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.makeModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.makeModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let module = this.module;\n        let type = (<Field>element).type;\n        let nativeType = type.toNativeType();\n        let offset = (<Field>element).memoryOffset;\n        let usizeType = this.options.usizeType;\n        let nativeSizeType = this.options.nativeSizeType;\n\n        // make a getter\n        let getterName = prefix + GETTER_PREFIX + name;\n        module.addFunction(\n          getterName,\n          this.ensureFunctionType(null, type, usizeType),\n          null,\n          module.createLoad(\n            type.byteSize,\n            type.is(TypeFlags.SIGNED),\n            module.createGetLocal(0, nativeSizeType),\n            nativeType,\n            offset\n          )\n        );\n        module.addFunctionExport(getterName, getterName);\n\n        // make a setter\n        if (!element.is(CommonFlags.READONLY)) {\n          let setterName = prefix + SETTER_PREFIX + name;\n          module.addFunction(\n            setterName,\n            this.ensureFunctionType([ type ], Type.void, usizeType),\n            null,\n            module.createStore(\n              type.byteSize,\n              module.createGetLocal(0, nativeSizeType),\n              module.createGetLocal(1, nativeType),\n              nativeType,\n              offset\n            )\n          );\n          module.addFunctionExport(setterName, setterName);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.CLASS:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.makeModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.makeModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  // general\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) for (let exportStar of exportsStar) this.compileFile(exportStar);\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    this.currentFlow = startFunction.flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.createBlock(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.createCall(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // globals\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // resolve now if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // infer from initializer if not annotated\n      } else if (initializerNode) { // infer type using void/NONE for literal inference\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpressionRetainType( // reports\n          initializerNode,\n          Type.void,\n          WrapMode.WRAP\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // must either be annotated or have an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          global.declaration.range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(\n          initializerNode,\n          global.type,\n          ConversionKind.IMPLICIT,\n          WrapMode.WRAP\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              initializerNode.range\n            );\n            initializeInStart = true;\n          }\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // explicitly inline if annotated\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        if (!initializeInStart) { // reported above\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // initialize to zero if there's no initializer\n    } else {\n      initExpr = global.type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          global.identifierNode.range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.currentBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else if (!global.hasDecorator(DecoratorFlags.INLINE)) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(\n            valueNode,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.createI32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.createBinary(BinaryOp.AddI32,\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\n            module.createI32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\n          this.currentBody.push(\n            module.createSetGlobal(val.internalName, initExpr)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(instance: Function): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    var stmts: BinaryenExportRef[];\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let stmt = this.compileExpression(\n        (<ExpressionStatement>bodyNode).expression,\n        returnType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      flow.set(FlowFlags.RETURNS);\n      if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      stmts = [ stmt ];\n    }\n\n    // make the main function call `start` implicitly, but only once\n    if (instance.prototype == this.program.explicitStartFunction) {\n      module.addGlobal(CompilerSymbols.started, NativeType.I32, true, module.createI32(0));\n      stmts.unshift(\n        module.createIf(\n          module.createUnary(\n            UnaryOp.EqzI32,\n            module.createGetGlobal(CompilerSymbols.started, NativeType.I32)\n          ),\n          module.createBlock(null, [\n            module.createCall(\"start\", null, NativeType.None),\n            module.createSetGlobal(CompilerSymbols.started, module.createI32(1))\n          ])\n        )\n      );\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        let thisLocalIndex = flow.is(FlowFlags.INLINE_CONTEXT)\n          ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n          : 0;\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.createIf(\n              module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.createGetLocal(thisLocalIndex, nativeSizeType)\n              ),\n              module.createSetLocal(thisLocalIndex,\n                this.makeAllocation(<Class>classInstance)\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n\n        // implicitly return `this`\n        stmts.push(\n          module.createGetLocal(thisLocalIndex, nativeSizeType)\n        );\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches return\n    } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.signatureNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      this.currentFlow = instance.flow;\n      let stmts = this.compileFunctionBody(instance);\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmts.length\n          ? stmts.length == 1\n            ? stmts[0]\n            : module.createBlock(null, stmts, instance.signature.returnType.toNativeType())\n          : module.createNop()\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      funcRef = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, funcRef);\n    return true;\n  }\n\n  // classes\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        assert(element.kind == ElementKind.ENUM);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let memberStatements = (<NamespaceDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          assert(element.kind == ElementKind.GLOBAL);\n          if (\n            !element.is(CommonFlags.AMBIENT) && // delay imports\n            !element.hasDecorator(DecoratorFlags.LAZY)\n          ) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).normalizedPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).normalizedPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).normalizedPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(statement: Statement, isLastStatementInBody: bool = false): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastStatementInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          statement.range\n        );\n        stmt = module.createUnreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[], isBody: bool = false): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    stmts.length = 0;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\n\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n\n    var block: ExpressionRef[] = [\n      module.createLoop(continueLabel,\n        terminated\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ];\n    if (terminated) block.push(module.createUnreachable());\n    return module.createBlock(breakLabel, block);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = module.precomputeExpression(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : 0;\n    var bodyStatement = statement.statement;\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\n      : this.compileStatement(bodyStatement);\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var usesContinue = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      repeatBlock.push(\n        module.createBlock(continueLabel, [ // inner 'continue' block\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\n          bodyExpr\n        ], NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(bodyExpr);\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.createBreak(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\n    );\n\n    return module.createBlock(breakLabel, breakBlock);\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n    var actualFunction = outerFlow.actualFunction;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    var condExprPrecomp = module.precomputeExpression(condExpr);\n    if (\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n      getExpressionType(condExprPrecomp) == NativeType.I32\n    ) {\n      return getConstValueI32(condExprPrecomp)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.createNop();\n\n    // Otherwise recompile to the original and let the optimizer decide\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    }\n\n    // Each arm initiates a branch\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement, isLastStatementInBody: bool): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      if (returnType == Type.void) {\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          statement.value.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        flow.actualFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.createUnreachable();\n    }\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastStatementInBody) return expr ? expr : module.createNop();\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) return module.createBreak(assert(flow.inlineReturnLabel), 0, expr);\n\n    return module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (innerFlow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!innerFlow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!innerFlow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!innerFlow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!innerFlow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) outerFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) outerFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) outerFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) outerFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(statement: VariableStatement): ExpressionRef {\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpressionRetainType( // reports\n          declaration.initializer,\n          Type.void,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(name, type, false, declaration.name); // reports if duplicate\n        } else {\n          if (flow.lookupLocal(name)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n        }\n        if (initExpr) {\n          initializers.push(\n            this.compileAssignmentWithValue(declaration.name, initExpr)\n          );\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    // Try to eliminate unnecesssary loops if the condition is constant\n    var condExprPrecomp = module.precomputeExpression(condExpr);\n    if (\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n      getExpressionType(condExprPrecomp) == NativeType.I32\n    ) {\n      if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n    // Otherwise recompile to the original and let the optimizer decide\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    }\n\n    // Statements initiate a new branch with its own break context\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysTrue = false; // TODO\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          terminated\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ]);\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n      }\n    }\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (conversionKind == ConversionKind.IMPLICIT) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n            wrapMode = WrapMode.NONE;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n            wrapMode = WrapMode.NONE;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n          wrapMode = WrapMode.NONE;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          this.currentFlow.actualFunction,\n          this.currentFlow.contextualTypeArguments\n        );\n        if (!toType) return this.module.createUnreachable();\n        return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpressionRetainType(expression.expression, contextualType, WrapMode.NONE);\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.createUnreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.createUnary(UnaryOp.AllTrueVecI8x16,\n              module.createBinary(BinaryOp.EqVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.createUnary(UnaryOp.AnyTrueVecI8x16,\n              module.createBinary(BinaryOp.NeVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(LibrarySymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(LibrarySymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(LibrarySymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(LibrarySymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(LibrarySymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(LibrarySymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(LibrarySymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(LibrarySymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\n      argumentExpressions = [];\n    } else {\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\n    }\n    return this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg\n    );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.resolveExpression(expression, flow); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.createUnreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.CLASS: {\n        if (resolver.currentElementExpression) { // indexed access\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var target = this.resolver.resolveExpression(expression, flow); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          // TODO: call __gc_link here if a GC is present\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          // TODO: call __gc_link here if a GC is present\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.createUnreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.createUnreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.createBlock(null, [\n          this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n          this.makeCallDirect(getterInstance) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpressionRetainType(\n          assert(this.resolver.currentThisExpression),\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let tempLocal = flow.getAndFreeTempLocal(returnType, false);\n        let tempLocalIndex = tempLocal.index;\n        return module.createBlock(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.createTeeLocal(tempLocalIndex, thisExpr),\n            valueWithCorrectType\n          ]),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.createGetLocal(tempLocalIndex, nativeReturnType)\n          ])\n        ], nativeReturnType);\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolver.currentElementExpression;\n        if (elementExpression) {\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let tempLocalTarget = flow.getTempLocal(targetType, false);\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            flow.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let stmts: ExpressionRef[] = [\n        module.createSetLocal(thisLocal.index,\n          this.compileCallDirect(\n            this.ensureConstructor(baseClassInstance, expression),\n            expression.arguments,\n            expression,\n            module.createIf(\n              module.createGetLocal(thisLocal.index, nativeSizeType),\n              module.createGetLocal(thisLocal.index, nativeSizeType),\n              this.makeAllocation(<Class>classInstance)\n            )\n          )\n        )\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing allocating `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.createBlock(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            flow.actualFunction.parent, // relative to caller\n            makeMap<string,Type>(flow.contextualTypeArguments),\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\n          let numTypeParameters = typeParameterNodes.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterNodes = prototype.signatureNode.parameters;\n          let numParameters = parameterNodes.length;\n          let argumentNodes = expression.arguments;\n          let numArguments = argumentNodes.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameters; ++i) {\n            let typeNode = parameterNodes[i].type;\n            let templateName = typeNode.kind == NodeKind.TYPE && !(<TypeNode>typeNode).name.next\n              ? (<TypeNode>typeNode).name.identifier.text\n              : null;\n            let argumentExpression = i < numArguments\n              ? argumentNodes[i]\n              : parameterNodes[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameters.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (templateName !== null && inferredTypes.has(templateName)) {\n              let inferredType = inferredTypes.get(templateName);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonDenominator(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonDenominator(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(templateName, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterNodes[i].type,\n                flow.actualFunction,\n                flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            makeMap<string,Type>(flow.contextualTypeArguments)\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(prototype, null);\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.createUnreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.createUnreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          )\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.createUnreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr = this.compileCallInlinePrechecked(instance, argumentExpressions, thisArg);\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlinePrechecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, false);\n      body.push(\n        module.createSetLocal(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    }\n\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let argumentLocal = flow.addScopedLocal(\n        signature.getParameterName(i),\n        parameterTypes[i],\n        !previousFlow.canOverflow(paramExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, paramExpr)\n      );\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    this.currentFlow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.signatureNode.parameters[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        signature.getParameterName(i),\n        parameterTypes[i],\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    {\n      let stmts = this.compileFunctionBody(instance);\n      for (let i = 0, k = stmts.length; i < k; ++i) body.push(stmts[i]);\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n    this.currentType = returnType;\n\n    // Create an outer block that we can break to when returning a value out of order\n    return module.createBlock(flow.inlineReturnLabel, body, returnType.toNativeType());\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.signatureNode.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    this.currentFlow = trampoline.flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"outOfRange\", [\n        module.createSwitch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(CompilerSymbols.argc, NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(CompilerSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.createSetLocal(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.createUnreachable();\n      }\n      body = module.createBlock(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFlow = previousFlow;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        CompilerSymbols.argc,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return CompilerSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = CompilerSymbols.setargc;\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.signatureNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (!(initializer && nodeIsConstantValue(initializer.kind))) {\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    return module.createCall(instance.internalName, operands, returnType.toNativeType());\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.resolver.resolveElementAccessExpression(\n      expression,\n      this.currentFlow,\n      contextualType\n    ); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.signatureNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.createUnreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.createUnreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.createUnreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.createUnreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.createUnreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.createUnreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.createUnreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.createUnreachable();\n        }\n      }\n\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.createUnreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.createUnreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.createIf(\n                  module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.createGetLocal(thisLocal.index, nativeSizeType)\n                  ),\n                  module.createSetLocal(thisLocal.index,\n                    this.makeAllocation(<Class>classInstance)\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.createGetLocal(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.createBlock(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.createGetLocal(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      flow,\n      this.currentEnum || actualFunction\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let localType = (<Local>target).type;\n        assert(localType != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.createI32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(\n      expression.isType,\n      this.currentFlow.actualFunction\n    );\n    this.currentType = Type.bool;\n    if (!expectedType) return module.createUnreachable();\n\n    // instanceof <basicType> must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.createI32(actualType == expectedType ? 1 : 0);\n    }\n    // <nullable> instanceof <nonNullable> must be != 0\n    if (\n      actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE) &&\n      actualType.nonNullableType.isAssignableTo(expectedType)\n    ) {\n      return module.createBinary(\n        actualType.is(TypeFlags.LONG)\n          ? BinaryOp.NeI64\n          : BinaryOp.NeI32,\n        expr,\n        actualType.toNativeZero(module)\n      );\n    }\n    return module.createI32(actualType.isAssignableTo(expectedType) ? 1 : 0);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            false, // TODO: isConst?\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\n          case TypeKind.I64: return module.createI64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\n          case TypeKind.U64: return module.createI64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.createF32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.createF64(i64_to_f64(intValue));\n          default: return module.createI32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n\n    // if the string already exists, reuse it\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = <MemorySegment>segments.get(stringValue);\n\n    // otherwise create it\n    } else {\n      let length = stringValue.length;\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\n      let totalSize = headerSize + length * 2;\n\n      let buf: Uint8Array;\n      let pos: u32;\n\n      if (hasGC) {\n        buf = new Uint8Array(gcHeaderSize + totalSize);\n        pos = gcHeaderSize;\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\n      } else {\n        buf = new Uint8Array(totalSize);\n        pos = 0;\n      }\n      writeI32(length, buf, pos + stringInstance.offsetof(LibrarySymbols.length));\n      pos += headerSize;\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\n\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    } else {\n      assert(i64_is_u32(stringOffset));\n      return this.module.createI32(i64_low(stringOffset));\n    }\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var usizeTypeSize = this.options.usizeType.byteSize;\n\n    var buf: Uint8Array;\n    var pos: u32;\n\n    // create the backing ArrayBuffer segment\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(bufferTotalSize);\n      pos = 0;\n    }\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(LibrarySymbols.byteLength));\n    pos += bufferHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    var bufferSegment = this.addMemorySegment(buf);\n    var bufferOffset = bufferSegment.offset;\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\n\n    // create the Array segment and return a pointer to it\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(\n      arrayPrototype,\n      [ elementType ],\n      makeMap<string,Type>()\n    ));\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(arrayHeaderSize);\n      pos = 0;\n    }\n    var arraySegment = this.addMemorySegment(buf);\n    var arrayOffset = arraySegment.offset;\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\n    this.currentType = arrayInstance.type;\n    var buffer_offset = pos + arrayInstance.offsetof(\"buffer_\");\n    var length_offset = pos + arrayInstance.offsetof(\"length_\");\n    if (usizeTypeSize == 8) {\n      writeI64(bufferOffset, buf, buffer_offset);\n      writeI32(length, buf, length_offset);\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\n    } else {\n      assert(i64_is_u32(bufferOffset));\n      writeI32(i64_low(bufferOffset), buf, buffer_offset);\n      writeI32(length, buf, length_offset);\n      assert(i64_is_u32(arrayOffset));\n      return this.module.createI32(i64_low(arrayOffset));\n    }\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    isConst: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // find out whether all elements are constant (array is static)\n    var length = expressions.length;\n    var compiledValues = new Array<ExpressionRef>(length);\n    var constantValues = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? this.compileExpression(<Expression>expression, elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n        : elementType.toNativeZero(module);\n      compiledValues[i] = expr;\n      if (isStatic) {\n        expr = module.precomputeExpression(expr);\n        if (getExpressionId(expr) == ExpressionId.Const) {\n          assert(getExpressionType(expr) == nativeElementType);\n          constantValues[i] = expr;\n        } else {\n          if (isConst) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              reportNode.range\n            );\n          }\n          isStatic = false;\n        }\n      }\n    }\n\n    // make a static array if possible\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\n\n    // otherwise obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(\n      <ClassPrototype>arrayPrototype,\n      [ elementType ],\n      makeMap<string,Type>()\n    ));\n    var arrayType = arrayInstance.type;\n\n    // and compile an explicit instantiation\n    this.currentType = arrayType;\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      return module.createUnreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n    var flow = this.currentFlow;\n    var tempLocal = flow.parentFunction.addLocal(arrayType); // can't reuse a temp (used in compiledValues)\n    var stmts = new Array<ExpressionRef>(2 + length);\n    var index = 0;\n    stmts[index++] = module.createSetLocal(tempLocal.index,\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(length)\n      ])\n    );\n    for (let i = 0; i < length; ++i) {\n      stmts[index++] = this.makeCallDirect(setter, [\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\n        module.createI32(i),\n        compiledValues[i]\n      ]);\n    }\n    assert(index + 1 == stmts.length);\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n    flow.freeTempLocal(tempLocal); // but can be reused now\n    this.currentType = arrayType;\n    return module.createBlock(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getTempLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\n        type.byteSize,\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.createUnreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.createSetLocal(\n      tempLocal.index,\n      this.makeAllocation(classReference)\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\n\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      flow\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.createUnreachable();\n    return this.compileInstantiate(classInstance, expression.arguments, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    this.currentFlow = instance.flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    stmts.push(\n      module.createIf(\n        module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.createGetLocal(0, nativeSizeType)\n        ),\n        module.createSetLocal(0,\n          this.makeAllocation(classInstance)\n        )\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.createGetLocal(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.createGetLocal(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.createSetLocal(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    stmts.push(\n      module.createGetLocal(0, nativeSizeType)\n    );\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes,\n      stmts.length == 1\n        ? stmts[0]\n        : module.createBlock(null, stmts, nativeSizeType)\n    );\n    instance.finalize(module, funcRef);\n    this.currentFlow = previousFlow;\n    return instance;\n  }\n\n  compileInstantiate(classInstance: Class, argumentExpressions: Expression[], reportNode: Node): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    var expr = this.compileCallDirect(\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.options.usizeType.toNativeZero(this.module)\n    );\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(propertyAccess);\n\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return module.createI32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          assert(this.resolver.currentThisExpression),\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\n          this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          )\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          propertyAccess.range, (<FunctionPrototype>target).name\n        );\n        return module.createUnreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  private compileGetter(target: PropertyPrototype, reportNode: Node): ExpressionRef {\n    var prototype = target.getterPrototype;\n    if (prototype) {\n      let instance = this.resolver.resolveFunction(prototype, null);\n      if (!instance) return this.module.createUnreachable();\n      let signature = instance.signature;\n      if (!this.checkCallSignature( // reports\n        signature,\n        0,\n        instance.is(CommonFlags.INSTANCE),\n        reportNode\n      )) {\n        return this.module.createUnreachable();\n      }\n      if (instance.is(CommonFlags.INSTANCE)) {\n        let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n        let thisExpression = assert(this.resolver.currentThisExpression); //!!!\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, thisExpr);\n      } else {\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, 0);\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        reportNode.range, (<PropertyPrototype>target).name, (<PropertyPrototype>target).parent.toString()\n      );\n      return this.module.createUnreachable();\n    }\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    var condExprPrecomp = this.module.precomputeExpression(condExpr);\n    if (\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n      getExpressionType(condExprPrecomp) == NativeType.I32\n    ) {\n      return getConstValueI32(condExprPrecomp)\n        ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n        : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n    // Otherwise recompile to the original and let the optimizer decide\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    }\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n    var ifThenType = this.currentType;\n    ifThenFlow.freeScopedLocals();\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n    var ifElseType = this.currentType;\n    ifElseFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    var currentType = this.currentType;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(currentType, false);\n      getValue = module.createTeeLocal(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var calcValue: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            calcValue = module.createBinary(\n              BinaryOp.AddI32,\n              getValue,\n              module.createI32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n                if (overload) {\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            calcValue = module.createBinary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            calcValue = module.createBinary(\n              BinaryOp.AddI64,\n              getValue,\n              module.createI64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            calcValue = module.createBinary(\n              BinaryOp.AddF32,\n              getValue,\n              module.createF32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            calcValue = module.createBinary(\n              BinaryOp.AddF64,\n              getValue,\n              module.createF64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            calcValue = module.createBinary(\n              BinaryOp.SubI32,\n              getValue,\n              module.createI32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n                if (overload) {\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            calcValue = module.createBinary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            calcValue = module.createBinary(\n              BinaryOp.SubI64,\n              getValue,\n              module.createI64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            calcValue = module.createBinary(\n              BinaryOp.SubF32,\n              getValue,\n              module.createF32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            calcValue = module.createBinary(\n              BinaryOp.SubF64,\n              getValue,\n              module.createF64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      this.currentType = Type.void;\n      return this.compileAssignmentWithValue(expression.operand,\n        calcValue,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      calcValue, // also tees getValue to tempLocal\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.createBlock(null, [\n      setValue,\n      module.createGetLocal(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createUnary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createUnary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        } else {\n          expr = this.convertExpression(\n            expr,\n            this.currentType, this.currentType.intType,\n            ConversionKind.IMPLICIT, WrapMode.NONE,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.createBinary(BinaryOp.NeI32,\n            expr,\n            module.createI32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(classInstance: Class): ExpressionRef {\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n\n    // __gc_allocate(size, markFn)\n    if (program.hasGC && classInstance.type.isManaged(program)) {\n      let allocateInstance = assert(program.gcAllocateInstance);\n      if (!this.compileFunction(allocateInstance)) return module.createUnreachable();\n      this.currentType = classInstance.type;\n      return module.createCall(\n        allocateInstance.internalName, [\n          options.isWasm64\n            ? module.createI64(classInstance.currentMemoryOffset)\n            : module.createI32(classInstance.currentMemoryOffset),\n          module.createI32(\n            ensureGCHook(this, classInstance)\n          )\n        ],\n        options.nativeSizeType\n      );\n\n    // memory.allocate(size)\n    } else {\n      let allocateInstance = program.memoryAllocateInstance;\n      if (!allocateInstance || !this.compileFunction(allocateInstance)) return module.createUnreachable();\n      this.currentType = classInstance.type;\n      return module.createCall(\n        allocateInstance.internalName, [\n          options.isWasm64\n            ? module.createI64(classInstance.currentMemoryOffset)\n            : module.createI32(classInstance.currentMemoryOffset)\n        ],\n        options.nativeSizeType\n      );\n    }\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(classInstance: Class, stmts: ExpressionRef[] = []): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let initializerNode = field.prototype.initializerNode;\n      if (initializerNode) { // use initializer\n        stmts.push(\n          module.createStore(fieldType.byteSize,\n            module.createGetLocal(thisLocalIndex, nativeSizeType),\n            this.compileExpression( // reports\n              initializerNode,\n              fieldType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            ),\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      } else {\n        let parameterIndex = field.prototype.parameterIndex;\n        stmts.push(\n          module.createStore(fieldType.byteSize,\n            module.createGetLocal(thisLocalIndex, nativeSizeType),\n            parameterIndex >= 0 // initialized via parameter (here: a local)\n              ? module.createGetLocal(\n                  isInline\n                    ? assert(flow.lookupLocal(field.name)).index\n                    : 1 + parameterIndex, // this is local 0\n                  nativeFieldType\n                )\n              : fieldType.toNativeZero(module),\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      }\n    }\n    return stmts;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Special compiler symbols. */\nnamespace CompilerSymbols {\n  /** Module started global. Used if an explicit start function is present. */\n  export const started = \"~lib/started\";\n  /** Argument count global. Used to call trampolines for varargs functions. */\n  export const argc = \"~lib/argc\";\n  /** Argument count setter. Exported for use by host calls. */\n  export const setargc = \"~lib/setargc\";\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Module_cannot_have_multiple_start_functions = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Module cannot have multiple start functions.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getGetGlobalName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\nimport {\n  bitsetIs,\n  bitsetSet\n} from \"./util\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow throws. */\n  THROWS = 1 << 2,\n  /** This flow breaks. */\n  BREAKS = 1 << 3,\n  /** This flow continues. */\n  CONTINUES = 1 << 4,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 5,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 6,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 7,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 8,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 9,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 10,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 11,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 12,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 13,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.wrappedLocals = i64_new(0);\n    flow.wrappedLocalsExt = null;\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `currentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = parentFunction.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) this.setLocalWrapped(local.index, wrapped);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = parentFunction.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) this.setLocalWrapped(local.index, wrapped);\n    return local;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, wrapped: bool, reportNode: Node | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range\n          );\n        }\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range\n          );\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(\n      name,\n      index,\n      type,\n      this.parentFunction\n    );\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name);\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the value of the local at the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    if (index < 0) return true; // inlined constant\n    if (index < 64) return bitsetIs(this.wrappedLocals, index);\n    var ext = this.wrappedLocalsExt;\n    var i = ((index - 64) / 64) | 0;\n    if (!(ext && i < ext.length)) return false;\n    return bitsetIs(ext[i], index - (i + 1) * 64);\n  }\n\n  /** Sets if the value of the local at the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    if (index < 0) return; // inlined constant\n    if (index < 64) {\n      this.wrappedLocals = bitsetSet(this.wrappedLocals, index, wrapped);\n      return;\n    }\n    var ext = this.wrappedLocalsExt;\n    var i = ((index - 64) / 64) | 0;\n    if (!ext) {\n      this.wrappedLocalsExt = ext = new Array(i + 1);\n      for (let j = 0; j <= i; ++j) ext[j] = i64_new(0);\n    } else {\n      while (ext.length <= i) ext.push(i64_new(0));\n    }\n    ext[i] = bitsetSet(ext[i], index - (i + 1) * 64, wrapped);\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\n\n    // conditional flags set in at least one arm\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\n\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let local = this.parentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !this.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: { // tee\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GetGlobal: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGetGlobalName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instance = assert(program.instancesByName.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\nimport { Source, NodeKind, ImportStatement, DeclarationStatement, ExportStatement } from \"./ast\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      let members = file.members;\n      if (!members) continue;\n      for (let member of members.values()) {\n        // FIXME: doesn't honor the actual externally visible name\n        this.visitElement(member);\n      }\n    }\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(<PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n// TODO: Extract this into separate module, preferrable pluggable\nexport class NEARBindingsBuilder extends ExportsWalker {\n  private typeMapping: { [key: string]: string } = {\n    \"i32\": \"Integer\",\n    \"u32\": \"Integer\",\n    \"i64\": \"String\",\n    \"u64\": \"String\",\n    \"String\": \"String\",\n    \"bool\": \"Boolean\"\n  };\n\n  private nonNullableTypes = [\"i32\", \"u32\", \"i64\", \"u64\", \"bool\"];\n\n  private sb: string[] = [];\n  private generatedEncodeFunctions = new Set<string>();\n  private generatedDecodeFunctions = new Set<string>();\n  private exportedClasses: Class[] = [];\n  private exportedFunctions: Function[] = [];\n\n  static build(program: Program): string {\n    return new NEARBindingsBuilder(program).build();\n  }\n\n  visitGlobal(element: Global): void {\n    // Do nothing\n  }\n\n  visitEnum(element: Enum): void {\n    // Do nothing\n  }\n\n  visitClass(element: Class): void {\n    if (!element.is(CommonFlags.MODULE_EXPORT)) {\n      return;\n    }\n    this.exportedClasses.push(element);\n  }\n\n  visitFunction(element: Function): void {\n    if (!element.is(CommonFlags.MODULE_EXPORT)) {\n      return;\n    }\n    this.exportedFunctions.push(element);\n    this.generateArgsParser(element);\n    this.generateWrapperFunction(element);\n  }\n\n  visitInterface(element: Interface): void {\n    // Do nothing\n  }\n\n  visitField(element: Field): void {\n    throw new Error(\"Shouldn't be called\");\n  }\n\n  visitNamespace(element: Element): void {\n    // Do nothing\n  }\n\n  private generateArgsParser(element: Function) {\n    let signature = element.signature;\n    let fields = signature.parameterNames ? signature.parameterNames.map((paramName, i) => {\n      return { name: paramName, type: signature.parameterTypes[i] };\n    }) : [];\n    fields.forEach(field => this.generateDecodeFunction(field.type));\n    this.sb.push(`export class __near_ArgsParser_${element.name} extends ThrowingJSONHandler {\n        buffer: Uint8Array;\n        decoder: JSONDecoder<__near_ArgsParser_${element.name}>;\n        handledRoot: boolean = false;\n      `);\n    if (signature.parameterNames) {\n      fields.forEach((field) => {\n        this.sb.push(`__near_param_${field.name}: ${this.wrappedTypeName(field.type)};`);\n      });\n      this.generateHandlerMethods(\"this.__near_param_\", fields);\n    } else {\n      this.generateHandlerMethods(\"this.__near_param_\", []);\n    }\n    this.sb.push(`}`);\n  }\n\n  private generateWrapperFunction(element: Function) {\n    let signature = element.signature;\n    let returnType = signature.returnType;\n    this.generateEncodeFunction(returnType);\n    this.sb.push(`export function ${element.name}(): void {\n      // Reading input bytes.\n      let json = storage._internalReadBytes(4, 0, 0);\n      let handler = new __near_ArgsParser_${element.name}();\n      handler.buffer = json;\n      handler.decoder = new JSONDecoder<__near_ArgsParser_${element.name}>(handler);\n      handler.decoder.deserialize(json);`);\n    if (returnType.toString() != \"void\") {\n      this.sb.push(`let result = wrapped_${element.name}(`);\n    } else {\n      this.sb.push(`wrapped_${element.name}(`);\n    }\n    if (signature.parameterNames) {\n      this.sb.push(signature.parameterNames.map(paramName => `handler.__near_param_${paramName}`).join(\",\"));\n    }\n    this.sb.push(\");\");\n    if (returnType.toString() != \"void\") {\n      this.sb.push(`\n        let encoder = new JSONEncoder();\n        encoder.pushObject(null);\n      `);\n      this.generateFieldEncoder(returnType, '\"result\"', \"result\");\n      this.sb.push(`\n        encoder.popObject();\n        let val = encoder.serialize();\n        return_value(val.byteLength, val.buffer.data);\n      `);\n    }\n    this.sb.push(`}`);\n  }\n\n  private generateHandlerMethods(valuePrefix: string, fields: any[]) : void {\n    function fieldsWithTypes(types: string[]) {\n      return fields.filter(field => types.indexOf(field.type.toString()) != -1);\n    }\n\n    this.generateBasicSetterHandlers(valuePrefix, \"Integer\", \"i64\", fieldsWithTypes([\"i32\", \"u32\"]));\n    this.generateBasicSetterHandlers(valuePrefix, \"String\", \"String\", fieldsWithTypes([\"String\", \"i64\", \"u64\"]));\n    this.generateBasicSetterHandlers(valuePrefix, \"Boolean\", \"bool\", fieldsWithTypes([\"bool\"]));\n\n    this.sb.push(\"setNull(name: string): void {\");\n    fields.forEach((field) => {\n      this.sb.push(`if (name == \"${field.name}\") {\n        ${valuePrefix}${field.name} = <${this.wrappedTypeName(field.type)}>null;\n        return;\n      }`);\n    });\n    this.sb.push(`\n      super.setNull(name);\n    }`);\n\n    let nonBasicFields = fields.filter(field => !(field.type.toString() in this.typeMapping));\n    this.sb.push(`\n      pushObject(name: string): bool {`);\n    this.sb.push(`if (!this.handledRoot) {\n      assert(name == null);\n      this.handledRoot = true;\n      return true;\n    } else {\n      assert(name != null);\n    }`);\n    this.generatePushHandler(valuePrefix, nonBasicFields.filter(field => !this.isArrayType(field.type)));\n    this.sb.push(`\n        return super.pushObject(name);\n      }`);\n    this.sb.push(`\n      pushArray(name: string): bool {`);\n    this.generatePushHandler(valuePrefix, nonBasicFields.filter(field => this.isArrayType(field.type)));\n    this.sb.push(`\n        return super.pushArray(name);\n      }`);\n  }\n\n  private generateBasicSetterHandlers(valuePrefix: string, setterType: string, setterValueType: string, matchingFields: any[]) {\n    if (matchingFields.length > 0) {\n      this.sb.push(`set${setterType}(name: string, value: ${setterValueType}): void {`);\n      matchingFields.forEach(field => {\n        if (setterType == \"String\" && field.type != \"String\") {\n          let className = field.type == \"u64\" ? \"U64\" : \"I64\";\n          this.sb.push(`if (name == \"${field.name}\") {\n            ${valuePrefix}${field.name} = ${className}.parseInt(value);\n            return;\n          }`);\n        } else {\n          this.sb.push(`if (name == \"${field.name}\") {\n            ${valuePrefix}${field.name} = <${field.type}>value;\n            return;\n          }`);\n        }\n      });\n      this.sb.push(`\n        super.set${setterType}(name, value);\n      }`);\n    }\n  }\n\n  private generatePushHandler(valuePrefix: string, fields: any[]) {\n    fields.forEach((field) => {\n      if (!(field.type.toString() in this.typeMapping)) {\n        this.sb.push(`if (name == \"${field.name}\") {\n          ${valuePrefix}${field.name} = <${field.type}>__near_decode_${this.encodeType(field.type)}(this.buffer, this.decoder.state);\n          return false;\n        }`);\n      }\n    });\n  }\n\n  private generateArrayHandlerMethods(valuePrefix: string, fieldType: Type) : void {\n    let setterType = this.typeMapping[fieldType.toString()];\n    if (setterType) {\n      let valueType = fieldType.toString();\n      if (valueType == \"u64\" || valueType == \"i64\") {\n        let className = valueType == \"u64\" ? \"U64\" : \"I64\";\n        this.sb.push(`setString(name: string, value: string): void {\n          ${valuePrefix}.push(${className}.parseInt(value));\n        }`);\n      } else {\n        if (valueType == \"u32\" || valueType == \"i32\") {\n          valueType = \"i64\"\n        }\n        this.sb.push(`set${setterType}(name: string, value: ${valueType}): void {\n          ${valuePrefix}.push(<${fieldType}>value);\n        }`);\n      }\n      this.sb.push(`setNull(name: string): void {\n        ${valuePrefix}.push(<${fieldType}>null);\n      }\n      pushArray(name: string): bool {\n        assert(name == null && !this.handledRoot);\n        this.handledRoot = true;\n        return true;\n      }`);\n    } else {\n      this.sb.push(`pushObject(name: string): bool {\n        ${valuePrefix}.push(<${fieldType}>__near_decode_${this.encodeType(fieldType)}(this.buffer, this.decoder.state));\n        return false;\n      }\n      pushArray(name: string): bool {\n        assert(name == null);\n        if (!this.handledRoot) {\n          this.handledRoot = true;\n          return true;\n        }\n        ${valuePrefix}.push(<${fieldType}>__near_decode_${this.encodeType(fieldType)}(this.buffer, this.decoder.state));\n        return false;\n      }`);\n    }\n  }\n\n\n  private generateEncodeFunction(type: Type) {\n    if (!type.classReference) {\n      return;\n    }\n\n    let typeName = this.encodeType(type);\n    if (this.generatedEncodeFunctions.has(typeName) || typeName in this.typeMapping) {\n      return;\n    }\n    this.generatedEncodeFunctions.add(typeName);\n\n    let methodName = `__near_encode_${typeName}`;\n    if (this.tryUsingImport(type, methodName)) {\n      return;\n    }\n\n    if (this.isArrayType(type)) {\n      // Array\n      this.generateEncodeFunction(type.classReference.typeArguments![0]);\n\n      this.sb.push(`export function __near_encode_${typeName}(\n          value: ${this.wrappedTypeName(type)},\n          encoder: JSONEncoder): void {`);\n      this.sb.push(`for (let i = 0; i < value.length; i++) {`);\n      this.generateFieldEncoder(type.classReference.typeArguments![0], \"null\", \"value[i]\");\n      this.sb.push(\"}\");\n\n    } else {\n      // Object\n      this.getFields(type.classReference).forEach(field => {\n        this.generateEncodeFunction(field.type);\n      });\n\n      this.sb.push(`export function __near_encode_${typeName}(\n          value: ${this.wrappedTypeName(type)},\n          encoder: JSONEncoder): void {`);\n      this.getFields(type.classReference).forEach((field) => {\n        let fieldType = field.type;\n        let fieldName = field.name;\n        let sourceExpr = `value.${fieldName}`;\n        this.generateFieldEncoder(fieldType, `\"${fieldName}\"`, sourceExpr);\n      });\n    }\n\n    this.sb.push(\"}\");\n  }\n\n  private tryUsingImport(type: Type, methodName: string): bool {\n    let sourcesWithExport = this.program.sources.filter(source =>\n      this.getExports(source).filter(d => d.name.text == methodName).length > 0);\n\n    if (sourcesWithExport.length == 0) {\n      return false;\n    }\n\n    if (sourcesWithExport.length > 1) {\n      console.log(`WARN: more than one file exporting ${methodName}: ${sourcesWithExport.map(s => s.normalizedPath)}`);\n    }\n\n    let importPath = sourcesWithExport[0].normalizedPath.replace('.ts', '');\n    this.sb.push(`import { ${methodName} } from \"./${importPath}\";`);\n    return true;\n  }\n\n  private generateHandler(type: Type) {\n    let typeName = this.encodeType(type);\n    this.sb.push(`export class __near_JSONHandler_${typeName} extends ThrowingJSONHandler {\n      buffer: Uint8Array;\n      decoder: JSONDecoder<__near_JSONHandler_${typeName}>;\n      handledRoot: boolean = false;\n      value: ${this.wrappedTypeName(type)} = new ${this.wrappedTypeName(type)}();`);\n    if (this.isArrayType(type)) {\n      this.generateArrayHandlerMethods(\"this.value\", type.classReference!.typeArguments![0]);\n    } else {\n      this.generateHandlerMethods(\"this.value.\", this.getFields(type.classReference!));\n    }\n    this.sb.push(\"}\\n\");\n  }\n\n  private wrappedTypeName(type: Type): string {\n    if (!type.classReference) {\n      return type.toString();\n    }\n    let cls = type.classReference;\n    if (this.exportedClasses.indexOf(cls) != -1) {\n      return \"wrapped_\" + cls.name;\n    }\n    if (cls.typeArguments && cls.typeArguments.length > 0) {\n      return cls.prototype.name + \"<\" +\n        cls.typeArguments.map(argType => this.wrappedTypeName(argType)).join(\", \") +\n      \">\"\n    }\n    return cls.name;\n  }\n\n  private generateDecodeFunction(type: Type) {\n    if (!type.classReference) {\n      return;\n    }\n\n    let typeName = this.encodeType(type);\n    if (this.generatedDecodeFunctions.has(typeName) || typeName in this.typeMapping) {\n      return;\n    }\n    this.generatedDecodeFunctions.add(typeName);\n\n    let methodName = `__near_decode_${typeName}`;\n    if (this.tryUsingImport(type, methodName)) {\n      return;\n    }\n\n    this.generateHandler(type);\n    if (this.isArrayType(type)) {\n      // Array\n      this.generateDecodeFunction(type.classReference.typeArguments![0]);\n    } else {\n      // Object\n      this.getFields(type.classReference).forEach(field => {\n        this.generateDecodeFunction(field.type);\n      });\n    }\n\n    this.sb.push(`export function __near_decode_${typeName}(\n        buffer: Uint8Array, state: DecoderState):${this.wrappedTypeName(type)} {\n      let handler = new __near_JSONHandler_${typeName}();\n      handler.buffer = buffer;\n      handler.decoder = new JSONDecoder<__near_JSONHandler_${typeName}>(handler);\n      handler.decoder.deserialize(buffer, state);\n      return handler.value;\n    }\\n`);\n  }\n\n  private generateFieldEncoder(fieldType: Type, fieldExpr: string, sourceExpr: string) {\n    let setterType = this.typeMapping[fieldType.toString()];\n    if (!setterType) {\n      // Object / array\n      let pushType = this.isArrayType(fieldType) ? \"Array\" : \"Object\";\n      this.sb.push(`if (${sourceExpr} != null) {\n          encoder.push${pushType}(${fieldExpr});\n          __near_encode_${this.encodeType(fieldType)}(<${fieldType}>${sourceExpr}, encoder);\n          encoder.pop${pushType}();\n        } else {\n          encoder.setNull(${fieldExpr});\n        }`);\n    } else {\n      // Basic types\n      if (this.nonNullableTypes.indexOf(fieldType.toString()) != -1) {\n        if ([\"i64\", \"u64\"].indexOf(fieldType.toString()) != -1) {\n          this.sb.push(`encoder.set${setterType}(${fieldExpr}, ${sourceExpr}.toString());`);\n        } else {\n          this.sb.push(`encoder.set${setterType}(${fieldExpr}, ${sourceExpr});`);\n        }\n      } else {\n        this.sb.push(`if (${sourceExpr} != null) {\n            encoder.set${setterType}(${fieldExpr}, ${sourceExpr});\n          } else {\n            encoder.setNull(${fieldExpr});\n          }`);\n      }\n    }\n  }\n\n  private encodeType(type: Type) : string {\n    return (<any>type.toString())\n      .replace(/_/g, '__')\n      .replace(/>/g, '')\n      .replace(/</g, '_');\n  }\n\n  private isArrayType(type: Type): bool {\n    return !!(type.classReference && type.classReference.prototype.name == \"Array\" && type.classReference.typeArguments);\n  }\n\n  private getFields(element: Class): Field[] {\n    if (!element.members) {\n      return [];\n    }\n\n    return <Field[]>[...element.members.values()].filter(member => member instanceof Field);\n  }\n\n  build(): string {\n    let mainSource = this.program.sources\n      .filter(s => s.normalizedPath.indexOf(\"~lib\") != 0)[0];\n    this.copyImports(mainSource);\n\n    this.walk();\n\n    this.exportedClasses.forEach(c => {\n      this.generateEncodeFunction(c.type);\n      this.generateDecodeFunction(c.type);\n    });\n\n    let allExported = (<Element[]>this.exportedClasses).concat(<Element[]>this.exportedFunctions).filter(e => e.is(CommonFlags.MODULE_EXPORT));\n    let allImportsStr = allExported.map(c => `${c.name} as wrapped_${c.name}`).join(\", \");\n    this.sb = [`\n      import { storage, near } from \"./near\";\n      import { JSONEncoder} from \"./json/encoder\"\n      import { JSONDecoder, ThrowingJSONHandler, DecoderState  } from \"./json/decoder\"\n      import {${allImportsStr}} from \"./${mainSource.normalizedPath.replace(\".ts\", \"\")}\";\n\n      // Runtime functions\n      @external(\"env\", \"return_value\")\n      declare function return_value(value_len: usize, value_ptr: usize): void;\n    `].concat(this.sb);\n    this.exportedClasses.forEach(c => {\n      this.sb.push(`export class ${c.name} extends ${this.wrappedTypeName(c.type)} {\n        static decode(json: Uint8Array): ${c.name} {\n          return <${c.name}>__near_decode_${this.encodeType(c.type)}(json, null);\n        }\n\n        encode(): Uint8Array {\n          let encoder: JSONEncoder = new JSONEncoder();\n          encoder.pushObject(null);\n          __near_encode_${this.encodeType(c.type)}(<${c.name}>this, encoder);\n          encoder.popObject();\n          return encoder.serialize();\n        }\n      }`);\n    })\n    return this.sb.join(\"\\n\");\n  }\n\n  private copyImports(mainSource: Source): any {\n    this.getImports(mainSource).forEach(statement => {\n      if (statement.declarations) {\n        let declarationsStr = statement.declarations!\n          .map(declaration => `${declaration.foreignName.text} as ${declaration.name.text}`)\n          .join(\",\");\n        this.sb.push(`import {${declarationsStr}} from \"${statement.path.value}\";`);\n      }\n    });\n  }\n\n  private getImports(source: Source): ImportStatement[] {\n    return <ImportStatement[]>source.statements\n      .filter(statement => statement.kind == NodeKind.IMPORT);\n  }\n\n  private getExports(source: Source): DeclarationStatement[] {\n    let declarations = <DeclarationStatement[]>source.statements\n      .filter(statement =>\n        statement.kind == NodeKind.FUNCTIONDECLARATION ||\n        statement.kind == NodeKind.CLASSDECLARATION);\n    return declarations.filter(d => d.is(CommonFlags.EXPORT));\n  }\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(element.identifierNode.text); // 'get:funcName' internally\n      sb.push(\": \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(element.name);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.name); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.parent.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n      let current = first;\n      let parameters: TypeNode[] | null = null;\n      let nullable = false;\n\n      // Identifier ('.' Identifier)+\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n          current.next = next;\n          current = next;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range(tn.pos)\n          );\n          return null;\n        }\n      }\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<TypeNode>parameter];\n          else parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      if (!typeParameters) typeParameters = [ typeParameter ];\n      else typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!(typeParameters && typeParameters.length)) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      let defaultType: TypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<TypeNode>type];\n          else implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.TYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<TypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return identifier;\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments: CommonTypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitStackIR();\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__19__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0; // JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n}\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  }\n});\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64\n} from \"./module\";\n\nimport {\n  ElementKind,\n  OperatorKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  Global,\n  DecoratorFlags,\n  ClassPrototype\n} from \"./program\";\n\nimport {\n  FlowFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n  export const i32_notify = \"~lib/builtins/i32.notify\";\n  export const i64_notify = \"~lib/builtins/i64.notify\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_s_f32x4_sat = \"~lib/builtins/i32x4.trunc_s_f32x4_sat\";\n  export const i32x4_trunc_u_f32x4_sat = \"~lib/builtins/i32x4.trunc_u_f32x4_sat\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_s_f64x2_sat = \"~lib/builtins/i64x2.trunc_s_f64x2_sat\";\n  export const i64x2_trunc_u_f64x2_sat = \"~lib/builtins/i64x2.trunc_u_f64x2_sat\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_s_i32x4 = \"~lib/builtins/f32x4.convert_s_i32x4\";\n  export const f32x4_convert_u_i32x4 = \"~lib/builtins/f32x4.convert_u_i32x4\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_s_i64x2 = \"~lib/builtins/f64x2.convert_s_i64x2\";\n  export const f64x2_convert_u_i64x2 = \"~lib/builtins/f64x2.convert_u_i64x2\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n  // std/memory.ts\n  export const HEAP_BASE = \"~lib/memory/HEAP_BASE\";\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  // std/gc.ts\n  export const iterateRoots = \"~lib/gc/iterateRoots\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  // NOTE that consolidation of individual instructions into a single case isn't exactly scientific\n  // below, but rather done to make this file easier to work with. If there was a general rule it'd\n  // most likely be \"three or more instructions that only differ in their actual opcode\".\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.createI32(0);\n      let classPrototype = classReference.prototype;\n      return module.createI32(\n        (<ClassPrototype>classPrototype).extends(compiler.program.arrayPrototype)\n          ? 1\n          : 0\n      );\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.createI32(0);\n      return module.createI32(\n        classReference.lookupInSelf(\"length\") && (\n          classReference.lookupOverload(OperatorKind.INDEXED_GET) ||\n          classReference.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET)\n        ) ? 1 : 0\n      );\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return module.createI32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return module.createI32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let element = compiler.resolver.resolveExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.void,\n        ReportMode.SWALLOW\n      );\n      return module.createI32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\n      if (!compiler.program.hasGC) {\n        compiler.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.createUnreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.createI32(byteSize);\n        } else {\n          expr = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.createI64(byteSize, 0);\n        } else {\n          expr = module.createI32(byteSize);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.createUnreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      assert(isPowerOf2(byteSize));\n      let alignLog2 = ctz<i32>(byteSize);\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.createI32(alignLog2);\n        } else {\n          expr = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.createI64(alignLog2, 0);\n        } else {\n          expr = module.createI32(alignLog2);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let classType = typeArguments![0].classReference;\n      if (!classType) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: // any_bitcount<T?>(value: T) -> T\n    case BuiltinSymbols.ctz:\n    case BuiltinSymbols.popcnt: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.clz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.ClzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.ClzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.ctz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.CtzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.CtzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.popcnt: {\n          switch (compiler.currentType.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.PopcntI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.PopcntI64; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      return module.createUnary(op, arg0);\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            type\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflows\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            type\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflowws\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFlow;\n\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal1 = flow.getTempLocal(Type.i32, false);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 31)) ^ (x >> 31)\n          expr = module.createBinary(BinaryOp.XorI32,\n            module.createBinary(BinaryOp.AddI32,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(BinaryOp.ShrI32,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  module.createI32(31)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, NativeType.I32)\n            ),\n            module.createGetLocal(tempLocalIndex2, NativeType.I32)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let options = compiler.options;\n          let flow = compiler.currentFlow;\n          let wasm64 = options.isWasm64;\n\n          let tempLocal1 = flow.getTempLocal(options.usizeType, false);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          expr = module.createBinary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n            module.createBinary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  wasm64 ? module.createI64(63) : module.createI32(31)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, options.nativeSizeType)\n            ),\n            module.createGetLocal(tempLocalIndex2, options.nativeSizeType)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.I64: {\n          let flow = compiler.currentFlow;\n\n          let tempLocal1 = flow.getTempLocal(Type.i64, false);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 63)) ^ (x >> 63)\n          expr = module.createBinary(BinaryOp.XorI64,\n            module.createBinary(BinaryOp.AddI64,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(BinaryOp.ShrI64,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  module.createI64(63)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, NativeType.I64)\n            ),\n            module.createGetLocal(tempLocalIndex2, NativeType.I64)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n        case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n        case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtI64\n            : BinaryOp.GtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtU64\n            : BinaryOp.GtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.createUnreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type, true);\n      let tempLocal1 = flow.getAndFreeTempLocal(type, true);\n      flow.freeTempLocal(tempLocal0);\n      return module.createSelect(\n        module.createTeeLocal(tempLocal0.index, arg0),\n        module.createTeeLocal(tempLocal1.index, arg1),\n        module.createBinary(op,\n          module.createGetLocal(tempLocal0.index, nativeType),\n          module.createGetLocal(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n        case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n        case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtI64\n            : BinaryOp.LtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtU64\n            : BinaryOp.LtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.createBinary(BinaryOp.MinF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.createBinary(BinaryOp.MinF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.createUnreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type, true);\n      let tempLocal1 = flow.getAndFreeTempLocal(type, true);\n      flow.freeTempLocal(tempLocal0);\n      return module.createSelect(\n        module.createTeeLocal(tempLocal0.index, arg0),\n        module.createTeeLocal(tempLocal1.index, arg1),\n        module.createBinary(op,\n          module.createGetLocal(tempLocal0.index, nativeType),\n          module.createGetLocal(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.ceil: // any_rounding<T?>(value: T) -> T\n    case BuiltinSymbols.floor: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: return arg0; // considered rounded\n        case TypeKind.F32: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF32\n            : UnaryOp.FloorF32;\n          break;\n        }\n        case TypeKind.F64: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF64\n            : UnaryOp.FloorF64;\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.createUnreachable();\n        }\n      }\n      return module.createUnary(op, arg0);\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let op: BinaryOp;\n      switch (type.kind) {\n        // TODO: does an integer version make sense?\n        case TypeKind.F32: { op = BinaryOp.CopysignF32; break; }\n        case TypeKind.F64: { op = BinaryOp.CopysignF64; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.createUnreachable();\n        }\n      }\n      return module.createBinary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          expr = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          expr = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          let arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          expr = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          expr = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          expr = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = type;\n      return expr;\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          expr = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          expr = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.createUnreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.createUnreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.createUnreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.createUnreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.createLoad(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n              : ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          inType, type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.createUnreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.createUnreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.createUnreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = outType;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.createUnreachable();\n      }\n      compiler.currentType = outType;\n      return module.createAtomicLoad(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n              : ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          inType, type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createAtomicStore(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n              : ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          inType, type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.createUnreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.createAtomicRMW(\n        op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize): T\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n              : ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(\n        operands[2],\n        inType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          inType, type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(\n          arg2,\n          inType, type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.createUnreachable();\n      }\n      compiler.currentType = inType;\n      return module.createAtomicCmpxchg(\n        type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg2 = compiler.compileExpression(\n        operands[2],\n        Type.i64,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.i32;\n      return module.createAtomicWait(arg0, arg1, arg2, type.toNativeType());\n    }\n    case BuiltinSymbols.atomic_notify: { // notify<T!>(ptr: usize, count: i32): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.i32;\n      return module.createAtomicWake(arg0, arg1);\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.createSelect(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.createUnreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.createUnreachable();\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      return module.createHost(HostOp.GrowMemory, null, [\n        compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.createUnreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = compiler.compileExpression(\n        operands[1],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg2 = compiler.compileExpression(\n        operands[2],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      return module.createMemoryCopy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.createUnreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u8,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg2 = compiler.compileExpression(\n        operands[2],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      return module.createMemoryFill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        toType,\n        WrapMode.NONE\n      );\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (fromType.size != toType.size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.createUnreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      let expr: ExpressionRef;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createIf(\n              module.createUnary(UnaryOp.EqzI32, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createIf(\n              module.createUnary(UnaryOp.EqzI64, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            expr = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            expr = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(type, true /* arg0 is wrapped */);\n            expr = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64, false);\n            expr = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType, false);\n            expr = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32, false);\n            expr = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64, false);\n            expr = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      let expr = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\n      ) return module.createUnreachable();\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\n      let arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      let arg0Type = compiler.currentType;\n      if (!(\n        arg0Type == Type.u32 ||                                      // either plain index\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\n      )) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.createUnreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let nativeReturnType = returnType.toNativeType();\n      let parameterTypes = new Array<Type>(numOperands);\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\n        let operandType = compiler.currentType;\n        parameterTypes[i] = operandType;\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.createCallIndirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.createUnreachable();\n      let classInstance = typeArguments![0].classReference;\n      if (!classInstance) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createUnreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.i8, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.i16, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = UnaryOp.SplatVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = UnaryOp.SplatVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = UnaryOp.SplatVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = UnaryOp.SplatVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? UnaryOp.SplatVecI64x2\n            : UnaryOp.SplatVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = UnaryOp.SplatVecF32x4; break; }\n        case TypeKind.F64: { op = UnaryOp.SplatVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.createUnreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.v128;\n      return module.createUnary(op, arg0);\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = type;\n        return module.createUnreachable();\n      }\n      let op: SIMDExtractOp;\n      switch (type.kind) {\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneSVecI8x16; break; }\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneUVecI8x16; break; }\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneSVecI16x8; break; }\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneUVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneVecI64x2\n            : SIMDExtractOp.ExtractLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = type;\n          return module.createUnreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = module.precomputeExpression(\n        compiler.compileExpression(operands[1], Type.u8, ConversionKind.IMPLICIT, WrapMode.NONE)\n      );\n      compiler.currentType = type;\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        return module.createUnreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.createUnreachable();\n      }\n      return module.createSIMDExtract(op, arg0, idx);\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: SIMDReplaceOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneVecI64x2\n            : SIMDReplaceOp.ReplaceLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.createUnreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = module.precomputeExpression(\n        compiler.compileExpression(operands[1], Type.u8, ConversionKind.IMPLICIT, WrapMode.NONE)\n      );\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.createUnreachable();\n      }\n      let arg2 = compiler.compileExpression(operands[2], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.v128;\n      return module.createSIMDReplace(op, arg0, idx, arg2);\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let laneWidth = type.byteSize;\n      let laneCount = 16 / laneWidth;\n      assert(isInteger(laneCount) && isPowerOf2(laneCount));\n      if (\n        checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.F32:\n        case TypeKind.F64: break;\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.createUnreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let mask = new Uint8Array(16);\n      let maxIdx = (laneCount << 1) - 1;\n      for (let i = 0; i < laneCount; ++i) {\n        let operand = operands[2 + i];\n        let argN = module.precomputeExpression(\n          compiler.compileExpression(operand, Type.u8, ConversionKind.IMPLICIT, WrapMode.NONE)\n        );\n        if (getExpressionId(argN) != ExpressionId.Const) {\n          compiler.error(\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\n            operand.range\n          );\n          compiler.currentType = Type.v128;\n          return module.createUnreachable();\n        }\n        assert(getExpressionType(argN) == NativeType.I32);\n        let idx = getConstValueI32(argN);\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          compiler.currentType = Type.v128;\n          return module.createUnreachable();\n        }\n        switch (laneWidth) {\n          case 1: {\n            writeI8(idx, mask, i);\n            break;\n          }\n          case 2: {\n            let off8 = i << 1;\n            let idx8 = idx << 1;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            break;\n          }\n          case 4: {\n            let off8 = i << 2;\n            let idx8 = idx << 2;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            break;\n          }\n          case 8: {\n            let off8 = i << 3;\n            let idx8 = idx << 3;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            writeI8(idx8 + 4, mask, off8 + 4);\n            writeI8(idx8 + 5, mask, off8 + 5);\n            writeI8(idx8 + 6, mask, off8 + 6);\n            writeI8(idx8 + 7, mask, off8 + 7);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createSIMDShuffle(arg0, arg1, mask);\n    }\n    case BuiltinSymbols.v128_add: // any_binary<T!>(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_sub:\n    case BuiltinSymbols.v128_mul:\n    case BuiltinSymbols.v128_div:\n    case BuiltinSymbols.v128_add_saturate:\n    case BuiltinSymbols.v128_sub_saturate:\n    case BuiltinSymbols.v128_min:\n    case BuiltinSymbols.v128_max:\n    case BuiltinSymbols.v128_eq:\n    case BuiltinSymbols.v128_ne:\n    case BuiltinSymbols.v128_lt:\n    case BuiltinSymbols.v128_le:\n    case BuiltinSymbols.v128_gt:\n    case BuiltinSymbols.v128_ge: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_add: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.AddVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.AddVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.AddVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.AddVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.AddVecI64x2\n                : BinaryOp.AddVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.AddVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.AddVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.SubVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.SubVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.SubVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.SubVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.SubVecI64x2\n                : BinaryOp.SubVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.SubVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.SubVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_mul: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.MulVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.MulVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.MulVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.MulVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MulVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.MulVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_div: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.DivVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.DivVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_add_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.AddSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.AddSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.AddSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.AddSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.SubSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.SubSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.SubSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.SubSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_min: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MinVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MinVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_max: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MaxVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MaxVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_eq: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.EqVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.EqVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.EqVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.EqVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.EqVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.EqVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ne: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.NeVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.NeVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.NeVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.NeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.NeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.NeVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_lt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LtSVecI32x4\n                  : BinaryOp.LtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_le: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LeSVecI32x4\n                  : BinaryOp.LeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_gt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GtSVecI32x4\n                  : BinaryOp.GtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ge: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GeSVecI32x4\n                  : BinaryOp.GeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.v128;\n      return module.createBinary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_neg: // any_unary<T!>(a: v128) -> v128\n    case BuiltinSymbols.v128_abs:\n    case BuiltinSymbols.v128_sqrt:\n    case BuiltinSymbols.v128_convert:\n    case BuiltinSymbols.v128_trunc: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_neg: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.NegVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.NegVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.NegVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.NegVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.NegVecI64x2\n                : UnaryOp.NegVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = UnaryOp.NegVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.NegVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_abs: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.AbsVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.AbsVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sqrt: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.SqrtVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.SqrtVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_convert: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.ConvertSVecI32x4ToVecF32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.ConvertUVecI32x4ToVecF32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.ConvertSVecI64x2ToVecF64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.ConvertUVecI64x2ToVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_trunc: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.TruncSatSVecF32x4ToVecI32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.TruncSatUVecF32x4ToVecI32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.TruncSatSVecF64x2ToVecI64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.TruncSatUVecF64x2ToVecI64x2; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.v128;\n      return module.createUnary(op, arg0);\n    }\n    case BuiltinSymbols.v128_shl: // any_shift<T!>(a: v128, b: i32) -> v128\n    case BuiltinSymbols.v128_shr: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: SIMDShiftOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_shl: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = SIMDShiftOp.ShlVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = SIMDShiftOp.ShlVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = SIMDShiftOp.ShlVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = SIMDShiftOp.ShlVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShlVecI64x2\n                : SIMDShiftOp.ShlVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_shr: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = SIMDShiftOp.ShrSVecI8x16; break; }\n            case TypeKind.U8:  { op = SIMDShiftOp.ShrUVecI8x16; break; }\n            case TypeKind.I16: { op = SIMDShiftOp.ShrSVecI16x8; break; }\n            case TypeKind.U16: { op = SIMDShiftOp.ShrUVecI16x8; break; }\n            case TypeKind.I32: { op = SIMDShiftOp.ShrSVecI32x4; break; }\n            case TypeKind.U32: { op = SIMDShiftOp.ShrUVecI32x4; break; }\n            case TypeKind.I64: { op = SIMDShiftOp.ShrSVecI64x2; break; }\n            case TypeKind.U64: { op = SIMDShiftOp.ShrUVecI64x2; break; }\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrSVecI64x2\n                : SIMDShiftOp.ShrSVecI32x4;\n              break;\n            }\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrUVecI64x2\n                : SIMDShiftOp.ShrUVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.v128;\n      return module.createSIMDShift(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_and: // any_bitwise_binary(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_or:\n    case BuiltinSymbols.v128_xor: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_and: { op = BinaryOp.AndVec128; break; }\n        case BuiltinSymbols.v128_or:  { op = BinaryOp.OrVec128; break; }\n        case BuiltinSymbols.v128_xor: { op = BinaryOp.XorVec128; break; }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      return module.createBinary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // any_bitwise_unary(a: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      return module.createUnary(UnaryOp.NotVec128, arg0);\n    }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      return module.createSIMDBitselect(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: // any_test<T!>(a: v128) -> bool\n    case BuiltinSymbols.v128_all_true: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_any_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AnyTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AnyTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AnyTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AnyTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AnyTrueVecI64x2\n                : UnaryOp.AnyTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_all_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AllTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AllTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AllTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AllTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AllTrueVecI64x2\n                : UnaryOp.AllTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createUnary(op, arg0);\n    }\n\n    // === GC integration =========================================================================\n\n    case BuiltinSymbols.iterateRoots: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      let type = compiler.currentType;\n      let signatureReference = type.signatureReference;\n      if (\n        !type.is(TypeFlags.REFERENCE) ||\n        !signatureReference ||\n        signatureReference.parameterTypes.length != 1 ||\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\n       ) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      // just emit a call even if the function doesn't yet exist\n      compiler.needsIterateRoots = true;\n      compiler.currentType = Type.void;\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Cannot_find_name_0,\n    reportNode.expression.range, prototype.internalName\n  );\n  return module.createUnreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  if (compiler.options.hasFeature(Feature.THREADS)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_notify: return deferASM(BuiltinSymbols.atomic_notify, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_notify: return deferASM(BuiltinSymbols.atomic_notify, compiler, Type.i64, operands, Type.i32, reportNode);\n    }\n  }\n  if (compiler.options.hasFeature(Feature.SIMD)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.void, reportNode);\n\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_s_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_u_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_trunc_s_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_trunc_u_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_s_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_u_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_s_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_u_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    }\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    [ typeArgument ],\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.createUnreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringInstance.type, ConversionKind.IMPLICIT, WrapMode.NONE)\n    : stringInstance.type.toNativeZero(module);\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCall(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.createI32(reportNode.range.line),\n        module.createI32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n\n/** Compiles the iterateRoots function if required. */\nexport function compileIterateRoots(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var typeName = Signature.makeSignatureString([ Type.i32 ], Type.void);\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              compiler.options.isWasm64\n                ? module.createI64(i64_low(value), i64_high(value))\n                : module.createI32(i64_low(value))\n            ],\n            typeName\n          )\n        );\n      } else {\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              module.createGetGlobal(\n                global.internalName,\n                compiler.options.nativeSizeType\n              )\n            ],\n            typeName\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(\"~iterateRoots\", typeRef, [],\n    exprs.length\n      ? module.createBlock(null, exprs)\n      : module.createNop()\n  );\n}\n\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\nexport function ensureGCHook(\n  compiler: Compiler,\n  classInstance: Class\n): u32 {\n  var program = compiler.program;\n  assert(classInstance.type.isManaged(program));\n\n  // check if the GC hook has already been created\n  {\n    let existingIndex = classInstance.gcHookIndex;\n    if (existingIndex != <u32>-1) return existingIndex;\n  }\n\n  // check if the class implements a custom GC function (only valid for library elements)\n  var members = classInstance.members;\n  if (classInstance.isDeclaredInLibrary) {\n    if (members !== null && members.has(\"__gc\")) {\n      let gcPrototype = assert(members.get(\"__gc\"));\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\n      assert(gcInstance.signature.parameterTypes.length == 0);\n      assert(gcInstance.signature.returnType == Type.void);\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\n      assert(compiler.compileFunction(gcInstance));\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\n      classInstance.gcHookIndex = index;\n      return index;\n    }\n  }\n\n  var module = compiler.module;\n  var options = compiler.options;\n  var nativeSizeType = options.nativeSizeType;\n  var nativeSizeSize = options.usizeType.byteSize;\n  var body = new Array<ExpressionRef>();\n\n  // nothing to mark if 'this' is null\n  body.push(\n    module.createIf(\n      module.createUnary(\n        options.isWasm64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.createGetLocal(0, nativeSizeType)\n      ),\n      module.createReturn()\n    )\n  );\n\n  // remember the function index so we don't recurse infinitely\n  var functionTable = compiler.functionTable;\n  var gcHookIndex = functionTable.length;\n  functionTable.push(\"<placeholder>\");\n  classInstance.gcHookIndex = gcHookIndex;\n\n  // if the class extends a base class, call its hook first (calls mark)\n  var baseInstance = classInstance.base;\n  if (baseInstance) {\n    assert(baseInstance.type.isManaged(program));\n    body.push(\n      module.createCallIndirect(\n        module.createI32(\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\n        ),\n        [\n          module.createGetLocal(0, nativeSizeType)\n        ],\n        \"FUNCSIG$\" + (nativeSizeType == NativeType.I64 ? \"vj\" : \"vi\")\n      )\n    );\n\n  // if this class is the top-most base class, mark the instance\n  } else {\n    body.push(\n      module.createCall(assert(program.gcMarkInstance).internalName, [\n        module.createGetLocal(0, nativeSizeType)\n      ], NativeType.None)\n    );\n  }\n\n  // mark instances assigned to own fields that are again references\n  if (members) {\n    for (let member of members.values()) {\n      if (member.kind == ElementKind.FIELD) {\n        if ((<Field>member).parent === classInstance) {\n          let type = (<Field>member).type;\n          if (type.isManaged(program)) {\n            let offset = (<Field>member).memoryOffset;\n            assert(offset >= 0);\n            body.push(\n              module.createCall(assert(program.gcMarkInstance).internalName, [\n                module.createLoad(\n                  nativeSizeSize,\n                  false,\n                  module.createGetLocal(0, nativeSizeType),\n                  nativeSizeType,\n                  offset\n                )\n              ], NativeType.None)\n            );\n          }\n        }\n      }\n    }\n  }\n\n  // add the function to the module and return its table index\n  var funcName = classInstance.internalName + \"~gc\";\n  module.addFunction(\n    funcName,\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\n    null,\n    module.createBlock(null, body)\n  );\n  functionTable[gcHookIndex] = funcName;\n  return gcHookIndex;\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder,\n  NEARBindingsBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n// TODO: Make pluggable tree walkers instead of hardcoding various formats here\nexport function buildNEAR(program: Program): string {\n  return NEARBindingsBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util\";\n"],"sourceRoot":""}