{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","feature_1","Feature","target_1","Target","typeinfo_1","Typeinfo","TypeinfoFlags","__export","isPowerOf2","x","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","common_1","tokenizer_1","Token","Range","NodeKind","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","Node","createTypeName","typeName","TypeName","identifier","next","createSimpleTypeName","createIdentifierExpression","createType","typeArguments","isNullable","type","TypeNode","createOmittedType","createTypeParameter","extendsType","defaultType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createSignature","parameters","returnType","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","flags","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","createExportDefaultStatement","ExportDefaultStatement","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","localName","exportedName","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","foreignName","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","arrowKind","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","_super","__extends","_this","apply","TYPENAME","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","NONE","is","flag","isAny","set","DecoratorKind","SIGNATURE","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","UNMANAGED","UNSAFE","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","BINARY","numTypeArguments","numArguments","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","STRING","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","SOURCE","parent","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","LIBRARY","DeclarationStatement","INDEXSIGNATUREDECLARATION","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","CONTINUE","DO","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","EXPORTDEFAULT","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","ArrowKind","FUNCTIONDECLARATION","clone","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","endsWith","findDecorator","k","decorator","isTypeOmitted","OperatorKind","diagnostics_1","types_1","ast_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","typeClasses","managedClasses","nextClassId","nativeDummySignature","nativeSource","nativeFile","File","internalName","resolver","Resolver","writeRuntimeHeader","buffer","offset","classInstance","payloadSize","writeI32","id","makeNativeVariableDeclaration","makeNativeTypeDeclaration","makeNativeFunctionDeclaration","makeNativeNamespaceDeclaration","makeNativeFunction","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","GENERIC","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerNativeTypeClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","firstChar","parseInt","Error","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","requireFunction","allocInstance","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","_l","_m","isEntry","_o","_p","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FIELD","_e","_f","setType","typeKind","className","classElement","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","requireGlobal","lookupExport","fileQueuedExports","checkDecorators","acceptedFlags","decoratorKindToFlag","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeProperty","initializeMethod","STATIC","INTERFACE_PROTOTYPE","READONLY","ABSTRACT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","AMBIENT","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","Element","program","shadowType","FILE","current","unset","originalDeclaration","actual","isBound","TypedElement","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Parameter","Local","index","LOCAL","instances","boundPrototypes","toBound","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","AcyclicState","_isInterface","constructorPrototype","extends","basePtototype","Class","base","INTERFACE","currentMemoryOffset","constructorInstance","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","isBuiltinArray","lengthField","lookupOverload","isAssignableTo","target","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","writeField","baseOffset","writeI8","writeI16","writeF32","writeF64","getTypeArgumentsTo","extendedPrototype","getArrayValueType","abvInstance","acyclic","hasCycle","cyclesTo","other","except","classReference","Interface","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","store","_BinaryenLiteralVec128","unary","op","_BinaryenUnary","binary","_BinaryenBinary","host","operands","allocPtrArray","_BinaryenHost","local_get","_BinaryenLocalGet","local_tee","_BinaryenLocalTee","global_get","_BinaryenGlobalGet","load","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","atomic_load","_BinaryenAtomicLoad","atomic_store","_BinaryenAtomicStore","atomic_rmw","_BinaryenAtomicRMW","atomic_cmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","atomic_wait","timeout","expectedType","_BinaryenAtomicWait","atomic_notify","notifyCount","_BinaryenAtomicNotify","local_set","_BinaryenLocalSet","global_set","_BinaryenGlobalSet","block","children","_BinaryenBlock","br","_BinaryenBreak","drop","_BinaryenDrop","loop","_BinaryenLoop","if","_BinaryenIf","nop","_BinaryenNop","return","_BinaryenReturn","select","_BinaryenSelect","switch","defaultName","numNames","strs","_BinaryenSwitch","_BinaryenCall","call_indirect","_BinaryenCallIndirect","unreachable","_BinaryenUnreachable","memory_copy","size","_BinaryenMemoryCopy","memory_fill","_BinaryenMemoryFill","simd_extract","vec","idx","_BinaryenSIMDExtract","simd_replace","_BinaryenSIMDReplace","simd_shuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","simd_bitselect","cond","_BinaryenSIMDBitselect","simd_shift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","getFeatures","_BinaryenModuleGetFeatures","setFeatures","featureFlags","_BinaryenModuleSetFeatures","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getLocalGetIndex","getLocalSetIndex","_BinaryenLocalSetGetIndex","getLocalSetValue","_BinaryenLocalSetGetValue","isLocalTee","_BinaryenLocalSetIsTee","getGlobalGetName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","getCallTarget","_BinaryenCallGetTarget","getCallOperandCount","_BinaryenCallGetNumOperands","getCallOperand","_BinaryenCallGetOperand","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Return","Break","Block","numChildren","traverse","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDBitselect","_BinaryenSIMDBitselectGetLeft","_BinaryenSIMDBitselectGetRight","_BinaryenSIMDBitselectGetCond","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Select","Drop","Host","Nop","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","builtins_1","currentThisExpression","currentElementExpression","resolveType","context","reportMode","REPORT","parameterNodes","parameterNode","REST","parameterTypeNode","Type_expected","returnTypeNode","typeNode","typeArgumentNodes","possiblyPlaceholder","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","type_1","Expected_0_type_arguments_but_got_1","typeArgument","resolveTypeArguments","Cannot_find_name_0","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveIdentifier","ensureResolvedLazyGlobal","resolvePropertyAccessExpression","propertyAccess","contextualType","targetExpression","resolveExpression","propertyName","indexedGet","Index_signature_is_missing_in_type_0","arrayType","resolvedType","resolveElementAccessExpression","elementAccess","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","actualFunction","resolveLiteralExpression","resolveCallExpression","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","BuiltinSymbols","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","createInline","fork","branch","slice","getTempLocal","temps","k_1","unsetLocalFlag","pop","getAutoreleaseLocal","SCOPED","setLocalFlag","RETAINED","freeTempLocal","getAndFreeTempLocal","getScopedLocal","addScopedLocal","scopedLocal","addScopedAlias","existingLocal","scopedAlias","freeScopedLocals","scope","isLocalFlag","defaultIfInlined","isAnyLocalFlag","pushBreakLabel","stack","popBreakLabel","inherit","inheritConditional","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","inheritMutual","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","isNonnull","inheritNonnullIfTrue","EqzI32","EqzI64","inheritNonnullIfFalse","EqI32","EqI64","NeI32","NeI64","canOverflow","WRAPPED","canConversionOverflow","global_1","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","MIN_VALUE","fromType","last","instanceName","levels","findUsedLocalsVisit","used","findUsedLocals","Options","importMemory","sharedMemory","importTable","explicitStart","features","feature","Constraints","RuntimeFeatures","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","Atomics","MutableGloabls","SIMD128","BulkMemory","SignExt","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","funcRef","ensureFunctionType","compileVisitGlobals","compileVisitMembers","compileRTTI","i64_align","isSharedMemory","i64_shr_u","ensureModuleExports","members_1","members_1_1","ensureModuleExport","prefix","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeRetainRelease","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","initializerNode","compileExpression","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","initializeInStart","Mutable_value_cannot_be_inlined","decoratorNodes","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","makeGlobalAssignment","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","temp","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureStaticString","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","ensureStaticArrayBuffer","elementType","byteLength","bufferInstance","buf","writeI64","ensureStaticArrayHeader","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","alwaysFalse","terminates","continues","breaks","fallsThrough","alwaysTrue","stmts_1","incrExpr","loopLabel","bodyStatement","needsLabel","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","valueExpression","constraints","ANY_RETAINED","numCases","tempLocal","tempLocalIndex","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","CONSTANT","compileInlineConstant","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","explicit","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","Expression_is_never_null","tempIndex","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","AllTrueVecI8x16","EqVecI8x16","AnyTrueVecI8x16","NeVecI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","makeAssignment","compileUnaryOverload","thisExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr_1","thisExpr","elementExpr","tempLocalTarget","tempLocalElement","makeSkippedRelease","nativeFieldType","nativeThisType","tempThis","tempValue","flow_2","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","argumentExpressions","thisArg","parameterTypes_1","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","usedLocals","paramExpr","paramType","argumentLocal","baseInstance","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","oldExpr","newExpr","temp1","temp2","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","TODO_Cannot_inline_inferred_calls_and_specific_internals_yet","numOperands","isCallImport","allOptionalsAreConstant","expr_1","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","flow_3","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","tempDataStart","nativeElementType","bufferAddress","arraySegment","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseCtor","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","thisLocalIndex","makeInstanceOfClass","idTemp","idExpr","conditions","single","Auto","compiler_1","compiler","isAsm","directize","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","SWALLOW","isConstant","sizeof","checkTypeRequired","alignof","ctz","checkArgsOptional","typeArgumentsRange","Type_0_has_no_property_1","popcnt","checkTypeOptional","ClzI64","CtzI64","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","AbsF32","AbsF64","MaxF32","MaxF64","tempLocal0","min","MinF32","MinF64","floor","CeilF32","FloorF32","CeilF64","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","Add","Sub","And","Or","Xor","Xchg","memory_size","MemorySize","memory_grow","MemoryGrow","alreadyUnchecked","call_direct","arg0Type","operandExprs","nativeParamTypes","operandType","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatVecI8x16","SplatVecI16x8","SplatVecI32x4","SplatVecI64x2","SplatVecF32x4","SplatVecF64x2","v128_extract_lane","ExtractLaneSVecI8x16","ExtractLaneUVecI8x16","ExtractLaneSVecI16x8","ExtractLaneUVecI16x8","ExtractLaneVecI32x4","ExtractLaneVecI64x2","ExtractLaneVecF32x4","ExtractLaneVecF64x2","maxIdx","v128_replace_lane","ReplaceLaneVecI8x16","ReplaceLaneVecI16x8","ReplaceLaneVecI32x4","ReplaceLaneVecI64x2","ReplaceLaneVecF32x4","ReplaceLaneVecF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","v128_sub","v128_mul","v128_div","v128_add_saturate","v128_sub_saturate","v128_min","v128_max","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","AddVecI8x16","AddVecI16x8","AddVecI32x4","AddVecI64x2","AddVecF32x4","AddVecF64x2","SubVecI8x16","SubVecI16x8","SubVecI32x4","SubVecI64x2","SubVecF32x4","SubVecF64x2","MulVecI8x16","MulVecI16x8","MulVecI32x4","MulVecF32x4","MulVecF64x2","DivVecF32x4","DivVecF64x2","AddSatSVecI8x16","AddSatUVecI8x16","AddSatSVecI16x8","AddSatUVecI16x8","SubSatSVecI8x16","SubSatUVecI8x16","SubSatSVecI16x8","SubSatUVecI16x8","MinVecF32x4","MinVecF64x2","MaxVecF32x4","MaxVecF64x2","EqVecI16x8","EqVecI32x4","EqVecF32x4","EqVecF64x2","NeVecI16x8","NeVecI32x4","NeVecF32x4","NeVecF64x2","LtSVecI8x16","LtUVecI8x16","LtSVecI16x8","LtUVecI16x8","LtSVecI32x4","LtUVecI32x4","LtVecF32x4","LtVecF64x2","LeSVecI8x16","LeUVecI8x16","LeSVecI16x8","LeUVecI16x8","LeSVecI32x4","LeUVecI32x4","LeVecF32x4","LeVecF64x2","GtSVecI8x16","GtUVecI8x16","GtSVecI16x8","GtUVecI16x8","GtSVecI32x4","GtUVecI32x4","GtVecF32x4","GtVecF64x2","GeSVecI8x16","GeUVecI8x16","GeSVecI16x8","GeUVecI16x8","GeSVecI32x4","GeUVecI32x4","GeVecF32x4","GeVecF64x2","v128_neg","v128_abs","v128_sqrt","v128_convert","v128_trunc","NegVecI8x16","NegVecI16x8","NegVecI32x4","NegVecI64x2","NegVecF32x4","NegVecF64x2","AbsVecF32x4","AbsVecF64x2","SqrtVecF32x4","SqrtVecF64x2","ConvertSVecI32x4ToVecF32x4","ConvertUVecI32x4ToVecF32x4","ConvertSVecI64x2ToVecF64x2","ConvertUVecI64x2ToVecF64x2","TruncSatSVecF32x4ToVecI32x4","TruncSatUVecF32x4ToVecI32x4","TruncSatSVecF64x2ToVecI64x2","TruncSatUVecF64x2ToVecI64x2","v128_shl","v128_shr","ShlVecI8x16","ShlVecI16x8","ShlVecI32x4","ShlVecI64x2","ShrSVecI8x16","ShrUVecI8x16","ShrSVecI16x8","ShrUVecI16x8","ShrSVecI32x4","ShrUVecI32x4","ShrSVecI64x2","ShrUVecI64x2","v128_and","v128_or","v128_xor","AndVec128","OrVec128","XorVec128","v128_not","NotVec128","v128_bitselect","v128_any_true","v128_all_true","AnyTrueVecI16x8","AnyTrueVecI32x4","AnyTrueVecI64x2","AllTrueVecI16x8","AllTrueVecI32x4","AllTrueVecI64x2","idof","visit_globals","visit_members","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_s_f32x4_sat","i32x4_trunc_u_f32x4_sat","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_s_f64x2_sat","i64x2_trunc_u_f64x2_sat","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_s_i32x4","f32x4_convert_u_i32x4","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_s_i64x2","f64x2_convert_u_i64x2","v8x16_shuffle","tryDeferASM","messageArg","filenameArg","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","ftype","blocks","outer","lastId","managedClasses_1","managedClasses_1_1","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","callExpr","fieldOffset","managedClasses_2","managedClasses_2_1","abvPrototype","managedClasses_3","managedClasses_3_1","isAcyclic","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","i64_to_string","ExportsWalker","includePrivate","seen","walk","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","NEARBindingsBuilder","typeMapping","nonNullableTypes","generatedEncodeFunctions","generatedDecodeFunctions","exportedClasses","exportedFunctions","classInjections","classRanges","build","generateArgsParser","generateWrapperFunction","visitInterface","fields","map","paramName","forEach","generateDecodeFunction","generateHandlerMethods","generateEncodeFunction","generateFieldEncoder","valuePrefix","fieldsWithTypes","filter","indexOf","generateBasicSetterHandlers","nonBasicFields","generatePushHandler","isArrayType","setterType","setterValueType","matchingFields","fieldTypeName","encodeType","generateArrayHandlerMethods","setterTypeName","encodedTypeName","methodName","tryUsingImport","getFields","sourceExpr","injections","sourcesWithExport","getExports","console","log","importPath","generateHandler","cls","argType","fieldExpr","pushType","__spread","mainSources","mainSource","copyImports","allImportsStr","concat","bracketIndex","classText","getImports","declarationsStr","IDLBuilder","indentLevel","indent","typeToString","members_2","members_2_1","name_1","TSDBuilder","unknown","numMembers","members_3","members_3_1","name_2","isInterface","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","round","y","sign","isTrueish","fromCodePoint","replaceAll","search","replacment","res","split","Number","capacity","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","__decorate","unmanaged","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","setExplicitStart","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","buildNEAR","buildRTTI","bitsetIs","bitsetSet","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64"],"mappings":"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KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const FixedArray = \"FixedArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  // runtime\n  export const abort = \"abort\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak, CharCode\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(range.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(range.line.toString(10));\n      sb.push(\",\");\n      sb.push(range.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.ASSERTION: // if kind=NONNULL\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PARENTHESIZED:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.SUPER: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createType(\n    name: TypeName,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    defaultType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters;\n    sig.returnType = returnType;\n    sig.explicitThisType = explicitThisType;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n          normalizedPath = LIBRARY_PREFIX + normalizedPath;\n        }\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var stmt = new ExportDefaultStatement();\n    stmt.declaration = declaration;\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: TypeNode,\n    valueType: CommonTypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.l: {\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: TypeNode;\n  /** Value type. */\n  valueType: CommonTypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  kind = NodeKind.EXPORTDEFAULT;\n\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: CommonTypeNode): bool {\n  if (type.kind == NodeKind.TYPE) {\n    let name = (<TypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  SignatureNode,\n  TypeParameterNode,\n  CommonTypeNode,\n  TypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator,\n  ExportDefaultStatement\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes backing basic types like `i32`. */\n  typeClasses: Map<TypeKind,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Fixed array prototype reference. */\n  fixedArrayPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if present. */\n  abortInstance: Function;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ref: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ref: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ref: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ref: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ref: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ref: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(classInstance.id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: SignatureNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createSignature([],\n        Node.createType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    assert(elementsByDeclaration.has(declaration));\n    return elementsByDeclaration.get(declaration)!;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonSymbols.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerNativeTypeClass(TypeKind.I8, CommonSymbols.I8);\n    this.registerNativeTypeClass(TypeKind.I16, CommonSymbols.I16);\n    this.registerNativeTypeClass(TypeKind.I32, CommonSymbols.I32);\n    this.registerNativeTypeClass(TypeKind.I64, CommonSymbols.I64);\n    this.registerNativeTypeClass(TypeKind.ISIZE, CommonSymbols.Isize);\n    this.registerNativeTypeClass(TypeKind.U8, CommonSymbols.U8);\n    this.registerNativeTypeClass(TypeKind.U16, CommonSymbols.U16);\n    this.registerNativeTypeClass(TypeKind.U32, CommonSymbols.U32);\n    this.registerNativeTypeClass(TypeKind.U64, CommonSymbols.U64);\n    this.registerNativeTypeClass(TypeKind.USIZE, CommonSymbols.Usize);\n    this.registerNativeTypeClass(TypeKind.BOOL, CommonSymbols.Bool);\n    this.registerNativeTypeClass(TypeKind.F32, CommonSymbols.F32);\n    this.registerNativeTypeClass(TypeKind.F64, CommonSymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, CommonSymbols.V128);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.requireFunction(CommonSymbols.abort);\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (!(file.source.isEntry && exports)) continue;\n      for (let element of exports.values()) this.markModuleExport(element);\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Requires that a non-generic global function is present and returns it. */\n  private requireFunction(name: string): Function {\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\n    assert(!this.typeClasses.has(typeKind));\n    var element = this.lookupGlobal(className);\n    if (element) {\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n      if (classElement) this.typeClasses.set(typeKind, classElement);\n    }\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let actual = elementsByName.get(name)!;\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (actual !== element) {\n        let merged = tryMerge(elementsByName.get(name)!, element);\n        if (!merged) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, name\n          );\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name);\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = decoratorNameToKind(decorator.name);\n        let flag = decoratorKindToFlag(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning( // TODO: not yet supported\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators,\n          (declaration.is(CommonFlags.READONLY)\n            ? DecoratorFlags.INLINE\n            : DecoratorFlags.NONE\n          ) | DecoratorFlags.LAZY | DecoratorFlags.UNSAFE\n        ),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, DecoratorFlags.UNSAFE)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else if (exports.has(\"default\")) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, \"default\"\n        );\n        return;\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): Namespace | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\n/** Translates a decorator kind to the respective decorator flag. */\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n    case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let actual = members.get(name)!;\n      if (actual.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(actual, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.isLibrary) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): CommonTypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): CommonTypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated signature node. */\n  get signatureNode(): SignatureNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name);\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): CommonTypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): TypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): TypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do if (current === basePtototype) return true;\n    while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let merged = tryMerge(instanceMembers.get(name)!, element);\n      if (!merged) {\n        this.program.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          element.identifierNode.range, element.identifierNode.text\n        );\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n    this.base = base;\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var field = this.lookupInSelf(name);\n    if (field && field.kind == ElementKind.FIELD) {\n      let offset = baseOffset + (<Field>field).memoryOffset;\n      switch ((<Field>field).type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\n    while (current = current.base);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    switch (current.prototype) {\n      case program.i8ArrayPrototype: return Type.i8;\n      case program.i16ArrayPrototype: return Type.i16;\n      case program.i32ArrayPrototype: return Type.i32;\n      case program.i64ArrayPrototype: return Type.i64;\n      case program.u8ArrayPrototype:\n      case program.u8ClampedArrayPrototype: return Type.u8;\n      case program.u16ArrayPrototype: return Type.u16;\n      case program.u32ArrayPrototype: return Type.u32;\n      case program.u64ArrayPrototype: return Type.u64;\n      case program.f32ArrayPrototype: return Type.f32;\n      case program.f64ArrayPrototype: return Type.f64;\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\n      default: assert(false);\n    }\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var members = this.members;\n    if (members) {\n      for (let member of members.values()) {\n        if (\n          member.kind == ElementKind.FIELD &&\n          (current = (<Field>member).type.classReference) !== null &&\n          (\n            current === other ||\n            current.cyclesTo(other, except)\n          )\n        ) return true;\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./common\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32  = _BinaryenTypeInt32(),\n  I64  = _BinaryenTypeInt64(),\n  F32  = _BinaryenTypeFloat32(),\n  F64  = _BinaryenTypeFloat64(),\n  V128 = _BinaryenTypeVec128(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum FeatureFlags {\n  Atomics = _BinaryenFeatureAtomics(),\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\n  SIMD128 = _BinaryenFeatureSIMD128(),\n  BulkMemory = _BinaryenFeatureBulkMemory(),\n  SignExt = _BinaryenFeatureSignExt(),\n  ExceptionHandling = _BinaryenFeatureExceptionHandling()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  LocalGet = _BinaryenLocalGetId(),\n  LocalSet = _BinaryenLocalSetId(),\n  GlobalGet = _BinaryenGlobalGetId(),\n  GlobalSet = _BinaryenGlobalSetId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicNotify = _BinaryenAtomicNotifyId(),\n  SIMDExtract = _BinaryenSIMDExtractId(),\n  SIMDReplace = _BinaryenSIMDReplaceId(),\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\n  SIMDShift = _BinaryenSIMDShiftId(),\n  MemoryInit = _BinaryenMemoryInitId(),\n  DataDrop = _BinaryenDataDropId(),\n  MemoryCopy = _BinaryenMemoryCopyId(),\n  MemoryFill = _BinaryenMemoryFillId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n\n  // see: https://github.com/WebAssembly/simd\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\n  NotVec128 = _BinaryenNotVec128(),\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2()\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\n  AndVec128 = _BinaryenAndVec128(),\n  OrVec128 = _BinaryenOrVec128(),\n  XorVec128 = _BinaryenXorVec128(),\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\n}\n\nexport enum HostOp {\n  MemorySize = _BinaryenMemorySize(),\n  MemoryGrow = _BinaryenMemoryGrow(),\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneSVecI8x16 = _BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneUVecI8x16 = _BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneSVecI16x8 = _BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneUVecI16x8 = _BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneVecI32x4 = _BinaryenExtractLaneVecI32x4(),\n  ExtractLaneVecI64x2 = _BinaryenExtractLaneVecI64x2(),\n  ExtractLaneVecF32x4 = _BinaryenExtractLaneVecF32x4(),\n  ExtractLaneVecF64x2 = _BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneVecI8x16 = _BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneVecI16x8 = _BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneVecI32x4 = _BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneVecI64x2 = _BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneVecF32x4 = _BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneVecF64x2 = _BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlVecI8x16 = _BinaryenShlVecI8x16(),\n  ShrSVecI8x16 = _BinaryenShrSVecI8x16(),\n  ShrUVecI8x16 = _BinaryenShrUVecI8x16(),\n  ShlVecI16x8 = _BinaryenShlVecI16x8(),\n  ShrSVecI16x8 = _BinaryenShrSVecI16x8(),\n  ShrUVecI16x8 = _BinaryenShrUVecI16x8(),\n  ShlVecI32x4 = _BinaryenShlVecI32x4(),\n  ShrSVecI32x4 = _BinaryenShrSVecI32x4(),\n  ShrUVecI32x4 = _BinaryenShrUVecI32x4(),\n  ShlVecI64x2 = _BinaryenShlVecI64x2(),\n  ShrSVecI64x2 = _BinaryenShrSVecI64x2(),\n  ShrUVecI64x2 = _BinaryenShrUVecI64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\n    _BinaryenLiteralVec128(out, out);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalTee(this.ref, index, value);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  unreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    try {\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  simd_bitselect(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    cond: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDBitselect(this.ref, vec1, vec2, cond);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Array<i8>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocI32Array(offs);\n    var cArr4 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    } finally {\n      memory.free(cArr4);\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  getFeatures(): BinaryenFeatureFlags {\n    return _BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([ this.allocStringCached(\"precompute\") ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n    expr = _BinaryenFunctionGetBody(func);\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(_BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.lit);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(_BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return _BinaryenLocalGet(this.ref,\n          _BinaryenLocalGetGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = _BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return _BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return _BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(_BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(_BinaryenIfGetCondition(expr), data);\n      visit(_BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(_BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = _BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(_BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(_BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(_BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(_BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(_BinaryenStoreGetPtr(expr), data);\n      visit(_BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDBitselect: {\n      visit(_BinaryenSIMDBitselectGetLeft(expr), data);\n      visit(_BinaryenSIMDBitselectGetRight(expr), data);\n      visit(_BinaryenSIMDBitselectGetCond(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(_BinaryenMemoryInitGetDest(expr), data);\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\n      visit(_BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(_BinaryenMemoryFillGetDest(expr), data);\n      visit(_BinaryenMemoryFillGetValue(expr), data);\n      visit(_BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(_BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(_BinaryenBinaryGetLeft(expr), data);\n      visit(_BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(_BinaryenSelectGetIfTrue(expr), data);\n      visit(_BinaryenSelectGetIfFalse(expr), data);\n      visit(_BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(_BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(_BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      // same naming scheme as Binaryen\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"j\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"d\";\n      case TypeKind.V128: return \"V\";\n      case TypeKind.VOID: return \"v\";\n      default: assert(false);\n    }\n    return \"i\";\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    sb.push(returnType.toSignatureString());\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    return \"FUNCSIG$\" + sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics || new Array();\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos + 1 < end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.x:\n        case CharCode.X:\n        case CharCode.b:\n        case CharCode.B:\n        case CharCode.o:\n        case CharCode.O: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) return false;\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.x:\n        case CharCode.X: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b:\n        case CharCode.B: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o:\n        case CharCode.O: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.e || c == CharCode.E) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 65536) >>> 10) + 0xD800,\n        ((value32 - 65536) & 1023) + 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  SignatureNode,\n  ParameterKind,\n  CommonTypeNode,\n  NodeKind,\n  TypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token\n} from \"./tokenizer\";\n\nimport {\n  BuiltinSymbols\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: CommonTypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signature\n    if (node.kind == NodeKind.SIGNATURE) {\n      let explicitThisType = (<SignatureNode>node).explicitThisType;\n      let thisType: Type | null = null;\n      if (explicitThisType) {\n        thisType = this.resolveType(\n          explicitThisType,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!thisType) return null;\n      }\n      let parameterNodes = (<SignatureNode>node).parameters;\n      let numParameters = parameterNodes.length;\n      let parameterTypes = new Array<Type>(numParameters);\n      let parameterNames = new Array<string>(numParameters);\n      let requiredParameters = 0;\n      let hasRest = false;\n      for (let i = 0; i < numParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        switch (parameterNode.parameterKind) {\n          case ParameterKind.DEFAULT: {\n            requiredParameters = i + 1;\n            break;\n          }\n          case ParameterKind.REST: {\n            assert(i == numParameters);\n            hasRest = true;\n            break;\n          }\n        }\n        let parameterTypeNode = parameterNode.type;\n        if (isTypeOmitted(parameterTypeNode)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              parameterTypeNode.range\n            );\n          }\n          return null;\n        }\n        let parameterType = this.resolveType(\n          parameterTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!parameterType) return null;\n        parameterTypes[i] = parameterType;\n        parameterNames[i] = parameterNode.name.text;\n      }\n      let returnTypeNode = (<SignatureNode>node).returnType;\n      if (isTypeOmitted(returnTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnTypeNode.range\n          );\n        }\n        return null;\n      }\n      let returnType: Type | null;\n      if (returnTypeNode) {\n        returnType = this.resolveType(\n          returnTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!returnType) return null;\n      } else {\n        returnType = Type.void;\n      }\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.parameterNames = parameterNames;\n      signature.requiredParameters = requiredParameters;\n      signature.hasRest = hasRest;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.TYPE);\n    var typeNode = <TypeNode>node;\n    var typeName = typeNode.name;\n    var typeArgumentNodes = typeNode.typeArguments;\n    var possiblyPlaceholder = !typeName.next;\n\n    // look up in contextual type arguments if possibly a placeholder\n    if (possiblyPlaceholder) {\n      if (contextualTypeArguments && contextualTypeArguments.has(typeName.identifier.text)) {\n        let type = contextualTypeArguments.get(typeName.identifier.text)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                node.range, type.toString()\n              );\n            }\n          }\n          return type.asNullable();\n        }\n        return type;\n      }\n    }\n\n    // look up in context\n    var element = this.resolveTypeName(typeName, context, reportMode);\n    if (!element) return null;\n\n    // use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n      // handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          context,\n          makeMap<string,Type>(contextualTypeArguments), // don't inherit\n          node\n        ); // reports\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                typeNode.name.range, typeName.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // handle special native type\n      if (possiblyPlaceholder && typeName.identifier.text == CommonSymbols.native) {\n        if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n            );\n          }\n          return null;\n        }\n        let typeArgument = this.resolveType(\n          typeArgumentNodes[0],\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!typeArgument) return null;\n        switch (typeArgument.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: return Type.i32;\n          case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n          case TypeKind.I64: return Type.i64;\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: return Type.u32;\n          case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n          case TypeKind.U64: return Type.u64;\n          case TypeKind.F32: return Type.f32;\n          case TypeKind.F64: return Type.f64;\n          case TypeKind.V128: return Type.v128;\n          case TypeKind.VOID: return Type.void;\n          default: assert(false);\n        }\n      }\n\n      // resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          context,\n          contextualTypeArguments = makeMap(contextualTypeArguments), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          typeNode.range, typeName.identifier.text\n        );\n        // recoverable\n      }\n      let type = this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              typeNode.name.range, typeName.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, typeName.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    typeName: TypeName,\n    /** Relative context. */\n    context: Element,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = context.lookup(typeName.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          typeName.range, typeName.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = typeName;\n    var next = typeName.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Actual type parameter nodes. */\n    typeParameters: TypeParameterNode[],\n    /** Type arguments provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<TypeNode[]>typeArgumentNodes)[0].range,\n              (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<TypeNode[]>typeArgumentNodes)[i],\n            context,\n            contextualTypeArguments,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            context,\n            contextualTypeArguments,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the program element it refers to. */\n  resolveIdentifier(\n    /** The expression to resolve. */\n    identifier: IdentifierExpression,\n    /** Optional flow to search for scoped locals. */\n    flow: Flow | null,\n    /** Optional context to search. */\n    context: Element | null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n    if (flow) {\n      if (element = flow.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (context) {\n      if (element = context.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field. */\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var typeNode = global.typeNode;\n    if (!typeNode) return false;\n    var type = this.resolveType( // reports\n      typeNode,\n      global.parent,\n      null,\n      reportMode\n    );\n    if (!type) return false;\n    global.setType(type);\n    return true;\n  }\n\n  /** Resolves a property access expression to the program element it refers to. */\n  resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    propertyAccess: PropertyAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let typeClasses = this.program.typeClasses;\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\n            classReference = typeClasses.get(type.kind)!;\n          } else {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n            );\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: { // property access on element access?\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          // let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n          // if (!arrayType) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                elementExpression.range, (<Class>target).internalName\n              );\n              return null;\n            }\n            let arrayType = indexedGet.signature.returnType;\n          // }\n          if (!(target = arrayType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, arrayType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  /** Resolves an element access expression to the program element it refers to. */\n  resolveElementAccessExpression(\n    /** The expression to resolve. */\n    elementAccess: ElementAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n        // if (!arrayType) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                elementAccess.range, (<Class>target).internalName\n              );\n            }\n            return null;\n          }\n          let arrayType = indexedGet.signature.returnType;\n        // }\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\n          if (target = arrayType.classReference) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = elementAccess.elementExpression;\n            return target;\n          }\n          return null;\n        }\n        this.currentThisExpression = targetExpression;\n        this.currentElementExpression = elementAccess.elementExpression;\n        return target;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Current contextual type. */\n    contextualType: Type\n  ): Type {\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\n      // compile to contextualType if matching\n      switch (contextualType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n        case TypeKind.VOID: break; // best fitting below\n        default: assert(false);\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64;\n  }\n\n  /** Resolves any expression to the program element it refers to. */\n  resolveExpression(\n    /** The expression to resolve. */\n    expression: Expression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // simply skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(\n          <IdentifierExpression>expression,\n          flow, flow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      // TODO: everything else\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an assertion expression to the program element it refers to. */\n  resolveAssertionExpression(\n    /** The expression to resolve. */\n    expression: AssertionExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (expression.assertionKind == AssertionKind.NONNULL) {\n      return this.resolveExpression(\n        expression.expression,\n        flow,\n        contextualType,\n        reportMode\n      );\n    }\n    var type = this.resolveType(\n      assert(expression.toType), // must be set if not NONNULL\n      flow.actualFunction,\n      flow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element: Element | null = type.classReference;\n    if (!element) {\n      let signature = type.signatureReference;\n      if (!signature) return null;\n      element = signature.asFunctionTarget(this.program);\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to the program element it refers to. */\n  resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPrefixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var operand = expression.operand;\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          let type = this.determineIntegerLiteralType(\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\n            contextualType\n          );\n          let typeClasses = this.program.typeClasses;\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\n        }\n        return this.resolveExpression(\n          operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.EXCLAMATION: {\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(TypeKind.BOOL) ? typeClasses.get(TypeKind.BOOL)! : null;\n      }\n      case Token.TILDE: {\n        let resolvedOperand = this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n        if (!resolvedOperand) return null;\n        // TODO\n        break;\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an unary postfix expression to the program element it refers to. */\n  resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPostfixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to the program element it refers to. */\n  resolveBinaryExpression(\n    /** The expression to resolve. */\n    expression: BinaryExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to the program element it refers to. */\n  resolveThisExpression(\n    /** The expression to resolve. */\n    expression: ThisExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = flow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = flow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to the program element it refers to. */\n  resolveSuperExpression(\n    /** The expression to resolve. */\n    expression: SuperExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = flow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = flow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to the program element it refers to. */\n  resolveLiteralExpression(\n    /** The expression to resolve. */\n    expression: LiteralExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (expression.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>expression).value,\n          contextualType\n        );\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = contextualType == Type.f32 ? Type.f32 : Type.f64;\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a call expression to the program element it refers to. */\n  resolveCallExpression(\n    /** The expression to resolve. */\n    expression: CallExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = expression.expression;\n    var target = this.resolveExpression( // reports\n      targetExpression,\n      flow,\n      contextualType,\n      reportMode\n    );\n    if (!target) return null;\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      // `unchecked(expr: *): *` is special\n      if (\n        (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\n        expression.arguments.length > 0\n      ) {\n        return this.resolveExpression(expression.arguments[0], flow, contextualType, reportMode);\n      }\n      // otherwise resolve normally\n      let instance = this.resolveFunctionInclTypeArguments(\n        <FunctionPrototype>target,\n        expression.typeArguments,\n        flow.actualFunction,\n        makeMap(flow.contextualTypeArguments), // don't inherit\n        expression,\n        reportMode\n      );\n      if (!instance) return null;\n      let returnType = instance.signature.returnType;\n      let classType = returnType.classReference;\n      if (classType) {\n        // reuse resolvedThisExpression (might be property access)\n        // reuse resolvedElementExpression (might be element access)\n        return classType;\n      } else {\n        let signature = returnType.signatureReference;\n        if (signature) {\n          let functionTarget = signature.asFunctionTarget(this.program);\n          // reuse resolvedThisExpression (might be property access)\n          // reuse resolvedElementExpression (might be element access)\n          return functionTarget;\n        }\n      }\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          targetExpression.range, target.internalName\n        );\n      }\n      return null;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!contextualTypeArguments.has(classTypeParameterName)) {\n            contextualTypeArguments.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.signatureNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!thisType) return null;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      contextualTypeArguments\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            contextualTypeArguments.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(contextualTypeArguments), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type argument nodes provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow throws. */\n  THROWS = 1 << 3,\n  /** This flow breaks. */\n  BREAKS = 1 << 4,\n  /** This flow continues. */\n  CONTINUES = 1 << 5,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally terminates in a child flow. */\n  CONDITIONALLY_TERMINATES = 1 << 11,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 12,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 13,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 14,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 15,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 16,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is read from. */\n  READFROM = 1 << 3,\n  /** Local is written to. */\n  WRITTENTO = 1 << 4,\n  /** Local is retained. */\n  RETAINED = 1 << 5,\n\n  /** Local is conditionally read from. */\n  CONDITIONALLY_READFROM = 1 << 6,\n  /** Local is conditionally written to. */\n  CONDITIONALLY_WRITTENTO = 1 << 7,\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 8,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = CONSTANT\n                  | WRAPPED\n                  | NONNULL\n                  | READFROM\n                  | WRITTENTO\n                  | RETAINED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = RETAINED\n                  | CONDITIONALLY_READFROM\n                  | CONDITIONALLY_WRITTENTO\n                  | CONDITIONALLY_RETAINED,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\nexport namespace LocalFlags {\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Field is initialized. Relevant in constructors. */\n  INITIALIZED = 1 << 0,\n  /** Field is conditionally initialized. Relevant in constructors. */\n  CONDITIONALLY_INITIALIZED = 1 << 1,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = INITIALIZED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\n}\nexport namespace FieldFlags {\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Field flags. Relevant in constructors. */\n  fieldFlags: Map<string,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps && temps.length) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps && temps.length) {\n        local = temps.pop();\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    this.freeTempLocal(local);\n    return local;\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name);\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range\n          );\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name);\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n    var localFlags = other.localFlags;\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\n      let flags = localFlags[i];\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\n\n    // conditional flags set in any arm\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\n\n    // categorical flags in either arm as conditional\n    this.inheritConditional(left);\n    this.inheritConditional(right);\n\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\n    var leftLocalFlags = left.localFlags;\n    var numLeftLocalFlags = leftLocalFlags.length;\n    var rightLocalFlags = right.localFlags;\n    var numRightLocalFlags = rightLocalFlags.length;\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        unchecked(leftLocalFlags[i]),\n        i < numRightLocalFlags\n          ? unchecked(rightLocalFlags[i])\n          : 0\n      );\n    }\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        0,\n        unchecked(rightLocalFlags[i])\n      );\n    }\n    this.localFlags = combinedFlags;\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr));\n            this.inheritNonnullIfTrue(getIfTrue(expr));\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        switch (name) {\n          case program.retainInstance.internalName: {\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          if (\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr));\n            this.inheritNonnullIfFalse(getIfFalse(expr));\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = instancesByName.get(instanceName)!;\n          assert(instance.kind == ElementKind.FUNCTION);\n          let returnType = (<Function>instance).signature.returnType;\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  BuiltinSymbols,\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  FeatureFlags,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonSymbols,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted,\n  ExportDefaultStatement\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n    var featureFlags: BinaryenFeatureFlags = 0;\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBAL)) featureFlags |= FeatureFlags.MutableGloabls;\n    // if (this.options.hasFeature(Feature.TRUNC_SAT)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    // if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    this.module.setFeatures(featureFlags);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature([], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.isEntry) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinSymbols.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.block(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\n    }\n\n    // compile runtime features\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n    module.removeGlobal(BuiltinSymbols.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.isEntry) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\n        if (!element.is(CommonFlags.READONLY)) {\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // make the class name itself represent its runtime id\n        if (!(<Class>element).type.isUnmanaged) {\n          let module = this.module;\n          let internalName = (<Class>element).internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  /** Makes a function to get the value of a field of an exported class. */\n  private ensureModuleFieldGetter(name: string, field: Field): void {\n    var module = this.module;\n    var type = field.type;\n    var usizeType = this.options.usizeType;\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, usizeType.toNativeType()),\n      type.toNativeType(), field.memoryOffset\n    );\n    // a user-defined getter would return a retained value, so:\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\n    module.addFunction(\n      name,\n      this.ensureFunctionType(null, type, usizeType),\n      null,\n      loadExpr\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  /** Makes a function to set the value of a field of an exported class. */\n  private ensureModuleFieldSetter(name: string, field: Field): void {\n    var module = this.module;\n    var type = field.type;\n    var nativeType = type.toNativeType();\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var valueExpr = module.local_get(1, nativeType);\n    if (type.isManaged) {\n      valueExpr = this.makeRetainRelease(\n        module.load(type.byteSize, false, // oldRef\n          module.local_get(0, nativeSizeType),\n          nativeType, field.memoryOffset\n        ),\n        valueExpr // newRef\n      );\n    }\n    module.addFunction(\n      name,\n      this.ensureFunctionType([ type ], Type.void, usizeType),\n      null,\n      module.store(\n        type.byteSize,\n        module.local_get(0, nativeSizeType),\n        valueExpr,\n        nativeType,\n        field.memoryOffset\n      )\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) {\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.block(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var initAutoreleaseSkipped: bool = false;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          global.declaration.range\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      initExpr = type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, type.toNativeZero(module));\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.binary(BinaryOp.AddI32,\n            module.global_get(previousValue.internalName, NativeType.I32),\n            module.i32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(val, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n      if (!flow.is(FlowFlags.TERMINATES)) { // TODO: detect if returning an autorelease local?\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getAndFreeTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(<Class>classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.signatureNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.drop(\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      funcRef = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = segments.get(stringValue)!; // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"data\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    if (statement.kind == NodeKind.EXPORTDEFAULT) {\n      statement = (<ExportDefaultStatement>statement).declaration;\n    }\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        assert(element.kind == ElementKind.ENUM);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let memberStatements = (<NamespaceDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          assert(element.kind == ElementKind.GLOBAL);\n          if (\n            !element.is(CommonFlags.AMBIENT) && // delay imports\n            !element.hasDecorator(DecoratorFlags.LAZY)\n          ) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).normalizedPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).normalizedPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).normalizedPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(\n    statement: Statement,\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(\n    statements: Statement[],\n    isBody: bool = false,\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\n    this.currentFlow = outerFlow;\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* clearFlags */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileDoStatement(\n    statement: DoStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(\n        this.compileStatement(statement.statement)\n      );\n    }\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType\n      )\n    );\n    var alwaysFalse = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) alwaysFalse = true;\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break            ;; (1) skip if no breaks\n    //  (loop $continue         ;; (2) skip if skipping (4) + no continues\n    //   (...)                  ;; (3)\n    //   (br_if cond $continue) ;; (4) skip if (3) does not fall through or always false\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough && !alwaysFalse) { // (4)\n      stmts.push(module.br(continueLabel, condExpr));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough && !alwaysFalse || continues) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (breaks) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    if (!terminates) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  compileForStatement(\n    statement: ForStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Set up and use the inner flow\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    // Compile the initializer\n    var initializer = statement.initializer;\n    var initExpr: ExpressionRef = 0;\n    if (initializer) initExpr = this.compileStatement(initializer);\n\n    // Compile the condition\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(<Expression>statement.condition, Type.bool),\n          this.currentType\n        )\n      );\n      // Simplify if the condition is constant\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\n        assert(getExpressionType(condExpr) == NativeType.I32);\n        if (getConstValueI32(condExpr) == /* false */ 0) {\n          let stmts = new Array<ExpressionRef>();\n          if (initExpr) stmts.push(initExpr);\n          this.performAutoreleases(innerFlow, stmts);\n          innerFlow.freeScopedLocals();\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return flatten(module, stmts, NativeType.None);\n        }\n        alwaysTrue = true;\n      }\n    } else { // Omitted condition is always true\n      condExpr = module.i32(1);\n      alwaysTrue = true;\n    }\n    innerFlow.inheritNonnullIfTrue(condExpr);\n\n    // Compile incrementor\n    var incrementor = statement.incrementor;\n    var incrExpr: ExpressionRef = 0;\n    if (incrementor) incrExpr = this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP);\n\n    // Compile body (break: drop out, continue: fall through to incrementor, + loop)\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label; innerFlow.breakLabel = breakLabel;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    var loopLabel = \"loop|\" + label;\n    var bodyStatement = statement.statement;\n    var stmts = new Array<ExpressionRef>();\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(bodyStatement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break          ;; (1) skip label (needed anyway) if skipping (4) + no breaks\n    //  (initializer)         ;; (2) [may be empty]\n    //  (loop $loop           ;; (3) skip if (6) does not fall through + no continues\n    //   (br_if !cond $break) ;; (4) skip if always true\n    //   (block $continue     ;; (5) skip if no continues or nothing else than continue\n    //    (...)               ;; (6)\n    //   )\n    //   (incrementor)        ;; (7) skip if skipping (3) [may be empty]\n    //   (br $loop)           ;; (8) skip if skipping (3)\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n    var needsLabel = !alwaysTrue || breaks;\n\n    var loop = new Array<ExpressionRef>();\n    if (!alwaysTrue) { // (4)\n      loop.push(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    if (continues) { // (5)\n      if (stmts.length > 1 || getExpressionId(stmts[0]) != ExpressionId.Break) { // otherwise lonely continue\n        loop.push(module.block(continueLabel, stmts));\n      }\n    } else {\n      for (let i = 0, k = stmts.length; i < k; ++i) loop.push(stmts[i]);\n    }\n    var expr: ExpressionRef;\n    if (fallsThrough || continues) { // (3)\n      if (incrExpr) loop.push(incrExpr); // (7)\n      this.performAutoreleases(innerFlow, loop);\n      loop.push(module.br(loopLabel)); // (8)\n      if (initExpr) { // (2)\n        expr = module.block(needsLabel ? breakLabel : null, [\n          initExpr,\n          module.loop(loopLabel, module.block(null, loop))\n        ]);\n      } else {\n        expr = module.block(needsLabel ? breakLabel : null, [\n          module.loop(loopLabel, flatten(module, loop, NativeType.None))\n        ]);\n      }\n    } else {\n      if (initExpr) loop.unshift(initExpr); // (2)\n      this.performAutoreleases(innerFlow, loop);\n      expr = module.block(needsLabel ? breakLabel : null, loop);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n    }\n\n    // Each arm initiates a branch\n    var ifTrueStmts = new Array<ExpressionRef>();\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\n    } else {\n      ifTrueStmts.push(this.compileStatement(ifTrue));\n    }\n    if (!ifTrueFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\n      let ifFalseStmts = new Array<ExpressionRef>();\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\n      } else {\n        ifFalseStmts.push(this.compileStatement(ifFalse));\n      }\n      if (!ifFalseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None),\n        flatten(module, ifFalseStmts, NativeType.None)\n      );\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n      if (ifTrueFlow.is(FlowFlags.TERMINATES)) outerFlow.inheritNonnullIfFalse(condExpr);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None)\n      );\n    }\n    // TODO: Detect neglected condition\n    // if (!foo) {\n    //   foo = [notNull]\n    // }\n    // foo // is possibly null\n  }\n\n  compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n      expr = this.compileExpression(valueExpression, returnType, constraints | Constraints.WILL_RETAIN);\n\n      // when returning a local, and it is already retained, skip the final set\n      // of retaining it as the return value and releasing it as a variable\n      if (!this.skippedAutoreleases.has(expr)) {\n        if (returnType.isManaged) {\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\n            if (flow.isAnyLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED)) {\n              flow.unsetLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED);\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n        }\n      }\n\n      // remember return states\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    // Make sure that the return value is retained for the caller\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\n\n    if (returnType != Type.void && stmts.length) {\n      let temp = flow.getAndFreeTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n    }\n    flow.freeScopedLocals();\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.block(null, stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.block(null, stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.block(null, stmts);\n  }\n\n  compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(compileAbort(this, message, statement));\n\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (declaration.initializer) {\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, declaration.name.text\n            );\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          if (flow.lookupLocal(name)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                type.toNativeZero(module)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : flatten(module, initializers, NativeType.None);\n  }\n\n  compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  compileWhileStatement(\n    statement: WhileStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // Compile condition\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Simplify if the condition is constant\n    var alwaysTrue = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) return module.nop(); // simplify\n      alwaysTrue = true;\n    }\n\n    // Compile body\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    innerFlow.inheritNonnullIfTrue(condExpr);\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(statement.statement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n\n    // (block $break          ;; (1) skip if skipping (3) + no breaks\n    //  (loop $continue       ;; (2) skip if skipping (5) + no continues\n    //   (br_if !cond $break) ;; (3) skip if always true\n    //   (...)                ;; (4)\n    //   (br $continue)       ;; (5) skip if (4) does not fall through\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) { // (5)\n      this.performAutoreleases(innerFlow, stmts);\n      stmts.push(module.br(continueLabel));\n    }\n    if (!alwaysTrue) { // (3)\n      stmts.unshift(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough || innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (!alwaysTrue || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    this.currentType = contextualType;\n    var expr: ExpressionRef;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileExpression((<ParenthesizedExpression>expression).expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType) {\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        if (fromType.nonNullableType == toType) {\n          this.error(\n            DiagnosticCode.Object_is_possibly_null,\n            reportNode.range\n          ); // recoverable\n        } else {\n          this.error(\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n            reportNode.range, fromType.toString(), toType.toString()\n          ); // recoverable\n        }\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          let module = this.module;\n          let flow = this.currentFlow;\n          let tempIndex = flow.getAndFreeTempLocal(type).index;\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(tempIndex, LocalFlags.WRAPPED);\n          flow.setLocalFlag(tempIndex, LocalFlags.NONNULL);\n          expr = module.if(\n            module.local_tee(tempIndex, expr),\n            module.local_get(tempIndex, type.toNativeType()),\n            module.unreachable()\n          );\n        }\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueVecI8x16,\n              module.binary(BinaryOp.EqVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueVecI8x16,\n              module.binary(BinaryOp.NeVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInElse = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInElse = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            rightExpr,\n            retainLeftInElse\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType())\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, this.currentType),\n              rightExpr,\n              expr\n            );\n\n          // if not possible, tee left to a temp\n          } else {\n            let tempLocal = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              rightExpr,\n              module.local_get(tempLocal.index, leftType.toNativeType())\n            );\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInThen = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInThen = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n            // TODO: usually, false'ish means left is null, but this might not hold\n            // once implicit conversion with strings is performed and left is \"\", so:\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            retainLeftInThen\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType()),\n            rightExpr\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              expr,\n              rightExpr\n            );\n\n          // if not possible, tee left to a temp. local\n          } else {\n            let tempLocal = flow.getAndFreeTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              module.local_get(tempLocal.index, leftType.toNativeType()),\n              rightExpr\n            );\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = this.resolver.resolveExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      left,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.resolveExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.LOCAL: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.CLASS: {\n        if (elementExpression) { // indexed access\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          // if (isUnchecked) {\n          //   let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n          //   if (arrayType) {\n          //     return compileBuiltinArraySet(\n          //       this,\n          //       <Class>target,\n          //       assert(this.resolver.currentThisExpression),\n          //       elementExpression,\n          //       valueExpression,\n          //       contextualType\n          //     );\n          //   }\n          // }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.unreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    return this.makeAssignment(\n      target,\n      this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN),\n      expression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? (<Local>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? (<Global>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, (<Field>target).internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(<Field>target,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let tempLocal = flow.getAndFreeTempLocal(returnType);\n        let tempLocalIndex = tempLocal.index;\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(tempLocalIndex, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(tempLocalIndex, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n      }\n      case ElementKind.CLASS: {\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        if (indexExpression) {\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              valueExpression.range, target.internalName\n            );\n            return module.unreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              valueExpression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.unreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          let elementExpr = this.compileExpression(indexExpression, Type.i32, Constraints.CONV_IMPLICIT);\n          if (tee) {\n            let tempLocalTarget = flow.getTempLocal(targetType);\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType);\n            let returnType = indexedGet.signature.returnType;\n            flow.freeTempLocal(tempLocalTarget);\n            return module.block(null, [\n              this.makeCallDirect(indexedSet, [\n                module.local_tee(tempLocalTarget.index, thisExpr),\n                module.local_tee(tempLocalElement.index, elementExpr),\n                valueExpr\n              ], valueExpression),\n              this.makeCallDirect(indexedGet, [\n                module.local_get(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.local_get(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ], valueExpression)\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueExpr\n            ], valueExpression);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** The local to assign to. */\n    local: Local,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var type = local.type;\n    assert(type != Type.void);\n    var flow = this.currentFlow;\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\n\n    if (type.isManaged) {\n      let module = this.module;\n      let nativeType = type.toNativeType();\n\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        if (this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeSkippedRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __skippedRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __skippedRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        } else {\n          valueExpr = this.makeRetainRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __retainRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __retainRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // TEE(local = __retain(value, local))\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // local = __retain(value, local)\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // TEE(local = value)\n        this.currentType = type;\n        return this.module.local_tee(localIndex, valueExpr);\n      } else { // local = value\n        this.currentType = Type.void;\n        return this.module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global to assign to. */\n    global: Global,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // (global = __skippedRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeSkippedRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __skippedRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeSkippedRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      } else {\n        if (tee) { // (global = __retainRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeRetainRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __retainRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeRetainRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType);\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // ((t1 = this).field = __skippedRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeSkippedRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr), // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n        } else { // (t1 = this).field = __skippedRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeSkippedRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr, // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      } else {\n        if (tee) { // ((t1 = this).field = __retainRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeRetainRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr) // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n        } else { // (t1 = this).field = __retainRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeRetainRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      }\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let tempValue = flow.getAndFreeTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        this.currentType = fieldType;\n        return module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(tempValue.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(<Class>classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.block(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.unreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            flow.actualFunction.parent, // relative to caller\n            makeMap<string,Type>(flow.contextualTypeArguments),\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\n          let numTypeParameters = typeParameterNodes.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterNodes = prototype.signatureNode.parameters;\n          let numParameters = parameterNodes.length;\n          let argumentNodes = expression.arguments;\n          let numArguments = argumentNodes.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameters; ++i) {\n            let typeNode = parameterNodes[i].type;\n            let templateName = typeNode.kind == NodeKind.TYPE && !(<TypeNode>typeNode).name.next\n              ? (<TypeNode>typeNode).name.identifier.text\n              : null;\n            let argumentExpression = i < numArguments\n              ? argumentNodes[i]\n              : parameterNodes[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameters.toString(10), numArguments.toString(10)\n              );\n              return module.unreachable();\n            }\n            if (templateName !== null && inferredTypes.has(templateName)) {\n              let inferredType = inferredTypes.get(templateName);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpression(argumentExpression, inferredType);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonDenominator(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonDenominator(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.unreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpression(argumentExpression, Type.auto);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(templateName, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterNodes[i].type,\n                flow.actualFunction,\n                flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.unreachable();\n              argumentExprs[i] = this.compileExpression(argumentExpression, concreteType, Constraints.CONV_IMPLICIT);\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            makeMap<string,Type>(flow.contextualTypeArguments)\n          );\n          if (!instance) return this.module.unreachable();\n          return this.makeCallDirect(instance, argumentExprs, expression, contextualType == Type.void);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(prototype, null);\n        }\n        if (!instance) return this.module.unreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.unreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.signatureNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        body.push(\n          module.local_set(argumentLocal.index,\n            this.makeRetain(initExpr)\n          )\n        );\n      } else {\n        body.push(\n          module.local_set(argumentLocal.index, initExpr)\n        );\n      }\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.signatureNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        returnType,\n        thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.block(null, stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        BuiltinSymbols.argc,\n        NativeType.I32,\n        true,\n        module.i32(0)\n      );\n    }\n    return BuiltinSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.global_set(this.ensureArgcVar(),\n          module.local_get(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\n    }\n    return BuiltinSymbols.setargc;\n  }\n\n  // <reference-counting>\n\n  /** Makes retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a retainRelease call, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeRetainRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // if ((t1=newExpr) != (t2=oldExpr)) {\n    //   __retain(t1);\n    //   __release(t2);\n    // }, t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n    var temp2 = flow.getAndFreeTempLocal(usizeType);\n    flow.freeTempLocal(temp1);\n    return module.block(null, [\n      module.if(\n        module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n          module.local_tee(temp1.index, newExpr),\n          module.local_tee(temp2.index, oldExpr)\n        ),\n        module.block(null, [\n          module.drop(\n            this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n          ),\n          this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n        ])\n      ),\n      module.local_get(temp1.index, nativeSizeType)\n    ], nativeSizeType);\n  }\n\n  /** Makes a skippedRelease call, ignoring the new expression's value and releasing the old expression's value, in this order. */\n  makeSkippedRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // TODO: this helper can be eliminated altogether if the current logic holds\n    // (t1=newExpr), __release(oldExpr), t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp = flow.getAndFreeTempLocal(usizeType, findUsedLocals(oldExpr));\n    return module.block(null, [\n      module.local_set(temp.index, newExpr),\n      this.makeRelease(oldExpr),\n      module.local_get(temp.index, nativeSizeType)\n    ], nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes an automatic release call at the end of the current flow. */\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\n    // FIXME: loses track of nonNull state?\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\n  }\n\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\n    // NOTE: Can't remove the local.tee completely because it's already compiled\n    // and a child of something else. Preventing the final release however should\n    // make it optimize away.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\n        if (isLocalTee(expr)) {\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            // Assumes that the expression actually belongs to the flow and that\n            // top-level autoreleases are never undone. While that's true, it's\n            // not necessary to check presence in scopedLocals.\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Attemps to move a final autorelease from one flow to a parent.\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\n   * retain would have been written already.\n   */\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\n    // eliminate the now unnecessary temporary local.tee because it is already part of\n    // another expression in the tree. But optimizing should collapse locals again.\n    var index = this.undoAutorelease(expr, fromInnerFlow);\n    return ~index\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      for (let local of scopedLocals.values()) {\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\n  performAutoreleasesWithValue(\n    flow: Flow,\n    valueExpr: ExpressionRef,\n    valueType: Type,\n    stmts: ExpressionRef[] | null = null,\n    clearFlags: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, clearFlags);\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getAndFreeTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      let module = this.module;\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      return module.block(null, stmts, nativeType);\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return this.module.block(null, stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\n    var module = this.module;\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      // traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead.\n      let parent: Flow | null;\n      while (parent = flow.parent) flow = parent;\n      this.performAutoreleases(flow, stmts, false);\n    } else {\n      for (let local of flow.parentFunction.localsByIndex) {\n        let localIndex = local.index;\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n          stmts.push(\n            this.makeRelease(\n              module.local_get(localIndex, local.type.toNativeType())\n            )\n          );\n        }\n      }\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      this.warning(\n        DiagnosticCode.TODO_Cannot_inline_inferred_calls_and_specific_internals_yet,\n        reportNode.range, instance.internalName\n      );\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.signatureNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (nodeIsConstantValue(initializer.kind)) {\n            operands.push(this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.resolveExpression(initializer, instance.flow, parameterTypes[i]);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(parameterTypes[i].toNativeZero(module));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          return module.block(null, [\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return module.block(null, [\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      expr\n    ], this.currentType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.block(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var target = this.resolver.resolveElementAccessExpression(\n      expression,\n      this.currentFlow,\n      contextualType\n    ); // reports\n    if (!target) return this.module.unreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let thisArg = this.compileExpression(expression.expression, (<Class>target).type,\n          Constraints.CONV_IMPLICIT\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg, constraints);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.signatureNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.unreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(<Class>classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.block(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      flow,\n      this.currentEnum || actualFunction\n    );\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          type = type.nonNullableType;\n        }\n        this.currentType = type;\n        return this.module.local_get(localIndex, type.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.unreachable();\n        }\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = type;\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\n    this.currentType = Type.bool;\n    if (!expectedType) return module.unreachable();\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          actualType.toNativeZero(module)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          return module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(tempLocal.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(tempLocal.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          return module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(tempLocal.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(tempLocal.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        let classType = contextualType.classReference;\n        if (classType) {\n          if (classType.prototype == this.program.arrayPrototype) {\n            return this.compileArrayLiteral(\n              assert(classType.typeArguments)[0],\n              (<ArrayLiteralExpression>expression).elementExpressions,\n              constraints,\n              expression\n            );\n          }\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    constraints: Constraints,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var program = this.program;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n    var arrayType = arrayInstance.type;\n    var flow = this.currentFlow;\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(arrayType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        : elementType.toNativeZero(module);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // makeArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], reportNode);\n        this.currentType = arrayType;\n        return this.makeAutorelease(this.makeRetain(expr));\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(0)\n            : module.i32(0)\n        ], reportNode),\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStart.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStart).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        valueExpr = this.makeRetain(valueExpr);\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    return module.block(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        type.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.block(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      flow\n    );\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0,\n          this.makeRetain(\n            this.makeAllocation(classInstance)\n          )\n        )\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.options.usizeType.toNativeZero(this.module),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(propertyAccess);\n\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        this.currentType = (<Field>target).type;\n        return module.load(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          propertyAccess.range, (<FunctionPrototype>target).name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.unreachable();\n  }\n\n  compileTernaryExpression(\n    expression: TernaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileExpression(ifThen, contextualType)\n        : this.compileExpression(ifElse, contextualType);\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, contextualType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, contextualType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!IfThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        IfThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      // if (!(constraints & Constraints.WILL_RETAIN)) {\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\n      // }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n                if (overload) {\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.unreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n                if (overload) {\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.unreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.resolveExpression(expression.operand, flow); // reports\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      this.currentType = Type.void;\n      if (!target) return module.unreachable();\n      return this.makeAssignment(\n        target,\n        expr,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    } else if (!target) {\n      return module.unreachable();\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.resolveExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.unary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.unary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return module.unary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.EqF32, expr, module.f32(0));\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.EqF64, expr, module.f64(0));\n      }\n      default: {\n        assert(false);\n        return module.i32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.NeF32, expr, module.f32(0));\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.NeF64, expr, module.f64(0));\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.currentMemoryOffset)\n        : module.i32(classInstance.currentMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(\n    classInstance: Class,\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let initializerNode = field.prototype.initializerNode;\n      if (initializerNode) { // use initializer\n        let initExpr = this.compileExpression(initializerNode, fieldType, // reports\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n        stmts.push(\n          module.store(fieldType.byteSize,\n            module.local_get(thisLocalIndex, nativeSizeType),\n            initExpr,\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      } else {\n        let parameterIndex = field.prototype.parameterIndex;\n        stmts.push(\n          module.store(fieldType.byteSize,\n            module.local_get(thisLocalIndex, nativeSizeType),\n            parameterIndex >= 0 // initialized via parameter (here: a local)\n              ? module.local_get(\n                  isInline\n                    ? assert(flow.lookupLocal(field.name)).index\n                    : 1 + parameterIndex, // this is local 0\n                  nativeFieldType\n                )\n              : fieldType.toNativeZero(module),\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      }\n    }\n    return stmts;\n  }\n\n  makeInstanceOfClass(\n    expr: ExpressionRef,\n    classInstance: Class\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var idTemp = flow.getTempLocal(Type.i32);\n    var idExpr = module.load(4, false,\n      module.binary(BinaryOp.SubI32,\n        expr,\n        module.i32(this.program.runtimeHeaderSize)\n      ),\n      NativeType.I32\n    );\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\n    var conditions: ExpressionRef[] = [];\n    conditions.push(\n      module.drop( // br_if returns the value too\n        module.br(label,\n          module.binary(BinaryOp.EqI32, // classId == class.id\n            module.local_tee(idTemp.index, idExpr),\n            module.i32(classInstance.id)\n          ),\n          module.i32(1) // ? true\n        )\n      )\n    );\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\n    // TODO: simplify if there are none\n    conditions.push(\n      module.i32(0) // : false\n    );\n    flow.freeTempLocal(idTemp);\n    flow.popBreakLabel();\n    return module.block(label, conditions, NativeType.I32);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\n  var length = stmts.length;\n  if (length == 0) return module.nop(); // usually filtered out again\n  if (length == 1) {\n    let single = stmts[0];\n    if (getExpressionType(single) == type) return single;\n    if (getExpressionId(single) == ExpressionId.Block) {\n      let count = getBlockChildCount(single);\n      let children = new Array<ExpressionRef>(count);\n      for (let i = 0; i < count; ++i) children[i] = getBlockChild(single, i);\n      return module.block(getBlockName(single), children, type);\n    }\n  }\n  return module.block(null, stmts,\n    type == NativeType.Auto\n      ? getExpressionType(stmts[length - 1])\n      : type\n  );\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_present_to_use_0 = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Module_cannot_have_multiple_start_functions = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  TODO_Cannot_inline_inferred_calls_and_specific_internals_yet = 224,\n  Expression_is_never_null = 225,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be present to use '{0}'.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Module cannot have multiple start functions.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"TODO: Cannot inline inferred calls and specific internals yet.\";\n    case 225: return \"Expression is never 'null'.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  Constraints,\n  RuntimeFeatures,\n  flatten\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_direct = \"~lib/builtins/call_direct\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_s_f32x4_sat = \"~lib/builtins/i32x4.trunc_s_f32x4_sat\";\n  export const i32x4_trunc_u_f32x4_sat = \"~lib/builtins/i32x4.trunc_u_f32x4_sat\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_s_f64x2_sat = \"~lib/builtins/i64x2.trunc_s_f64x2_sat\";\n  export const i64x2_trunc_u_f64x2_sat = \"~lib/builtins/i64x2.trunc_u_f64x2_sat\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_s_i32x4 = \"~lib/builtins/f32x4.convert_s_i32x4\";\n  export const f32x4_convert_u_i32x4 = \"~lib/builtins/f32x4.convert_u_i32x4\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_s_i64x2 = \"~lib/builtins/f64x2.convert_s_i64x2\";\n  export const f64x2_convert_u_i64x2 = \"~lib/builtins/f64x2.convert_u_i64x2\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\n  export const memory_free = \"~lib/memory/memory.free\";\n  export const memory_reset = \"~lib/memory/memory.reset\";\n\n  // std/runtime.ts\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\n  export const runtime_register = \"~lib/util/runtime/register\";\n  export const runtime_discard = \"~lib/util/runtime/discard\";\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // compiler generated\n  export const started = \"~lib/started\";\n  export const argc = \"~lib/argc\";\n  export const setargc = \"~lib/setargc\";\n  export const capabilities = \"~lib/capabilities\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  // NOTE that consolidation of individual instructions into a single case isn't exactly scientific\n  // below, but rather done to make this file easier to work with. If there was a general rule it'd\n  // most likely be \"three or more instructions that only differ in their actual opcode\".\n\n  var directize = false;\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type == Type.bool\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.i32(1);\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.i32(0);\n      let classPrototype = classReference.prototype;\n      return module.i32(classPrototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.i32(0);\n      return module.i32(classReference.isArrayLike ? 1 : 0);\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let element = compiler.resolver.resolveExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.void,\n        ReportMode.SWALLOW\n      );\n      return module.i32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let expr = compiler.compileExpression(operands[0], Type.auto);\n      compiler.currentType = Type.bool;\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.isManaged ? 1 : 0);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.i32(byteSize);\n        } else {\n          expr = module.i64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.i64(byteSize, 0);\n        } else {\n          expr = module.i32(byteSize);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      assert(isPowerOf2(byteSize));\n      let alignLog2 = ctz<i32>(byteSize);\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.i32(alignLog2);\n        } else {\n          expr = module.i64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.i64(alignLog2, 0);\n        } else {\n          expr = module.i32(alignLog2);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let classType = typeArguments![0].classReference;\n      if (!classType) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.unreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.unreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(offset);\n        } else {\n          return module.i64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(offset);\n        } else {\n          return module.i32(offset);\n        }\n      }\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: // any_bitcount<T?>(value: T) -> T\n    case BuiltinSymbols.ctz:\n    case BuiltinSymbols.popcnt: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.clz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.ClzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.ClzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.ctz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.CtzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.CtzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.popcnt: {\n          switch (compiler.currentType.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.PopcntI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.PopcntI64; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.binary(BinaryOp.RotlI32, arg0, arg1),\n            type\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.binary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.binary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.binary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflows\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.binary(BinaryOp.RotrI32, arg0, arg1),\n            type\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.binary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.binary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.binary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflowws\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFlow;\n\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal1 = flow.getTempLocal(Type.i32);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 31)) ^ (x >> 31)\n          expr = module.binary(BinaryOp.XorI32,\n            module.binary(BinaryOp.AddI32,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(BinaryOp.ShrI32,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  module.i32(31)\n                )\n              ),\n              module.local_get(tempLocalIndex1, NativeType.I32)\n            ),\n            module.local_get(tempLocalIndex2, NativeType.I32)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let options = compiler.options;\n          let flow = compiler.currentFlow;\n          let wasm64 = options.isWasm64;\n\n          let tempLocal1 = flow.getTempLocal(options.usizeType);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          expr = module.binary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n            module.binary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  wasm64 ? module.i64(63) : module.i32(31)\n                )\n              ),\n              module.local_get(tempLocalIndex1, options.nativeSizeType)\n            ),\n            module.local_get(tempLocalIndex2, options.nativeSizeType)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.I64: {\n          let flow = compiler.currentFlow;\n\n          let tempLocal1 = flow.getTempLocal(Type.i64);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 63)) ^ (x >> 63)\n          expr = module.binary(BinaryOp.XorI64,\n            module.binary(BinaryOp.AddI64,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(BinaryOp.ShrI64,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  module.i64(63)\n                )\n              ),\n              module.local_get(tempLocalIndex1, NativeType.I64)\n            ),\n            module.local_get(tempLocalIndex2, NativeType.I64)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n        case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n        case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtI64\n            : BinaryOp.GtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtU64\n            : BinaryOp.GtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.binary(BinaryOp.MaxF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.binary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type);\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\n      flow.freeTempLocal(tempLocal0);\n      return module.select(\n        module.local_tee(tempLocal0.index, arg0),\n        module.local_tee(tempLocal1.index, arg1),\n        module.binary(op,\n          module.local_get(tempLocal0.index, nativeType),\n          module.local_get(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n        case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n        case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtI64\n            : BinaryOp.LtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtU64\n            : BinaryOp.LtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.binary(BinaryOp.MinF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.binary(BinaryOp.MinF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type);\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\n      flow.freeTempLocal(tempLocal0);\n      return module.select(\n        module.local_tee(tempLocal0.index, arg0),\n        module.local_tee(tempLocal1.index, arg1),\n        module.binary(op,\n          module.local_get(tempLocal0.index, nativeType),\n          module.local_get(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.ceil: // any_rounding<T?>(value: T) -> T\n    case BuiltinSymbols.floor: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: return arg0; // considered rounded\n        case TypeKind.F32: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF32\n            : UnaryOp.FloorF32;\n          break;\n        }\n        case TypeKind.F64: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF64\n            : UnaryOp.FloorF64;\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let op: BinaryOp;\n      switch (type.kind) {\n        // TODO: does an integer version make sense?\n        case TypeKind.F32: { op = BinaryOp.CopysignF32; break; }\n        case TypeKind.F64: { op = BinaryOp.CopysignF64; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          let arg0 = compiler.compileExpression(operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            Constraints.CONV_IMPLICIT\n          );\n          expr = module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      compiler.currentType = type;\n      return expr;\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        contextualType != Type.auto &&\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.load(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      compiler.currentType = outType;\n      return module.atomic_load(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.atomic_rmw(\n        op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize): T\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(operands[2],\n        inType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(arg2,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      compiler.currentType = inType;\n      return module.atomic_cmpxchg(\n        type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = compiler.compileExpression(operands[1], type,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg2 = compiler.compileExpression(operands[2],\n        Type.i64,\n        Constraints.CONV_IMPLICIT\n      );\n      compiler.currentType = Type.i32;\n      return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n    }\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = compiler.compileExpression(operands[1],\n        Type.i32,\n        Constraints.CONV_IMPLICIT\n      );\n      compiler.currentType = Type.i32;\n      return module.atomic_notify(arg0, arg1);\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpression(operands[2], Type.bool),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.select(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.unreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemorySize);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemoryGrow, null, [\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_copy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_fill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], toType);\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (fromType.size != toType.size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.nop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      let expr: ExpressionRef;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.if(\n              module.unary(UnaryOp.EqzI32, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.if(\n              module.unary(UnaryOp.EqzI64, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            expr = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            expr = module.if(\n              module.binary(BinaryOp.EqF32,\n                arg0,\n                module.f32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.if(\n              module.binary(BinaryOp.EqF64,\n                arg0,\n                module.f64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFlow;\n            let tempLocal = flow.getAndFreeTempLocal(type);\n            flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED); // arg0 is wrapped\n            expr = module.if(\n              module.local_tee(tempLocal.index, arg0),\n              module.local_get(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64);\n            expr = module.if(\n              module.unary(UnaryOp.EqzI64,\n                module.local_tee(tempLocal.index, arg0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType);\n            expr = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.local_tee(tempLocal.index, arg0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32);\n            expr = module.if(\n              module.binary(BinaryOp.EqF32,\n                module.local_tee(tempLocal.index, arg0),\n                module.f32(0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64);\n            expr = module.if(\n              module.binary(BinaryOp.EqF64,\n                module.local_tee(tempLocal.index, arg0),\n                module.f64(0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      // eliminate unnecessary tees by preferring contextualType(=void):\n      let expr = compiler.compileExpression(operands[0], contextualType);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.call_direct: directize = true;\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\n      ) return module.unreachable();\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\n      let arg0 = compiler.compileExpression(operands[0], Type.u32);\n      let arg0Type = compiler.currentType;\n      if (!(\n        arg0Type == Type.u32 ||                                      // either plain index\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\n      )) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let nativeReturnType = returnType.toNativeType();\n      let parameterTypes = new Array<Type>(numOperands);\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.i32);\n        let operandType = compiler.currentType;\n        parameterTypes[i] = operandType;\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      if (directize) {\n        // if the index expression is precomputable to a constant value, emit a direct call\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n          assert(getExpressionType(arg0) == NativeType.I32);\n          let index = getConstValueI32(arg0);\n          let functionTable = compiler.functionTable;\n          if (index >= 0 && index < functionTable.length) {\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.call_indirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.unreachable();\n      let classInstance = typeArguments![0].classReference;\n      if (!classInstance) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = UnaryOp.SplatVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = UnaryOp.SplatVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = UnaryOp.SplatVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = UnaryOp.SplatVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? UnaryOp.SplatVecI64x2\n            : UnaryOp.SplatVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = UnaryOp.SplatVecF32x4; break; }\n        case TypeKind.F64: { op = UnaryOp.SplatVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = type;\n        return module.unreachable();\n      }\n      let op: SIMDExtractOp;\n      switch (type.kind) {\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneSVecI8x16; break; }\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneUVecI8x16; break; }\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneSVecI16x8; break; }\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneUVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneVecI64x2\n            : SIMDExtractOp.ExtractLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = type;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      compiler.currentType = type;\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        return module.unreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.unreachable();\n      }\n      return module.simd_extract(op, arg0, idx);\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: SIMDReplaceOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneVecI64x2\n            : SIMDReplaceOp.ReplaceLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.unreachable();\n      }\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.simd_replace(op, arg0, idx, arg2);\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let laneWidth = type.byteSize;\n      let laneCount = 16 / laneWidth;\n      assert(isInteger(laneCount) && isPowerOf2(laneCount));\n      if (\n        checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.F32:\n        case TypeKind.F64: break;\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let mask = new Uint8Array(16);\n      let maxIdx = (laneCount << 1) - 1;\n      for (let i = 0; i < laneCount; ++i) {\n        let operand = operands[2 + i];\n        let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n        if (getExpressionId(argN) != ExpressionId.Const) {\n          compiler.error(\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\n            operand.range\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        assert(getExpressionType(argN) == NativeType.I32);\n        let idx = getConstValueI32(argN);\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        switch (laneWidth) {\n          case 1: {\n            writeI8(idx, mask, i);\n            break;\n          }\n          case 2: {\n            let off8 = i << 1;\n            let idx8 = idx << 1;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            break;\n          }\n          case 4: {\n            let off8 = i << 2;\n            let idx8 = idx << 2;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            break;\n          }\n          case 8: {\n            let off8 = i << 3;\n            let idx8 = idx << 3;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            writeI8(idx8 + 4, mask, off8 + 4);\n            writeI8(idx8 + 5, mask, off8 + 5);\n            writeI8(idx8 + 6, mask, off8 + 6);\n            writeI8(idx8 + 7, mask, off8 + 7);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.simd_shuffle(arg0, arg1, mask);\n    }\n    case BuiltinSymbols.v128_add: // any_binary<T!>(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_sub:\n    case BuiltinSymbols.v128_mul:\n    case BuiltinSymbols.v128_div:\n    case BuiltinSymbols.v128_add_saturate:\n    case BuiltinSymbols.v128_sub_saturate:\n    case BuiltinSymbols.v128_min:\n    case BuiltinSymbols.v128_max:\n    case BuiltinSymbols.v128_eq:\n    case BuiltinSymbols.v128_ne:\n    case BuiltinSymbols.v128_lt:\n    case BuiltinSymbols.v128_le:\n    case BuiltinSymbols.v128_gt:\n    case BuiltinSymbols.v128_ge: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_add: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.AddVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.AddVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.AddVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.AddVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.AddVecI64x2\n                : BinaryOp.AddVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.AddVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.AddVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.SubVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.SubVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.SubVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.SubVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.SubVecI64x2\n                : BinaryOp.SubVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.SubVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.SubVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_mul: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.MulVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.MulVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.MulVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.MulVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MulVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.MulVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_div: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.DivVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.DivVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_add_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.AddSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.AddSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.AddSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.AddSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.SubSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.SubSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.SubSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.SubSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_min: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MinVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MinVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_max: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MaxVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MaxVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_eq: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.EqVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.EqVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.EqVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.EqVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.EqVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.EqVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ne: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.NeVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.NeVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.NeVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.NeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.NeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.NeVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_lt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LtSVecI32x4\n                  : BinaryOp.LtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_le: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LeSVecI32x4\n                  : BinaryOp.LeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_gt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GtSVecI32x4\n                  : BinaryOp.GtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ge: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GeSVecI32x4\n                  : BinaryOp.GeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_neg: // any_unary<T!>(a: v128) -> v128\n    case BuiltinSymbols.v128_abs:\n    case BuiltinSymbols.v128_sqrt:\n    case BuiltinSymbols.v128_convert:\n    case BuiltinSymbols.v128_trunc: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_neg: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.NegVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.NegVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.NegVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.NegVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.NegVecI64x2\n                : UnaryOp.NegVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = UnaryOp.NegVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.NegVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_abs: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.AbsVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.AbsVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sqrt: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.SqrtVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.SqrtVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_convert: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.ConvertSVecI32x4ToVecF32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.ConvertUVecI32x4ToVecF32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.ConvertSVecI64x2ToVecF64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.ConvertUVecI64x2ToVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_trunc: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.TruncSatSVecF32x4ToVecI32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.TruncSatUVecF32x4ToVecI32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.TruncSatSVecF64x2ToVecI64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.TruncSatUVecF64x2ToVecI64x2; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.v128_shl: // any_shift<T!>(a: v128, b: i32) -> v128\n    case BuiltinSymbols.v128_shr: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: SIMDShiftOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_shl: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = SIMDShiftOp.ShlVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = SIMDShiftOp.ShlVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = SIMDShiftOp.ShlVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = SIMDShiftOp.ShlVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShlVecI64x2\n                : SIMDShiftOp.ShlVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_shr: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = SIMDShiftOp.ShrSVecI8x16; break; }\n            case TypeKind.U8:  { op = SIMDShiftOp.ShrUVecI8x16; break; }\n            case TypeKind.I16: { op = SIMDShiftOp.ShrSVecI16x8; break; }\n            case TypeKind.U16: { op = SIMDShiftOp.ShrUVecI16x8; break; }\n            case TypeKind.I32: { op = SIMDShiftOp.ShrSVecI32x4; break; }\n            case TypeKind.U32: { op = SIMDShiftOp.ShrUVecI32x4; break; }\n            case TypeKind.I64: { op = SIMDShiftOp.ShrSVecI64x2; break; }\n            case TypeKind.U64: { op = SIMDShiftOp.ShrUVecI64x2; break; }\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrSVecI64x2\n                : SIMDShiftOp.ShrSVecI32x4;\n              break;\n            }\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrUVecI64x2\n                : SIMDShiftOp.ShrUVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.simd_shift(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_and: // any_bitwise_binary(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_or:\n    case BuiltinSymbols.v128_xor: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_and: { op = BinaryOp.AndVec128; break; }\n        case BuiltinSymbols.v128_or:  { op = BinaryOp.OrVec128; break; }\n        case BuiltinSymbols.v128_xor: { op = BinaryOp.XorVec128; break; }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // any_bitwise_unary(a: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.unary(UnaryOp.NotVec128, arg0);\n    }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.simd_bitselect(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: // any_test<T!>(a: v128) -> bool\n    case BuiltinSymbols.v128_all_true: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_any_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AnyTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AnyTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AnyTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AnyTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AnyTrueVecI64x2\n                : UnaryOp.AnyTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_all_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AllTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AllTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AllTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AllTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AllTrueVecI64x2\n                : UnaryOp.AllTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      return module.unary(op, arg0);\n    }\n\n    // === Internal runtime =======================================================================\n\n    case BuiltinSymbols.idof: {\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.u32;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference || classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      return module.i32(classReference.id);\n    }\n    case BuiltinSymbols.visit_globals: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\n    }\n    case BuiltinSymbols.visit_members: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Cannot_find_name_0,\n    reportNode.expression.range, prototype.internalName\n  );\n  return module.unreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  if (compiler.options.hasFeature(Feature.THREADS)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n    }\n  }\n  if (compiler.options.hasFeature(Feature.SIMD)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.void, reportNode);\n\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_s_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_u_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_trunc_s_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_trunc_u_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_s_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_u_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_s_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_u_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    }\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    [ typeArgument ],\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.unreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\n\n  var messageArg: ExpressionRef;\n  if (message !== null) {\n    // The message argument works much like an arm of an IF that does not become executed if the\n    // assertion succeeds respectively is only being computed if the program actually crashes.\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n    messageArg = compiler.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n  } else {\n    messageArg = stringInstance.type.toNativeZero(module);\n  }\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.block(null, [\n    module.call(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.i32(reportNode.range.line),\n        module.i32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.unreachable()\n  ]);\n}\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  compiler.compileFunction(visitInstance);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(instance.type.isManaged);\n    assert(id == lastId++);\n\n    let visitImpl: Element | null;\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      let block: RelooperBlockRef;\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        block = relooper.addBlock(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          visitSig.thisType == instance.type\n        );\n        let callExpr = module.call(visitFunc.internalName, [\n          module.local_get(0, nativeSizeType), // ref\n          module.local_get(1, NativeType.I32)  // cookie\n        ], NativeType.None);\n        block = relooper.addBlock(\n          instance.base\n            ? callExpr // branch will be added later\n            : module.block(null, [\n                callExpr,\n                module.return()\n              ])\n        );\n      }\n      relooper.addBranchForSwitch(outer, block, [ id ]);\n      blocks.push(block);\n\n    // otherwise generate one\n    } else {\n      // traverse references assigned to own fields\n      let code = new Array<ExpressionRef>();\n      let members = instance.members;\n      if (members) {\n        for (let member of members.values()) {\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!instance.base) code.push(module.return());\n      let block = relooper.addBlock(\n        flatten(module, code, NativeType.None)\n      );\n      relooper.addBranchForSwitch(outer, block, [ id ]);\n      blocks.push(block);\n    }\n  }\n  for (let [id, instance] of managedClasses) {\n    let base = instance.base;\n    if (base) {\n      relooper.addBranch(blocks[id], blocks[base.id]);\n    }\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(id == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getLocalGetIndex,\n  getLocalSetIndex,\n  getLocalSetValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.LocalGet: {\n        this.push(\"$\");\n        this.push(getLocalGetIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.LocalSet: {\n        this.push(\"$\");\n        this.push(getLocalSetIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getLocalSetValue(expr));\n        return;\n      }\n      case ExpressionId.GlobalGet:\n      case ExpressionId.GlobalSet: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.MemorySize: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.MemoryGrow: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicNotify:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\n import {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\nimport { Source, NodeKind, ImportStatement, DeclarationStatement, ExportStatement, Range } from \"./ast\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.isEntry) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var members = file.exports;\n    if (members) {\n      for (let [name, member] of members) this.visitElement(name, member);\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (seen.has(element)) {\n      this.visitAlias(name, element, <string>seen.get(element));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(name, getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(name, setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n// TODO: Extract this into separate module, preferrable pluggable\nexport class NEARBindingsBuilder extends ExportsWalker {\n  private typeMapping: { [key: string]: string } = {\n    \"i32\": \"Integer\",\n    \"u32\": \"Integer\",\n    \"i64\": \"String\",\n    \"u64\": \"String\",\n    \"String\": \"String\",\n    \"bool\": \"Boolean\",\n    \"Uint8Array\": \"String\"\n  };\n\n  private nonNullableTypes = [\"i32\", \"u32\", \"i64\", \"u64\", \"bool\"];\n\n  private sb: string[] = [];\n  private generatedEncodeFunctions = new Set<string>();\n  private generatedDecodeFunctions = new Set<string>();\n  private exportedClasses: Class[] = [];\n  private exportedFunctions: Function[] = [];\n  classInjections = new Map<string, string>();\n  classRanges = new Map<string, Range>();\n\n  static build(program: Program): string {\n    return new NEARBindingsBuilder(program).build();\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    // Do nothing\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    // Do nothing\n  }\n\n  visitClass(name: string, element: Class): void {\n    this.classRanges.set(element.name, element.declaration.range);\n    if (!element.is(CommonFlags.MODULE_EXPORT)) {\n      return;\n    }\n    this.exportedClasses.push(element);\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (!element.is(CommonFlags.MODULE_EXPORT)) {\n      return;\n    }\n    this.generateArgsParser(element);\n    this.generateWrapperFunction(element);\n    this.exportedFunctions.push(element);\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    // Do nothing\n  }\n\n  visitField(name: string, element: Field): void {\n    throw new Error(\"Shouldn't be called\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    // Do nothing\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // Do nothing\n  }\n\n  private generateArgsParser(element: Function) {\n    let signature = element.signature;\n    let fields = signature.parameterNames ? signature.parameterNames.map((paramName, i) => {\n      return { name: paramName, type: signature.parameterTypes[i] };\n    }) : [];\n    fields.forEach(field => this.generateDecodeFunction(field.type));\n    this.sb.push(`export class __near_ArgsParser_${element.name} extends ThrowingJSONHandler {\n        buffer: Uint8Array;\n        decoder: JSONDecoder<__near_ArgsParser_${element.name}>;\n        handledRoot: boolean = false;\n      `);\n    if (signature.parameterNames) {\n      fields.forEach((field) => {\n        this.sb.push(`__near_param_${field.name}: ${this.typeName(field.type)};`);\n      });\n      this.generateHandlerMethods(\"this.__near_param_\", fields);\n    } else {\n      this.generateHandlerMethods(\"this.__near_param_\", []);\n    }\n    this.sb.push(`}`);\n  }\n\n  private generateWrapperFunction(element: Function) {\n    let signature = element.signature;\n    let returnType = signature.returnType;\n    this.generateEncodeFunction(returnType);\n    this.sb.push(`export function ${element.name}(): void {\n      // Reading input bytes.\n      let json = storage._internalReadBytes(4, 0, 0);\n      let handler = new __near_ArgsParser_${element.name}();\n      handler.buffer = json;\n      handler.decoder = new JSONDecoder<__near_ArgsParser_${element.name}>(handler);\n      handler.decoder.deserialize(json);`);\n    if (returnType != Type.void) {\n      this.sb.push(`let result = wrapped_${element.name}(`);\n    } else {\n      this.sb.push(`wrapped_${element.name}(`);\n    }\n    if (signature.parameterNames) {\n      this.sb.push(signature.parameterNames.map(paramName => `handler.__near_param_${paramName}`).join(\",\"));\n    }\n    this.sb.push(\");\");\n    if (returnType != Type.void) {\n      this.sb.push(`\n        let encoder = new JSONEncoder();\n      `);\n      this.generateFieldEncoder(returnType, \"null\", \"result\");\n      this.sb.push(`\n        let val = encoder.serialize();\n        return_value(val.byteLength, <usize>val.buffer);\n      `);\n    }\n    this.sb.push(`}`);\n  }\n\n  private generateHandlerMethods(valuePrefix: string, fields: any[]) : void {\n    let fieldsWithTypes = (types: string[]): any[] =>\n      fields.filter(field => types.indexOf(this.typeName(field.type)) != -1);\n\n    this.generateBasicSetterHandlers(valuePrefix, \"Integer\", \"i64\", fieldsWithTypes([\"i32\", \"u32\"]));\n    this.generateBasicSetterHandlers(valuePrefix, \"String\", \"String\", fieldsWithTypes([\"String\", \"i64\", \"u64\", \"Uint8Array\"]));\n    this.generateBasicSetterHandlers(valuePrefix, \"Boolean\", \"bool\", fieldsWithTypes([\"bool\"]));\n\n    this.sb.push(\"setNull(name: string): void {\");\n    fields.forEach((field) => {\n      this.sb.push(`if (name == \"${field.name}\") {\n        ${valuePrefix}${field.name} = <${this.typeName(field.type)}>null;\n        return;\n      }`);\n    });\n    this.sb.push(`\n      super.setNull(name);\n    }`);\n\n    let nonBasicFields = fields.filter(field => field.type.classReference);\n    this.sb.push(`\n      pushObject(name: string): bool {`);\n    this.sb.push(`if (!this.handledRoot) {\n      assert(name == null);\n      this.handledRoot = true;\n      return true;\n    } else {\n      assert(name != null);\n    }`);\n    this.generatePushHandler(valuePrefix, nonBasicFields.filter(field => !this.isArrayType(field.type)));\n    this.sb.push(`\n        return super.pushObject(name);\n      }`);\n    this.sb.push(`\n      pushArray(name: string): bool {`);\n    this.generatePushHandler(valuePrefix, nonBasicFields.filter(field => this.isArrayType(field.type)));\n    this.sb.push(`\n        return super.pushArray(name);\n      }`);\n  }\n\n  private generateBasicSetterHandlers(valuePrefix: string, setterType: string, setterValueType: string, matchingFields: any[]) {\n    if (matchingFields.length > 0) {\n      this.sb.push(`set${setterType}(name: string, value: ${setterValueType}): void {`);\n      matchingFields.forEach(field => {\n        let fieldTypeName = this.typeName(field.type);\n        if (setterType == \"String\" && fieldTypeName != \"String\") {\n          if (fieldTypeName == \"Uint8Array\") {\n            this.sb.push(`if (name == \"${field.name}\") {\n              ${valuePrefix}${field.name} = base64.decode(value);\n              return; \n            }`);\n          } else {\n            let className = field.type == \"u64\" ? \"U64\" : \"I64\";\n            this.sb.push(`if (name == \"${field.name}\") {\n              ${valuePrefix}${field.name} = ${className}.parseInt(value);\n              return;\n            }`);\n          }\n        } else {\n          this.sb.push(`if (name == \"${field.name}\") {\n            ${valuePrefix}${field.name} = <${fieldTypeName}>value;\n            return;\n          }`);\n        }\n      });\n      this.sb.push(`\n        super.set${setterType}(name, value);\n      }`);\n    }\n  }\n\n  private generatePushHandler(valuePrefix: string, fields: any[]) {\n    fields.forEach((field) => {\n      if (!(this.typeName(field.type) in this.typeMapping)) {\n        this.sb.push(`if (name == \"${field.name}\") {\n          ${valuePrefix}${field.name} = __near_decode_${this.encodeType(field.type)}(this.buffer, this.decoder.state);\n          return false;\n        }`);\n      }\n    });\n  }\n\n  private generateArrayHandlerMethods(valuePrefix: string, fieldType: Type) : void {\n    let fieldTypeName = this.typeName(fieldType);\n    let setterTypeName = this.typeMapping[fieldTypeName];\n    if (setterTypeName) {\n      if (fieldTypeName == \"u64\" || fieldTypeName == \"i64\") {\n        let className = fieldTypeName == \"u64\" ? \"U64\" : \"I64\";\n        this.sb.push(`setString(name: string, value: string): void {\n          ${valuePrefix}.push(${className}.parseInt(value));\n        }`);\n      } else {\n        let valueType = fieldTypeName;\n        if (valueType == \"u32\" || valueType == \"i32\") {\n          valueType = \"i64\";\n        }\n        this.sb.push(`set${setterTypeName}(name: string, value: ${valueType}): void {\n          ${valuePrefix}.push(<${fieldTypeName}>value);\n        }`);\n      }\n      this.sb.push(`setNull(name: string): void {\n        ${valuePrefix}.push(<${fieldTypeName}>null);\n      }\n      pushArray(name: string): bool {\n        assert(name == null && !this.handledRoot);\n        this.handledRoot = true;\n        return true;\n      }`);\n    } else {\n      this.sb.push(`pushObject(name: string): bool {\n        ${valuePrefix}.push(__near_decode_${this.encodeType(fieldType)}(this.buffer, this.decoder.state));\n        return false;\n      }\n      pushArray(name: string): bool {\n        assert(name == null);\n        if (!this.handledRoot) {\n          this.handledRoot = true;\n          return true;\n        }\n        ${valuePrefix}.push(__near_decode_${this.encodeType(fieldType)}(this.buffer, this.decoder.state));\n        return false;\n      }`);\n    }\n  }\n\n\n  private generateEncodeFunction(type: Type) {\n    if (!type.classReference) {\n      return;\n    }\n\n    let encodedTypeName = this.encodeType(type);\n    if (this.generatedEncodeFunctions.has(encodedTypeName) || encodedTypeName in this.typeMapping) {\n      return;\n    }\n    this.generatedEncodeFunctions.add(encodedTypeName);\n\n    let methodName = `__near_encode_${encodedTypeName}`;\n    if (this.tryUsingImport(type, methodName)) {\n      return;\n    }\n\n    let typeName = this.typeName(type);\n    if (this.isArrayType(type)) {\n      // Array\n      this.generateEncodeFunction(type.classReference.typeArguments![0]);\n\n      this.sb.push(`export function __near_encode_${encodedTypeName}(\n          value: ${typeName},\n          encoder: JSONEncoder): void {`);\n      this.sb.push(`for (let i = 0; i < value.length; i++) {`);\n      this.generateFieldEncoder(type.classReference.typeArguments![0], \"null\", \"value[i]\");\n      this.sb.push(\"}\");\n\n    } else {\n      // Object\n      this.getFields(type.classReference).forEach(field => {\n        this.generateEncodeFunction(field.type);\n      });\n\n      this.sb.push(`export function __near_encode_${encodedTypeName}(\n          value: ${typeName},\n          encoder: JSONEncoder): void {`);\n      this.getFields(type.classReference).forEach(field => {\n        let fieldType = field.type;\n        let fieldName = field.name;\n        let sourceExpr = `value.${fieldName}`;\n        this.generateFieldEncoder(fieldType, `\"${fieldName}\"`, sourceExpr);\n      });\n    }\n\n    this.sb.push(\"}\");\n    let className = this.typeName(type);\n\n    let injections = `\n        static decode(json: Uint8Array): ${className} {\n          let value = new ${className}();\n          value.decode(json);\n          return value;\n        }\n\n        decode(json: Uint8Array): ${className} {\n          __near_decode_${typeName}(json, null, this);\n          return this;\n        }\n\n        private _encoder(): JSONEncoder {\n          let encoder: JSONEncoder = new JSONEncoder();\n          encoder.pushObject(null);\n          __near_encode_${typeName}(this, encoder);\n          encoder.popObject();\n          return encoder;\n        }\n\n        encode(): Uint8Array {\n          return this._encoder().serialize();\n        }\n\n        toString(): string {\n          return this._encoder().toString();\n        }\n      `;\n    this.classInjections.set(type.classReference.name, injections);\n  }\n\n  private tryUsingImport(type: Type, methodName: string): bool {\n    let sourcesWithExport = this.program.sources.filter(source =>\n      this.getExports(source).filter(d => d.name.text == methodName).length > 0);\n\n    if (sourcesWithExport.length == 0) {\n      return false;\n    }\n\n    if (sourcesWithExport.length > 1) {\n      console.log(`WARN: more than one file exporting ${methodName}: ${sourcesWithExport.map(s => s.normalizedPath)}`);\n    }\n\n    let importPath = sourcesWithExport[0].normalizedPath.replace('.ts', '');\n    this.sb.push(`import { ${methodName} } from \"./${importPath}\";`);\n    return true;\n  }\n\n  private generateHandler(type: Type) {\n    let typeName = this.encodeType(type);\n    this.sb.push(`export class __near_JSONHandler_${typeName} extends ThrowingJSONHandler {\n      buffer: Uint8Array;\n      decoder: JSONDecoder<__near_JSONHandler_${typeName}>;\n      handledRoot: boolean = false;\n      value: ${this.typeName(type)};\n      \n      constructor(value_: ${this.typeName(type)}) {\n        super();\n        this.value = value_;\n      }\n    `);\n    if (this.isArrayType(type)) {\n      this.generateArrayHandlerMethods(\"this.value\", type.classReference!.typeArguments![0]);\n    } else {\n      this.generateHandlerMethods(\"this.value.\", this.getFields(type.classReference!));\n    }\n    this.sb.push(\"}\\n\");\n  }\n\n  private encodeType(type: Type) : string {\n    return (<any>this.typeName(type))\n      .replace(/_/g, '__')\n      .replace(/>/g, '')\n      .replace(/</g, '_');\n  }\n\n  private typeName(type: Type): string {\n    if (!type.classReference) {\n      return type.toString();\n    }\n    let cls = type.classReference;\n    if (cls.typeArguments && cls.typeArguments.length > 0) {\n      return cls.prototype.name + \"<\" +\n        cls.typeArguments.map(argType => this.typeName(argType)).join(\", \") +\n        \">\"\n    }\n    return cls.prototype.name;\n  }\n\n  private generateDecodeFunction(type: Type) {\n    if (!type.classReference) {\n      return;\n    }\n\n    let encodedTypeName = this.encodeType(type);\n    if (this.generatedDecodeFunctions.has(encodedTypeName) || encodedTypeName in this.typeMapping) {\n      return;\n    }\n    this.generatedDecodeFunctions.add(encodedTypeName);\n\n    let methodName = `__near_decode_${encodedTypeName}`;\n    if (this.tryUsingImport(type, methodName)) {\n      return;\n    }\n\n    this.generateHandler(type);\n    if (this.isArrayType(type)) {\n      // Array\n      this.generateDecodeFunction(type.classReference.typeArguments![0]);\n    } else {\n      // Object\n      this.getFields(type.classReference).forEach(field => {\n        this.generateDecodeFunction(field.type);\n      });\n    }\n\n    let typeName = this.typeName(type);\n    this.sb.push(`export function __near_decode_${encodedTypeName}(\n        buffer: Uint8Array, state: DecoderState, value: ${typeName} = null):${typeName} {\n      if (value == null) {\n        value = new ${typeName}();\n      }\n      let handler = new __near_JSONHandler_${encodedTypeName}(value);\n      handler.buffer = buffer;\n      handler.decoder = new JSONDecoder<__near_JSONHandler_${encodedTypeName}>(handler);\n      handler.decoder.deserialize(buffer, state);\n      return value;\n    }\\n`);\n  }\n\n  private generateFieldEncoder(fieldType: Type, fieldExpr: string, sourceExpr: string) {\n    let fieldTypeName = this.typeName(fieldType);\n    let setterType = this.typeMapping[fieldTypeName];\n    if (!setterType) {\n      // Object / array\n      let pushType = this.isArrayType(fieldType) ? \"Array\" : \"Object\";\n      this.sb.push(`if (${sourceExpr} != null) {\n          encoder.push${pushType}(${fieldExpr});\n          __near_encode_${this.encodeType(fieldType)}(${sourceExpr}, encoder);\n          encoder.pop${pushType}();\n        } else {\n          encoder.setNull(${fieldExpr});\n        }`);\n    } else {\n      // Basic types\n      if (this.nonNullableTypes.indexOf(fieldTypeName) != -1) {\n        if ([\"i64\", \"u64\"].indexOf(fieldTypeName) != -1) {\n          this.sb.push(`encoder.set${setterType}(${fieldExpr}, ${sourceExpr}.toString());`);\n        } else {\n          this.sb.push(`encoder.set${setterType}(${fieldExpr}, ${sourceExpr});`);\n        }\n      } else if (fieldTypeName == \"Uint8Array\") {\n        this.sb.push(`if (${sourceExpr} != null) {\n            encoder.setString(${fieldExpr}, base64.encode(${sourceExpr}));\n          } else {\n            encoder.setNull(${fieldExpr});\n          };`);\n      } else {\n        this.sb.push(`if (${sourceExpr} != null) {\n            encoder.set${setterType}(${fieldExpr}, ${sourceExpr});\n          } else {\n            encoder.setNull(${fieldExpr});\n          }`);\n      }\n    }\n  }\n\n  private isArrayType(type: Type): bool {\n    return !!(type.classReference && type.classReference.prototype.name == \"Array\" && type.classReference.typeArguments);\n  }\n\n  private getFields(element: Class): Field[] {\n    if (!element.members) {\n      return [];\n    }\n\n    return <Field[]>[...element.members.values()].filter(member => member instanceof Field);\n  }\n\n  build(): string {\n    let mainSources = this.program.sources\n      .filter(s => s.isEntry && !s.normalizedPath.startsWith(\"~lib\"));\n    assert(mainSources.length == 1);\n    let mainSource = mainSources[0];\n    this.copyImports(mainSource);\n\n    this.walk();\n\n    this.exportedClasses.forEach(c => {\n      this.generateEncodeFunction(c.type);\n      this.generateDecodeFunction(c.type);\n    });\n\n    let allExported = (<Element[]>this.exportedClasses).concat(<Element[]>this.exportedFunctions).filter(e => e.is(CommonFlags.MODULE_EXPORT));\n    let allImportsStr = allExported.map(c => `${c.name} as wrapped_${c.name}`).join(\", \");\n\n    this.sb = [`\n      import { storage, near, base64 } from \"./near\";\n      import { JSONEncoder } from \"./json/encoder\";\n      import { JSONDecoder, ThrowingJSONHandler, DecoderState } from \"./json/decoder\";\n      import {${allImportsStr}} from \"./${mainSource.normalizedPath.replace(\".ts\", \"\")}\";\n      \n      // Runtime functions\n      @external(\"env\", \"return_value\")\n      declare function return_value(value_len: usize, value_ptr: usize): void;\n    `].concat(this.sb);\n\n    for (let [key, value] of this.classRanges) {\n      let injections = this.classInjections.get(key);\n      if (injections) {\n        let str = value.toString();\n        let bracketIndex = str.lastIndexOf(\"}\");\n        let classText = str.substring(0, bracketIndex) + `\\n${injections}\\n}`;\n        this.sb.push(classText);\n      }\n    }\n\n    return this.sb.join(\"\\n\");\n  }\n\n  private copyImports(mainSource: Source): any {\n    this.getImports(mainSource).forEach(statement => {\n      if (statement.declarations) {\n        let declarationsStr = statement.declarations!\n          .map(declaration => `${declaration.foreignName.text} as ${declaration.name.text}`)\n          .join(\",\");\n        this.sb.push(`import {${declarationsStr}} from \"${statement.path.value}\";`);\n      }\n    });\n  }\n\n  private getImports(source: Source): ImportStatement[] {\n    return <ImportStatement[]>source.statements\n      .filter(statement => statement.kind == NodeKind.IMPORT);\n  }\n\n  private getExports(source: Source): DeclarationStatement[] {\n    let declarations = <DeclarationStatement[]>source.statements\n      .filter(statement =>\n        statement.kind == NodeKind.FUNCTIONDECLARATION ||\n        statement.kind == NodeKind.CLASSDECLARATION);\n    return declarations.filter(d => d.is(CommonFlags.EXPORT));\n  }\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private unknown: Set<string> = new Set();\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(name, element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"export class \");\n    }\n    sb.push(name);\n    // var base = element.base;\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n    //   sb.push(\" extends \");\n    //   sb.push(base.name); // TODO: fqn\n    // }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\" = typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n      let current = first;\n      let parameters: TypeNode[] | null = null;\n      let nullable = false;\n\n      // Identifier ('.' Identifier)+\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n          current.next = next;\n          current = next;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range(tn.pos)\n          );\n          return null;\n        }\n      }\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<TypeNode>parameter];\n          else parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      if (!typeParameters) typeParameters = [ typeParameter ];\n      else typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!(typeParameters && typeParameters.length)) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      let defaultType: TypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<TypeNode>type];\n          else implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.TYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<TypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return identifier;\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments: CommonTypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nArray.create = function(capacity) {\n  var arr = new Array(capacity);\n  arr.length = 0;\n  return arr;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  }\n});\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n\nglobalScope[\"unmanaged\"] = function() {};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Value is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Value is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { Decompiler } from \"./decompiler\";\nimport { IDLBuilder, TSDBuilder, NEARBindingsBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Parser } from \"./parser\";\nimport { Program } from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n// TODO: Make pluggable tree walkers instead of hardcoding various formats here\nexport function buildNEAR(program: Program): string {\n  return NEARBindingsBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util\";\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n"],"sourceRoot":""}