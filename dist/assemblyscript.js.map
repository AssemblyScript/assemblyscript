{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__19__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","null_","true_","false_","this_","super_","constructor","LibrarySymbols","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","ArrayBuffer","Math","Mathf","memory","allocate","abort","main","length","byteLength","pow","mod","__export","isPowerOf2","x","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","OperatorKind","common_1","diagnostics_1","types_1","ast_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","decoratorKind","arg","DecoratorKind","OPERATOR","OPERATOR_BINARY","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","_super","_this","sources","diagnosticsOffset","explicitStartFunction","filesByName","Map","elementsByName","elementsByDeclaration","instancesByName","typeClasses","arrayBufferInstance","arrayPrototype","stringInstance","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","nativeDummySignature","nativeSource","Source","SourceKind","LIBRARY","nativeFile","File","set","internalName","resolver","Resolver","__extends","makeNativeVariableDeclaration","flags","NONE","Node","createVariableDeclaration","createIdentifierExpression","makeNativeTypeDeclaration","identifier","createTypeDeclaration","createOmittedType","makeNativeFunctionDeclaration","createFunctionDeclaration","createSignature","createType","createSimpleTypeName","makeNativeNamespaceDeclaration","createNamespaceDeclaration","makeNativeFunction","signature","parent","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","declaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","EXPORT","GENERIC","BUILTIN","hasFeature","registerConstantInteger","i64_new","isWasm64","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","k","file","statements","j","statement","kind","NodeKind","initializeExports","IMPORT","initializeImports","VARIABLE","initializeVariables","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","FUNCTIONDECLARATION","initializeFunction","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","next","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","element","lookupForeign","Module_0_has_no_exported_member_1","localName","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","registerNativeTypeClass","thisPrototype","extendsNode","baseElement","resolveTypeName","CLASS_PROTOTYPE","basePrototype","hasDecorator","SEALED","Class_0_is_sealed_and_cannot_be_extended","identifierNode","UNMANAGED","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Range","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","alias","Error","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","parameterTypes","signatureReference","returnType","byteSize","_l","values","_m","isEntry","_o","_p","markModuleExport","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FUNCTION","FIELD","CLASS","members","_e","_f","type","setType","typeKind","className","classElement","is","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","elements","foreignName","lookupExport","fileQueuedExports","checkDecorators","decorators","acceptedFlags","decorator","flag","decoratorKindToFlag","decoratorNameToKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","GLOBAL","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","extendsType","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeProperty","initializeMethod","INDEXSIGNATUREDECLARATION","STATIC","INTERFACE_PROTOTYPE","READONLY","INLINE","LAZY","ABSTRACT","FieldPrototype","addInstance","isStatic","CONSTRUCTOR","checkOperatorOverloads","classPrototype","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","internalPath","queued","endsWith","path","exportedName","Export_declaration_conflicts_with_exported_declaration_of_0","declarations","initializeImport","namespaceName","validDecorators","AMBIENT","EXTERNAL","INSTANCE","FILE","START","Module_cannot_have_multiple_start_functions","findDecorator","InterfacePrototype","Namespace","DECLARE","Element","program","shadowType","current","originalDeclaration","actual","isBound","TypedElement","apply","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","typeParameters","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","initializer","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Parameter","Local","index","LOCAL","instances","boundPrototypes","body","arrowKind","toBound","classInstance","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","parameterIndex","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","_isInterface","constructorPrototype","extends","basePtototype","Class","typeArguments","base","INTERFACE","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","numTypeArguments","isAssignableTo","target","lookupOverload","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","Interface","older","newer","copyMembers","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","NativeType","ExpressionId","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","HostOp","_BinaryenCurrentMemory","_BinaryenGrowMemory","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","MemorySegment","buffer","offset","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createV128","bytes","store","_BinaryenLiteralVec128","createUnary","op","expr","_BinaryenUnary","createBinary","left","right","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","signed","ptr","align","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","expression","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","createMemoryCopy","size","_BinaryenMemoryCopy","createMemoryFill","_BinaryenMemoryFill","createSIMDExtract","vec","idx","_BinaryenSIMDExtract","createSIMDReplace","_BinaryenSIMDReplace","createSIMDShuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","createSIMDBitselect","cond","_BinaryenSIMDBitselect","createSIMDShift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","externalName","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","globalName","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getGetLocalIndex","getSetLocalIndex","_BinaryenSetLocalGetIndex","getSetLocalValue","_BinaryenSetLocalGetValue","isTeeLocal","_BinaryenSetLocalIsTee","getGetGlobalName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","getCallTarget","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Return","Break","Block","numChildren","tokenizer_1","Token","nodeIsConstantValue","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","createTypeName","TypeName","isNullable","TypeNode","createTypeParameter","defaultType","elem","TypeParameterNode","createParameter","ParameterNode","parameterKind","parameters","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","createComment","node","CommentNode","commentKind","isQuoted","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","toType","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","createVariableStatement","VariableStatement","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","TYPENAME","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","SIGNATURE","nameStr","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","BINARY","numArguments","COMMA","FLOAT","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","SOURCE","tokenizer","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","DeclarationStatement","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FOR","ArrowKind","clone","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","isTypeOmitted","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveType","context","reportMode","REPORT","parameterNodes","parameterNode","REST","parameterTypeNode","Type_expected","returnTypeNode","typeNode","typeArgumentNodes","possiblyPlaceholder","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","Expected_0_type_arguments_but_got_1","typeArgument","resolveTypeArguments","Cannot_find_name_0","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveIdentifier","ensureResolvedLazyGlobal","resolvePropertyAccessExpression","propertyAccess","contextualType","targetExpression","resolveExpression","propertyName","indexedGet","Index_signature_is_missing_in_type_0","resolveElementAccessExpression","elementAccess","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","actualFunction","resolveLiteralExpression","resolveCallExpression","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","builtins_1","Options","WASM32","importMemory","sharedMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","CompilerSymbols","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","BuiltinSymbols","HEAP_BASE","files","compileFile","compileExports","funcRef","ensureFunctionType","i64_align","isSharedMemory","i64_shr_u","makeModuleExports","compileIterateRoots","members_1","members_1_1","makeModuleExport","prefix","instanceName","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","nativeType","nativeSizeType","getterName","setterName","subPrefix","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","numLocals","initExpr","initializerNode","resolvedType","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","canOverflow","started","unshift","EqzI32","thisLocalIndex","EqzI64","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","An_implementation_cannot_be_declared_in_ambient_contexts","decoratorNodes","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","Nop","isLastStatementInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","inherit","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","continueLabel","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","pushBreakLabel","condExpr","makeIsTrueish","popBreakLabel","terminated","unset","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","inheritConditional","breakBlock","repeatBlock","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","inheritMutual","inlineReturnLabel","numCases","tempLocal","getTempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","EqI32","freeTempLocal","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","numDeclarations","initializers","isInlined","parentFunction","scopedLocals","_const_declarations_must_be_initialized","addScopedLocal","compileAssignmentWithValue","setLocalWrapped","compileInlineConstant","retainType","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","fromType","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","NeF32","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","NeF64","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","NeI64","WrapI64","ExtendI32","ExtendU32","PREFIX","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","LtI32","LtI64","LtU32","LtU64","LtF32","LtF64","GtI32","GtI64","GtU32","GtU64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","EqF32","EqF64","AllTrueVecI8x16","EqVecI8x16","NeI32","AnyTrueVecI8x16","NeVecI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI32","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","intType","ShlI32","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI32","ShrI64","ShrU32","ShrU64","AndI32","AndI64","OrI32","OrI64","XorI32","XorI64","getAndFreeTempLocal","compileUnaryOverload","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueWithCorrectType","tee","thisExpression","thisExpr","flow_2","nativeReturnType","thisExpr_1","elementExpr","tempLocalTarget","tempLocalElement","flow_3","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","compileCallInlinePrechecked","pop","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","createInline","baseInstance","addScopedAlias","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","numOperands","isCallImport","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","retainConstantType","flow_4","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","ensureStaticArray","elementType","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","buffer_offset","length_offset","isConst","compiledValues","constantValues","nativeElementType","arrayType","nativeArrayType","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseCtor","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","compileGetter","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","calcValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","allocateInstance","nativeFieldType","FlowFlags","wrappedLocals","wrappedLocalsExt","inlineFunction","branch","slice","wrapped","temps","scopedLocal","existingLocal","SCOPED","scopedAlias","scope","isLocalWrapped","bitsetIs","ext","bitsetSet","id","stack","other","i64_and","leftExt","rightExt","thisExt","minLength","min","canConversionOverflow","SetLocal","global_1","ClzI32","CtzI32","PopcntI32","MIN_VALUE","last","If","Select","Call","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","Loop","Switch","CallIndirect","SetGlobal","Store","i64_to_string","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","ExportsWalker","includePrivate","todo","seen","Set","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","isInterface","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","Float64Array","Uint32Array","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","abs","floor","trunc","round","sqrt","y","sign","isTrueish","radix","parseInt","undefined","fromCodePoint","Number","isInteger","isArray","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","Float32Array","Int32Array","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","isAsm","evaluateConstantType","isFloat","isSigned","isReference","isString","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","SWALLOW","isConstant","sizeof","checkTypeRequired","alignof","alignLog2","ctz","checkArgsOptional","typeArgumentsRange","Type_0_has_no_property_1","popcnt","checkTypeOptional","rotl","rotr","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","tempLocal0","copysign","nearest","reinterpret","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","Add","Sub","And","Or","Xor","Xchg","atomic_cmpxchg","atomic_wait","atomic_notify","select","unreachable","memory_size","memory_grow","memory_copy","memory_fill","alreadyUnchecked","call_indirect","arg0Type","operandExprs","nativeParamTypes","operandType","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatVecI8x16","SplatVecI16x8","SplatVecI32x4","SplatVecI64x2","SplatVecF32x4","SplatVecF64x2","v128_extract_lane","ExtractLaneSVecI8x16","ExtractLaneUVecI8x16","ExtractLaneSVecI16x8","ExtractLaneUVecI16x8","ExtractLaneVecI32x4","ExtractLaneVecI64x2","ExtractLaneVecF32x4","ExtractLaneVecF64x2","maxIdx","v128_replace_lane","ReplaceLaneVecI8x16","ReplaceLaneVecI16x8","ReplaceLaneVecI32x4","ReplaceLaneVecI64x2","ReplaceLaneVecF32x4","ReplaceLaneVecF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","v128_sub","v128_mul","v128_div","v128_add_saturate","v128_sub_saturate","v128_min","v128_max","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","AddVecI8x16","AddVecI16x8","AddVecI32x4","AddVecI64x2","AddVecF32x4","AddVecF64x2","SubVecI8x16","SubVecI16x8","SubVecI32x4","SubVecI64x2","SubVecF32x4","SubVecF64x2","MulVecI8x16","MulVecI16x8","MulVecI32x4","MulVecF32x4","MulVecF64x2","DivVecF32x4","DivVecF64x2","AddSatSVecI8x16","AddSatUVecI8x16","AddSatSVecI16x8","AddSatUVecI16x8","SubSatSVecI8x16","SubSatUVecI8x16","SubSatSVecI16x8","SubSatUVecI16x8","MinVecF32x4","MinVecF64x2","MaxVecF32x4","MaxVecF64x2","EqVecI16x8","EqVecI32x4","EqVecF32x4","EqVecF64x2","NeVecI16x8","NeVecI32x4","NeVecF32x4","NeVecF64x2","LtSVecI8x16","LtUVecI8x16","LtSVecI16x8","LtUVecI16x8","LtSVecI32x4","LtUVecI32x4","LtVecF32x4","LtVecF64x2","LeSVecI8x16","LeUVecI8x16","LeSVecI16x8","LeUVecI16x8","LeSVecI32x4","LeUVecI32x4","LeVecF32x4","LeVecF64x2","GtSVecI8x16","GtUVecI8x16","GtSVecI16x8","GtUVecI16x8","GtSVecI32x4","GtUVecI32x4","GtVecF32x4","GtVecF64x2","GeSVecI8x16","GeUVecI8x16","GeSVecI16x8","GeUVecI16x8","GeSVecI32x4","GeUVecI32x4","GeVecF32x4","GeVecF64x2","v128_neg","v128_abs","v128_sqrt","v128_convert","v128_trunc","NegVecI8x16","NegVecI16x8","NegVecI32x4","NegVecI64x2","NegVecF32x4","NegVecF64x2","AbsVecF32x4","AbsVecF64x2","SqrtVecF32x4","SqrtVecF64x2","ConvertSVecI32x4ToVecF32x4","ConvertUVecI32x4ToVecF32x4","ConvertSVecI64x2ToVecF64x2","ConvertUVecI64x2ToVecF64x2","TruncSatSVecF32x4ToVecI32x4","TruncSatUVecF32x4ToVecI32x4","TruncSatSVecF64x2ToVecI64x2","TruncSatUVecF64x2ToVecI64x2","v128_shl","v128_shr","ShlVecI8x16","ShlVecI16x8","ShlVecI32x4","ShlVecI64x2","ShrSVecI8x16","ShrUVecI8x16","ShrSVecI16x8","ShrUVecI16x8","ShrSVecI32x4","ShrUVecI32x4","ShrSVecI64x2","ShrUVecI64x2","v128_and","v128_or","v128_xor","AndVec128","OrVec128","XorVec128","v128_not","NotVec128","v128_bitselect","v128_any_true","v128_all_true","AnyTrueVecI16x8","AnyTrueVecI32x4","AnyTrueVecI64x2","AllTrueVecI16x8","AllTrueVecI32x4","AllTrueVecI64x2","iterateRoots","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","i32_notify","i64_notify","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_s_f32x4_sat","i32x4_trunc_u_f32x4_sat","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_s_f64x2_sat","i64x2_trunc_u_f64x2_sat","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_s_i32x4","f32x4_convert_u_i32x4","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_s_i64x2","f64x2_convert_u_i64x2","v8x16_shuffle","tryDeferASM","messageArg","filenameArg","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","existingIndex","isDeclaredInLibrary","gcPrototype","gcInstance","nativeSizeSize","funcName","map","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,EAAAG,QAAA,aACA,mBAAAC,eAAAC,IACAD,OAAA,aAAAJ,GACA,iBAAAC,QACAA,QAAA,eAAAD,EAAAG,QAAA,aAEAJ,EAAA,eAAAC,EAAAD,EAAA,UARA,CASC,oBAAAO,UAAAC,KAAA,SAAAC,GACD,mBCTA,IAAAC,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAV,QAGA,IAAAC,EAAAO,EAAAE,GAAA,CACAC,EAAAD,EACAE,GAAA,EACAZ,QAAA,IAUA,OANAa,EAAAH,GAAAI,KAAAb,EAAAD,QAAAC,IAAAD,QAAAS,GAGAR,EAAAW,GAAA,EAGAX,EAAAD,QA0DA,OArDAS,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAjB,EAAAkB,EAAAC,GACAV,EAAAW,EAAApB,EAAAkB,IACAG,OAAAC,eAAAtB,EAAAkB,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAzB,GACA,oBAAA0B,eAAAC,aACAN,OAAAC,eAAAtB,EAAA0B,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAtB,EAAA,cAAiD4B,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAnC,GACA,IAAAkB,EAAAlB,KAAA8B,WACA,WAA2B,OAAA9B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAQ,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,oFC5EA,SAAYC,GAEVA,IAAA,eAKAA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,cAEAA,IAAA,oBAEAA,IAAA,wBAEAA,IAAA,yBAEAA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,4BAEAA,IAAA,gBAEAA,IAAA,gBAEAA,IAAA,gDAKAA,IAAA,yBAEAA,IAAA,yBAEAA,IAAA,yCAEAA,IAAA,4BAEAA,IAAA,kCAEAA,IAAA,sCAEAA,IAAA,uCAKAA,IAAA,6BAEAA,IAAA,6BAEAA,IAAA,2BAEAA,IAAA,0BAEAA,IAAA,kCAEAA,IAAA,4BAEAA,IAAA,uBAIAA,IAAA,2BAvEF,CAAY3C,EAAA2C,cAAA3C,EAAA2C,YAAW,KA2EV3C,EAAA4C,eAAiB,IAEjB5C,EAAA6C,aAAe,KAEf7C,EAAA8C,cAAgB,OAEhB9C,EAAA+C,cAAgB,OAEhB/C,EAAAgD,mBAAqB,IAErBhD,EAAAiD,iBAAmB,IAEnBjD,EAAAkD,gBAAkB,IAElBlD,EAAAmD,cAAgB,OAEhBnD,EAAAoD,eAAiBpD,EAAAmD,cAAgBnD,EAAA4C,eAEjC5C,EAAAqD,aAAerD,EAAA4C,eAAiB,QAG7C,SAAiBU,GAEFA,EAAAC,MAAQ,GAERD,EAAAE,GAAK,KACLF,EAAAG,IAAM,MACNH,EAAAI,IAAM,MACNJ,EAAAK,IAAM,MACNL,EAAAM,MAAQ,QACRN,EAAAO,GAAK,KACLP,EAAAQ,IAAM,MACNR,EAAAS,IAAM,MACNT,EAAAU,IAAM,MACNV,EAAAW,MAAQ,QACRX,EAAAY,KAAO,OACPZ,EAAAa,IAAM,MACNb,EAAAc,IAAM,MACNd,EAAAe,KAAO,OACPf,EAAAgB,MAAQ,QACRhB,EAAAiB,MAAQ,QACRjB,EAAAkB,MAAQ,QACRlB,EAAAmB,MAAQ,QACRnB,EAAAoB,MAAQ,QACRpB,EAAAqB,MAAQ,QACRrB,EAAAsB,MAAQ,QACRtB,EAAAuB,MAAQ,QACRvB,EAAAwB,MAAQ,QACRxB,EAAAyB,MAAQ,QACRzB,EAAA0B,MAAQ,OACR1B,EAAA2B,OAAS,SACT3B,EAAA4B,QAAU,UACV5B,EAAA6B,OAAS,SACT7B,EAAA8B,OAAS,SAET9B,EAAA+B,MAAQ,OACR/B,EAAAgC,MAAQ,OACRhC,EAAAiC,OAAS,QAETjC,EAAAkC,MAAQ,OACRlC,EAAAmC,OAAS,QACTnC,EAAAoC,YAAc,cAxC7B,CAAiB1F,EAAAsD,gBAAAtD,EAAAsD,cAAa,KA4C9B,SAAiBqC,GAEFA,EAAAC,WAAa,aACbD,EAAAE,mBAAqB,qBACrBF,EAAAG,cAAgB,gBAChBH,EAAAI,gBAAkB,kBAClBJ,EAAAK,mBAAqB,qBACrBL,EAAAM,iBAAmB,mBACnBN,EAAAO,2BAA6B,6BAC7BP,EAAAQ,2BAA6B,6BAC7BR,EAAAS,wBAA0B,0BAC1BT,EAAAU,iBAAmB,mBACnBV,EAAAW,oBAAsB,sBAEtBX,EAAAY,GAAK,KACLZ,EAAAa,IAAM,MACNb,EAAAc,IAAM,MACNd,EAAAe,IAAM,MACNf,EAAAgB,MAAQ,QACRhB,EAAAiB,GAAK,KACLjB,EAAAkB,IAAM,MACNlB,EAAAmB,IAAM,MACNnB,EAAAoB,IAAM,MACNpB,EAAAqB,MAAQ,QACRrB,EAAAsB,KAAO,OACPtB,EAAAuB,IAAM,MACNvB,EAAAwB,IAAM,MACNxB,EAAAyB,KAAO,OACPzB,EAAA0B,OAAS,SACT1B,EAAA2B,MAAQ,QACR3B,EAAA4B,YAAc,cACd5B,EAAA6B,KAAO,OACP7B,EAAA8B,MAAQ,QAER9B,EAAA+B,OAAS,SACT/B,EAAAgC,SAAW,WACXhC,EAAAiC,MAAQ,QACRjC,EAAAkC,KAAO,OAEPlC,EAAAmC,OAAS,SACTnC,EAAAoC,WAAa,aACbpC,EAAAqC,IAAM,MACNrC,EAAAsC,IAAM,MA1CrB,CAAiBjI,EAAA2F,iBAAA3F,EAAA2F,eAAc,kJC5I/BuC,EAAAzH,EAAA,KACAyH,EAAAzH,EAAA,KACAyH,EAAAzH,EAAA,KACAyH,EAAAzH,EAAA,KACAyH,EAAAzH,EAAA,KACAyH,EAAAzH,EAAA,KAGAT,EAAAmI,WAAA,SAA2BC,GACzB,OAAY,GAALA,GAA2B,IAAhBA,EAAKA,EAAI,mFCL7B,IAeYC,EAfZC,EAAA7H,EAAA,IAKA8H,EAAA9H,EAAA,GAIA+H,EAAA/H,EAAA,IAgBA,SAAgBgI,EAA2BC,GACzC,OAAQA,GACN,KAAKL,EAAmBM,KAAM,MAAO,OACrC,KAAKN,EAAmBO,QAAS,MAAO,UACxC,KAAKP,EAAmBQ,MAAO,MAAO,QACtC,QAEE,OADAC,QAAO,GACA,IAeb,SAAgBC,EAA0BL,GACxC,OAAQA,GACN,KAAKL,EAAmBM,KAAM,OAAO3I,EAAAgJ,WACrC,KAAKX,EAAmBO,QAAS,OAAO5I,EAAAiJ,aACxC,KAAKZ,EAAmBQ,MAAO,OAAO7I,EAAAkJ,UACtC,QAEE,OADAJ,QAAO,GACA,IA5CX9I,EAAAmJ,eAAAX,EAAAW,eACAnJ,EAAAoJ,uBAAAZ,EAAAY,uBAIF,SAAYf,GAEVA,IAAA,eAEAA,IAAA,qBAEAA,IAAA,iBANF,CAAYA,EAAArI,EAAAqI,qBAAArI,EAAAqI,mBAAkB,KAU9BrI,EAAAyI,6BAaazI,EAAAgJ,WAAqB,QAErBhJ,EAAAiJ,aAAuB,QAEvBjJ,EAAAkJ,UAAoB,QAEpBlJ,EAAAqJ,YAAsB,OAGnCrJ,EAAA+I,4BAaA,IAAAO,EAAA,WAcE,SAAAA,EAAoBC,EAAWb,EAA8Bc,GAL7DlJ,KAAAmJ,MAAsB,KAEtBnJ,KAAAoJ,aAA6B,KAI3BpJ,KAAKiJ,KAAOA,EACZjJ,KAAKoI,SAAWA,EAChBpI,KAAKkJ,QAAUA,EAkFnB,OA9ESF,EAAArH,OAAP,SACEsH,EACAb,EACAiB,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIL,EAAUlB,EAAAc,uBAAuBG,GAIrC,OAHY,MAARI,IAAcH,EAAUA,EAAQM,QAAQ,MAAOH,IACvC,MAARC,IAAcJ,EAAUA,EAAQM,QAAQ,MAAOF,IACvC,MAARC,IAAcL,EAAUA,EAAQM,QAAQ,MAAOD,IAC5C,IAAIP,EAAkBC,EAAMb,EAAUc,IAIxCF,EAAAS,WAAP,SACER,EACAI,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEON,EAAkBrH,OAAOsH,EAAMlB,EAAmBM,KAAMgB,EAAMC,IAIhEN,EAAAU,cAAP,SACET,EACAI,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEON,EAAkBrH,OAAOsH,EAAMlB,EAAmBO,QAASe,EAAMC,IAInEN,EAAAW,YAAP,SACEV,EACAI,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEON,EAAkBrH,OAAOsH,EAAMlB,EAAmBQ,MAAOc,EAAMC,IAIxEN,EAAA/G,UAAA2H,UAAA,SAAUT,GAER,OADAnJ,KAAKmJ,MAAQA,EACNnJ,MAITgJ,EAAA/G,UAAA4H,iBAAA,SAAiBV,GAEf,OADAnJ,KAAKoJ,aAAeD,EACbnJ,MAITgJ,EAAA/G,UAAA6H,SAAA,WACE,OAAI9J,KAAKmJ,MAELhB,EAA2BnI,KAAKoI,UAChC,IACApI,KAAKiJ,KAAKa,SAAS,IACnB,MACA9J,KAAKkJ,QACL,QACAlJ,KAAKmJ,MAAMY,OAAOC,eAClB,IACAhK,KAAKmJ,MAAMc,KAAKH,SAAS,IACzB,IACA9J,KAAKmJ,MAAMe,OAAOJ,SAAS,IAI7B3B,EAA2BnI,KAAKoI,UAChC,IACApI,KAAKiJ,KAAKa,SAAS,IACnB,KACA9J,KAAKkJ,SAGXF,EAnGA,GA4JA,SAAgBmB,EAAwBhB,EAAciB,QAAA,IAAAA,OAAA,GAKpD,IAJA,IAAIC,EAAOlB,EAAMY,OAAOM,KACpBC,EAAMD,EAAK7C,OACX+C,EAAQpB,EAAMoB,MACdC,EAAMrB,EAAMqB,IACTD,EAAQ,IAAMtC,EAAAwC,YAAYJ,EAAKK,WAAWH,EAAQ,KAAKA,IAC9D,KAAOC,EAAMF,IAAQrC,EAAAwC,YAAYJ,EAAKK,WAAWF,KAAOA,IAMxD,IALA,IAAIG,EAAe,CACjB,MACAN,EAAKO,UAAUL,EAAOC,GACtB,OAEKD,EAAQpB,EAAMoB,OACnBI,EAAGE,KAAK,KACRN,IAGF,GADIH,GAAWO,EAAGE,KAAKnL,EAAAkJ,WACnBO,EAAMoB,OAASpB,EAAMqB,IACvBG,EAAGE,KAAK,UAER,KAAON,IAAUpB,EAAMqB,KAAKG,EAAGE,KAAK,KAGtC,OADIT,GAAWO,EAAGE,KAAKnL,EAAAqJ,aAChB4B,EAAGG,KAAK,IAnLJpL,EAAAsJ,oBAsGbtJ,EAAAqL,wBAAA,SACE7B,EACAkB,EACAY,QADA,IAAAZ,OAAA,QACA,IAAAY,OAAA,GAIA,IAAIL,EAAe,GAUnB,GATIP,GAAWO,EAAGE,KAAKpC,EAA0BS,EAAQd,WACzDuC,EAAGE,KAAK1C,EAA2Be,EAAQd,WACvCgC,GAAWO,EAAGE,KAAKnL,EAAAqJ,aACvB4B,EAAGE,KAAK3B,EAAQD,KAAO,IAAO,MAAQ,OACtC0B,EAAGE,KAAK3B,EAAQD,KAAKa,SAAS,KAC9Ba,EAAGE,KAAK,MACRF,EAAGE,KAAK3B,EAAQA,SAGZA,EAAQC,MAAO,CAGjB,IAAIA,EAAQD,EAAQC,MAChB6B,IACFL,EAAGE,KAAK,MACRF,EAAGE,KAAKV,EAAwBhB,EAAOiB,KAEzCO,EAAGE,KAAK,MACRF,EAAGE,KAAK,QACRF,EAAGE,KAAK1B,EAAMY,OAAOC,gBACrBW,EAAGE,KAAK,KACRF,EAAGE,KAAK1B,EAAMc,KAAKH,SAAS,KAC5Ba,EAAGE,KAAK,KACRF,EAAGE,KAAK1B,EAAMe,OAAOJ,SAAS,KAC9Ba,EAAGE,KAAK,KAER,IAAIzB,EAAeF,EAAQE,aACvBA,IACE4B,IACFL,EAAGE,KAAK,MACRF,EAAGE,KAAKV,EAAwBf,EAAcgB,KAEhDO,EAAGE,KAAK,MACRF,EAAGE,KAAK,QACRF,EAAGE,KAAK1B,EAAMY,OAAOC,gBACrBW,EAAGE,KAAK,KACRF,EAAGE,KAAK1B,EAAMc,KAAKH,SAAS,KAC5Ba,EAAGE,KAAK,KACRF,EAAGE,KAAK1B,EAAMe,OAAOJ,SAAS,KAC9Ba,EAAGE,KAAK,MAGZ,OAAOF,EAAGG,KAAK,KAIjBpL,EAAAyK,0BA2BA,IAAAc,EAAA,WAME,SAAAA,EAAsBC,QAAA,IAAAA,MAAA,MACpBlL,KAAKkL,YAAcA,GAAiD,IAAIlE,MAwF5E,OApFEiE,EAAAhJ,UAAAkJ,eAAA,SACElC,EACAb,EACAe,EACAC,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIL,EAAUF,EAAkBrH,OAAOsH,EAAMb,EAAUiB,EAAMC,EAAMC,GAAMK,UAAUT,GAC/EC,IAAcF,EAAQE,aAAeA,GACzCpJ,KAAKkL,YAAYL,KAAK3B,IAMxB+B,EAAAhJ,UAAAmJ,KAAA,SACEnC,EACAE,EACAE,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAvJ,KAAKmL,eAAelC,EAAMlB,EAAmBM,KAAMc,EAAO,KAAME,EAAMC,EAAMC,IAI9E0B,EAAAhJ,UAAAoJ,YAAA,SACEpC,EACAE,EACAC,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAvJ,KAAKmL,eAAelC,EAAMlB,EAAmBM,KAAMc,EAAOC,EAAcC,EAAMC,EAAMC,IAItF0B,EAAAhJ,UAAAqJ,QAAA,SACErC,EACAE,EACAE,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAvJ,KAAKmL,eAAelC,EAAMlB,EAAmBO,QAASa,EAAO,KAAME,EAAMC,EAAMC,IAIjF0B,EAAAhJ,UAAAsJ,eAAA,SACEtC,EACAE,EACAC,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAvJ,KAAKmL,eAAelC,EAAMlB,EAAmBO,QAASa,EAAOC,EAAcC,EAAMC,EAAMC,IAIzF0B,EAAAhJ,UAAAuJ,MAAA,SACEvC,EACAE,EACAE,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAvJ,KAAKmL,eAAelC,EAAMlB,EAAmBQ,MAAOY,EAAO,KAAME,EAAMC,EAAMC,IAI/E0B,EAAAhJ,UAAAwJ,aAAA,SACExC,EACAE,EACAC,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAvJ,KAAKmL,eAAelC,EAAMlB,EAAmBQ,MAAOY,EAAOC,EAAcC,EAAMC,EAAMC,IAEzF0B,EA/FA,GAAsBvL,EAAAuL,85BCxPtB,IAwIYS,EAxIZC,EAAAxL,EAAA,GAmBAyL,EAAAzL,EAAA,GAMA0L,EAAA1L,EAAA,GAOA2L,EAAA3L,EAAA,GAoDA4L,EAAA5L,EAAA,GAIA6L,EAAA7L,EAAA,IAKA8L,EAAA,WAaA,OAZE,SAESC,EAEAC,EAEAC,EAEAC,EAEAC,GARAtM,KAAAkM,YAEAlM,KAAAmM,kBAEAnM,KAAAoM,oBAEApM,KAAAqM,cAEArM,KAAAsM,kBAXX,GAgBAC,EAAA,WAWA,OAVE,SAESJ,EAEAC,EAEAC,EAEAC,GANAtM,KAAAmM,kBAEAnM,KAAAoM,oBAEApM,KAAAqM,cAEArM,KAAAsM,kBATX,GAcAE,EAAA,WAUA,OARE,SAESH,EAEAC,EAEAG,GAJAzM,KAAAqM,cAEArM,KAAAsM,iBAEAtM,KAAAyM,eARX,GA6DA,SAASC,EAA0BC,EAA8BC,GAE/D,OADApE,OAAOoE,EAAIpF,QACHmF,GACN,KAAKb,EAAAe,cAAcC,SACnB,KAAKhB,EAAAe,cAAcE,gBACjB,OAAQH,EAAIlC,WAAW,IACrB,QACE,GAAW,MAAPkC,EAAa,OAAOlB,EAAasB,YACrC,GAAW,OAAPJ,EAAc,OAAOlB,EAAauB,YACtC,MAEF,SACE,GAAW,MAAPL,EAAa,OAAOlB,EAAawB,sBACrC,GAAW,OAAPN,EAAc,OAAOlB,EAAayB,sBACtC,MAEF,QACE,GAAW,KAAPP,EAAY,OAAOlB,EAAa0B,IACpC,MAEF,QACE,GAAW,KAAPR,EAAY,OAAOlB,EAAa2B,IACpC,MAEF,QACE,GAAW,KAAPT,EAAY,OAAOlB,EAAa4B,IACpC,GAAW,MAAPV,EAAa,OAAOlB,EAAa6B,IACrC,MAEF,QACE,GAAW,KAAPX,EAAY,OAAOlB,EAAa8B,IACpC,MAEF,QACE,GAAW,KAAPZ,EAAY,OAAOlB,EAAa+B,IACpC,MAEF,QACE,GAAW,KAAPb,EAAY,OAAOlB,EAAagC,YACpC,MAEF,SACE,GAAW,KAAPd,EAAY,OAAOlB,EAAaiC,WACpC,MAEF,QACE,GAAW,KAAPf,EAAY,OAAOlB,EAAakC,YACpC,MAEF,QACE,GAAW,MAAPhB,EAAa,OAAOlB,EAAamC,GACrC,MAEF,QACE,GAAW,MAAPjB,EAAa,OAAOlB,EAAaoC,GACrC,MAEF,QACE,GAAW,KAAPlB,EAAY,OAAOlB,EAAaqC,GACpC,GAAW,MAAPnB,EAAa,OAAOlB,EAAasC,GACrC,GAAW,MAAPpB,EAAa,OAAOlB,EAAauC,YACrC,GAAW,OAAPrB,EAAc,OAAOlB,EAAawC,cACtC,MAEF,QACE,GAAW,KAAPtB,EAAY,OAAOlB,EAAayC,GACpC,GAAW,MAAPvB,EAAa,OAAOlB,EAAa0C,GACrC,GAAW,MAAPxB,EAAa,OAAOlB,EAAa2C,YAIzC,MAEF,KAAKvC,EAAAe,cAAcyB,gBACjB,OAAQ1B,EAAIlC,WAAW,IACrB,QACE,GAAW,KAAPkC,EAAY,OAAOlB,EAAa6C,KACpC,GAAW,MAAP3B,EAAa,OAAOlB,EAAa8C,WACrC,MAEF,QACE,GAAW,KAAP5B,EAAY,OAAOlB,EAAa+C,MACpC,GAAW,MAAP7B,EAAa,OAAOlB,EAAagD,WACrC,MAEF,QACE,GAAW,KAAP9B,EAAY,OAAOlB,EAAaiD,IACpC,MAEF,SACE,GAAW,KAAP/B,EAAY,OAAOlB,EAAakD,YAIxC,MAEF,KAAK9C,EAAAe,cAAcgC,iBACjB,OAAQjC,EAAIlC,WAAW,IACrB,QACE,GAAW,MAAPkC,EAAa,OAAOlB,EAAaoD,YACrC,MAEF,QACE,GAAW,MAAPlC,EAAa,OAAOlB,EAAaqD,aAO7C,OAAOrD,EAAasD,SA9JtB,SAAYtD,GACVA,IAAA,qBAGAA,IAAA,6BACAA,IAAA,6BACAA,IAAA,iDACAA,IAAA,iDAGAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,kCACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAGAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,4BACAA,IAAA,4BAGAA,IAAA,8BACAA,IAAA,8BAvCF,CAAYA,EAAAhM,EAAAgM,eAAAhM,EAAAgM,aAAY,KAkKxB,IAs3CYuD,EAwCAC,EA95CZC,EAAA,SAAAC,GA2DE,SAAAD,EAEEjE,QAAA,IAAAA,MAAA,MAFF,IAAAmE,EAIED,EAAA5O,KAAAR,KAAMkL,IAAYlL,KA1DpBqP,EAAAC,QAAoB,GAEpBD,EAAAE,kBAAyB,EAQzBF,EAAAG,sBAAkD,KAKlDH,EAAAI,YAAgC,IAAIC,IAEpCL,EAAAM,eAAsC,IAAID,IAE1CL,EAAAO,sBAAmE,IAAIF,IAEvEL,EAAAQ,gBAAuC,IAAIH,IAE3CL,EAAAS,YAAmC,IAAIJ,IAKvCL,EAAAU,oBAAoC,KAEpCV,EAAAW,eAAwC,KAExCX,EAAAY,eAA+B,KAE/BZ,EAAAa,cAAiC,KAEjCb,EAAAc,uBAA0C,KAK1Cd,EAAAe,OAAc,EAEdf,EAAAgB,mBAAsC,KAEtChB,EAAAiB,eAAkC,KAElCjB,EAAAkB,eAAkC,KAElClB,EAAAmB,aAAoB,EAEpBnB,EAAAoB,aAAoB,EAgDZpB,EAAAqB,qBAA6C,KAxCnD,IAAIC,EAAe,IAAI7E,EAAA8E,OAAOjF,EAAA9I,cAAe,gBAAiBiJ,EAAA+E,WAAWC,SACzEzB,EAAKsB,aAAeA,EACpB,IAAII,EAAa,IAAIC,EAAK3B,EAAMsB,UAChCtB,EAAK0B,WAAaA,EAClB1B,EAAKI,YAAYwB,IAAIF,EAAWG,aAAcH,GAC9C1B,EAAK8B,SAAW,IAAIpF,EAAAqF,SAAS/B,KA8yCjC,OAn3C6BgC,EAAAlC,EAAAC,GAyE3BD,EAAAlN,UAAAqP,8BAAA,SAEE1Q,EAEA2Q,QAAA,IAAAA,MAAqB5F,EAAAtJ,YAAYmP,MAEjC,IAAIrI,EAAQnJ,KAAK2Q,aAAaxH,MAC9B,OAAO2C,EAAA2F,KAAKC,0BACV5F,EAAA2F,KAAKE,2BAA2B/Q,EAAMuI,GACtC,KAAM,KAAM,KAAMoI,EAAOpI,IAK7BgG,EAAAlN,UAAA2P,0BAAA,SAEEhR,EAEA2Q,QAAA,IAAAA,MAAqB5F,EAAAtJ,YAAYmP,MAEjC,IAAIrI,EAAQnJ,KAAK2Q,aAAaxH,MAC1B0I,EAAa/F,EAAA2F,KAAKE,2BAA2B/Q,EAAMuI,GACvD,OAAO2C,EAAA2F,KAAKK,sBACVD,EACA,KACA/F,EAAA2F,KAAKM,kBAAkB5I,GACvB,KAAMoI,EAAOpI,IAQjBgG,EAAAlN,UAAA+P,8BAAA,SAEEpR,EAEA2Q,QAAA,IAAAA,MAAqB5F,EAAAtJ,YAAYmP,MAEjC,IAAIrI,EAAQnJ,KAAK2Q,aAAaxH,MAC9B,OAAO2C,EAAA2F,KAAKQ,0BACVnG,EAAA2F,KAAKE,2BAA2B/Q,EAAMuI,GACtC,KACAnJ,KAAK0Q,uBAAyB1Q,KAAK0Q,qBAAuB5E,EAAA2F,KAAKS,gBAAgB,GAC7EpG,EAAA2F,KAAKU,WACHrG,EAAA2F,KAAKW,qBAAqBzG,EAAA3I,cAAc0B,MAAOyE,GAC/C,MAAM,EAAOA,GAEf,MAAM,EAAOA,IAEf,KAAM,KAAMoI,EAAK,EAAkBpI,IAKvCgG,EAAAlN,UAAAoQ,+BAAA,SAEEzR,EAEA2Q,QAAA,IAAAA,MAAqB5F,EAAAtJ,YAAYmP,MAEjC,IAAIrI,EAAQnJ,KAAK2Q,aAAaxH,MAC9B,OAAO2C,EAAA2F,KAAKa,2BACVxG,EAAA2F,KAAKE,2BAA2B/Q,EAAMuI,GACtC,GAAI,KAAMoI,EAAOpI,IAKrBgG,EAAAlN,UAAAsQ,mBAAA,SAEE3R,EAEA4R,EAEAC,EAEAlB,EAEAmB,GAEA,YANA,IAAAD,MAAkBzS,KAAK+Q,iBAEvB,IAAAQ,MAAqB5F,EAAAtJ,YAAYmP,WAEjC,IAAAkB,MAAiCxD,EAAesC,MAEzC,IAAImB,EACT/R,EACA,IAAIgS,EACFhS,EACA6R,EACAzS,KAAKgS,8BAA8BpR,EAAM2Q,GACzCmB,GAEFF,IAKJrD,EAAAlN,UAAA4Q,wBAAA,SAAwBC,GACtB,IAAIlD,EAAwB5P,KAAK4P,sBAEjC,OADApH,OAAOoH,EAAsBmD,IAAID,IAC1BlD,EAAsB1O,IAAI4R,IAInC3D,EAAAlN,UAAA+Q,WAAA,SAAWC,+BACTjT,KAAKiT,QAAUA,EAGfjT,KAAKkT,mBAAmBvH,EAAA3I,cAAcE,GAAI2I,EAAAsH,KAAKjQ,IAC/ClD,KAAKkT,mBAAmBvH,EAAA3I,cAAcG,IAAK0I,EAAAsH,KAAKhQ,KAChDnD,KAAKkT,mBAAmBvH,EAAA3I,cAAcI,IAAKyI,EAAAsH,KAAK/P,KAChDpD,KAAKkT,mBAAmBvH,EAAA3I,cAAcK,IAAKwI,EAAAsH,KAAK9P,KAChDrD,KAAKkT,mBAAmBvH,EAAA3I,cAAcM,MAAO2P,EAAQG,WACrDpT,KAAKkT,mBAAmBvH,EAAA3I,cAAcO,GAAIsI,EAAAsH,KAAK5P,IAC/CvD,KAAKkT,mBAAmBvH,EAAA3I,cAAcQ,IAAKqI,EAAAsH,KAAK3P,KAChDxD,KAAKkT,mBAAmBvH,EAAA3I,cAAcS,IAAKoI,EAAAsH,KAAK1P,KAChDzD,KAAKkT,mBAAmBvH,EAAA3I,cAAcU,IAAKmI,EAAAsH,KAAKzP,KAChD1D,KAAKkT,mBAAmBvH,EAAA3I,cAAcW,MAAOsP,EAAQI,WACrDrT,KAAKkT,mBAAmBvH,EAAA3I,cAAcY,KAAMiI,EAAAsH,KAAKvP,MACjD5D,KAAKkT,mBAAmBvH,EAAA3I,cAAca,IAAKgI,EAAAsH,KAAKtP,KAChD7D,KAAKkT,mBAAmBvH,EAAA3I,cAAcc,IAAK+H,EAAAsH,KAAKrP,KAChD9D,KAAKkT,mBAAmBvH,EAAA3I,cAAc0B,MAAOmH,EAAAsH,KAAKG,MAClDtT,KAAKkT,mBAAmBvH,EAAA3I,cAAc2B,OAAQkH,EAAAsH,KAAKrP,KACnD9D,KAAKkT,mBAAmBvH,EAAA3I,cAAc4B,QAASiH,EAAAsH,KAAKvP,MACpD5D,KAAK+Q,WAAWwC,IAAI5H,EAAA3I,cAAc8B,OAAQ,IAAI0O,EAC5C7H,EAAA3I,cAAc8B,OACd9E,KAAK+Q,WACL/Q,KAAK4R,0BAA0BjG,EAAA3I,cAAc8B,OAAQ6G,EAAAtJ,YAAYoR,OAAS9H,EAAAtJ,YAAYqR,SACtFxE,EAAeyE,UAEbV,EAAQW,WAAU,IAAgB5T,KAAKkT,mBAAmBvH,EAAA3I,cAAce,KAAM8H,EAAAsH,KAAKpP,MAGvF/D,KAAK6T,wBAAwBlI,EAAAtG,eAAeC,WAAYuG,EAAAsH,KAAK/P,IAC3D0Q,QAAQb,EAAQc,SAAW,EAAI,IACjC/T,KAAK6T,wBAAwBlI,EAAAtG,eAAeG,cAAeqG,EAAAsH,KAAKvP,KAC9DkQ,QAAQb,EAAQe,SAAW,EAAI,EAAG,IACpChU,KAAK6T,wBAAwBlI,EAAAtG,eAAeI,gBAAiBoG,EAAAsH,KAAK/P,IAChE0Q,QAAQb,EAAQgB,WAAY,IAC9BjU,KAAK6T,wBAAwBlI,EAAAtG,eAAeK,mBAAoBmG,EAAAsH,KAAK/P,IACnE0Q,QAAQb,EAAQiB,kBAAmB,IACrClU,KAAK6T,wBAAwBlI,EAAAtG,eAAeM,iBAAkBkG,EAAAsH,KAAK/P,IACjE0Q,QAAQb,EAAQkB,gBAAiB,IACnCnU,KAAK6T,wBAAwBlI,EAAAtG,eAAeO,2BAA4BiG,EAAAsH,KAAKvP,KAC3EkQ,QAAQb,EAAQW,WAAU,GAA2B,EAAI,EAAG,IAC9D5T,KAAK6T,wBAAwBlI,EAAAtG,eAAeQ,2BAA4BgG,EAAAsH,KAAKvP,KAC3EkQ,QAAQb,EAAQW,WAAU,GAA2B,EAAI,EAAG,IAC9D5T,KAAK6T,wBAAwBlI,EAAAtG,eAAeS,wBAAyB+F,EAAAsH,KAAKvP,KACxEkQ,QAAQb,EAAQW,WAAU,GAAwB,EAAI,EAAG,IAC3D5T,KAAK6T,wBAAwBlI,EAAAtG,eAAeU,iBAAkB8F,EAAAsH,KAAKvP,KACjEkQ,QAAQb,EAAQW,WAAU,GAAiB,EAAI,EAAG,IACpD5T,KAAK6T,wBAAwBlI,EAAAtG,eAAeW,oBAAqB6F,EAAAsH,KAAKvP,KACpEkQ,QAAQb,EAAQW,WAAU,IAAoB,EAAI,EAAG,IAUvD,IAPA,IAAIQ,EAAgB,IAAIpN,MACpBqN,EAAgB,IAAI3E,IACpB4E,EAAoB,IAAI5E,IACxB6E,EAAgB,IAAIvN,MACpBwN,EAAmB,IAAIxN,MAGlB3G,EAAI,EAAGoU,EAAIzU,KAAKsP,QAAQ9H,OAAQnH,EAAIoU,IAAKpU,EAAG,CACnD,IAAI0J,EAAS/J,KAAKsP,QAAQjP,GACtBqU,EAAO,IAAI1D,EAAKhR,KAAM+J,GAC1B/J,KAAKyP,YAAYwB,IAAIyD,EAAKxD,aAAcwD,GAExC,IADA,IAAIC,EAAa5K,EAAO4K,WACfC,EAAI,EAAGtU,EAAIqU,EAAWnN,OAAQoN,EAAItU,IAAKsU,EAAG,CACjD,IAAIC,EAAYF,EAAWC,GAC3B,OAAQC,EAAUC,MAChB,KAAKhJ,EAAAiJ,SAAStB,OACZzT,KAAKgV,kBAAmCH,EAAWH,EAAML,EAAeC,GACxE,MAEF,KAAKxI,EAAAiJ,SAASE,OACZjV,KAAKkV,kBAAmCL,EAAWH,EAAMN,EAAeC,GACxE,MAEF,KAAKvI,EAAAiJ,SAASI,SACZnV,KAAKoV,oBAAuCP,EAAWH,GACvD,MAEF,KAAK5I,EAAAiJ,SAASM,iBACZrV,KAAKsV,gBAAkCT,EAAWH,EAAMH,EAAeC,GACvE,MAEF,KAAK1I,EAAAiJ,SAASQ,gBACZvV,KAAKwV,eAAgCX,EAAWH,GAChD,MAEF,KAAK5I,EAAAiJ,SAASU,oBACZzV,KAAK0V,mBAAwCb,EAAWH,GACxD,MAEF,KAAK5I,EAAAiJ,SAASY,qBACZ3V,KAAK4V,oBAA0Cf,EAAWH,GAC1D,MAEF,KAAK5I,EAAAiJ,SAASc,qBACZ7V,KAAK8V,oBAA0CjB,EAAWH,EAAMH,EAAeC,GAC/E,MAEF,KAAK1I,EAAAiJ,SAASgB,gBACZ/V,KAAKgW,yBAA0CnB,EAAWH,SAQlE,IAAgC,IAAAuB,EAAAC,EAAA5B,GAAiB6B,EAAAF,EAAAG,QAAAD,EAAAE,KAAAF,EAAAF,EAAAG,OAAxC,KAAAE,EAAAC,EAAAJ,EAAA7U,MAAA,GAAOkV,GAAN9B,EAAA4B,EAAA,GAAMA,EAAA,IACd,IAASjW,EAAI,EAAGoU,EAAI+B,EAAYhP,OAAQnH,EAAIoU,IAAKpU,EAAG,CAClD,IAAIoW,EAAaD,EAAYnW,IACzBqW,EAAc1W,KAAK2W,kBAAkBF,EAAWpK,YAAaoK,EAAWnK,iBAQ5EoI,EAAKkC,iBAAiBF,GANpB1W,KAAKwL,MACHI,EAAA/C,eAAegO,iBACfJ,EAAWhK,YAAYtD,MAAOsN,EAAWhK,YAAYnL,0GAS7D,IAASjB,EAAI,EAAGoU,EAAIL,EAAc5M,OAAQnH,EAAIoU,IAAKpU,EAAG,CACpD,IAwBMqW,EAxBFI,EAAe1C,EAAc/T,GAC7B+L,EAAoB0K,EAAa1K,kBACrC,GAAIA,GACE2K,GAAU/W,KAAKgX,cACjB5K,EAAkB/B,KAClByM,EAAazK,YACbyK,EAAaxK,eACb+H,IAGAyC,EAAa5K,UAAUqH,IACrBuD,EAAa3K,gBAAgB9B,KAC7B0M,IACA,GAGF/W,KAAKwL,MACHI,EAAA/C,eAAeoO,kCACf7K,EAAkBjD,MAClB2N,EAAazK,YACbD,EAAkB/B,WAKtB,GADIqM,EAAc1W,KAAK2W,kBAAkBG,EAAazK,YAAayK,EAAaxK,gBAC/D,CACf,IAAIJ,EAAY4K,EAAa5K,UACzBgL,EAAYJ,EAAa3K,gBAAgB9B,KAC7C6B,EAAUqH,IACR2D,EACAR,EAAYS,oBACVD,EACAhL,IAEF,QAGF1D,QAAO,OAMb,IAA4B,IAAA4O,EAAAlB,EAAA7B,GAAagD,EAAAD,EAAAhB,QAAAiB,EAAAhB,KAAAgB,EAAAD,EAAAhB,OAAE,CAAlC,IAAAkB,EAAAf,EAAAc,EAAA/V,MAAA,GAAO5B,GAANgV,EAAA4C,EAAA,GAAMA,EAAA,QACd,IAAuC,IAAAC,EAAArB,EAAAxW,GAAO8X,EAAAD,EAAAnB,QAAAoB,EAAAnB,KAAAmB,EAAAD,EAAAnB,OAAE,CAAvC,IAAAqB,EAAAlB,EAAAiB,EAAAlW,MAAA,GAACoW,GAAAD,EAAA,GAAYE,GAAAF,EAAA,GAEhBpL,IADA6K,EAAYS,GAAaxL,gBAAgB9B,KAC3BsN,GAAatL,aAC/B,GAAIA,IACE0K,GAAU/W,KAAKgX,cACjBE,EACA7K,GACA7D,OAAOmP,GAAarL,gBACpB+H,IAGAK,EAAKkD,aAAaF,GAAYX,IAE9B/W,KAAKwL,MACHI,EAAA/C,eAAeoO,kCACfU,GAAaxL,gBAAgBhD,MAC7BkD,GAAa6K,QAKjB,GADIH,GAAUrC,EAAKmD,aAAaX,GAE9BxC,EAAKkD,aAAaF,GAAYX,QACzB,CACL,IAAIe,GAAgB9X,KAAK+X,aAAab,GAClCY,IAAiBA,cAAyBE,EAC5CtD,EAAKkD,aAAaF,GAA6BI,IAE/C9X,KAAKwL,MACHI,EAAA/C,eAAeoO,kCACfU,GAAavL,kBAAkBjD,MAC/BuL,EAAKxD,aAAcyG,GAAavL,kBAAkB/B,4MAS9DrK,KAAKiY,wBAAuB,EAActM,EAAAtG,eAAeY,IACzDjG,KAAKiY,wBAAuB,EAAetM,EAAAtG,eAAea,KAC1DlG,KAAKiY,wBAAuB,EAAetM,EAAAtG,eAAec,KAC1DnG,KAAKiY,wBAAuB,EAAetM,EAAAtG,eAAee,KAC1DpG,KAAKiY,wBAAuB,EAAiBtM,EAAAtG,eAAegB,OAC5DrG,KAAKiY,wBAAuB,EAActM,EAAAtG,eAAeiB,IACzDtG,KAAKiY,wBAAuB,EAAetM,EAAAtG,eAAekB,KAC1DvG,KAAKiY,wBAAuB,EAAetM,EAAAtG,eAAemB,KAC1DxG,KAAKiY,wBAAuB,EAAetM,EAAAtG,eAAeoB,KAC1DzG,KAAKiY,wBAAuB,EAAiBtM,EAAAtG,eAAeqB,OAC5D1G,KAAKiY,wBAAuB,GAAgBtM,EAAAtG,eAAesB,MAC3D3G,KAAKiY,wBAAuB,GAAetM,EAAAtG,eAAeuB,KAC1D5G,KAAKiY,wBAAuB,GAAetM,EAAAtG,eAAewB,KACtDoM,EAAQW,WAAU,IAAgB5T,KAAKiY,wBAAuB,GAAgBtM,EAAAtG,eAAeyB,MAGjG,IAAIqK,GAAWnR,KAAKmR,SACpB,IAAS9Q,EAAI,EAAGoU,EAAIF,EAAc/M,OAAQnH,EAAIoU,IAAKpU,EAAG,CACpD,IAAI6X,GAAgB3D,EAAclU,GAC9B8X,GAAc3P,OAAO0P,GAAcC,aACnCC,GAAcjH,GAASkH,gBAAgBF,GAAYvX,KAAMsX,GAAczF,QAC3E,GAAK2F,GACL,GAAIA,GAAYtD,MAAQ7F,EAAYqJ,gBAAiB,CACnD,IAAIC,GAAgCH,GAChCG,GAAcC,aAAatJ,EAAeuJ,SAC5CzY,KAAKwL,MACHI,EAAA/C,eAAe6P,yCACfP,GAAYhP,MAAwBiP,GAAaO,eAAetO,MAIlEkO,GAAcC,aAAatJ,EAAe0J,YAC1CV,GAAcM,aAAatJ,EAAe0J,YAE1C5Y,KAAKwL,MACHI,EAAA/C,eAAegQ,+DACf/M,EAAAgN,MAAMhO,KAAKoN,GAAcS,eAAexP,MAAOgP,GAAYhP,QAG/D+O,GAAcK,cAAgBA,QAE9BvY,KAAKwL,MACHI,EAAA/C,eAAekQ,sCACfZ,GAAYhP,OAOhB,IAAI6P,GAAgB/F,EAAQ+F,cAC5B,GAAIA,OACF,IAA0B,IAAAC,GAAA/C,EAAA8C,IAAaE,GAAAD,GAAA7C,QAAA8C,GAAA7C,KAAA6C,GAAAD,GAAA7C,OAAE,CAAhC,IAAA+C,GAAA5C,EAAA2C,GAAA5X,MAAA,GAAC8X,GAAAD,GAAA,GAAOvY,GAAAuY,GAAA,GACf,GAAKvY,GAAK4G,OAAV,CACA,IAAImI,GAAiB3P,KAAK2P,eAE1B,KADIoH,GAAUpH,GAAezO,IAAIN,KAK5B,MAAM,IAAIyY,MAAM,2BAA6BzY,IAHhD,GAAI+O,GAAeoD,IAAIqG,IAAQ,MAAM,IAAIC,MAAM,6BAA+BzY,IAC9E+O,GAAesB,IAAImI,GAAOrC,2GAShC,IAAIA,QAAO,EA6Bb,IA5BMA,GAAU/W,KAAK+X,aAAapM,EAAAtG,eAAe0B,WAC7CyB,OAAOuO,GAAQjC,MAAQ7F,EAAYqJ,iBACnCtY,KAAKiQ,eAAiBkB,GAASmI,aAA6BvC,GAAS,QAEnEA,GAAU/W,KAAK+X,aAAapM,EAAAtG,eAAe4B,gBAC7CuB,OAAOuO,GAAQjC,MAAQ7F,EAAYqJ,iBACnCtY,KAAK+P,oBAAsBoB,GAASmI,aAA6BvC,GAAS,QAExEA,GAAU/W,KAAK+X,aAAapM,EAAAtG,eAAe2B,UAC7CwB,OAAOuO,GAAQjC,MAAQ7F,EAAYqJ,iBACnCtY,KAAKgQ,eAAiC+G,KAEpCA,GAAU/W,KAAK+X,aAAapM,EAAAtG,eAAeiC,UAC7CkB,OAAOuO,GAAQjC,MAAQ7F,EAAYsK,oBACnCvZ,KAAKkQ,cAAgBlQ,KAAKmR,SAASqI,gBAAmCzC,GAAS,QAE7EA,GAAU/W,KAAK+X,aAAapM,EAAAtG,eAAe+B,WACzC2P,GAAUA,GAAQc,aAAalM,EAAAtG,eAAegC,aAChDmB,OAAOuO,GAAQjC,MAAQ7F,EAAYsK,oBACnCvZ,KAAKmQ,uBAAyBnQ,KAAKmR,SAASqI,gBAAmCzC,GAAS,OAU5F/W,KAAK2P,eAAeoD,IAAI,kBACxB/S,KAAK2P,eAAeoD,IAAI,cACxB/S,KAAK2P,eAAeoD,IAAI,aACxB,CAEIgE,GAAmB/W,KAAK2P,eAAezO,IAAI,iBAC/CsH,OAAOuO,GAAQjC,MAAQ7F,EAAYsK,oBACnC,IAAIlJ,GAAqB7H,OAAOxI,KAAKmR,SAASqI,gBAAmCzC,GAAS,OACtFvE,GAAYnC,GAAmBmC,UACnChK,OAA0C,GAAnCgK,GAAUiH,eAAejS,QAChCgB,OAAOgK,GAAUiH,eAAe,IAAMzZ,KAAKiT,QAAQI,WACnD7K,OAAOgK,GAAUiH,eAAe,GAAGC,oBACnClR,OAAOgK,GAAUmH,YAAc3Z,KAAKiT,QAAQI,WAG5C0D,GAAmB/W,KAAK2P,eAAezO,IAAI,aAC3CsH,OAAOuO,GAAQjC,MAAQ7F,EAAYsK,oBACnC,IAAIjJ,GAAiB9H,OAAOxI,KAAKmR,SAASqI,gBAAmCzC,GAAS,OACtFvE,GAAYlC,GAAekC,UAC3BhK,OAA0C,GAAnCgK,GAAUiH,eAAejS,QAChCgB,OAAOgK,GAAUiH,eAAe,IAAMzZ,KAAKiT,QAAQI,WACnD7K,OAAOgK,GAAUiH,eAAe,IAAMzZ,KAAKiT,QAAQI,WACnD7K,OAAOgK,GAAUmH,YAAc9N,EAAAsH,KAAKG,MAGpCyD,GAAmB/W,KAAK2P,eAAezO,IAAI,aAC3CsH,OAAOuO,GAAQjC,MAAQ7F,EAAYsK,oBACnC,IAAIhJ,GAAiB/H,OAAOxI,KAAKmR,SAASqI,gBAAmCzC,GAAS,OACtFvE,GAAYjC,GAAeiC,UAC3BhK,OAA0C,GAAnCgK,GAAUiH,eAAejS,QAChCgB,OAAOgK,GAAUiH,eAAe,IAAMzZ,KAAKiT,QAAQI,WACnD7K,OAAOgK,GAAUmH,YAAc9N,EAAAsH,KAAKG,MAEpCtT,KAAKqQ,mBAAqBA,GAC1BrQ,KAAKsQ,eAAiBA,GACtBtQ,KAAKuQ,eAAiBA,GACtB,IAAIE,GAAe,EAAIwC,EAAQI,UAAUuG,SACzC5Z,KAAKyQ,aAAgBA,GACrBzQ,KAAKwQ,aAAgBC,GAAe,EAAI,GAAK,EAC7CzQ,KAAKoQ,OAAQ,MAIf,IAAiB,IAAAyJ,GAAA3D,EAAAlW,KAAKyP,YAAYqK,UAAQC,GAAAF,GAAAzD,QAAA2D,GAAA1D,KAAA0D,GAAAF,GAAAzD,OAAE,CACtC1W,GADGgV,EAAIqF,GAAAzY,OACQ5B,QACnB,GAAMgV,EAAK3K,OAAOiQ,SAAWta,MAC7B,IAAoB,IAAAua,GAAA/D,EAAAxW,EAAQoa,UAAQI,GAAAD,GAAA7D,QAAA8D,GAAA7D,KAAA6D,GAAAD,GAAA7D,OAAA,CAA3BW,GAAOmD,GAAA5Y,MAAsBtB,KAAKma,iBAAiBpD,mNAKxD5H,EAAAlN,UAAAkY,iBAAR,SAAyBpD,eAEvB,OADAA,EAAQ9F,IAAItF,EAAAtJ,YAAY+X,eAChBrD,EAAQjC,MACd,KAAK7F,EAAYqJ,gBACf,IAAI+B,EAAmCtD,EAASsD,gBAChD,GAAIA,MAAiB,IAAmB,IAAAC,EAAApE,EAAAmE,EAAgBP,UAAQS,EAAAD,EAAAlE,QAAAmE,EAAAlE,KAAAkE,EAAAD,EAAAlE,OAAA,CAAtC,IAAIoE,EAAMD,EAAAjZ,MAA8BtB,KAAKma,iBAAiBK,qGACxF,MAEF,KAAKvL,EAAYwL,mBACf,IAAIC,EAAsC3D,EAAS2D,gBAC/CA,GAAiB1a,KAAKma,iBAAiBO,GAC3C,IAAIC,EAAsC5D,EAAS4D,gBAC/CA,GAAiB3a,KAAKma,iBAAiBQ,GAC3C,MAEF,KAAK1L,EAAY2L,SACjB,KAAK3L,EAAY4L,SACjB,KAAK5L,EAAY6L,MACjB,KAAK7L,EAAY8L,MAAOvS,QAAO,GAG/B,IAAIwS,EAAUjE,EAAQiE,QACtB,GAAIA,MAAS,IAAmB,IAAAC,EAAA/E,EAAA8E,EAAQlB,UAAQoB,EAAAD,EAAA7E,QAAA8E,EAAA7E,KAAA6E,EAAAD,EAAA7E,OAAA,CAA1BoE,EAAMU,EAAA5Z,MAAsBtB,KAAKma,iBAAiBK,uGAKpErL,EAAAlN,UAAAiR,mBAAR,SAA2BtS,EAAcua,GACvC,IAAIpE,EAAU,IAAIvD,EAChB5S,EACAZ,KAAK+Q,WACL/Q,KAAK4R,0BAA0BhR,EAAM+K,EAAAtJ,YAAYoR,QACjDvE,EAAeyE,SAEjBoD,EAAQqE,QAAQD,GAChBnb,KAAK+Q,WAAWwC,IAAI3S,EAAMmW,IAIpB5H,EAAAlN,UAAAgW,wBAAR,SAAgCoD,EAAoBC,GAClD9S,QAAQxI,KAAK8P,YAAYiD,IAAIsI,IAC7B,IAAItE,EAAU/W,KAAK+X,aAAauD,GAChC,GAAIvE,EAAS,CACXvO,OAAOuO,EAAQjC,MAAQ7F,EAAYqJ,iBACnC,IAAIiD,EAAevb,KAAKmR,SAASmI,aAA6BvC,EAAS,MACnEwE,GAAcvb,KAAK8P,YAAYmB,IAAIoK,EAAUE,KAK7CpM,EAAAlN,UAAA4R,wBAAR,SAAgCjT,EAAcua,EAAY7Z,GACxDkH,OAAO2S,EAAKK,GAAE,IACd,IAAIC,EAAS,IAAIC,EACf9a,EACAZ,KAAK+Q,WACL7B,EAAesC,KACfxR,KAAKsR,8BAA8B1Q,EAAM+K,EAAAtJ,YAAYsZ,MAAQhQ,EAAAtJ,YAAYoR,SAE3EgI,EAAOG,wBAAwBta,EAAO6Z,GACtCnb,KAAK+Q,WAAWwC,IAAI3S,EAAM6a,IAIpBtM,EAAAlN,UAAA4Z,sBAAR,SAA8Bjb,EAAcua,EAAY7Z,GACtDkH,OAAO2S,EAAKK,GAAE,IACd,IAAIC,EAAS,IAAIC,EACf9a,EACAZ,KAAK+Q,WACL7B,EAAesC,KACfxR,KAAKsR,8BAA8B1Q,EAAM+K,EAAAtJ,YAAYsZ,MAAQhQ,EAAAtJ,YAAYoR,SAE3EgI,EAAOK,sBAAsBxa,EAAO6Z,GACpCnb,KAAK+Q,WAAWwC,IAAI3S,EAAM6a,IAI5BtM,EAAAlN,UAAA8Z,aAAA,SAAanb,EAAcmW,GACzB,IAAIpH,EAAiB3P,KAAK2P,eAC1B,GAAIA,EAAeoD,IAAInS,IACR+O,EAAezO,IAAIN,KAMjBmW,EAAS,CACtB,IAAIiF,EAASC,EAAStM,EAAezO,IAAIN,GAAQmW,GACjD,IAAKiF,EAKH,YAJAhc,KAAKwL,MACHI,EAAA/C,eAAeqT,uBACfnF,EAAQ4B,eAAexP,MAAOvI,GAIlCmW,EAAUiF,EAGdrM,EAAesB,IAAIrQ,EAAMmW,IAI3B5H,EAAAlN,UAAA8V,aAAA,SAAanX,GACX,IAAIub,EAAWnc,KAAK2P,eACpB,OAAIwM,EAASpJ,IAAInS,GAAcub,EAASjb,IAAIN,GACrC,MAIDuO,EAAAlN,UAAA0U,kBAAR,SAEEtK,EAEAC,GAEA,IAAImD,EAAczP,KAAKyP,YACvB,OAAOA,EAAYsD,IAAI1G,GAChBoD,EAAYvO,IAAImL,GAChBoD,EAAYsD,IAAIzG,GAChBmD,EAAYvO,IAAIoL,GAChB,MAID6C,EAAAlN,UAAA+U,cAAR,SAEEoF,EAEA/P,EAEAC,EAEA+H,GAEA,OAAG,CACD,IAAIqC,EAAc1W,KAAK2W,kBAAkBtK,EAAaC,GACtD,IAAKoK,EAAa,OAAO,KAGzB,IAAIK,EAAUL,EAAY2F,aAAaD,GACvC,GAAIrF,EAAS,OAAOA,EAGpB,GAAI1C,EAActB,IAAI2D,GAAc,CAClC,IAAI4F,EAAoBjI,EAAcnT,IAAIwV,GAC1C,GAAI4F,EAAkBvJ,IAAIqJ,GAAc,CACtC,IAAIzE,EAAe2E,EAAkBpb,IAAIkb,GACzC,GAAIzE,EAAatL,YAAa,CAC5B+P,EAAczE,EAAaxL,gBAAgB9B,KAC3CgC,EAAcsL,EAAatL,YAC3BC,EAAiB9D,OAAOmP,EAAarL,gBACrC,SAGA,GADAyK,EAAUL,EAAYmB,aAAaF,EAAaxL,gBAAgB9B,MACnD,OAAO0M,GAI1B,MAEF,OAAO,MAID5H,EAAAlN,UAAAsa,gBAAR,SAEEC,EAEAC,GAEA,IAAIlL,EAAQrC,EAAesC,KAC3B,GAAIgL,EACF,IAAK,IAAInc,EAAI,EAAGoU,EAAI+H,EAAWhV,OAAQnH,EAAIoU,IAAKpU,EAAG,CACjD,IAAIqc,EAAYF,EAAWnc,GAEvBsc,EAAOC,EADA9Q,EAAA+Q,oBAAoBH,EAAU9b,OAErC+b,IACEA,GAAQzN,EAAeyE,QACrB+I,EAAUvT,MAAMY,OAAO+S,UACzBvL,GAASoL,EAET3c,KAAKwL,MACHI,EAAA/C,eAAekU,8BACfL,EAAUvT,MAAOuT,EAAU9b,KAAKuI,MAAMW,YAG/B2S,EAAgBE,EAKlBpL,EAAQoL,EACjB3c,KAAKwL,MACHI,EAAA/C,eAAemU,oBACfN,EAAUvT,MAAOuT,EAAU9b,KAAKuI,MAAMW,YAGxCyH,GAASoL,EAVT3c,KAAKwL,MACHI,EAAA/C,eAAekU,8BACfL,EAAUvT,MAAOuT,EAAU9b,KAAKuI,MAAMW,aAahD,OAAOyH,GAIDpC,EAAAlN,UAAAqT,gBAAR,SAEExC,EAEAL,EAEA8B,EAEAC,GAEA,IAAI5T,EAAOkS,EAAYlS,KAAKyJ,KACxB0M,EAAU,IAAIkG,EAChBrc,EACA6R,EACAK,EACA9S,KAAKuc,gBAAgBzJ,EAAY0J,WAC/BtN,EAAegO,OACfhO,EAAeuJ,OACfvJ,EAAe0J,YAGnB,GAAKnG,EAAOc,IAAI3S,EAAMmW,GAAtB,CAEA,IAAIoG,EAAkBrK,EAAYqK,gBAClC,GAAIA,EAAiB,CACnB,IAAIC,EAAqBD,EAAgB3V,OAEzC,GAAIuP,EAAQyB,aAAatJ,EAAe0J,WAClCwE,GACFpd,KAAKwL,MACHI,EAAA/C,eAAewU,8CACfvR,EAAAgN,MAAMhO,KACJgI,EAAYlS,KAAKuI,MACjBgU,EAAgBC,EAAqB,GAAGjU,aAIzC,GAAIiU,EAAoB,CAE7B,IAAK,IAAI/c,EAAI,EAAGA,EAAI+c,IAAsB/c,EACxCL,KAAKsL,QACHM,EAAA/C,eAAeyU,wBACfH,EAAgB9c,GAAG8I,OAGvBqL,EAAiB3J,KAAKkM,IAItBjE,EAAYyK,aAAahJ,EAAc1J,KAAKkM,GAIhD,IADA,IAAIyG,EAAqB1K,EAAYkI,QACrBvG,GAAPpU,EAAI,EAAOmd,EAAmBhW,QAAQnH,EAAIoU,IAAKpU,EAAG,CACzD,IAAIod,EAAoBD,EAAmBnd,GAC3C,OAAQod,EAAkB3I,MACxB,KAAKhJ,EAAAiJ,SAAS2I,iBACZ1d,KAAK2d,gBAAkCF,EAAmB1G,GAC1D,MAEF,KAAKjL,EAAAiJ,SAAS6I,kBACRH,EAAkBI,MAAMlS,EAAAtJ,YAAYyb,IAAMnS,EAAAtJ,YAAY0b,KACxD/d,KAAKge,mBAAsCP,EAAmB1G,GAE9D/W,KAAKie,iBAAoCR,EAAmB1G,GAE9D,MAEF,KAAKjL,EAAAiJ,SAASmJ,0BAA2B,MACzC,QAAS1V,QAAO,OAMd2G,EAAAlN,UAAA0b,gBAAR,SAEE7K,EAEAL,GAEA,IAEIsE,EAFAnW,EAAOkS,EAAYlS,KAAKyJ,KACxBmS,EAAa1J,EAAY0J,WAE7B,GAAI1J,EAAY0I,GAAG7P,EAAAtJ,YAAY8b,SAa7B,GAZA3V,OAAOiK,EAAOqC,MAAQ7F,EAAYmP,qBAClCrH,EAAU,IAAI2E,EACZ9a,EACA6R,EACAzS,KAAKuc,gBAAgBC,GAClB1J,EAAY0I,GAAG7P,EAAAtJ,YAAYgc,UACxBnP,EAAeoP,OACfpP,EAAesC,MACftC,EAAeqP,MAErBzL,IAEGL,EAAOc,IAAI3S,EAAMmW,GAAU,YAShC,GAPAvO,QAAQsK,EAAY+K,MAAMlS,EAAAtJ,YAAYmc,SAAW7S,EAAAtJ,YAAYyb,IAAMnS,EAAAtJ,YAAY0b,MAC/EhH,EAAU,IAAI0H,EACZ7d,EACA6R,EACAK,EACA9S,KAAKuc,gBAAgBC,EAAYtN,EAAesC,QAE7CiB,EAAOiM,YAAY9d,EAAMmW,GAAU,QAKpC5H,EAAAlN,UAAAgc,iBAAR,SAEEnL,EAEAL,GAEA,IAAI7R,EAAOkS,EAAYlS,KAAKyJ,KACxBsU,EAAW7L,EAAY0I,GAAG7P,EAAAtJ,YAAY8b,QACtC1B,EAAgBvN,EAAeoP,OAC9BxL,EAAY0I,GAAG7P,EAAAtJ,YAAYqR,WAC9B+I,GAAiBvN,EAAenC,gBACfmC,EAAeZ,gBACfY,EAAeL,kBAElC,IAAIkI,EAAU,IAAInE,EAChBhS,EACA6R,EACAK,EACA9S,KAAKuc,gBAAgBzJ,EAAY0J,WAAYC,IAE/C,GAAIkC,GAEF,GADAnW,OAAOsK,EAAYlS,KAAKkU,MAAQhJ,EAAAiJ,SAAS6J,cACpCnM,EAAOc,IAAI3S,EAAMmW,GAAU,YAEhC,IAAKtE,EAAOiM,YAAY9d,EAAMmW,GAAU,OAE1C/W,KAAK6e,uBAAuB/L,EAAY0J,WAAYzF,EAAStE,IAIvDtD,EAAAlN,UAAA4c,uBAAR,SAEErC,EAEAva,EAEA6c,GAEA,GAAItC,EACF,IAAK,IAAInc,EAAI,EAAGoU,EAAI+H,EAAWhV,OAAQnH,EAAIoU,IAAKpU,EAAG,CACjD,IAAIqc,EAAYF,EAAWnc,GAC3B,OAAQqc,EAAU/P,eAChB,KAAKb,EAAAe,cAAcC,SACnB,KAAKhB,EAAAe,cAAcE,gBACnB,KAAKjB,EAAAe,cAAcyB,gBACnB,KAAKxC,EAAAe,cAAcgC,iBACjB,IAAIkQ,EAAUrC,EAAUsC,WAAatC,EAAUsC,UAAUxX,QAAU,EACnE,GAAe,GAAXuX,EAAc,CAChB,IAAIE,EAA0BvC,EAAUsC,UAAW,GACnD,GACEC,EAASnK,MAAQhJ,EAAAiJ,SAASmK,SACND,EAAUE,aAAerT,EAAAsT,YAAYC,OACzD,CACA,IAAIvK,EAAOpI,EACTgQ,EAAU/P,cACgBsS,EAAU3d,OAEtC,GAAIwT,GAAQpJ,EAAasD,QACvBhP,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACf2B,EAAS9V,WAEN,CACL,IAAImW,EAAYR,EAAeS,mBAC3BD,EAAUvM,IAAI+B,GAChB9U,KAAKwL,MACHI,EAAA/C,eAAe2W,kCACfP,EAAS9V,QAGXlH,EAAUwd,aAAe3K,EACzBwK,EAAUrO,IAAI6D,EAAM7S,UAIxBjC,KAAKwL,MACHI,EAAA/C,eAAe6W,wBACfT,EAAS9V,YAIbnJ,KAAKwL,MACHI,EAAA/C,eAAe8W,+BACfjD,EAAUvT,MAAO,IAAK4V,EAAQjV,SAAS,QAU7CqF,EAAAlN,UAAA2d,eAAR,SAEE9M,EAEAL,GAEA,IAAI7R,EAAOkS,EAAYlS,KAAKyJ,KAC5B,GAAIyI,EAAY0I,GAAG7P,EAAAtJ,YAAY8b,QAAS,CAEtC,KADI0B,EAAgBpN,EAAOuI,WACN6E,EAAc9M,IAAInS,GAGhC,CACL,IAAImW,EAAU,IAAI+I,EAAkBlf,EAAM6R,EAAQK,GAClD,OAAKL,EAAOc,IAAI3S,EAAMmW,GACfA,EADgC,KAHvC,IADIA,EAAmB8I,EAAc3e,IAAIN,IAC7BkU,MAAQ7F,EAAYwL,mBAAoB,OAA0B1D,MAM3E,CACL,IAAI8I,EACJ,KADIA,EAAgBpN,EAAO4H,mBACNwF,EAAc9M,IAAInS,GAGhC,CACDmW,EAAU,IAAI+I,EAAkBlf,EAAM6R,EAAQK,GAClD,OAAKL,EAAOiM,YAAY9d,EAAMmW,GACvBA,EADwC,KAH/C,IADIA,EAAmB8I,EAAc3e,IAAIN,IAC7BkU,MAAQ7F,EAAYwL,mBAAoB,OAA0B1D,EAWlF,OAJA/W,KAAKwL,MACHI,EAAA/C,eAAekX,qBACfjN,EAAYlS,KAAKuI,MAAOvI,GAEnB,MAIDuO,EAAAlN,UAAA+b,mBAAR,SAEElL,EAEAL,GAEA,IAAIzQ,EAAWhC,KAAK4f,eAAe9M,EAAaL,GAChD,GAAKzQ,EAAL,CACA,IAAIpB,EAAOkS,EAAYlS,KAAKyJ,KACxB2V,EAAWlN,EAAY0I,GAAG7P,EAAAtJ,YAAYyb,KAC1C,GAAIkC,GACF,GAAIhe,EAAS0Y,gBAKX,YAJA1a,KAAKwL,MACHI,EAAA/C,eAAekX,qBACfjN,EAAYlS,KAAKuI,MAAOvI,QAK5B,GAAIoB,EAAS2Y,gBAKX,YAJA3a,KAAKwL,MACHI,EAAA/C,eAAekX,qBACfjN,EAAYlS,KAAKuI,MAAOvI,GAK9B,IAAImW,EAAU,IAAInE,GACfoN,EAAWrU,EAAAnJ,cAAgBmJ,EAAAlJ,eAAiB7B,EAC7CoB,EACA8Q,EACA9S,KAAKuc,gBAAgBzJ,EAAY0J,WAC/BtN,EAAeoP,SAGf0B,EACFhe,EAAS0Y,gBAAkB3D,EAE3B/U,EAAS2Y,gBAAkB5D,IAKvB5H,EAAAlN,UAAAuT,eAAR,SAEE1C,EAEAL,GAEA,IAAI7R,EAAOkS,EAAYlS,KAAKyJ,KACxB0M,EAAU,IAAIkJ,EAChBrf,EACA6R,EACAK,EACA9S,KAAKuc,gBAAgBzJ,EAAY0J,WAC/BtN,EAAegO,OACfhO,EAAeoP,OACfpP,EAAeqP,OAGnB,GAAK9L,EAAOc,IAAI3S,EAAMmW,GAEtB,IADA,IAAI+C,EAAShH,EAAYgH,OAChBzZ,EAAI,EAAGoU,EAAIqF,EAAOtS,OAAQnH,EAAIoU,IAAKpU,EAC1CL,KAAKkgB,oBAAoBpG,EAAOzZ,GAAI0W,IAKhC5H,EAAAlN,UAAAie,oBAAR,SAEEpN,EAEAL,GAEA,IAAI7R,EAAOkS,EAAYlS,KAAKyJ,KACxB0M,EAAU,IAAIoJ,EAChBvf,EACA6R,EACAK,EACA9S,KAAKuc,gBAAgBzJ,EAAY0J,WAC/BtN,EAAesC,OAGdiB,EAAOc,IAAI3S,EAAMmW,IAIhB5H,EAAAlN,UAAA+S,kBAAR,SAEEH,EAEApC,EAEA4B,EAEAC,GAEA,IAAI0G,EAAUnG,EAAUmG,QACxB,GAAIA,EACF,IAAK,IAAI3a,EAAI,EAAGoU,EAAIuG,EAAQxT,OAAQnH,EAAIoU,IAAKpU,EAC3CL,KAAKogB,iBAAiBpF,EAAQ3a,GAAIoS,EAAQoC,EAAUwL,aAAchM,OAE/D,CACL,IAAIiM,OAAM,EACNhM,EAAkBvB,IAAIN,GAAS6N,EAAShM,EAAkBpT,IAAIuR,GAC7D6B,EAAkBrD,IAAIwB,EAAQ6N,EAAS,IAC5C,IAAIjU,EAAc7D,OAAOqM,EAAUwL,cACnCC,EAAOzV,KAAK,IAAI2B,EACdH,EACAA,EAAYkU,SAAS5U,EAAA5I,cACjBsJ,EAAYzB,UAAU,EAAGyB,EAAY7E,OAASmE,EAAA5I,aAAayE,QAC3D6E,EAAcV,EAAA5I,aAClByF,OAAOqM,EAAU2L,UAMfrR,EAAAlN,UAAAme,iBAAR,SAEE5F,EAEAtO,EAEAG,EAEAgI,GAEA,IAAI6C,EAAYsD,EAAOtD,UAAU7M,KAC7B+R,EAAc5B,EAAOiG,aAAapW,KAGlC0M,EAAU7K,EAAUmQ,aAAaD,GACrC,GAAIrF,EACF/W,KAAKwL,MACHI,EAAA/C,eAAe6X,4DACflG,EAAOiG,aAAatX,MAAOiT,QAK/B,GAAoB,OAAhB/P,EAGF,GAAI0K,EAAU7K,EAAU2L,aAAaX,GACnChL,EAAU0L,aAAawE,EAAarF,OAG/B,CACL,IAAIuJ,OAAM,EACNjM,EAActB,IAAI7G,GAAYoU,EAASjM,EAAcnT,IAAIgL,GACxDmI,EAAcpD,IAAI/E,EAAWoU,EAAS,IAAI5Q,KAC/C4Q,EAAOrP,IAAImL,EAAa,IAAI7P,EAC1BiO,EAAOtD,UACPsD,EAAOiG,aACP,KAAM,WAKL,CACDH,OAAM,EACNjM,EAActB,IAAI7G,GAAYoU,EAASjM,EAAcnT,IAAIgL,GACxDmI,EAAcpD,IAAI/E,EAAWoU,EAAS,IAAI5Q,KAC/C4Q,EAAOrP,IAAImL,EAAa,IAAI7P,EAC1BiO,EAAOtD,UACPsD,EAAOiG,aACPpU,EACAA,EAAYkU,SAAS5U,EAAA5I,cACjBsJ,EAAYzB,UAAU,EAAGyB,EAAY7E,OAASmE,EAAA5I,aAAayE,QAC3D6E,EAAcV,EAAA5I,iBAMhBoM,EAAAlN,UAAAiT,kBAAR,SAEEL,EAEApC,EAEA2B,EAEAC,GAEA,IAAIsM,EAAe9L,EAAU8L,aAC7B,GAAIA,EACF,IAAK,IAAItgB,EAAI,EAAGoU,EAAIkM,EAAanZ,OAAQnH,EAAIoU,IAAKpU,EAChDL,KAAK4gB,iBACHD,EAAatgB,GACboS,EACAoC,EAAUwL,aACVjM,EACAC,QAGKQ,EAAUgM,eACnBzM,EAAcvJ,KAAK,IAAIoB,EACrBwG,EACAoC,EAAUgM,cACV,KACAhM,EAAUwL,aACVxL,EAAUwL,aAAe1U,EAAA5I,gBAQvBoM,EAAAlN,UAAA2e,iBAAR,SAEE9N,EAEAL,EAEApG,EAEA+H,EAEAC,GAEA,IAAI/H,EAAiBD,EAAYkU,SAAS5U,EAAA5I,cACtCsJ,EAAYzB,UAAU,EAAGyB,EAAY7E,OAASmE,EAAA5I,aAAayE,QAC3D6E,EAAcV,EAAA5I,aAGdgU,EAAU/W,KAAKgX,cAAclE,EAAYsJ,YAAY/R,KAAMgC,EAAaC,EAAgB+H,GACxF0C,EACFtE,EAAOc,IAAIT,EAAYlS,KAAKyJ,KAAM0M,GAAS,GAK7C3C,EAAcvJ,KAAK,IAAIoB,EACrBwG,EACAK,EAAYlS,KACZkS,EAAYsJ,YACZ/P,EACAC,KAKI6C,EAAAlN,UAAAyT,mBAAR,SAEE5C,EAEAL,GAEA,IAAI7R,EAAOkS,EAAYlS,KAAKyJ,KACxByW,EAAkB5R,EAAesC,KACjCsB,EAAY0I,GAAG7P,EAAAtJ,YAAY0e,SAC7BD,GAAmB5R,EAAe8R,SAElCF,GAAmB5R,EAAeoP,OAE/BxL,EAAY0I,GAAG7P,EAAAtJ,YAAY4e,WAC1BxO,EAAOqC,MAAQ7F,EAAYqJ,kBAC7BwI,GAAmB5R,EAAegO,QAGjCpK,EAAY0I,GAAG7P,EAAAtJ,YAAYqR,UAC1BjB,EAAOqC,MAAQ7F,EAAYiS,MAAezO,EAAQ1I,OAAOiQ,UAC3D8G,GAAmB5R,EAAeiS,OAGtC,IAAIpK,EAAU,IAAInE,EAChBhS,EACA6R,EACAK,EACA9S,KAAKuc,gBAAgBzJ,EAAY0J,WAAYsE,IAE1CrO,EAAOc,IAAI3S,EAAMmW,IAClBA,EAAQyB,aAAatJ,EAAeiS,SAClCnhB,KAAKwP,sBACPxP,KAAKwL,MACHI,EAAA/C,eAAeuY,4CACf5Y,OAAOsD,EAAAuV,cAAcvV,EAAAe,cAAcsU,MAAOrO,EAAY0J,aAAarT,OAEhEnJ,KAAKwP,sBAAwBuH,IAKhC5H,EAAAlN,UAAA2T,oBAAR,SAEE9C,EAEAL,GAEA,IAAI7R,EAAOkS,EAAYlS,KAAKyJ,KACxB0M,EAAU,IAAIuK,EAChB1gB,EACA6R,EACAK,EACA9S,KAAKuc,gBAAgBzJ,EAAY0J,WAC/BtN,EAAegO,SAGnB,GAAKzK,EAAOc,IAAI3S,EAAMmW,GAEtB,IADA,IAAIyG,EAAqB1K,EAAYkI,QAC5B3a,EAAI,EAAGoU,EAAI+I,EAAmBhW,OAAQnH,EAAIoU,IAAKpU,EAAG,CACzD,IAAIod,EAAoBD,EAAmBnd,GAC3C,OAAQod,EAAkB3I,MACxB,KAAKhJ,EAAAiJ,SAAS2I,iBACZ1d,KAAK2d,gBAAkCF,EAAmB1G,GAC1D,MAEF,KAAKjL,EAAAiJ,SAAS6I,kBACRH,EAAkBI,MAAMlS,EAAAtJ,YAAYyb,IAAMnS,EAAAtJ,YAAY0b,KACxD/d,KAAKge,mBAAsCP,EAAmB1G,GAE9D/W,KAAKie,iBAAoCR,EAAmB1G,GAE9D,MAEF,QAASvO,QAAO,MAMd2G,EAAAlN,UAAA6T,oBAAR,SAEEhD,EAEAL,EAEA8B,EAEAC,GAEA,IAAI5T,EAAOkS,EAAYlS,KAAKyJ,KACxB0M,EAAU,IAAIwK,EAAU3gB,EAAM6R,EAAQK,GAC1C,GAAKL,EAAOc,IAAI3S,EAAMmW,GAAtB,CACAA,EAAUvO,OAAOiK,EAAOoF,aAAajX,IAErC,IADA,IAAIoa,EAAUlI,EAAYkI,QACjB3a,EAAI,EAAGoU,EAAIuG,EAAQxT,OAAQnH,EAAIoU,IAAKpU,EAAG,CAC9C,IAAIma,EAASQ,EAAQ3a,GACrB,OAAQma,EAAO1F,MACb,KAAKhJ,EAAAiJ,SAASM,iBACZrV,KAAKsV,gBAAkCkF,EAAQzD,EAASxC,EAAeC,GACvE,MAEF,KAAK1I,EAAAiJ,SAASQ,gBACZvV,KAAKwV,eAAgCgF,EAAQzD,GAC7C,MAEF,KAAKjL,EAAAiJ,SAASU,oBACZzV,KAAK0V,mBAAwC8E,EAAQzD,GACrD,MAEF,KAAKjL,EAAAiJ,SAASY,qBACZ3V,KAAK4V,oBAA0C4E,EAAQzD,GACvD,MAEF,KAAKjL,EAAAiJ,SAASc,qBACZ7V,KAAK8V,oBAA0C0E,EAAQzD,EAASxC,EAAeC,GAC/E,MAEF,KAAK1I,EAAAiJ,SAASgB,gBACZ/V,KAAKgW,yBAA0CwE,EAAQzD,GACvD,MAEF,KAAKjL,EAAAiJ,SAASI,SACZnV,KAAKoV,oBAAuCoF,EAAQzD,GACpD,MAEF,QAASvO,QAAO,OAMd2G,EAAAlN,UAAA+T,yBAAR,SAEElD,EAEAL,GAEA,IAAI7R,EAAOkS,EAAYlS,KAAKyJ,KACxB0M,EAAU,IAAIvD,EAChB5S,EACA6R,EACAK,EACA9S,KAAKuc,gBAAgBzJ,EAAY0J,WAAYtN,EAAesC,OAE9DiB,EAAOc,IAAI3S,EAAMmW,IAIX5H,EAAAlN,UAAAmT,oBAAR,SAEEP,EAEApC,GAGA,IADA,IAAIkO,EAAe9L,EAAU8L,aACpBtgB,EAAI,EAAGoU,EAAIkM,EAAanZ,OAAQnH,EAAIoU,IAAKpU,EAAG,CACnD,IAAIyS,EAAc6N,EAAatgB,GAC3BO,EAAOkS,EAAYlS,KAAKyJ,KACxBoS,EAAgBvN,EAAegO,OAAShO,EAAeqP,KACvDzL,EAAY0I,GAAG7P,EAAAtJ,YAAYmf,WAC7B/E,GAAiBvN,EAAe8R,UAE9BlO,EAAY0I,GAAG7P,EAAAtJ,YAAYsZ,SAC7Bc,GAAiBvN,EAAeoP,QAElC,IAAIvH,EAAU,IAAI2E,EAChB9a,EACA6R,EACAzS,KAAKuc,gBAAgBzJ,EAAY0J,WAAYC,GAC7C3J,GAEGL,EAAOc,IAAI3S,EAAMmW,KAG5B5H,EAn3CA,CAA6BvD,EAAAX,mBA07C7B,SAAgB2R,EAAoB9H,GAClC,OAAQA,GACN,KAAKhJ,EAAAe,cAAcqQ,OAAQ,OAAOhO,EAAegO,OACjD,KAAKpR,EAAAe,cAAcC,SACnB,KAAKhB,EAAAe,cAAcE,gBAAiB,OAAOmC,EAAenC,gBAC1D,KAAKjB,EAAAe,cAAcyB,gBAAiB,OAAOY,EAAeZ,gBAC1D,KAAKxC,EAAAe,cAAcgC,iBAAkB,OAAOK,EAAeL,iBAC3D,KAAK/C,EAAAe,cAAc+L,UAAW,OAAO1J,EAAe0J,UACpD,KAAK9M,EAAAe,cAAc4L,OAAQ,OAAOvJ,EAAeuJ,OACjD,KAAK3M,EAAAe,cAAcyR,OAAQ,OAAOpP,EAAeoP,OACjD,KAAKxS,EAAAe,cAAcmU,SAAU,OAAO9R,EAAe8R,SACnD,KAAKlV,EAAAe,cAAc8G,QAAS,OAAOzE,EAAeyE,QAClD,KAAK7H,EAAAe,cAAc0R,KAAM,OAAOrP,EAAeqP,KAC/C,KAAKzS,EAAAe,cAAcsU,MAAO,OAAOjS,EAAeiS,MAChD,QAAS,OAAOjS,EAAesC,MAx8CtB9R,EAAAyP,UAs3Cb,SAAYF,GAEVA,IAAA,mBAEAA,IAAA,iBAEAA,IAAA,eAEAA,IAAA,yBAEAA,IAAA,2CAEAA,IAAA,uBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,iBAEAA,IAAA,6CAEAA,IAAA,0BAEAA,IAAA,sCAEAA,IAAA,kBAEAA,IAAA,4CAEAA,IAAA,wBAEAA,IAAA,0BAEAA,IAAA,gBAEAA,IAAA,oCApCF,CAAYA,EAAAvP,EAAAuP,cAAAvP,EAAAuP,YAAW,KAwCvB,SAAYC,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,uCAEAA,IAAA,0BAEAA,IAAA,oBAEAA,IAAA,oBAEAA,IAAA,yBAEAA,IAAA,uBAEAA,IAAA,iBAEAA,IAAA,oBAxBF,CAAYA,EAAAxP,EAAAwP,iBAAAxP,EAAAwP,eAAc,KA4B1BxP,EAAAkd,sBAmBA,IAAA6E,EAAA,WAcE,SAAAA,EAES3M,EAEAlU,EAEAsQ,EAEAwQ,EAEPjP,GAROzS,KAAA8U,OAEA9U,KAAAY,OAEAZ,KAAAkR,eAEAlR,KAAA0hB,UAjBT1hB,KAAAuR,MAAqB5F,EAAAtJ,YAAYmP,KAEjCxR,KAAA0S,eAAiCxD,EAAesC,KAEhDxR,KAAAgb,QAA8C,KAE9Chb,KAAA2hB,WAAoC,KAelC3hB,KAAK0hB,QAAUA,EACf1hB,KAAKY,KAAOA,EACZZ,KAAKkR,aAAeA,EAChBuB,EACFzS,KAAKyS,OAASA,GAEdjK,OAAOxI,KAAK8U,MAAQ7F,EAAYiS,MAChClhB,KAAKyS,OAASzS,MAkEpB,OA7DEe,OAAAC,eAAIygB,EAAAxf,UAAA,OAAI,KAAR,WAEE,IADA,IAAI2f,EAAmB5hB,OACpB,IAAK4hB,EAAUA,EAAQnP,QAAQqC,MAAQ7F,EAAYiS,KAAM,OAAaU,mCAK3EH,EAAAxf,UAAAuZ,GAAA,SAAGmB,GAA2B,OAAQ3c,KAAKuR,MAAQoL,IAASA,GAE5D8E,EAAAxf,UAAA4b,MAAA,SAAMtM,GAA4B,OAA+B,IAAvBvR,KAAKuR,MAAQA,IAEvDkQ,EAAAxf,UAAAgP,IAAA,SAAI0L,GAA2B3c,KAAKuR,OAASoL,GAE7C8E,EAAAxf,UAAAuW,aAAA,SAAamE,GAA8B,OAAQ3c,KAAK0S,eAAiBiK,IAASA,GAGlF8E,EAAAxf,UAAA4V,aAAA,SAAajX,GACX,IAAIoa,EAAUhb,KAAKgb,QACnB,OAAIA,GAAWA,EAAQjI,IAAInS,GAAcoa,EAAQ9Z,IAAIN,GAC9C,MAOT6gB,EAAAxf,UAAAsR,IAAA,SAAI3S,EAAcmW,GAChB,IAAI8K,EAAsB9K,EAAQjE,YAC9BkI,EAAUhb,KAAKgb,QACnB,GAAKA,GACA,GAAIA,EAAQjI,IAAInS,GAAO,CAC1B,IAAIkhB,EAAS9G,EAAQ9Z,IAAIN,GACzB,GAAIkhB,EAAOrP,SAAWzS,UAEf,CACL,IAAIgc,EAASC,EAAS6F,EAAQ/K,GAC9B,IAAIiF,EAOF,OAJAhc,KAAK0hB,QAAQlW,MACXI,EAAA/C,eAAeqT,uBACfnF,EAAQ4B,eAAexP,MAAO4N,EAAQ4B,eAAetO,OAEhD,EANP0M,EAAUiF,SARFhc,KAAKgb,QAAUA,EAAU,IAAItL,IAkB3CsL,EAAQ/J,IAAIrQ,EAAMmW,GAClB,IAAI2K,EAAU1hB,KAAK0hB,QAMnB,OALI3K,EAAQjC,MAAQ7F,EAAYsK,oBAA2CxC,EAASgL,UAElFL,EAAQ/R,eAAesB,IAAI8F,EAAQ7F,aAAc6F,GACjD2K,EAAQ9R,sBAAsBqB,IAAI4Q,EAAqB9K,KAElD,GAIT0K,EAAAxf,UAAA6H,SAAA,WACE,OAAOmF,EAAYjP,KAAK8U,MAAQ,IAAM9U,KAAKkR,cAE/CuQ,EAnGA,GAAsB/hB,EAAA+hB,UAsGtB,IAAAzJ,EAAA,SAAA5I,GAGE,SAAA4I,EAEElD,EAEAlU,EAEAsQ,EAEAwQ,EAEAjP,EAEOK,GAZT,IAAAzD,EAcED,EAAA5O,KAAAR,KAAM8U,EAAMlU,EAAMsQ,EAAcwQ,EAASjP,IAAOzS,YAFzCqP,EAAAyD,cASPzD,EAAKyD,YAAcA,EACnBzD,EAAKkC,MAAQuB,EAAYvB,QAiB7B,OA1C8CF,EAAA2G,EAAA5I,GA6B5CrO,OAAAC,eAAIgX,EAAA/V,UAAA,sBAAmB,KAAvB,WACE,OAAOjC,KAAK8S,YAAY3J,MAAMY,OAAO+S,2CAIvC/b,OAAAC,eAAIgX,EAAA/V,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAK8S,YAAYlS,sCAI1BG,OAAAC,eAAIgX,EAAA/V,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAK8S,YAAY0J,4CAE5BxE,EA1CA,CAA8CyJ,GAAxB/hB,EAAAsY,kBA6CtB,IAAAgK,EAAA,SAAA5S,GAAA,SAAA4S,IAAA,IAAA3S,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YAGEqP,EAAA8L,KAAatP,EAAAsH,KAAKG,OAQpB,OAX2CjC,EAAA2Q,EAAA5S,GAMzC4S,EAAA/f,UAAAmZ,QAAA,SAAQD,GACN3S,QAAQxI,KAAKwb,GAAG7P,EAAAtJ,YAAY6f,WAC5BliB,KAAKmb,KAAOA,EACZnb,KAAKiR,IAAItF,EAAAtJ,YAAY6f,WAEzBF,EAXA,CAA2ChK,GAArBtY,EAAAsiB,eActB,IAAAhR,EAAA,SAAA5B,GAUE,SAAA4B,EAEE0Q,EAEO3X,GAJT,IAAAsF,EAMED,EAAA5O,KAAAR,KACEiP,EAAYiS,KACZnX,EAAOC,eACPD,EAAOsW,aACPqB,EACA,OACD1hB,KARMqP,EAAAtF,SAXTsF,EAAA3P,QAA8C,KAE9C2P,EAAAmH,YAA6B,KAkB3BnH,EAAKtF,OAASA,EACdvB,QAAQkZ,EAAQjS,YAAYsD,IAAI1D,EAAK6B,eACrCwQ,EAAQjS,YAAYwB,IAAI5B,EAAK6B,aAAc7B,GAC3C,IAAI8S,EAAgB9S,EAAKqS,QAAQnP,mBAC/B,SAAWlD,EAAK6B,aAChB,IAAIrF,EAAAuW,UAAU,KAAMvW,EAAAsH,KAAKG,MACzBjE,UAEF8S,EAAcjR,aAAeiR,EAAcvhB,KAC3CyO,EAAK8S,cAAgBA,IAkFzB,OAlH0B9Q,EAAAL,EAAA5B,GAoCxB4B,EAAA/O,UAAAsR,IAAA,SAAI3S,EAAcmW,EAA0BsL,GAC1C,YAD0C,IAAAA,OAAA,KACrCjT,EAAAnN,UAAMsR,IAAG/S,KAAAR,KAACY,EAAMmW,MACrBA,EAAUvO,OAAOxI,KAAK6X,aAAajX,KACvB4a,GAAG7P,EAAAtJ,YAAYoR,UAAY4O,GACrCriB,KAAK4X,aACHb,EAAQnW,KACRmW,GAGAA,EAAQyB,aAAatJ,EAAegO,SAASld,KAAK0hB,QAAQ3F,aAAanb,EAAMmW,IAC1E,IAIT/F,EAAA/O,UAAA4V,aAAA,SAAajX,GACX,IAAImW,EAAU3H,EAAAnN,UAAM4V,aAAYrX,KAAAR,KAACY,GACjC,GAAImW,EAAS,OAAOA,EACpB,IAAIP,EAAcxW,KAAKwW,YACvB,GAAIA,EACF,IAAK,IAAInW,EAAI,EAAGoU,EAAI+B,EAAYhP,OAAQnH,EAAIoU,IAAKpU,EAC/C,GAAI0W,EAAUP,EAAYnW,GAAGwX,aAAajX,GAAO,OAAOmW,EAG5D,OAAO,MAIT/F,EAAA/O,UAAAqgB,OAAA,SAAO1hB,GACL,IAAImW,EAAU/W,KAAK6X,aAAajX,GAChC,OAAImW,GACG/W,KAAK0hB,QAAQ3J,aAAanX,IAInCoQ,EAAA/O,UAAA2V,aAAA,SAAahX,EAAcmW,GACzB,IAAIrX,EAAUM,KAAKN,QACdA,IAASM,KAAKN,QAAUA,EAAU,IAAIgQ,KAC3ChQ,EAAQuR,IAAIrQ,EAAMmW,GACd/W,KAAK+J,OAAO+S,WAAW9c,KAAK0hB,QAAQ3F,aAAanb,EAAMmW,IAI7D/F,EAAA/O,UAAA2U,iBAAA,SAAiBlC,GACf,IAAI8B,EAAcxW,KAAKwW,YACvB,GAAKA,GACA,GAAIA,EAAY+L,SAAS7N,GAAO,YADnB1U,KAAKwW,YAAcA,EAAc,GAEnDA,EAAY3L,KAAK6J,IAInB1D,EAAA/O,UAAAoa,aAAA,SAAazb,GACX,IAAIlB,EAAUM,KAAKN,QACnB,GAAIA,GAAWA,EAAQqT,IAAInS,GAAO,OAAOlB,EAAQwB,IAAIN,GACrD,IAAI4V,EAAcxW,KAAKwW,YACvB,GAAIA,EACF,IAAK,IAAInW,EAAI,EAAGoU,EAAI+B,EAAYhP,OAAQnH,EAAIoU,IAAKpU,EAAG,CAClD,IAAI0W,EAAUP,EAAYnW,GAAGgc,aAAazb,GAC1C,GAAImW,EAAS,OAAOA,EAGxB,OAAO,MAIT/F,EAAA/O,UAAAkV,oBAAA,SAAoBvW,EAAc6R,WAC5B/Q,EAAK,IAAI6f,EACX3gB,EACA6R,EACAzS,KAAK0hB,QAAQrP,+BAA+BzR,IAE1ClB,EAAUM,KAAKN,QACnB,GAAIA,MACF,IAAiC,IAAA8iB,EAAAtM,EAAAxW,GAAO+iB,EAAAD,EAAApM,QAAAqM,EAAApM,KAAAoM,EAAAD,EAAApM,OAAE,CAAjC,IAAAsM,EAAAnM,EAAAkM,EAAAnhB,MAAA,GAACqhB,EAAAD,EAAA,GAAYlI,EAAAkI,EAAA,GACpBhhB,EAAG6R,IAAIoP,EAAYnI,qGAGvB,OAAO9Y,GAEXsP,EAlHA,CAA0ByQ,GAAb/hB,EAAAsR,OAqHb,IAAAwC,EAAA,SAAApE,GAGE,SAAAoE,EAEE5S,EAEA6R,EAEAK,EAEAJ,QAAA,IAAAA,MAAiCxD,EAAesC,MARlD,IAAAnC,EAUED,EAAA5O,KAAAR,KACEiP,EAAY2T,eACZhiB,EACAiiB,EAAmBjiB,EAAM6R,GAAQ,GACjCA,EAAOiP,QACPjP,EACAK,IACD9S,YACDqP,EAAKqD,eAAiBA,IAiB1B,OAtCoCrB,EAAAmC,EAAApE,GAyBlCrO,OAAAC,eAAIwS,EAAAvR,UAAA,qBAAkB,KAAtB,WACE,OAAyBjC,KAAK8S,YAAagQ,gDAI7C/hB,OAAAC,eAAIwS,EAAAvR,UAAA,WAAQ,KAAZ,WACE,OAAyBjC,KAAK8S,YAAaqI,sCAI7C3H,EAAAvR,UAAAqgB,OAAA,SAAO1hB,GACL,OAAOZ,KAAKyS,OAAO6P,OAAO1hB,IAE9B4S,EAtCA,CAAoCwO,GAAvBtiB,EAAA8T,iBAyCb,IAAA+N,EAAA,SAAAnS,GAGE,SAAAmS,EAEE3gB,EAEA6R,EAEAK,UAEA1D,EAAA5O,KAAAR,KACEiP,EAAY8T,UACZniB,EACAiiB,EAAmBjiB,EAAM6R,GAAQ,GACjCA,EAAOiP,QACPjP,EACAK,IACD9S,KAQL,OA1B+BqR,EAAAkQ,EAAAnS,GAsB7BmS,EAAAtf,UAAAqgB,OAAA,SAAO1hB,GACL,OAAOZ,KAAK6X,aAAajX,IAClBZ,KAAKyS,OAAO6P,OAAO1hB,IAE9B2gB,EA1BA,CAA+BvJ,GAAlBtY,EAAA6hB,YA6Bb,IAAAtB,EAAA,SAAA7Q,GAGE,SAAA6Q,EAEErf,EAEA6R,EAEAK,EAEAJ,QAAA,IAAAA,MAAiCxD,EAAesC,MARlD,IAAAnC,EAUED,EAAA5O,KAAAR,KACEiP,EAAY+T,KACZpiB,EACAiiB,EAAmBjiB,EAAM6R,GAAQ,GACjCA,EAAOiP,QACPjP,EACAK,IACD9S,YACDqP,EAAKqD,eAAiBA,EACtBrD,EAAK+L,QAAQvP,EAAAsH,KAAK/P,OAQtB,OA9B0BiO,EAAA4O,EAAA7Q,GA0BxB6Q,EAAAhe,UAAAqgB,OAAA,SAAO1hB,GACL,OAAOZ,KAAK6X,aAAajX,IAClBZ,KAAKyS,OAAO6P,OAAO1hB,IAE9Bqf,EA9BA,CAA0B+B,GAAbtiB,EAAAugB,OAiCb,SAAkBgD,GAEhBA,IAAA,eAEAA,IAAA,qBAEAA,IAAA,iBANF,CAAkBvjB,EAAAujB,oBAAAvjB,EAAAujB,kBAAiB,KAUnC,IAAAC,EAAA,SAAA9T,GAUE,SAAA8T,EAEEpO,EAEAlU,EAEA6R,EAEAK,QAAA,IAAAA,MAAgDL,EAAOiP,QAAQpQ,8BAA8B1Q,IAR/F,IAAAyO,EAUED,EAAA5O,KAAAR,KACE8U,EACAlU,EACAiiB,EAAmBjiB,EAAM6R,GAAQ,GACjCA,EAAOiP,QACPjP,EACAK,IACD9S,YAxBHqP,EAAA8T,kBAAiB,EAyBf9T,EAAKkC,MAAQuB,EAAYvB,QAmC7B,OA/DkDF,EAAA6R,EAAA9T,GAgChDrO,OAAAC,eAAIkiB,EAAAjhB,UAAA,WAAQ,KAAZ,WACE,OAA0CjC,KAAK8S,YAAaqI,sCAI9Dpa,OAAAC,eAAIkiB,EAAAjhB,UAAA,kBAAe,KAAnB,WACE,OAA0CjC,KAAK8S,YAAasQ,6CAI9DF,EAAAjhB,UAAA2Z,wBAAA,SAAwBta,EAAY6Z,GAClC3S,OAAO2S,EAAKK,GAAE,IACdxb,KAAKmb,KAAOA,EACZnb,KAAKmjB,kBAAiB,EACtBnjB,KAAKqjB,qBAAuB/hB,EAC5BtB,KAAKiR,IAAItF,EAAAtJ,YAAYsZ,MAAQhQ,EAAAtJ,YAAYihB,QAAU3X,EAAAtJ,YAAY6f,WAIjEgB,EAAAjhB,UAAA6Z,sBAAA,SAAsBxa,EAAY6Z,GAChC3S,OAAO2S,EAAKK,GAAE,IACdxb,KAAKmb,KAAOA,EACZnb,KAAKmjB,kBAAiB,EACtBnjB,KAAKujB,mBAAqBjiB,EAC1BtB,KAAKiR,IAAItF,EAAAtJ,YAAYsZ,MAAQhQ,EAAAtJ,YAAYihB,QAAU3X,EAAAtJ,YAAY6f,WAIjEgB,EAAAjhB,UAAAqgB,OAAA,SAAO1hB,GACL,OAAOZ,KAAKyS,OAAO6P,OAAO1hB,IAE9BsiB,EA/DA,CAAkDlB,GAA5BtiB,EAAAwjB,sBAkEtB,IAAA/C,EAAA,SAAA/Q,GAGE,SAAA+Q,EAEEvf,EAEA6R,EAEAK,EAEAJ,QAAA,IAAAA,MAAiCxD,EAAesC,MARlD,IAAAnC,EAUED,EAAA5O,KAAAR,KACEiP,EAAYuU,UACZ5iB,EACA6R,EACAK,IACD9S,YAMHqP,EAAAoU,aAAoB,EALlBpU,EAAKqD,eAAiBA,EACtBrD,EAAK+L,QAAQvP,EAAAsH,KAAK/P,OAetB,OAnC+BiO,EAAA8O,EAAA/Q,GA2B7BrO,OAAAC,eAAImf,EAAAle,UAAA,YAAS,KAAb,WACE,OAA8BjC,KAAK8S,YAAaxR,uCAIlD6e,EAAAle,UAAAqgB,OAAA,SAAO1hB,GACL,OAAOZ,KAAKyS,OAAO6P,OAAO1hB,IAE9Buf,EAnCA,CAA+B+C,GAAlBxjB,EAAAygB,YAsCb,IAAAzE,EAAA,SAAAtM,GAGE,SAAAsM,EAEE9a,EAEA6R,EAEAC,EAEAI,QAAA,IAAAA,MAAgDL,EAAOiP,QAAQpQ,8BAA8B1Q,IAR/F,IAAAyO,EAUED,EAAA5O,KAAAR,KACEiP,EAAYiO,OACZtc,EACA6R,EACAK,IACD9S,YACDqP,EAAKqD,eAAiBA,IAE1B,OArB4BrB,EAAAqK,EAAAtM,GAqB5BsM,EArBA,CAA4BwH,GAAfxjB,EAAAgc,SAwBb,IAAAgI,EAAA,WAUA,OARE,SAES9iB,EAEAua,EAEAiI,QAAA,IAAAA,MAAA,MAJApjB,KAAAY,OAEAZ,KAAAmb,OAEAnb,KAAAojB,eARX,GAAa1jB,EAAAgkB,YAab,IAAAC,EAAA,SAAAvU,GAGE,SAAAuU,EAEE/iB,EAEOgjB,EAEPzI,EAEA1I,EAEAK,QAAA,IAAAA,MAAgDL,EAAOiP,QAAQpQ,8BAA8B1Q,IAV/F,IAAAyO,EAYED,EAAA5O,KAAAR,KACEiP,EAAY4U,MACZjjB,EACA6R,EACAK,IACD9S,YAbMqP,EAAAuU,QAcPvU,EAAKuU,MAAQA,EACbpb,OAAO2S,GAAQtP,EAAAsH,KAAKG,MACpBjE,EAAK+L,QAAQD,KAEjB,OAzB2B9J,EAAAsS,EAAAvU,GAyB3BuU,EAzBA,CAA2BT,GAAdxjB,EAAAikB,QA4Bb,IAAA/Q,EAAA,SAAAxD,GAWE,SAAAwD,EAEEhS,EAEA6R,EAEAK,EAEAJ,QAAA,IAAAA,MAAiCxD,EAAesC,MARlD,IAAAnC,EAUED,EAAA5O,KAAAR,KACEiP,EAAYsK,mBACZ3Y,EACAiiB,EAAmBjiB,EAAM6R,EAAQK,EAAY0I,GAAG7P,EAAAtJ,YAAY4e,WAC5DxO,EAAOiP,QACPjP,EACAK,IACD9S,YAzBHqP,EAAAoQ,aAA6B/T,EAAasD,QAE1CK,EAAAyU,UAAyC,KAGjCzU,EAAA0U,gBAAuD,KAqB7D1U,EAAKqD,eAAiBA,IAsE1B,OAnGuCrB,EAAAuB,EAAAxD,GAiCrCrO,OAAAC,eAAI4R,EAAA3Q,UAAA,qBAAkB,KAAtB,WACE,OAA6BjC,KAAK8S,YAAagQ,gDAIjD/hB,OAAAC,eAAI4R,EAAA3Q,UAAA,gBAAa,KAAjB,WACE,OAA6BjC,KAAK8S,YAAaN,2CAIjDzR,OAAAC,eAAI4R,EAAA3Q,UAAA,WAAQ,KAAZ,WACE,OAA6BjC,KAAK8S,YAAakR,sCAIjDjjB,OAAAC,eAAI4R,EAAA3Q,UAAA,YAAS,KAAb,WACE,OAA6BjC,KAAK8S,YAAamR,2CAIjDljB,OAAAC,eAAI4R,EAAA3Q,UAAA,UAAO,KAAX,WACE,IAAIwQ,EAASzS,KAAKyS,OAClB,OAAOA,EAAOqC,MAAQ7F,EAAY8L,OAC3BtI,EAAOqC,MAAQ7F,EAAYwL,oBAAsBhI,EAAOA,OAAOqC,MAAQ7F,EAAY8L,uCAI5FnI,EAAA3Q,UAAAiiB,QAAA,SAAQC,GACN3b,OAAOxI,KAAKwb,GAAG7P,EAAAtJ,YAAY4e,WAC3BzY,QAAQxI,KAAK+hB,SACb,IAAIgC,EAAkB/jB,KAAK+jB,gBAC3B,GAAKA,GACA,GAAIA,EAAgBhR,IAAIoR,GAAgB,OAAOJ,EAAgB7iB,IAAIijB,QADlDnkB,KAAK+jB,gBAAkBA,EAAkB,IAAIrU,IAEnE,IAAIoD,EAAc9S,KAAK8S,YAAatK,OAAOsK,EAAYgC,MAAQhJ,EAAAiJ,SAAS6I,mBACxE,IAAIwG,EAAQ,IAAIxR,EACd5S,KAAKY,KACLujB,EACmBrR,EACnB9S,KAAK0S,gBAMP,OAJA0R,EAAM7S,MAAQvR,KAAKuR,MACnB6S,EAAM3E,aAAezf,KAAKyf,aAE1BsE,EAAgB9S,IAAIkT,EAAeC,GAC5BA,GAITxR,EAAA3Q,UAAAoiB,oBAAA,SAAoBC,GAClB,IAAIR,EAAY9jB,KAAK8jB,UACrB,OAAIA,GAAaA,EAAU/Q,IAAIuR,GAA+BR,EAAU5iB,IAAIojB,GACrE,MAIT1R,EAAA3Q,UAAAsiB,oBAAA,SAAoBD,EAAqBE,GACvC,IAAIV,EAAY9jB,KAAK8jB,UAChBA,EACAtb,QAAQsb,EAAU/Q,IAAIuR,IADXtkB,KAAK8jB,UAAYA,EAAY,IAAIpU,IAEjDoU,EAAU7S,IAAIqT,EAAaE,IAI7B5R,EAAA3Q,UAAAqgB,OAAA,SAAO1hB,GACL,OAAOZ,KAAKyS,OAAO6P,OAAO1hB,IAE9BgS,EAnGA,CAAuCoF,GAA1BtY,EAAAkT,oBAsGb,IAAAD,EAAA,SAAAvD,GA+BE,SAAAuD,EAEE8R,EAEAxiB,EAEAuQ,EAEAkS,QAAA,IAAAA,MAAA,MARF,IAAArV,EAUED,EAAA5O,KAAAR,KACEiP,EAAY4L,SACZ4J,EACA5B,EAAmB4B,EAAwBxiB,EAAUwQ,OAAQxQ,EAAUuZ,GAAG7P,EAAAtJ,YAAY4e,WACtFhf,EAAUyf,QACVzf,EAAUwQ,OACVxQ,EAAU6Q,cACX9S,KAOD,GAhDFqP,EAAAsV,aAAkC,IAAIjV,IAEtCL,EAAAuV,cAAyB,GAEzBvV,EAAAwV,iBAA2B,GAM3BxV,EAAAyV,eAA0B,GAE1BzV,EAAA0V,IAAmB,EAEnB1V,EAAA2V,oBAA2B,EAE3B3V,EAAA4V,WAA8B,KAG9B5V,EAAA6V,aAAoB,EAEpB7V,EAAA8V,gBAAuB,EAyFvB9V,EAAA+V,SAA2B,KAC3B/V,EAAAgW,SAA2B,KAC3BhW,EAAAiW,SAA2B,KAC3BjW,EAAAkW,SAA2B,KAC3BlW,EAAAmW,UAA4B,KAG5BnW,EAAAoW,YAAmB,EACnBpW,EAAAqW,WAA2B,KAC3BrW,EAAAsW,WAA4B,KA7E1BtW,EAAKpN,UAAYA,EACjBoN,EAAKmD,UAAYA,EACjBnD,EAAKkC,MAAQtP,EAAUsP,MAAQ5F,EAAAtJ,YAAY6f,SAC3C7S,EAAKqD,eAAiBzQ,EAAUyQ,eAChCrD,EAAKqV,wBAA0BA,EAC/BrV,EAAK8L,KAAOtP,EAAAsH,KAAK1P,IAAImiB,WAAWpT,IAC3BvQ,EAAUuZ,GAAG7P,EAAAtJ,YAAY0e,SAAU,CACtC,IAAI8E,EAAa,EACjB,GAAIxW,EAAKmM,GAAG7P,EAAAtJ,YAAY4e,UAAW,CACjC,IAAI6E,EAAQ,IAAInC,EACdhY,EAAA3I,cAAckC,MACd2gB,IACArd,OAAOgK,EAAUuT,UACjB1W,GAEFA,EAAKsV,aAAa1T,IAAItF,EAAA3I,cAAckC,MAAO4gB,GAC3CzW,EAAKuV,cAAckB,EAAMlC,OAASkC,EAGpC,IADA,IAAIrM,EAAiBjH,EAAUiH,eACtBpZ,EAAI,EAAGoU,EAAIgF,EAAejS,OAAQnH,EAAIoU,IAAKpU,EAAG,CACrD,IAAI2lB,EAAgBvM,EAAepZ,GAC/B4lB,EAAgBzT,EAAU0T,iBAAiB7lB,GAC3CylB,EAAQ,IAAInC,EACdsC,EACAJ,IACAG,EACA3W,GAEFA,EAAKsV,aAAa1T,IAAIgV,EAAeH,GACrCzW,EAAKuV,cAAckB,EAAMlC,OAASkC,UAGtCzW,EAAK8W,KAAOna,EAAAoa,KAAKzkB,OAAO0N,GACxBgX,EAAwBhX,EAAKqS,QAASrS,KAmE1C,OArJ8BgC,EAAAsB,EAAAvD,GAsF5BuD,EAAA1Q,UAAAqkB,SAAA,SAASnL,EAAYva,EAA4BkS,QAA5B,IAAAlS,MAAA,WAA4B,IAAAkS,MAAA,MAE/C,IAAI+S,EAAa7lB,KAAKwS,UAAUiH,eAAejS,OAASxH,KAAK6kB,iBAAiBrd,OAC1ExH,KAAKwb,GAAG7P,EAAAtJ,YAAY4e,aAAa4E,EACrC,IAAI3O,EAAqB,OAATtW,EACZA,EACA,OAASilB,EAAW/b,WACpBgc,EAAQ,IAAInC,EACdzM,EACA2O,EACA1K,EACAnb,KACA8S,GAAe9S,KAAK0hB,QAAQpQ,8BAA8B4F,IAE5D,GAAItW,EAAM,CACR,GAAIZ,KAAK2kB,aAAa5R,IAAInS,GAAO,MAAM,IAAIyY,MAAM,wBACjDrZ,KAAK2kB,aAAa1T,IAAIrQ,EAAMklB,GAI9B,OAFA9lB,KAAK4kB,cAAckB,EAAMlC,OAASkC,EAClC9lB,KAAK6kB,iBAAiBha,KAAKsQ,GACpB2K,GAITnT,EAAA1Q,UAAAqgB,OAAA,SAAO1hB,GACL,IAAI2lB,EAASvmB,KAAK2kB,aAClB,OAAI4B,EAAOxT,IAAInS,GAAc2lB,EAAOrlB,IAAIN,GACjCZ,KAAKyS,OAAO6P,OAAO1hB,IAgB5B+R,EAAA1Q,UAAAukB,SAAA,SAAS7mB,EAAgBolB,GAMvB,GALA/kB,KAAK+kB,IAAMA,EACXvc,QAAQxI,KAAK0lB,aAAe1lB,KAAK0lB,WAAWle,QAC5CxH,KAAK0lB,WAAa,KAClB1lB,KAAK2lB,WAAa,KAClB3lB,KAAKolB,SAAWplB,KAAKqlB,SAAWrlB,KAAKslB,SAAWtlB,KAAKulB,SAAW,KAC5DvlB,KAAK0hB,QAAQzO,QAAQwT,UAEvB,IADA,IAAI3B,EAAiB9kB,KAAK8kB,eACjBzkB,EAAI,EAAGoU,EAAIqQ,EAAetd,OAAQnH,EAAIoU,IAAKpU,EAAG,CACrD,IAAIqmB,EAAgB5B,EAAezkB,GACnCV,EAAOgnB,iBACL5B,EACA2B,EAAcE,aACdF,EAAc3c,OAAO8c,eACrBH,EAAczc,KACdyc,EAAcxc,UAKxByI,EArJA,CAA8BqP,GAAjBtiB,EAAAiT,WAwJb,IAAAmU,EAAA,SAAA1X,GAQE,SAAA0X,EAEEtU,EAEAkP,EACAqF,QAAA,IAAAA,MAAA,IALF,IAAA1X,EAOED,EAAA5O,KAAAR,KACEiP,EAAY+X,gBACZD,EAAM,OAASvU,EAAUyU,oBACzBF,EACArF,EACAA,EAAQ3Q,aACT/Q,YACDqP,EAAKmD,UAAYA,EACjBnD,EAAKkC,MAAQ5F,EAAAtJ,YAAY6f,SACzB7S,EAAK8L,KAAOtP,EAAAsH,KAAK1P,IAAImiB,WAAWpT,KAOpC,OA/BoCnB,EAAAyV,EAAA1X,GA4BlC0X,EAAA7kB,UAAAqgB,OAAA,SAAO1hB,GACL,OAAO,MAEXkmB,EA/BA,CAAoCrF,GAAvB/hB,EAAAonB,iBAkCb,IAAArI,EAAA,SAAArP,GAGE,SAAAqP,EAEE7d,EAEA6R,EAEAK,EAEAJ,QAAA,IAAAA,MAAiCxD,EAAesC,MARlD,IAAAnC,EAUED,EAAA5O,KAAAR,KACEiP,EAAYiY,gBACZtmB,EACAiiB,EAAmBjiB,EAAM6R,EAAQjK,OAAOsK,EAAY0I,GAAG7P,EAAAtJ,YAAY4e,YACnExO,EAAOiP,QACPjP,EACAK,IACD9S,YACDqP,EAAKqD,eAAiBA,IAsB1B,OA3CoCrB,EAAAoN,EAAArP,GAyBlCrO,OAAAC,eAAIyd,EAAAxc,UAAA,WAAQ,KAAZ,WACE,OAA0BjC,KAAK8S,YAAaqI,sCAI9Cpa,OAAAC,eAAIyd,EAAAxc,UAAA,kBAAe,KAAnB,WACE,OAA0BjC,KAAK8S,YAAasQ,6CAI9CriB,OAAAC,eAAIyd,EAAAxc,UAAA,iBAAc,KAAlB,WACE,OAA0BjC,KAAK8S,YAAaqU,gDAI9C1I,EAAAxc,UAAAqgB,OAAA,SAAO1hB,GACL,OAAOZ,KAAKyS,OAAO6P,OAAO1hB,IAE9B6d,EA3CA,CAAoCzG,GAAvBtY,EAAA+e,iBA8Cb,IAAA2I,EAAA,SAAAhY,GAQE,SAAAgY,EAEEnlB,EAEAwQ,EAEA0I,GANF,IAAA9L,EAQED,EAAA5O,KAAAR,KACEiP,EAAY6L,MACZ7Y,EAAUrB,KACV6R,EACkCxQ,EAAU6Q,cAC7C9S,YAhBHqP,EAAAgY,cAAqB,EAiBnBhY,EAAKpN,UAAYA,EACjBoN,EAAKkC,MAAQtP,EAAUsP,MACvB/I,OAAO2S,GAAQtP,EAAAsH,KAAKG,MACpBjE,EAAK+L,QAAQD,GACbkL,EAAwBhX,EAAKqS,QAASrS,KAE1C,OA5B2BgC,EAAA+V,EAAAhY,GA4B3BgY,EA5BA,CAA2BlE,GAAdxjB,EAAA0nB,QA+Bb,IAAAtH,EAAA,SAAA1Q,GAQE,SAAA0Q,EAEElf,EAEA6R,EAEA6U,GANF,IAAAjY,EAQED,EAAA5O,KAAAR,KACEiP,EAAYwL,mBACZ7Z,EACAiiB,EAAmBjiB,EAAM6R,EAAQ6U,EAAiB9L,GAAG7P,EAAAtJ,YAAY4e,WACjExO,EAAOiP,QACPjP,EACA6U,IACDtnB,YApBHqP,EAAAqL,gBAA4C,KAE5CrL,EAAAsL,gBAA4C,KAmB1CtL,EAAKkC,SAAW5F,EAAAtJ,YAAYyb,IAAMnS,EAAAtJ,YAAY0b,OAOlD,OA/BuC1M,EAAAyO,EAAA1Q,GA4BrC0Q,EAAA7d,UAAAqgB,OAAA,SAAO1hB,GACL,OAAOZ,KAAKyS,OAAO6P,OAAO1hB,IAE9Bkf,EA/BA,CAAuC9H,GAA1BtY,EAAAogB,oBAkCb,IAAAyH,EAAA,SAAAnY,GAUE,SAAAmY,EAEEtlB,EAEAwQ,GAJF,IAAApD,EAMED,EAAA5O,KAAAR,KACEiP,EAAY2L,SACZ3Y,EAAUrB,KACV6R,EACAxQ,EAAUyf,QAAQpQ,8BAChBrP,EAAUrB,KACVqB,EAAUuZ,GAAG7P,EAAAtJ,YAAY4e,UACrBtV,EAAAtJ,YAAY4e,SACZtV,EAAAtJ,YAAYmP,QAEnBxR,YArBHqP,EAAAmY,eAAkC,KAElCnY,EAAAoY,eAAkC,KAoBhCpY,EAAKpN,UAAYA,EACjBokB,EAAwBhX,EAAKqS,QAASrS,KAO1C,OAnC8BgC,EAAAkW,EAAAnY,GAgC5BmY,EAAAtlB,UAAAqgB,OAAA,SAAO1hB,GACL,OAAOZ,KAAKyS,OAAO6P,OAAO1hB,IAE9B2mB,EAnCA,CAA8BrE,GAAjBxjB,EAAA6nB,WAsCb,IAAAtK,EAAA,SAAA7N,GAaE,SAAA6N,EAEErc,EAEA6R,EAEAK,EAEAJ,EACAgV,QADA,IAAAhV,MAAiCxD,EAAesC,WAChD,IAAAkW,OAAA,GATF,IAAArY,EAWED,EAAA5O,KAAAR,KACE0nB,EAAezY,EAAYmP,oBAAsBnP,EAAYqJ,gBAC7D1X,EACAiiB,EAAmBjiB,EAAM6R,EAAQK,EAAY0I,GAAG7P,EAAAtJ,YAAY4e,WAC5DxO,EAAOiP,QACPjP,EACAK,IACD9S,YA5BHqP,EAAAgL,gBAA8C,KAE9ChL,EAAAkJ,cAAuC,KAEvClJ,EAAAsY,qBAAiD,KAEjDtY,EAAAkQ,mBAA2D,IAAI7P,IAE/DL,EAAAyU,UAAsC,KAqBpCzU,EAAKqD,eAAiBA,IAoE1B,OApGoCrB,EAAA4L,EAAA7N,GAoClCrO,OAAAC,eAAIic,EAAAhb,UAAA,qBAAkB,KAAtB,WACE,OAA0BjC,KAAK8S,YAAagQ,gDAG9C/hB,OAAAC,eAAIic,EAAAhb,UAAA,cAAW,KAAf,WACE,OAA0BjC,KAAK8S,YAAayK,6CAG9Cxc,OAAAC,eAAIic,EAAAhb,UAAA,kBAAe,KAAnB,WACE,OAA0BjC,KAAK8S,YAAaqK,iDAI9CF,EAAAhb,UAAA2lB,QAAA,SAAQC,GACN,IAAIjG,EAAiC5hB,KACrC,GACE,GAAI4hB,IAAYiG,EAAe,OAAO,QAC/BjG,EAAUA,EAAQrJ,eAC3B,OAAO,GAIT0E,EAAAhb,UAAAyc,YAAA,SAAY9d,EAAcmW,GACxB,IAAI8K,EAAsB9K,EAAQjE,YAC9BuH,EAAkBra,KAAKqa,gBAC3B,GAAKA,GACA,GAAIA,EAAgBtH,IAAInS,GAAO,CAClC,IAAIob,EAASC,EAAS5B,EAAgBnZ,IAAIN,GAAQmW,GAClD,IAAKiF,EAKH,OAJAhc,KAAK0hB,QAAQlW,MACXI,EAAA/C,eAAeqT,uBACfnF,EAAQ4B,eAAexP,MAAO4N,EAAQ4B,eAAetO,OAEhD,EAET0M,EAAUiF,QAVUhc,KAAKqa,gBAAkBA,EAAkB,IAAI3K,IAiBnE,OALA2K,EAAgBpJ,IAAIrQ,EAAMmW,GACtBA,EAAQyE,GAAG7P,EAAAtJ,YAAYoR,SAAWzT,KAAKwb,GAAG7P,EAAAtJ,YAAY+X,gBACxDrD,EAAQ9F,IAAItF,EAAAtJ,YAAY+X,eAE1Bpa,KAAK0hB,QAAQ9R,sBAAsBqB,IAAI4Q,EAAqB9K,IACrD,GAITkG,EAAAhb,UAAAoiB,oBAAA,SAAoBC,GAClB,IAAIR,EAAY9jB,KAAK8jB,UACrB,OAAIA,GAAaA,EAAU/Q,IAAIuR,GAA4BR,EAAU5iB,IAAIojB,GAClE,MAITrH,EAAAhb,UAAAsiB,oBAAA,SAAoBD,EAAqBE,GACvC,IAAIV,EAAY9jB,KAAK8jB,UAChBA,EACAtb,QAAQsb,EAAU/Q,IAAIuR,IADXtkB,KAAK8jB,UAAYA,EAAY,IAAIpU,IAEjDoU,EAAU7S,IAAIqT,EAAaE,IAI7BvH,EAAAhb,UAAAqgB,OAAA,SAAO1hB,GACL,OAAOZ,KAAKyS,OAAO6P,OAAO1hB,IAE9Bqc,EApGA,CAAoCjF,GAAvBtY,EAAAud,iBAuGb,IAAA6K,EAAA,SAAA1Y,GAoBE,SAAA0Y,EAEErD,EAEAxiB,EAEA8lB,EAEAC,EACAN,gBAHA,IAAAK,MAAA,WAEA,IAAAC,MAAA,WACA,IAAAN,OAAA,GATF,IAAArY,EAWED,EAAA5O,KAAAR,KACE0nB,EAAezY,EAAYgZ,UAAYhZ,EAAY8L,MACnD0J,EACA5B,EAAmB4B,EAAwBxiB,EAAUwQ,OAAQxQ,EAAUuZ,GAAG7P,EAAAtJ,YAAY4e,WACtFhf,EAAUyf,QACVzf,EAAUwQ,OACVxQ,EAAU6Q,cACX9S,KASD,GAtCFqP,EAAAqV,wBAAmD,KAEnDrV,EAAA6Y,oBAA2B,EAE3B7Y,EAAA8Y,oBAAuC,KAEvC9Y,EAAAiQ,UAA+C,KAE/CjQ,EAAA+Y,aAAyB,EAsBvB/Y,EAAKpN,UAAYA,EACjBoN,EAAKkC,MAAQtP,EAAUsP,MACvBlC,EAAKqD,eAAiBzQ,EAAUyQ,eAChCrD,EAAK0Y,cAAgBA,EACrB1Y,EAAK+L,QAAQ/L,EAAKqS,QAAQzO,QAAQI,UAAUgV,QAAQhZ,IACpDA,EAAK2Y,KAAOA,EAGRA,EAAM,CACR,IAAIM,EAAyBN,EAAKtD,wBAClC,GAAI4D,EAAwB,CAC1B,IAAI5D,EAA0BrV,EAAKqV,4BACnC,IAAiC,IAAA6D,EAAArS,EAAAoS,GAAsBE,EAAAD,EAAAnS,QAAAoS,EAAAnS,KAAAmS,EAAAD,EAAAnS,OAAE,CAAhD,IAAAsM,EAAAnM,EAAAiS,EAAAlnB,MAAA,GAACmnB,EAAA/F,EAAA,GAAUgG,EAAAhG,EAAA,GACbgC,IAAyBrV,EAAKqV,wBAA0BA,EAA0B,IAAIhV,KAC3FgV,EAAwBzT,IAAIwX,EAAUC,uGAM5C,IAAI5F,EAAiB7gB,EAAU0mB,mBAC/B,GAAIZ,EAAe,CACjB,IAAIa,EAAmBb,EAAcvgB,OACrC,IAAKsb,GAAkB8F,GAAoB9F,EAAetb,OACxD,MAAM,IAAI6R,MAAM,gCAElB,GAAIuP,EAAkB,CACfvZ,EAAKqV,0BAAyBrV,EAAKqV,wBAA0B,IAAIhV,KACtE,IAAK,IAAIrP,EAAI,EAAGA,EAAIuoB,IAAoBvoB,EACtCgP,EAAKqV,wBAAwBzT,IAAI6R,EAAeziB,GAAGO,KAAKyJ,KAAM0d,EAAc1nB,UAG3E,GAAIyiB,GAAkBA,EAAetb,OAC1C,MAAM,IAAI6R,MAAM,uCAElBgN,EAAwBhX,EAAKqS,QAASrS,KAoD1C,OA9H2BgC,EAAAyW,EAAA1Y,GA8EzB0Y,EAAA7lB,UAAA4mB,eAAA,SAAeC,GACb,IAAIlH,EAAwB5hB,KAC5B,GAAG,GAAI4hB,GAAWkH,EAAQ,OAAO,QAC1BlH,EAAUA,EAAQoG,MACzB,OAAO,GAITF,EAAA7lB,UAAA8mB,eAAA,SAAejU,EAAoBkU,GACjC,QADiC,IAAAA,OAAA,GAC7BA,EACF,OAAQlU,GACN,KAAKpJ,EAAasB,YAEhB,GADIic,EAAoBjpB,KAAK+oB,eAAerd,EAAawB,uBAClC,OAAO+b,EAC9B,MAEF,KAAKvd,EAAauB,YAChB,IAAIgc,EACJ,GADIA,EAAoBjpB,KAAK+oB,eAAerd,EAAayB,uBAClC,OAAO8b,EAC9B,MAEF,QAASzgB,QAAO,GAGpB,IAAIgc,EAAyBxkB,KAC7B,EAAG,CACD,IAAIsf,EAAYkF,EAASlF,UACzB,GAAIA,EAAW,CACb,IAAI4J,EAAW5J,EAAUpe,IAAI4T,GAC7B,GAAIoU,EAAU,OAAOA,SAEhB1E,EAAWA,EAASwD,MAC7B,OAAO,MAITF,EAAA7lB,UAAAqgB,OAAA,SAAO1hB,GACL,OAAOZ,KAAKyS,OAAO6P,OAAO1hB,IAI5BknB,EAAA7lB,UAAAknB,SAAA,SAASC,GACP,IAAIpO,EAAUxS,OAAOxI,KAAKgb,SAC1BxS,OAAOwS,EAAQjI,IAAIqW,IACnB,IAAIC,EAAiBrO,EAAQ9Z,IAAIkoB,GAEjC,OADA5gB,OAAO6gB,EAAMvU,MAAQ7F,EAAY6L,OAClBuO,EAAOhC,cAE1BS,EA9HA,CAA2B9F,GAAdtiB,EAAAooB,QAiIb,IAAAxG,EAAA,SAAAlS,GAGE,SAAAkS,EACE1gB,EACA6R,EACAK,EACAJ,UAEAtD,EAAA5O,KAAAR,KACEY,EACA6R,EACAK,EACAJ,GACA,IACD1S,KAEL,OAjBwCqR,EAAAiQ,EAAAlS,GAiBxCkS,EAjBA,CAAwCrE,GAA3Bvd,EAAA4hB,qBAoBb,IAAAgI,EAAA,SAAAla,GAGE,SAAAka,EACE7E,EACAxiB,EACA8lB,EACAC,eADA,IAAAD,MAAA,SACA,IAAAC,MAAA,MAEA5Y,EAAA5O,KAAAR,KACEykB,EACAxiB,EACA8lB,EACAC,GACA,IACDhoB,KAEL,OAjB+BqR,EAAAiY,EAAAla,GAiB/Bka,EAjBA,CAA+BxB,GAoB/B,SAASzB,EAAwB3E,EAAkB3K,GACjDvO,QAAQkZ,EAAQ7R,gBAAgBkD,IAAIgE,EAAQ7F,eAC5CwQ,EAAQ7R,gBAAgBoB,IAAI8F,EAAQ7F,aAAc6F,GAIpD,SAASkF,EAASsN,EAAgBC,GAGhChhB,OAAO+gB,EAAM7H,UAAY8H,EAAM9H,SAC/BlZ,QAAQghB,EAAMxO,SACd,IAAIgB,EAAiC,KACrC,OAAQuN,EAAMzU,MACZ,KAAK7F,EAAYsK,mBACf,OAAQiQ,EAAM1U,MACZ,KAAK7F,EAAY8T,UACf0G,EAAYD,EAAOD,GACnBvN,EAA0BuN,EAC1B,MAEF,KAAKta,EAAY2T,eACV2G,EAAM5H,aACT4H,EAAM5H,WAA6B6H,EACnCC,EAAYD,EAAOD,GACnBvN,EAA0BuN,GAKhC,MAEF,KAAKta,EAAYqJ,gBACjB,KAAKrJ,EAAY+T,KACf,GAAIwG,EAAM1U,MAAQ7F,EAAY8T,UAAW,CACvC0G,EAAYD,EAAOD,GACnBvN,EAA0BuN,EAC1B,MAEF,MAEF,KAAKta,EAAY8T,UACf,OAAQyG,EAAM1U,MACZ,KAAK7F,EAAY+T,KACjB,KAAK/T,EAAYqJ,gBACjB,KAAKrJ,EAAYsK,mBACfkQ,EAAYF,EAAOC,GACnBxN,EAA0BwN,EAC1B,MAEF,KAAKva,EAAY8T,UACf0G,EAAYD,EAAOD,GACnBvN,EAA0BuN,EAC1B,MAEF,KAAKta,EAAY2T,eACV2G,EAAM5H,aACT4H,EAAM5H,WAA6B6H,EACnCC,EAAYD,EAAOD,GACnBvN,EAA0BuN,GAKhC,MAEF,KAAKta,EAAYiO,OACXsM,EAAM1U,MAAQ7F,EAAY2T,iBACvB2G,EAAM5H,aACT4H,EAAM5H,WAA6B6H,EACnCC,EAAYD,EAAOD,GACnBvN,EAA0BuN,IAG9B,MAEF,KAAKta,EAAY2T,eACf,OAAQ4G,EAAM1U,MACZ,KAAK7F,EAAYiO,OACjB,KAAKjO,EAAYsK,mBACjB,KAAKtK,EAAY8T,UACVyG,EAAM7H,aACT6H,EAAM7H,WAA6B4H,EACnCE,EAAYF,EAAOC,GACnBxN,EAA0BwN,IAgBpC,OARIxN,GACEuN,EAAM/N,GAAG7P,EAAAtJ,YAAYoR,SAAW+V,EAAMhO,GAAG7P,EAAAtJ,YAAYoR,SACvD8V,EAAM7H,QAAQlW,MACZI,EAAA/C,eAAe6gB,kFACf1N,EAAOrD,eAAexP,MAAO6S,EAAOrD,eAAetO,MAIlD2R,EAIT,SAASyN,EAAYE,EAAcC,WAC7BC,EAAaF,EAAI3O,QACrB,GAAI6O,EAAY,CACd,IAAIC,EAAcF,EAAK5O,QAClB8O,IAAaF,EAAK5O,QAAU8O,EAAc,IAAIpa,SACnD,IAAiC,IAAAqa,EAAA7T,EAAA2T,GAAUG,EAAAD,EAAA3T,QAAA4T,EAAA3T,KAAA2T,EAAAD,EAAA3T,OAAE,CAApC,IAAAsM,EAAAnM,EAAAyT,EAAA1oB,MAAA,GAACqhB,EAAAD,EAAA,GAAYlI,EAAAkI,EAAA,GACpBoH,EAAY7Y,IAAI0R,EAAYnI,uGAMlC,SAAgBqI,EAAmBjiB,EAAc6R,EAAiBwX,EAAkBC,GAClF,YADkF,IAAAA,OAAA,GAC1EzX,EAAOqC,MACb,KAAK7F,EAAYiS,KACf,OAAIgJ,EAAiBtpB,EACd6R,EAAOvB,aAAevF,EAAArJ,eAAiB1B,EAEhD,KAAKqO,EAAY4L,SACf,OAAIqP,EAAiBtpB,GACrB4H,QAAQyhB,GACDxX,EAAOvB,aAAevF,EAAA/I,gBAAkBhC,GAEjD,QACE,OAAOiiB,EAAmBpQ,EAAO7R,KAAM6R,EAAOA,OAAQA,EAAO+I,GAAG7P,EAAAtJ,YAAY4e,UAAWiJ,IAC/ED,EAAate,EAAAjJ,mBAAqBiJ,EAAAhJ,kBAAoB/B,GApJvDlB,EAAA4pB,YAuIb5pB,EAAAmjB,sSC/lGA,IAeYsH,EAWAC,EA1BZC,EAAAlqB,EAAA,KAeA,SAAYgqB,GACVA,IAAA,KAAOG,qBAAmB,OAC1BH,IAAA,IAAOI,sBAAoB,MAC3BJ,IAAA,IAAOK,sBAAoB,MAC3BL,IAAA,IAAOM,wBAAsB,MAC7BN,IAAA,IAAOO,wBAAsB,MAC7BP,IAAA,KAAOQ,uBAAqB,OAC5BR,IAAA,YAAcS,4BAA0B,cACxCT,IAAA,KAAOU,qBAAmB,OAR5B,CAAYV,EAAAzqB,EAAAyqB,aAAAzqB,EAAAyqB,WAAU,KAWtB,SAAYC,GACVA,IAAA,QAAUU,sBAAoB,UAC9BV,IAAA,MAAQW,oBAAkB,QAC1BX,IAAA,GAAKY,iBAAe,KACpBZ,IAAA,KAAOa,mBAAiB,OACxBb,IAAA,MAAQc,oBAAkB,QAC1Bd,IAAA,OAASe,qBAAmB,SAC5Bf,IAAA,KAAOgB,mBAAiB,OACxBhB,IAAA,aAAeiB,2BAAyB,eACxCjB,IAAA,SAAWkB,uBAAqB,WAChClB,IAAA,SAAWmB,uBAAqB,WAChCnB,IAAA,UAAYoB,wBAAsB,YAClCpB,IAAA,UAAYqB,wBAAsB,YAClCrB,IAAA,KAAOsB,mBAAiB,OACxBtB,IAAA,MAAQuB,oBAAkB,QAC1BvB,IAAA,MAAQwB,oBAAkB,QAC1BxB,IAAA,MAAQyB,oBAAkB,QAC1BzB,IAAA,OAAS0B,qBAAmB,SAC5B1B,IAAA,OAAS2B,qBAAmB,SAC5B3B,IAAA,KAAO4B,mBAAiB,OACxB5B,IAAA,OAAS6B,qBAAmB,SAC5B7B,IAAA,KAAO8B,mBAAiB,OACxB9B,IAAA,IAAM+B,kBAAgB,MACtB/B,IAAA,YAAcgC,0BAAwB,cACtChC,IAAA,cAAgBiC,4BAA0B,gBAC1CjC,IAAA,UAAYkC,wBAAsB,YAClClC,IAAA,WAAamC,yBAAuB,aACpCnC,IAAA,WAAaoC,yBAAuB,aACpCpC,IAAA,YAAcqC,0BAAwB,cACtCrC,IAAA,YAAcsC,0BAAwB,cACtCtC,IAAA,YAAcuC,0BAAwB,cACtCvC,IAAA,cAAgBwC,4BAA0B,gBAC1CxC,IAAA,UAAYyC,wBAAsB,YAClCzC,IAAA,WAAa0C,yBAAuB,aACpC1C,IAAA,SAAW2C,uBAAqB,WAChC3C,IAAA,WAAa4C,yBAAuB,aACpC5C,IAAA,WAAa6C,yBAAuB,aApCtC,CAAY7C,EAAA1qB,EAAA0qB,eAAA1qB,EAAA0qB,aAAY,KAuCxB,SAAY8C,GACVA,IAAA,OAASC,qBAAmB,SAC5BD,IAAA,OAASE,qBAAmB,SAC5BF,IAAA,UAAYG,wBAAsB,YAClCH,IAAA,OAASI,uBAAqB,SAC9BJ,IAAA,OAASK,uBAAqB,SAC9BL,IAAA,QAAUM,wBAAsB,UAChCN,IAAA,SAAWO,yBAAuB,WAClCP,IAAA,SAAWQ,yBAAuB,WAClCR,IAAA,WAAaS,2BAAyB,aACtCT,IAAA,QAAUU,wBAAsB,UAChCV,IAAA,OAASW,qBAAmB,SAC5BX,IAAA,OAASY,qBAAmB,SAC5BZ,IAAA,OAASa,qBAAmB,SAC5Bb,IAAA,UAAYc,wBAAsB,YAClCd,IAAA,OAASe,uBAAqB,SAC9Bf,IAAA,OAASgB,uBAAqB,SAC9BhB,IAAA,QAAUiB,wBAAsB,UAChCjB,IAAA,SAAWkB,yBAAuB,WAClClB,IAAA,SAAWmB,yBAAuB,WAClCnB,IAAA,WAAaoB,2BAAyB,aACtCpB,IAAA,QAAUqB,wBAAsB,UAChCrB,IAAA,OAASsB,qBAAmB,SAC5BtB,IAAA,UAAYuB,yBAAuB,YACnCvB,IAAA,UAAYwB,yBAAuB,YACnCxB,IAAA,QAAUyB,sBAAoB,UAC9BzB,IAAA,cAAgB0B,iCAA+B,gBAC/C1B,IAAA,cAAgB2B,iCAA+B,gBAC/C3B,IAAA,cAAgB4B,iCAA+B,gBAC/C5B,IAAA,cAAgB6B,iCAA+B,gBAC/C7B,IAAA,cAAgB8B,iCAA+B,gBAC/C9B,IAAA,cAAgB+B,iCAA+B,gBAC/C/B,IAAA,cAAgBgC,iCAA+B,gBAC/ChC,IAAA,cAAgBiC,iCAA+B,gBAC/CjC,IAAA,eAAiBkC,+BAA6B,iBAC9ClC,IAAA,eAAiBmC,+BAA6B,iBAC9CnC,IAAA,gBAAkBoC,mCAAiC,kBACnDpC,IAAA,gBAAkBqC,mCAAiC,kBACnDrC,IAAA,gBAAkBsC,mCAAiC,kBACnDtC,IAAA,gBAAkBuC,mCAAiC,kBACnDvC,IAAA,gBAAkBwC,mCAAiC,kBACnDxC,IAAA,gBAAkByC,mCAAiC,kBACnDzC,IAAA,gBAAkB0C,mCAAiC,kBACnD1C,IAAA,gBAAkB2C,mCAAiC,kBACnD3C,IAAA,WAAa4C,2BAAyB,aACtC5C,IAAA,UAAY6C,0BAAwB,YACpC7C,IAAA,eAAiB8C,6BAA2B,iBAC5C9C,IAAA,eAAiB+C,6BAA2B,iBAG5C/C,IAAA,cAAgBgD,0BAAwB,gBACxChD,IAAA,eAAiBiD,2BAAyB,iBAC1CjD,IAAA,cAAgBkD,0BAAwB,gBACxClD,IAAA,eAAiBmD,2BAAyB,iBAC1CnD,IAAA,eAAiBoD,2BAAyB,iBAa1CpD,IAAA,cAAgBqD,0BAAwB,gBACxCrD,IAAA,cAAgBsD,0BAAwB,gBACxCtD,IAAA,cAAgBuD,0BAAwB,gBACxCvD,IAAA,cAAgBwD,0BAAwB,gBACxCxD,IAAA,cAAgByD,0BAAwB,gBACxCzD,IAAA,cAAgB0D,0BAAwB,gBACxC1D,IAAA,UAAY2D,sBAAoB,YAChC3D,IAAA,YAAc4D,wBAAsB,cACpC5D,IAAA,gBAAkB6D,4BAA0B,kBAC5C7D,IAAA,gBAAkB8D,4BAA0B,kBAC5C9D,IAAA,YAAc+D,wBAAsB,cACpC/D,IAAA,gBAAkBgE,4BAA0B,kBAC5ChE,IAAA,gBAAkBiE,4BAA0B,kBAC5CjE,IAAA,YAAckE,wBAAsB,cACpClE,IAAA,gBAAkBmE,4BAA0B,kBAC5CnE,IAAA,gBAAkBoE,4BAA0B,kBAC5CpE,IAAA,YAAcqE,wBAAsB,cACpCrE,IAAA,gBAAkBsE,4BAA0B,kBAC5CtE,IAAA,gBAAkBuE,4BAA0B,kBAC5CvE,IAAA,YAAcwE,wBAAsB,cACpCxE,IAAA,YAAcyE,wBAAsB,cACpCzE,IAAA,aAAe0E,yBAAuB,eACtC1E,IAAA,YAAc2E,wBAAsB,cACpC3E,IAAA,YAAc4E,wBAAsB,cACpC5E,IAAA,aAAe6E,yBAAuB,eACtC7E,IAAA,4BAA8B8E,wCAAsC,8BACpE9E,IAAA,4BAA8B+E,wCAAsC,8BACpE/E,IAAA,4BAA8BgF,wCAAsC,8BACpEhF,IAAA,4BAA8BiF,wCAAsC,8BACpEjF,IAAA,2BAA6BkF,uCAAqC,6BAClElF,IAAA,2BAA6BmF,uCAAqC,6BAClEnF,IAAA,2BAA6BoF,uCAAqC,6BAClEpF,IAAA,2BAA6BqF,uCAAqC,6BAnGpE,CAAY7yB,EAAAwtB,UAAAxtB,EAAAwtB,QAAO,KAsGnB,SAAYsF,GACVA,IAAA,OAASC,qBAAmB,SAC5BD,IAAA,OAASE,qBAAmB,SAC5BF,IAAA,OAASG,qBAAmB,SAC5BH,IAAA,OAASI,sBAAoB,SAC7BJ,IAAA,OAASK,sBAAoB,SAC7BL,IAAA,OAASM,sBAAoB,SAC7BN,IAAA,OAASO,sBAAoB,SAC7BP,IAAA,OAASQ,qBAAmB,SAC5BR,IAAA,MAAQS,oBAAkB,QAC1BT,IAAA,OAASU,qBAAmB,SAC5BV,IAAA,OAASW,qBAAmB,SAC5BX,IAAA,OAASY,sBAAoB,SAC7BZ,IAAA,OAASa,sBAAoB,SAC7Bb,IAAA,QAAUc,sBAAoB,UAC9Bd,IAAA,QAAUe,sBAAoB,UAC9Bf,IAAA,MAAQgB,oBAAkB,QAC1BhB,IAAA,MAAQiB,oBAAkB,QAC1BjB,IAAA,MAAQkB,qBAAmB,QAC3BlB,IAAA,MAAQmB,qBAAmB,QAC3BnB,IAAA,MAAQoB,qBAAmB,QAC3BpB,IAAA,MAAQqB,qBAAmB,QAC3BrB,IAAA,MAAQsB,qBAAmB,QAC3BtB,IAAA,MAAQuB,qBAAmB,QAC3BvB,IAAA,MAAQwB,qBAAmB,QAC3BxB,IAAA,MAAQyB,qBAAmB,QAC3BzB,IAAA,OAAS0B,qBAAmB,SAC5B1B,IAAA,OAAS2B,qBAAmB,SAC5B3B,IAAA,OAAS4B,qBAAmB,SAC5B5B,IAAA,OAAS6B,sBAAoB,SAC7B7B,IAAA,OAAS8B,sBAAoB,SAC7B9B,IAAA,OAAS+B,sBAAoB,SAC7B/B,IAAA,OAASgC,sBAAoB,SAC7BhC,IAAA,OAASiC,qBAAmB,SAC5BjC,IAAA,MAAQkC,oBAAkB,QAC1BlC,IAAA,OAASmC,qBAAmB,SAC5BnC,IAAA,OAASoC,qBAAmB,SAC5BpC,IAAA,OAASqC,sBAAoB,SAC7BrC,IAAA,OAASsC,sBAAoB,SAC7BtC,IAAA,QAAUuC,sBAAoB,UAC9BvC,IAAA,QAAUwC,sBAAoB,UAC9BxC,IAAA,MAAQyC,oBAAkB,QAC1BzC,IAAA,MAAQ0C,oBAAkB,QAC1B1C,IAAA,MAAQ2C,qBAAmB,QAC3B3C,IAAA,MAAQ4C,qBAAmB,QAC3B5C,IAAA,MAAQ6C,qBAAmB,QAC3B7C,IAAA,MAAQ8C,qBAAmB,QAC3B9C,IAAA,MAAQ+C,qBAAmB,QAC3B/C,IAAA,MAAQgD,qBAAmB,QAC3BhD,IAAA,MAAQiD,qBAAmB,QAC3BjD,IAAA,MAAQkD,qBAAmB,QAC3BlD,IAAA,OAASmD,uBAAqB,SAC9BnD,IAAA,OAASoD,uBAAqB,SAC9BpD,IAAA,OAASqD,uBAAqB,SAC9BrD,IAAA,OAASsD,uBAAqB,SAC9BtD,IAAA,YAAcuD,4BAA0B,cACxCvD,IAAA,OAASwD,uBAAqB,SAC9BxD,IAAA,OAASyD,uBAAqB,SAC9BzD,IAAA,MAAQ0D,sBAAoB,QAC5B1D,IAAA,MAAQ2D,sBAAoB,QAC5B3D,IAAA,MAAQ4D,sBAAoB,QAC5B5D,IAAA,MAAQ6D,sBAAoB,QAC5B7D,IAAA,MAAQ8D,sBAAoB,QAC5B9D,IAAA,MAAQ+D,sBAAoB,QAC5B/D,IAAA,OAASgE,uBAAqB,SAC9BhE,IAAA,OAASiE,uBAAqB,SAC9BjE,IAAA,OAASkE,uBAAqB,SAC9BlE,IAAA,OAASmE,uBAAqB,SAC9BnE,IAAA,YAAcoE,4BAA0B,cACxCpE,IAAA,OAASqE,uBAAqB,SAC9BrE,IAAA,OAASsE,uBAAqB,SAC9BtE,IAAA,MAAQuE,sBAAoB,QAC5BvE,IAAA,MAAQwE,sBAAoB,QAC5BxE,IAAA,MAAQyE,sBAAoB,QAC5BzE,IAAA,MAAQ0E,sBAAoB,QAC5B1E,IAAA,MAAQ2E,sBAAoB,QAC5B3E,IAAA,MAAQ4E,sBAAoB,QAG5B5E,IAAA,WAAa6E,uBAAqB,aAClC7E,IAAA,WAAa8E,uBAAqB,aAClC9E,IAAA,YAAc+E,wBAAsB,cACpC/E,IAAA,YAAcgF,wBAAsB,cACpChF,IAAA,YAAciF,wBAAsB,cACpCjF,IAAA,YAAckF,wBAAsB,cACpClF,IAAA,YAAcmF,wBAAsB,cACpCnF,IAAA,YAAcoF,wBAAsB,cACpCpF,IAAA,YAAcqF,wBAAsB,cACpCrF,IAAA,YAAcsF,wBAAsB,cACpCtF,IAAA,WAAauF,uBAAqB,aAClCvF,IAAA,WAAawF,uBAAqB,aAClCxF,IAAA,YAAcyF,wBAAsB,cACpCzF,IAAA,YAAc0F,wBAAsB,cACpC1F,IAAA,YAAc2F,wBAAsB,cACpC3F,IAAA,YAAc4F,wBAAsB,cACpC5F,IAAA,YAAc6F,wBAAsB,cACpC7F,IAAA,YAAc8F,wBAAsB,cACpC9F,IAAA,YAAc+F,wBAAsB,cACpC/F,IAAA,YAAcgG,wBAAsB,cACpChG,IAAA,WAAaiG,uBAAqB,aAClCjG,IAAA,WAAakG,uBAAqB,aAClClG,IAAA,YAAcmG,wBAAsB,cACpCnG,IAAA,YAAcoG,wBAAsB,cACpCpG,IAAA,YAAcqG,wBAAsB,cACpCrG,IAAA,YAAcsG,wBAAsB,cACpCtG,IAAA,YAAcuG,wBAAsB,cACpCvG,IAAA,YAAcwG,wBAAsB,cACpCxG,IAAA,YAAcyG,wBAAsB,cACpCzG,IAAA,YAAc0G,wBAAsB,cACpC1G,IAAA,WAAa2G,uBAAqB,aAClC3G,IAAA,WAAa4G,uBAAqB,aAClC5G,IAAA,WAAa6G,uBAAqB,aAClC7G,IAAA,WAAa8G,uBAAqB,aAClC9G,IAAA,WAAa+G,uBAAqB,aAClC/G,IAAA,WAAagH,uBAAqB,aAClChH,IAAA,WAAaiH,uBAAqB,aAClCjH,IAAA,WAAakH,uBAAqB,aAClClH,IAAA,WAAamH,uBAAqB,aAClCnH,IAAA,WAAaoH,uBAAqB,aAClCpH,IAAA,WAAaqH,uBAAqB,aAClCrH,IAAA,WAAasH,uBAAqB,aAClCtH,IAAA,UAAYuH,sBAAoB,YAChCvH,IAAA,SAAWwH,qBAAmB,WAC9BxH,IAAA,UAAYyH,sBAAoB,YAChCzH,IAAA,YAAc0H,wBAAsB,cACpC1H,IAAA,gBAAkB2H,4BAA0B,kBAC5C3H,IAAA,gBAAkB4H,4BAA0B,kBAC5C5H,IAAA,YAAc6H,wBAAsB,cACpC7H,IAAA,gBAAkB8H,4BAA0B,kBAC5C9H,IAAA,gBAAkB+H,4BAA0B,kBAC5C/H,IAAA,YAAcgI,wBAAsB,cACpChI,IAAA,YAAciI,wBAAsB,cACpCjI,IAAA,gBAAkBkI,4BAA0B,kBAC5ClI,IAAA,gBAAkBmI,4BAA0B,kBAC5CnI,IAAA,YAAcoI,wBAAsB,cACpCpI,IAAA,gBAAkBqI,4BAA0B,kBAC5CrI,IAAA,gBAAkBsI,4BAA0B,kBAC5CtI,IAAA,YAAcuI,wBAAsB,cACpCvI,IAAA,YAAcwI,wBAAsB,cACpCxI,IAAA,YAAcyI,wBAAsB,cACpCzI,IAAA,YAAc0I,wBAAsB,cACpC1I,IAAA,YAAc2I,wBAAsB,cACpC3I,IAAA,YAAc4I,wBAAsB,cACpC5I,IAAA,YAAc6I,wBAAsB,cACpC7I,IAAA,YAAc8I,wBAAsB,cACpC9I,IAAA,YAAc+I,wBAAsB,cACpC/I,IAAA,YAAcgJ,wBAAsB,cACpChJ,IAAA,YAAciJ,wBAAsB,cACpCjJ,IAAA,YAAckJ,wBAAsB,cACpClJ,IAAA,YAAcmJ,wBAAsB,cACpCnJ,IAAA,YAAcoJ,wBAAsB,cACpCpJ,IAAA,YAAcqJ,wBAAsB,cACpCrJ,IAAA,YAAcsJ,wBAAsB,cACpCtJ,IAAA,YAAcuJ,wBAAsB,cACpCvJ,IAAA,YAAcwJ,wBAAsB,cA1JtC,CAAYt8B,EAAA8yB,WAAA9yB,EAAA8yB,SAAQ,KA6JpB,SAAYyJ,GACVA,IAAA,cAAgBC,0BAAwB,gBACxCD,IAAA,WAAaE,uBAAqB,aAFpC,CAAYz8B,EAAAu8B,SAAAv8B,EAAAu8B,OAAM,KAKlB,SAAYG,GACVA,IAAA,IAAMC,yBAAuB,MAC7BD,IAAA,IAAME,yBAAuB,MAC7BF,IAAA,IAAMG,yBAAuB,MAC7BH,IAAA,GAAKI,wBAAsB,KAC3BJ,IAAA,IAAMK,yBAAuB,MAC7BL,IAAA,KAAOM,0BAAwB,OANjC,CAAYh9B,EAAA08B,cAAA18B,EAAA08B,YAAW,KASvB,SAAYO,GACVA,IAAA,qBAAuBC,iCAA+B,uBACtDD,IAAA,qBAAuBE,iCAA+B,uBACtDF,IAAA,qBAAuBG,iCAA+B,uBACtDH,IAAA,qBAAuBI,iCAA+B,uBACtDJ,IAAA,oBAAsBK,gCAA8B,sBACpDL,IAAA,oBAAsBM,gCAA8B,sBACpDN,IAAA,oBAAsBO,gCAA8B,sBACpDP,IAAA,oBAAsBQ,gCAA8B,sBARtD,CAAYz9B,EAAAi9B,gBAAAj9B,EAAAi9B,cAAa,KAWzB,SAAYS,GACVA,IAAA,oBAAsBC,gCAA8B,sBACpDD,IAAA,oBAAsBE,gCAA8B,sBACpDF,IAAA,oBAAsBG,gCAA8B,sBACpDH,IAAA,oBAAsBI,gCAA8B,sBACpDJ,IAAA,oBAAsBK,gCAA8B,sBACpDL,IAAA,oBAAsBM,gCAA8B,sBANtD,CAAYh+B,EAAA09B,gBAAA19B,EAAA09B,cAAa,KASzB,SAAYO,GACVA,IAAA,YAAcC,wBAAsB,cACpCD,IAAA,aAAeE,yBAAuB,eACtCF,IAAA,aAAeG,yBAAuB,eACtCH,IAAA,YAAcI,wBAAsB,cACpCJ,IAAA,aAAeK,yBAAuB,eACtCL,IAAA,aAAeM,yBAAuB,eACtCN,IAAA,YAAcO,wBAAsB,cACpCP,IAAA,aAAeQ,yBAAuB,eACtCR,IAAA,aAAeS,yBAAuB,eACtCT,IAAA,YAAcU,wBAAsB,cACpCV,IAAA,aAAeW,yBAAuB,eACtCX,IAAA,aAAeY,yBAAuB,eAZxC,CAAY7+B,EAAAi+B,cAAAj+B,EAAAi+B,YAAW,KAevB,IAAAa,EAAA,oBAAAA,KAWA,OANSA,EAAA78B,OAAP,SAAc88B,EAAoBC,GAChC,IAAIC,EAAU,IAAIH,EAGlB,OAFAG,EAAQF,OAASA,EACjBE,EAAQD,OAASA,EACVC,GAEXH,EAXA,GAAa9+B,EAAA8+B,gBAab,IAAAI,EAAA,WAyBE,SAAAA,IAubQ5+B,KAAA6+B,sBAA6B,EAwN7B7+B,KAAA8+B,sBAA+B,EAmE/B9+B,KAAA++B,cAAmC,IAAIrvB,IA4IjD,OAj3BSkvB,EAAAj9B,OAAP,WACE,IAAIhC,EAAS,IAAIi/B,EAGjB,OAFAj/B,EAAOolB,IAAMia,wBACbr/B,EAAOs/B,IAAM73B,OAAOC,SAAS63B,0BACtBv/B,GAGFi/B,EAAAO,WAAP,SAAkBV,GAChB,IAAIW,EAAOC,EAAaZ,GACxB,IACE,IAAI9+B,EAAS,IAAIi/B,EAGjB,OAFAj/B,EAAOolB,IAAMua,oBAAoBF,EAAMX,EAAOj3B,QAC9C7H,EAAOs/B,IAAM73B,OAAOC,SAAS63B,0BACtBv/B,UAEPyH,OAAOm4B,KAAKC,WAAkBJ,MAQlCR,EAAA38B,UAAAw9B,gBAAA,SACE7+B,EACA8+B,EACAC,GAEA,IAAIC,EAAO5/B,KAAK6/B,kBAAkBj/B,GAC9Bw+B,EAAOU,EAAcH,GACzB,IACE,OAAOI,yBAAyB//B,KAAK+kB,IAAK6a,EAAMF,EAAQN,EAAMO,EAAaA,EAAWn4B,OAAS,WAE/FJ,OAAOm4B,KAAKH,KAIhBR,EAAA38B,UAAA+9B,2BAAA,SACEN,EACAC,GAEA,IAAIP,EAAOU,EAAcH,GACzB,IACE,OAAOM,oCAAoCjgC,KAAK+kB,IAAK2a,EAAQN,EAAMO,EAAaA,EAAWn4B,OAAS,WAEpGJ,OAAOm4B,KAAKH,KAIhBR,EAAA38B,UAAAi+B,mBAAA,SAAmBt/B,GACjB,IAAIg/B,EAAO5/B,KAAK6/B,kBAAkBj/B,GAClCu/B,4BAA4BngC,KAAK+kB,IAAK6a,IAKxChB,EAAA38B,UAAAm+B,UAAA,SAAU9+B,GACR,IAAI++B,EAAMrgC,KAAKi/B,IAEf,OADAqB,sBAAsBD,EAAK/+B,GACpBi/B,eAAevgC,KAAK+kB,IAAKsb,IAGlCzB,EAAA38B,UAAAu+B,UAAA,SAAUC,EAAeC,QAAA,IAAAA,MAAA,GACvB,IAAIL,EAAMrgC,KAAKi/B,IAEf,OADA0B,sBAAsBN,EAAKI,EAAUC,GAC9BH,eAAevgC,KAAK+kB,IAAKsb,IAGlCzB,EAAA38B,UAAA2+B,UAAA,SAAUt/B,GACR,IAAI++B,EAAMrgC,KAAKi/B,IAEf,OADA4B,wBAAwBR,EAAK/+B,GACtBi/B,eAAevgC,KAAK+kB,IAAKsb,IAGlCzB,EAAA38B,UAAA6+B,UAAA,SAAUx/B,GACR,IAAI++B,EAAMrgC,KAAKi/B,IAEf,OADA8B,wBAAwBV,EAAK/+B,GACtBi/B,eAAevgC,KAAK+kB,IAAKsb,IAGlCzB,EAAA38B,UAAA++B,WAAA,SAAWC,GACTz4B,OAAuB,IAAhBy4B,EAAMz5B,QAEb,IADA,IAAI64B,EAAMrgC,KAAKi/B,IACN5+B,EAAI,EAAGA,EAAI,KAAMA,EAAG6gC,MAAUb,EAAMhgC,EAAG4gC,EAAM5gC,IAEtD,OADA8gC,uBAAuBd,EAAKA,GACrBE,eAAevgC,KAAK+kB,IAAKsb,IAKlCzB,EAAA38B,UAAAm/B,YAAA,SACEC,EACAC,GAEA,OAAOC,eAAevhC,KAAK+kB,IAAKsc,EAAIC,IAGtC1C,EAAA38B,UAAAu/B,aAAA,SACEH,EACAI,EACAC,GAEA,OAAOC,gBAAgB3hC,KAAK+kB,IAAKsc,EAAII,EAAMC,IAG7C9C,EAAA38B,UAAA2/B,WAAA,SACEP,EACAzgC,EACAihC,QADA,IAAAjhC,MAAA,WACA,IAAAihC,MAAA,MAEA,IAAIjC,EAAO5/B,KAAK6/B,kBAAkBj/B,GAC9Bw+B,EAAO0C,EAAcD,GACzB,IACE,OAAOE,cAAc/hC,KAAK+kB,IAAKsc,EAAIzB,EAAMR,EAAMyC,EAA6BA,EAAUr6B,OAAS,WAE/FJ,OAAOm4B,KAAKH,KAIhBR,EAAA38B,UAAA+/B,eAAA,SACEpe,EACAzI,GAEA,OAAO8mB,kBAAkBjiC,KAAK+kB,IAAKnB,EAAOzI,IAG5CyjB,EAAA38B,UAAAigC,eAAA,SACEte,EACAtiB,GAEA,OAAO6gC,kBAAkBniC,KAAK+kB,IAAKnB,EAAOtiB,IAG5Cs9B,EAAA38B,UAAAmgC,gBAAA,SACExhC,EACAua,GAEA,IAAIykB,EAAO5/B,KAAK6/B,kBAAkBj/B,GAClC,OAAOyhC,mBAAmBriC,KAAK+kB,IAAK6a,EAAMzkB,IAG5CyjB,EAAA38B,UAAAqgC,WAAA,SACErB,EACAsB,EACAC,EACArnB,EACAujB,EACA+D,GAEA,YAHA,IAAA/D,MAAA,QACA,IAAA+D,MAAAxB,GAEOyB,cAAc1iC,KAAK+kB,IAAKkc,EAAOsB,EAAS,EAAI,EAAG7D,EAAQ+D,EAAOtnB,EAAMqnB,IAG7E5D,EAAA38B,UAAA0gC,YAAA,SACE1B,EACAuB,EACAlhC,EACA6Z,EACAujB,EACA+D,GAEA,YAHA,IAAA/D,MAAA,QACA,IAAA+D,MAAAxB,GAEO2B,eAAe5iC,KAAK+kB,IAAKkc,EAAOvC,EAAQ+D,EAAOD,EAAKlhC,EAAO6Z,IAGpEyjB,EAAA38B,UAAA4gC,iBAAA,SACE5B,EACAuB,EACArnB,EACAujB,GAEA,YAFA,IAAAA,MAAA,GAEOoE,oBAAoB9iC,KAAK+kB,IAAKkc,EAAOvC,EAAQvjB,EAAMqnB,IAG5D5D,EAAA38B,UAAA8gC,kBAAA,SACE9B,EACAuB,EACAlhC,EACA6Z,EACAujB,GAEA,YAFA,IAAAA,MAAA,GAEOsE,qBAAqBhjC,KAAK+kB,IAAKkc,EAAOvC,EAAQ8D,EAAKlhC,EAAO6Z,IAGnEyjB,EAAA38B,UAAAghC,gBAAA,SACE5B,EACAJ,EACAvC,EACA8D,EACAlhC,EACA6Z,GAEA,OAAO+nB,mBAAmBljC,KAAK+kB,IAAKsc,EAAIJ,EAAOvC,EAAQ8D,EAAKlhC,EAAO6Z,IAGrEyjB,EAAA38B,UAAAkhC,oBAAA,SACElC,EACAvC,EACA8D,EACAY,EACAC,EACAloB,GAEA,OAAOmoB,uBAAuBtjC,KAAK+kB,IAAKkc,EAAOvC,EAAQ8D,EAAKY,EAAUC,EAAaloB,IAGrFyjB,EAAA38B,UAAAshC,iBAAA,SACEf,EACAY,EACAI,EACAC,GAEA,OAAOC,oBAAoB1jC,KAAK+kB,IAAKyd,EAAKY,EAAUI,EAASC,IAG/D7E,EAAA38B,UAAA0hC,iBAAA,SACEnB,EACAoB,GAEA,OAAOC,oBAAoB7jC,KAAK+kB,IAAKyd,EAAKoB,IAK5ChF,EAAA38B,UAAA6hC,eAAA,SACElgB,EACAtiB,GAEA,OAAOyiC,kBAAkB/jC,KAAK+kB,IAAKnB,EAAOtiB,IAG5Cs9B,EAAA38B,UAAA+hC,gBAAA,SACEpjC,EACAU,GAEA,IAAIs+B,EAAO5/B,KAAK6/B,kBAAkBj/B,GAClC,OAAOqjC,mBAAmBjkC,KAAK+kB,IAAK6a,EAAMt+B,IAG5Cs9B,EAAA38B,UAAAiiC,YAAA,SACEC,EACAC,EACAjpB,QAAA,IAAAA,MAAmBgP,EAAWka,MAE9B,IAAIzE,EAAO5/B,KAAK6/B,kBAAkBsE,GAC9B/E,EAAO0C,EAAcsC,GACzB,IACE,OAAOE,eAAetkC,KAAK+kB,IAAK6a,EAAMR,EAAMgF,EAAS58B,OAAQ2T,WAE7D/T,OAAOm4B,KAAKH,KAIhBR,EAAA38B,UAAAsiC,YAAA,SACEJ,EACAK,EACAljC,QADA,IAAAkjC,MAAA,QACA,IAAAljC,MAAA,GAEA,IAAIs+B,EAAO5/B,KAAK6/B,kBAAkBsE,GAClC,OAAOM,eAAezkC,KAAK+kB,IAAK6a,EAAM4E,EAAWljC,IAGnDs9B,EAAA38B,UAAAyiC,WAAA,SACEC,GAEA,OAAOC,cAAc5kC,KAAK+kB,IAAK4f,IAGjC/F,EAAA38B,UAAA4iC,WAAA,SACEV,EACAngB,GAEA,IAAI4b,EAAO5/B,KAAK6/B,kBAAkBsE,GAClC,OAAOW,cAAc9kC,KAAK+kB,IAAK6a,EAAM5b,IAGvC4a,EAAA38B,UAAA8iC,SAAA,SACEP,EACAQ,EACAC,GAEA,YAFA,IAAAA,MAAA,GAEOC,YAAYllC,KAAK+kB,IAAKyf,EAAWQ,EAAQC,IAGlDrG,EAAA38B,UAAAkjC,UAAA,WACE,OAAOC,aAAaplC,KAAK+kB,MAG3B6Z,EAAA38B,UAAAojC,aAAA,SACEV,GAEA,YAFA,IAAAA,MAAA,GAEOW,gBAAgBtlC,KAAK+kB,IAAK4f,IAGnC/F,EAAA38B,UAAAsjC,aAAA,SACEP,EACAC,EACAT,GAEA,OAAOgB,gBAAgBxlC,KAAK+kB,IAAKyf,EAAWQ,EAAQC,IAGtDrG,EAAA38B,UAAAwjC,aAAA,SACEC,EACAC,EACAnB,EACAljC,QAAA,IAAAA,MAAA,GAIA,IAFA,IAAIskC,EAAWF,EAAMl+B,OACjBq+B,EAAO,IAAI7+B,MAAa4+B,GACnBvlC,EAAI,EAAGA,EAAIulC,IAAYvlC,EAC9BwlC,EAAKxlC,GAAKL,KAAK6/B,kBAAkB6F,EAAMrlC,IAEzC,IAAI++B,EAAOU,EAAc+F,GACrBjG,EAAO5/B,KAAK6/B,kBAAkB8F,GAClC,IACE,OAAOG,gBAAgB9lC,KAAK+kB,IAAKqa,EAAMwG,EAAUhG,EAAM4E,EAAWljC,WAElE8F,OAAOm4B,KAAKH,KAIhBR,EAAA38B,UAAA8jC,WAAA,SACEjd,EACA+Y,EACAloB,GAEA,IAAIimB,EAAO5/B,KAAK6/B,kBAAkB/W,GAC9BsW,EAAO0C,EAAcD,GACzB,IACE,OAAOmE,cAAchmC,KAAK+kB,IAAK6a,EAAMR,EAAMyC,GAAYA,EAASr6B,QAAU,EAAGmS,WAE7EvS,OAAOm4B,KAAKH,KAIhBR,EAAA38B,UAAAgkC,mBAAA,SACEriB,EACAie,EACAqE,GAEA,IAAItG,EAAO5/B,KAAK6/B,kBAAkBqG,GAC9B9G,EAAO0C,EAAcD,GACzB,IACE,OAAOsE,sBAAsBnmC,KAAK+kB,IAAKnB,EAAOwb,EAAMyC,GAAYA,EAASr6B,QAAU,EAAGo4B,WAEtFx4B,OAAOm4B,KAAKH,KAIhBR,EAAA38B,UAAAmkC,kBAAA,WACE,OAAOC,qBAAqBrmC,KAAK+kB,MAKnC6Z,EAAA38B,UAAAqkC,iBAAA,SACE1c,EACA7f,EACAw8B,GAEA,OAAOC,oBAAoBxmC,KAAK+kB,IAAK6E,EAAM7f,EAAQw8B,IAGrD3H,EAAA38B,UAAAwkC,iBAAA,SACE7c,EACAtoB,EACAilC,GAEA,OAAOG,oBAAoB1mC,KAAK+kB,IAAK6E,EAAMtoB,EAAOilC,IAKpD3H,EAAA38B,UAAA0kC,kBAAA,SACEtF,EACAuF,EACAC,GAEA,OAAOC,qBAAqB9mC,KAAK+kB,IAAKsc,EAAIuF,EAAKC,IAGjDjI,EAAA38B,UAAA8kC,kBAAA,SACE1F,EACAuF,EACAC,EACAvlC,GAEA,OAAO0lC,qBAAqBhnC,KAAK+kB,IAAKsc,EAAIuF,EAAKC,EAAKvlC,IAGtDs9B,EAAA38B,UAAAglC,kBAAA,SACEC,EACAC,EACAC,GAEA5+B,OAAsB,IAAf4+B,EAAK5/B,QACZ,IAAI43B,EAAOC,EAAa+H,GACxB,IACE,OAAOC,qBAAqBrnC,KAAK+kB,IAAKmiB,EAAMC,EAAM/H,WAElDh4B,OAAOm4B,KAAKH,KAIhBR,EAAA38B,UAAAqlC,oBAAA,SACEJ,EACAC,EACAI,GAEA,OAAOC,uBAAuBxnC,KAAK+kB,IAAKmiB,EAAMC,EAAMI,IAGtD3I,EAAA38B,UAAAwlC,gBAAA,SACEpG,EACAuF,EACAc,GAEA,OAAOC,mBAAmB3nC,KAAK+kB,IAAKsc,EAAIuF,EAAKc,IAK/C9I,EAAA38B,UAAA2lC,UAAA,SACEhnC,EACAua,EACA0sB,EACAzkB,GAEA,IAAIwc,EAAO5/B,KAAK6/B,kBAAkBj/B,GAClC,OAAOknC,mBAAmB9nC,KAAK+kB,IAAK6a,EAAMzkB,EAAM0sB,EAAU,EAAI,EAAGzkB,IAGnEwb,EAAA38B,UAAA8lC,aAAA,SACEnnC,GAEA,IAAIg/B,EAAO5/B,KAAK6/B,kBAAkBj/B,GAClConC,sBAAsBhoC,KAAK+kB,IAAK6a,IAGlChB,EAAA38B,UAAAgmC,YAAA,SACErnC,EACAua,EACA+sB,EACAlkB,GAEA,IAAI4b,EAAO5/B,KAAK6/B,kBAAkBj/B,GAC9Bw+B,EAAOU,EAAcoI,GACzB,IACE,OAAOC,qBAAqBnoC,KAAK+kB,IAAK6a,EAAMzkB,EAAMikB,EAAM8I,EAAWA,EAAS1gC,OAAS,EAAGwc,WAExF5c,OAAOm4B,KAAKH,KAIhBR,EAAA38B,UAAAmmC,eAAA,SAAexnC,GACb,IAAIg/B,EAAO5/B,KAAK6/B,kBAAkBj/B,GAClCynC,wBAAwBroC,KAAK+kB,IAAK6a,IAKpChB,EAAA38B,UAAAqmC,qBAAA,SAAqB5I,EAAoBC,EAAiC3b,GACxEhkB,KAAK6+B,qBAAuBr2B,QAAQxI,KAAK6+B,sBACzC,IAAI0J,EAAWvoC,KAAK6/B,kBAAkB,IAClCT,EAAOU,EAAcH,GACzB,IACE,IAAI6I,EAAUzI,yBAAyB//B,KAAK+kB,IAAKwjB,EAAU7I,EAAQN,EAAMO,EAAaA,EAAWn4B,OAAS,GAC1G,OAAO2gC,qBAAqBnoC,KAAK+kB,IAAKwjB,EAAUC,EAAS,EAAG,EAAGxkB,WAE/D5c,OAAOm4B,KAAKH,KAIhBR,EAAA38B,UAAAwmC,wBAAA,WACEzoC,KAAK6+B,sBAAwBr2B,OAAOxI,KAAK6+B,sBACzC,IAAI0J,EAAWvoC,KAAK6/B,kBAAkB,IACtCwI,wBAAwBroC,KAAK+kB,IAAKwjB,GAClCpI,4BAA4BngC,KAAK+kB,IAAKwjB,IAGxC3J,EAAA38B,UAAAymC,kBAAA,SACEx3B,EACAy3B,GAEA,IAAIC,EAAQ5oC,KAAK6/B,kBAAkB3uB,GAC/B23B,EAAQ7oC,KAAK6/B,kBAAkB8I,GACnC,OAAOG,2BAA2B9oC,KAAK+kB,IAAK6jB,EAAOC,IAGrDjK,EAAA38B,UAAA8mC,eAAA,SACE73B,EACAy3B,GAEA,IAAIC,EAAQ5oC,KAAK6/B,kBAAkB3uB,GAC/B23B,EAAQ7oC,KAAK6/B,kBAAkB8I,GACnC,OAAOK,wBAAwBhpC,KAAK+kB,IAAK6jB,EAAOC,IAGlDjK,EAAA38B,UAAAgnC,gBAAA,SACE/3B,EACAy3B,GAEA,IAAIC,EAAQ5oC,KAAK6/B,kBAAkB3uB,GAC/B23B,EAAQ7oC,KAAK6/B,kBAAkB8I,GACnC,OAAOO,yBAAyBlpC,KAAK+kB,IAAK6jB,EAAOC,IAGnDjK,EAAA38B,UAAAknC,gBAAA,SACEj4B,EACAy3B,GAEA,IAAIC,EAAQ5oC,KAAK6/B,kBAAkB3uB,GAC/B23B,EAAQ7oC,KAAK6/B,kBAAkB8I,GACnC,OAAOS,yBAAyBppC,KAAK+kB,IAAK6jB,EAAOC,IAGnDjK,EAAA38B,UAAAonC,aAAA,SAAaV,GACX,IAAI/I,EAAO5/B,KAAK6/B,kBAAkB8I,GAClCW,sBAAsBtpC,KAAK+kB,IAAK6a,IAGlChB,EAAA38B,UAAAsnC,kBAAA,SACEr4B,EACAs4B,EACAC,EACAC,GAEA,IAAId,EAAQ5oC,KAAK6/B,kBAAkB3uB,GAC/B23B,EAAQ7oC,KAAK6/B,kBAAkB2J,GAC/BG,EAAQ3pC,KAAK6/B,kBAAkB4J,GACnC,OAAOG,2BAA2B5pC,KAAK+kB,IAAK6jB,EAAOC,EAAOc,EAAOD,IAGnE9K,EAAA38B,UAAA4nC,eAAA,SACE34B,EACAs4B,EACAC,GAEA,IAAIb,EAAQ5oC,KAAK6/B,kBAAkB3uB,GAC/B23B,EAAQ7oC,KAAK6/B,kBAAkB2J,GAC/BG,EAAQ3pC,KAAK6/B,kBAAkB4J,GACnC,OAAOK,wBAAwB9pC,KAAK+kB,IAAK6jB,EAAOC,EAAOc,IAGzD/K,EAAA38B,UAAA8nC,gBAAA,SACE74B,EACAs4B,EACAC,EACAO,QAAA,IAAAA,OAAA,GAEA,IAAIpB,EAAQ5oC,KAAK6/B,kBAAkB3uB,GAC/B23B,EAAQ7oC,KAAK6/B,kBAAkB2J,GAC/BG,EAAQ3pC,KAAK6/B,kBAAkB4J,GACnC,OAAOQ,yBAAyBjqC,KAAK+kB,IAAK6jB,EAAOC,EAAOc,EAAOK,IAGjEpL,EAAA38B,UAAAioC,gBAAA,SACEh5B,EACAs4B,EACAC,EACAU,GAEA,IAAIvB,EAAQ5oC,KAAK6/B,kBAAkB3uB,GAC/B23B,EAAQ7oC,KAAK6/B,kBAAkB2J,GAC/BG,EAAQ3pC,KAAK6/B,kBAAkB4J,GACnC,OAAOW,yBAAyBpqC,KAAK+kB,IAAK6jB,EAAOC,EAAOc,EAAOQ,IAMjEvL,EAAA38B,UAAAooC,UAAA,SACEC,EACAC,EACAC,EACA1hB,EACApR,EACAsyB,QADA,IAAAtyB,MAAA,WACA,IAAAsyB,OAAA,GAOA,IALA,IAAIpK,EAAO5/B,KAAK6/B,kBAAkBnoB,GAC9BjD,EAAI+1B,EAAShjC,OACbijC,EAAO,IAAIzjC,MAAayN,GACxBi2B,EAAO,IAAI1jC,MAAqByN,GAChCk2B,EAAO,IAAI3jC,MAAayN,GACnBpU,EAAI,EAAGA,EAAIoU,IAAKpU,EAAG,CAC1B,IAAIo+B,EAAS+L,EAASnqC,GAAGo+B,OACrBC,EAAS8L,EAASnqC,GAAGq+B,OACzB+L,EAAKpqC,GAAKg/B,EAAaZ,GACvBiM,EAAKrqC,GAAKyoB,GAAUuB,EAAAugB,OAAOC,OACvB7qC,KAAKwgC,UAAUsK,QAAQpM,GAASqM,SAASrM,IACzC1+B,KAAKogC,UAAU0K,QAAQpM,IAC3BiM,EAAKtqC,GAAKo+B,EAAOj3B,OAEnB,IAAIwjC,EAAQlL,EAAc2K,GACtBQ,EAAQnL,EAAc4K,GACtBQ,EAAQpL,EAAc6K,GAC1B,IACEQ,mBAAmBnrC,KAAK+kB,IAAKulB,EAASC,EAAS3K,EAAMoL,EAAOC,EAAOC,EAAOz2B,EAAGu1B,WAE7E5iC,OAAOm4B,KAAK2L,GACZ9jC,OAAOm4B,KAAK0L,GACZ7jC,OAAOm4B,KAAKyL,GACZ,IAAS3qC,EAAIoU,EAAI,EAAGpU,GAAK,IAAKA,EAAG+G,OAAOm4B,KAAKkL,EAAKpqC,MAItDu+B,EAAA38B,UAAAmpC,iBAAA,SACEd,EACAC,EACAc,GAIA,IAFA,IAAIzF,EAAWyF,EAAM7jC,OACjBk+B,EAAQ,IAAI1+B,MAAa4+B,GACpBvlC,EAAI,EAAGA,EAAIulC,IAAYvlC,EAC9BqlC,EAAMrlC,GAAKL,KAAK6/B,kBAAkBwL,EAAMhrC,IAE1C,IAAI++B,EAAOU,EAAc4F,GACzB,IACE4F,0BAA0BtrC,KAAK+kB,IAAKulB,EAASC,EAASnL,EAAMwG,WAE5Dx+B,OAAOm4B,KAAKH,KAIhBR,EAAA38B,UAAAspC,SAAA,SAASC,GACPC,kBAAkBzrC,KAAK+kB,IAAKymB,IAG9B5M,EAAA38B,UAAAypC,iBAAA,WACE,OAAOC,6BAGT/M,EAAA38B,UAAA2pC,iBAAA,SAAiBC,QAAA,IAAAA,MAAA,GACfC,0BAA0BD,IAG5BjN,EAAA38B,UAAA8pC,eAAA,WACE,OAAOC,2BAGTpN,EAAA38B,UAAAgqC,eAAA,SAAeJ,QAAA,IAAAA,MAAA,GACbK,wBAAwBL,IAG1BjN,EAAA38B,UAAAkqC,aAAA,SAAaC,QAAA,IAAAA,OAAA,GACXC,sBAAsBD,IAGxBxN,EAAA38B,UAAAqqC,SAAA,SAASd,QAAA,IAAAA,MAAA,GACHA,EACFe,0BAA0Bf,EAAMxrC,KAAK+kB,KAErCynB,wBAAwBxsC,KAAK+kB,MAIjC6Z,EAAA38B,UAAAwqC,UAAA,SAAUC,EAAkBlB,QAAA,IAAAA,MAAA,GAG1B,IAFA,IAAI5F,EAAW8G,EAAOllC,OAClBk+B,EAAQ,IAAI1+B,MAAa4+B,GACpBvlC,EAAI,EAAGA,EAAIulC,IAAYvlC,EAC9BqlC,EAAMrlC,GAAKssC,EAAYD,EAAOrsC,IAEhC,IAAI++B,EAAOU,EAAc4F,GACzB,IACM8F,EACFoB,2BAA2BpB,EAAMxrC,KAAK+kB,IAAKqa,EAAMwG,GAEjDiH,yBAAyB7sC,KAAK+kB,IAAKqa,EAAMwG,WAG3Cx+B,OAAOm4B,KAAKH,GACZ,IAAS/+B,EAAIulC,EAAUvlC,GAAK,IAAKA,EAAG+G,OAAOm4B,KAAKmG,EAAMrlC,MAM1Du+B,EAAA38B,UAAA6qC,qBAAA,SAAqBxL,GAEnB,IAAIyL,EAAwBpB,4BACxBqB,EAAsBhB,0BACtBiB,EAAoBC,wBACxBpB,0BAA0B,GAC1BI,wBAAwB,GACxBG,uBAAsB,GAGtB,IAAIlxB,EAAOgyB,2BAA2B7L,GAClCkK,EAAOxrC,KAAKsoC,qBAAqBntB,EAAM,KAAMmmB,GAC7CoE,EAAQ1lC,KAAK8+B,sBAYjB,OAXK4G,IACH1lC,KAAK8+B,sBAAwB4G,EAAQ5F,EAAc,CAAE9/B,KAAK6/B,kBAAkB,iBAE9E+M,2BAA2BpB,EAAMxrC,KAAK+kB,IAAK2gB,EAAO,GAClDpE,EAAO8L,yBAAyB5B,GAChCxrC,KAAKyoC,0BAGLqD,0BAA0BiB,GAC1Bb,wBAAwBc,GACxBX,sBAAsBY,GACf3L,GAGT1C,EAAA38B,UAAAorC,SAAA,WACE,OAA4C,GAArCC,wBAAwBttC,KAAK+kB,MAGtC6Z,EAAA38B,UAAAsrC,UAAA,WACEC,yBAAyBxtC,KAAK+kB,MAGhC6Z,EAAA38B,UAAAwrC,SAAA,SAASC,GACP,IAAIrN,EAAMrgC,KAAKi/B,IACfz2B,OAAO02B,0BAA4B,IACnC,IAAIU,EAAO+M,EAAYe,GACnBC,EAAmB,EACnBC,EAAsB,EAC1B,IACEC,gCAAgCxN,EAAKrgC,KAAK+kB,IAAK6a,GAC/C+N,EAAYG,EAAQzN,GACpB,IAAI0N,EAAcD,EAAQzN,EAAM,GAChCuN,EAAeE,EAAQzN,EAAM,GAC7B,IAAI2N,EAAM,IAAIC,EAGd,OAFAD,EAAIE,OAmjBV,SAAoB1L,EAAYh7B,GAE9B,IADA,IAAIwmC,EAAM,IAAIG,WAAW3mC,GAChBnH,EAAW,EAAGA,EAAImH,IAAUnH,EACnC2tC,EAAI3tC,GAAK+tC,KAAS5L,EAAMniC,GAE1B,OAAO2tC,EAxjBUK,CAAWV,EAAWI,GACnCC,EAAIvnB,UAAY6nB,EAAWV,GACpBI,UAEHpO,GAAMx4B,OAAOm4B,KAAKK,GAClB+N,GAAWvmC,OAAOm4B,KAAKoO,GACvBC,GAAcxmC,OAAOm4B,KAAKqO,KAIlChP,EAAA38B,UAAAssC,OAAA,WACE,MAAM,IAAIl1B,MAAM,oBAGlBulB,EAAA38B,UAAAusC,QAAA,WACE,MAAM,IAAIn1B,MAAM,oBAKVulB,EAAA38B,UAAA49B,kBAAR,SAA0B4O,GACxB,GAAW,MAAPA,EAAa,OAAO,EACxB,IAAI1P,EAAgB/+B,KAAK++B,cACzB,GAAIA,EAAchsB,IAAI07B,GAAM,OAAc1P,EAAc79B,IAAIutC,GAC5D,IAAIjM,EAAMmK,EAAY8B,GAEtB,OADA1P,EAAc9tB,IAAIw9B,EAAKjM,GAChBA,GAGT5D,EAAA38B,UAAAysC,QAAA,mBACElmC,OAAOxI,KAAK+kB,SACZ,IAAgB,IAAArC,EAAAxM,EAAAlW,KAAK++B,cAAcjlB,UAAQQ,EAAAoI,EAAAtM,QAAAkE,EAAAjE,KAAAiE,EAAAoI,EAAAtM,OAAA,CAAtC,IAAIosB,EAAGloB,EAAAhZ,MAAiC8F,OAAOm4B,KAAKiD,qGACzDxiC,KAAK++B,cAAgB,IAAIrvB,IACzBtI,OAAOm4B,KAAKv/B,KAAKi/B,KACjB73B,OAAOm4B,KAAKv/B,KAAK8+B,uBACjB9+B,KAAK8+B,sBAAwB,EAC7B6P,uBAAuB3uC,KAAK+kB,KAC5B/kB,KAAK+kB,IAAM,GAGb6Z,EAAA38B,UAAA2sC,eAAA,WACE,OAAOC,EAASltC,OAAO3B,OAGzB4+B,EAAA38B,UAAA6sC,gBAAA,SACExN,EACAyN,EACAC,GAEA,QAHA,IAAAD,OAAA,QACA,IAAAC,MAAgB5rC,IAAI6rC,WAEhBD,EAAW,EAAG,OAAO,EAGzB,IAAIE,EACAC,EAEA,OALJH,GAAY,EAKAI,yBAAyB9N,IACnC,KAAKlX,EAAailB,MAChB,OAAQlC,2BAA2B7L,IACjC,KAAKnX,EAAWhkB,IACd,OAAOnG,KAAKogC,UAAUkP,0BAA0BhO,IAElD,KAAKnX,EAAW/jB,IACd,OAAOpG,KAAKwgC,UACV+O,6BAA6BjO,GAC7BkO,8BAA8BlO,IAGlC,KAAKnX,EAAWvjB,IACd,OAAO5G,KAAK4gC,UAAU6O,0BAA0BnO,IAElD,KAAKnX,EAAWtjB,IACd,OAAO7G,KAAK8gC,UAAU4O,0BAA0BpO,IAElD,KAAKnX,EAAWrjB,KAEd,OAAO,EAET,QACE,MAAM,IAAIuS,MAAM,0BAItB,KAAK+Q,EAAaulB,SAChB,OAAO1N,kBAAkBjiC,KAAK+kB,IAC5B6qB,0BAA0BtO,GAC1B6L,2BAA2B7L,IAG/B,KAAKlX,EAAaylB,UAChB,IAAIC,EAAaC,0BAA0BzO,GAC3C,IAAKwO,EAAY,MACjB,OAAOzN,mBAAmBriC,KAAK+kB,IAAK+qB,EAAY3C,2BAA2B7L,IAE7E,KAAKlX,EAAa4lB,KAChB,KAAMd,EAAUlvC,KAAK8uC,gBAAgBmB,oBAAoB3O,GAAOyN,EAAeC,IAC7E,MAEF,OACEkB,sBAAsB5O,GAClBwB,oBAAoB9iC,KAAK+kB,IACvBorB,sBAAsB7O,GACtB8O,uBAAuB9O,GACvB6L,2BAA2B7L,GAC3B4N,GAEFxM,cAAc1iC,KAAK+kB,IACjBorB,sBAAsB7O,GACtB+O,sBAAsB/O,GAAQ,EAAI,EAClC8O,uBAAuB9O,GACvBgP,sBAAsBhP,GACtB6L,2BAA2B7L,GAC3B4N,GAIV,KAAK9kB,EAAammB,MAChB,KAAMrB,EAAUlvC,KAAK8uC,gBAAgB0B,uBAAuBlP,GAAOyN,EAAeC,IAChF,MAEF,OAAOzN,eAAevhC,KAAK+kB,IAAK0rB,oBAAoBnP,GAAO4N,GAE7D,KAAK9kB,EAAasmB,OAChB,KAAMxB,EAAUlvC,KAAK8uC,gBAAgB6B,uBAAuBrP,GAAOyN,EAAeC,IAChF,MAEF,KAAMG,EAAUnvC,KAAK8uC,gBAAgB8B,wBAAwBtP,GAAOyN,EAAeC,IACjF,MAEF,OAAOrN,gBAAgB3hC,KAAK+kB,IAAK8rB,qBAAqBvP,GAAO4N,EAASC,GAG1E,OAAO,GAKTvQ,EAAA38B,UAAA6uC,iBAAA,SAAiBlwC,GACf,IAAIg/B,EAAO+M,EAAY/rC,GACvB,IACE,OAAOmwC,oCAAoC/wC,KAAK+kB,IAAK6a,WAErDx4B,OAAOm4B,KAAKK,KAIhBhB,EAAA38B,UAAA+uC,iBAAA,SAAiBptB,GACf,OAAO0qB,EAAW2C,oCAAoCjxC,KAAK+kB,IAAKnB,KAGlEgb,EAAA38B,UAAA0kB,iBAAA,SACE6kB,EACAlK,EACA4P,EACAC,EACAC,GAEAC,kCAAkC7F,EAAMlK,EAAM4P,EAAWC,EAAYC,IAvTvDxS,EAAA0S,kBAAkC,EAyTpD1S,EAv3BA,GAAal/B,EAAAk/B,SA23Bbl/B,EAAA6xC,gBAAA,SAAgCjQ,GAC9B,OAAO8N,yBAAyB9N,IAGlC5hC,EAAA8xC,kBAAA,SAAkClQ,GAChC,OAAO6L,2BAA2B7L,IAGpC5hC,EAAA+xC,iBAAA,SAAiCnQ,GAC/B,OAAOgO,0BAA0BhO,IAGnC5hC,EAAAgyC,oBAAA,SAAoCpQ,GAClC,OAAOiO,6BAA6BjO,IAGtC5hC,EAAAiyC,qBAAA,SAAqCrQ,GACnC,OAAOkO,8BAA8BlO,IAGvC5hC,EAAAkyC,iBAAA,SAAiCtQ,GAC/B,OAAOmO,0BAA0BnO,IAGnC5hC,EAAAmyC,iBAAA,SAAiCvQ,GAC/B,OAAOoO,0BAA0BpO,IAGnC5hC,EAAAoyC,iBAAA,SAAiCxQ,GAC/B,OAAOsO,0BAA0BtO,IAGnC5hC,EAAAqyC,iBAAA,SAAiCzQ,GAC/B,OAAO0Q,0BAA0B1Q,IAGnC5hC,EAAAuyC,iBAAA,SAAiC3Q,GAC/B,OAAO4Q,0BAA0B5Q,IAGnC5hC,EAAAyyC,WAAA,SAA2B7Q,GACzB,OAAO8Q,uBAAuB9Q,IAGhC5hC,EAAA2yC,iBAAA,SAAiC/Q,GAC/B,OAAOgN,EAAWyB,0BAA0BzO,KAG9C5hC,EAAA4yC,YAAA,SAA4BhR,GAC1B,OAAOuP,qBAAqBvP,IAG9B5hC,EAAA6yC,cAAA,SAA8BjR,GAC5B,OAAOqP,uBAAuBrP,IAGhC5hC,EAAA8yC,eAAA,SAA+BlR,GAC7B,OAAOsP,wBAAwBtP,IAGjC5hC,EAAA+yC,WAAA,SAA2BnR,GACzB,OAAOmP,oBAAoBnP,IAG7B5hC,EAAAgzC,cAAA,SAA8BpR,GAC5B,OAAOkP,uBAAuBlP,IAGhC5hC,EAAAizC,aAAA,SAA6BrR,GAC3B,OAAO6O,sBAAsB7O,IAG/B5hC,EAAAkzC,cAAA,SAA8BtR,GAC5B,OAAO8O,uBAAuB9O,IAGhC5hC,EAAAmzC,WAAA,SAA2BvR,GACzB,OAAO2O,oBAAoB3O,IAG7B5hC,EAAAozC,aAAA,SAA6BxR,GAC3B,OAAO+O,sBAAsB/O,IAG/B5hC,EAAAqzC,cAAA,SAA8BzR,GAC5B,OAAO0R,uBAAuB1R,IAGhC5hC,EAAAuzC,eAAA,SAA+B3R,GAC7B,OAAO4R,wBAAwB5R,IAGjC5hC,EAAAyzC,YAAA,SAA4B7R,GAC1B,OAAO8R,qBAAqB9R,IAG9B5hC,EAAA2zC,cAAA,SAA8B/R,GAC5B,OAAOgS,uBAAuBhS,IAGhC5hC,EAAA6zC,aAAA,SAA6BjS,GAC3B,OAAOgN,EAAWkF,sBAAsBlS,KAG1C5hC,EAAA+zC,mBAAA,SAAmCnS,GACjC,OAAOoS,6BAA6BpS,IAGtC5hC,EAAAi0C,cAAA,SAA8BrS,EAAqB1d,GACjD,OAAOgwB,uBAAuBtS,EAAM1d,IAGtClkB,EAAAm0C,eAAA,SAA+BvS,GAC7B,OAAOwS,wBAAwBxS,IAGjC5hC,EAAAq0C,UAAA,SAA0BzS,GACxB,OAAO0S,qBAAqB1S,IAG9B5hC,EAAAu0C,WAAA,SAA2B3S,GACzB,OAAO4S,sBAAsB5S,IAG/B5hC,EAAAy0C,YAAA,SAA4B7S,GAC1B,OAAOgN,EAAW8F,qBAAqB9S,KAGzC5hC,EAAA20C,YAAA,SAA4B/S,GAC1B,OAAOgT,qBAAqBhT,IAG9B5hC,EAAA60C,aAAA,SAA6BjT,GAC3B,OAAOgN,EAAWkG,sBAAsBlT,KAG1C5hC,EAAA+0C,kBAAA,SAAkCnT,GAChC,OAAOoT,2BAA2BpT,IAGpC5hC,EAAAi1C,cAAA,SAA8BrT,GAC5B,OAAOsT,yBAAyBtT,IAGlC5hC,EAAAm1C,cAAA,SAA8BvT,GAC5B,OAAOwT,0BAA0BxT,IAGnC5hC,EAAAq1C,mBAAA,SAAmCzT,GACjC,OAAO0T,4BAA4B1T,IAGrC5hC,EAAAu1C,aAAA,SAA6B3T,GAC3B,OAAO4T,sBAAsB5T,IAG/B5hC,EAAAy1C,eAAA,SAA+B7T,GAC7B,OAAO8T,wBAAwB9T,IAGjC5hC,EAAA21C,cAAA,SAA8B/T,GAC5B,OAAOgN,EAAWgH,uBAAuBhU,KAG3C5hC,EAAA61C,UAAA,SAA0BjU,GACxB,OAAOkU,mBAAmBlU,IAG5B5hC,EAAA+1C,oBAAA,SAAoCnU,GAClC,OAAOoU,4BAA4BpU,IAGrC5hC,EAAAi2C,eAAA,SAA+BrU,EAAqB1d,GAClD,OAAOgyB,wBAAwBtU,EAAM1d,IAGvClkB,EAAAm2C,YAAA,SAA4BvU,GAC1B,OAAOgN,EAAWwH,4BAA4BxU,KAKhD5hC,EAAAq2C,gBAAA,SAAgCvK,GAC9B,OAAO4B,yBAAyB5B,IAGlC9rC,EAAAs2C,gBAAA,SAAgCxK,GAC9B,OAAO8C,EAAW2H,yBAAyBzK,KAG7C9rC,EAAAw2C,sBAAA,SAAsC1K,GACpC,OAAO2K,8BAA8B3K,IAGvC9rC,EAAA02C,qBAAA,SAAqC5K,EAAmB5nB,GACtD,OAAOyyB,0BAA0B7K,EAAM5nB,IAGzClkB,EAAA42C,sBAAA,SAAsC9K,GACpC,OAAO+K,2BAA2B/K,IAGpC,IAAAqD,EAAA,WAYE,SAAAA,KAoCF,OA3CSA,EAAAltC,OAAP,SAAchC,GACZ,IAAI62C,EAAW,IAAI3H,EAGnB,OAFA2H,EAAS72C,OAASA,EAClB62C,EAASzxB,IAAM0xB,gBAAgB92C,EAAOolB,KAC/ByxB,GAKT3H,EAAA5sC,UAAAy0C,SAAA,SAASztC,GACP,OAAO0tC,kBAAkB32C,KAAK+kB,IAAK9b,IAGrC4lC,EAAA5sC,UAAA20C,UAAA,SACEC,EACAC,EACAtS,EACAv7B,QADA,IAAAu7B,MAAA,QACA,IAAAv7B,MAAA,GAEA8tC,mBAAmBF,EAAMC,EAAItS,EAAWv7B,IAG1C4lC,EAAA5sC,UAAA+0C,mBAAA,SAAmB/tC,EAAqBu7B,GACtC,OAAOyS,4BAA4Bj3C,KAAK+kB,IAAK9b,EAAMu7B,IAGrDqK,EAAA5sC,UAAAi1C,mBAAA,SACEL,EACAC,EACAK,EACAluC,QAAA,IAAAA,MAAA,GAEA,IAAIm2B,EAAOU,EAAcqX,GACzB,IACEC,4BAA4BP,EAAMC,EAAI1X,EAAM+X,EAAQ3vC,OAAQyB,WAE5D7B,OAAOm4B,KAAKH,KAIhByP,EAAA5sC,UAAAo1C,iBAAA,SAAiBC,EAAyBC,GACxC,OAAOC,0BAA0Bx3C,KAAK+kB,IAAKuyB,EAAOC,IAEtD1I,EAhDA,GA4FA,SAASxP,EAAaoY,GACpB,IAAKA,EAAK,OAAO,EAIjB,IAHA,IAAIC,EAAYD,EAAIjwC,OAChBg7B,EAAMp7B,OAAOC,SAASqwC,GACtB7Q,EAAMrE,EACDniC,EAAI,EAAGA,EAAIq3C,IAAar3C,EAC/B6gC,MAAU2F,IAAO4Q,EAAIp3C,IAEvB,OAAOmiC,EAGT,SAAS1C,EAAc6X,GACrB,IAAKA,EAAM,OAAO,EAGlB,IAFA,IAAInV,EAAMp7B,OAAOC,SAASswC,EAAKnwC,QAAU,GACrCq/B,EAAMrE,EACDniC,EAAI,EAAGoU,EAAIkjC,EAAKnwC,OAAQnH,EAAIoU,IAAKpU,EAAG,CAC3C,IAAIu3C,EAAMD,EAAKt3C,GAEf6gC,MAAU2F,EAAyB,IAAd+Q,GACrB1W,MAAU2F,EAAM,EAAK+Q,GAAS,EAAK,KACnC1W,MAAU2F,EAAM,EAAK+Q,GAAQ,GAAM,KACnC1W,MAAU2F,EAAM,EAAK+Q,IAAQ,IAC7B/Q,GAAO,EAET,OAAOrE,EAGT,SAASV,EAAc+V,GACrB,OAAO/X,EAAc+X,GA2BvB,SAASlL,EAAY8B,GACnB,GAAW,MAAPA,EAAa,OAAO,EAIxB,IAHA,IAAIjM,EAAMp7B,OAAOC,SA1BnB,SAA0BonC,GAExB,IADA,IAAInkC,EAAM,EACDjK,EAAI,EAAGoU,EAAIg6B,EAAIjnC,OAAQnH,EAAIoU,IAAKpU,EAAG,CAC1C,IAAIy3C,EAAIrJ,EAAI/jC,WAAWrK,GACnBy3C,GAAK,OAAUA,GAAK,OAAUz3C,EAAI,EAAIoU,IACxCqjC,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBrJ,EAAI/jC,aAAarK,IAEpDy3C,GAAK,MACLxtC,EAEFA,GADSwtC,GAAK,KACP,EACEA,GAAK,MACP,EACEA,GAAK,QACP,EACEA,GAAK,SACP,EAEA,EAGX,OAAOxtC,EAKmBytC,CAAiBtJ,GAAO,GAE9C5H,EAAMrE,EACDniC,EAAI,EAAGoU,EAAIg6B,EAAIjnC,OAAQnH,EAAIoU,IAAKpU,EAAG,CAC1C,IAAIy3C,EAAIrJ,EAAI/jC,WAAWrK,GACnBy3C,GAAK,OAAUA,GAAK,OAAUz3C,EAAI,EAAIoU,IACxCqjC,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBrJ,EAAI/jC,aAAarK,IAEpDy3C,GAAK,IACP5W,MAAU2F,IAAOiR,GACRA,GAAK,MACd5W,MAAU2F,IAAQ,IAASiR,IAAM,GACjC5W,MAAU2F,IAAQ,IAAqB,GAAZiR,IAClBA,GAAK,OACd5W,MAAU2F,IAAQ,IAASiR,IAAM,IACjC5W,MAAU2F,IAAQ,IAASiR,IAAO,EAAK,IACvC5W,MAAU2F,IAAQ,IAAqB,GAAZiR,IAClBA,GAAK,SACd5W,MAAU2F,IAAQ,IAASiR,IAAM,IACjC5W,MAAU2F,IAAQ,IAASiR,IAAM,GAAM,IACvC5W,MAAU2F,IAAQ,IAASiR,IAAO,EAAK,IACvC5W,MAAU2F,IAAQ,IAAqB,GAAZiR,IAClBA,GAAK,UACd5W,MAAU2F,IAAQ,IAASiR,IAAM,IACjC5W,MAAU2F,IAAQ,IAASiR,IAAM,GAAM,IACvC5W,MAAU2F,IAAQ,IAASiR,IAAM,GAAM,IACvC5W,MAAU2F,IAAQ,IAASiR,IAAO,EAAK,IACvC5W,MAAU2F,IAAQ,IAAqB,GAAZiR,KAE3B5W,MAAU2F,IAAQ,IAASiR,IAAM,IACjC5W,MAAU2F,IAAQ,IAASiR,IAAM,GAAM,IACvC5W,MAAU2F,IAAQ,IAASiR,IAAM,GAAM,IACvC5W,MAAU2F,IAAQ,IAASiR,IAAM,GAAM,IACvC5W,MAAU2F,IAAQ,IAASiR,IAAO,EAAK,IACvC5W,MAAU2F,IAAQ,IAAqB,GAAZiR,IAI/B,OADA5W,MAAU2F,EAAK,GACRrE,EAGT,SAASsL,EAAQtL,GACf,OACG4L,KAAS5L,GACT4L,KAAS5L,EAAM,IAAO,EACtB4L,KAAS5L,EAAM,IAAM,GACrB4L,KAAS5L,EAAM,IAAM,GAY1B,SAAgB8L,EAAW9L,GACzB,IAAKA,EAAK,OAAO,KAKjB,IAJA,IAEIwV,EACAC,EAASC,EAASC,EAASC,EAH3BC,EAAM,IAAIrxC,MAIPgxC,EAAK5J,KAAS5L,MACR,IAALwV,GAINC,EAAuB,GAAlB7J,KAAS5L,KACK,MAAT,IAALwV,IAILE,EAAuB,GAAlB9J,KAAS5L,KACK,MAAT,IAALwV,GACHA,GAAY,GAALA,IAAY,GAAOC,GAAM,EAAKC,GAErCC,EAAuB,GAAlB/J,KAAS5L,KACK,MAAT,IAALwV,GACHA,GAAY,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAEjDC,EAAuB,GAAlBhK,KAAS5L,KAEZwV,EADiB,MAAT,IAALA,IACS,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAGlD,EAALJ,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAD/C,GAAlBhK,KAAS5L,OAKpB6V,EAAIxtC,KAAKmtC,IApBPK,EAAIxtC,MAAY,GAALmtC,IAAY,EAAKC,IAL5BI,EAAIxtC,KAAKmtC,GAmCb,OAAOjxC,OAAOuxC,eAAeD,GA1PlB34C,EAAAmvC,WA+MbnvC,EAAA4uC,aA+CA,IAAAL,EAAA,WAKA,OALA,gBAAavuC,EAAAuuC,eAQbvuC,EAAA64C,yBAAA,SAAgBA,EAAyBjX,GAEvC,GAAI6L,2BAA2B7L,IAASnX,EAAWquB,YAAa,OAAO,EAEvE,OAAQpJ,yBAAyB9N,IAC/B,KAAKlX,EAAaouB,YAClB,KAAKpuB,EAAaquB,OAAQ,OAAO,EACjC,KAAKruB,EAAasuB,MAAO,OAA2C,GAApChE,2BAA2BpT,GAC3D,KAAKlX,EAAauuB,MAChB,IAAKnF,sBAAsBlS,GAAO,CAChC,IAAIsX,EAAclF,6BAA6BpS,GAC/C,OAAOsX,EAAc,GAAKL,EAAyB3E,uBAAuBtS,EAAMsX,EAAc,KAIpG,OAAO,kaC5tDT,IAAAjtC,EAAAxL,EAAA,GAOA04C,EAAA14C,EAAA,GAYST,EAAAo5C,MAXPD,EAAAC,MAWcp5C,EAAAoZ,MATd+/B,EAAA//B,MAGF,IASY/D,EATZ9M,EAAA9H,EAAA,IASA,SAAY4U,GAEVA,IAAA,mBAGAA,IAAA,eACAA,IAAA,uBACAA,IAAA,iCACAA,IAAA,yBACAA,IAAA,yBAGAA,IAAA,2BACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,eACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,kCACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,4BACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kCACAA,IAAA,oCACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,8BAGAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,cACAA,IAAA,YACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,wBACAA,IAAA,gBACAA,IAAA,kBAGAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,gDACAA,IAAA,wCACAA,IAAA,8CACAA,IAAA,0CACAA,IAAA,0DACAA,IAAA,gDACAA,IAAA,0CACAA,IAAA,gDACAA,IAAA,sCACAA,IAAA,8CAGAA,IAAA,0BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,sBAzEF,CAAYA,EAAArV,EAAAqV,WAAArV,EAAAqV,SAAQ,KA6EpBrV,EAAAq5C,oBAAA,SAAoCjkC,GAClC,OAAQA,GACN,KAAKC,EAASmK,QACd,KAAKnK,EAASikC,KACd,KAAKjkC,EAASkkC,KACd,KAAKlkC,EAASmkC,MAAO,OAAO,EAE9B,OAAO,GAITx5C,EAAAy5C,eAAA,SAA+BrkC,GAC7B,OAAQA,GACN,KAAKC,EAASqkC,WACd,KAAKrkC,EAASskC,UACd,KAAKtkC,EAASukC,KACd,KAAKvkC,EAASwkC,cACd,KAAKxkC,EAASykC,cACd,KAAKzkC,EAAS0kC,eACd,KAAK1kC,EAAS2kC,MAAO,OAAO,EAE9B,OAAO,GAITh6C,EAAAi6C,sBAAA,SAAsC7kC,GACpC,OAAQA,GACN,KAAKC,EAASqkC,WACd,KAAKrkC,EAAS0kC,eAAgB,OAAO,EAEvC,OAAO,GAIT,IAAAhoC,EAAA,oBAAAA,KAw5BA,OA/4BSA,EAAAmoC,eAAP,SACEh5C,EACAuI,GAEA,IAAI+8B,EAAW,IAAI2T,EAInB,OAHA3T,EAAS/8B,MAAQA,EACjB+8B,EAASr0B,WAAajR,EACtBslC,EAAS9vB,KAAO,KACT8vB,GAGFz0B,EAAAW,qBAAP,SACExR,EACAuI,GAEA,OAAOsI,EAAKmoC,eAAenoC,EAAKE,2BAA2B/Q,EAAMuI,GAAQA,IAGpEsI,EAAAU,WAAP,SACEvR,EACAmnB,EACA+xB,EACA3wC,GAEA,IAAIgS,EAAO,IAAI4+B,EAKf,OAJA5+B,EAAKhS,MAAQA,EACbgS,EAAKva,KAAOA,EACZua,EAAK4M,cAAgBA,EACrB5M,EAAK2+B,WAAaA,EACX3+B,GAGF1J,EAAAM,kBAAP,SACE5I,GAEA,OAAOsI,EAAKU,WACVV,EAAKW,qBAAqB,GAAIjJ,GAC9B,MACA,EACAA,IAIGsI,EAAAuoC,oBAAP,SACEp5C,EACA2c,EACA08B,EACA9wC,GAEA,IAAI+wC,EAAO,IAAIC,EAKf,OAJAD,EAAK/wC,MAAQA,EACb+wC,EAAKt5C,KAAOA,EACZs5C,EAAK38B,YAAcA,EACnB28B,EAAKD,YAAcA,EACZC,GAGFzoC,EAAA2oC,gBAAP,SACEx5C,EACAua,EACAiI,EACAtO,EACA3L,GAEA,IAAI+wC,EAAO,IAAIG,EAMf,OALAH,EAAK/wC,MAAQA,EACb+wC,EAAKt5C,KAAOA,EACZs5C,EAAK/+B,KAAOA,EACZ++B,EAAK92B,YAAcA,EACnB82B,EAAKI,cAAgBxlC,EACdolC,GAGFzoC,EAAAS,gBAAP,SACEqoC,EACA5gC,EACA6gC,EACAV,EACA3wC,GAEA,IAAIsxC,EAAM,IAAIC,EAMd,OALAD,EAAItxC,MAAQA,EACZsxC,EAAIF,WAAaA,EACjBE,EAAI9gC,WAAaA,EACjB8gC,EAAID,iBAAmBA,EACvBC,EAAIX,WAAaA,EACVW,GAKFhpC,EAAAkpC,gBAAP,SACE/5C,EACAg6C,EACAzxC,GAEA,IAAI0xC,EAAO,IAAIC,EAKf,OAJAD,EAAK1xC,MAAQA,EACb0xC,EAAKj6C,KAAOA,EACZi6C,EAAK77B,UAAY47B,EACjBC,EAAKluC,cAAgBkQ,EAAoBjc,GAClCi6C,GAGFppC,EAAAspC,cAAP,SACE1wC,EACAyK,EACA3L,GAEA,IAAI6xC,EAAO,IAAIC,EAIf,OAHAD,EAAK7xC,MAAQA,EACb6xC,EAAKE,YAAcpmC,EACnBkmC,EAAK3wC,KAAOA,EACL2wC,GAKFvpC,EAAAE,2BAAP,SACE/Q,EACAuI,EACAgyC,QAAA,IAAAA,OAAA,GAEA,IAAI7Z,EAAO,IAAI8Z,EAKf,OAJA9Z,EAAKn4B,MAAQA,EACbm4B,EAAKj3B,KAAOzJ,EACZ0gC,EAAK+Z,OAASz6C,EACd0gC,EAAK6Z,SAAWA,EACT7Z,GAGF7vB,EAAA6pC,gCAAP,SACEnyC,GAEA,IAAIm4B,EAAO,IAAI8Z,EAGf,OAFA9Z,EAAKn4B,MAAQA,EACbm4B,EAAKj3B,KAAO,GACLi3B,GAGF7vB,EAAA8pC,6BAAP,SACEp/B,EACAhT,GAEA,IAAIm4B,EAAO,IAAIka,EAGf,OAFAla,EAAKn4B,MAAQA,EACbm4B,EAAKma,mBAAqBt/B,EACnBmlB,GAGF7vB,EAAAiqC,0BAAP,SACEC,EACAhX,EACAiX,EACAzyC,GAEA,IAAIm4B,EAAO,IAAIua,EAKf,OAJAva,EAAKn4B,MAAQA,EACbm4B,EAAKqa,cAAgBA,EACrBra,EAAKqD,WAAaA,EAClBrD,EAAKsa,OAASA,EACPta,GAGF7vB,EAAAqqC,uBAAP,SACEC,EACAta,EACAC,EACAv4B,GAEA,IAAIm4B,EAAO,IAAI0a,EAKf,OAJA1a,EAAKn4B,MAAQA,EACbm4B,EAAKya,SAAWA,EAChBza,EAAKG,KAAOA,EACZH,EAAKI,MAAQA,EACNJ,GAGF7vB,EAAAwqC,qBAAP,SACEtX,EACAuX,EACAtB,EACAzxC,GAEA,IAAIm4B,EAAO,IAAI6a,EAKf,OAJA7a,EAAKn4B,MAAQA,EACbm4B,EAAKqD,WAAaA,EAClBrD,EAAKvZ,cAAgBm0B,EACrB5a,EAAKtiB,UAAY47B,EACVtZ,GAGF7vB,EAAA2qC,sBAAP,SACEtpC,GAEA,IAAIwuB,EAAO,IAAI+a,EAGf,OAFA/a,EAAKn4B,MAAQ2J,EAAY3J,MACzBm4B,EAAKxuB,YAAcA,EACZwuB,GAGF7vB,EAAA6qC,sBAAP,SACEC,EACApzC,GAEA,IAAIm4B,EAAO,IAAIkb,EAGf,OAFAlb,EAAKn4B,MAAQA,EACbm4B,EAAKib,YAAcA,EACZjb,GAGF7vB,EAAAgrC,4BAAP,SACEtzC,GAEA,IAAIm4B,EAAO,IAAIob,EAEf,OADApb,EAAKn4B,MAAQA,EACNm4B,GAGF7vB,EAAAkrC,8BAAP,SACEhY,EACA5tB,EACA5N,GAEA,IAAIm4B,EAAO,IAAIsb,EAIf,OAHAtb,EAAKn4B,MAAQA,EACbm4B,EAAKqD,WAAaA,EAClBrD,EAAKub,kBAAoB9lC,EAClBuqB,GAGF7vB,EAAAqrC,sBAAP,SACE3zC,GAEA,IAAIm4B,EAAO,IAAIyb,EAEf,OADAzb,EAAKn4B,MAAQA,EACNm4B,GAGF7vB,EAAAurC,6BAAP,SACE17C,EACA6H,GAEA,IAAIm4B,EAAO,IAAI2b,EAGf,OAFA3b,EAAKn4B,MAAQA,EACbm4B,EAAKhgC,MAAQA,EACNggC,GAGF7vB,EAAAyrC,yBAAP,SACEpqC,GAEA,IAAIwuB,EAAO,IAAI6b,EAGf,OAFA7b,EAAKn4B,MAAQ2J,EAAY3J,MACzBm4B,EAAKxuB,YAAcA,EACZwuB,GAGF7vB,EAAA2rC,2BAAP,SACEzY,EACA0Y,EACAl0C,GAEA,IAAIm4B,EAAO,IAAIgc,EAIf,OAHAhc,EAAKn4B,MAAQA,EACbm4B,EAAKqD,WAAaA,EAClBrD,EAAK+b,OAASA,EACP/b,GAGF7vB,EAAA8rC,+BAAP,SACEj8C,EACA6H,GAEA,IAAIm4B,EAAO,IAAIkc,EAGf,OAFAlc,EAAKn4B,MAAQA,EACbm4B,EAAKhgC,MAAQA,EACNggC,GAGF7vB,EAAAgsC,oBAAP,SACE9Y,EACAuX,EACAtB,EACAzxC,GAEA,IAAIm4B,EAAO,IAAIoc,EAKf,OAJApc,EAAKn4B,MAAQA,EACbm4B,EAAKqD,WAAaA,EAClBrD,EAAKvZ,cAAgBm0B,EACrB5a,EAAKtiB,UAAY47B,EACVtZ,GAGF7vB,EAAAksC,qBAAP,SACEx0C,GAEA,IAAIm4B,EAAO,IAAIsc,EAEf,OADAtc,EAAKn4B,MAAQA,EACNm4B,GAGF7vB,EAAAosC,8BAAP,SACEnY,EACA5rB,EACA3Q,GAEA,IAAIm4B,EAAO,IAAIwc,EAIf,OAHAxc,EAAKn4B,MAAQA,EACbm4B,EAAKoE,MAAQA,EACbpE,EAAKxnB,OAASA,EACPwnB,GAGF7vB,EAAAssC,8BAAP,SACEpZ,EACAx7B,GAEA,IAAIm4B,EAAO,IAAI0c,EAGf,OAFA1c,EAAKn4B,MAAQA,EACbm4B,EAAKqD,WAAaA,EACXrD,GAGF7vB,EAAAwsC,+BAAP,SACEtZ,EACA3iC,EACAmH,GAEA,IAAIm4B,EAAO,IAAI4c,EAIf,OAHA5c,EAAKn4B,MAAQA,EACbm4B,EAAKqD,WAAaA,EAClBrD,EAAKt/B,SAAWA,EACTs/B,GAGF7vB,EAAA0sC,8BAAP,SACEC,EACA7sC,EACApI,GAEA,IAAIm4B,EAAO,IAAI+c,EAIf,OAHA/c,EAAKn4B,MAAQA,EACbm4B,EAAK8c,QAAUA,EACf9c,EAAKgd,aAAe/sC,EACb+vB,GAGF7vB,EAAA8sC,wBAAP,SACE/Z,EACAga,EACAC,EACAt1C,GAEA,IAAIm4B,EAAO,IAAIod,EAKf,OAJApd,EAAKn4B,MAAQA,EACbm4B,EAAKkD,UAAYA,EACjBlD,EAAKkd,OAASA,EACdld,EAAKmd,OAASA,EACPnd,GAGF7vB,EAAAktC,8BAAP,SACEr9C,EACA6H,GAEA,IAAIm4B,EAAO,IAAIsd,EAGf,OAFAtd,EAAKn4B,MAAQA,EACbm4B,EAAKhgC,MAAQA,EACNggC,GAGF7vB,EAAAotC,sBAAP,SACE11C,GAEA,IAAIm4B,EAAO,IAAIwd,EAEf,OADAxd,EAAKn4B,MAAQA,EACNm4B,GAGF7vB,EAAAstC,qBAAP,SACE51C,GAEA,IAAIm4B,EAAO,IAAI0d,EAEf,OADA1d,EAAKn4B,MAAQA,EACNm4B,GAGF7vB,EAAAwtC,qBAAP,SACE91C,GAEA,IAAIm4B,EAAO,IAAI4d,EAEf,OADA5d,EAAKn4B,MAAQA,EACNm4B,GAGF7vB,EAAA0tC,6BAAP,SACEpD,EACAqD,EACAj2C,GAEA,IAAIm4B,EAAO,IAAI+d,EAIf,OAHA/d,EAAKn4B,MAAQA,EACbm4B,EAAKya,SAAWA,EAChBza,EAAK8d,QAAUA,EACR9d,GAGF7vB,EAAA6tC,4BAAP,SACEvD,EACAqD,EACAj2C,GAEA,IAAIm4B,EAAO,IAAIie,EAIf,OAHAje,EAAKn4B,MAAQA,EACbm4B,EAAKya,SAAWA,EAChBza,EAAK8d,QAAUA,EACR9d,GAKF7vB,EAAA+tC,qBAAP,SACE7qC,EACAxL,GAEA,IAAI0xC,EAAO,IAAI4E,GAGf,OAFA5E,EAAK1xC,MAAQA,EACb0xC,EAAKlmC,WAAaA,EACXkmC,GAGFppC,EAAAiuC,qBAAP,SACEvb,EACAh7B,GAEA,IAAI0xC,EAAO,IAAI8E,GAGf,OAFA9E,EAAK1xC,MAAQA,EACb0xC,EAAK1W,MAAQA,EACN0W,GAGFppC,EAAAmuC,uBAAP,SACE/tC,EACAiR,EACAvF,EACAJ,EACAnC,EACAwB,EACAjL,EACApI,GAEA,IAAI0xC,EAAO,IAAIgF,GASf,OARAhF,EAAK1xC,MAAQA,EACb0xC,EAAKtpC,MAAQA,EACbspC,EAAKj6C,KAAOiR,EACZgpC,EAAK/3B,eAAiBA,EACtB+3B,EAAKt9B,YAAcA,EACnBs9B,EAAK19B,gBAAkBA,EACvB09B,EAAK7/B,QAAUA,EACf6/B,EAAKr+B,WAAaA,EACXq+B,GAGFppC,EAAAquC,wBAAP,SACE3b,EACAh7B,GAEA,IAAI0xC,EAAO,IAAIkF,GAGf,OAFAlF,EAAK1xC,MAAQA,EACb0xC,EAAK1W,MAAQA,EACN0W,GAGFppC,EAAAuuC,kBAAP,SACEnrC,EACA2vB,EACAr7B,GAEA,IAAI0xC,EAAO,IAAIoF,GAIf,OAHApF,EAAK1xC,MAAQA,EACb0xC,EAAKhmC,UAAYA,EACjBgmC,EAAKrW,UAAYA,EACVqW,GAGFppC,EAAAyuC,qBAAP,SACE/2C,GAEA,IAAI0xC,EAAO,IAAIsF,GAEf,OADAtF,EAAK1xC,MAAQA,EACN0xC,GAGFppC,EAAA2uC,sBAAP,SACEx/C,EACAoa,EACAwB,EACAjL,EACApI,GAEA,IAAI0xC,EAAO,IAAIwF,GAMf,OALAxF,EAAK1xC,MAAQA,EACb0xC,EAAKtpC,MAAQA,EACbspC,EAAKj6C,KAAOA,EACZi6C,EAAK/gC,OAASkB,EACd6/B,EAAKr+B,WAAaA,EACXq+B,GAGFppC,EAAA6uC,2BAAP,SACE1/C,EACAU,EACAiQ,EACApI,GAEA,IAAI0xC,EAAO,IAAI0F,GAKf,OAJA1F,EAAK1xC,MAAQA,EACb0xC,EAAKtpC,MAAQA,EACbspC,EAAKj6C,KAAOA,EACZi6C,EAAKv5C,MAAQA,EACNu5C,GAGFppC,EAAA+uC,sBAAP,SACExlC,EACAwF,EACAigC,EACAt3C,GAEA,IAAI0xC,EAAO,IAAI6F,GAIf,GAHA7F,EAAK1xC,MAAQA,EACb0xC,EAAK7/B,QAAUA,EACf6/B,EAAKr6B,KAAOA,EACRA,EAAM,CACR,IAAIxW,EAAiB/B,EAAA04C,cAAcngC,EAAKlf,OACpCkf,EAAKlf,MAAMs/C,WAAW,KACxB/F,EAAK7wC,eAAiB/B,EAAA44C,YACpB72C,EACAb,EAAMY,OAAOC,gBAGf6wC,EAAK7wC,eAAiBA,EAExB6wC,EAAKx6B,aAAeygC,GAAmBjG,EAAK7wC,qBAE5C6wC,EAAK7wC,eAAiB,KACtB6wC,EAAKx6B,aAAe,KAGtB,OADAw6B,EAAK4F,UAAYA,EACV5F,GAGFppC,EAAAsvC,4BAAP,SACEngD,EACA+nC,EACAx/B,GAEA,IAAI0xC,EAAO,IAAImG,GAIf,OAHAnG,EAAK1xC,MAAQA,EACb0xC,EAAKj6C,KAAOA,EACZi6C,EAAKlS,aAAeA,EACbkS,GAGFppC,EAAAwvC,mBAAP,SACErgD,EACA+nC,EACAx/B,GAEA,IAAI+wC,EAAO,IAAIgH,GAKf,OAJAhH,EAAK/wC,MAAQA,EACb+wC,EAAKhjC,UAAYtW,EACZ+nC,IAAcA,EAAe/nC,GAClCs5C,EAAKz5B,aAAekoB,EACbuR,GAGFzoC,EAAA0vC,0BAAP,SACExc,GAEA,IAAIkW,EAAO,IAAIuG,GAGf,OAFAvG,EAAK1xC,MAAQw7B,EAAWx7B,MACxB0xC,EAAKlW,WAAaA,EACXkW,GAGFppC,EAAA4vC,kBAAP,SACE7c,EACAQ,EACAC,EACA97B,GAEA,IAAI0xC,EAAO,IAAIyG,GAKf,OAJAzG,EAAK1xC,MAAQA,EACb0xC,EAAKrW,UAAYA,EACjBqW,EAAK7V,OAASA,EACd6V,EAAK5V,QAAUA,EACR4V,GAGFppC,EAAA8vC,sBAAP,SACEC,EACAhhC,EACArX,GAEA,IAAI0xC,EAAO,IAAI4G,GACf5G,EAAK1xC,MAAQA,EACb0xC,EAAKl6B,aAAe6gC,EACpB3G,EAAKh6B,cAAgB,KACrBg6B,EAAKr6B,KAAOA,EACZ,IAAIxW,EAAiB/B,EAAA04C,cAAcngC,EAAKlf,OAaxC,OAZIkf,EAAKlf,MAAMs/C,WAAW,KACxB/F,EAAK7wC,eAAiB/B,EAAA44C,YACpB72C,EACAb,EAAMY,OAAOC,iBAGVA,EAAe42C,WAAWj1C,EAAA7I,kBAC7BkH,EAAiB2B,EAAA7I,eAAiBkH,GAEpC6wC,EAAK7wC,eAAiBA,GAExB6wC,EAAKx6B,aAAeygC,GAAmBjG,EAAK7wC,gBACrC6wC,GAGFppC,EAAAiwC,kCAAP,SACE7vC,EACA2O,EACArX,GAEA,IAAI0xC,EAAO,IAAI4G,GAUf,OATA5G,EAAK1xC,MAAQA,EACb0xC,EAAKl6B,aAAe,KACpBk6B,EAAKh6B,cAAgBhP,EACrBgpC,EAAKr6B,KAAOA,EACZq6B,EAAK7wC,eAAiB/B,EAAA44C,YACpB54C,EAAA04C,cAAcngC,EAAKlf,OACnB6H,EAAMY,OAAOC,gBAEf6wC,EAAKx6B,aAAeygC,GAAmBjG,EAAK7wC,gBACrC6wC,GAGFppC,EAAAkwC,wBAAP,SACEvlC,EACAxb,EACAuI,GAEA,IAAI+wC,EAAO,IAAI0H,GAKf,OAJA1H,EAAK/wC,MAAQA,EACb+wC,EAAK99B,YAAcA,EACdxb,IAAMA,EAAOwb,GAClB89B,EAAKt5C,KAAOA,EACLs5C,GAGFzoC,EAAAowC,2BAAP,SACEjhD,EACAkiB,EACAvF,EACAvC,EACAwB,EACAjL,EACApI,GAEA,IAAI0xC,EAAO,IAAIiH,GAQf,OAPAjH,EAAK1xC,MAAQA,EACb0xC,EAAKtpC,MAAQA,EACbspC,EAAKj6C,KAAOA,EACZi6C,EAAK/3B,eAAiBA,EACtB+3B,EAAKt9B,YAAcA,EACnBs9B,EAAK7/B,QAAUA,EACf6/B,EAAKr+B,WAAaA,EACXq+B,GAGFppC,EAAAswC,uBAAP,SACEnhD,EACAua,EACAiI,EACA5G,EACAjL,EACApI,GAEA,IAAI0xC,EAAO,IAAImH,GAOf,OANAnH,EAAK1xC,MAAQA,EACb0xC,EAAKtpC,MAAQA,EACbspC,EAAKj6C,KAAOA,EACZi6C,EAAK1/B,KAAOA,EACZ0/B,EAAKz3B,YAAcA,EACnBy3B,EAAKr+B,WAAaA,EACXq+B,GAGFppC,EAAAwwC,mBAAP,SACE7+B,EACAohB,EACA0d,EACArtC,EACA1L,GAEA,IAAI0xC,EAAO,IAAIsH,GAMf,OALAtH,EAAK1xC,MAAQA,EACb0xC,EAAKz3B,YAAcA,EACnBy3B,EAAKrW,UAAYA,EACjBqW,EAAKqH,YAAcA,EACnBrH,EAAKhmC,UAAYA,EACVgmC,GAGFppC,EAAAQ,0BAAP,SACErR,EACAkiB,EACAtQ,EACAwR,EACAxH,EACAjL,EACA0S,EACA9a,GAEA,IAAI0xC,EAAO,IAAIuH,GASf,OARAvH,EAAK1xC,MAAQA,EACb0xC,EAAKtpC,MAAQA,EACbspC,EAAKj6C,KAAOA,EACZi6C,EAAK/3B,eAAiBA,EACtB+3B,EAAKroC,UAAYA,EACjBqoC,EAAK72B,KAAOA,EACZ62B,EAAKr+B,WAAaA,EAClBq+B,EAAK52B,UAAYA,EACV42B,GAGFppC,EAAA4wC,gCAAP,SACEC,EACAC,EACAp5C,GAEA,IAAI+wC,EAAO,IAAIsI,GAIf,OAHAtI,EAAK/wC,MAAQA,EACb+wC,EAAKoI,QAAUA,EACfpI,EAAKqI,UAAYA,EACVrI,GAGFzoC,EAAAgxC,wBAAP,SACE7hD,EACAkiB,EACAtQ,EACAwR,EACAxH,EACAjL,EACApI,GAEA,IAAI0xC,EAAO,IAAI6H,GAQf,OAPA7H,EAAK1xC,MAAQA,EACb0xC,EAAKtpC,MAAQA,EACbspC,EAAKj6C,KAAOA,EACZi6C,EAAK/3B,eAAiBA,EACtB+3B,EAAKroC,UAAYA,EACjBqoC,EAAK72B,KAAOA,EACZ62B,EAAKr+B,WAAaA,EACXq+B,GAGFppC,EAAAa,2BAAP,SACE1R,EACAoa,EACAwB,EACAjL,EACApI,GAEA,IAAI0xC,EAAO,IAAI8H,GAMf,OALA9H,EAAK1xC,MAAQA,EACb0xC,EAAKtpC,MAAQA,EACbspC,EAAKj6C,KAAOA,EACZi6C,EAAK7/B,QAAUA,EACf6/B,EAAKr+B,WAAaA,EACXq+B,GAGFppC,EAAAmxC,sBAAP,SACEthD,EACA6H,GAEA,IAAI0xC,EAAO,IAAIgI,GAGf,OAFAhI,EAAK1xC,MAAQA,EACb0xC,EAAKv5C,MAAQA,EACNu5C,GAGFppC,EAAAqxC,sBAAP,SACEte,EACAue,EACA55C,GAEA,IAAI0xC,EAAO,IAAImI,GAIf,OAHAnI,EAAK1xC,MAAQA,EACb0xC,EAAKrW,UAAYA,EACjBqW,EAAKkI,MAAQA,EACNlI,GAGFppC,EAAAwxC,iBAAP,SACE9e,EACAxvB,EACAxL,GAEA,IAAI+wC,EAAO,IAAIgJ,GAIf,OAHAhJ,EAAK/wC,MAAQA,EACb+wC,EAAK/V,MAAQA,EACb+V,EAAKvlC,WAAaA,EACXulC,GAGFzoC,EAAA0xC,qBAAP,SACE7hD,EACA6H,GAEA,IAAI0xC,EAAO,IAAIuI,GAGf,OAFAvI,EAAK1xC,MAAQA,EACb0xC,EAAKv5C,MAAQA,EACNu5C,GAGFppC,EAAA4xC,mBAAP,SACE1uC,EACA2uC,EACAC,EACAC,EACAr6C,GAEA,IAAI0xC,EAAO,IAAI4I,GAMf,OALA5I,EAAK1xC,MAAQA,EACb0xC,EAAKlmC,WAAaA,EAClBkmC,EAAKyI,cAAgBA,EACrBzI,EAAK0I,gBAAkBA,EACvB1I,EAAK2I,kBAAoBA,EAClB3I,GAGFppC,EAAAK,sBAAP,SACElR,EACAkiB,EACA1J,EACAoD,EACAjL,EACApI,GAEA,IAAI0xC,EAAO,IAAI6I,GAOf,OANA7I,EAAK1xC,MAAQA,EACb0xC,EAAKtpC,MAAQA,EACbspC,EAAKj6C,KAAOA,EACZi6C,EAAK/3B,eAAiBA,EACtB+3B,EAAK1/B,KAAO/B,EACZyhC,EAAKr+B,WAAaA,EACXq+B,GAGFppC,EAAAkyC,wBAAP,SACEhjC,EACAnE,EACArT,GAEA,IAAI0xC,EAAO,IAAI+I,GAIf,OAHA/I,EAAK1xC,MAAQA,EACb0xC,EAAKl6B,aAAeA,EACpBk6B,EAAKr+B,WAAaA,EACXq+B,GAGFppC,EAAAC,0BAAP,SACE9Q,EACAua,EACAiI,EACA5G,EACAjL,EACApI,GAEA,IAAI+wC,EAAO,IAAI2J,GAOf,OANA3J,EAAK/wC,MAAQA,EACb+wC,EAAK3oC,MAAQA,EACb2oC,EAAKt5C,KAAOA,EACZs5C,EAAK/+B,KAAOA,EACZ++B,EAAK92B,YAAcA,EACnB82B,EAAK19B,WAAaA,EACX09B,GAGFzoC,EAAAqyC,oBAAP,SACEnf,EACAx7B,GAEA,IAAI0xC,EAAO,IAAIkJ,GAGf,OAFAlJ,EAAK1xC,MAAQA,EACb0xC,EAAKlW,WAAaA,EACXkW,GAGFppC,EAAAuyC,qBAAP,SACExf,EACA3vB,EACA1L,GAEA,IAAI0xC,EAAO,IAAIoJ,GAIf,OAHApJ,EAAK1xC,MAAQA,EACb0xC,EAAKrW,UAAYA,EACjBqW,EAAKhmC,UAAYA,EACVgmC,GAEXppC,EAx5BA,GAAsB/R,EAAA+R,OA45BtB,IAAAyyC,EAAA,SAAA90C,GAAA,SAAA80C,mDAKA,OAL6C7yC,EAAA6yC,EAAA90C,GAK7C80C,EALA,CAA6CzyC,GAAvB/R,EAAAwkD,iBAQtB,IAAArK,EAAA,SAAAzqC,GAAA,SAAAyqC,IAAA,IAAAxqC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASovC,WAMlB,OAP8B9yC,EAAAwoC,EAAAzqC,GAO9ByqC,EAPA,CAA8BpoC,GAAjB/R,EAAAm6C,WAUb,IAAAE,EAAA,SAAA3qC,GAAA,SAAA2qC,IAAA,IAAA1qC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASqvC,OAMlB,OAP8B/yC,EAAA0oC,EAAA3qC,GAO9B2qC,EAPA,CAA8BmK,GAAjBxkD,EAAAq6C,WAUb,IAAAI,EAAA,SAAA/qC,GAAA,SAAA+qC,IAAA,IAAA9qC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASsvC,gBAQlB,OATuChzC,EAAA8oC,EAAA/qC,GASvC+qC,EATA,CAAuC1oC,GAA1B/R,EAAAy6C,oBAYb,SAAYmK,GAEVA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,eANF,CAAY5kD,EAAA4kD,gBAAA5kD,EAAA4kD,cAAa,KAUzB,IAAAjK,EAAA,SAAAjrC,GAAA,SAAAirC,IAAA,IAAAhrC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASwvC,UAWhBl1C,EAAAm1C,yBAAoD,KAEpDn1C,EAAAkC,MAAqB5F,EAAAtJ,YAAYmP,OAQnC,OAtBmCH,EAAAgpC,EAAAjrC,GAiBjCirC,EAAAp4C,UAAAuZ,GAAA,SAAGmB,GAA2B,OAAQ3c,KAAKuR,MAAQoL,IAASA,GAE5D09B,EAAAp4C,UAAA4b,MAAA,SAAMlB,GAA2B,OAA8B,IAAtB3c,KAAKuR,MAAQoL,IAEtD09B,EAAAp4C,UAAAgP,IAAA,SAAI0L,GAA2B3c,KAAKuR,OAASoL,GAC/C09B,EAtBA,CAAmC5oC,GAAtB/R,EAAA26C,gBAyBb,IAcYxtC,EAdZ6tC,EAAA,SAAAtrC,GAAA,SAAAsrC,IAAA,IAAArrC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAAS0vC,YAQlB,OATmCpzC,EAAAqpC,EAAAtrC,GASnCsrC,EATA,CAAmCwJ,GA+BnC,SAAgBrnC,EAAoBjc,GAElC,GAAIA,EAAKkU,MAAQC,EAASqkC,WAAY,CACpC,IAAIsL,EAAiC9jD,EAAMyJ,KAE3C,OADA7B,OAAOk8C,EAAQl9C,QACPk9C,EAAQh6C,WAAW,IACzB,QACE,GAAe,WAAXg6C,EAAsB,OAAO73C,EAAc8G,QAC/C,MAEF,SACE,GAAe,YAAX+wC,EAAuB,OAAO73C,EAAcmU,SAChD,MAEF,SACE,GAAe,UAAX0jC,EAAqB,OAAO73C,EAAcqQ,OAC9C,MAEF,SACE,GAAe,UAAXwnC,EAAqB,OAAO73C,EAAcyR,OAC9C,MAEF,SACE,GAAe,QAAXomC,EAAmB,OAAO73C,EAAc0R,KAC5C,MAEF,SACE,GAAe,YAAXmmC,EAAuB,OAAO73C,EAAcC,SAChD,MAEF,SACE,GAAe,UAAX43C,EAAqB,OAAO73C,EAAc4L,OAC9C,GAAe,SAAXisC,EAAoB,OAAO73C,EAAcsU,MAC7C,MAEF,SACE,GAAe,aAAXujC,EAAwB,OAAO73C,EAAc+L,gBAIhD,GACLhY,EAAKkU,MAAQC,EAAS0kC,gBACK74C,EAAM+jC,WAAW7vB,MAAQC,EAASqkC,WAC7D,CACIsL,EAA4D9jD,EAAM+jC,WAAYt6B,KAClF7B,OAAOk8C,EAAQl9C,QACf,IAAIm9C,EAAqC/jD,EAAMoB,SAASqI,KAGxD,GAFA7B,OAAOm8C,EAAQn9C,QAEA,YAAXk9C,EACF,OAAQC,EAAQj6C,WAAW,IACzB,QACE,GAAe,UAAXi6C,EAAqB,OAAO93C,EAAcE,gBAC9C,MAEF,SACE,OAAQ43C,GACN,IAAK,SAAU,OAAO93C,EAAcyB,gBACpC,IAAK,UAAW,OAAOzB,EAAcgC,mBAO/C,OAAOhC,EAAc+3C,OAhGVllD,EAAAg7C,gBAcb,SAAY7tC,GACVA,IAAA,mBACAA,IAAA,mBACAA,IAAA,uBACAA,IAAA,qCACAA,IAAA,qCACAA,IAAA,uCACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,uBACAA,IAAA,sBACAA,IAAA,gBACAA,IAAA,kBAbF,CAAYA,EAAAnN,EAAAmN,gBAAAnN,EAAAmN,cAAa,KAiBzBnN,EAAAmd,sBAqEA,IAAAi+B,EAAA,SAAA1rC,GAAA,SAAA0rC,IAAA,IAAAzrC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAAS8vC,YAQlB,OATmCxzC,EAAAypC,EAAA1rC,GASnC0rC,EATA,CAAmCrpC,GAAtB/R,EAAAo7C,gBAYb,SAAYgK,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,iBANF,CAAYplD,EAAAolD,cAAAplD,EAAAolD,YAAW,KAUvB,IAAA7J,EAAA,SAAA7rC,GAAA,SAAA6rC,IAAA,IAAA5rC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASgwC,UAMlB,OAPiC1zC,EAAA4pC,EAAA7rC,GAOjC6rC,EAPA,CAAiCxpC,GAApB/R,EAAAu7C,cAYb,IAAA+J,EAAA,SAAA51C,GAAA,SAAA41C,mDAAgD,OAAP3zC,EAAA2zC,EAAA51C,GAAO41C,EAAhD,CAAyCvzC,GAAnB/R,EAAAslD,aAGtB,IAYY5lC,EAZZg8B,EAAA,SAAAhsC,GAAA,SAAAgsC,IAAA,IAAA/rC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASqkC,aAQlB,OAT0C/nC,EAAA+pC,EAAAhsC,GAS1CgsC,EATA,CAA0C4J,GAA7BtlD,EAAA07C,uBAYb,SAAYh8B,GACVA,IAAA,iBACAA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,mBANF,CAAYA,EAAA1f,EAAA0f,cAAA1f,EAAA0f,YAAW,KAUvB,IAAA6lC,EAAA,SAAA71C,GAAA,SAAA61C,IAAA,IAAA51C,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASmK,UAIlB,OALgD7N,EAAA4zC,EAAA71C,GAKhD61C,EALA,CAAgDD,GAA1BtlD,EAAAulD,oBAQtB,IAAAzJ,EAAA,SAAApsC,GAAA,SAAAosC,IAAA,IAAAnsC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAA8P,YAAcC,EAAY8lC,QAI5B,OAL4C7zC,EAAAmqC,EAAApsC,GAK5CosC,EALA,CAA4CyJ,GAA/BvlD,EAAA87C,yBAQb,SAAY2J,GACVA,IAAA,mBACAA,IAAA,WACAA,IAAA,qBAHF,CAAYzlD,EAAAylD,gBAAAzlD,EAAAylD,cAAa,KAOzB,IAAAtJ,EAAA,SAAAzsC,GAAA,SAAAysC,IAAA,IAAAxsC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASskC,YAQlB,OATyChoC,EAAAwqC,EAAAzsC,GASzCysC,EATA,CAAyCmJ,GAA5BtlD,EAAAm8C,sBAYb,IAAAG,EAAA,SAAA5sC,GAAA,SAAA4sC,IAAA,IAAA3sC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASqwC,SAQlB,OATsC/zC,EAAA2qC,EAAA5sC,GAStC4sC,EATA,CAAsCgJ,GAAzBtlD,EAAAs8C,mBAYb,IAAAG,EAAA,SAAA/sC,GAAA,SAAA+sC,IAAA,IAAA9sC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASukC,OA4BlB,OA7BoCjoC,EAAA8qC,EAAA/sC,GAWlCrO,OAAAC,eAAIm7C,EAAAl6C,UAAA,qBAAkB,KAAtB,WACE,IACI2mB,EADAb,EAAgB/nB,KAAK+nB,cAEzB,OAAIA,IAAkBa,EAAmBb,EAAcvgB,QAC9CqxC,EAAA//B,MAAMhO,KAAKid,EAAc,GAAG5e,MAAO4e,EAAca,EAAmB,GAAGzf,OAEzEnJ,KAAK2kC,WAAWx7B,uCAIzBpI,OAAAC,eAAIm7C,EAAAl6C,UAAA,iBAAc,KAAlB,WACE,IAAI24C,EAAO56C,KAAKgf,UACZqmC,EAAezK,EAAKpzC,OACxB,OAAI69C,EACKxM,EAAA//B,MAAMhO,KAAK8vC,EAAK,GAAGzxC,MAAOyxC,EAAKyK,EAAe,GAAGl8C,OAEnDnJ,KAAK2kC,WAAWx7B,uCAE3BgzC,EA7BA,CAAoC6I,GAAvBtlD,EAAAy8C,iBAgCb,IAAAE,EAAA,SAAAjtC,GAAA,SAAAitC,IAAA,IAAAhtC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASgG,QAIlB,OALqC1J,EAAAgrC,EAAAjtC,GAKrCitC,EALA,CAAqC2I,GAAxBtlD,EAAA28C,kBAQb,IAAAG,EAAA,SAAAptC,GAAA,SAAAotC,IAAA,IAAAntC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASuwC,QAIlB,OALqCj0C,EAAAmrC,EAAAptC,GAKrCotC,EALA,CAAqCwI,GAAxBtlD,EAAA88C,kBAQb,IAAAE,EAAA,SAAAttC,GAAA,SAAAstC,IAAA,IAAArtC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAAS6J,YAChBvP,EAAAhF,KAAO,cACPgF,EAAAgsC,OAAS1vC,EAAA3I,cAAcoC,cACzB,OAJ2CiM,EAAAqrC,EAAAttC,GAI3CstC,EAJA,CAA2CtB,GAA9B17C,EAAAg9C,wBAOb,IAAAE,EAAA,SAAAxtC,GAAA,SAAAwtC,IAAA,IAAAvtC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASwkC,gBAMlB,OAP6CloC,EAAAurC,EAAAxtC,GAO7CwtC,EAPA,CAA6CoI,GAAhCtlD,EAAAk9C,0BAUb,IAAAK,EAAA,SAAA7tC,GAAA,SAAA6tC,IAAA,IAAA5tC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAA8P,YAAcC,EAAYmmC,QAI5B,OAL4Cl0C,EAAA4rC,EAAA7tC,GAK5C6tC,EALA,CAA4CgI,GAA/BvlD,EAAAu9C,yBAQb,IAAAE,EAAA,SAAA/tC,GAAA,SAAA+tC,IAAA,IAAA9tC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAAS8F,WAIlB,OALwCxJ,EAAA8rC,EAAA/tC,GAKxC+tC,EALA,CAAwC6H,GAA3BtlD,EAAAy9C,qBAQb,IAAAG,EAAA,SAAAluC,GAAA,SAAAkuC,IAAA,IAAAjuC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASywC,aAMlB,OAP0Cn0C,EAAAisC,EAAAluC,GAO1CkuC,EAPA,CAA0C0H,GAA7BtlD,EAAA49C,uBAUb,IAAAE,EAAA,SAAApuC,GAAA,SAAAouC,IAAA,IAAAnuC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAA8P,YAAcC,EAAYqmC,UAI5B,OAL8Cp0C,EAAAmsC,EAAApuC,GAK9CouC,EALA,CAA8CyH,GAAjCvlD,EAAA89C,2BAQb,IAAAE,EAAA,SAAAtuC,GAAA,SAAAsuC,IAAA,IAAAruC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAAS2wC,MAClB,OAFmCr0C,EAAAqsC,EAAAtuC,GAEnCsuC,EAFA,CAAmCvB,GAAtBz8C,EAAAg+C,gBAKb,IAAAE,EAAA,SAAAxuC,GAAA,SAAAwuC,IAAA,IAAAvuC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASikC,KAChB3pC,EAAAhF,KAAO,OACPgF,EAAAgsC,OAAS1vC,EAAA3I,cAAc+B,QACzB,OAJoCsM,EAAAusC,EAAAxuC,GAIpCwuC,EAJA,CAAoCxC,GAAvB17C,EAAAk+C,iBAOb,IAAAE,EAAA,SAAA1uC,GAAA,SAAA0uC,IAAA,IAAAzuC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAA8P,YAAcC,EAAYumC,SAM5B,OAP6Ct0C,EAAAysC,EAAA1uC,GAO7C0uC,EAPA,CAA6CmH,GAAhCvlD,EAAAo+C,0BAUb,IAAAE,EAAA,SAAA5uC,GAAA,SAAA4uC,IAAA,IAAA3uC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASykC,gBAIlB,OAL6CnoC,EAAA2sC,EAAA5uC,GAK7C4uC,EALA,CAA6CgH,GAAhCtlD,EAAAs+C,0BAQb,IAAAE,EAAA,SAAA9uC,GAAA,SAAA8uC,IAAA,IAAA7uC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAAS0kC,iBAMlB,OAP8CpoC,EAAA6sC,EAAA9uC,GAO9C8uC,EAPA,CAA8C8G,GAAjCtlD,EAAAw+C,2BAUb,IAAAG,EAAA,SAAAjvC,GAAA,SAAAivC,IAAA,IAAAhvC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAA8P,YAAcC,EAAYwmC,SAM5B,OAP6Cv0C,EAAAgtC,EAAAjvC,GAO7CivC,EAPA,CAA6C4G,GAAhCvlD,EAAA2+C,0BAUb,IAAAK,EAAA,SAAAtvC,GAAA,SAAAsvC,IAAA,IAAArvC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAAS8wC,UAQlB,OATuCx0C,EAAAqtC,EAAAtvC,GASvCsvC,EATA,CAAuCsG,GAA1BtlD,EAAAg/C,oBAYb,IAAAE,EAAA,SAAAxvC,GAAA,SAAAwvC,IAAA,IAAAvvC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAA8P,YAAcC,EAAYC,SAI5B,OAL6ChO,EAAAutC,EAAAxvC,GAK7CwvC,EALA,CAA6CqG,GAAhCvlD,EAAAk/C,0BAQb,IAAAE,EAAA,SAAA1vC,GAAA,SAAA0vC,IAAA,IAAAzvC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAAS2kC,MAChBrqC,EAAAhF,KAAO,QACPgF,EAAAgsC,OAAS1vC,EAAA3I,cAAcmC,SACzB,OAJqCkM,EAAAytC,EAAA1vC,GAIrC0vC,EAJA,CAAqC1D,GAAxB17C,EAAAo/C,kBAOb,IAAAE,EAAA,SAAA5vC,GAAA,SAAA4vC,IAAA,IAAA3vC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAAS+wC,KAChBz2C,EAAAhF,KAAO,OACPgF,EAAAgsC,OAAS1vC,EAAA3I,cAAckC,QACzB,OAJoCmM,EAAA2tC,EAAA5vC,GAIpC4vC,EAJA,CAAoC5D,GAAvB17C,EAAAs/C,iBAOb,IAAAE,EAAA,SAAA9vC,GAAA,SAAA8vC,IAAA,IAAA7vC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASkkC,KAChB5pC,EAAAhF,KAAO,OACPgF,EAAAgsC,OAAS1vC,EAAA3I,cAAcgC,QACzB,OAJoCqM,EAAA6tC,EAAA9vC,GAIpC8vC,EAJA,CAAoC9D,GAAvB17C,EAAAw/C,iBAOb,IAAAnC,EAAA,SAAA3tC,GAAA,SAAA2tC,IAAA,IAAA1tC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASmkC,MAChB7pC,EAAAhF,KAAO,QACPgF,EAAAgsC,OAAS1vC,EAAA3I,cAAciC,SACzB,OAJqCoM,EAAA0rC,EAAA3tC,GAIrC2tC,EAJA,CAAqC3B,GAAxB17C,EAAAq9C,kBAOb,IAAAgJ,EAAA,SAAA32C,GAAA,SAAA22C,mDAMA,OAN8C10C,EAAA00C,EAAA32C,GAM9C22C,EANA,CAA8Cf,GAAxBtlD,EAAAqmD,kBAStB,IAAA1G,EAAA,SAAAjwC,GAAA,SAAAiwC,IAAA,IAAAhwC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASixC,eAClB,OAF4C30C,EAAAguC,EAAAjwC,GAE5CiwC,EAFA,CAA4C0G,GAA/BrmD,EAAA2/C,yBAKb,IAAAE,EAAA,SAAAnwC,GAAA,SAAAmwC,IAAA,IAAAlwC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASkxC,cAClB,OAF2C50C,EAAAkuC,EAAAnwC,GAE3CmwC,EAFA,CAA2CwG,GAA9BrmD,EAAA6/C,wBAOb,IAGY1uC,EAHZq1C,EAAA,SAAA92C,GAAA,SAAA82C,mDAA+C,OAAP70C,EAAA60C,EAAA92C,GAAO82C,EAA/C,CAAwCz0C,GAAlB/R,EAAAwmD,YAGtB,SAAYr1C,GAEVA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,qBANF,CAAYA,EAAAnR,EAAAmR,aAAAnR,EAAAmR,WAAU,KAUtB,IAAAD,EAAA,SAAAxB,GAwBE,SAAAwB,EAAY5G,EAAwBK,EAAcyK,GAAlD,IAAAzF,EACED,EAAA5O,KAAAR,OAAOA,KAxBTqP,EAAAyF,KAAOC,EAASoxC,OAChB92C,EAAAoD,OAAS,KAeTpD,EAAA+2C,UAA8B,KAE9B/2C,EAAAwX,gBAAuB,EAEvBxX,EAAAg3C,YAAkC,KAKhCh3C,EAAKi3C,WAAaxxC,EAClBzF,EAAKrF,eAAiBA,EACtB,IAAIqW,EAAeygC,GAAmBzxC,EAAKrF,gBAC3CqF,EAAKgR,aAAeA,EACpB,IAAIkmC,EAAMlmC,EAAammC,YAAY76C,EAAArJ,uBACnC+M,EAAKo3C,WAAaF,GAAO,EAAIlmC,EAAazV,UAAU27C,EAAM,GAAKlmC,EAC/DhR,EAAKsF,WAAa,IAAI3N,MACtBqI,EAAKlG,MAAQ,IAAI0vC,EAAA//B,MAAMzJ,EAAM,EAAGhF,EAAK7C,QACrC6H,EAAKhF,KAAOA,IAOhB,OAzC4BgH,EAAAT,EAAAxB,GAsC1BrO,OAAAC,eAAI4P,EAAA3O,UAAA,UAAO,KAAX,WAAsB,OAAOjC,KAAKsmD,YAAcz1C,EAAW61C,uCAE3D3lD,OAAAC,eAAI4P,EAAA3O,UAAA,YAAS,KAAb,WAAwB,OAAOjC,KAAKsmD,YAAcz1C,EAAWC,yCAC/DF,EAzCA,CAA4Ba,GAAf/R,EAAAkR,SA4Cb,IAAA+1C,GAAA,SAAAv3C,GAAA,SAAAu3C,IAAA,IAAAt3C,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YAIEqP,EAAAmN,WAAqC,KAErCnN,EAAAkC,MAAqB5F,EAAAtJ,YAAYmP,OAQnC,OAdmDH,EAAAs1C,EAAAv3C,GASjDu3C,EAAA1kD,UAAAuZ,GAAA,SAAGmB,GAA2B,OAAQ3c,KAAKuR,MAAQoL,IAASA,GAE5DgqC,EAAA1kD,UAAA4b,MAAA,SAAMlB,GAA2B,OAA8B,IAAtB3c,KAAKuR,MAAQoL,IAEtDgqC,EAAA1kD,UAAAgP,IAAA,SAAI0L,GAA2B3c,KAAKuR,OAASoL,GAC/CgqC,EAdA,CAAmDT,GAA7BxmD,EAAAinD,wBAiBtB,IAAAnE,GAAA,SAAApzC,GAAA,SAAAozC,IAAA,IAAAnzC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASmJ,4BAMlB,OAP+C7M,EAAAmxC,EAAApzC,GAO/CozC,EAPA,CAA+CmE,IAAlCjnD,EAAA8iD,6BAUb,IAAAoE,GAAA,SAAAx3C,GAAA,SAAAw3C,mDAMA,OAN+Dv1C,EAAAu1C,EAAAx3C,GAM/Dw3C,EANA,CAA+DD,IAAzCjnD,EAAAknD,oCAStB,IAAAnH,GAAA,SAAArwC,GAAA,SAAAqwC,IAAA,IAAApwC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAAS8xC,QAIlB,OALoCx1C,EAAAouC,EAAArwC,GAKpCqwC,EALA,CAAoCyG,GAAvBxmD,EAAA+/C,kBAQb,IAAAE,GAAA,SAAAvwC,GAAA,SAAAuwC,IAAA,IAAAtwC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAAS+xC,QAIlB,OALoCz1C,EAAAsuC,EAAAvwC,GAKpCuwC,EALA,CAAoCuG,GAAvBxmD,EAAAigD,kBAQb,IAAAE,GAAA,SAAAzwC,GAAA,SAAAywC,IAAA,IAAAxwC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASM,mBAelB,OAhBsChE,EAAAwuC,EAAAzwC,GAYpCrO,OAAAC,eAAI6+C,EAAA59C,UAAA,YAAS,KAAb,WACE,IAAI6gB,EAAiB9iB,KAAK8iB,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAetb,OAAS,mCAE7Dq4C,EAhBA,CAAsC8G,IAAzBjnD,EAAAmgD,oBAmBb,IAAAE,GAAA,SAAA3wC,GAAA,SAAA2wC,IAAA,IAAA1wC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASgyC,WAIlB,OALuC11C,EAAA0uC,EAAA3wC,GAKvC2wC,EALA,CAAuCmG,GAA1BxmD,EAAAqgD,qBAQb,IAAAE,GAAA,SAAA7wC,GAAA,SAAA6wC,IAAA,IAAA5wC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASiyC,KAMlB,OAPiC31C,EAAA4uC,EAAA7wC,GAOjC6wC,EAPA,CAAiCiG,GAApBxmD,EAAAugD,eAUb,IAAAE,GAAA,SAAA/wC,GAAA,SAAA+wC,IAAA,IAAA9wC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAAS9R,QAClB,OAFoCoO,EAAA8uC,EAAA/wC,GAEpC+wC,EAFA,CAAoC+F,GAAvBxmD,EAAAygD,kBAKb,IAAAE,GAAA,SAAAjxC,GAAA,SAAAixC,IAAA,IAAAhxC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASQ,kBAIlB,OALqClE,EAAAgvC,EAAAjxC,GAKrCixC,EALA,CAAqCsG,IAAxBjnD,EAAA2gD,mBAQb,IAAAE,GAAA,SAAAnxC,GAAA,SAAAmxC,IAAA,IAAAlxC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASkyC,uBAKlB,OAN0C51C,EAAAkvC,EAAAnxC,GAM1CmxC,EANA,CAA0CqG,IAA7BlnD,EAAA6gD,wBASb,IAAAS,GAAA,SAAA5xC,GAAA,SAAA4xC,IAAA,IAAA3xC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASmyC,eAMlB,OAP2C71C,EAAA2vC,EAAA5xC,GAO3C4xC,EAPA,CAA2CvvC,GAA9B/R,EAAAshD,yBAUb,IAAAE,GAAA,SAAA9xC,GAAA,SAAA8xC,IAAA,IAAA7xC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASoyC,eAMlB,OAPkC91C,EAAA6vC,EAAA9xC,GAOlC8xC,EAPA,CAAkCzvC,GAArB/R,EAAAwhD,gBAUb,IAAAR,GAAA,SAAAtxC,GAAA,SAAAsxC,IAAA,IAAArxC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAAStB,SAYlB,OAbqCpC,EAAAqvC,EAAAtxC,GAarCsxC,EAbA,CAAqCwF,GAAxBxmD,EAAAghD,mBAgBb,IAAAU,GAAA,SAAAhyC,GAAA,SAAAgyC,IAAA,IAAA/xC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASqyC,aAIlB,OALyC/1C,EAAA+vC,EAAAhyC,GAKzCgyC,EALA,CAAyC8E,GAA5BxmD,EAAA0hD,uBAQb,IAAAY,GAAA,SAAA5yC,GAAA,SAAA4yC,IAAA,IAAA3yC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAAS2I,iBAGhBrO,EAAA8X,gBAAuB,IACzB,OALsC9V,EAAA2wC,EAAA5yC,GAKtC4yC,EALA,CAAsC4E,IAAzBlnD,EAAAsiD,oBAQb,IAAAG,GAAA,SAAA/yC,GAAA,SAAA+yC,IAAA,IAAA9yC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASsyC,MAalB,OAdkCh2C,EAAA8wC,EAAA/yC,GAclC+yC,EAdA,CAAkC+D,GAArBxmD,EAAAyiD,gBAiBb,SAAkBmF,GAEhBA,IAAA,eAEAA,IAAA,6CAEAA,IAAA,+BANF,CAAkB5nD,EAAA4nD,YAAA5nD,EAAA4nD,UAAS,KAU3B,IAAAlF,GAAA,SAAAhzC,GAAA,SAAAgzC,IAAA,IAAA/yC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASU,sBA6BlB,OA9ByCpE,EAAA+wC,EAAAhzC,GAYvCrO,OAAAC,eAAIohD,EAAAngD,UAAA,YAAS,KAAb,WACE,IAAI6gB,EAAiB9iB,KAAK8iB,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAetb,OAAS,mCAI3D46C,EAAAngD,UAAAslD,MAAA,WACE,OAAO91C,EAAKQ,0BACVjS,KAAKY,KACLZ,KAAK8iB,eACL9iB,KAAKwS,UACLxS,KAAKgkB,KACLhkB,KAAKwc,WACLxc,KAAKuR,MACLvR,KAAKikB,UACLjkB,KAAKmJ,QAGXi5C,EA9BA,CAAyCuE,IAA5BjnD,EAAA0iD,uBAiCb,IAAAd,GAAA,SAAAlyC,GAAA,SAAAkyC,IAAA,IAAAjyC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASyyC,KAQlB,OATiCn2C,EAAAiwC,EAAAlyC,GASjCkyC,EATA,CAAiC4E,GAApBxmD,EAAA4hD,eAYb,IAAAM,GAAA,SAAAxyC,GAAA,SAAAwyC,IAAA,IAAAvyC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAAS0yC,oBAIlB,OALuCp2C,EAAAuwC,EAAAxyC,GAKvCwyC,EALA,CAAuC+E,IAA1BjnD,EAAAkiD,qBAQb,IAAAH,GAAA,SAAAryC,GAAA,SAAAqyC,IAAA,IAAApyC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASE,SAYlB,OAbqC5D,EAAAowC,EAAAryC,GAarCqyC,EAbA,CAAqCyE,GAAxBxmD,EAAA+hD,mBAgBb,IAAAK,GAAA,SAAA1yC,GAAA,SAAA0yC,IAAA,IAAAzyC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASY,uBAClB,OAF0CtE,EAAAywC,EAAA1yC,GAE1C0yC,EAFA,CAA0CjC,IAA7BngD,EAAAoiD,wBAKb,IAAAY,GAAA,SAAAtzC,GAAA,SAAAszC,IAAA,IAAArzC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAAS6I,oBAClB,OAFuCvM,EAAAqxC,EAAAtzC,GAEvCszC,EAFA,CAAuCN,IAA1B1iD,EAAAgjD,qBAKb,IAAAC,GAAA,SAAAvzC,GAAA,SAAAuzC,IAAA,IAAAtzC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASc,uBAIlB,OAL0CxE,EAAAsxC,EAAAvzC,GAK1CuzC,EALA,CAA0CgE,IAA7BjnD,EAAAijD,wBAQb,IAAAE,GAAA,SAAAzzC,GAAA,SAAAyzC,IAAA,IAAAxzC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAAS2yC,SAIlB,OALqCr2C,EAAAwxC,EAAAzzC,GAKrCyzC,EALA,CAAqCqD,GAAxBxmD,EAAAmjD,mBAQb,IAAAK,GAAA,SAAA9zC,GAAA,SAAA8zC,IAAA,IAAA7zC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAAS4yC,aAMlB,OAPgCt2C,EAAA6xC,EAAA9zC,GAOhC8zC,EAPA,CAAgCzxC,GAAnB/R,EAAAwjD,cAUb,IAAAF,GAAA,SAAA5zC,GAAA,SAAA4zC,IAAA,IAAA3zC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAAS6yC,SAMlB,OAPqCv2C,EAAA2xC,EAAA5zC,GAOrC4zC,EAPA,CAAqCkD,GAAxBxmD,EAAAsjD,mBAUb,IAAAI,GAAA,SAAAh0C,GAAA,SAAAg0C,IAAA,IAAA/zC,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAAS8yC,QAIlB,OALoCx2C,EAAA+xC,EAAAh0C,GAKpCg0C,EALA,CAAoC8C,GAAvBxmD,EAAA0jD,kBAQb,IAAAK,GAAA,SAAAr0C,GAAA,SAAAq0C,IAAA,IAAAp0C,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAAS+yC,MAUlB,OAXkCz2C,EAAAoyC,EAAAr0C,GAWlCq0C,EAXA,CAAkCyC,GAArBxmD,EAAA+jD,gBAcb,IAAAC,GAAA,SAAAt0C,GAAA,SAAAs0C,IAAA,IAAAr0C,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASgB,kBAMlB,OAPqC1E,EAAAqyC,EAAAt0C,GAOrCs0C,EAPA,CAAqCiD,IAAxBjnD,EAAAgkD,mBAUb,IAAAG,GAAA,SAAAz0C,GAAA,SAAAy0C,IAAA,IAAAx0C,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASgzC,sBAClB,OAFyC12C,EAAAwyC,EAAAz0C,GAEzCy0C,EAFA,CAAyC+C,IAA5BlnD,EAAAmkD,uBAKb,IAAAD,GAAA,SAAAx0C,GAAA,SAAAw0C,IAAA,IAAAv0C,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASI,WAMlB,OAPuC9D,EAAAuyC,EAAAx0C,GAOvCw0C,EAPA,CAAuCsC,GAA1BxmD,EAAAkkD,qBAUb,IAAAG,GAAA,SAAA30C,GAAA,SAAA20C,IAAA,IAAA10C,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASizC,OAIlB,OALmC32C,EAAA0yC,EAAA30C,GAKnC20C,EALA,CAAmCmC,GAAtBxmD,EAAAqkD,iBAQb,IAAAE,GAAA,SAAA70C,GAAA,SAAA60C,IAAA,IAAA50C,EAAA,OAAAD,KAAA6S,MAAAjiB,KAAAgf,YAAAhf,YACEqP,EAAAyF,KAAOC,EAASkzC,QAMlB,OAPoC52C,EAAA4yC,EAAA70C,GAOpC60C,EAPA,CAAoCiC,GAqBpC,SAAgBpF,GAAmBtgC,GAEjC,OADIA,EAAKD,SAAS,SAAQC,EAAOA,EAAK5V,UAAU,EAAG4V,EAAKhZ,OAAS,IAC1DgZ,EAvBI9gB,EAAAukD,kBAUbvkD,EAAA2hB,cAAA,SAA8BvM,EAAqB0H,GACjD,GAAIA,EACF,IAAK,IAAInc,EAAI,EAAGoU,EAAI+H,EAAWhV,OAAQnH,EAAIoU,IAAKpU,EAAG,CACjD,IAAIqc,EAAYF,EAAWnc,GAC3B,GAAIqc,EAAU/P,eAAiBmI,EAAM,OAAO4H,EAGhD,OAAO,MAIThd,EAAAohD,sBAMAphD,EAAAwoD,cAAA,SAA8B/sC,GAC5B,GAAIA,EAAKrG,MAAQC,EAASqvC,KAAM,CAC9B,IAAIxjD,EAAkBua,EAAMva,KAC5B,QAASA,EAAKwV,MAAQxV,EAAKiR,WAAWxH,KAAK7C,QAE7C,OAAO,kFCr9DT,IAAA2gD,EAAAhoD,EAAA,GAOAioD,EAAAjoD,EAAA,IAOA,SAAkBkoD,GAKhBA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAKAA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAEAA,IAAA,gBAKAA,IAAA,cAEAA,IAAA,cAKAA,IAAA,gBAKAA,IAAA,gBA7CF,CAAkB3oD,EAAA2oD,WAAA3oD,EAAA2oD,SAAQ,KAiD1B,SAAkBC,GAChBA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,uBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,sBAEAA,IAAA,kBAEAA,IAAA,gBAEAA,IAAA,mBAEAA,IAAA,2BAEAA,IAAA,yBAEAA,IAAA,sBAvBF,CAAkB5oD,EAAA4oD,YAAA5oD,EAAA4oD,UAAS,KA0B3B,IAAMC,EAAY,IAAIpa,WAAW,IAGjCh7B,EAAA,WAoBE,SAAAA,EAAY2B,EAAgBvD,EAAkBg1B,GAHtCvmC,KAAAwoD,mBAAkC,KAIxCxoD,KAAK8U,KAAOA,EACZ9U,KAAKuR,MAAQA,EACbvR,KAAKumC,KAAOA,EACZvmC,KAAK4Z,SAAgB6uC,KAAeliB,EAAO,GAC3CvmC,KAAK0oD,eAAiB,KACtB1oD,KAAK0Z,mBAAqB,KAC1B1Z,KAAK2oD,gBAAkB3oD,KA4Y3B,OAxYEe,OAAAC,eAAImS,EAAAlR,UAAA,UAAO,KAAX,WACE,OAAQjC,KAAK8U,MACX,OAAkB,OAAO3B,EAAKjQ,GAC9B,OAAmB,OAAOiQ,EAAKhQ,IAC/B,QACA,OAAmB,OAAOgQ,EAAK/P,IAC/B,QACA,OAAmB,OAAO+P,EAAK9P,IAC/B,OAAqB,OAAoB,IAAbrD,KAAKumC,KAAapzB,EAAKy1C,QAAUz1C,EAAK01C,QAClE,OAAkB,OAAO11C,EAAK5P,GAC9B,OAAmB,OAAO4P,EAAK3P,IAC/B,OAAmB,OAAO2P,EAAK1P,IAC/B,OAAmB,OAAO0P,EAAKzP,IAC/B,OAAqB,OAAoB,IAAb1D,KAAKumC,KAAapzB,EAAK21C,QAAU31C,EAAK41C,QAClE,QACA,QAAS,OAAO51C,EAAK/P,sCAKzB+P,EAAAlR,UAAA+mD,UAAA,SAAUtnC,GACR,GAAIA,EAAQtR,MAAO,CACjB,IAAIs4C,EAAiB1oD,KAAK0oD,eAC1B,OAA0B,OAAnBA,IAA4BA,EAAelwC,aAAa2vC,EAAAj5C,eAAe0J,WAEhF,OAAO,GAITzF,EAAAlR,UAAAgnD,yBAAA,SAAyBC,GACvB,OAAOA,EAAW3iB,KAAOvmC,KAAKumC,MAIhCpzB,EAAAlR,UAAAknD,wBAAA,SAAwBD,GACtB,IAAI3iB,EAAOvmC,KAAKwb,GAAE,GAAuBxb,KAAKumC,KAAOvmC,KAAKumC,KAAO,EACjE,OAAO,IAAQ2iB,EAAW3iB,KAAOA,GAInCpzB,EAAAlR,UAAAuZ,GAAA,SAAGjK,GAA0B,OAAQvR,KAAKuR,MAAQA,IAAUA,GAE5D4B,EAAAlR,UAAA4b,MAAA,SAAMtM,GAA0B,OAA+B,IAAvBvR,KAAKuR,MAAQA,IAGrD4B,EAAAlR,UAAAomB,QAAA,SAAQ+gC,GACN5gD,OAAgB,GAATxI,KAAK8U,OAA2B9U,KAAK0oD,gBAC5C,IAAI1a,EAAM,IAAI76B,EAAKnT,KAAK8U,MAAmB,IAAb9U,KAAKuR,MAAwB,IAAwBvR,KAAKumC,MAExF,OADAyH,EAAI0a,eAAiBU,EACdpb,GAIT76B,EAAAlR,UAAA2jB,WAAA,SAAWpT,GACThK,OAAgB,GAATxI,KAAK8U,OAAyB9U,KAAK0Z,oBAC1C,IAAIs0B,EAAM,IAAI76B,EAAKnT,KAAK8U,MAAmB,IAAb9U,KAAKuR,MAAwB,IAAwBvR,KAAKumC,MAExF,OADAyH,EAAIt0B,mBAAqBlH,EAClBw7B,GAIT76B,EAAAlR,UAAAonD,WAAA,WASE,OARA7gD,OAAOxI,KAAKwb,GAAE,MACTxb,KAAKwoD,qBACRhgD,QAAQxI,KAAKwb,GAAE,MACfxb,KAAKwoD,mBAAqB,IAAIr1C,EAAKnT,KAAK8U,KAAgB,IAAV9U,KAAKuR,MAA4BvR,KAAKumC,MACpFvmC,KAAKwoD,mBAAmBG,gBAAkB3oD,KAC1CA,KAAKwoD,mBAAmBE,eAAiB1oD,KAAK0oD,eAC9C1oD,KAAKwoD,mBAAmB9uC,mBAAqB1Z,KAAK0Z,oBAE7C1Z,KAAKwoD,oBAIdr1C,EAAAlR,UAAA4mB,eAAA,SAAeC,EAAcwgC,GAC3B,IAAIC,EACAC,EACAC,EACAC,EACJ,QAL2B,IAAAJ,OAAA,GAKvBtpD,KAAKwb,GAAE,MACT,GAAIsN,EAAOtN,GAAE,QACNxb,KAAKwb,GAAE,MAAwBsN,EAAOtN,GAAE,MAC3C,GAAI+tC,EAAevpD,KAAK0oD,gBACtB,GAAIc,EAAc1gC,EAAO4/B,eACvB,OAAOa,EAAa1gC,eAAe2gC,QAEhC,IAAIC,EAAkBzpD,KAAK0Z,sBAC5BgwC,EAAiB5gC,EAAOpP,oBAC1B,OAAO+vC,EAAgB5gC,eAAe6gC,QAKzC,IAAK5gC,EAAOtN,GAAE,KACnB,GAAIxb,KAAKwb,GAAE,GACT,GAAIsN,EAAOtN,GAAE,IACX,IACG8tC,GACDtpD,MAAQmT,EAAKvP,MACb5D,KAAKwb,GAAE,IAAsBsN,EAAOtN,GAAE,GAEtC,OAAOxb,KAAKumC,MAAQzd,EAAOyd,SAExB,IAAe,IAAXzd,EAAOhU,KAChB,OAAO9U,KAAKumC,MAAQ,GACf,GAAe,IAAXzd,EAAOhU,KAChB,OAAO9U,KAAKumC,MAAQ,QAEjB,GAAIvmC,KAAKwb,GAAE,IAChB,GAAIsN,EAAOtN,GAAE,GACX,OAAOxb,KAAKumC,MAAQzd,EAAOyd,UAExB,GAAIvmC,KAAKwb,GAAE,OACZsN,EAAOtN,GAAE,MACX,OAAOxb,KAAKumC,MAAQzd,EAAOyd,KAIjC,OAAO,GAITpzB,EAAAlR,UAAA0nD,uBAAA,SAAuB7gC,EAAcwgC,GACnC,YADmC,IAAAA,OAAA,GAC/BtpD,KAAKwb,GAAE,KAA8Bxb,KAAK6oB,eAAeC,IACpDA,EAAOtN,GAAE,OACdxb,KAAKwb,GAAE,GACFsN,EAAOtN,GAAE,IAAuBsN,EAAOyd,MAAQvmC,KAAKumC,QACxD+iB,GAAwBtpD,KAAKwb,GAAE,IAAsBsN,EAAOtN,GAAE,IAG5Dxb,KAAK8U,MAAQgU,EAAOhU,OAItB3B,EAAAy2C,kBAAP,SAAyBnoB,EAAYC,EAAamoB,GAChD,OAAInoB,EAAM7Y,eAAe4Y,EAAMooB,GAA+BpoB,EACrDA,EAAK5Y,eAAe6Y,EAAOmoB,GAA+BnoB,EAC5D,MAITvuB,EAAAlR,UAAA6H,SAAA,WACE,GAAI9J,KAAKwb,GAAE,KAAuB,CAChC,IAAIktC,EAAiB1oD,KAAK0oD,eAC1B,GAAIA,EACF,OAAO1oD,KAAKwb,GAAE,KACVktC,EAAex3C,aAAe,UAC9Bw3C,EAAex3C,aAErB,IAAIwI,EAAqB1Z,KAAK0Z,mBAC9B,GAAIA,EACF,OAAO1Z,KAAKwb,GAAE,KACV,IAAM9B,EAAmB5P,WAAa,WACtC4P,EAAmB5P,WAEzBtB,QAAO,GAET,OAAQxI,KAAK8U,MACX,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,QAAoB,MAAO,OAC3B,QAAmB,MAAO,MAC1B,QAAmB,MAAO,MAC1B,QAAoB,MAAO,OAC3B,QAAStM,QAAO,GAChB,QAAoB,MAAO,SAO/B2K,EAAAlR,UAAA6nD,aAAA,WACE,OAAQ9pD,KAAK8U,MACX,QAAS,OAAOszC,EAAAj+B,WAAWhkB,IAC3B,OACA,OAAmB,OAAOiiD,EAAAj+B,WAAW/jB,IACrC,OACA,OAAqB,OAAoB,IAAbpG,KAAKumC,KAAa6hB,EAAAj+B,WAAW/jB,IAAMgiD,EAAAj+B,WAAWhkB,IAC1E,QAAmB,OAAOiiD,EAAAj+B,WAAWvjB,IACrC,QAAmB,OAAOwhD,EAAAj+B,WAAWtjB,IACrC,QAAoB,OAAOuhD,EAAAj+B,WAAWrjB,KACtC,QAAqB,OAAOshD,EAAAj+B,WAAWka,OAK3ClxB,EAAAlR,UAAA8nD,aAAA,SAAapqD,GACX,OAAQK,KAAK8U,MACX,QAAoBtM,QAAO,GAC3B,QAAS,OAAO7I,EAAOygC,UAAU,GACjC,OACA,OAAqB,GAAiB,IAAbpgC,KAAKumC,KAAY,OAAO5mC,EAAOygC,UAAU,GAClE,OACA,OAAmB,OAAOzgC,EAAO6gC,UAAU,GAC3C,QAAmB,OAAO7gC,EAAOihC,UAAU,GAC3C,QAAmB,OAAOjhC,EAAOmhC,UAAU,GAC3C,QAAoB,OAAOnhC,EAAOqhC,WAAWunB,KAKjDp1C,EAAAlR,UAAA+nD,YAAA,SAAYrqD,GACV,OAAQK,KAAK8U,MACX,QACA,QAAoBtM,QAAO,GAC3B,QAAS,OAAO7I,EAAOygC,UAAU,GACjC,OACA,OAAqB,GAAiB,IAAbpgC,KAAKumC,KAAY,OAAO5mC,EAAOygC,UAAU,GAClE,OACA,OAAmB,OAAOzgC,EAAO6gC,UAAU,GAC3C,QAAmB,OAAO7gC,EAAOihC,UAAU,GAC3C,QAAmB,OAAOjhC,EAAOmhC,UAAU,KAK/C3tB,EAAAlR,UAAAgoD,eAAA,SAAetqD,GACb,OAAQK,KAAK8U,MACX,QACA,QAAoBtM,QAAO,GAC3B,QAAS,OAAO7I,EAAOygC,WAAW,GAClC,OACA,OAAqB,GAAiB,IAAbpgC,KAAKumC,KAAY,OAAO5mC,EAAOygC,WAAW,GACnE,OACA,OAAmB,OAAOzgC,EAAO6gC,WAAW,GAAI,GAChD,QAAmB,OAAO7gC,EAAOihC,WAAW,GAC5C,QAAmB,OAAOjhC,EAAOmhC,WAAW,KAKhD3tB,EAAAlR,UAAAglB,kBAAA,WACE,OAAQjnB,KAAK8U,MAEX,OACA,OACA,OACA,OACA,OACA,OACA,QAAoB,MAAO,IAC3B,OACA,OAAmB,MAAO,IAC1B,OACA,OAAqB,OAAoB,IAAb9U,KAAKumC,KAAa,IAAM,IACpD,QAAmB,MAAO,IAC1B,QAAmB,MAAO,IAC1B,QAAoB,MAAO,IAC3B,QAAoB,MAAO,IAC3B,QAAS/9B,QAAO,GAElB,MAAO,KAMO2K,EAAAjQ,GAAY,IAAIiQ,EAAI,EAClC,IAGmB,GAILA,EAAAhQ,IAAY,IAAIgQ,EAAI,EAClC,IAGkB,IAIJA,EAAA/P,IAAY,IAAI+P,EAAI,EAClC,IAEkB,IAIJA,EAAA9P,IAAY,IAAI8P,EAAI,EAClC,IAGkB,IAIJA,EAAA01C,QAAgB,IAAI11C,EAAI,EACtC,IAGkB,IAIJA,EAAAy1C,QAAgB,IAAIz1C,EAAI,EACtC,IAIkB,IAIJA,EAAA5P,GAAW,IAAI4P,EAAI,EACjC,IAGmB,GAILA,EAAA3P,IAAY,IAAI2P,EAAI,EAClC,IAGkB,IAIJA,EAAA1P,IAAY,IAAI0P,EAAI,EAClC,IAEkB,IAIJA,EAAAzP,IAAY,IAAIyP,EAAI,EAClC,IAGkB,IAIJA,EAAA41C,QAAgB,IAAI51C,EAAI,EACtC,IAGkB,IAIJA,EAAA21C,QAAgB,IAAI31C,EAAI,EACtC,IAIkB,IAIJA,EAAAvP,KAAa,IAAIuP,EAAI,GACnC,IAGmB,GAILA,EAAAtP,IAAY,IAAIsP,EAAI,GAClC,IAEkB,IAIJA,EAAArP,IAAY,IAAIqP,EAAI,GAClC,IAGkB,IAIJA,EAAApP,KAAa,IAAIoP,EAAI,GACnC,KACiB,KAIHA,EAAAG,KAAa,IAAIH,EAAI,KAAgC,GACvEA,EAvaA,GAAazT,EAAAyT,OA0abzT,EAAAwqD,mBAAA,SAAmCC,GAGjC,IAFA,IAAIC,EAAWD,EAAM3iD,OACjBwmC,EAAM,IAAIhnC,MAAkBojD,GACvB/pD,EAAI,EAAGA,EAAI+pD,IAAY/pD,EAAG2tC,EAAI3tC,GAAK8pD,EAAM9pD,GAAGypD,eACrD,OAAO9b,GAITtuC,EAAA2qD,cAAA,SAA8BF,GAC5B,IAAIC,EAAWD,EAAM3iD,OACrB,IAAK4iD,EAAU,MAAO,GAEtB,IADA,IAAIz/C,EAAK,IAAI3D,MAAcojD,GAClB/pD,EAAI,EAAGA,EAAI+pD,IAAY/pD,EAAGsK,EAAGtK,GAAK8pD,EAAM9pD,GAAGyJ,WACpD,OAAOa,EAAGG,KAAK,MAIjB,IAAAsX,EAAA,WAoBE,SAAAA,EACE3I,EACAE,EACAoM,QAFA,IAAAtM,MAAA,WACA,IAAAE,MAAA,WACA,IAAAoM,MAAA,MARF/lB,KAAAsqD,qBAA8C,KAU5CtqD,KAAKyZ,eAAiBA,GAAkC,GACxDzZ,KAAKuqD,eAAiB,KACtBvqD,KAAKwqD,mBAAqB,EAC1BxqD,KAAK2Z,WAAaA,GAA0BxG,EAAKG,KACjDtT,KAAK+lB,SAAWA,EAChB/lB,KAAKyqD,SAAU,EACfzqD,KAAKmb,KAAOhI,EAAK1P,IAAImiB,WAAW5lB,MAoGpC,OAjGEoiB,EAAAngB,UAAAyoD,iBAAA,SAAiBhpC,GACf,IAAIoH,EAAS9oB,KAAKsqD,qBAGlB,OAFKxhC,EACAtgB,OAAOsgB,EAAOpH,SAAWA,GADjB1hB,KAAKsqD,qBAAuBxhC,EAAS,IAAIq/B,EAAArhC,eAAe9mB,KAAM0hB,GAEpEoH,GAIT1G,EAAAngB,UAAAikB,iBAAA,SAAiBtC,GACf,IAAI2mC,EAAiBvqD,KAAKuqD,eAC1B,OAAOA,GAAkBA,EAAe/iD,OAASoc,EAC7C2mC,EAAe3mC,GACf+mC,EAAwB/mC,IAI9BxB,EAAAngB,UAAA4mB,eAAA,SAAeC,GAIb,IAAI8hC,EAAe5qD,KAAK+lB,SACpB8kC,EAAiB/hC,EAAO/C,SAC5B,GAAI6kC,GACF,IAAMC,IAAkBD,EAAa/hC,eAAegiC,GAAkB,OAAO,OACxE,GAAIA,EACT,OAAO,EAIT,GAAI7qD,KAAKyqD,SAAW3hC,EAAO2hC,QAAS,OAAO,EAG3C,IAAIK,EAAqB9qD,KAAKyZ,eAC1BsxC,EAAuBjiC,EAAOrP,eAC9BuxC,EAAgBF,EAAmBtjD,OACvC,GAAIwjD,GAAiBD,EAAqBvjD,OAAQ,OAAO,EACzD,IAAK,IAAInH,EAAI,EAAGA,EAAI2qD,IAAiB3qD,EAAG,CACtC,IAAI4qD,EAAoBH,EAAmBzqD,GACvC6qD,EAAsBH,EAAqB1qD,GAC/C,IAAK4qD,EAAkBpiC,eAAeqiC,GAAsB,OAAO,EAIrE,IAAIC,EAAiBnrD,KAAK2Z,WACtByxC,EAAmBtiC,EAAOnP,WAC9B,OAAOwxC,GAAkBC,GAAoBD,EAAetiC,eAAeuiC,IAItEhpC,EAAAipC,oBAAP,SAA2B5xC,EAA+BE,EAAkBoM,QAAA,IAAAA,MAAA,MAC1E,IAAIpb,EAAK,GAGT,GAFAA,EAAGE,KAAK8O,EAAWsN,qBACflB,GAAUpb,EAAGE,KAAKkb,EAASkB,qBAC3BxN,EACF,IAAK,IAAIpZ,EAAI,EAAGoU,EAAIgF,EAAejS,OAAQnH,EAAIoU,IAAKpU,EAAGsK,EAAGE,KAAK4O,EAAepZ,GAAG4mB,qBAEnF,MAAO,WAAatc,EAAGG,KAAK,KAI9BsX,EAAAngB,UAAAglB,kBAAA,WACE,OAAO7E,EAAUipC,oBAAoBrrD,KAAKyZ,eAAgBzZ,KAAK2Z,WAAY3Z,KAAK+lB,WAIlF3D,EAAAngB,UAAA6H,SAAA,WACE,IAAIa,EAAK,IAAI3D,MACb2D,EAAGE,KAAK,KACR,IAAI+Y,EAAQ,EACRmC,EAAW/lB,KAAK+lB,SAChBA,IACFpb,EAAGE,KAAK,UACRrC,QAAQud,EAASrM,oBACjB/O,EAAGE,KAAKkb,EAASjc,YACjB8Z,EAAQ,GAEV,IAAI22B,EAAav6C,KAAKyZ,eAClBuxC,EAAgBzQ,EAAW/yC,OAC/B,GAAIwjD,EAKF,IAJA,IAAItlB,EAAQ1lC,KAAKuqD,eACb3kB,EAAWF,EAAQA,EAAMl+B,OAAS,EAClC8jD,EAAgBtrD,KAAKwqD,mBACrBe,EAAYvrD,KAAKyqD,QAAUO,EAAgB,GAAK,EAC3C3qD,EAAI,EAAGA,EAAI2qD,IAAiB3qD,IAAKujB,EACpCA,GAAOjZ,EAAGE,KAAK,MACfxK,GAAKkrD,GAAW5gD,EAAGE,KAAK,OACxBxK,EAAIulC,EAAUj7B,EAAGE,KAAgB66B,EAAOrlC,IACvCsK,EAAGE,KAAK8/C,EAAwBtqD,IACjCA,GAAKirD,GAAiBjrD,GAAKkrD,EAAW5gD,EAAGE,KAAK,OAC7CF,EAAGE,KAAK,MACbF,EAAGE,KAAK0vC,EAAWl6C,GAAGyJ,YAK1B,OAFAa,EAAGE,KAAK,SACRF,EAAGE,KAAK7K,KAAK2Z,WAAW7P,YACjBa,EAAGG,KAAK,KAEnBsX,EAnIA,GAAa1iB,EAAA0iB,YAwIb,IAAIopC,EAA+C,KAGnD,SAAgBb,EAAwB/mC,GACjC4nC,IAA6BA,EAA8B,IAChE,IAAK,IAAInrD,EAAImrD,EAA4BhkD,OAAQnH,GAAKujB,IAASvjB,EAC7DmrD,EAA4B3gD,KAAK,OAASxK,EAAEyJ,SAAS,KAEvD,OAAO0hD,EAA4B5nC,EAAQ,GAL7ClkB,EAAAirD,ybC9pBA,IAuBY7R,EAwIA2S,EA/JZ7/C,EAAAzL,EAAA,GAMA2L,EAAA3L,EAAA,GAKA8H,EAAA9H,EAAA,GA0JA,SAAgBurD,EAAiBrhD,GAE/B,OADA7B,OAAO6B,EAAK7C,QACJ6C,EAAKK,WAAW,IACtB,QACE,OAAQL,GACN,IAAK,WAAY,OAAOyuC,EAAMt6B,SAC9B,IAAK,KAAM,OAAOs6B,EAAM6S,GACxB,IAAK,QAAS,OAAO7S,EAAM8S,MAC3B,IAAK,QAAS,OAAO9S,EAAM+S,MAE7B,MAEF,QACE,OAAQxhD,GACN,IAAK,QAAS,OAAOyuC,EAAMgO,MAE7B,MAEF,QACE,OAAQz8C,GACN,IAAK,OAAQ,OAAOyuC,EAAMgT,KAC1B,IAAK,QAAS,OAAOhT,EAAMiT,MAC3B,IAAK,QAAS,OAAOjT,EAAM/9B,MAC3B,IAAK,WAAY,OAAO+9B,EAAMiO,SAC9B,IAAK,QAAS,OAAOjO,EAAMn9B,MAC3B,IAAK,cAAe,OAAOm9B,EAAMl6B,YAEnC,MAEF,SACE,OAAQvU,GACN,IAAK,WAAY,OAAOyuC,EAAMkT,SAC9B,IAAK,UAAW,OAAOlT,EAAMt3B,QAC7B,IAAK,UAAW,OAAOs3B,EAAMmT,QAC7B,IAAK,SAAU,OAAOnT,EAAMoT,OAC5B,IAAK,KAAM,OAAOpT,EAAMkO,GAE1B,MAEF,SACE,OAAQ38C,GACN,IAAK,OAAQ,OAAOyuC,EAAMqT,KAC1B,IAAK,OAAQ,OAAOrT,EAAM91B,KAC1B,IAAK,SAAU,OAAO81B,EAAMrlC,OAC5B,IAAK,UAAW,OAAOqlC,EAAMsT,QAE/B,MAEF,SACE,OAAQ/hD,GACN,IAAK,QAAS,OAAOyuC,EAAMI,MAC3B,IAAK,UAAW,OAAOJ,EAAMuT,QAC7B,IAAK,MAAO,OAAOvT,EAAMuO,IACzB,IAAK,OAAQ,OAAOvO,EAAMwT,KAC1B,IAAK,WAAY,OAAOxT,EAAMj+B,SAEhC,MAEF,SACE,OAAQxQ,GACN,IAAK,MAAO,OAAOyuC,EAAMh7B,IAE3B,MAEF,SACE,OAAQzT,GACN,IAAK,KAAM,OAAOyuC,EAAM0O,GACxB,IAAK,aAAc,OAAO1O,EAAMyT,WAChC,IAAK,SAAU,OAAOzT,EAAM7jC,OAC5B,IAAK,KAAM,OAAO6jC,EAAM0T,GACxB,IAAK,aAAc,OAAO1T,EAAM0M,WAChC,IAAK,YAAa,OAAO1M,EAAM7wB,UAC/B,IAAK,KAAM,OAAO6wB,EAAM2T,GAE1B,MAEF,SACE,OAAQpiD,GACN,IAAK,QAAS,OAAOyuC,EAAM4T,MAE7B,MAEF,SACE,OAAQriD,GACN,IAAK,MAAO,OAAOyuC,EAAM6T,IAE3B,MAEF,SACE,OAAQtiD,GACN,IAAK,SAAU,OAAOyuC,EAAM8T,OAE9B,MAEF,SACE,OAAQviD,GACN,IAAK,YAAa,OAAOyuC,EAAM/1B,UAC/B,IAAK,MAAO,OAAO+1B,EAAM4M,IACzB,IAAK,OAAQ,OAAO5M,EAAME,KAE5B,MAEF,SACE,OAAQ3uC,GACN,IAAK,KAAM,OAAOyuC,EAAM+T,GAE1B,MAEF,SACE,OAAQxiD,GACN,IAAK,UAAW,OAAOyuC,EAAMgU,QAC7B,IAAK,UAAW,OAAOhU,EAAMiU,QAC7B,IAAK,YAAa,OAAOjU,EAAMkU,UAC/B,IAAK,SAAU,OAAOlU,EAAMmU,OAE9B,MAEF,SACE,OAAQ5iD,GACN,IAAK,WAAY,OAAOyuC,EAAMz6B,SAC9B,IAAK,SAAU,OAAOy6B,EAAM4O,OAE9B,MAEF,SACE,OAAQr9C,GACN,IAAK,MAAO,OAAOyuC,EAAM/6B,IACzB,IAAK,SAAU,OAAO+6B,EAAM36B,OAC5B,IAAK,QAAS,OAAO26B,EAAMY,MAC3B,IAAK,SAAU,OAAOZ,EAAM8O,OAE9B,MAEF,SACE,OAAQv9C,GACN,IAAK,OAAQ,OAAOyuC,EAAMgN,KAC1B,IAAK,QAAS,OAAOhN,EAAM+O,MAC3B,IAAK,OAAQ,OAAO/O,EAAMG,KAC1B,IAAK,MAAO,OAAOH,EAAMgP,IACzB,IAAK,OAAQ,OAAOhP,EAAMsL,KAC1B,IAAK,SAAU,OAAOtL,EAAMoU,OAE9B,MAEF,SACE,OAAQ7iD,GACN,IAAK,MAAO,OAAOyuC,EAAMqU,IACzB,IAAK,OAAQ,OAAOrU,EAAMkP,KAE5B,MAEF,SACE,OAAQ39C,GACN,IAAK,QAAS,OAAOyuC,EAAMmP,MAC3B,IAAK,OAAQ,OAAOnP,EAAMsU,KAE5B,MAEF,SACE,OAAQ/iD,GACN,IAAK,QAAS,OAAOyuC,EAAMuU,OAKjC,OAAOvU,EAAM9pC,QAGf,SAAgBs+C,EAAsBC,GACpC,OAAQA,GACN,KAAKzU,EAAMt6B,SACX,KAAKs6B,EAAM6S,GACX,KAAK7S,EAAMl6B,YACX,KAAKk6B,EAAMt3B,QACX,KAAKs3B,EAAMoT,OACX,KAAKpT,EAAMwT,KACX,KAAKxT,EAAMuO,IACX,KAAKvO,EAAMh7B,IACX,KAAKg7B,EAAM2T,GACX,KAAK3T,EAAM4T,MACX,KAAK5T,EAAM8T,OACX,KAAK9T,EAAM/1B,UACX,KAAK+1B,EAAMz6B,SACX,KAAKy6B,EAAM/6B,IACX,KAAK+6B,EAAMsL,KACX,KAAKtL,EAAMkP,KAAM,OAAO,EACxB,QAAS,OAAO,IAxUpB,SAAYlP,GAKVA,IAAA,uBACAA,IAAA,WACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,uBACAA,IAAA,8BACAA,IAAA,wBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,cACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,YACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,oBACAA,IAAA,wBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,kBAIAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,8BACAA,IAAA,sCACAA,IAAA,4CACAA,IAAA,kCACAA,IAAA,4CACAA,IAAA,gDACAA,IAAA,0DACAA,IAAA,4CACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,0CACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,0CACAA,IAAA,sDACAA,IAAA,8EACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,kBACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,8CACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,qBACAA,IAAA,+BACAA,IAAA,iCACAA,IAAA,uCACAA,IAAA,yDACAA,IAAA,iCACAA,IAAA,qCACAA,IAAA,yDACAA,IAAA,qEACAA,IAAA,6FACAA,IAAA,yCACAA,IAAA,6BACAA,IAAA,iCACAA,IAAA,aAIAA,IAAA,6BACAA,IAAA,mCACAA,IAAA,qCACAA,IAAA,iCAIAA,IAAA,uBACAA,IAAA,2BArIF,CAAYA,EAAAp5C,EAAAo5C,QAAAp5C,EAAAo5C,MAAK,KAwIjB,SAAY2S,GACVA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBAHF,CAAYA,EAAA/rD,EAAA+rD,qBAAA/rD,EAAA+rD,mBAAkB,KAM9B/rD,EAAAgsD,mBAwKAhsD,EAAA4tD,wBAsBA5tD,EAAA8tD,sBAAA,SAAsCD,GACpC,OAAQA,GACN,KAAKzU,EAAMoT,OAAQ,MAAO,SAC1B,KAAKpT,EAAM0T,GAAI,MAAO,KACtB,KAAK1T,EAAM0M,WAAY,MAAO,aAC9B,KAAK1M,EAAM4M,IAAK,MAAO,MACvB,KAAK5M,EAAMoU,OAAQ,MAAO,SAC1B,KAAKpU,EAAMkP,KAAM,MAAO,OACxB,KAAKlP,EAAMuU,MAAO,MAAO,QACzB,KAAKvU,EAAM2U,YAAa,MAAO,MAC/B,KAAK3U,EAAMwM,MAAO,MAAO,IACzB,KAAKxM,EAAM4U,SAAU,MAAO,IAC5B,KAAK5U,EAAM6U,YAAa,MAAO,IAC/B,KAAK7U,EAAM8U,gBAAiB,MAAO,KACnC,KAAK9U,EAAM+U,mBAAoB,MAAO,KACtC,KAAK/U,EAAMgV,cAAe,MAAO,KACjC,KAAKhV,EAAMiV,mBAAoB,MAAO,KACtC,KAAKjV,EAAMkV,qBAAsB,MAAO,MACxC,KAAKlV,EAAMmV,0BAA2B,MAAO,MAC7C,KAAKnV,EAAMvqC,KAAM,MAAO,IACxB,KAAKuqC,EAAMrqC,MAAO,MAAO,IACzB,KAAKqqC,EAAMoV,kBAAmB,MAAO,KACrC,KAAKpV,EAAMqV,SAAU,MAAO,IAC5B,KAAKrV,EAAMsV,MAAO,MAAO,IACzB,KAAKtV,EAAMuV,QAAS,MAAO,IAC3B,KAAKvV,EAAMwV,UAAW,MAAO,KAC7B,KAAKxV,EAAMyV,YAAa,MAAO,KAC/B,KAAKzV,EAAM0V,kBAAmB,MAAO,KACrC,KAAK1V,EAAM2V,wBAAyB,MAAO,KAC3C,KAAK3V,EAAM4V,oCAAqC,MAAO,MACvD,KAAK5V,EAAM6V,UAAW,MAAO,IAC7B,KAAK7V,EAAM8V,IAAK,MAAO,IACvB,KAAK9V,EAAM+V,MAAO,MAAO,IACzB,KAAK/V,EAAMgW,YAAa,MAAO,IAC/B,KAAKhW,EAAMiW,MAAO,MAAO,IACzB,KAAKjW,EAAMkW,oBAAqB,MAAO,KACvC,KAAKlW,EAAMmW,QAAS,MAAO,KAC3B,KAAKnW,EAAMoW,OAAQ,MAAO,IAC1B,KAAKpW,EAAMqW,YAAa,MAAO,KAC/B,KAAKrW,EAAMsW,aAAc,MAAO,KAChC,KAAKtW,EAAMuW,gBAAiB,MAAO,KACnC,KAAKvW,EAAMwW,yBAA0B,MAAO,MAC5C,KAAKxW,EAAMyW,aAAc,MAAO,KAChC,KAAKzW,EAAM0W,eAAgB,MAAO,KAClC,KAAK1W,EAAM2W,yBAA0B,MAAO,MAC5C,KAAK3W,EAAM4W,+BAAgC,MAAO,MAClD,KAAK5W,EAAM6W,2CAA4C,MAAO,OAC9D,KAAK7W,EAAM8W,iBAAkB,MAAO,KACpC,KAAK9W,EAAM+W,WAAY,MAAO,KAC9B,KAAK/W,EAAMgX,aAAc,MAAO,KAChC,QAEE,OADAtnD,QAAO,GACA,KAKb,IAAAsQ,EAAA,WAUE,SAAAA,EAAY/O,EAAgBQ,EAAYC,GA4CxCxK,KAAA4mB,aAAsB,EA3CpB5mB,KAAK+J,OAASA,EACd/J,KAAKuK,MAAQA,EACbvK,KAAKwK,IAAMA,EA0Cf,OAvCSsO,EAAAhO,KAAP,SAAYilD,EAAUC,GACpB,GAAID,EAAEhmD,QAAUimD,EAAEjmD,OAAQ,MAAM,IAAIsP,MAAM,mBAC1C,OAAO,IAAIP,EAAMi3C,EAAEhmD,OACjBgmD,EAAExlD,MAAQylD,EAAEzlD,MAAQwlD,EAAExlD,MAAQylD,EAAEzlD,MAChCwlD,EAAEvlD,IAAMwlD,EAAExlD,IAAMulD,EAAEvlD,IAAMwlD,EAAExlD,MAI9BzJ,OAAAC,eAAI8X,EAAA7W,UAAA,UAAO,KAAX,WACE,OAAO,IAAI6W,EAAM9Y,KAAK+J,OAAQ/J,KAAKuK,MAAOvK,KAAKuK,wCAEjDxJ,OAAAC,eAAI8X,EAAA7W,UAAA,QAAK,KAAT,WACE,OAAO,IAAI6W,EAAM9Y,KAAK+J,OAAQ/J,KAAKwK,IAAKxK,KAAKwK,sCAG/CzJ,OAAAC,eAAI8X,EAAA7W,UAAA,OAAI,KAAR,WAGE,IAFA,IAAIoI,EAAOrK,KAAK+J,OAAOM,KACnBJ,EAAO,EACFs8C,EAAMvmD,KAAKuK,MAAOg8C,GAAO,IAAKA,EACb,IAApBl8C,EAAKK,WAAW67C,IAA2Bt8C,IAEjD,OAAOA,mCAGTlJ,OAAAC,eAAI8X,EAAA7W,UAAA,SAAM,KAAV,WAGE,IAFA,IAAIoI,EAAOrK,KAAK+J,OAAOM,KACnBH,EAAS,EACJq8C,EAAMvmD,KAAKuK,MAAQ,EAAGg8C,GAAO,GACZ,IAApBl8C,EAAKK,WAAW67C,KADqBA,IAEvCr8C,EAEJ,OAAOA,mCAGT4O,EAAA7W,UAAA6H,SAAA,WACE,OAAO9J,KAAK+J,OAAOM,KAAKO,UAAU5K,KAAKuK,MAAOvK,KAAKwK,MAIvDsO,EAvDA,GAAapZ,EAAAoZ,QA+Db,IAAAm3C,EAAA,SAAA7gD,GAgBE,SAAA6gD,EAAYlmD,EAAgBmB,QAAA,IAAAA,MAAA,MAA5B,IAAAmE,EACED,EAAA5O,KAAAR,KAAMkL,IAAYlL,KAdpBqP,EAAA7E,IAAW,EAEX6E,EAAAk3C,IAAW,EACXl3C,EAAAk+C,OAAgB,EAChBl+C,EAAA6gD,SAAgB,EAEhB7gD,EAAA8gD,WAAoB,EACpB9gD,EAAA+gD,aAAoB,EACpB/gD,EAAAghD,oBAA2B,EAE3BhhD,EAAAihD,UAAmC,KAMjCjhD,EAAKtF,OAASA,EACdsF,EAAKk3C,IAAM,EACXl3C,EAAK7E,IAAMT,EAAOM,KAAK7C,OACvB6H,EAAKnE,YAAcA,GAA4B,IAAIlE,MAEnD,IAAIqD,EAAON,EAAOM,KAWlB,GAPEgF,EAAKk3C,IAAMl3C,EAAK7E,KACS,OAAzBH,EAAKK,WAAW2E,EAAKk3C,QAEnBl3C,EAAKk3C,IAKPl3C,EAAKk3C,IAAM,EAAIl3C,EAAK7E,KACK,IAAzBH,EAAKK,WAAW2E,EAAKk3C,MACQ,IAA7Bl8C,EAAKK,WAAW2E,EAAKk3C,IAAM,GAG3B,IADAl3C,EAAKk3C,KAAO,EAEVl3C,EAAKk3C,IAAMl3C,EAAK7E,KACS,IAAzBH,EAAKK,WAAW2E,EAAKk3C,QAEnBl3C,EAAKk3C,aAkiCf,OA/kC+Bl1C,EAAA4+C,EAAA7gD,GAmD7B6gD,EAAAhuD,UAAAmU,KAAA,SAAKm6C,GAEH,YAFG,IAAAA,MAAyC9E,EAAmBQ,SAC/DjsD,KAAKmwD,WAAa,EACXnwD,KAAKutD,MAAQvtD,KAAKwwD,WAAWD,IAG9BN,EAAAhuD,UAAAuuD,WAAR,SACED,EACAE,QADA,IAAAF,MAAyC9E,EAAmBQ,cAC5D,IAAAwE,MAAsBrtD,IAAI6rC,WAG1B,IADA,IAAI5kC,EAAOrK,KAAK+J,OAAOM,KAChBrK,KAAKumD,IAAMvmD,KAAKwK,KAAK,CAC1BxK,KAAKkwD,SAAWlwD,KAAKumD,IACrB,IAAI7lD,EAAI2J,EAAKK,WAAW1K,KAAKumD,KAC7B,OAAQ7lD,GACN,QACE,OACIV,KAAKumD,IAAMvmD,KAAKwK,KACO,IAAzBH,EAAKK,WAAW1K,KAAKumD,MACpB,MAGL,QACA,OACA,QACA,QACA,UACIvmD,KAAKumD,IACP,MAEF,QAEE,QADEvmD,KAAKumD,IAELkK,EAAiB,GAAKzwD,KAAKumD,IAAMvmD,KAAKwK,KACb,IAAzBH,EAAKK,WAAW1K,KAAKumD,QAEnBvmD,KAAKumD,IAELkK,EAAiB,GAAKzwD,KAAKumD,IAAMvmD,KAAKwK,KACb,IAAzBH,EAAKK,WAAW1K,KAAKumD,QAEnBvmD,KAAKumD,IACAzN,EAAMmV,2BAERnV,EAAMiV,oBAERjV,EAAMgW,YAEf,QACA,QACA,QACE,OAAOhW,EAAM4X,cAEf,QAEE,QADE1wD,KAAKumD,IAELkK,EAAiB,GAAKzwD,KAAKumD,IAAMvmD,KAAKwK,KACb,IAAzBH,EAAKK,WAAW1K,KAAKumD,QAEnBvmD,KAAKumD,IACAzN,EAAM0W,gBAER1W,EAAMuV,QAEf,QAEE,KADEruD,KAAKumD,IACHkK,EAAiB,GAAKzwD,KAAKumD,IAAMvmD,KAAKwK,IAAK,CAE7C,GAAO,KADHmmD,EAAMtmD,EAAKK,WAAW1K,KAAKumD,MAG7B,QADEvmD,KAAKumD,IACAzN,EAAMkW,oBAEf,GAAO,IAAH2B,EAEF,QADE3wD,KAAKumD,IACAzN,EAAM8W,iBAGjB,OAAO9W,EAAM6V,UAEf,QAEE,QADE3uD,KAAKumD,IACAzN,EAAM8X,UAEf,QAEE,QADE5wD,KAAKumD,IACAzN,EAAM+X,WAEf,QAEE,KADE7wD,KAAKumD,IACHkK,EAAiB,GAAKzwD,KAAKumD,IAAMvmD,KAAKwK,IAAK,CAE7C,GAAO,KADHmmD,EAAMtmD,EAAKK,WAAW1K,KAAKumD,MAG7B,QADEvmD,KAAKumD,IACAzN,EAAMuW,gBAEf,GAAO,IAAHsB,EAEF,QADE3wD,KAAKumD,IAELkK,EAAiB,GAAKzwD,KAAKumD,IAAMvmD,KAAKwK,KACb,IAAzBH,EAAKK,WAAW1K,KAAKumD,QAEnBvmD,KAAKumD,IACAzN,EAAMwW,0BAERxW,EAAMoV,kBAGjB,OAAOpV,EAAMqV,SAEf,QAEE,KADEnuD,KAAKumD,IACHkK,EAAiB,GAAKzwD,KAAKumD,IAAMvmD,KAAKwK,IAAK,CAE7C,GAAO,KADHmmD,EAAMtmD,EAAKK,WAAW1K,KAAKumD,MAG7B,QADEvmD,KAAKumD,IACAzN,EAAMwV,UAEf,GAAO,IAAHqC,EAEF,QADE3wD,KAAKumD,IACAzN,EAAMqW,YAGjB,OAAOrW,EAAMvqC,KAEf,QAEE,QADEvO,KAAKumD,IACAzN,EAAMwM,MAEf,QAEE,KADEtlD,KAAKumD,IACHkK,EAAiB,GAAKzwD,KAAKumD,IAAMvmD,KAAKwK,IAAK,CAE7C,GAAO,KADHmmD,EAAMtmD,EAAKK,WAAW1K,KAAKumD,MAG7B,QADEvmD,KAAKumD,IACAzN,EAAMyV,YAEf,GAAO,IAAHoC,EAEF,QADE3wD,KAAKumD,IACAzN,EAAMsW,aAGjB,OAAOtW,EAAMrqC,MAEf,QAEE,KADEzO,KAAKumD,IACHkK,EAAiB,GAAKzwD,KAAKumD,IAAMvmD,KAAKwK,IAAK,CAC7C,IAAImmD,EAAMtmD,EAAKK,WAAW1K,KAAKumD,KAC/B,GAAIt+C,EAAA6oD,eAAeH,GAEjB,QADE3wD,KAAKumD,IACAzN,EAAMiY,aAEf,GACEN,EAAiB,GAAKzwD,KAAKumD,IAAM,EAAIvmD,KAAKwK,KACvC,IAAHmmD,GAC6B,IAA7BtmD,EAAKK,WAAW1K,KAAKumD,IAAM,GAG3B,OADAvmD,KAAKumD,KAAO,EACLzN,EAAM2U,YAGjB,OAAO3U,EAAMkY,IAEf,QACE,IAAIC,EAAkBjxD,KAAKumD,IAE3B,KADEvmD,KAAKumD,IACHkK,EAAiB,GAAKzwD,KAAKumD,IAAMvmD,KAAKwK,IAAK,CAE7C,GAAO,KADHmmD,EAAMtmD,EAAKK,WAAW1K,KAAKumD,MACJ,CACzB,IAAIrL,EAAcpvC,EAAAg5C,YAAYoM,KAQ9B,IANElxD,KAAKumD,IAAM,EAAIvmD,KAAKwK,KACS,IAA7BH,EAAKK,WAAW1K,KAAKumD,IAAM,OAEzBvmD,KAAKumD,IACPrL,EAAcpvC,EAAAg5C,YAAYqM,UAEnBnxD,KAAKumD,IAAMvmD,KAAKwK,KACvB,GAA6B,IAAzBH,EAAKK,WAAW1K,KAAKumD,KAA2B,GAChDvmD,KAAKumD,IACP,MAGAvmD,KAAKswD,WACPtwD,KAAKswD,UACHpV,EACA7wC,EAAKO,UAAUqmD,EAAiBjxD,KAAKumD,KACrCvmD,KAAKmJ,MAAM8nD,EAAiBjxD,KAAKumD,MAGrC,MAEF,GAAO,IAAHoK,EAA0B,CAE5B,IADA,IAAIS,GAAS,IACJpxD,KAAKumD,IAAMvmD,KAAKwK,KAEvB,GACG,KAFH9J,EAAI2J,EAAKK,WAAW1K,KAAKumD,OAGvBvmD,KAAKumD,IAAM,EAAIvmD,KAAKwK,KACS,IAA7BH,EAAKK,WAAW1K,KAAKumD,IAAM,GAC3B,CACAvmD,KAAKumD,KAAO,EACZ6K,GAAS,EACT,MAGCA,EAKMpxD,KAAKswD,WACdtwD,KAAKswD,UACHxkD,EAAAg5C,YAAY+B,MACZx8C,EAAKO,UAAUqmD,EAAiBjxD,KAAKumD,KACrCvmD,KAAKmJ,MAAM8nD,EAAiBjxD,KAAKumD,MARnCvmD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACfrxD,KAAKmJ,MAAMnJ,KAAKumD,KAAM,MAS1B,MAEF,GAAO,IAAHoK,EAEF,QADE3wD,KAAKumD,IACAzN,EAAMyW,aAGjB,OAAOzW,EAAMsV,MAEf,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACE,OAAOpuD,KAAKsxD,cACRxY,EAAMyY,eACNzY,EAAMiY,aAEZ,QAEE,QADE/wD,KAAKumD,IACAzN,EAAM0Y,MAEf,QAEE,QADExxD,KAAKumD,IACAzN,EAAM2Y,UAEf,QAEE,KADEzxD,KAAKumD,IACHkK,EAAiB,GAAKzwD,KAAKumD,IAAMvmD,KAAKwK,IAAK,CAE7C,GAAO,KADHmmD,EAAMtmD,EAAKK,WAAW1K,KAAKumD,MAG7B,QADEvmD,KAAKumD,IAELkK,EAAiB,GACjBzwD,KAAKumD,IAAMvmD,KAAKwK,KACS,IAAzBH,EAAKK,WAAW1K,KAAKumD,QAEnBvmD,KAAKumD,IACAzN,EAAM2W,0BAER3W,EAAM0V,kBAEf,GAAO,IAAHmC,EAEF,QADE3wD,KAAKumD,IACAzN,EAAM8U,gBAGjB,OAAO9U,EAAM4U,SAEf,QAEE,KADE1tD,KAAKumD,IACHkK,EAAiB,GAAKzwD,KAAKumD,IAAMvmD,KAAKwK,IAAK,CAE7C,GAAO,KADHmmD,EAAMtmD,EAAKK,WAAW1K,KAAKumD,MAG7B,QADEvmD,KAAKumD,IAELkK,EAAiB,GACjBzwD,KAAKumD,IAAMvmD,KAAKwK,KACS,IAAzBH,EAAKK,WAAW1K,KAAKumD,QAEnBvmD,KAAKumD,IACAzN,EAAMkV,sBAERlV,EAAMgV,cAEf,GAAO,IAAH6C,EAEF,QADE3wD,KAAKumD,IACAzN,EAAM4Y,mBAGjB,OAAO5Y,EAAMoW,OAEf,QAEE,KADElvD,KAAKumD,IACHkK,EAAiB,GAAKzwD,KAAKumD,IAAMvmD,KAAKwK,IAAK,CAE7C,GAAO,KADHmmD,EAAMtmD,EAAKK,WAAW1K,KAAKumD,MACE,CAE/B,KADEvmD,KAAKumD,IACHkK,EAAiB,GAAKzwD,KAAKumD,IAAMvmD,KAAKwK,IAAK,CAE7C,GAAO,KADPmmD,EAAMtmD,EAAKK,WAAW1K,KAAKumD,MAGzB,QADEvmD,KAAKumD,IAELkK,EAAiB,GAAKzwD,KAAKumD,IAAMvmD,KAAKwK,KACb,IAAzBH,EAAKK,WAAW1K,KAAKumD,QAEnBvmD,KAAKumD,IACAzN,EAAM6W,4CAER7W,EAAM4V,oCAEf,GAAO,IAAHiC,EAEF,QADE3wD,KAAKumD,IACAzN,EAAM4W,+BAGjB,OAAO5W,EAAM2V,wBAEf,GAAO,IAAHkC,EAEF,QADE3wD,KAAKumD,IACAzN,EAAM+U,mBAGjB,OAAO/U,EAAM6U,YAEf,QAEE,QADE3tD,KAAKumD,IACAzN,EAAM6Y,SAEf,QAEE,QADE3xD,KAAKumD,IACAzN,EAAM8Y,YAEf,QAEE,QADE5xD,KAAKumD,IACAzN,EAAM+Y,aAEf,QAEE,QADE7xD,KAAKumD,IAELkK,EAAiB,GAAKzwD,KAAKumD,IAAMvmD,KAAKwK,KACb,IAAzBH,EAAKK,WAAW1K,KAAKumD,QAEnBvmD,KAAKumD,IACAzN,EAAMgX,cAERhX,EAAM+V,MAEf,SAEE,QADE7uD,KAAKumD,IACAzN,EAAMgZ,UAEf,SAEE,KADE9xD,KAAKumD,IACHkK,EAAiB,GAAKzwD,KAAKumD,IAAMvmD,KAAKwK,IAAK,CAE7C,GAAO,MADHmmD,EAAMtmD,EAAKK,WAAW1K,KAAKumD,MAG7B,QADEvmD,KAAKumD,IACAzN,EAAMmW,QAEf,GAAO,IAAH0B,EAEF,QADE3wD,KAAKumD,IACAzN,EAAM+W,WAGjB,OAAO/W,EAAM8V,IAEf,SAEE,QADE5uD,KAAKumD,IACAzN,EAAMiZ,WAEf,SAEE,QADE/xD,KAAKumD,IACAzN,EAAMiW,MAEf,QAEE,QADE/uD,KAAKumD,IACAzN,EAAMkZ,GAEf,QACE,GAAI/pD,EAAAgqD,kBAAkBvxD,GAAI,CACxB,GAAIuH,EAAAiqD,mBAAmBxxD,GAAI,CAEzB,IADA,IAAIyxD,EAAYnyD,KAAKumD,MAEjBvmD,KAAKumD,IAAMvmD,KAAKwK,KAClBvC,EAAAmqD,iBAAiB1xD,EAAI2J,EAAKK,WAAW1K,KAAKumD,OAE1C,IAAKt+C,EAAAiqD,mBAAmBxxD,GAEtB,OADAV,KAAKumD,IAAM4L,EACJrZ,EAAMM,WAGjB,IACIiZ,EAAe3G,EADDrhD,EAAKO,UAAUunD,EAAWnyD,KAAKumD,MAEjD,GACE8L,IAAiBvZ,EAAM9pC,SACvBuhD,IAAuB9E,EAAmB6G,SAExC/B,IAAuB9E,EAAmB8G,SAC1CjF,EAAsB+E,IAGxB,OAAOA,EAETryD,KAAKumD,IAAM4L,EAEb,OAAOrZ,EAAMM,WACR,GAAInxC,EAAAuqD,aAAa9xD,GAAI,GACxBV,KAAKumD,IACP,MAOF,OALAvmD,KAAKwL,MACHI,EAAA/C,eAAe4pD,kBACfzyD,KAAKmJ,MAAMnJ,KAAKumD,IAAKvmD,KAAKumD,IAAM,MAEhCvmD,KAAKumD,IACAzN,EAAM9pC,SAInB,OAAO8pC,EAAM4Z,WAGfzC,EAAAhuD,UAAA0wD,KAAA,SACEC,EACArC,EACAsC,QAFA,IAAAD,OAAA,QACA,IAAArC,MAAyC9E,EAAmBQ,cAC5D,IAAA4G,MAAyBzvD,IAAI6rC,WAE7B,IAAI5kC,EAAOrK,KAAK+J,OAAOM,KACvB,GAAIrK,KAAKmwD,UAAY,EAAG,CACtB,IAAIgC,EAAYnyD,KAAKumD,IACjBuM,EAAc9yD,KAAKutD,MACnBwF,EAAiB/yD,KAAKkwD,SAG1B,GAFAlwD,KAAKmwD,UAAYnwD,KAAKwwD,WAAWD,EAAoBsC,GACrD7yD,KAAKowD,aAAepwD,KAAKkwD,SACrB0C,EAAgB,CAClB5yD,KAAKqwD,oBAAqB,EAC1B,IAAK,IAAI9J,EAAM4L,EAAW3nD,EAAMxK,KAAKowD,aAAc7J,EAAM/7C,IAAO+7C,EAC9D,GAAIt+C,EAAAwC,YAAYJ,EAAKK,WAAW67C,IAAO,CACrCvmD,KAAKqwD,oBAAqB,EAC1B,OAINrwD,KAAKumD,IAAM4L,EACXnyD,KAAKutD,MAAQuF,EACb9yD,KAAKkwD,SAAW6C,EAElB,OAAO/yD,KAAKmwD,WAGdF,EAAAhuD,UAAA+wD,eAAA,SAAezC,GACb,YADa,IAAAA,MAAyC9E,EAAmB8G,QAClEvyD,KAAKizD,KAAKna,EAAMM,WAAYmX,IAGrCN,EAAAhuD,UAAAgxD,KAAA,SAAK1F,EAAcgD,QAAA,IAAAA,MAAyC9E,EAAmBQ,SAC7E,IAAIkG,EAAYnyD,KAAKumD,IACjBuM,EAAc9yD,KAAKutD,MACnBwF,EAAiB/yD,KAAKkwD,SACtB2C,EAAoBzvD,IAAI6rC,UAC5B,OAAQse,GACN,KAAKzU,EAAM6U,YACTkF,EAAoB,EAKxB,OADA7yD,KAAKutD,MAAQvtD,KAAKwwD,WAAWD,EAAoBsC,GAC7C7yD,KAAKutD,OAASA,GAChBvtD,KAAKmwD,WAAa,GACX,IAEPnwD,KAAKumD,IAAM4L,EACXnyD,KAAKutD,MAAQuF,EACb9yD,KAAKkwD,SAAW6C,GACT,IAIX9C,EAAAhuD,UAAAixD,KAAA,WACE,IAAIC,EAUJ,OATIC,GACFD,EAAQC,EACRA,EAAgB,MAEhBD,EAAQ,IAAIE,EAEdF,EAAM5M,IAAMvmD,KAAKumD,IACjB4M,EAAM5F,MAAQvtD,KAAKutD,MACnB4F,EAAMjD,SAAWlwD,KAAKkwD,SACfiD,GAGTlD,EAAAhuD,UAAAqxD,QAAA,SAAQH,GACNC,EAAgBD,GAGlBlD,EAAAhuD,UAAAsxD,MAAA,SAAMJ,GACJnzD,KAAKumD,IAAM4M,EAAM5M,IACjBvmD,KAAKutD,MAAQ4F,EAAM5F,MACnBvtD,KAAKkwD,SAAWiD,EAAMjD,SACtBlwD,KAAKmwD,WAAa,GAGpBF,EAAAhuD,UAAAkH,MAAA,SAAMoB,EAAiBC,GAOrB,YAPI,IAAAD,OAAc,QAAG,IAAAC,OAAY,GAC7BD,EAAQ,GACVA,EAAQvK,KAAKkwD,SACb1lD,EAAMxK,KAAKumD,KACF/7C,EAAM,IACfA,EAAMD,GAED,IAAIuO,EAAM9Y,KAAK+J,OAAQQ,EAAOC,IAGvCylD,EAAAhuD,UAAAuxD,eAAA,WAGE,IAFA,IAAInpD,EAAOrK,KAAK+J,OAAOM,KACnBE,EAAQvK,KAAKumD,MAEbvmD,KAAKumD,IAAMvmD,KAAKwK,KAClBvC,EAAAmqD,iBAAiB/nD,EAAKK,WAAW1K,KAAKumD,QAExC,OAAOl8C,EAAKO,UAAUL,EAAOvK,KAAKumD,MAGpC0J,EAAAhuD,UAAAqsC,WAAA,WAKE,IAJA,IAAIjkC,EAAOrK,KAAK+J,OAAOM,KACnBopD,EAAQppD,EAAKK,WAAW1K,KAAKumD,OAC7Bh8C,EAAQvK,KAAKumD,IACb7mB,EAAS,KACA,CACX,GAAI1/B,KAAKumD,KAAOvmD,KAAKwK,IAAK,CACxBk1B,GAAUr1B,EAAKO,UAAUL,EAAOvK,KAAKumD,KACrCvmD,KAAKwL,MACHI,EAAA/C,eAAe6qD,4BACf1zD,KAAKmJ,MAAMoB,EAAQ,EAAGvK,KAAKwK,MAE7B,MAEF,IAAI9J,EAAI2J,EAAKK,WAAW1K,KAAKumD,KAC7B,GAAI7lD,GAAK+yD,EAAO,CACd/zB,GAAUr1B,EAAKO,UAAUL,EAAOvK,KAAKumD,OACrC,MAEF,GAAK,IAAD7lD,EAAJ,CAMA,GAAIuH,EAAAwC,YAAY/J,GAAI,CAClBg/B,GAAUr1B,EAAKO,UAAUL,EAAOvK,KAAKumD,KACrCvmD,KAAKwL,MACHI,EAAA/C,eAAe6qD,4BACf1zD,KAAKmJ,MAAMoB,EAAQ,EAAGvK,KAAKumD,MAE7B,QAEAvmD,KAAKumD,SAbL7mB,GAAUr1B,EAAKO,UAAUL,EAAOvK,KAAKumD,KACrC7mB,GAAU1/B,KAAK2zD,qBACfppD,EAAQvK,KAAKumD,IAajB,OAAO7mB,GAGTuwB,EAAAhuD,UAAA0xD,mBAAA,WACE,KAAM3zD,KAAKumD,KAAOvmD,KAAKwK,IAKrB,OAJAxK,KAAKwL,MACHI,EAAA/C,eAAe+qD,uBACf5zD,KAAKmJ,MAAMnJ,KAAKwK,MAEX,GAGT,IAAIH,EAAOrK,KAAK+J,OAAOM,KACnB3J,EAAI2J,EAAKK,WAAW1K,KAAKumD,OAC7B,OAAQ7lD,GACN,QAAkB,MAAO,KACzB,QAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,QAA2B,MAAO,IAClC,QAA2B,MAAO,IAClC,SACE,OACEV,KAAKumD,IAAMvmD,KAAKwK,KACS,KAAzBH,EAAKK,WAAW1K,KAAKumD,QAEnBvmD,KAAKumD,IACAvmD,KAAK6zD,6BAEP7zD,KAAK8zD,oBAEd,QAEI9zD,KAAKumD,IAAMvmD,KAAKwK,KACS,IAAzBH,EAAKK,WAAW1K,KAAKumD,QAEnBvmD,KAAKumD,IAIX,QACA,UACA,UAAkC,MAAO,GACzC,QAAS,OAAOx/C,OAAOgtD,aAAarzD,KAIxCuvD,EAAAhuD,UAAA+xD,kBAAA,WAIE,IAHA,IAAI3pD,EAAOrK,KAAK+J,OAAOM,KACnBE,EAAQvK,KAAKumD,IACb0N,GAAU,IACD,CACX,GAAIj0D,KAAKumD,KAAOvmD,KAAKwK,IAAK,CACxBxK,KAAKwL,MACHI,EAAA/C,eAAeqrD,wCACfl0D,KAAKmJ,MAAMoB,EAAOvK,KAAKwK,MAEzB,MAEF,GAA6B,IAAzBH,EAAKK,WAAW1K,KAAKumD,KAAzB,CAKA,IAAI7lD,EAAI2J,EAAKK,WAAW1K,KAAKumD,KAC7B,IAAK0N,GAAY,IAADvzD,EAAqB,MACrC,GAAIuH,EAAAwC,YAAY/J,GAAI,CAClBV,KAAKwL,MACHI,EAAA/C,eAAeqrD,wCACfl0D,KAAKmJ,MAAMoB,EAAOvK,KAAKumD,MAEzB,QAEAvmD,KAAKumD,IACP0N,GAAU,QAdNj0D,KAAKumD,IACP0N,GAAU,EAed,OAAO5pD,EAAKO,UAAUL,EAAOvK,KAAKumD,MAGpC0J,EAAAhuD,UAAAkyD,gBAAA,WAIE,IAHA,IAAI9pD,EAAOrK,KAAK+J,OAAOM,KACnBE,EAAQvK,KAAKumD,IACbh1C,EAAQ,EACLvR,KAAKumD,IAAMvmD,KAAKwK,KAAK,CAC1B,IAAI9J,EAAS2J,EAAKK,WAAW1K,KAAKumD,KAClC,IAAKt+C,EAAAmqD,iBAAiB1xD,GAAI,MAI1B,SAHEV,KAAKumD,IAGC7lD,GACN,SACE6Q,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,QACEA,GAAS,GAWf,OANc,GAAVA,GACFvR,KAAKwL,MACHI,EAAA/C,eAAeurD,iCACfp0D,KAAKmJ,MAAMoB,EAAOvK,KAAKumD,MAGpBl8C,EAAKO,UAAUL,EAAOvK,KAAKumD,MAGpC0J,EAAAhuD,UAAAqvD,YAAA,WACE,IAAIjnD,EAAOrK,KAAK+J,OAAOM,KACvB,GAAIrK,KAAKumD,IAAM,EAAIvmD,KAAKwK,KAAgC,IAAzBH,EAAKK,WAAW1K,KAAKumD,KAClD,OAAQl8C,EAAKK,WAAW1K,KAAKumD,IAAM,IACjC,SACA,QACA,QACA,QACA,SACA,QAAiB,OAAO,EAI5B,IADA,IAAIA,EAAMvmD,KAAKumD,IACRA,EAAMvmD,KAAKwK,KAAK,CACrB,IAAI9J,EAAI2J,EAAKK,WAAW67C,GACxB,GAAK,IAAD7lD,GAAsB,KAADA,GAAoB,IAADA,EAC1C,OAAO,EAET,IAAKA,EAAC,IAAkBA,EAAC,KAAoB,IAADA,EAAiB,MAE7D6lD,IAEF,OAAO,GAGT0J,EAAAhuD,UAAAoyD,YAAA,WACE,IAAIhqD,EAAOrK,KAAK+J,OAAOM,KACvB,GAAIrK,KAAKumD,IAAM,EAAIvmD,KAAKwK,KAAgC,IAAzBH,EAAKK,WAAW1K,KAAKumD,KAAqB,CACvE,OAAQl8C,EAAKK,WAAW1K,KAAKumD,IAAM,IACjC,SACA,QAEE,OADAvmD,KAAKumD,KAAO,EACLvmD,KAAKs0D,iBAEd,QACA,QAEE,OADAt0D,KAAKumD,KAAO,EACLvmD,KAAKu0D,oBAEd,SACA,QAEE,OADAv0D,KAAKumD,KAAO,EACLvmD,KAAKw0D,mBAGhB,GAAIvsD,EAAAwsD,aAAapqD,EAAKK,WAAW1K,KAAKumD,IAAM,IAAK,CAC/C,IAAIh8C,EAAQvK,KAAKumD,MACfvmD,KAAKumD,IACP,IAAIjlD,EAAQtB,KAAKw0D,mBAKjB,OAJAx0D,KAAKwL,MACHI,EAAA/C,eAAe6rD,8CACf10D,KAAKmJ,MAAMoB,EAAOvK,KAAKumD,MAElBjlD,GAGX,OAAOtB,KAAK20D,sBAGd1E,EAAAhuD,UAAAqyD,eAAA,WAME,IALA,IAAIjqD,EAAOrK,KAAK+J,OAAOM,KACnBE,EAAQvK,KAAKumD,IACbjlD,EAAQwS,QAAQ,GAChB8gD,EAAQ9gD,QAAQ,GAChB+gD,EAAStqD,EACNvK,KAAKumD,IAAMvmD,KAAKwK,KAAK,CAC1B,IAAI+7C,EAAMvmD,KAAKumD,IACX7lD,EAAI2J,EAAKK,WAAW67C,GACxB,GAAI7lD,GAAC,IAAmBA,GAAC,GAEvBY,EAAQwzD,QACNC,QAAQzzD,EAAOszD,GACf9gD,QAAQpT,EAAC,UAEL,GAAIA,GAAC,IAAkBA,GAAC,GAE9BY,EAAQwzD,QACNC,QAAQzzD,EAAOszD,GACf9gD,QAAQ,GAAKpT,EAAC,UAEX,GAAIA,GAAC,IAAkBA,GAAC,IAE7BY,EAAQwzD,QACNC,QAAQzzD,EAAOszD,GACf9gD,QAAQ,GAAKpT,EAAC,SAEX,IAAK,IAADA,EAWT,MAVIm0D,GAAUtO,GACZvmD,KAAKwL,MACHqpD,GAAUtqD,EACNqB,EAAA/C,eAAemsD,wCACfppD,EAAA/C,eAAeosD,0DACnBj1D,KAAKmJ,MAAMo9C,IAGfsO,EAAStO,EAAM,EAIjBvmD,KAAKumD,IAAMA,EAAM,EAanB,OAXIvmD,KAAKumD,KAAOh8C,EACdvK,KAAKwL,MACHI,EAAA/C,eAAeqsD,2BACfl1D,KAAKmJ,MAAMoB,IAEJsqD,GAAU70D,KAAKumD,KACxBvmD,KAAKwL,MACHI,EAAA/C,eAAemsD,wCACfh1D,KAAKmJ,MAAM0rD,EAAS,IAGjBvzD,GAGT2uD,EAAAhuD,UAAA0yD,mBAAA,WAME,IALA,IAAItqD,EAAOrK,KAAK+J,OAAOM,KACnBE,EAAQvK,KAAKumD,IACbjlD,EAAQwS,QAAQ,GAChBqhD,EAASrhD,QAAQ,IACjB+gD,EAAStqD,EACNvK,KAAKumD,IAAMvmD,KAAKwK,KAAK,CAC1B,IAAI+7C,EAAMvmD,KAAKumD,IACX7lD,EAAI2J,EAAKK,WAAW67C,GACxB,GAAI7lD,GAAC,IAAmBA,GAAC,GAEvBY,EAAQwzD,QACNM,QAAQ9zD,EAAO6zD,GACfrhD,QAAQpT,EAAC,SAEN,IAAK,IAADA,EAWT,MAVIm0D,GAAUtO,GACZvmD,KAAKwL,MACHqpD,GAAUtqD,EACNqB,EAAA/C,eAAemsD,wCACfppD,EAAA/C,eAAeosD,0DACnBj1D,KAAKmJ,MAAMo9C,IAGfsO,EAAStO,EAAM,EAIjBvmD,KAAKumD,IAAMA,EAAM,EAanB,OAXIvmD,KAAKumD,KAAOh8C,EACdvK,KAAKwL,MACHI,EAAA/C,eAAewsD,eACfr1D,KAAKmJ,MAAMoB,IAEJsqD,GAAU70D,KAAKumD,KACxBvmD,KAAKwL,MACHI,EAAA/C,eAAemsD,wCACfh1D,KAAKmJ,MAAM0rD,EAAS,IAGjBvzD,GAGT2uD,EAAAhuD,UAAAuyD,iBAAA,WAME,IALA,IAAInqD,EAAOrK,KAAK+J,OAAOM,KACnBE,EAAQvK,KAAKumD,IACbjlD,EAAQwS,QAAQ,GAChBwhD,EAAQxhD,QAAQ,GAChB+gD,EAAStqD,EACNvK,KAAKumD,IAAMvmD,KAAKwK,KAAK,CAC1B,IAAI+7C,EAAMvmD,KAAKumD,IACX7lD,EAAI2J,EAAKK,WAAW67C,GACxB,GAAI7lD,GAAC,IAAmBA,GAAC,GAEvBY,EAAQwzD,QACNC,QAAQzzD,EAAOg0D,GACfxhD,QAAQpT,EAAC,SAEN,IAAK,IAADA,EAWT,MAVIm0D,GAAUtO,GACZvmD,KAAKwL,MACHqpD,GAAUtqD,EACNqB,EAAA/C,eAAemsD,wCACfppD,EAAA/C,eAAeosD,0DACnBj1D,KAAKmJ,MAAMo9C,IAGfsO,EAAStO,EAAM,IAIfvmD,KAAKumD,IAaT,OAXIvmD,KAAKumD,KAAOh8C,EACdvK,KAAKwL,MACHI,EAAA/C,eAAe0sD,qBACfv1D,KAAKmJ,MAAMoB,IAEJsqD,GAAU70D,KAAKumD,KACxBvmD,KAAKwL,MACHI,EAAA/C,eAAemsD,wCACfh1D,KAAKmJ,MAAM0rD,EAAS,IAGjBvzD,GAGT2uD,EAAAhuD,UAAAsyD,kBAAA,WAME,IALA,IAAIlqD,EAAOrK,KAAK+J,OAAOM,KACnBE,EAAQvK,KAAKumD,IACbjlD,EAAQwS,QAAQ,GAChB0hD,EAAQ1hD,QAAQ,GAChB+gD,EAAStqD,EACNvK,KAAKumD,IAAMvmD,KAAKwK,KAAK,CAC1B,IAAI+7C,EAAMvmD,KAAKumD,IACX7lD,EAAI2J,EAAKK,WAAW67C,GACxB,GAAK,IAAD7lD,EAEFY,EAAQyzD,QAAQzzD,EAAOk0D,QAClB,GAAK,IAAD90D,EAETY,EAAQwzD,QACNC,QAAQzzD,EAAOk0D,GACfA,OAEG,IAAK,IAAD90D,EAWT,MAVIm0D,GAAUtO,GACZvmD,KAAKwL,MACHqpD,GAAUtqD,EACNqB,EAAA/C,eAAemsD,wCACfppD,EAAA/C,eAAeosD,0DACnBj1D,KAAKmJ,MAAMo9C,IAGfsO,EAAStO,EAAM,EAIjBvmD,KAAKumD,IAAMA,EAAM,EAanB,OAXIvmD,KAAKumD,KAAOh8C,EACdvK,KAAKwL,MACHI,EAAA/C,eAAe4sD,sBACfz1D,KAAKmJ,MAAMoB,IAEJsqD,GAAU70D,KAAKumD,KACxBvmD,KAAKwL,MACHI,EAAA/C,eAAemsD,wCACfh1D,KAAKmJ,MAAM0rD,EAAS,IAGjBvzD,GAGT2uD,EAAAhuD,UAAAyzD,UAAA,WAWE,OAAO11D,KAAK21D,oBAGd1F,EAAAhuD,UAAA0zD,iBAAA,WAIE,IAFA,IAAIprD,EAAQvK,KAAKumD,IACbl8C,EAAOrK,KAAK+J,OAAOM,KAChBrK,KAAKumD,IAAMvmD,KAAKwK,KAAOvC,EAAA6oD,eAAezmD,EAAKK,WAAW1K,KAAKumD,SAC9DvmD,KAAKumD,IAET,GAAIvmD,KAAKumD,IAAMvmD,KAAKwK,KAAgC,IAAzBH,EAAKK,WAAW1K,KAAKumD,KAE9C,MADEvmD,KAAKumD,IACAvmD,KAAKumD,IAAMvmD,KAAKwK,KAAOvC,EAAA6oD,eAAezmD,EAAKK,WAAW1K,KAAKumD,SAC9DvmD,KAAKumD,IAGX,GAAIvmD,KAAKumD,IAAMvmD,KAAKwK,IAAK,CACvB,IAAI9J,EAAI2J,EAAKK,WAAW1K,KAAKumD,KAC7B,GAAK,KAAD7lD,GAAoB,IAADA,EAQrB,OANIV,KAAKumD,IAAMvmD,KAAKwK,KACa,KAA9B9J,EAAI2J,EAAKK,WAAW1K,KAAKumD,OAA4B,IAAD7lD,GACrDuH,EAAA6oD,eAAezmD,EAAKK,WAAW1K,KAAKumD,IAAM,QAExCvmD,KAAKumD,IAEFvmD,KAAKumD,IAAMvmD,KAAKwK,KAAOvC,EAAA6oD,eAAezmD,EAAKK,WAAW1K,KAAKumD,SAC9DvmD,KAAKumD,IAIb,OAAOqP,WAAWvrD,EAAKO,UAAUL,EAAOvK,KAAKumD,OAG/C0J,EAAAhuD,UAAA4zD,aAAA,WACE,MAAM,IAAIx8C,MAAM,oBAGlB42C,EAAAhuD,UAAA6xD,kBAAA,WAIE,IAHA,IAAIgC,EAAS,EACTx0D,EAAQ,EACR+I,EAAOrK,KAAK+J,OAAOM,KAChBrK,KAAKumD,IAAMvmD,KAAKwK,KAAK,CAC1B,IAAI9J,EAAI2J,EAAKK,WAAW1K,KAAKumD,OAC7B,GAAI7lD,GAAC,IAAmBA,GAAC,GACvBY,GAASA,GAAS,GAAKZ,EAAC,QACnB,GAAIA,GAAC,IAAkBA,GAAC,GAC7BY,GAASA,GAAS,GAAKZ,GAAI,OACtB,MAAIA,GAAC,IAAkBA,GAAC,KAO7B,OAJAV,KAAKwL,MACHI,EAAA/C,eAAeqsD,2BACfl1D,KAAKmJ,MAAMnJ,KAAKumD,IAAM,EAAGvmD,KAAKumD,MAEzB,GANPjlD,GAASA,GAAS,GAAKZ,GAAI,GAQ7B,GAAgB,KAAVo1D,EAAa,MAErB,OAAIA,GACF91D,KAAKwL,MACHI,EAAA/C,eAAe+qD,uBACf5zD,KAAKmJ,MAAMnJ,KAAKumD,MAEX,IAEFx/C,OAAOgtD,aAAazyD,IAGrB2uD,EAAAhuD,UAAA4xD,0BAAR,WACE,IAAItpD,EAAQvK,KAAKumD,IACbjlD,EAAQtB,KAAKs0D,iBACbyB,EAAUjrB,QAAQxpC,GAClB00D,GAAU,EAEdxtD,QAAQuiC,SAASzpC,IACby0D,EAAU,UACZ/1D,KAAKwL,MACHI,EAAA/C,eAAeotD,4EACfj2D,KAAKmJ,MAAMoB,EAAOvK,KAAKumD,MAEzByP,GAAU,GAGZ,IAAI3rD,EAAOrK,KAAK+J,OAAOM,KAiBvB,OAhBIrK,KAAKumD,KAAOvmD,KAAKwK,KACnBxK,KAAKwL,MACHI,EAAA/C,eAAe+qD,uBACf5zD,KAAKmJ,MAAMoB,EAAOvK,KAAKwK,MAEzBwrD,GAAU,GACwB,KAAzB3rD,EAAKK,WAAW1K,KAAKumD,OAC5BvmD,KAAKumD,KAEPvmD,KAAKwL,MACHI,EAAA/C,eAAeqtD,qCACfl2D,KAAKmJ,MAAMoB,EAAOvK,KAAKumD,MAEzByP,GAAU,GAGRA,EAAgB,GACbD,EAAU,MACbhvD,OAAOgtD,aAAagC,GACpBhvD,OAAOgtD,aACsB,OAA3BgC,EAAU,QAAW,IACM,OAA3BA,EAAU,MAAS,QAI3B9F,EAAAhuD,UAAAk0D,OAAA,aAEFlG,EA/kCA,CAA+BrkD,EAAAX,mBAAlBvL,EAAAuwD,YAklCb,IAAAoD,EAAA,WAOA,OAPA,gBAAa3zD,EAAA2zD,QAUb,IAAID,EAA8B,oBChkDlC,IAAAgD,EAGAA,EAAA,WACA,OAAAp2D,KADA,GAIA,IAEAo2D,KAAA,IAAAzjD,SAAA,iBACC,MAAA0jD,GAED,iBAAAC,SAAAF,EAAAE,QAOA32D,EAAAD,QAAA02D,44BCdA,IAgFYG,EAhFZ3qD,EAAAzL,EAAA,GAKAgoD,EAAAhoD,EAAA,GAuBA2L,EAAA3L,EAAA,GA6BA0L,EAAA1L,EAAA,GAQAwL,EAAAxL,EAAA,GAKA8H,EAAA9H,EAAA,GAKA04C,EAAA14C,EAAA,IAKA,SAAYo2D,GAEVA,IAAA,mBAEAA,IAAA,qBAJF,CAAYA,EAAA72D,EAAA62D,aAAA72D,EAAA62D,WAAU,KAQtB,IAAAnlD,EAAA,SAAAhC,GAWE,SAAAgC,EAEEsQ,GAFF,IAAArS,EAIED,EAAA5O,KAAAR,KAAM0hB,EAAQxW,cAAYlL,YAT5BqP,EAAAmnD,sBAA2C,KAE3CnnD,EAAAonD,yBAA+C,KAQ7CpnD,EAAKqS,QAAUA,IA8kDnB,OA9lD8BrQ,EAAAD,EAAAhC,GAoB5BgC,EAAAnP,UAAAy0D,YAAA,SAEE1b,EAEA2b,EAEAjyC,EAEAkyC,GAIA,QANA,IAAAlyC,MAAA,WAEA,IAAAkyC,MAAyBL,EAAWM,QAIhC7b,EAAKlmC,MAAQhJ,EAAAiJ,SAAS0vC,UAAW,CACnC,IAAIjK,EAAmCQ,EAAMR,iBACzCz0B,EAAwB,KAC5B,GAAIy0B,KACFz0B,EAAW/lB,KAAK02D,YACdlc,EACAmc,EACAjyC,EACAkyC,IAEa,OAAO,KAQxB,IANA,IAAIE,EAAiC9b,EAAMT,WACvCyQ,EAAgB8L,EAAetvD,OAC/BiS,EAAiB,IAAIzS,MAAYgkD,GACjCT,EAAiB,IAAIvjD,MAAcgkD,GACnCR,EAAqB,EACrBC,GAAU,EACLpqD,EAAI,EAAGA,EAAI2qD,IAAiB3qD,EAAG,CACtC,IAAI02D,EAAgBD,EAAez2D,GACnC,OAAQ02D,EAAczc,eACpB,KAAKxuC,EAAAw4C,cAAc2H,QACjBzB,EAAqBnqD,EAAI,EACzB,MAEF,KAAKyL,EAAAw4C,cAAc0S,KACjBxuD,OAAOnI,GAAK2qD,GACZP,GAAU,EAId,IAAIwM,EAAoBF,EAAc57C,KACtC,GAAIrP,EAAAo8C,cAAc+O,GAOhB,OANIL,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAequD,cACfD,EAAkB9tD,OAGf,KAET,IAAI6c,EAAgBhmB,KAAK02D,YACvBO,EACAN,EACAjyC,EACAkyC,GAEF,IAAK5wC,EAAe,OAAO,KAC3BvM,EAAepZ,GAAK2lB,EACpBukC,EAAelqD,GAAK02D,EAAcn2D,KAAKyJ,KAEzC,IAAI8sD,EAAiCnc,EAAMrhC,WAC3C,GAAI7N,EAAAo8C,cAAciP,GAOhB,OANIP,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAequD,cACfC,EAAehuD,OAGZ,KAET,IAAIwQ,OAAU,EACd,GAAIw9C,GAOF,KANAx9C,EAAa3Z,KAAK02D,YAChBS,EACAR,EACAjyC,EACAkyC,IAEe,OAAO,UAExBj9C,EAAa9N,EAAAsH,KAAKG,KAEpB,IAAId,EAAY,IAAI3G,EAAAuW,UAAU3I,EAAgBE,EAAYoM,GAI1D,OAHAvT,EAAU+3C,eAAiBA,EAC3B/3C,EAAUg4C,mBAAqBA,EAC/Bh4C,EAAUi4C,QAAUA,EACbzP,EAAKlB,WAAatnC,EAAU2I,KAAKkuC,aAAe72C,EAAU2I,KAInE3S,OAAOwyC,EAAKlmC,MAAQhJ,EAAAiJ,SAASqvC,MAC7B,IAAIgT,EAAqBpc,EACrB9U,EAAWkxB,EAASx2D,KACpBy2D,EAAoBD,EAASrvC,cAC7BuvC,GAAuBpxB,EAAS9vB,KAGpC,GAAIkhD,GACE5yC,GAA2BA,EAAwB3R,IAAImzB,EAASr0B,WAAWxH,MAAO,CACpF,IAAI8Q,EAAOuJ,EAAwBxjB,IAAIglC,EAASr0B,WAAWxH,MAS3D,OAR0B,OAAtBgtD,GAA8BA,EAAkB7vD,QAC9CovD,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAe0uD,sBACfvc,EAAK7xC,MAAOgS,EAAKrR,YAInBkxC,EAAKlB,YACF3+B,EAAKK,GAAE,MACNo7C,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAe2uD,gCACfxc,EAAK7xC,MAAOgS,EAAKrR,YAIhBqR,EAAKkuC,cAEPluC,EAKX,IAAIpE,EAAU/W,KAAKqY,gBAAgB6tB,EAAUywB,EAASC,GACtD,IAAK7/C,EAAS,OAAO,KAGrB,GAAIA,EAAQ4K,WACV5K,EAAUA,EAAQ4K,eAEb,CAEL,GAAI5K,EAAQjC,MAAQqzC,EAAAl5C,YAAY+T,KAiB9B,OAhB0B,OAAtBq0C,GAA8BA,EAAkB7vD,QAC9CovD,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAe0uD,sBACfvc,EAAK7xC,MAAO4N,EAAQ7F,cAItB8pC,EAAKlB,YACH8c,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAe2uD,gCACfxc,EAAK7xC,MAAO4N,EAAQnW,MAInBiL,EAAAsH,KAAK/P,IAId,GAAI2T,EAAQjC,MAAQqzC,EAAAl5C,YAAYqJ,gBAAiB,CAC/C,IAAIkM,EAAWxkB,KAAKy3D,8BACF1gD,EAChBsgD,EACAV,EACA1uD,EAAAyvD,QAAqBhzC,GACrBs2B,GAEF,OAAKx2B,EACEw2B,EAAKlB,WAAat1B,EAASrJ,KAAKkuC,aAAe7kC,EAASrJ,KADzC,MAM1B,GAAIpE,EAAQjC,MAAQqzC,EAAAl5C,YAAY2T,eAAgB,CAG9C,GAAI7L,EAAQyE,GAAG7P,EAAAtJ,YAAY6f,UAAW,CACV,OAAtBm1C,GAA8BA,EAAkB7vD,QAC9CovD,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAe0uD,sBACfvc,EAAK7xC,MAAO4N,EAAQ7F,cAItBiK,EAAwBpE,EAASoE,KACrC,GAAI6/B,EAAKlB,WAAY,CACnB,GAAK3+B,EAAKK,GAAE,KAQV,OAAOL,EAAKkuC,aAPRuN,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAe2uD,gCACfJ,EAASx2D,KAAKuI,MAAO+8B,EAASr0B,WAAWxH,MAOjD,OAAO8Q,EAIT,GAAIm8C,GAAuBpxB,EAASr0B,WAAWxH,MAAQsB,EAAA3I,cAAc8B,OAAQ,CAC3E,IAAMuyD,GAAiD,GAA5BA,EAAkB7vD,OAO3C,OANIovD,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAe8uD,oCACfP,EAASjuD,MAAO,KAAMkuD,EAAoBA,EAAkB7vD,OAAS,GAAGsC,SAAS,KAG9E,KAET,IAAI8tD,EAAe53D,KAAK02D,YACtBW,EAAkB,GAClBV,EACAjyC,EACAkyC,GAEF,IAAKgB,EAAc,OAAO,KAC1B,OAAQA,EAAa9iD,MACnB,OACA,OACA,OAAmB,OAAOjJ,EAAAsH,KAAK/P,IAC/B,OAAqB,IAAKpD,KAAK0hB,QAAQzO,QAAQc,SAAU,OAAOlI,EAAAsH,KAAK/P,IACrE,OAAmB,OAAOyI,EAAAsH,KAAK9P,IAC/B,OACA,OACA,OACA,QAAoB,OAAOwI,EAAAsH,KAAK1P,IAChC,OAAqB,IAAKzD,KAAK0hB,QAAQzO,QAAQc,SAAU,OAAOlI,EAAAsH,KAAK1P,IACrE,OAAmB,OAAOoI,EAAAsH,KAAKzP,IAC/B,QAAmB,OAAOmI,EAAAsH,KAAKtP,IAC/B,QAAmB,OAAOgI,EAAAsH,KAAKrP,IAC/B,QAAoB,OAAO+H,EAAAsH,KAAKpP,KAChC,QAAoB,OAAO8H,EAAAsH,KAAKG,KAChC,QAAS9K,QAAO,IAKpB,IAAImgB,EAAsC5R,EAAS4R,mBAEnD,GAAIA,GASF,IARgB3oB,KAAK63D,qBACnBlvC,EACA0uC,EACAV,EACAjyC,EAA0Bzc,EAAAyvD,QAAQhzC,GAClCs2B,EACA4b,GAEkB,OAAO,UAClBS,GAAqBA,EAAkB7vD,QAChDxH,KAAKwL,MACHI,EAAA/C,eAAe0uD,sBACfH,EAASjuD,MAAO+8B,EAASr0B,WAAWxH,MAIxC,OAAOrK,KAAK02D,YACO3/C,EAASqgD,SAC1BrgD,EACA2N,EACAkyC,GASJ,OANIA,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAeivD,mBACfV,EAASx2D,KAAKuI,MAAO+8B,EAASr0B,WAAWxH,MAGtC,MAIT+G,EAAAnP,UAAAoW,gBAAA,SAEE6tB,EAEAywB,EAEAC,QAAA,IAAAA,MAAaL,EAAWM,QAExB,IAAI9/C,EAAU4/C,EAAQr0C,OAAO4jB,EAASr0B,WAAWxH,MACjD,IAAK0M,EAOH,OANI6/C,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAeivD,mBACf5xB,EAAS/8B,MAAO+8B,EAASr0B,WAAWxH,MAGjC,KAIT,IAFA,IAAI0tD,EAAO7xB,EACP9vB,EAAO8vB,EAAS9vB,KACbA,GAAM,CACX,KAAMW,EAAUA,EAAQc,aAAazB,EAAKvE,WAAWxH,OAOnD,OANIusD,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAemvD,oCACf5hD,EAAKjN,MAAOiN,EAAKvE,WAAWxH,KAAM0tD,EAAKlmD,WAAWxH,MAG/C,KAET0tD,EAAO3hD,EACPA,EAAOA,EAAKA,KAEd,OAAOW,GAIT3F,EAAAnP,UAAA41D,qBAAA,SAEE/0C,EAEAu0C,EAEAV,EAEAjyC,EAEAuzC,EAEArB,QAJA,IAAAlyC,MAA4Czc,EAAAyvD,gBAE5C,IAAAO,MAAA,WAEA,IAAArB,MAAyBL,EAAWM,QAIpC,IAFA,IAAIqB,EAAoB,EACpBC,EAAoB,EACf93D,EAAI,EAAGA,EAAIyiB,EAAetb,SAAUnH,EACtCyiB,EAAeziB,GAAG45C,eAAeie,IACpCC,EAEJ,IAAIC,EAAgBf,EAAoBA,EAAkB7vD,OAAS,EACnE,GAAI4wD,EAAgBF,GAAqBE,EAAgBD,EAYvD,OAXAn4D,KAAKwL,MACHI,EAAA/C,eAAe8uD,oCACfS,EACItsD,EAAAgN,MAAMhO,KACSusD,EAAmB,GAAGluD,MACtBkuD,EAAmBe,EAAgB,GAAGjvD,OAErDX,OAAOyvD,GAAuB9uD,OACjCivD,EAAgBF,EAAoBA,EAAoBC,GAAmBruD,SAAS,IACrFsuD,EAActuD,SAAS,KAElB,KAET,IAAIie,EAAgB,IAAI/gB,MAAYmxD,GACpC,IAAS93D,EAAI,EAAGA,EAAI83D,IAAqB93D,EAAG,CAC1C,IAAI8a,EAAO9a,EAAI+3D,EACXp4D,KAAK02D,YACUW,EAAmBh3D,GAChCs2D,EACAjyC,EACAkyC,GAEF52D,KAAK02D,YACHluD,OAAOsa,EAAeziB,GAAG45C,aACzB0c,EACAjyC,EACAkyC,GAEN,IAAKz7C,EAAM,OAAO,KAElBuJ,EAAwBzT,IAAI6R,EAAeziB,GAAGO,KAAKyJ,KAAM8Q,GACzD4M,EAAc1nB,GAAK8a,EAErB,OAAO4M,GAIT3W,EAAAnP,UAAAo2D,kBAAA,SAEExmD,EAEAsU,EAEAwwC,EAEAC,QAAA,IAAAA,MAAyBL,EAAWM,QAEpC,IACI9/C,EADAnW,EAAOiR,EAAWxH,KAEtB,OAAI8b,IACEpP,EAAUoP,EAAK7D,OAAO1hB,KACxBZ,KAAKw2D,sBAAwB,KAC7Bx2D,KAAKy2D,yBAA2B,KACzB1/C,GAGP4/C,IACE5/C,EAAU4/C,EAAQr0C,OAAO1hB,KAC3BZ,KAAKw2D,sBAAwB,KAC7Bx2D,KAAKy2D,yBAA2B,KACzB1/C,IAGPA,EAAU/W,KAAK0hB,QAAQ3J,aAAanX,KACtCZ,KAAKw2D,sBAAwB,KAC7Bx2D,KAAKy2D,yBAA2B,KACzB1/C,IAEL6/C,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAeivD,mBACfjmD,EAAW1I,MAAOvI,GAGf,OAITwQ,EAAAnP,UAAAq2D,yBAAA,SAAyB78C,EAAgBm7C,GACvC,QADuC,IAAAA,MAAyBL,EAAWM,QACvEp7C,EAAOD,GAAG7P,EAAAtJ,YAAY6f,UAAW,OAAO,EAC5C,IAAIk1C,EAAW37C,EAAO27C,SACtB,IAAKA,EAAU,OAAO,EACtB,IAAIj8C,EAAOnb,KAAK02D,YACdU,EACA37C,EAAOhJ,OACP,KACAmkD,GAEF,QAAKz7C,IACLM,EAAOL,QAAQD,IACR,IAIT/J,EAAAnP,UAAAs2D,gCAAA,SAEEC,EAEAryC,EAEAsyC,EAEA7B,QAAA,IAAAA,MAAyBL,EAAWM,QAEpC,IAAI6B,EAAmBF,EAAe7zB,WAClC7b,EAAS9oB,KAAK24D,kBAAkBD,EAAkBvyC,EAAMsyC,EAAgB7B,GAC5E,IAAK9tC,EAAQ,OAAO,KACpB,IAAI8vC,EAAeJ,EAAex2D,SAASqI,KAG3C,OAAQye,EAAOhU,MACb,KAAKqzC,EAAAl5C,YAAYiO,OAAQ,IAAKld,KAAKs4D,yBAAiCxvC,EAAQ8tC,GAAa,OAAO,KAChG,KAAKzO,EAAAl5C,YAAY4U,MACjB,KAAKskC,EAAAl5C,YAAY6L,MACf,IAAIK,EAA6B2N,EAAQ3N,KAEzC,GAF+C3S,OAAO2S,GAAQtP,EAAAsH,KAAKG,QAC/Do1C,EAAiBvtC,EAAKutC,gBACL,CACnB,IAAI54C,EAAc9P,KAAK0hB,QAAQ5R,YAC/B,GAAKqL,EAAKK,GAAE,OAAyB1L,EAAYiD,IAAIoI,EAAKrG,MAOxD,OAJA9U,KAAKwL,MACHI,EAAA/C,eAAemvD,oCACfQ,EAAex2D,SAASmH,MAAOyvD,EAAoC9vC,EAAQ3N,KAAKrR,YAE3E,KANP4+C,EAAiB54C,EAAY5O,IAAIia,EAAKrG,MAS1CgU,EAAS4/B,EACT,MAEF,KAAKP,EAAAl5C,YAAYwL,mBAOf,KANI+M,EAAiBxnB,KAAKwZ,gBACxBhR,OAA2BsgB,EAAQpO,iBACnC,KACAzS,EAAAyvD,UACAd,IAEmB,OAAO,KAE5B,KADIlO,EAAiBlhC,EAAehV,UAAUmH,WAAW+uC,gBAMvD,OAJA1oD,KAAKwL,MACHI,EAAA/C,eAAemvD,oCACfQ,EAAex2D,SAASmH,MAAOyvD,EAAcpxC,EAAehV,UAAUmH,WAAW7P,YAE5E,KAETgf,EAAS4/B,EACT,MAEF,KAAKP,EAAAl5C,YAAY2L,SACf,IAAI4M,EACAkhC,EACJ,KADIA,GADAlhC,EAAiBhf,OAAkBsgB,EAAQtB,iBACXhV,UAAUmH,WAAW+uC,gBAMvD,OAJA1oD,KAAKwL,MACHI,EAAA/C,eAAemvD,oCACfQ,EAAex2D,SAASmH,MAAOyvD,EAAcpxC,EAAehV,UAAUmH,WAAW7P,YAE5E,KAETgf,EAAS4/B,EACT,MAEF,KAAKP,EAAAl5C,YAAY8L,MACf,IAAI8hC,EAAoB78C,KAAKy2D,yBAC7B,GAAI5Z,EAAmB,CACrB,IAAIgc,EAAqB/vC,EAAQC,eAAeo/B,EAAAz8C,aAAasB,aAC7D,IAAK6rD,EAKH,OAJA74D,KAAKwL,MACHI,EAAA/C,eAAeiwD,qCACfjc,EAAkB1zC,MAAe2f,EAAQ5X,cAEpC,KAET,IAAIyI,EAAak/C,EAAWrmD,UAAUmH,WACtC,KAAMmP,EAASnP,EAAW+uC,gBAKxB,OAJA1oD,KAAKwL,MACHI,EAAA/C,eAAemvD,oCACfQ,EAAex2D,SAASmH,MAAOyvD,EAAcj/C,EAAW7P,YAEnD,MAQf,OAAQgf,EAAOhU,MACb,KAAKqzC,EAAAl5C,YAAYqJ,gBACjB,KAAK6vC,EAAAl5C,YAAY8L,MACf,OAAG,CAED,IADIC,EAAU8N,EAAO9N,UACNA,EAAQjI,IAAI6lD,GAGzB,OAFA54D,KAAKw2D,sBAAwBkC,EAC7B14D,KAAKy2D,yBAA2B,KACzBz7C,EAAQ9Z,IAAI03D,GAGrB,GAAI9vC,EAAOhU,MAAQqzC,EAAAl5C,YAAYqJ,gBAAiB,CAC9C,IAAqBwQ,EAAQvQ,cAG3B,MAFAuQ,EAA0CA,EAAQvQ,kBAK/C,IAAIuQ,EAAOhU,MAAQqzC,EAAAl5C,YAAY8L,MAOpC,MANA,IAAY+N,EAAQd,KAGlB,MAFAc,EAAwBA,EAAQd,MAQtC,MAEF,QACE,IAAIhN,EACJ,IADIA,EAAU8N,EAAO9N,UACNA,EAAQjI,IAAI6lD,GAGzB,OAFA54D,KAAKw2D,sBAAwBkC,EAC7B14D,KAAKy2D,yBAA2B,KACzBz7C,EAAQ9Z,IAAI03D,GASzB,OAJA54D,KAAKwL,MACHI,EAAA/C,eAAemvD,oCACfQ,EAAex2D,SAASmH,MAAOyvD,EAAc9vC,EAAO5X,cAE/C,MAITE,EAAAnP,UAAA82D,+BAAA,SAEEC,EAEA7yC,EAEAsyC,EAEA7B,QAAA,IAAAA,MAAyBL,EAAWM,QAEpC,IAAI6B,EAAmBM,EAAcr0B,WACjC7b,EAAS9oB,KAAK24D,kBAAkBD,EAAkBvyC,EAAMsyC,EAAgB7B,GAC5E,IAAK9tC,EAAQ,OAAO,KACpB,OAAQA,EAAOhU,MACb,KAAKqzC,EAAAl5C,YAAYiO,OAAQ,IAAKld,KAAKs4D,yBAAiCxvC,EAAQ8tC,GAAa,OAAO,KAChG,KAAKzO,EAAAl5C,YAAY4U,MACjB,KAAKskC,EAAAl5C,YAAY6L,MAEf,GAAIgO,EAD6BA,EAAQ3N,KACvButC,eAGhB,OAFA1oD,KAAKw2D,sBAAwBkC,EAC7B14D,KAAKy2D,yBAA2BuC,EAAcnc,kBACvC/zB,EAET,MAEF,KAAKq/B,EAAAl5C,YAAY8L,MACf,IAAI89C,EAAqB/vC,EAAQC,eAAeo/B,EAAAz8C,aAAasB,aAC7D,OAAK6rD,EASDH,EAAiB5jD,MAAQhJ,EAAAiJ,SAASwkC,eAEhCzwB,EADa+vC,EAAWrmD,UAAUmH,WACd+uC,iBACtB1oD,KAAKw2D,sBAAwBkC,EAC7B14D,KAAKy2D,yBAA2BuC,EAAcnc,kBACvC/zB,GAEF,MAET9oB,KAAKw2D,sBAAwBkC,EAC7B14D,KAAKy2D,yBAA2BuC,EAAcnc,kBACvC/zB,IAnBD8tC,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAeiwD,qCACfE,EAAc7vD,MAAe2f,EAAQ5X,cAGlC,MAsBb,OANI0lD,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfo7C,EAAiBvvD,OAGd,MAITiI,EAAAnP,UAAAg3D,4BAAA,SAEEC,EAEAT,GAEA,IAAKA,EAAej9C,GAAE,KAEpB,OAAQi9C,EAAe3jD,MACrB,OACE,GAAIqkD,UAAUD,GAAW,OAAOrtD,EAAAsH,KAAKjQ,GACrC,MAEF,OACE,GAAIk2D,UAAUF,GAAW,OAAOrtD,EAAAsH,KAAK5P,GACrC,MAEF,OACE,GAAI81D,WAAWH,GAAW,OAAOrtD,EAAAsH,KAAKhQ,IACtC,MAEF,OACE,GAAIm2D,WAAWJ,GAAW,OAAOrtD,EAAAsH,KAAK3P,IACtC,MAEF,OACE,GAAI+1D,WAAWL,GAAW,OAAOrtD,EAAAsH,KAAK/P,IACtC,MAEF,OACE,GAAIo2D,WAAWN,GAAW,OAAOrtD,EAAAsH,KAAK1P,IACtC,MAEF,QACE,GAAIg2D,YAAYP,GAAW,OAAOrtD,EAAAsH,KAAKvP,KACvC,MAEF,OACE,IAAK5D,KAAK0hB,QAAQzO,QAAQc,SAAU,CAClC,GAAIwlD,WAAWL,GAAW,OAAOrtD,EAAAsH,KAAK01C,QACtC,MAEF,OAAOh9C,EAAAsH,KAAKy1C,QAEd,OACE,IAAK5oD,KAAK0hB,QAAQzO,QAAQc,SAAU,CAClC,GAAIylD,WAAWN,GAAW,OAAOrtD,EAAAsH,KAAK41C,QACtC,MAEF,OAAOl9C,EAAAsH,KAAK21C,QAEd,OAAmB,OAAOj9C,EAAAsH,KAAK9P,IAC/B,OAAmB,OAAOwI,EAAAsH,KAAKzP,IAC/B,QAAmB,OAAOmI,EAAAsH,KAAKtP,IAC/B,QAAmB,OAAOgI,EAAAsH,KAAKrP,IAC/B,QAAoB,MACpB,QAAS0E,QAAO,GAIpB,OAAI+wD,WAAWL,GAAkBrtD,EAAAsH,KAAK/P,IAClCo2D,WAAWN,GAAkBrtD,EAAAsH,KAAK1P,IAC/BoI,EAAAsH,KAAK9P,KAId+N,EAAAnP,UAAA02D,kBAAA,SAEEh0B,EAEAxe,EAEAsyC,EAEA7B,GAEA,SAJA,IAAA6B,MAAuB5sD,EAAAsH,KAAKG,WAE5B,IAAAsjD,MAAyBL,EAAWM,QAE7BlyB,EAAW7vB,MAAQhJ,EAAAiJ,SAASykC,eACjC7U,EAAuCA,EAAYA,WAErD,OAAQA,EAAW7vB,MACjB,KAAKhJ,EAAAiJ,SAASskC,UACZ,OAAOr5C,KAAK05D,2BACW/0B,EACrBxe,EAAMsyC,EAAgB7B,GAG1B,KAAK9qD,EAAAiJ,SAASkxC,YACZ,OAAOjmD,KAAK25D,6BACah1B,EACvBxe,EAAMsyC,EAAgB7B,GAG1B,KAAK9qD,EAAAiJ,SAASixC,aACZ,OAAOhmD,KAAK45D,8BACcj1B,EACxBxe,EAAMsyC,EAAgB7B,GAG1B,KAAK9qD,EAAAiJ,SAASqwC,OACZ,OAAOplD,KAAK65D,wBACQl1B,EAClBxe,EAAMsyC,EAAgB7B,GAG1B,KAAK9qD,EAAAiJ,SAAS+wC,KACZ,OAAO9lD,KAAK85D,sBACMn1B,EAChBxe,EAAMsyC,EAAgB7B,GAG1B,KAAK9qD,EAAAiJ,SAAS2kC,MACZ,OAAO15C,KAAK+5D,uBACOp1B,EACjBxe,EAAMsyC,EAAgB7B,GAG1B,KAAK9qD,EAAAiJ,SAASqkC,WACZ,OAAOp5C,KAAKq4D,kBACY1zB,EACtBxe,EAAMA,EAAK6zC,eAAgBpD,GAG/B,KAAK9qD,EAAAiJ,SAASmK,QACZ,OAAOlf,KAAKi6D,yBACSt1B,EACnBxe,EAAMsyC,EAAgB7B,GAG1B,KAAK9qD,EAAAiJ,SAAS0kC,eACZ,OAAOz5C,KAAKu4D,gCACgB5zB,EAC1Bxe,EAAMsyC,EAAgB7B,GAG1B,KAAK9qD,EAAAiJ,SAASwkC,cACZ,OAAOv5C,KAAK+4D,+BACep0B,EACzBxe,EAAMsyC,EAAgB7B,GAG1B,KAAK9qD,EAAAiJ,SAASukC,KACZ,OAAOt5C,KAAKk6D,sBACMv1B,EAChBxe,EAAMsyC,EAAgB7B,GAW5B,OANIA,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAGR,MAITiI,EAAAnP,UAAAy3D,2BAAA,SAEE/0B,EAEAxe,EAEAsyC,EAEA7B,GAEA,QAJA,IAAA6B,MAAuB5sD,EAAAsH,KAAKG,WAE5B,IAAAsjD,MAAyBL,EAAWM,QAEhClyB,EAAWgX,eAAiB7vC,EAAAq5C,cAAcgV,QAC5C,OAAOn6D,KAAK24D,kBACVh0B,EAAWA,WACXxe,EACAsyC,EACA7B,GAGJ,IAAIz7C,EAAOnb,KAAK02D,YACdluD,OAAOm8B,EAAWiX,QAClBz1B,EAAK6zC,eACL7zC,EAAKzB,wBACLkyC,GAEF,IAAKz7C,EAAM,OAAO,KAClB,IAAIpE,EAA0BoE,EAAKutC,eACnC,IAAK3xC,EAAS,CACZ,IAAIvE,EAAY2I,EAAKzB,mBACrB,IAAKlH,EAAW,OAAO,KACvBuE,EAAUvE,EAAUk4C,iBAAiB1qD,KAAK0hB,SAI5C,OAFA1hB,KAAKw2D,sBAAwB,KAC7Bx2D,KAAKy2D,yBAA2B,KACzB1/C,GAIT3F,EAAAnP,UAAA03D,6BAAA,SAEEh1B,EAEAxe,EAEAsyC,EAEA7B,QAFA,IAAA6B,MAAuB5sD,EAAAsH,KAAKG,WAE5B,IAAAsjD,MAAyBL,EAAWM,QAEpC,IAAIzX,EAAUza,EAAWya,QAEzB,OAAQza,EAAWoX,UACjB,KAAKlD,EAAAC,MAAMrqC,MAET,GAAI2wC,EAAQtqC,MAAQhJ,EAAAiJ,SAASmK,SAA+BkgC,EAASjgC,aAAerT,EAAAsT,YAAYqmC,QAAS,CACvG,IAAItqC,EAAOnb,KAAKi5D,4BACdmB,QAAQC,SAAqCjb,EAAS99C,OACtDm3D,GAGF,OADI3oD,EAAc9P,KAAK0hB,QAAQ5R,aACZiD,IAAIoI,EAAKrG,MAAQhF,EAAY5O,IAAIia,EAAKrG,MAAS,KAEpE,OAAO9U,KAAK24D,kBACVvZ,EACAj5B,EACAsyC,EACA7B,GAGJ,KAAK/d,EAAAC,MAAMvqC,KACX,KAAKsqC,EAAAC,MAAMwV,UACX,KAAKzV,EAAAC,MAAMyV,YACT,OAAOvuD,KAAK24D,kBACVh0B,EAAWya,QACXj5B,EACAsyC,EACA7B,GAGJ,KAAK/d,EAAAC,MAAMgW,YACT,IAAIh/C,EACJ,OADIA,EAAc9P,KAAK0hB,QAAQ5R,aACZiD,IAAG,IAAkBjD,EAAY5O,IAAG,IAAmB,KAE5E,KAAK23C,EAAAC,MAAMiW,MAOT,IANsB/uD,KAAK24D,kBACzBh0B,EAAWya,QACXj5B,EACAsyC,EACA7B,GAEoB,OAAO,KAE7B,MAEF,QAASpuD,QAAO,GAQlB,OANIouD,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAGR,MAITiI,EAAAnP,UAAA23D,8BAAA,SAEEj1B,EAEAxe,EAEAsyC,EAEA7B,GAGA,YALA,IAAA6B,MAAuB5sD,EAAAsH,KAAKG,WAE5B,IAAAsjD,MAAyBL,EAAWM,QAG5BlyB,EAAWoX,UACjB,KAAKlD,EAAAC,MAAMwV,UACX,KAAKzV,EAAAC,MAAMyV,YACT,OAAOvuD,KAAK24D,kBACVh0B,EAAWya,QACXj5B,EACAsyC,EACA7B,GAGJ,QAASpuD,QAAO,GAQlB,OANIouD,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAGR,MAITiI,EAAAnP,UAAA43D,wBAAA,SAEEl1B,EAEAxe,EAEAsyC,EAEA7B,GASA,YAXA,IAAA6B,MAAuB5sD,EAAAsH,KAAKG,WAE5B,IAAAsjD,MAAyBL,EAAWM,QAGhCD,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAGR,MAITiI,EAAAnP,UAAA63D,sBAAA,SAEEn1B,EAEAxe,EAEAsyC,EAEA7B,GAEA,QAJA,IAAA6B,MAAuB5sD,EAAAsH,KAAKG,WAE5B,IAAAsjD,MAAyBL,EAAWM,QAEhC1wC,EAAK3K,GAAE,MAA4B,CACrC,IAAI8+C,EAAYn0C,EAAKo0C,YAAY5uD,EAAA3I,cAAckC,OAC/C,GAAIo1D,EAGF,OAFAt6D,KAAKw2D,sBAAwB,KAC7Bx2D,KAAKy2D,yBAA2B,KACzB6D,EAGX,IAAI7nD,EAAS0T,EAAK6zC,eAAevnD,OACjC,OAAIA,GACFzS,KAAKw2D,sBAAwB,KAC7Bx2D,KAAKy2D,yBAA2B,KACzBhkD,IAELmkD,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAe2xD,+CACf71B,EAAWx7B,OAGR,OAITiI,EAAAnP,UAAA83D,uBAAA,SAEEp1B,EAEAxe,EAEAsyC,EAEA7B,GAEA,QAJA,IAAA6B,MAAuB5sD,EAAAsH,KAAKG,WAE5B,IAAAsjD,MAAyBL,EAAWM,QAEhC1wC,EAAK3K,GAAE,MAA4B,CACrC,IAAIi/C,EAAat0C,EAAKo0C,YAAY5uD,EAAA3I,cAAcmC,QAChD,GAAIs1D,EAGF,OAFAz6D,KAAKw2D,sBAAwB,KAC7Bx2D,KAAKy2D,yBAA2B,KACzBgE,EAGX,IAAIhoD,EAAyB0T,EAAK6zC,eAAevnD,OACjD,OAAIA,GAAUA,EAAOqC,MAAQqzC,EAAAl5C,YAAY8L,QAAUtI,EAAiBA,EAAQuV,OAC1EhoB,KAAKw2D,sBAAwB,KAC7Bx2D,KAAKy2D,yBAA2B,KACzBhkD,IAELmkD,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAe6xD,iDACf/1B,EAAWx7B,OAGR,OAITiI,EAAAnP,UAAAg4D,yBAAA,SAEEt1B,EAEAxe,EAEAsyC,EAEA7B,GAEA,YAJA,IAAA6B,MAAuB5sD,EAAAsH,KAAKG,WAE5B,IAAAsjD,MAAyBL,EAAWM,QAE5BlyB,EAAWxlB,aACjB,KAAKrT,EAAAsT,YAAYqmC,QACfzlD,KAAKw2D,sBAAwB7xB,EAC7B3kC,KAAKy2D,yBAA2B,KAChC,IAAIkE,EAAc36D,KAAKi5D,4BACMt0B,EAAYrjC,MACvCm3D,GAGF,OADI3oD,EAAc9P,KAAK0hB,QAAQ5R,aACZiD,IAAI4nD,EAAY7lD,MAAQhF,EAAY5O,IAAIy5D,EAAY7lD,MAAS,KAElF,KAAKhJ,EAAAsT,YAAYmmC,MACfvlD,KAAKw2D,sBAAwB7xB,EAC7B3kC,KAAKy2D,yBAA2B,KAChC,IACI3mD,EADA6qD,EAAclC,GAAkB5sD,EAAAsH,KAAKtP,IAAMgI,EAAAsH,KAAKtP,IAAMgI,EAAAsH,KAAKrP,IAE/D,OADIgM,EAAc9P,KAAK0hB,QAAQ5R,aACZiD,IAAI4nD,EAAY7lD,MAAQhF,EAAY5O,IAAIy5D,EAAY7lD,MAAS,KAElF,KAAKhJ,EAAAsT,YAAYC,OAGf,OAFArf,KAAKw2D,sBAAwB7xB,EAC7B3kC,KAAKy2D,yBAA2B,KACzBz2D,KAAK0hB,QAAQzR,eAWxB,OANI2mD,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAGR,MAITiI,EAAAnP,UAAAi4D,sBAAA,SAEEv1B,EAEAxe,EAEAsyC,EAEA7B,QAFA,IAAA6B,MAAuB5sD,EAAAsH,KAAKG,WAE5B,IAAAsjD,MAAyBL,EAAWM,QAEpC,IAAI6B,EAAmB/zB,EAAWA,WAC9B7b,EAAS9oB,KAAK24D,kBAChBD,EACAvyC,EACAsyC,EACA7B,GAEF,IAAK9tC,EAAQ,OAAO,KACpB,GAAIA,EAAOhU,MAAQqzC,EAAAl5C,YAAYsK,mBAAoB,CACjD,IAAIiL,EAAWxkB,KAAK46D,iCACC9xC,EACnB6b,EAAW5c,cACX5B,EAAK6zC,eACL/xD,EAAAyvD,QAAQvxC,EAAKzB,yBACbigB,EACAiyB,GAEF,IAAKpyC,EAAU,OAAO,KACtB,IAAI7K,EAAa6K,EAAShS,UAAUmH,WAChCyvC,EAAYzvC,EAAW+uC,eAC3B,GAAIU,EAGF,OAAOA,EAEP,IAAI52C,EAAYmH,EAAWD,mBAC3B,OAAIlH,EACmBA,EAAUk4C,iBAAiB1qD,KAAK0hB,UAMrDk1C,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAegyD,uGACfnC,EAAiBvvD,MAAO2f,EAAO5X,cAG5B,MAQT,OANI0lD,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAGR,MAITiI,EAAAnP,UAAAuX,gBAAA,SAEEvX,EAEA8lB,EAEArD,EAEAkyC,QAFA,IAAAlyC,MAA4Czc,EAAAyvD,gBAE5C,IAAAd,MAAyBL,EAAWM,QAEpC,IAAIiE,EAAe74D,EAAUwQ,OAAOqC,MAAQqzC,EAAAl5C,YAAYwL,mBACpDxY,EAAUwQ,OAAOA,OACjBxQ,EAAUwQ,OACV0R,EAA8B,KAC9BG,EAAcyD,EAAgBlc,EAAAw+C,cAActiC,GAAiB,GAGjE,GAAI9lB,EAAUuZ,GAAG7P,EAAAtJ,YAAY4e,UAAW,CAMtC,GALAzY,OAAOsyD,EAAahmD,MAAQqzC,EAAAl5C,YAAY8L,OACxCoJ,EAAuB22C,EAGnBC,EAAmB94D,EAAUoiB,oBAAoBC,GAC/B,OAAOy2C,EAG7B,IAAIC,EAAqB72C,EAAc4D,cACvC,GAAIizC,EAAoB,CACtB,IAAIC,EAAsBzyD,OAAO2b,EAAcliB,UAAU0mB,oBACrDuyC,EAAwBD,EAAoBzzD,OAChDgB,OAAO0yD,GAAyBD,EAAoBzzD,QACpD,IAAK,IAAInH,EAAI,EAAGA,EAAI66D,IAAyB76D,EAAG,CAC9C,IAAI86D,EAAyBF,EAAoB56D,GAAGO,KAAKyJ,KACpDqa,EAAwB3R,IAAIooD,IAC/Bz2C,EAAwBzT,IACtBkqD,EACAH,EAAmB36D,UAKtB,CAEL,IAAI06D,EACJ,GAFAvyD,OAAOsyD,EAAahmD,MAAQqzC,EAAAl5C,YAAY8L,OACpCggD,EAAmB94D,EAAUoiB,oBAAoBC,GAC/B,OAAOy2C,EAI/B,IAEIK,EAFAC,EAAgBp5D,EAAUo5D,cAC1B1yC,EAAqB1mB,EAAU0mB,mBAEnC,GAAIZ,IAAkBqzC,EAA2BrzC,EAAcvgB,QAAS,CACtEgB,OAAOmgB,GAAsByyC,GAA4BzyC,EAAmBnhB,QAC5E,IAASnH,EAAI,EAAGA,EAAI+6D,IAA4B/6D,EAC9CqkB,EAAwBzT,IACA0X,EAAoBtoB,GAAGO,KAAKyJ,KAClD0d,EAAc1nB,SAIlBmI,QAAQmgB,GAAmD,GAA7BA,EAAmBnhB,QAInD,IAAIue,EAAwB,KACxBy0B,EAAmB6gB,EAAc7gB,iBACrC,GAAIA,EAAkB,CAOpB,KANAz0B,EAAW/lB,KAAK02D,YACdlc,EACAv4C,EAAUwQ,OACViS,EACAkyC,IAEa,OAAO,KACtBlyC,EAAwBzT,IAAItF,EAAA3I,cAAckC,MAAO6gB,QACxC5B,IACT4B,EAAW5B,EAAchJ,KACzBuJ,EAAwBzT,IAAItF,EAAA3I,cAAckC,MAAO6gB,IAInD,IA8BIpM,EA9BA2hD,EAAsBD,EAAc9gB,WACpCghB,EAAyBD,EAAoB9zD,OAC7CiS,EAAiB,IAAIzS,MAAYu0D,GACjChR,EAAiB,IAAIvjD,MAAcu0D,GACnC/Q,EAAqB,EACzB,IAASnqD,EAAI,EAAGA,EAAIk7D,IAA0Bl7D,EAAG,CAC/C,IAAIm7D,EAAuBF,EAAoBj7D,GAC3Cm7D,EAAqBlhB,eAAiBxuC,EAAAw4C,cAAc2H,UACtDzB,EAAqBnqD,EAAI,GAE3B,IAAI+2D,EAAWoE,EAAqBrgD,KACpC,GAAIrP,EAAAo8C,cAAckP,GAKhB,OAJAp3D,KAAKwL,MACHI,EAAA/C,eAAequD,cACfE,EAASjuD,OAEJ,KAET,IAAI6c,EAAgBhmB,KAAK02D,YACvBU,EACAn1D,EAAUwQ,OACViS,EACAkyC,GAEF,IAAK5wC,EAAe,OAAO,KAC3BvM,EAAepZ,GAAK2lB,EACpBukC,EAAelqD,GAAKm7D,EAAqB56D,KAAKyJ,KAKhD,GAAIpI,EAAUuZ,GAAG7P,EAAAtJ,YAAY0b,KAC3BpE,EAAa9N,EAAAsH,KAAKG,UACb,GAAIrR,EAAUuZ,GAAG7P,EAAAtJ,YAAYuc,aAClCjF,EAAanR,OAAO2b,GAAehJ,SAC9B,CACDi8C,EAAWiE,EAAc1hD,WAC7B,GAAI7N,EAAAo8C,cAAckP,GAKhB,OAJAp3D,KAAKwL,MACHI,EAAA/C,eAAequD,cACfE,EAASjuD,OAEJ,KAET,IAAIgS,EAAOnb,KAAK02D,YACdU,EACAn1D,EAAUwQ,OACViS,EACAkyC,GAEF,IAAKz7C,EAAM,OAAO,KAClBxB,EAAawB,EAGf,IAAI3I,EAAY,IAAI3G,EAAAuW,UAAU3I,EAAgBE,EAAYoM,GAC1DvT,EAAU+3C,eAAiBA,EAC3B/3C,EAAUg4C,mBAAqBA,EAE/B,IAAI/lC,EAAyBxiB,EAAUrB,KACnC0jB,EAAY9c,SAAQid,GAA0B,IAAMH,EAAc,KACtE,IAAIE,EAAW,IAAI2jC,EAAAx1C,SACjB8R,EACAxiB,EACAuQ,EACAkS,GAGF,OADAziB,EAAUsiB,oBAAoBD,EAAaE,GACpCA,GAITpT,EAAAnP,UAAA24D,iCAAA,SAEE34D,EAEAo1D,EAEAV,EAEAjyC,EAEA+2C,EAEA7E,QAAA,IAAAA,MAAyBL,EAAWM,QAEpC,IAAIiE,EAAe74D,EAAUwQ,OAAOqC,MAAQqzC,EAAAl5C,YAAYwL,mBACpDxY,EAAUwQ,OAAOA,OACjBxQ,EAAUwQ,OACVipD,EAAuC,KAG3C,GAAIz5D,EAAUuZ,GAAG7P,EAAAtJ,YAAYqR,SAAU,CAGrC,GAAIzR,EAAUuZ,GAAG7P,EAAAtJ,YAAY4e,UAAW,CACtCzY,OAAOsyD,EAAahmD,MAAQqzC,EAAAl5C,YAAY8L,OACxC,IAAIigD,EAA6BF,EAAc/yC,cAC/C,GAAIizC,EAAoB,CACtB,IAAIryC,EAAqBngB,OAAesyD,EAAc74D,UAAU0mB,oBAC5DuyC,EAAwBF,EAAmBxzD,OAC/CgB,OAAO0yD,GAAyBvyC,EAAmBnhB,QACnD,IAAK,IAAInH,EAAI,EAAGA,EAAI66D,IAAyB76D,EAC3CqkB,EAAwBzT,IACtB0X,EAAmBtoB,GAAGO,KAAKyJ,KAC3B2wD,EAAmB36D,KAc3B,KARAq7D,EAAwB17D,KAAK63D,qBAC3BrvD,OAAOvG,EAAU0mB,oBACjB0uC,EACAV,EACAjyC,EACA+2C,EACA7E,IAE0B,OAAO,UAInC,GAA0B,OAAtBS,GAA8BA,EAAkB7vD,OAOlD,OANIovD,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAe0uD,sBACfkE,EAAWtyD,MAAOlH,EAAUiP,cAGzB,KAKX,OAAOlR,KAAKwZ,gBACVvX,EACAy5D,EACAh3C,EACAkyC,IAKJxlD,EAAAnP,UAAAqX,aAAA,SAEErX,EAEA8lB,EAEArD,EAEAkyC,wBAFA,IAAAlyC,MAA4Czc,EAAAyvD,gBAE5C,IAAAd,MAAyBL,EAAWM,QAEpC,IAAIvyC,EAAcyD,EAAgBlc,EAAAw+C,cAActiC,GAAiB,GAG7DvD,EAAWviB,EAAUoiB,oBAAoBC,GAC7C,GAAIE,EAAU,OAAOA,EAIrB,GAAIuD,EAAe,CACjB,IACI4zC,GADAhzC,EAAqBngB,OAAOvG,EAAU0mB,qBACCnhB,OACvCohB,EAAmBb,EAAcvgB,OACrCgB,OAAOogB,GAAoB+yC,GAC3B,IAAK,IAAIt7D,EAAI,EAAGA,EAAIuoB,IAAoBvoB,EACtCqkB,EAAwBzT,IAAI0X,EAAmBtoB,GAAGO,KAAKyJ,KAAM0d,EAAc1nB,QAExE,CACL,IAAIsoB,EAAqB1mB,EAAU0mB,mBACnCngB,SAASmgB,GAAsBA,EAAmBnhB,SAIpD,IAAI+Q,EAAgBtW,EAAUsW,cAC1BqjD,EAA0B,KAC9B,GAAIrjD,EAAe,CACjB,IAAIJ,EAAc3P,OAAOvG,EAAUkW,aASnC,KARAyjD,EAAY57D,KAAKy3D,8BACfl/C,EACAJ,EAAY4P,cACZ9lB,EAAUwQ,OACVxK,EAAAyvD,QAAQhzC,GACRvM,EACAy+C,IAEc,OAAO,KAIzB,IAAIiF,EAAwB55D,EAAUrB,KAClC0jB,EAAY9c,SAAQq0D,GAAyB,IAAMv3C,EAAc,MACrEE,EAAW,IAAI2jC,EAAArgC,MAAM+zC,EAAuB55D,EAAW8lB,EAAe6zC,IAC7Dl3C,wBAA0BA,EACnCziB,EAAUsiB,oBAAoBD,EAAaE,GAG3C,IAAI6C,EAAoB,EACxB,GAAIu0C,EAAW,CAEb,GADIE,EAAcF,EAAU5gD,QACX,EACXX,EAAkBmK,EAASxJ,WACTwJ,EAASxJ,QAAUX,EAAkB,IAAI3K,SAC/D,IAAyC,IAAAqsD,EAAA7lD,EAAA4lD,GAAWE,EAAAD,EAAA3lD,QAAA4lD,EAAA3lD,KAAA2lD,EAAAD,EAAA3lD,OAAE,CAA7C,IAAAmE,EAAAhE,EAAAylD,EAAA16D,MAAA,GAAC26D,EAAA1hD,EAAA,GAAgB2hD,EAAA3hD,EAAA,GACxBF,EAAgBpJ,IAAIgrD,EAAgBC,sGAGxC70C,EAAeu0C,EAAU1zC,oBAI3B,IAAIi0C,EAA2Bl6D,EAAUoY,gBACzC,GAAI8hD,MACF,IAAmB,IAAAlhD,EAAA/E,EAAAimD,EAAyBriD,UAAQoB,EAAAD,EAAA7E,QAAA8E,EAAA7E,KAAA6E,EAAAD,EAAA7E,OAAE,CAAjD,IAAIoE,EAAMU,EAAA5Z,MACb,OAAQkZ,EAAO1F,MAGb,KAAKqzC,EAAAl5C,YAAYiY,gBACf,IAAI7M,EACJ,GADIA,EAAkBmK,EAASxJ,SAE1B,GAAIX,EAAgBtH,IAAIyH,EAAO5Z,MAAO,CACzCZ,KAAKwL,MACHI,EAAA/C,eAAeqT,uBACE1B,EAAQ7B,eAAexP,MACxCqR,EAAO5Z,MAET,YAPoB4jB,EAASxJ,QAAUX,EAAkB,IAAI3K,IAS/D,IAAI0sD,EAAiC5hD,EAAQ48C,SACzCiF,EAAyB,KAE7B,GAAKD,EAoBHC,EAAYr8D,KAAK02D,YACf0F,EACAn6D,EAAUwQ,OACV+R,EAASE,wBACTkyC,OAxBgB,CAEhB,IAAIkF,EADN,GAAIF,EAEF,IADIE,EAAcF,EAAU5gD,UACT8gD,EAAY/oD,IAAqByH,EAAQ5Z,MAAO,CACjE,IAAI07D,EAAYR,EAAY56D,IAAqBsZ,EAAQ5Z,MACpD07D,EAAU9gD,GAAG7P,EAAAtJ,YAAY0qD,WAC5BvkD,OAAO8zD,EAAUxnD,MAAQqzC,EAAAl5C,YAAY6L,OACrCuhD,EAAoBC,EAAWnhD,MAIhCkhD,GACCzF,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAequD,cACE18C,EAAQ7B,eAAexP,MAAMozD,OAYtD,IAAKF,EAAW,MAChB,IAAIG,EAAgB,IAAIrU,EAAA/gC,MAAsB5M,EAAQgK,EAAU63C,GAChE7zD,OAAOP,EAAAJ,WAAWw0D,EAAUziD,WAC5B,IAAIwtB,EAAOi1B,EAAUziD,SAAW,EAC5ByN,EAAe+f,IAAM/f,EAAuC,GAAvBA,EAAe+f,IACxDo1B,EAAcn1C,aAAeA,EAC7BA,GAAgBg1C,EAAUziD,SAC1B4K,EAASjR,IAAIiH,EAAO5Z,KAAM47D,GAC1B,MAEF,KAAKrU,EAAAl5C,YAAYsK,mBACf,IAAIkjD,EAAqCjiD,EAAQ0J,QAAQM,GACzDA,EAASjR,IAAIkpD,EAAe77D,KAAM67D,GAClC,MAEF,KAAKtU,EAAAl5C,YAAYwL,mBACf,IAAIiiD,EAAmB,IAAIvU,EAAA5gC,SAA4B/M,EAAQgK,GAC3D9J,EAAsCF,EAAQE,gBAClD,GAAIA,EAAiB,CACnB,IAAI8M,EAAiBxnB,KAAKwZ,gBACxBkB,EAAgBwJ,QAAQM,GACxB,KACAvc,EAAAyvD,QAAQlzC,EAASE,yBACjBkyC,GAEEpvC,IACFk1C,EAAiBl1C,eAAiBA,EAClCk1C,EAAiBthD,QAAQoM,EAAehV,UAAUmH,aAGtD,IAAIgB,EAAsCH,EAAQG,gBAClD,GAAIA,EAAiB,CACnB,IAAI8M,EAAiBznB,KAAKwZ,gBACxBmB,EAAgBuJ,QAAQM,GACxB,KACAvc,EAAAyvD,QAAQlzC,EAASE,yBACjBkyC,GAEEnvC,IACFi1C,EAAiBj1C,eAAiBA,EAC7Bi1C,EAAiBlhD,GAAG7P,EAAAtJ,YAAY6f,YACnC1Z,OAAyD,GAAlDif,EAAejV,UAAUiH,eAAejS,QAC/Ck1D,EAAiBthD,QAAQqM,EAAejV,UAAUiH,eAAe,MAIvE+K,EAASjR,IAAImpD,EAAiB97D,KAAM87D,GACpC,MAEF,QAASl0D,QAAO,sGAMtBgc,EAAS0D,oBAAsBb,EAI7B,IAAIs1C,EAAgBn4C,EAAS3M,aAAalM,EAAA3I,cAAcoC,aACxD,GAAIu3D,GAAiBA,EAAclqD,SAAW+R,EAAU,CACtDhc,OAAOm0D,EAAc7nD,MAAQqzC,EAAAl5C,YAAYsK,oBACzC,IAAIqjD,EAAe58D,KAAKwZ,gBACHmjD,EACnB,KACAn4C,EAASE,wBACTkyC,GAEEgG,IAAcp4C,EAAS2D,oBAAgCy0C,OAK/D,IAAsC,IAAAtmD,EAAAJ,EAAAjU,EAAUsd,oBAAkBjI,GAAAhB,EAAAF,QAAAkB,GAAAjB,KAAAiB,GAAAhB,EAAAF,OAAE,CAA3D,IAAAqB,GAAAlB,EAAAe,GAAAhW,MAAA,GAACwT,GAAA2C,GAAA,GAAMolD,GAAAplD,GAAA,GACdjP,OAAOsM,IAAQqzC,EAAAz8C,aAAasD,SAC5B,IAAI8tD,QAAgB,EACpB,GAAID,GAAkBrhD,GAAG7P,EAAAtJ,YAAY4e,UAAW,CAC1Cw7C,EAAiBI,GAAkB34C,QAAQM,GAC/Cs4C,GAAmB98D,KAAKwZ,gBACtBijD,EACA,KACAx0D,EAAAyvD,UACAd,QAGFkG,GAAmB98D,KAAKwZ,gBACtBqjD,GACA,KACA50D,EAAAyvD,UACAd,GAGJ,GAAKkG,GAAL,CACA,IAAIx9C,GAAYkF,EAASlF,UACpBA,KAAWkF,EAASlF,UAAYA,GAAY,IAAI5P,KACrD4P,GAAUrO,IAAI6D,GAAMgoD,yGAEtB,OAAOt4C,GAITpT,EAAAnP,UAAAw1D,8BAAA,SAEEx1D,EAEAo1D,EAEAV,EAEAjyC,EAEA+2C,EAEA7E,QAAA,IAAAA,MAAyBL,EAAWM,QAEpC,IAAI6E,EAAuC,KAG3C,GAAIz5D,EAAUuZ,GAAG7P,EAAAtJ,YAAYqR,UAS3B,KARAgoD,EAAwB17D,KAAK63D,qBAC3BrvD,OAAOvG,EAAU0mB,oBACjB0uC,EACAV,EACAjyC,EACA+2C,EACA7E,IAE0B,OAAO,UAInC,GAA0B,OAAtBS,GAA8BA,EAAkB7vD,OAOlD,OANIovD,GAAcL,EAAWM,QAC3B72D,KAAKwL,MACHI,EAAA/C,eAAe0uD,sBACfkE,EAAWtyD,MAAOlH,EAAUiP,cAGzB,KAKX,OAAOlR,KAAKsZ,aACVrX,EACAy5D,EACAh3C,EACAkyC,IAGNxlD,EA9lDA,CAA8BxF,EAAAX,mBAAjBvL,EAAA0R,q5BCxFb,IAwKYw5B,EAxKZmyB,EAAA58D,EAAA,IAQAyL,EAAAzL,EAAA,GAKAioD,EAAAjoD,EAAA,GAwBAwL,EAAAxL,EAAA,GAWAgoD,EAAAhoD,EAAA,GAwBA6L,EAAA7L,EAAA,IAKA4L,EAAA5L,EAAA,GAIA04C,EAAA14C,EAAA,GAKA2L,EAAA3L,EAAA,GA8DA0L,EAAA1L,EAAA,GASA8H,EAAA9H,EAAA,IAWA,SAAYyqC,GAEVA,IAAA,mBAEAA,IAAA,mBAJF,CAAYA,EAAAlrC,EAAAkrC,SAAAlrC,EAAAkrC,OAAM,KAQlB,IAAAoyB,EAAA,oBAAAA,IAGEh9D,KAAA8oB,OAAiB8hB,EAAOqyB,OAExBj9D,KAAAgU,UAAiB,EAEjBhU,KAAAk9D,cAAqB,EAErBl9D,KAAAm9D,aAAoB,EAEpBn9D,KAAAo9D,aAAoB,EAEpBp9D,KAAAymB,WAAkB,EAElBzmB,KAAAiU,WAAkB,EAElBjU,KAAAgZ,cAA2C,KAE3ChZ,KAAAq9D,SAAQ,EAGRr9D,KAAAkU,kBAAyB,EAEzBlU,KAAAmU,gBAAuB,EA0BzB,OAvBEpT,OAAAC,eAAIg8D,EAAA/6D,UAAA,WAAQ,KAAZ,WACE,OAAOjC,KAAK8oB,QAAU8hB,EAAOC,wCAI/B9pC,OAAAC,eAAIg8D,EAAA/6D,UAAA,YAAS,KAAb,WACE,OAAOjC,KAAK8oB,QAAU8hB,EAAOC,OAASh/B,EAAAsH,KAAK21C,QAAUj9C,EAAAsH,KAAK41C,yCAI5DhoD,OAAAC,eAAIg8D,EAAA/6D,UAAA,YAAS,KAAb,WACE,OAAOjC,KAAK8oB,QAAU8hB,EAAOC,OAASh/B,EAAAsH,KAAKy1C,QAAU/8C,EAAAsH,KAAK01C,yCAI5D9nD,OAAAC,eAAIg8D,EAAA/6D,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAK8oB,QAAU8hB,EAAOC,OAASud,EAAAj+B,WAAW/jB,IAAMgiD,EAAAj+B,WAAWhkB,qCAIpE62D,EAAA/6D,UAAA2R,WAAA,SAAW0pD,GACT,OAAoC,IAA5Bt9D,KAAKq9D,SAAWC,IAE5BN,EAlDA,GAAat9D,EAAAs9D,UAqDb,SAAkBO,GAEhBA,IAAA,eAEAA,IAAA,mCAEAA,IAAA,mCAEAA,IAAA,6BAEAA,IAAA,eAEAA,IAAA,sBAZF,CAAkB79D,EAAA69D,UAAA79D,EAAA69D,QAAO,KAgBzB,SAAkBC,GAEhBA,IAAA,eAEAA,IAAA,uBAEAA,IAAA,uBANF,CAAkB99D,EAAA89D,iBAAA99D,EAAA89D,eAAc,KAUhC,SAAkBC,GAEhBA,IAAA,eAEAA,IAAA,eAJF,CAAkB/9D,EAAA+9D,WAAA/9D,EAAA+9D,SAAQ,KAQ1B,IAmjPIC,EACAC,EAGMC,EAvjPVC,EAAA,SAAAzuD,GAyCE,SAAAyuD,EAAYn8C,EAAkBzO,QAAA,IAAAA,MAAA,MAA9B,IAAA5D,EACED,EAAA5O,KAAAR,KAAM0hB,EAAQxW,cAAYlL,YA7B5BqP,EAAAyuD,uBAAqC,GAErCzuD,EAAA0uD,YAA2B,KAE3B1uD,EAAA2uD,YAAoBnyD,EAAAsH,KAAKG,KAMzBjE,EAAA4uD,eAAkC,GAElC5uD,EAAA6uD,eAA4C,IAAIxuD,IAEhDL,EAAA8uD,cAA0B,CAAE,QAE5B9uD,EAAA+uD,QAAqB,EAErB/uD,EAAAgvD,QAAuB,EAEvBhvD,EAAAivD,mBAA0B,EA8zElBjvD,EAAAkvD,eAAkC,KAClClvD,EAAAmvD,eAAkC,KAClCnvD,EAAAovD,eAAkC,KAClCpvD,EAAAqvD,eAAkC,KAvzExCrvD,EAAKqS,QAAUA,EACfrS,EAAK8B,SAAWuQ,EAAQvQ,SACnB8B,IAASA,EAAU,IAAI+pD,GAC5B3tD,EAAK4D,QAAUA,EACf5D,EAAKgY,aAAevT,QAGlB6qD,IAAI1rD,EAAQgB,WAAY,IAE1B5E,EAAK1P,OAASyoD,EAAAxpB,OAAOj9B,WAs8OzB,OA1/O8B0P,EAAAwsD,EAAAzuD,GAoCrByuD,EAAAe,QAAP,SAAel9C,EAAkBzO,GAC/B,YAD+B,IAAAA,MAAA,MACxB,IAAI4qD,EAASn8C,EAASzO,GAAS2rD,WAmBxCf,EAAA57D,UAAA28D,QAAA,uBACM3rD,EAAUjT,KAAKiT,QACftT,EAASK,KAAKL,OACd+hB,EAAU1hB,KAAK0hB,QAGnBA,EAAQ1O,WAAWC,GAGnB,IAAI4rD,EAAwBn9C,EAAQnP,mBAAmB,QAAS,IAAI1G,EAAAuW,UAAU,GAAIvW,EAAAsH,KAAKG,OACvFurD,EAAsB3tD,aAAe,QACrC,IAAI4tD,EAAoB,IAAI93D,MAC5BhH,KAAK++D,YAAcF,EAAsB14C,KACzCnmB,KAAKg/D,YAAcF,EAGf7rD,EAAQc,SACVpU,EAAOioC,UACLm1B,EAAAkC,eAAeC,UACf9W,EAAAj+B,WAAW/jB,KACX,EACAzG,EAAO6gC,UAAU,EAAG,IAGtB7gC,EAAOioC,UACLm1B,EAAAkC,eAAeC,UACf9W,EAAAj+B,WAAWhkB,KACX,EACAxG,EAAOygC,UAAU,IAKrB,IAAI++B,EAAQz9C,EAAQjS,gBACpB,IAAiB,IAAA6K,EAAApE,EAAAipD,EAAMrlD,UAAQS,EAAAD,EAAAlE,QAAAmE,EAAAlE,KAAAkE,EAAAD,EAAAlE,OAAE,EAAxB1B,EAAI6F,EAAAjZ,OACFyI,OAAOiQ,UACdha,KAAKo/D,YAAY1qD,GACjB1U,KAAKq/D,eAAe3qD,sGAKxB,IAAIlF,EAAwBkS,EAAQlS,sBACpC,GAAIsvD,EAAkBt3D,QAAUgI,EAAuB,CACrD,IAAIgD,EAAYqsD,EAAsBrsD,UAClC8sD,EAAU3/D,EAAOsoC,YACnB42B,EAAsB3tD,aACtBlR,KAAKu/D,mBACH/sD,EAAUiH,eACVjH,EAAUmH,WACVnH,EAAUuT,UAEZla,EAAAq+C,mBAAmB2U,EAAsBh6C,kBACzCllB,EAAOukC,YAAY,KAAM46B,IAE3BD,EAAsBr4C,SAAS7mB,EAAQ2/D,GAClC9vD,GAAuB7P,EAAO4rC,SAAS+zB,GAI9C,IAAIj4C,EAAernB,KAAKqnB,aACxBA,EAAem4C,UAAUn4C,EAAcpU,EAAQI,UAAUuG,UACzD5Z,KAAKqnB,aAAeA,EACpB1nB,EAAOooC,aAAag1B,EAAAkC,eAAeC,WAC/BjsD,EAAQc,SACVpU,EAAOioC,UACLm1B,EAAAkC,eAAeC,UACf9W,EAAAj+B,WAAW/jB,KACX,EACAzG,EAAO6gC,UAAUsK,QAAQzjB,GAAe0jB,SAAS1jB,KAGnD1nB,EAAOioC,UACLm1B,EAAAkC,eAAeC,UACf9W,EAAAj+B,WAAWhkB,KACX,EACAxG,EAAOygC,UAAU0K,QAAQzjB,KAK7B,IAAIo4C,EAAiBxsD,EAAQW,WAAU,KAAqBX,EAAQkqD,aAAe,EACnFx9D,EAAO0qC,UACLrqC,KAAKiT,QAAQgB,YAAiCjU,KAAKi+D,eAAez2D,OAC9DsjC,QAAQ40B,UAAUF,UAAUn4C,EAAc,OAAUvT,QAAQ,GAAI,KAChE,EACJ2rD,EAAiBxsD,EAAQkqD,aAAe/U,EAAAxpB,OAAO0S,iBAC/CtxC,KAAKi+D,eACLhrD,EAAQ6V,OACR,SACA22C,GAIExsD,EAAQiqD,cAAcv9D,EAAOoqC,gBAAgB,IAAK,MAAO,SAAU01B,GAGvE,IAAItB,EAAgBn+D,KAAKm+D,cACzBx+D,EAAOyrC,iBAAiB+yB,EAAc32D,OAAQ,WAAY22D,GAC1Dx+D,EAAOopC,eAAe,IAAK,SAC3BppC,EAAOsoC,YAAY,OAAQjoC,KAAKu/D,mBAAmB,KAAM1zD,EAAAsH,KAAKG,MAAO,KAAM3T,EAAOukC,YAAY,KAAM,KAGhGjxB,EAAQmqD,aAAaz9D,EAAOkqC,eAAe,IAAK,MAAO,aAG3D,IAAiB,IAAA5uB,EAAA/E,EAAAlW,KAAK0hB,QAAQjS,YAAYqK,UAAQoB,EAAAD,EAAA7E,QAAA8E,EAAA7E,KAAA6E,EAAAD,EAAA7E,OAAE,CAA/C,IAAI1B,KAAIwG,EAAA5Z,OACFyI,OAAOiQ,SAASha,KAAK2/D,kBAAkBjrD,qGAMlD,OAFI1U,KAAKs+D,mBAAmBvB,EAAA6C,oBAAoB5/D,MAEzCL,GAIDk+D,EAAA57D,UAAA09D,kBAAR,SAA0BjrD,WACpBsG,EAAUtG,EAAKhV,QACnB,GAAIsb,MAAS,IAA2B,IAAA6kD,EAAA3pD,EAAA8E,GAAO8kD,EAAAD,EAAAzpD,QAAA0pD,EAAAzpD,KAAAypD,EAAAD,EAAAzpD,OAAA,CAAzB,IAAAsM,EAAAnM,EAAAupD,EAAAx+D,MAAA,GAACV,EAAA8hB,EAAA,GAAMlI,EAAAkI,EAAA,GAAoB1iB,KAAK+/D,iBAAiBn/D,EAAM4Z,qGAC7E,IAAIhE,EAAc9B,EAAK8B,YACvB,GAAIA,EACF,IAAK,IAAInW,EAAI,EAAGoU,EAAI+B,EAAYhP,OAAQnH,EAAIoU,IAAKpU,EAAGL,KAAK2/D,kBAAkBnpD,EAAYnW,KAKnFw9D,EAAA57D,UAAA89D,iBAAR,SAAyBn/D,EAAcmW,EAAkBipD,uBACvD,YADuD,IAAAA,MAAA,IAC/CjpD,EAAQjC,MAGd,KAAKqzC,EAAAl5C,YAAYsK,mBAEf,GADIuK,EAAgC/M,EAAS+M,cAE3C,IAAqB,IAAA7I,EAAA/E,EAAA4N,EAAUhK,UAAQoB,EAAAD,EAAA7E,QAAA8E,EAAA7E,KAAA6E,EAAAD,EAAA7E,OAAE,CAApC,IAAIoO,EAAQtJ,EAAA5Z,MACX2+D,EAAer/D,EACnB,GAAI4jB,EAAShJ,GAAG7P,EAAAtJ,YAAYqR,SAE1BusD,IADIC,EAAW17C,EAAStT,cACCtG,UAAUs1D,EAAS1Z,YAAY,MAE1DxmD,KAAK+/D,iBAAiBE,EAAcz7C,EAAUw7C,qGAGlD,MAEF,KAAK7X,EAAAl5C,YAAYqJ,gBACf,IAAIwL,EACJ,GADIA,EAA6B/M,EAAS+M,cAExC,IAAqB,IAAAxN,EAAAJ,EAAA4N,EAAUhK,UAAQxC,EAAAhB,EAAAF,QAAAkB,EAAAjB,KAAAiB,EAAAhB,EAAAF,OAAE,CAApC,IAGG8pD,EAHC17C,EAAQlN,EAAAhW,MACX2+D,EAAer/D,EACnB,GAAI4jB,EAAShJ,GAAG7P,EAAAtJ,YAAYqR,SAE1BusD,IADIC,EAAW17C,EAAStT,cACCtG,UAAUs1D,EAAS1Z,YAAY,MAE1DxmD,KAAK+/D,iBAAiBE,EAAcz7C,EAAUw7C,qGAGlD,MAEF,KAAK7X,EAAAl5C,YAAYwL,mBACf,IAAI5Z,EAA6BkW,EAAS2D,gBACtCylD,EAA6BppD,EAAS4D,gBACtC9Z,GAAQb,KAAK+/D,iBAAiBp0D,EAAAnJ,cAAgB5B,EAAMC,EAAQm/D,GAC5DG,GAAQngE,KAAK+/D,iBAAiBp0D,EAAAlJ,cAAgB7B,EAAMu/D,EAAQH,GAChE,MAIF,KAAK7X,EAAAl5C,YAAYiO,OACDnG,EAAQyE,GAAG7P,EAAAtJ,YAAYsZ,QAAU5E,EAAQyE,GAAG7P,EAAAtJ,YAAY8b,OAASxS,EAAAtJ,YAAYgc,WAC1Ere,KAAKiT,QAAQW,WAAU,GAMtC5T,KAAKL,OAAOwpC,gBAAgBpyB,EAAQ7F,aAAc8uD,EAASp/D,GAL3DZ,KAAKwL,MACHI,EAAA/C,eAAeu3D,+BACNrpD,EAAS4B,eAAexP,OAKrC,MAEF,KAAKg/C,EAAAl5C,YAAYuU,UACEzM,EAAS0M,aAAgBzjB,KAAKiT,QAAQW,WAAU,GAM/D5T,KAAKL,OAAOwpC,gBAAgBpyB,EAAQ7F,aAAc8uD,EAASp/D,GAL3DZ,KAAKwL,MACHI,EAAA/C,eAAeu3D,+BACHrpD,EAAS4B,eAAexP,OAKxC,MAEF,KAAKg/C,EAAAl5C,YAAY4L,SACf,IACIrI,GADAgS,EAAqBzN,GACAvE,UACrBA,EAAUg4C,mBAAqBh4C,EAAUiH,eAAejS,SAE1Dgd,EAAWxkB,KAAKqgE,iBAAiB77C,GACjCxkB,KAAKsgE,iBAEH97C,EAAShJ,GAAG7P,EAAAtJ,YAAYk+D,WAAWvgE,KAAKL,OAAO+oC,kBAAkBlkB,EAAStT,aAAc8uD,EAASp/D,GACrG,MAEF,KAAKunD,EAAAl5C,YAAY2L,UACX/Z,EAAoBkW,EAASyQ,iBACrBxnB,KAAK+/D,iBAAiBp0D,EAAAnJ,cAAgB5B,EAAMC,EAAQm/D,IAC5DG,EAAoBppD,EAAS0Q,iBACrBznB,KAAK+/D,iBAAiBp0D,EAAAlJ,cAAgB7B,EAAMu/D,EAAQH,GAChE,MAEF,KAAK7X,EAAAl5C,YAAY6L,MACf,IAAInb,EAASK,KAAKL,OACdwb,EAAepE,EAASoE,KACxBqlD,EAAarlD,EAAK2uC,eAClBprB,EAAiB3nB,EAASsQ,aAC1BhU,EAAYrT,KAAKiT,QAAQI,UACzBotD,EAAiBzgE,KAAKiT,QAAQwtD,eAG9BC,EAAaV,EAASr0D,EAAAnJ,cAAgB5B,EAgB1C,GAfAjB,EAAOsoC,YACLy4B,EACA1gE,KAAKu/D,mBAAmB,KAAMpkD,EAAM9H,GACpC,KACA1T,EAAO2iC,WACLnnB,EAAKvB,SACLuB,EAAKK,GAAE,GACP7b,EAAOqiC,eAAe,EAAGy+B,GACzBD,EACA9hC,IAGJ/+B,EAAO+oC,kBAAkBg4B,EAAYA,IAGhC3pD,EAAQyE,GAAG7P,EAAAtJ,YAAYgc,UAAW,CACrC,IAAIsiD,EAAaX,EAASr0D,EAAAlJ,cAAgB7B,EAC1CjB,EAAOsoC,YACL04B,EACA3gE,KAAKu/D,mBAAmB,CAAEpkD,GAAQtP,EAAAsH,KAAKG,KAAMD,GAC7C,KACA1T,EAAOgjC,YACLxnB,EAAKvB,SACLja,EAAOqiC,eAAe,EAAGy+B,GACzB9gE,EAAOqiC,eAAe,EAAGw+B,GACzBA,EACA9hC,IAGJ/+B,EAAO+oC,kBAAkBi4B,EAAYA,GAEvC,MAIF,KAAKxY,EAAAl5C,YAAY+T,KACjB,KAAKmlC,EAAAl5C,YAAY8L,MACjB,KAAKotC,EAAAl5C,YAAY8T,UACjB,KAAKolC,EAAAl5C,YAAYiS,KACjB,KAAKinC,EAAAl5C,YAAY2T,eAAgB,MAEjC,QAASpa,QAAO,GAIlB,IAAIwS,EAAUjE,EAAQiE,QACtB,GAAIA,EAAS,CACX,IAAI4lD,EAAYZ,EAASp/D,GAAQmW,EAAQjC,MAAQqzC,EAAAl5C,YAAY8L,MACzDpP,EAAAjJ,mBACAiJ,EAAAhJ,kBAEJ,GACEoU,EAAQjC,MAAQqzC,EAAAl5C,YAAY8T,WAC5BhM,EAAQjC,MAAQqzC,EAAAl5C,YAAYiS,SAE5B,IAAmB,IAAAzJ,EAAAvB,EAAA8E,EAAQlB,UAAQX,EAAA1B,EAAArB,QAAA+C,EAAA9C,KAAA8C,EAAA1B,EAAArB,OAAE,EAA5BoE,EAAMrB,EAAA7X,OACDka,GAAG7P,EAAAtJ,YAAYoR,SAC3BzT,KAAK+/D,iBAAiBvlD,EAAO5Z,KAAM4Z,EAAQomD,8GAG7C,IAAmB,IAAA/mD,EAAA3D,EAAA8E,EAAQlB,UAAQC,EAAAF,EAAAzD,QAAA2D,EAAA1D,KAAA0D,EAAAF,EAAAzD,OAAE,CAAhC,IAAIoE,KAAMT,EAAAzY,OACFka,GAAG7P,EAAAtJ,YAAY0qD,UAC1B/sD,KAAK+/D,iBAAiBvlD,EAAO5Z,KAAM4Z,EAAQomD,wGASnD/C,EAAA57D,UAAA4+D,eAAA,SAAe9pD,EAAkB+pD,GAC/B,YAD+B,IAAAA,OAAA,GACvB/pD,EAAQjC,MACd,KAAKqzC,EAAAl5C,YAAYiO,OACfld,KAAK+gE,cAAsBhqD,GAC3B,MAEF,KAAKoxC,EAAAl5C,YAAY+T,KACfhjB,KAAKghE,YAAkBjqD,GACvB,MAEF,KAAKoxC,EAAAl5C,YAAYsK,mBACVxC,EAAQyE,GAAG7P,EAAAtJ,YAAYqR,UAC1B1T,KAAKihE,kCAAqDlqD,EAAS,IAErE,MAEF,KAAKoxC,EAAAl5C,YAAYqJ,gBACVvB,EAAQyE,GAAG7P,EAAAtJ,YAAYqR,UAC1B1T,KAAKkhE,+BAA+CnqD,EAAS,IAE/D,MAEF,KAAKoxC,EAAAl5C,YAAYwL,mBACf,IAAIC,EAAsC3D,EAAS2D,gBAC/CA,GACF1a,KAAKihE,kCAAkCvmD,EAAiB,IAE1D,IAAIC,EAAsC5D,EAAS4D,gBAC/CA,GACF3a,KAAKihE,kCAAkCtmD,EAAiB,IAE1D,MAEF,KAAKwtC,EAAAl5C,YAAY8T,UACjB,KAAKolC,EAAAl5C,YAAY2T,eACjB,KAAKulC,EAAAl5C,YAAYuU,UAAW,MAC5B,QAAShb,QAAO,EAAO2/C,EAAAl5C,YAAY8H,EAAQjC,OAEzCgsD,GAAgB9gE,KAAK8gE,eAAe/pD,IAI1C8mD,EAAA57D,UAAA6+D,eAAA,SAAe/pD,WACTiE,EAAUjE,EAAQiE,QACtB,GAAIA,MAAS,IAAoB,IAAA0H,EAAAxM,EAAA8E,EAAQlB,UAAQQ,EAAAoI,EAAAtM,QAAAkE,EAAAjE,KAAAiE,EAAAoI,EAAAtM,OAAA,CAA/B,IAAI+qD,EAAO7mD,EAAAhZ,MAAsBtB,KAAK6gE,eAAeM,uGAIzEtD,EAAA57D,UAAAo9D,eAAA,SAAe3qD,eACThV,EAAUgV,EAAKhV,QACnB,GAAIA,MAAS,IAAoB,IAAA4a,EAAApE,EAAAxW,EAAQoa,UAAQS,EAAAD,EAAAlE,QAAAmE,EAAAlE,KAAAkE,EAAAD,EAAAlE,OAAA,CAA/B,IAAIW,EAAOwD,EAAAjZ,MAAsBtB,KAAK6gE,eAAe9pD,qGACvE,IAAIP,EAAc9B,EAAK8B,YACvB,GAAIA,MAAa,IAAuB,IAAA4qD,EAAAlrD,EAAAM,GAAW6qD,EAAAD,EAAAhrD,QAAAirD,EAAAhrD,KAAAgrD,EAAAD,EAAAhrD,OAAA,CAA7B,IAAIK,EAAU4qD,EAAA//D,MAAiBtB,KAAKo/D,YAAY3oD,uGAMxEonD,EAAA57D,UAAAq/D,kBAAA,SAAkBC,EAAwC9F,GACxD,IAAI/mD,EAEA8sD,EADA/xD,EAAczP,KAAK0hB,QAAQjS,YAE/B,GAAIA,EAAYsD,IAAIwuD,GAClB7sD,EAAOjF,EAAYvO,IAAIqgE,OAClB,KAAI9xD,EAAYsD,IAAIyuD,EAAgBD,EAAiC51D,EAAA5I,cAO1E,YAJA/C,KAAKwL,MACHI,EAAA/C,eAAegO,iBACf4kD,EAAWtyD,MAAOo4D,GAJpB7sD,EAAOjF,EAAYvO,IAAIsgE,GAQzBxhE,KAAKo/D,YAAY1qD,IAInBmpD,EAAA57D,UAAAm9D,YAAA,SAAY1qD,GACV,IAAIA,EAAK8G,GAAG7P,EAAAtJ,YAAYk+D,UAAxB,CACA7rD,EAAKzD,IAAItF,EAAAtJ,YAAYk+D,UAGrB,IAAIp+C,EAAgBzN,EAAKyN,cACrBs/C,EAAezhE,KAAKg/D,YACpBF,EAAoB,IAAI93D,MAC5BhH,KAAKg/D,YAAcF,EAGnB,IAAI4C,EAAe1hE,KAAK++D,YACxB/+D,KAAK++D,YAAc58C,EAAcgE,KACjC,IAAK,IAAIxR,EAAaD,EAAK3K,OAAO4K,WAAYtU,EAAI,EAAGoU,EAAIE,EAAWnN,OAAQnH,EAAIoU,IAAKpU,EACnFL,KAAK2hE,yBAAyBhtD,EAAWtU,GAAIy+D,GAM/C,GAJA9+D,KAAK++D,YAAc2C,EACnB1hE,KAAKg/D,YAAcyC,EAGf3C,EAAkBt3D,OAAQ,CAC5B,IAAI7H,EAASK,KAAKL,OACd4mB,EAASpE,EAAcyC,cACvBg9C,EAAYr7C,EAAO/e,OACnB0gC,EAAW,IAAIlhC,MAAkB46D,GACrC,IAASvhE,EAAI,EAAGA,EAAIuhE,IAAavhE,EAAG6nC,EAAS7nC,GAAKkmB,EAAOlmB,GAAG8a,KAAK2uC,eACjEnqD,EAAOsoC,YACL9lB,EAAcjR,aACdlR,KAAKu/D,mBAAmBp9C,EAAc3P,UAAUiH,eAAgB0I,EAAc3P,UAAUmH,YACxFuuB,EACA42B,EAAkBt3D,OAAS,EACvB7H,EAAOukC,YAAY,KAAM46B,GACzBA,EAAkB,IAExB2C,EAAa52D,KACXlL,EAAOomC,WAAW5jB,EAAcjR,aAAc,KAAMk3C,EAAAj+B,WAAWka,UAOrEw5B,EAAA57D,UAAA8+D,cAAA,SAActlD,GACZ,GAAIA,EAAOD,GAAG7P,EAAAtJ,YAAYk+D,UAAW,OAAO,EAC5C9kD,EAAOxK,IAAItF,EAAAtJ,YAAYk+D,UAEvB,IAAI5gE,EAASK,KAAKL,OACdkiE,EAA0B,EAC1BzK,EAAW37C,EAAO27C,SAClB0K,EAAkBrmD,EAAOqmD,gBAE7B,IAAKrmD,EAAOD,GAAG7P,EAAAtJ,YAAY6f,UAGzB,GAAIk1C,EAAU,CACZ,IAAI2K,EAAe/hE,KAAKmR,SAASulD,YAAYU,EAAU37C,EAAOhJ,QAC9D,IAAKsvD,EAAc,OAAO,EAC1B,GAAIA,GAAgBl2D,EAAAsH,KAAKG,KAKvB,OAJAtT,KAAKwL,MACHI,EAAA/C,eAAequD,cACfE,EAASjuD,QAEJ,EAETsS,EAAOL,QAAQ2mD,OAGV,KAAID,EA0BT,OAJA9hE,KAAKwL,MACHI,EAAA/C,eAAequD,cACfz7C,EAAO9C,eAAexP,MAAMozD,QAEvB,EAzBP,IAAImF,EAAe1hE,KAAK++D,YAUxB,GATItjD,EAAOjD,aAAa2vC,EAAAj5C,eAAeqP,QACrCve,KAAK++D,YAActjD,EAAO/G,KAAKyN,cAAcgE,MAE/C07C,EAAW7hE,KAAKgiE,4BACdF,EACAj2D,EAAAsH,KAAKG,KAAI,GAGXtT,KAAK++D,YAAc2C,EACf1hE,KAAKg+D,aAAenyD,EAAAsH,KAAKG,KAK3B,OAJAtT,KAAKwL,MACHI,EAAA/C,eAAeo5D,mCACfH,EAAgB34D,MAAOnJ,KAAKg+D,YAAYl0D,WAAY,WAE/C,EAET2R,EAAOL,QAAQpb,KAAKg+D,aAaxB,GAAIviD,EAAOD,GAAG7P,EAAAtJ,YAAY0e,UAAYtF,EAAOjD,aAAa2vC,EAAAj5C,eAAeyE,SAAU,OAAO,EAE1F,IAAI6sD,EAAa/kD,EAAON,KAAK2uC,eACzBoY,EAAqBzmD,EAAOD,GAAG7P,EAAAtJ,YAAYsZ,QAAUF,EAAOD,GAAG7P,EAAAtJ,YAAY8b,OAASxS,EAAAtJ,YAAYgc,UAGpG,GAAI5C,EAAOD,GAAG7P,EAAAtJ,YAAY0e,SAGxB,OAAImhD,GAAsBliE,KAAKiT,QAAQW,WAAU,IAC/C6H,EAAOxK,IAAItF,EAAAtJ,YAAY8/D,eACvBC,EAAiB3mD,EAAQA,EAAO3I,aAChCnT,EAAOuqC,gBACLzuB,EAAOvK,aACPwsD,EACAC,EACA6C,GAEF/kD,EAAOxK,IAAItF,EAAAtJ,YAAYk+D,WAChB,IAIPvgE,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACf7B,EAAO3I,YAAY3J,QAGhB,GAKT,IAAIk5D,GAAoB,EAGxB,GAAIP,EAAiB,CACnB,IAAKD,EAAU,CACTH,EAAe1hE,KAAK++D,YACpBtjD,EAAOjD,aAAa2vC,EAAAj5C,eAAeqP,QACrCve,KAAK++D,YAActjD,EAAO/G,KAAKyN,cAAcgE,MAE/C07C,EAAW7hE,KAAKsiE,kBACdR,EACArmD,EAAON,KAAI,KAIbnb,KAAK++D,YAAc2C,EAmBrB,GAhBItZ,EAAA7W,gBAAgBswB,IAAazZ,EAAAh+B,aAAailB,QACxC6yB,GACFL,EAAWliE,EAAOmtC,qBAAqB+0B,GACnCzZ,EAAA7W,gBAAgBswB,IAAazZ,EAAAh+B,aAAailB,QAC5CrvC,KAAKsL,QACHM,EAAA/C,eAAe05D,4DACfT,EAAgB34D,OAElBk5D,GAAoB,IAGtBA,GAAoB,GAKpB5mD,EAAOjD,aAAa2vC,EAAAj5C,eAAeoP,UAChC+jD,EAAmB,CAGtB,OAFA75D,OAAO4/C,EAAA7W,gBAAgBswB,IAAazZ,EAAAh+B,aAAailB,OAClC+Y,EAAA5W,kBAAkBqwB,IAE/B,KAAKzZ,EAAAj+B,WAAWhkB,IACdsV,EAAO0H,kBAAiB,EACxB1H,EAAO4H,qBAAuBvP,QAAQs0C,EAAA3W,iBAAiBowB,GAAW,GAClE,MAEF,KAAKzZ,EAAAj+B,WAAW/jB,IACdqV,EAAO0H,kBAAiB,EACxB1H,EAAO4H,qBAAuBvP,QAC5Bs0C,EAAA1W,oBAAoBmwB,GACpBzZ,EAAAzW,qBAAqBkwB,IAEvB,MAEF,KAAKzZ,EAAAj+B,WAAWvjB,IACd6U,EAAO0H,kBAAiB,EACxB1H,EAAO8H,mBAAqB6kC,EAAAxW,iBAAiBiwB,GAC7C,MAEF,KAAKzZ,EAAAj+B,WAAWtjB,IACd4U,EAAO0H,kBAAiB,EACxB1H,EAAO8H,mBAAqB6kC,EAAAvW,iBAAiBgwB,GAC7C,MAEF,QAEE,OADAr5D,QAAO,IACA,EAGXiT,EAAOxK,IAAItF,EAAAtJ,YAAYihB,eAM3Bu+C,EAAWpmD,EAAON,KAAK4uC,aAAapqD,GAGtC,IAAIuR,EAAeuK,EAAOvK,aAe1B,OAbImxD,GACE5mD,EAAOjD,aAAa2vC,EAAAj5C,eAAeoP,SACrCte,KAAKwL,MACHI,EAAA/C,eAAekU,8BACftB,EAAO9C,eAAexP,MAAO,UAGjCxJ,EAAOioC,UAAU12B,EAAcsvD,GAAY,EAAM/kD,EAAON,KAAK4uC,aAAapqD,IAC1EK,KAAKg/D,YAAYn0D,KAAKlL,EAAOqkC,gBAAgB9yB,EAAc2wD,KAEjDpmD,EAAOjD,aAAa2vC,EAAAj5C,eAAeoP,SAC7C3e,EAAOioC,UAAU12B,EAAcsvD,GAAa0B,EAAoBL,IAE3D,GAKThE,EAAA57D,UAAA++D,YAAA,SAAYjqD,WACV,GAAIA,EAAQyE,GAAG7P,EAAAtJ,YAAYk+D,UAAW,OAAO,EAC7CxpD,EAAQ9F,IAAItF,EAAAtJ,YAAYk+D,UAExB,IAAI5gE,EAASK,KAAKL,OAClBK,KAAK+9D,YAAchnD,EACnB,IAAIyrD,EAAkC,KAClCC,GAAqB,EACrBC,EAAW3rD,EAAQyE,GAAG7P,EAAAtJ,YAAYsZ,QAAU5E,EAAQyB,aAAa2vC,EAAAj5C,eAAeoP,QAEpF,GAAIvH,EAAQiE,YACV,IAAmB,IAAA0H,EAAAxM,EAAAa,EAAQiE,QAAQlB,UAAQQ,EAAAoI,EAAAtM,QAAAkE,EAAAjE,KAAAiE,EAAAoI,EAAAtM,OAAE,CAAxC,IAAIoE,EAAMF,EAAAhZ,MACb,GAAIkZ,EAAO1F,MAAQqzC,EAAAl5C,YAAYuU,UAA/B,CACA,IAAIm/C,GAAc,EACd/qB,EAAiBp9B,EACjBooD,EAAYhrB,EAAIgrB,UACpBhrB,EAAI3mC,IAAItF,EAAAtJ,YAAYk+D,UACpB,IAAImB,EAAe1hE,KAAK++D,YACpBhoD,EAAQyB,aAAa2vC,EAAAj5C,eAAeqP,QACtCve,KAAK++D,YAAchoD,EAAQrC,KAAKyN,cAAcgE,MAEhD,IAAI07C,OAAQ,EACRe,GACFf,EAAW7hE,KAAKsiE,kBACdM,EACA/2D,EAAAsH,KAAK/P,IAAG,KAINglD,EAAA7W,gBAAgBswB,IAAazZ,EAAAh+B,aAAailB,QAC5CwyB,EAAWliE,EAAOmtC,qBAAqB+0B,GACnCzZ,EAAA7W,gBAAgBswB,IAAazZ,EAAAh+B,aAAailB,QACxCt4B,EAAQyE,GAAG7P,EAAAtJ,YAAYsZ,QACzB3b,KAAKwL,MACHI,EAAA/C,eAAeg6D,0EACfD,EAAUz5D,OAGdw5D,GAAc,KAGQ,MAAjBH,EACTX,EAAWliE,EAAOygC,UAAU,IAExBqiC,GACFziE,KAAKwL,MACHI,EAAA/C,eAAei6D,kCACHtoD,EAAQ7B,eAAexP,MAAMozD,OAG7CsF,EAAWliE,EAAO6hC,aAAa4mB,EAAA51B,SAASuwC,OACtCpjE,EAAOyiC,gBAAgBogC,EAActxD,aAAck3C,EAAAj+B,WAAWhkB,KAC9DxG,EAAOygC,UAAU,IAEnByhC,EAAWliE,EAAOmtC,qBAAqB+0B,GACnCzZ,EAAA7W,gBAAgBswB,IAAazZ,EAAAh+B,aAAailB,QACxCt4B,EAAQyE,GAAG7P,EAAAtJ,YAAYsZ,QACzB3b,KAAKwL,MACHI,EAAA/C,eAAeg6D,0EACfroD,EAAO1H,YAAY3J,OAGvBw5D,GAAc,IAGlB3iE,KAAK++D,YAAc2C,EACfiB,GACFhjE,EAAOioC,UAAUgQ,EAAI1mC,aAAck3C,EAAAj+B,WAAWhkB,KAAK,EAAMxG,EAAOygC,UAAU,IAC1EpgC,KAAKg/D,YAAYn0D,KACflL,EAAOqkC,gBAAgB4T,EAAI1mC,aAAc2wD,IAE3CY,GAAqB,IAEjBC,GACF9qB,EAAIh8B,wBAAwB9H,QAAQs0C,EAAA3W,iBAAiBowB,IAAYh2D,EAAAsH,KAAK/P,KAClEw0C,EAAIp8B,GAAG7P,EAAAtJ,YAAY+X,gBACrBza,EAAOioC,UAAUgQ,EAAI1mC,aAAck3C,EAAAj+B,WAAWhkB,KAAK,EAAO07D,IAG5DliE,EAAOioC,UAAUgQ,EAAI1mC,aAAck3C,EAAAj+B,WAAWhkB,KAAK,EAAO07D,GAE5DjqB,EAAIn0B,aAAc,EAClBg/C,GAAqB,GAEvBD,EAA2B5qB,qGAI/B,OADA53C,KAAK+9D,YAAc,MACZ,GAMTF,EAAA57D,UAAAg/D,kCAAA,SACEh/D,EACA8lB,EACArD,EACAuzC,GAEA,QAHA,IAAAvzC,MAA4Czc,EAAAyvD,gBAC5C,IAAAO,MAAA,MAEIh2D,EAAUuW,aAAa2vC,EAAAj5C,eAAeyE,SAAU,OAAO,KAC3D,IAAI6Q,EAAWxkB,KAAKmR,SAASypD,iCAC3B34D,EACA8lB,EACA9lB,EAAUwQ,OACViS,EACAuzC,GAAyBh2D,EAAU6Q,aAErC,OAAK0R,GACAxkB,KAAKgjE,gBAAgBx+C,GACnBA,EAFe,MAMxBq5C,EAAA57D,UAAAs9D,mBAAA,SACE9lD,EACAE,EACAoM,QAAA,IAAAA,MAAA,MAEA,IACI4Z,EADAqrB,EAAgBvxC,EAAiBA,EAAejS,OAAS,EAEzDoc,EAAQ,EAQZ,GAPImC,IACF4Z,EAAa,IAAI34B,MAAM,EAAIgkD,IAChB,GAAKjlC,EAAS+jC,eACzBlmC,EAAQ,GAER+b,EAAa,IAAI34B,MAAMgkD,GAErBvxC,EACF,IAAK,IAAIpZ,EAAI,EAAGA,EAAI2qD,IAAiB3qD,IAAKujB,EACxC+b,EAAW/b,GAASnK,EAAepZ,GAAGypD,eAG1C,IAAImZ,EAAatpD,EAAWmwC,eACxBnqD,EAASK,KAAKL,OACd6oC,EAAU7oC,EAAOqgC,2BAA2BijC,EAAYtjC,GAC5D,IAAK6I,EAAS,CACZ,IAAI5nC,EAAOiL,EAAAuW,UAAUipC,oBAAoB5xC,EAAgBE,EAAYoM,GACrEyiB,EAAU7oC,EAAO8/B,gBAAgB7+B,EAAMqiE,EAAYtjC,GAErD,OAAO6I,GAIDq1B,EAAA57D,UAAAihE,oBAAR,SAA4B1+C,GAC1B,IAMI2+C,EANAxjE,EAASK,KAAKL,OACdyjE,EAAW56D,OAAOgc,EAASviB,UAAUmhE,UACrCzpD,EAAa6K,EAAShS,UAAUmH,WAChCwM,EAAOnmB,KAAK++D,YAIhB,GAAIqE,EAAStuD,MAAQhJ,EAAAiJ,SAAS8xC,MAC5Bsc,EAAQnjE,KAAKqjE,kBAAmCD,EAAUzuD,YAAY,OACjE,CAELnM,OAAO46D,EAAStuD,MAAQhJ,EAAAiJ,SAASqyC,YAGjC5+C,OAAOgc,EAASviB,UAAUgiB,WAG1Bzb,QAAQgc,EAAS3G,MAAMlS,EAAAtJ,YAAYuc,YAAcjT,EAAAtJ,YAAYyb,IAAMnS,EAAAtJ,YAAY0b,IAAMpS,EAAAtJ,YAAYihE,OAEjG,IAAIzoB,EAAO76C,KAAKsiE,kBACQc,EAAUz+B,WAChChrB,EAAU,KAIZwM,EAAKlV,IAAG,GACHkV,EAAKo9C,YAAY1oB,EAAMlhC,IAAawM,EAAKlV,IAAG,GACjDkyD,EAAQ,CAAEtoB,GAqBZ,GAjBIr2B,EAASviB,WAAajC,KAAK0hB,QAAQlS,wBACrC7P,EAAOioC,UAAUg2B,EAAgB4F,QAASpb,EAAAj+B,WAAWhkB,KAAK,EAAMxG,EAAOygC,UAAU,IACjF+iC,EAAMM,QACJ9jE,EAAOolC,SACLplC,EAAOyhC,YACLgnB,EAAAl7B,QAAQw2C,OACR/jE,EAAOyiC,gBAAgBw7B,EAAgB4F,QAASpb,EAAAj+B,WAAWhkB,MAE7DxG,EAAOukC,YAAY,KAAM,CACvBvkC,EAAOomC,WAAW,QAAS,KAAMqiB,EAAAj+B,WAAWka,MAC5C1kC,EAAOqkC,gBAAgB45B,EAAgB4F,QAAS7jE,EAAOygC,UAAU,SAOrE5b,EAAShJ,GAAG7P,EAAAtJ,YAAYuc,aAAc,CACxC,IAAI6hD,EAAiBzgE,KAAKiT,QAAQwtD,eAClCj4D,OAAOgc,EAAShJ,GAAG7P,EAAAtJ,YAAY4e,WAC/B,IAAIkD,EAAgB3b,OAAOgc,EAAS/R,QAEpC,GAF6CjK,OAAO2b,EAAcrP,MAAQqzC,EAAAl5C,YAAY8L,QAEjFoL,EAAKtI,MAAK,IAA6B,CAC1C,IAAI8lD,EAAiBx9C,EAAK3K,GAAE,MACxBhT,OAAO2d,EAAKo0C,YAAY5uD,EAAA3I,cAAckC,QAAQ0e,MAC9C,EAGCuC,EAAK3K,GAAE,MAMV2nD,EAAMt4D,KACJlL,EAAOolC,SACLplC,EAAOyhC,YAAYq/B,GAAkBrY,EAAAj+B,WAAW/jB,IAAMgiD,EAAAl7B,QAAQ02C,OAASxb,EAAAl7B,QAAQw2C,OAC7E/jE,EAAOqiC,eAAe2hC,EAAgBlD,IAExC9gE,EAAOmkC,eAAe6/B,EACpB3jE,KAAK6jE,eAAsB1/C,MAIjCnkB,KAAK8jE,wBAA+B3/C,EAAeg/C,IAIrDA,EAAMt4D,KACJlL,EAAOqiC,eAAe2hC,EAAgBlD,IAK9Bt8C,EAAe6D,OAAS7B,EAAK3K,GAAE,KACzCxb,KAAKwL,MACHI,EAAA/C,eAAek7D,2DACfv/C,EAASviB,UAAU6Q,YAAY3J,YAK1BwQ,GAAc9N,EAAAsH,KAAKG,MAAS6S,EAAK3K,GAAE,IAC5Cxb,KAAKwL,MACHI,EAAA/C,eAAem7D,+DACfx/C,EAASviB,UAAUo5D,cAAc1hD,WAAWxQ,OAIhD,OAAOg6D,GAITtF,EAAA57D,UAAA+gE,gBAAA,SAAgBx+C,GACd,GAAIA,EAAShJ,GAAG7P,EAAAtJ,YAAYk+D,UAAW,OAAO,EAC9C/3D,SAASgc,EAAShJ,GAAG7P,EAAAtJ,YAAY0e,UAAYyD,EAAShM,aAAa2vC,EAAAj5C,eAAeyE,WAClF6Q,EAASvT,IAAItF,EAAAtJ,YAAYk+D,UAEzB,IAKIjB,EALA3/D,EAASK,KAAKL,OACd6S,EAAYgS,EAAShS,UACrB4wD,EAAW5+C,EAASviB,UAAUmhE,SAE9B56B,EAAUxoC,KAAKu/D,mBAAmB/sD,EAAUiH,eAAgBjH,EAAUmH,WAAYnH,EAAUuT,UAIhG,GAAIq9C,EAAU,CAWZ,GARI5+C,EAAShJ,GAAG7P,EAAAtJ,YAAY0e,UAC1B/gB,KAAKwL,MACHI,EAAA/C,eAAeo7D,yDACfz/C,EAAS7L,eAAexP,OAKxBqb,EAAShM,aAAa2vC,EAAAj5C,eAAe8R,UAAW,CAClD,IAAIkjD,EAAiB1/C,EAAS0/C,eAC1BxnD,EAAYlU,OAAOsD,EAAAuV,cAAcvV,EAAAe,cAAcmU,SAAUkjD,IAC7DlkE,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfZ,EAAUvT,OAKd,IAAIu4D,EAAe1hE,KAAK++D,YACxB/+D,KAAK++D,YAAcv6C,EAAS2B,KAC5B,IAAIg9C,EAAQnjE,KAAKkjE,oBAAoB1+C,GACrCxkB,KAAK++D,YAAc2C,EAGnBpC,EAAU3/D,EAAOsoC,YACfzjB,EAAStT,aACTs3B,EACA38B,EAAAq+C,mBAAmB1lC,EAASK,kBAC5Bs+C,EAAM37D,OACc,GAAhB27D,EAAM37D,OACJ27D,EAAM,GACNxjE,EAAOukC,YAAY,KAAMi/B,EAAO3+C,EAAShS,UAAUmH,WAAWmwC,gBAChEnqD,EAAOwlC,kBAKR3gB,EAAShJ,GAAG7P,EAAAtJ,YAAY0e,UAC3B/gB,KAAKwL,MACHI,EAAA/C,eAAes7D,gFACf3/C,EAAS7L,eAAexP,OAI5Bqb,EAASvT,IAAItF,EAAAtJ,YAAY8/D,eACzBC,EAAiB59C,EAAUA,EAAS1R,aAGpCwsD,EAAU3/D,EAAO4pC,kBACf/kB,EAAStT,aACTwsD,EACAC,EACAn1B,GAKJ,OADAhkB,EAASgC,SAAS7mB,EAAQ2/D,IACnB,GAKTzB,EAAA57D,UAAAi/D,+BAAA,SACEj/D,EACA8lB,EACArD,EACAuzC,QADA,IAAAvzC,MAA4Czc,EAAAyvD,gBAC5C,IAAAO,MAAA,MAEA,IAAIzzC,EAAWxkB,KAAKmR,SAASsmD,8BAC3Bx1D,EACA8lB,EACA9lB,EAAUwQ,OACViS,EACAuzC,GAAyBh2D,EAAU6Q,aAEhC0R,GACLxkB,KAAKokE,aAAa5/C,IAGpBq5C,EAAA57D,UAAAmiE,aAAA,SAAa5/C,eACX,GAAIA,EAAShJ,GAAG7P,EAAAtJ,YAAYk+D,UAAW,OAAO,EAC9C/7C,EAASvT,IAAItF,EAAAtJ,YAAYk+D,UACzB,IACI8D,EADY7/C,EAASviB,UACuB+Y,QAChD,GAAIqpD,MACF,IAAoB,IAAA/pD,EAAApE,EAAAmuD,EAAcvqD,UAAQS,EAAAD,EAAAlE,QAAAmE,EAAAlE,KAAAkE,EAAAD,EAAAlE,OAAE,CAC1C,QADOW,EAAOwD,EAAAjZ,OACEwT,MACd,KAAKqzC,EAAAl5C,YAAYiO,OACfld,KAAK+gE,cAAsBhqD,GAC3B,MAEF,KAAKoxC,EAAAl5C,YAAYsK,mBAEQxC,EAASyE,GAAG7P,EAAAtJ,YAAYqR,UAE7C1T,KAAKihE,kCACgBlqD,EACnB,GACA9O,EAAAyvD,UACoB3gD,EAAS4B,gBAGjC,MAEF,KAAKwvC,EAAAl5C,YAAYwL,oBACX5Z,EAA6BkW,EAAS2D,kBAExC1a,KAAKihE,kCACHpgE,EACA,GACAoH,EAAAyvD,UACA72D,EAAO8X,iBAGPwnD,EAA6BppD,EAAS4D,kBAExC3a,KAAKihE,kCACHd,EACA,GACAl4D,EAAAyvD,UACAyI,EAAOxnD,gBAGX,MAEF,KAAKwvC,EAAAl5C,YAAY2L,6GAKvB,IAAIgiD,EAAep4C,EAAS2D,oBACxBy0C,GAAc58D,KAAKgjE,gBAAgBpG,GACvC,IAAIviD,EAAkBmK,EAASxJ,QAC/B,GAAIX,MACF,IAAoB,IAAAY,EAAA/E,EAAAmE,EAAgBP,UAAQoB,EAAAD,EAAA7E,QAAA8E,EAAA7E,KAAA6E,EAAAD,EAAA7E,OAAE,CAAzC,IAAIW,EACP,QADOA,EAAOmE,EAAA5Z,OACEwT,MACd,KAAKqzC,EAAAl5C,YAAYsK,mBAEQxC,EAASyE,GAAG7P,EAAAtJ,YAAYqR,UAE7C1T,KAAKihE,kCACgBlqD,EACnB,GACA9O,EAAAyvD,QAAqBlzC,EAASE,yBACV3N,EAASjE,YAAYlS,MAG7C,MAEF,KAAKunD,EAAAl5C,YAAYiY,gBACfnQ,EAAQ9F,IAAItF,EAAAtJ,YAAYk+D,UACxB,MAEF,KAAKpY,EAAAl5C,YAAY2L,SACf,IAAI/Z,EAEAs/D,GAFAt/D,EAAoBkW,EAASyQ,iBACrBxnB,KAAKgjE,gBAAgBniE,IAC7Bs/D,EAAoBppD,EAAS0Q,iBACrBznB,KAAKgjE,gBAAgB7C,sGAMzC,OAAO,GAGTtC,EAAA57D,UAAAqiE,4BAAA,SACExxD,EACAiV,EACArD,EACAuzC,QADA,IAAAvzC,MAAA,WACA,IAAAuzC,MAAA,MAGAj4D,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfxK,EAAY3J,QAOhB00D,EAAA57D,UAAAsiE,iBAAA,SAAiB9lC,EAAoB+lC,QAAA,IAAAA,MAAA,GACnC,IAAIn9C,EAAem4C,UAAUx/D,KAAKqnB,aAAcm9C,GAC5C7lC,EAAUypB,EAAA5pB,cAAc78B,OAAO88B,EAAQpX,GAG3C,OAFArnB,KAAKi+D,eAAepzD,KAAK8zB,GACzB3+B,KAAKqnB,aAAeytC,QAAQztC,EAAcvT,QAAQ2qB,EAAOj3B,OAAQ,IAC1Dm3B,GAMTk/B,EAAA57D,UAAAwiE,yBAAA,SAAyBj5B,GAEvB,GADAhjC,OAAOgjC,EAAKhwB,GAAG7P,EAAAtJ,YAAYk+D,WACvB/0B,EAAKxmB,oBAAsB,EAC7B,OAAOwmB,EAAKxmB,mBAEd,IAAIm5C,EAAgBn+D,KAAKm+D,cACrBv6C,EAAQu6C,EAAc32D,OAO1B,OANKgkC,EAAKhwB,GAAG7P,EAAAtJ,YAAYqiE,aAAel5B,EAAKh5B,UAAUg4C,mBAAqBhf,EAAKh5B,UAAUiH,eAAejS,SAExGgkC,EAAOxrC,KAAKqgE,iBAAiB70B,IAE/B2yB,EAActzD,KAAK2gC,EAAKt6B,cACxBs6B,EAAKxmB,mBAAqBpB,EACnBA,GAKTi6C,EAAA57D,UAAA0/D,yBAAA,SAAyB9sD,EAAsBmP,GAC7C,OAAQnP,EAAUC,MAChB,KAAKhJ,EAAAiJ,SAASM,iBAEZ,IADA,IACShV,EAAI,EAAGoU,GADZkwD,EAAsC9vD,EAAWmG,SAChBxT,OAAQnH,EAAIoU,IAAKpU,EACpDL,KAAK2hE,yBAAyBgD,EAAiBtkE,GAAI2jB,GAErD,MAEF,KAAKlY,EAAAiJ,SAASQ,gBACZ,IAAIwB,EAAU/W,KAAK0hB,QAAQ7O,wBAAyCgC,GACpErM,OAAOuO,EAAQjC,MAAQqzC,EAAAl5C,YAAY+T,MAC9BjM,EAAQyB,aAAa2vC,EAAAj5C,eAAeqP,OAAOve,KAAKghE,YAAkBjqD,GACvE,MAEF,KAAKjL,EAAAiJ,SAASc,qBACZ,IAAI8uD,EACJ,IAAStkE,EAAI,EAAGoU,GADZkwD,EAA0C9vD,EAAWmG,SACpBxT,OAAQnH,EAAIoU,IAAKpU,EACpDL,KAAK2hE,yBAAyBgD,EAAiBtkE,GAAI2jB,GAErD,MAEF,KAAKlY,EAAAiJ,SAASI,SACZ,IAAIwL,EAAmC9L,EAAW8L,aAClD,IAAStgB,EAAI,EAAGoU,EAAIkM,EAAanZ,OAAQnH,EAAIoU,IAAKpU,EAAG,CAC/C0W,EAAU/W,KAAK0hB,QAAQ7O,wBAAwB8N,EAAatgB,IAChEmI,OAAOuO,EAAQjC,MAAQqzC,EAAAl5C,YAAYiO,QAEhCnG,EAAQyE,GAAG7P,EAAAtJ,YAAY0e,UACvBhK,EAAQyB,aAAa2vC,EAAAj5C,eAAeqP,OACrCve,KAAK+gE,cAAsBhqD,GAE/B,MAEF,KAAKjL,EAAAiJ,SAAS2I,kBACR3G,EAAU/W,KAAK0hB,QAAQ7O,wBAA0CgC,IACzDC,MAAQqzC,EAAAl5C,YAAYiO,SACzBnG,EAAQyB,aAAa2vC,EAAAj5C,eAAeqP,OAAOve,KAAK+gE,cAAsBhqD,IAE7E,MAEF,KAAKjL,EAAAiJ,SAAStB,OACuC,MAA7BoB,EAAW7K,gBAC/BhK,KAAKshE,kBACuBzsD,EAAW7K,eACM6K,EAAW2L,MAG1D,MAEF,KAAK1U,EAAAiJ,SAASE,OACZjV,KAAKshE,kBACezsD,EAAW7K,eACX6K,EAAW2L,MAE/B,MAEF,KAAK1U,EAAAiJ,SAASU,oBACd,KAAK3J,EAAAiJ,SAAS6I,kBACd,KAAK9R,EAAAiJ,SAASY,qBACd,KAAK7J,EAAAiJ,SAASmJ,0BACd,KAAKpS,EAAAiJ,SAASgB,gBAAiB,MAC/B,QACE,IAAI8kC,EAAO76C,KAAK4kE,iBAAiB/vD,GAC7BuzC,EAAA7W,gBAAgBsJ,IAASuN,EAAAh+B,aAAay6C,KAAK7gD,EAAKnZ,KAAKgwC,KAM/DgjB,EAAA57D,UAAA2iE,iBAAA,SAAiB/vD,EAAsBiwD,QAAA,IAAAA,OAAA,GACrC,IACIjqB,EADAl7C,EAASK,KAAKL,OAElB,OAAQkV,EAAUC,MAChB,KAAKhJ,EAAAiJ,SAAS8xC,MACZhM,EAAO76C,KAAK+kE,sBAAsClwD,GAClD,MAEF,KAAK/I,EAAAiJ,SAAS+xC,MACZjM,EAAO76C,KAAKglE,sBAAsCnwD,GAClD,MAEF,KAAK/I,EAAAiJ,SAASgyC,SACZlM,EAAO76C,KAAKilE,yBAA4CpwD,GACxD,MAEF,KAAK/I,EAAAiJ,SAASiyC,GACZnM,EAAO76C,KAAKklE,mBAAgCrwD,GAC5C,MAEF,KAAK/I,EAAAiJ,SAAS9R,MACZ43C,EAAO76C,KAAKmlE,sBAAsCtwD,GAClD,MAEF,KAAK/I,EAAAiJ,SAASqyC,WACZvM,EAAO76C,KAAKolE,2BAAgDvwD,GAC5D,MAEF,KAAK/I,EAAAiJ,SAASsyC,IACZxM,EAAO76C,KAAKqlE,oBAAkCxwD,GAC9C,MAEF,KAAK/I,EAAAiJ,SAASyyC,GACZ3M,EAAO76C,KAAKslE,mBAAgCzwD,GAC5C,MAEF,KAAK/I,EAAAiJ,SAAS2yC,OACZ7M,EAAO76C,KAAKulE,uBAAwC1wD,EAAWiwD,GAC/D,MAEF,KAAKh5D,EAAAiJ,SAAS6yC,OACZ/M,EAAO76C,KAAKwlE,uBAAwC3wD,GACpD,MAEF,KAAK/I,EAAAiJ,SAAS8yC,MACZhN,EAAO76C,KAAKylE,sBAAsC5wD,GAClD,MAEF,KAAK/I,EAAAiJ,SAAS+yC,IACZjN,EAAO76C,KAAK0lE,oBAAkC7wD,GAC9C,MAEF,KAAK/I,EAAAiJ,SAASI,UACZ0lC,EAAO76C,KAAK2lE,yBAA4C9wD,MAC7CgmC,EAAOl7C,EAAOwlC,aACzB,MAEF,KAAKr5B,EAAAiJ,SAASizC,KACZnN,EAAO76C,KAAK4lE,qBAAoC/wD,GAChD,MAEF,KAAK/I,EAAAiJ,SAASkzC,MACZpN,EAAO76C,KAAK6lE,sBAAsChxD,GAClD,MAEF,KAAK/I,EAAAiJ,SAASgB,gBAEZ/V,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfzI,EAAU1L,OAEZ0xC,EAAOl7C,EAAOymC,oBACd,MAEF,QACE59B,QAAO,GACPqyC,EAAOl7C,EAAOymC,oBAIlB,OADIpmC,KAAKiT,QAAQwT,WAAWzmB,KAAK8lE,iBAAiBjrB,EAAMhmC,EAAU1L,OAC3D0xC,GAGTgjB,EAAA57D,UAAAohE,kBAAA,SAAkB1uD,EAAyBoxD,QAAA,IAAAA,OAAA,GACzC,IAAIC,EAAgBrxD,EAAWnN,OAC3B27D,EAAQ,IAAIn8D,MAAqBg/D,GACrC7C,EAAM37D,OAAS,EAEf,IADA,IAAI2e,EAAOnmB,KAAK++D,YACP1+D,EAAI,EAAGA,EAAI2lE,IAAiB3lE,EAAG,CACtC,IAAIw6C,EAAO76C,KAAK4kE,iBAAiBjwD,EAAWtU,GAAI0lE,GAAU1lE,GAAK2lE,EAAgB,GAC/E,OAAQ5d,EAAA7W,gBAAgBsJ,IACtB,KAAKuN,EAAAh+B,aAAauuB,MAChB,IAAKyP,EAAA7U,aAAasH,GAAO,CACvB,IAAK,IAAIjmC,EAAI,EAAGH,EAAI2zC,EAAA3U,mBAAmBoH,GAAOjmC,EAAIH,IAAKG,EAAGuuD,EAAMt4D,KAAKu9C,EAAAzU,cAAckH,EAAMjmC,IACzF,MAIJ,QAASuuD,EAAMt4D,KAAKgwC,GACpB,KAAKuN,EAAAh+B,aAAay6C,KAEpB,GAAI1+C,EAAKtI,MAAK,IAA6B,CACrCuqC,EAAA7P,yBAAyBsC,IAAOsoB,EAAMt4D,KAAK7K,KAAKL,OAAOymC,qBAC3D,OAGJ,OAAO+8B,GAGTtF,EAAA57D,UAAA8iE,sBAAA,SAAsBlwD,GACpB,IAAIF,EAAaE,EAAUF,WACvBsxD,EAAYjmE,KAAK++D,YACjBmH,EAAYD,EAAUE,OAC1BnmE,KAAK++D,YAAcmH,EAEnB,IAAI/C,EAAQnjE,KAAKqjE,kBAAkB1uD,GAC/BkmC,EAAuB,GAAhBsoB,EAAM37D,OACbxH,KAAKL,OAAOwlC,YACI,GAAhBg+B,EAAM37D,OACJ27D,EAAM,GACNnjE,KAAKL,OAAOukC,YAAY,KAAMi/B,EAAM/a,EAAA5W,kBAAkB2xB,EAAMA,EAAM37D,OAAS,KAKjF,OAHA0+D,EAAUE,mBACVH,EAAUI,QAAQH,GAClBlmE,KAAK++D,YAAckH,EACZprB,GAGTgjB,EAAA57D,UAAA+iE,sBAAA,SAAsBnwD,GACpB,IAAIlV,EAASK,KAAKL,OAClB,GAAIkV,EAAUsvB,MAKZ,OAJAnkC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfzI,EAAUsvB,MAAMh7B,OAEXxJ,EAAOymC,oBAEhB,IAAIjgB,EAAOnmB,KAAK++D,YACZp5C,EAAaQ,EAAKR,WACtB,OAAkB,MAAdA,GACF3lB,KAAKwL,MACHI,EAAA/C,eAAey9D,qFACfzxD,EAAU1L,OAELxJ,EAAOymC,sBAEhBjgB,EAAKlV,IAAG,GACDtR,EAAO4kC,YAAY5e,KAG5Bk4C,EAAA57D,UAAAgjE,yBAAA,SAAyBpwD,GACvB,IAAIlV,EAASK,KAAKL,OACdwkC,EAAQtvB,EAAUsvB,MACtB,GAAIA,EAKF,OAJAnkC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACf6mB,EAAMh7B,OAEDxJ,EAAOymC,oBAGhB,IAAIjgB,EAAOnmB,KAAK++D,YACZwH,EAAgBpgD,EAAKogD,cACzB,OAAqB,MAAjBA,GACFvmE,KAAKwL,MACHI,EAAA/C,eAAe29D,8EACf3xD,EAAU1L,OAELxJ,EAAOymC,sBAEhBjgB,EAAKlV,IAAG,IACDtR,EAAO4kC,YAAYgiC,KAG5B1I,EAAA57D,UAAAijE,mBAAA,SAAmBrwD,GACjB,IAAIlV,EAASK,KAAKL,OAEdsmE,EAAYjmE,KAAK++D,YACjB56B,EAAQ8hC,EAAUQ,iBAClBP,EAAYD,EAAUE,OAC1BnmE,KAAK++D,YAAcmH,EACnB,IAAIvgD,EAAa,SAAWwe,EAC5B+hC,EAAUvgD,WAAaA,EACvB,IAAI4gD,EAAgB,YAAcpiC,EAClC+hC,EAAUK,cAAgBA,EAE1B,IAAIviD,EAAOhkB,KAAK4kE,iBAAiB/vD,EAAUA,WACvC6xD,EAAW1mE,KAAK2mE,cAClB3mE,KAAKsiE,kBAAkBztD,EAAU2vB,UAAW34B,EAAAsH,KAAK/P,IAAG,KACpDpD,KAAKg+D,aAKPkI,EAAUE,mBACVH,EAAUW,gBACV5mE,KAAK++D,YAAckH,EACnB,IAAIY,EAAaX,EAAUroD,MAAK,IAChCqoD,EAAUY,MACR,MAKFb,EAAUI,QAAQH,GAElB,IAAIa,EAAyB,CAC3BpnE,EAAOklC,WAAW0hC,EAChBM,EACI7iD,EACArkB,EAAOukC,YAAY,KAAM,CACvBlgB,EACArkB,EAAO4kC,YAAYgiC,EAAeG,IACjCte,EAAAj+B,WAAWka,QAItB,OADIwiC,GAAYE,EAAMl8D,KAAKlL,EAAOymC,qBAC3BzmC,EAAOukC,YAAYve,EAAYohD,IAGxClJ,EAAA57D,UAAAkjE,sBAAA,SAAsBtwD,GACpB,OAAO7U,KAAKL,OAAOwlC,aAGrB04B,EAAA57D,UAAAmjE,2BAAA,SAA2BvwD,GACzB,IAAIysB,EAAOthC,KAAKsiE,kBAAkBztD,EAAU8vB,WAAY94B,EAAAsH,KAAKG,KAAI,KAKjE,OAJItT,KAAKg+D,aAAenyD,EAAAsH,KAAKG,OAC3BguB,EAAOthC,KAAKL,OAAO+kC,WAAWpD,GAC9BthC,KAAKg+D,YAAcnyD,EAAAsH,KAAKG,MAEnBguB,GAGTu8B,EAAA57D,UAAAojE,oBAAA,SAAoBxwD,GAGlB,IAAIoxD,EAAYjmE,KAAK++D,YACjB56B,EAAQ8hC,EAAUQ,iBAClBP,EAAYD,EAAUE,OAC1BnmE,KAAK++D,YAAcmH,EACnB,IAAIvgD,EAAaugD,EAAUvgD,WAAa,SAAWwe,EACnD+hC,EAAUvgD,WAAaA,EACvB,IAAI4gD,EAAgB,YAAcpiC,EAClC+hC,EAAUK,cAAgBA,EAC1B,IAAIS,EAAc,UAAY7iC,EAG1BxkC,EAASK,KAAKL,OACdkiE,EAAWhtD,EAAUuO,YACrBpjB,KAAK4kE,iBAA4B/vD,EAAUuO,aAC3C,EACAsjD,EAA0B,EAC1BO,GAAa,EACjB,GAAIpyD,EAAU2vB,UAAW,CACvBkiC,EAAW1mE,KAAK2mE,cACd3mE,KAAKgiE,4BAAwCntD,EAAU2vB,UAAW34B,EAAAsH,KAAKvP,KAAI,GAC3E5D,KAAKg+D,aAGP,IAAIkJ,EAAUvnE,EAAOmtC,qBAAqB45B,GACtCte,EAAA7W,gBAAgB21B,IAAY9e,EAAAh+B,aAAailB,QAC3C7mC,OAAO4/C,EAAA5W,kBAAkB01B,IAAY9e,EAAAj+B,WAAWhkB,KACf,GAA7BiiD,EAAA3W,iBAAiBy1B,KAAeD,GAAa,IAKnDP,EAAW1mE,KAAK2mE,cACd3mE,KAAKgiE,4BAAwCntD,EAAU2vB,UAAW34B,EAAAsH,KAAKvP,KAAI,GAC3E5D,KAAKg+D,kBAIP0I,EAAW/mE,EAAOygC,UAAU,GAC5B6mC,GAAa,EAEf,IAAIE,EAAWtyD,EAAUqtC,YACrBliD,KAAKsiE,kBAA8BztD,EAAUqtC,YAAar2C,EAAAsH,KAAKG,KAAI,KACnE,EACA8zD,EAAgBvyD,EAAUA,UAC1BwyD,EAAWD,EAActyD,MAAQhJ,EAAAiJ,SAAS8xC,OAA8D,GAApCugB,EAAezyD,WAAWnN,OAC9FxH,KAAK4kE,iBAAkCwC,EAAezyD,WAAW,IACjE3U,KAAK4kE,iBAAiBwC,GAG1BlB,EAAUE,mBACVH,EAAUW,gBACV5mE,KAAK++D,YAAckH,EACnB,IAAIqB,EAAepB,EAAUroD,MAAM,MACnCqoD,EAAUY,MACR,MAKEG,EAAYhB,EAAUI,QAAQH,GAC7BD,EAAUsB,mBAAmBrB,GAElC,IAAIsB,EAAa,IAAIxgE,MACjB66D,GAAU2F,EAAW38D,KAAKg3D,GAE9B,IAAI4F,EAAc,IAAIzgE,MAuBtB,OAtBIsgE,EACFG,EAAY58D,KACVlL,EAAOukC,YAAYqiC,EAAe,CAChC5mE,EAAO4kC,YAAY5e,EAAYhmB,EAAOyhC,YAAYgnB,EAAAl7B,QAAQw2C,OAAQgD,IAClEW,GACCjf,EAAAj+B,WAAWka,QAGhBojC,EAAY58D,KACVlL,EAAO4kC,YAAY5e,EAAYhmB,EAAOyhC,YAAYgnB,EAAAl7B,QAAQw2C,OAAQgD,KAEpEe,EAAY58D,KAAKw8D,IAEfF,GAAUM,EAAY58D,KAAKs8D,GAC/BM,EAAY58D,KACVlL,EAAO4kC,YAAYyiC,IAGrBQ,EAAW38D,KACTlL,EAAOklC,WAAWmiC,EAAarnE,EAAOukC,YAAY,KAAMujC,EAAarf,EAAAj+B,WAAWka,QAG3E1kC,EAAOukC,YAAYve,EAAY6hD,IAGxC3J,EAAA57D,UAAAqjE,mBAAA,SAAmBzwD,GACjB,IAAIlV,EAASK,KAAKL,OACdqlC,EAASnwB,EAAUmwB,OACnBC,EAAUpwB,EAAUowB,QACpBghC,EAAYjmE,KAAK++D,YAIjB2H,GAHiBT,EAAUjM,eAGhBh6D,KAAK2mE,cAClB3mE,KAAKgiE,4BAA4BntD,EAAU2vB,UAAW34B,EAAAsH,KAAKvP,KAAI,GAC/D5D,KAAKg+D,cAIH0J,EAAkB/nE,EAAOmtC,qBAAqB45B,GAClD,GACEte,EAAA7W,gBAAgBm2B,IAAoBtf,EAAAh+B,aAAailB,OACjD+Y,EAAA5W,kBAAkBk2B,IAAoBtf,EAAAj+B,WAAWhkB,IAEjD,OAAOiiD,EAAA3W,iBAAiBi2B,GACpB1nE,KAAK4kE,iBAAiB5/B,GACtBC,EACEjlC,KAAK4kE,iBAAiB3/B,GACtBtlC,EAAOwlC,YAIbuhC,EAAW1mE,KAAK2mE,cACd3mE,KAAKgiE,4BAA4BntD,EAAU2vB,UAAW34B,EAAAsH,KAAKvP,KAAI,GAC/D5D,KAAKg+D,aAKT,IAAI2J,EAAa1B,EAAUE,OAC3BnmE,KAAK++D,YAAc4I,EACnB,IAAIC,EAAa5nE,KAAK4kE,iBAAiB5/B,GACvC2iC,EAAWvB,mBACXpmE,KAAK++D,YAAckH,EAEnB,IAAI4B,EAA6B,EACjC,GAAI5iC,EAAS,CACX,IAAI6iC,EAAc7B,EAAUE,OAC5BnmE,KAAK++D,YAAc+I,EACnBD,EAAc7nE,KAAK4kE,iBAAiB3/B,GACpC6iC,EAAY1B,mBACZpmE,KAAK++D,YAAckH,EACnBA,EAAU8B,cAAcJ,EAAYG,QAEpC7B,EAAUsB,mBAAmBI,GAE/B,OAAOhoE,EAAOolC,SAAS2hC,EAAUkB,EAAYC,IAG/ChK,EAAA57D,UAAAsjE,uBAAA,SAAuB1wD,EAA4BiwD,GACjD,IAAInlE,EAASK,KAAKL,OACd2hC,EAAsB,EACtBnb,EAAOnmB,KAAK++D,YACZplD,EAAawM,EAAKxM,WAKtB,GAFAwM,EAAKlV,IAAG,GAEJ4D,EAAUvT,MAAO,CACnB,GAAIqY,GAAc9N,EAAAsH,KAAKG,KAOrB,OANAtT,KAAKgiE,4BAA4BntD,EAAUvT,MAAOqY,EAAU,GAC5D3Z,KAAKwL,MACHI,EAAA/C,eAAeo5D,mCACfptD,EAAUvT,MAAM6H,MAAOnJ,KAAKg+D,YAAYl0D,WAAY6P,EAAW7P,YAEjE9J,KAAKg+D,YAAcnyD,EAAAsH,KAAKG,KACjB3T,EAAOymC,oBAEhB9E,EAAOthC,KAAKsiE,kBACVztD,EAAUvT,MACVqY,EAAU,EAEVwM,EAAK6zC,eAAex+C,GAAG7P,EAAAtJ,YAAY+X,eAChC,EACA,GAIA+L,EAAKo9C,YAAYjiC,EAAM3nB,IAAawM,EAAKlV,IAAG,QAExC0I,GAAc9N,EAAAsH,KAAKG,OAC5BtT,KAAKwL,MACHI,EAAA/C,eAAeo5D,mCACfptD,EAAU1L,MAAO,OAAQwQ,EAAW7P,YAEtCw3B,EAAO3hC,EAAOymC,qBAIhB,OAAI0+B,EAA8BxjC,GAAc3hC,EAAOwlC,YAGnDhf,EAAK3K,GAAE,MAAmC7b,EAAO4kC,YAAY/7B,OAAO2d,EAAK6hD,mBAAoB,EAAG1mC,GAE7F3hC,EAAO0lC,aAAa/D,IAG7Bu8B,EAAA57D,UAAAujE,uBAAA,SAAuB3wD,GACrB,IAAIlV,EAASK,KAAKL,OAEdojD,EAAQluC,EAAUkuC,MAClBklB,EAAWllB,EAAMv7C,OACrB,IAAKygE,EACH,OAAOjoE,KAAKsiE,kBAAkBztD,EAAU2vB,UAAW34B,EAAAsH,KAAKG,KAAI,KAI9D,IAAI2yD,EAAYjmE,KAAK++D,YACjBpI,EAAUsP,EAAUQ,iBAGpByB,EAAYjC,EAAUkC,aAAat8D,EAAAsH,KAAK1P,KAAK,GAC7C2kE,EAAiBF,EAAUtkD,MAG3BykD,EAAS,IAAIrhE,MAAqB,EAAIihE,GAC1CI,EAAO,GAAK1oE,EAAOmkC,eACjBskC,EACApoE,KAAKsiE,kBAAkBztD,EAAU2vB,UAAW34B,EAAAsH,KAAK1P,IAAG,MAMtD,IAFA,IAAI6kE,EAAa,EACbC,GAAgB,EACXloE,EAAI,EAAGA,EAAI4nE,IAAY5nE,EAAG,CACjC,IACI8jC,EADQ4e,EAAM1iD,GACA8jC,MACdA,EACFkkC,EAAOC,KAAgB3oE,EAAO4kC,YAAY,OAASlkC,EAAEyJ,SAAS,IAAM,IAAM6sD,EACxEh3D,EAAO6hC,aAAa4mB,EAAA51B,SAASg2C,MAC3B7oE,EAAOqiC,eAAeomC,EAAgBhgB,EAAAj+B,WAAWhkB,KACjDnG,KAAKsiE,kBAAkBn+B,EAAOt4B,EAAAsH,KAAK1P,IAAG,OAI1C8kE,EAAeloE,EAInB4lE,EAAUwC,cAAcP,GAGxBG,EAAOC,GAAc3oE,EAAO4kC,aAAagkC,GAAgB,EACnD,OAASA,EAAaz+D,SAAS,IAC/B,SACA,IAAM6sD,GAGZ,IAAI+R,EAAe/oE,EAAOukC,YAAY,SAAWyyB,EAAS0R,EAAQjgB,EAAAj+B,WAAWka,MACzEskC,GAAgB,EAChBC,GAAuB,EACvBC,GAAe,EACfC,GAAkB,EACtB,IAASzoE,EAAI,EAAGA,EAAI4nE,IAAY5nE,EAAG,CACjC,IACIsU,EADQouC,EAAM1iD,GACKsU,WACnBqxD,EAAgBrxD,EAAWnN,OAG3B0+D,EAAYD,EAAUE,OAC1BnmE,KAAK++D,YAAcmH,EACnB,IAAIvgD,EAAa,SAAWgxC,EAC5BuP,EAAUvgD,WAAaA,EAEvB,IAAIojD,EAAS1oE,GAAK4nE,EAAW,EACzBe,EAAYD,EAASpjD,EAAa,QAAUtlB,EAAI,GAAGyJ,SAAS,IAAM,IAAM6sD,EACxEwM,EAAQ,IAAIn8D,MAAqB,EAAIg/D,GACzC7C,EAAM,GAAKuF,EAGX,IAFA,IAAIO,EAAQ,EACRpC,GAAa,EACRjyD,EAAI,EAAGA,EAAIoxD,IAAiBpxD,EAAG,CACtC,IAAIimC,EAAO76C,KAAK4kE,iBAAiBjwD,EAAWC,IAC5C,GAAIwzC,EAAA7W,gBAAgBsJ,IAASuN,EAAAh+B,aAAay6C,MACxC1B,EAAM8F,KAAWpuB,EACbqrB,EAAUroD,MAAK,KAA6B,CAC9CgpD,GAAa,EACb,OAIN1D,EAAM37D,OAASyhE,GACXpC,GAAckC,KACX7C,EAAU1qD,GAAE,KAAqBmtD,GAAgB,GACjDzC,EAAU1qD,GAAE,KAA6BotD,GAAuB,GAChE1C,EAAU1qD,GAAE,KAAoBqtD,GAAe,GAC/C3C,EAAU1qD,GAAE,MAAuBstD,GAAkB,IAI5D5C,EAAUY,MACR,KAGFZ,EAAUE,mBACVpmE,KAAK++D,YAAckH,EACnByC,EAAe/oE,EAAOukC,YAAY8kC,EAAW7F,EAAO/a,EAAAj+B,WAAWka,MAWjE,OATA4hC,EAAUW,gBAGN2B,GAAgB,IACdI,GAAe1C,EAAUh1D,IAAG,GAC5B23D,GAAsB3C,EAAUh1D,IAAG,GACnC43D,GAAc5C,EAAUh1D,IAAG,GAC3B63D,GAAiB7C,EAAUh1D,IAAG,KAE7By3D,GAGT7K,EAAA57D,UAAAwjE,sBAAA,SAAsB5wD,GACpB,IAAIsR,EAAOnmB,KAAK++D,YAShB,OANA54C,EAAKlV,IAAG,GAGRkV,EAAKlV,IAAG,GAGD8rD,EAAAmM,aAAalpE,KAAM,KAAM6U,IAGlCgpD,EAAA57D,UAAAyjE,oBAAA,SAAoB7wD,GAOlB,OAJA7U,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfzI,EAAU1L,OAELnJ,KAAKL,OAAOymC,qBAIrBy3B,EAAA57D,UAAA0jE,yBAAA,SAAyB9wD,GAMvB,IALA,IAAI8L,EAAe9L,EAAU8L,aACzBwoD,EAAkBxoD,EAAanZ,OAC/B2e,EAAOnmB,KAAK++D,YACZqK,EAAe,IAAIpiE,MACnBmK,EAAWnR,KAAKmR,SACX9Q,EAAI,EAAGA,EAAI8oE,IAAmB9oE,EAAG,CACxC,IAAIyS,EAAc6N,EAAatgB,GAC3BO,EAAOkS,EAAYlS,KAAKyJ,KACxB8Q,EAAoB,KACpB0mD,EAA0B,EAC9B,GAAI/uD,EAAYqI,KAAM,CAMpB,KALAA,EAAOhK,EAASulD,YACd5jD,EAAYqI,KACZgL,EAAK6zC,eACL7zC,EAAKzB,0BAEI,SACP5R,EAAYsQ,cACdy+C,EAAW7hE,KAAKsiE,kBACdxvD,EAAYsQ,YACZjI,EAAI,UAKH,KAAIrI,EAAYsQ,YAchB,CACLpjB,KAAKwL,MACHI,EAAA/C,eAAequD,cACfpkD,EAAYlS,KAAKuI,MAAMozD,OAEzB,SAbA,GALAsF,EAAW7hE,KAAKgiE,4BACdlvD,EAAYsQ,YACZvX,EAAAsH,KAAKG,KAAI,GAGPtT,KAAKg+D,aAAenyD,EAAAsH,KAAKG,KAAM,CACjCtT,KAAKwL,MACHI,EAAA/C,eAAeo5D,mCACfnvD,EAAY3J,MAAOnJ,KAAKg+D,YAAYl0D,WAAY,UAElD,SAEFqR,EAAOnb,KAAKg+D,YAQd,IAAIqL,GAAY,EAChB,GAAIv2D,EAAY0I,GAAG7P,EAAAtJ,YAAYsZ,OAC7B,GAAIkmD,EAEF,GADAA,EAAW7hE,KAAKL,OAAOmtC,qBAAqB+0B,GACxCzZ,EAAA7W,gBAAgBswB,IAAazZ,EAAAh+B,aAAailB,MAAO,CACnD,IAAIvpB,EAAQ,IAAIqiC,EAAAxkC,MAAM/iB,GAAO,EAAGua,EAAMgL,EAAKmjD,gBAC3C,OAAQlhB,EAAA5W,kBAAkBqwB,IACxB,KAAKzZ,EAAAj+B,WAAWhkB,IACd2f,EAAMlK,wBACJ9H,QACEs0C,EAAA3W,iBAAiBowB,GACjB,GAEF1mD,GAEF,MAEF,KAAKitC,EAAAj+B,WAAW/jB,IACd0f,EAAMlK,wBACJ9H,QACEs0C,EAAA1W,oBAAoBmwB,GACpBzZ,EAAAzW,qBAAqBkwB,IAEvB1mD,GAEF,MAEF,KAAKitC,EAAAj+B,WAAWvjB,IACdkf,EAAMhK,sBAA2BssC,EAAAxW,iBAAiBiwB,GAAW1mD,GAC7D,MAEF,KAAKitC,EAAAj+B,WAAWtjB,IACdif,EAAMhK,sBAAsBssC,EAAAvW,iBAAiBgwB,GAAW1mD,GACxD,MAEF,QAEE,OADA3S,QAAO,GACAxI,KAAKL,OAAOymC,oBAIvB,IAAImjC,EAAepjD,EAAKojD,aACxB,GAAKA,GACA,GAAIA,EAAax2D,IAAInS,GAKxB,OAJAZ,KAAKwL,MACHI,EAAA/C,eAAeqT,uBACfpJ,EAAYlS,KAAKuI,MAAOvI,GAEnBZ,KAAKL,OAAOymC,yBANFjgB,EAAKojD,aAAeA,EAAe,IAAI75D,IAQ1D65D,EAAat4D,IAAIrQ,EAAMklB,GACvBujD,GAAY,OAEZrpE,KAAKsL,QACHM,EAAA/C,eAAe05D,4DACfzvD,EAAY3J,YAIhBnJ,KAAKwL,MACHI,EAAA/C,eAAe2gE,wCACf12D,EAAY3J,OAIlB,IAAKkgE,EAAW,CACVvjD,OAAK,EACT,GACEhT,EAAY+K,MAAMlS,EAAAtJ,YAAYsqD,IAAMhhD,EAAAtJ,YAAYsZ,QAChDwK,EAAK3K,GAAE,MAEPsK,EAAQK,EAAKsjD,eAAe7oE,EAAMua,GAAM,EAAOrI,EAAYlS,UACtD,CACL,GAAIulB,EAAKo0C,YAAY35D,GAAO,CAC1BZ,KAAKwL,MACHI,EAAA/C,eAAeqT,uBACfpJ,EAAYlS,KAAKuI,MAAOvI,GAE1B,SAEFklB,EAAQK,EAAKmjD,eAAehjD,SAASnL,EAAMva,EAAMkS,GAE/C+uD,GACFuH,EAAav+D,KACX7K,KAAK0pE,2BAA2B52D,EAAYlS,KAAMihE,IAEhD/7C,EAAM3K,KAAKK,GAAG,KAChB2K,EAAKwjD,gBAAgB7jD,EAAMlC,OAAQuC,EAAKo9C,YAAY1B,EAAU1mD,KAEvD2K,EAAM3K,KAAKK,GAAG,KACvB2K,EAAKwjD,gBAAgB7jD,EAAMlC,OAAO,IAIxC,OAAOwlD,EAAa5hE,OACO,GAAvB4hE,EAAa5hE,OACX4hE,EAAa,GACbppE,KAAKL,OAAOukC,YAAY,KAAMklC,EAAchhB,EAAAj+B,WAAWka,MACzD,GAGNw5B,EAAA57D,UAAA2jE,qBAAA,SAAqB/wD,GACnB,OAAO7U,KAAKsiE,kBAAkBztD,EAAU8vB,WAAY94B,EAAAsH,KAAKG,KAAI,MAG/DuqD,EAAA57D,UAAA4jE,sBAAA,SAAsBhxD,GACpB,IAAIlV,EAASK,KAAKL,OACdsmE,EAAYjmE,KAAK++D,YAGjB2H,EAAW1mE,KAAK2mE,cAClB3mE,KAAKgiE,4BAA4BntD,EAAU2vB,UAAW34B,EAAAsH,KAAKvP,KAAI,GAC/D5D,KAAKg+D,aAIH0J,EAAkB/nE,EAAOmtC,qBAAqB45B,GAClD,GACEte,EAAA7W,gBAAgBm2B,IAAoBtf,EAAAh+B,aAAailB,OACjD+Y,EAAA5W,kBAAkBk2B,IAAoBtf,EAAAj+B,WAAWhkB,KAEjD,IAAKiiD,EAAA3W,iBAAiBi2B,GAAkB,OAAO/nE,EAAOwlC,iBAItDuhC,EAAW1mE,KAAK2mE,cACd3mE,KAAKgiE,4BAA4BntD,EAAU2vB,UAAW34B,EAAAsH,KAAKvP,KAAI,GAC/D5D,KAAKg+D,aAKT,IAAI75B,EAAQ8hC,EAAUQ,iBAClBP,EAAYD,EAAUE,OAC1BnmE,KAAK++D,YAAcmH,EACnB,IAAIvgD,EAAa,SAAWwe,EAC5B+hC,EAAUvgD,WAAaA,EACvB,IAAI4gD,EAAgB,YAAcpiC,EAClC+hC,EAAUK,cAAgBA,EAE1B,IAAIviD,EAAOhkB,KAAK4kE,iBAAiB/vD,EAAUA,WAEvCgyD,EAAaX,EAAUroD,MAAK,IAehC,OAZAqoD,EAAUE,mBACVH,EAAUW,gBACV5mE,KAAK++D,YAAckH,EACnBC,EAAUY,MACR,MAMGb,EAAUsB,mBAAmBrB,GAE3BvmE,EAAOukC,YAAYve,EAAY,CACpChmB,EAAOklC,WAAW0hC,EAChB5mE,EAAOolC,SAAS2hC,EACdG,EACI7iD,EACArkB,EAAOukC,YAAY,KAAM,CACvBlgB,EACArkB,EAAO4kC,YAAYgiC,IAClBne,EAAAj+B,WAAWka,WAa1Bw5B,EAAA57D,UAAA2nE,sBAAA,SACE7yD,EACA0hD,EACAoR,GAEArhE,OAAOuO,EAAQyE,GAAG7P,EAAAtJ,YAAYihB,UAC9B,IAAInI,EAAOpE,EAAQoE,KACnB,QACG0uD,GACD1uD,EAAKK,GAAE,IACPi9C,EAAej9C,GAAE,IACjBL,EAAKorB,KAAOkyB,EAAelyB,MACtBvmC,KAAKg+D,YAAcvF,GAAgB3jD,MACnC9U,KAAKg+D,YAAc7iD,GAAMrG,MAE9B,OACA,OACE,IAAI4yB,EAAQvsB,EAAK8tC,yBAAyBp9C,EAAAsH,KAAK/P,KAC/C,OAAOpD,KAAKL,OAAOygC,UACQ,GAAzBrpB,EAAQoM,kBACJ2nB,QAAQ/zB,EAAQsM,uBAAyBqkB,GAASA,EAClD,GAGR,OACA,OACA,QACE,IAAIN,EAAOrwB,EAAQoE,KAAKguC,wBAAwBt9C,EAAAsH,KAAK/P,KACrD,OAAOpD,KAAKL,OAAOygC,UACQ,GAAzBrpB,EAAQoM,kBACJ2nB,QAAQ/zB,EAAQsM,sBAAwB+jB,EACxC,GAGR,OACA,OACE,OAAOpnC,KAAKL,OAAOygC,UACQ,GAAzBrpB,EAAQoM,kBACJ2nB,QAAQ/zB,EAAQsM,sBAChB,GAGR,OACA,OACE,IAAKtM,EAAQ2K,QAAQzO,QAAQc,SAC3B,OAAO/T,KAAKL,OAAOygC,UACQ,GAAzBrpB,EAAQoM,kBACJ2nB,QAAQ/zB,EAAQsM,sBAChB,GAKV,OACA,OACE,OAAgC,GAAzBtM,EAAQoM,kBACXnjB,KAAKL,OAAO6gC,UACVsK,QAAQ/zB,EAAQsM,sBAChB0nB,SAASh0B,EAAQsM,uBAEnBrjB,KAAKL,OAAO6gC,UAAU,GAE5B,QAEE,IAAMzpB,EAAQyB,aAAa2vC,EAAAj5C,eAAeyE,UAAY8kD,GAAkB5sD,EAAAsH,KAAKtP,IAC3E,OAAO7D,KAAKL,OAAOmhC,UAAgC/pB,EAASwM,oBAG9DvjB,KAAKg+D,YAAcnyD,EAAAsH,KAAKtP,IAE1B,QACE,OAAO7D,KAAKL,OAAOihC,UAAgC7pB,EAASwM,oBAE9D,QAEE,OADA/a,QAAO,GACAxI,KAAKL,OAAOymC,sBAKzBy3B,EAAA57D,UAAAqgE,kBAAA,SACE39B,EACA8zB,EACAqR,EACAC,GAGA,IAAIzoC,EACJ,OAFAthC,KAAKg+D,YAAcvF,EAEX9zB,EAAW7vB,MACjB,KAAKhJ,EAAAiJ,SAASskC,UACZ/X,EAAOthC,KAAKgqE,2BAAgDrlC,EAAY8zB,GACxE,MAEF,KAAK3sD,EAAAiJ,SAASqwC,OACZ9jB,EAAOthC,KAAKiqE,wBAA0CtlC,EAAY8zB,GAClE,MAEF,KAAK3sD,EAAAiJ,SAASukC,KACZhY,EAAOthC,KAAKkqE,sBAAsCvlC,EAAY8zB,GAC9D,MAEF,KAAK3sD,EAAAiJ,SAASuwC,MACZhkB,EAAOthC,KAAKmqE,uBAAwCxlC,EAAY8zB,GAChE,MAEF,KAAK3sD,EAAAiJ,SAASwkC,cACZjY,EAAOthC,KAAKoqE,+BAAwDzlC,EAAY8zB,GAChF,MAEF,KAAK3sD,EAAAiJ,SAAS8F,SACZymB,EAAOthC,KAAKqqE,0BAA8C1lC,EAAY8zB,EAAe/+C,oBACrF,MAEF,KAAK5N,EAAAiJ,SAASqkC,WACd,KAAKttC,EAAAiJ,SAASmkC,MACd,KAAKptC,EAAAiJ,SAASikC,KACd,KAAKltC,EAAAiJ,SAAS+wC,KACd,KAAKh6C,EAAAiJ,SAAS2kC,MACd,KAAK5tC,EAAAiJ,SAASkkC,KACZ3X,EAAOthC,KAAKsqE,4BACY3lC,EACtB8zB,EACc,GAAdqR,GAEF,MAEF,KAAKh+D,EAAAiJ,SAASywC,WACZlkB,EAAOthC,KAAKuqE,4BAAkD5lC,EAAY8zB,GAC1E,MAEF,KAAK3sD,EAAAiJ,SAASmK,QACZoiB,EAAOthC,KAAKwqE,yBAA4C7lC,EAAY8zB,GACpE,MAEF,KAAK3sD,EAAAiJ,SAAS2wC,IACZpkB,EAAOthC,KAAKyqE,qBAAoC9lC,EAAY8zB,GAC5D,MAEF,KAAK3sD,EAAAiJ,SAASykC,cACZlY,EAAOthC,KAAK0qE,+BAAwD/lC,EAAY8zB,GAChF,MAEF,KAAK3sD,EAAAiJ,SAAS0kC,eACZnY,EAAOthC,KAAK2qE,gCACgBhmC,EAC1B8zB,EACc,GAAdqR,GAEF,MAEF,KAAKh+D,EAAAiJ,SAAS8wC,QACZvkB,EAAOthC,KAAK4qE,yBAA4CjmC,EAAY8zB,GACpE,MAEF,KAAK3sD,EAAAiJ,SAASixC,aACZ1kB,EAAOthC,KAAK6qE,8BAAsDlmC,EAAY8zB,GAC9E,MAEF,KAAK3sD,EAAAiJ,SAASkxC,YACZ3kB,EAAOthC,KAAK8qE,6BAAoDnmC,EAAY8zB,GAC5E,MAEF,QACEz4D,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAEbm4B,EAAOthC,KAAKL,OAAOymC,oBAGvB,IAAI43B,EAAch+D,KAAKg+D,YASvB,OARkB,GAAd8L,GAAyC9L,GAAevF,GAC1Dn3B,EAAOthC,KAAK+qE,kBAAkBzpC,EAAM08B,EAAavF,EAAgBqR,EAAgBC,EAAUplC,GAC3F3kC,KAAKg+D,YAAcvF,GACF,GAARsR,IACTzoC,EAAOthC,KAAKgrE,uBAAuB1pC,EAAM08B,IAGvCh+D,KAAKiT,QAAQwT,WAAWzmB,KAAK8lE,iBAAiBxkC,EAAMqD,EAAWx7B,OAC5Dm4B,GAGTu8B,EAAA57D,UAAA+/D,4BAAA,SACEr9B,EACA8zB,EACAsR,GAEA,OAAO/pE,KAAKsiE,kBACV39B,EACA8zB,GAAkB5sD,EAAAsH,KAAKG,KACnBzH,EAAAsH,KAAK/P,IACLq1D,EAAc,EAElBsR,IAIJlM,EAAA57D,UAAA6qC,qBAAA,SACEnI,EACA8zB,EACAqR,EACAC,GAEA,OAAO/pE,KAAKL,OAAOmtC,qBACjB9sC,KAAKsiE,kBAAkB39B,EAAY8zB,EAAgBqR,EAAgBC,KAIvElM,EAAA57D,UAAA8oE,kBAAA,SACEzpC,EACA2pC,EACArvB,EACAkuB,EACAC,EACAtO,GAEAjzD,OAAqB,GAAdshE,GACP,IAAInqE,EAASK,KAAKL,OAGlB,OAAiB,IAAbsrE,EAASn2D,MACXtM,OAAkB,IAAXozC,EAAO9mC,MACd9U,KAAKwL,MACHI,EAAA/C,eAAeo5D,mCACfxG,EAAWtyD,MAAO8hE,EAASnhE,WAAY8xC,EAAO9xC,YAEzCnK,EAAOymC,qBAID,IAAXwV,EAAO9mC,KAA8BnV,EAAO+kC,WAAWpD,IAEtD2pC,EAASpiD,eAAe+yB,IACT,GAAdkuB,GACF9pE,KAAKwL,MACHI,EAAA/C,eAAeqiE,sDACfzP,EAAWtyD,MAAO8hE,EAASnhE,WAAY8xC,EAAO9xC,YAKhDmhE,EAASzvD,GAAE,GAGTogC,EAAOpgC,GAAE,GACM,IAAbyvD,EAASn2D,KAGI,IAAX8mC,EAAO9mC,OACTwsB,EAAO3hC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQi+C,WAAY7pC,IAM5B,IAAXsa,EAAO9mC,OAChBwsB,EAAO3hC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQk+C,UAAW9pC,IAMtCsa,EAAOpgC,GAAE,GAGD,IAAbyvD,EAASn2D,KACP8mC,GAAU/vC,EAAAsH,KAAKvP,MACjB09B,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS64C,MAAO/pC,EAAM3hC,EAAOihC,UAAU,IAClEmpC,EAAQ,GAGNzoC,EAFOsa,EAAOpgC,GAAE,GACdogC,EAAOpgC,GAAE,IACJ7b,EAAOyhC,YAAYgnB,EAAAl7B,QAAQo+C,cAAehqC,GAE1C3hC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQq+C,cAAejqC,GAG/Csa,EAAOpgC,GAAE,IACJ7b,EAAOyhC,YAAYgnB,EAAAl7B,QAAQs+C,cAAelqC,GAE1C3hC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQu+C,cAAenqC,GAMjDsa,GAAU/vC,EAAAsH,KAAKvP,MACjB09B,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASk5C,MAAOpqC,EAAM3hC,EAAOmhC,UAAU,IAClEipC,EAAQ,GAGNzoC,EAFOsa,EAAOpgC,GAAE,GACdogC,EAAOpgC,GAAE,IACJ7b,EAAOyhC,YAAYgnB,EAAAl7B,QAAQy+C,cAAerqC,GAE1C3hC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQ0+C,cAAetqC,GAG/Csa,EAAOpgC,GAAE,IACJ7b,EAAOyhC,YAAYgnB,EAAAl7B,QAAQ2+C,cAAevqC,GAE1C3hC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQ4+C,cAAexqC,IAOvD94B,OAAmB,GAAZozC,EAAOrqC,MAAyB,sBACvC+vB,EAAO3hC,EAAO+kC,WAAWpD,IAIlB2pC,EAASzvD,GAAE,IAAuBogC,EAAOpgC,GAAE,GAKhD8lB,EAFW,IAAXsa,EAAO9mC,KACLm2D,EAASzvD,GAAE,IACN7b,EAAOyhC,YACZ6pC,EAASzvD,GAAE,GACP4sC,EAAAl7B,QAAQ6+C,gBACR3jB,EAAAl7B,QAAQ8+C,gBACZ1qC,GAGK3hC,EAAOyhC,YACZ6pC,EAASzvD,GAAE,GACP4sC,EAAAl7B,QAAQ++C,gBACR7jB,EAAAl7B,QAAQg/C,gBACZ5qC,GAMA2pC,EAASzvD,GAAE,IACN7b,EAAOyhC,YACZ6pC,EAASzvD,GAAE,GACP4sC,EAAAl7B,QAAQi/C,gBACR/jB,EAAAl7B,QAAQk/C,gBACZ9qC,GAGK3hC,EAAOyhC,YACZ6pC,EAASzvD,GAAE,GACP4sC,EAAAl7B,QAAQm/C,gBACRjkB,EAAAl7B,QAAQo/C,gBACZhrC,GAQF2pC,EAASzvD,GAAE,IAGTogC,GAAU/vC,EAAAsH,KAAKvP,MACjB09B,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS+5C,MAAOjrC,EAAM3hC,EAAO6gC,UAAU,IAClEupC,EAAQ,GACEnuB,EAAOpgC,GAAE,MACnB8lB,EAAO3hC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQs/C,QAASlrC,IAIpCsa,EAAOpgC,GAAE,KAClB8lB,EAAO3hC,EAAOyhC,YACZ6pC,EAASzvD,GAAE,GAAqB4sC,EAAAl7B,QAAQu/C,UAAYrkB,EAAAl7B,QAAQw/C,UAC5D1sE,KAAKgrE,uBAAuB1pC,EAAM2pC,IAEpClB,EAAQ,GAKJkB,EAASzvD,GAAE,KAETyvD,EAAS1kC,KAAOqV,EAAOrV,OACzBjF,EAAOthC,KAAKgrE,uBAAuB1pC,EAAM2pC,GACzClB,EAAQ,GAMhB/pE,KAAKg+D,YAAcpiB,EACJ,GAARmuB,EACH/pE,KAAKgrE,uBAAuB1pC,EAAMsa,GAClCta,IAGNu8B,EAAA57D,UAAA+nE,2BAAA,SAA2BrlC,EAAiC8zB,GAC1D,OAAQ9zB,EAAWgX,eACjB,KAAK7vC,EAAAq5C,cAAcwnB,OACnB,KAAK7gE,EAAAq5C,cAAcwG,GACjB,IAAI/P,EAAS57C,KAAKmR,SAASulD,YACzBluD,OAAOm8B,EAAWiX,QAClB57C,KAAK++D,YAAY/E,eACjBh6D,KAAK++D,YAAYr6C,yBAEnB,OAAKk3B,EACE57C,KAAKsiE,kBAAkB39B,EAAWA,WAAYiX,EAAM,KADvC57C,KAAKL,OAAOymC,oBAGlC,KAAKt6B,EAAAq5C,cAAcgV,QACjB3xD,QAAQm8B,EAAWiX,QACnB,IAAIta,EAAOthC,KAAKgiE,4BAA4Br9B,EAAWA,WAAY8zB,EAAc,GAEjF,OADAz4D,KAAKg+D,YAAch+D,KAAKg+D,YAAYrV,gBAC7BrnB,EAET,QAAS94B,QAAO,GAElB,OAAOxI,KAAKL,OAAOymC,qBAQrBy3B,EAAA57D,UAAAgoE,wBAAA,SACEtlC,EACA8zB,GAEA,IAIImU,EACAC,EACAC,EACAC,EACAC,EAEA1rC,EAVA3hC,EAASK,KAAKL,OACd8hC,EAAOkD,EAAWlD,KAClBC,EAAQiD,EAAWjD,MASnBurC,GAAW,EAEXlxB,EAAWpX,EAAWoX,SAC1B,OAAQA,GACN,KAAKlD,EAAAC,MAAM4U,SAKT,GAJAkf,EAAW5sE,KAAKgiE,4BAA4BvgC,EAAMg3B,EAAc,GAChEoU,EAAW7sE,KAAKg+D,YAGZh+D,KAAKg+D,YAAYxiD,GAAE,KAAuB,CAE5C,GADIktC,EAAiBmkB,EAASnkB,eAG5B,GADIx/B,EAAWw/B,EAAe3/B,eAAeo/B,EAAAz8C,aAAayC,IAC5C,CACZmzB,EAAOthC,KAAKktE,sBAAsBhkD,EAAUuY,EAAMmrC,EAAUlrC,EAAOiD,GACnE,MAOJ,OAJA3kC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENnJ,KAAKL,OAAOymC,oBAKrB,GAFA0mC,EAAY9sE,KAAKgiE,4BAA4BtgC,EAAOmrC,EAAQ,GAC5DE,EAAY/sE,KAAKg+D,cACbgP,EAAanhE,EAAAsH,KAAKy2C,kBAAkBijB,EAAUE,GAAW,IAuB3D,OALA/sE,KAAKwL,MACHI,EAAA/C,eAAeskE,8CACfxoC,EAAWx7B,MAAO,IAAK0jE,EAAS/iE,WAAYijE,EAAUjjE,YAExD9J,KAAKg+D,YAAcvF,EACZ94D,EAAOymC,oBAEhB,OAxBEwmC,EAAW5sE,KAAK+qE,kBACd6B,EACAC,EACAA,EAAWG,EAAU,IAGrBvrC,GAEFqrC,EAAY9sE,KAAK+qE,kBACf+B,EACAC,EACAA,EAAYC,EAAU,IAGtBtrC,GAUIsrC,EAAWl4D,MACjB,OACA,OACA,OACEwsB,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS46C,MAAOR,EAAUE,GACrD,MAEF,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS66C,MAAOT,EAAUE,GACrD,MAEF,OACExrC,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAAS66C,MACTjlB,EAAA51B,SAAS46C,MACbR,EACAE,GAEF,MAEF,OACA,OACA,OACA,QACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS86C,MAAOV,EAAUE,GACrD,MAEF,OACExrC,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAAS+6C,MACTnlB,EAAA51B,SAAS86C,MACbV,EACAE,GAEF,MAEF,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS+6C,MAAOX,EAAUE,GACrD,MAEF,QACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASg7C,MAAOZ,EAAUE,GACrD,MAEF,QACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASi7C,MAAOb,EAAUE,GACrD,MAEF,QACEtkE,QAAO,GACP84B,EAAO3hC,EAAOymC,oBAGlBpmC,KAAKg+D,YAAcnyD,EAAAsH,KAAKvP,KACxB,MAEF,KAAKi1C,EAAAC,MAAM6U,YAKT,GAJAif,EAAW5sE,KAAKgiE,4BAA4BvgC,EAAMg3B,EAAc,GAChEoU,EAAW7sE,KAAKg+D,YAGZh+D,KAAKg+D,YAAYxiD,GAAE,KAAuB,CAE5C,GADIktC,EAAiBmkB,EAASnkB,eAG5B,GADIx/B,EAAWw/B,EAAe3/B,eAAeo/B,EAAAz8C,aAAaqC,IAC5C,CACZuzB,EAAOthC,KAAKktE,sBAAsBhkD,EAAUuY,EAAMmrC,EAAUlrC,EAAOiD,GACnE,MAOJ,OAJA3kC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENnJ,KAAKL,OAAOymC,oBAKrB,GAFA0mC,EAAY9sE,KAAKgiE,4BAA4BtgC,EAAOmrC,EAAQ,GAC5DE,EAAY/sE,KAAKg+D,cACbgP,EAAanhE,EAAAsH,KAAKy2C,kBAAkBijB,EAAUE,GAAW,IAuB3D,OALA/sE,KAAKwL,MACHI,EAAA/C,eAAeskE,8CACfxoC,EAAWx7B,MAAO,IAAK0jE,EAAS/iE,WAAYijE,EAAUjjE,YAExD9J,KAAKg+D,YAAcvF,EACZ94D,EAAOymC,oBAEhB,OAxBEwmC,EAAW5sE,KAAK+qE,kBACd6B,EACAC,EACAA,EAAWG,EAAU,IAGrBvrC,GAEFqrC,EAAY9sE,KAAK+qE,kBACf+B,EACAC,EACAA,EAAYC,EAAU,IAGtBtrC,GAUIsrC,EAAWl4D,MACjB,OACA,OACA,OACEwsB,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASk7C,MAAOd,EAAUE,GACrD,MAEF,OACExrC,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAASm7C,MACTvlB,EAAA51B,SAASk7C,MACbd,EACAE,GAEF,MAEF,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASm7C,MAAOf,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASo7C,MAAOhB,EAAUE,GACrD,MAEF,OACExrC,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAASq7C,MACTzlB,EAAA51B,SAASo7C,MACbhB,EACAE,GAEF,MAEF,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASq7C,MAAOjB,EAAUE,GACrD,MAEF,QACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASs7C,MAAOlB,EAAUE,GACrD,MAEF,QACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASu7C,MAAOnB,EAAUE,GACrD,MAEF,QACEtkE,QAAO,GACP84B,EAAO3hC,EAAOymC,oBAGlBpmC,KAAKg+D,YAAcnyD,EAAAsH,KAAKvP,KACxB,MAEF,KAAKi1C,EAAAC,MAAM8U,gBAKT,GAJAgf,EAAW5sE,KAAKgiE,4BAA4BvgC,EAAMg3B,EAAc,GAChEoU,EAAW7sE,KAAKg+D,YAGZh+D,KAAKg+D,YAAYxiD,GAAE,KAAuB,CAE5C,GADIktC,EAAiBmkB,EAASnkB,eAG5B,GADIx/B,EAAWw/B,EAAe3/B,eAAeo/B,EAAAz8C,aAAa0C,IAC5C,CACZkzB,EAAOthC,KAAKktE,sBAAsBhkD,EAAUuY,EAAMmrC,EAAUlrC,EAAOiD,GACnE,MAOJ,OAJA3kC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENnJ,KAAKL,OAAOymC,oBAKrB,GAFA0mC,EAAY9sE,KAAKgiE,4BAA4BtgC,EAAOmrC,EAAQ,GAC5DE,EAAY/sE,KAAKg+D,cACbgP,EAAanhE,EAAAsH,KAAKy2C,kBAAkBijB,EAAUE,GAAW,IAuB3D,OALA/sE,KAAKwL,MACHI,EAAA/C,eAAeskE,8CACfxoC,EAAWx7B,MAAO,KAAM0jE,EAAS/iE,WAAYijE,EAAUjjE,YAEzD9J,KAAKg+D,YAAcvF,EACZ94D,EAAOymC,oBAEhB,OAxBEwmC,EAAW5sE,KAAK+qE,kBACd6B,EACAC,EACAA,EAAWG,EAAU,IAGrBvrC,GAEFqrC,EAAY9sE,KAAK+qE,kBACf+B,EACAC,EACAA,EAAYC,EAAU,IAGtBtrC,GAUIsrC,EAAWl4D,MACjB,OACA,OACA,OACEwsB,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASw7C,MAAOpB,EAAUE,GACrD,MAEF,OACExrC,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAASy7C,MACT7lB,EAAA51B,SAASw7C,MACbpB,EACAE,GAEF,MAEF,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASy7C,MAAOrB,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS07C,MAAOtB,EAAUE,GACrD,MAEF,OACExrC,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAAS27C,MACT/lB,EAAA51B,SAAS07C,MACbtB,EACAE,GAEF,MAEF,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS27C,MAAOvB,EAAUE,GACrD,MAEF,QACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS47C,MAAOxB,EAAUE,GACrD,MAEF,QACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS67C,MAAOzB,EAAUE,GACrD,MAEF,QACEtkE,QAAO,GACP84B,EAAO3hC,EAAOymC,oBAGlBpmC,KAAKg+D,YAAcnyD,EAAAsH,KAAKvP,KACxB,MAEF,KAAKi1C,EAAAC,MAAM+U,mBAKT,GAJA+e,EAAW5sE,KAAKgiE,4BAA4BvgC,EAAMg3B,EAAc,GAChEoU,EAAW7sE,KAAKg+D,YAGZh+D,KAAKg+D,YAAYxiD,GAAE,KAAuB,CAE5C,GADIktC,EAAiBmkB,EAASnkB,eAG5B,GADIx/B,EAAWw/B,EAAe3/B,eAAeo/B,EAAAz8C,aAAasC,IAC5C,CACZszB,EAAOthC,KAAKktE,sBAAsBhkD,EAAUuY,EAAMmrC,EAAUlrC,EAAOiD,GACnE,MAOJ,OAJA3kC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENnJ,KAAKL,OAAOymC,oBAKrB,GAFA0mC,EAAY9sE,KAAKgiE,4BAA4BtgC,EAAOmrC,EAAQ,GAC5DE,EAAY/sE,KAAKg+D,cACbgP,EAAanhE,EAAAsH,KAAKy2C,kBAAkBijB,EAAUE,GAAW,IAuB3D,OALA/sE,KAAKwL,MACHI,EAAA/C,eAAeskE,8CACfxoC,EAAWx7B,MAAO,KAAM0jE,EAAS/iE,WAAYijE,EAAUjjE,YAEzD9J,KAAKg+D,YAAcvF,EACZ94D,EAAOymC,oBAEhB,OAxBEwmC,EAAW5sE,KAAK+qE,kBACd6B,EACAC,EACAA,EAAWG,EAAU,IAGrBvrC,GAEFqrC,EAAY9sE,KAAK+qE,kBACf+B,EACAC,EACAA,EAAYC,EAAU,IAGtBtrC,GAUIsrC,EAAWl4D,MACjB,OACA,OACA,OACEwsB,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS87C,MAAO1B,EAAUE,GACrD,MAEF,OACExrC,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAAS+7C,MACTnmB,EAAA51B,SAAS87C,MACb1B,EACAE,GAEF,MAEF,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS+7C,MAAO3B,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASg8C,MAAO5B,EAAUE,GACrD,MAEF,OACExrC,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAASi8C,MACTrmB,EAAA51B,SAASg8C,MACb5B,EACAE,GAEF,MAEF,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASi8C,MAAO7B,EAAUE,GACrD,MAEF,QACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASk8C,MAAO9B,EAAUE,GACrD,MAEF,QACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASm8C,MAAO/B,EAAUE,GACrD,MAEF,QACEtkE,QAAO,GACP84B,EAAO3hC,EAAOymC,oBAGlBpmC,KAAKg+D,YAAcnyD,EAAAsH,KAAKvP,KACxB,MAGF,KAAKi1C,EAAAC,MAAMkV,qBACX,KAAKnV,EAAAC,MAAMgV,cAUT,GAJA8e,EAAW5sE,KAAKgiE,4BAA4BvgC,EAAMg3B,EAAc,GAChEoU,EAAW7sE,KAAKg+D,YAGZjiB,GAAYlD,EAAAC,MAAMgV,eAAiB9tD,KAAKg+D,YAAYxiD,GAAE,KAExD,GADIktC,EAAiBmkB,EAASnkB,eAG5B,GADIx/B,EAAWw/B,EAAe3/B,eAAeo/B,EAAAz8C,aAAamC,IAC5C,CACZyzB,EAAOthC,KAAKktE,sBAAsBhkD,EAAUuY,EAAMmrC,EAAUlrC,EAAOiD,GACnE,MAQN,GAFAmoC,EAAY9sE,KAAKgiE,4BAA4BtgC,EAAOmrC,EAAQ,GAC5DE,EAAY/sE,KAAKg+D,cACbgP,EAAanhE,EAAAsH,KAAKy2C,kBAAkBijB,EAAUE,GAAW,IAuB3D,OALA/sE,KAAKwL,MACHI,EAAA/C,eAAeskE,8CACfxoC,EAAWx7B,MAAO0vC,EAAA2U,sBAAsB7oB,EAAWoX,UAAW8wB,EAAS/iE,WAAYijE,EAAUjjE,YAE/F9J,KAAKg+D,YAAcvF,EACZ94D,EAAOymC,oBAEhB,OAxBEwmC,EAAW5sE,KAAK+qE,kBACd6B,EACAC,EACAA,EAAWG,EAAU,IAGrBvrC,GAEFqrC,EAAY9sE,KAAK+qE,kBACf+B,EACAC,EACAA,EAAYC,EAAU,IAGtBtrC,GAUIsrC,EAAWl4D,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACEwsB,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASg2C,MAAOoE,EAAUE,GACrD,MAEF,OACA,OACExrC,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAASo8C,MACTxmB,EAAA51B,SAASg2C,MACboE,EACAE,GAEF,MAEF,OACA,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASo8C,MAAOhC,EAAUE,GACrD,MAEF,QACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASq8C,MAAOjC,EAAUE,GACrD,MAEF,QACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASs8C,MAAOlC,EAAUE,GACrD,MAEF,QACExrC,EAAO3hC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQ6hD,gBAChCpvE,EAAO6hC,aAAa4mB,EAAA51B,SAASw8C,WAAYpC,EAAUE,IAErD,MAEF,QACEtkE,QAAO,GACP84B,EAAO3hC,EAAOymC,oBAGlBpmC,KAAKg+D,YAAcnyD,EAAAsH,KAAKvP,KACxB,MAEF,KAAKi1C,EAAAC,MAAMmV,0BACX,KAAKpV,EAAAC,MAAMiV,mBAKT,GAJA6e,EAAW5sE,KAAKgiE,4BAA4BvgC,EAAMg3B,EAAc,GAChEoU,EAAW7sE,KAAKg+D,YAGZjiB,GAAYlD,EAAAC,MAAMiV,oBAAsB/tD,KAAKg+D,YAAYxiD,GAAE,KAE7D,GADIktC,EAAiBmkB,EAASnkB,eAG5B,GADIx/B,EAAWw/B,EAAe3/B,eAAeo/B,EAAAz8C,aAAaoC,IAC5C,CACZwzB,EAAOthC,KAAKktE,sBAAsBhkD,EAAUuY,EAAMmrC,EAAUlrC,EAAOiD,GACnE,MAQN,GAFAmoC,EAAY9sE,KAAKgiE,4BAA4BtgC,EAAOmrC,EAAQ,GAC5DE,EAAY/sE,KAAKg+D,cACbgP,EAAanhE,EAAAsH,KAAKy2C,kBAAkBijB,EAAUE,GAAW,IAuB3D,OALA/sE,KAAKwL,MACHI,EAAA/C,eAAeskE,8CACfxoC,EAAWx7B,MAAO0vC,EAAA2U,sBAAsB7oB,EAAWoX,UAAW8wB,EAAS/iE,WAAYijE,EAAUjjE,YAE/F9J,KAAKg+D,YAAcvF,EACZ94D,EAAOymC,oBAEhB,OAxBEwmC,EAAW5sE,KAAK+qE,kBACd6B,EACAC,EACAA,EAAWG,EAAU,IAGrBvrC,GAEFqrC,EAAY9sE,KAAK+qE,kBACf+B,EACAC,EACAA,EAAYC,EAAU,IAGtBtrC,GAUIsrC,EAAWl4D,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACEwsB,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASy8C,MAAOrC,EAAUE,GACrD,MAEF,OACA,OACExrC,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAAS+5C,MACTnkB,EAAA51B,SAASy8C,MACbrC,EACAE,GAEF,MAEF,OACA,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS+5C,MAAOK,EAAUE,GACrD,MAEF,QACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS64C,MAAOuB,EAAUE,GACrD,MAEF,QACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASk5C,MAAOkB,EAAUE,GACrD,MAEF,QACExrC,EAAO3hC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQgiD,gBAChCvvE,EAAO6hC,aAAa4mB,EAAA51B,SAAS28C,WAAYvC,EAAUE,IAErD,MAEF,QACEtkE,QAAO,GACP84B,EAAO3hC,EAAOymC,oBAGlBpmC,KAAKg+D,YAAcnyD,EAAAsH,KAAKvP,KACxB,MAEF,KAAKi1C,EAAAC,MAAMoW,OACT,OAAOlvD,KAAKovE,kBAAkB3tC,EAAMC,EAAO+2B,GAE7C,KAAK5f,EAAAC,MAAMqW,YAAa8d,GAAW,EACnC,KAAKp0B,EAAAC,MAAMvqC,KAKT,GAJAq+D,EAAW5sE,KAAKgiE,4BAA4BvgC,EAAMg3B,EAAc,GAChEoU,EAAW7sE,KAAKg+D,YAGZh+D,KAAKg+D,YAAYxiD,GAAE,KAAuB,CAE5C,GADIktC,EAAiBmkB,EAASnkB,eAG5B,GADIx/B,EAAWw/B,EAAe3/B,eAAeo/B,EAAAz8C,aAAa0B,KAC5C,CACZk0B,EAAOthC,KAAKktE,sBAAsBhkD,EAAUuY,EAAMmrC,EAAUlrC,EAAOiD,GACnE,MAOJ,OAJA3kC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENnJ,KAAKL,OAAOymC,oBAGrB,GAAI6mC,EACFH,EAAY9sE,KAAKsiE,kBAAkB5gC,EAAOmrC,EAAQ,SAC7C,CAGL,GAFAC,EAAY9sE,KAAKgiE,4BAA4BtgC,EAAOmrC,EAAQ,GAC5DE,EAAY/sE,KAAKg+D,cACbgP,EAAanhE,EAAAsH,KAAKy2C,kBAAkBijB,EAAUE,GAAW,IAuB3D,OALA/sE,KAAKwL,MACHI,EAAA/C,eAAeskE,8CACfxoC,EAAWx7B,MAAO,IAAK0jE,EAAS/iE,WAAYijE,EAAUjjE,YAExD9J,KAAKg+D,YAAcvF,EACZ94D,EAAOymC,oBAtBdwmC,EAAW5sE,KAAK+qE,kBACd6B,EACAC,EACAA,EAAWG,EAAU,IAGrBvrC,GAEFqrC,EAAY9sE,KAAK+qE,kBACf+B,EACAC,EACAA,EAAYC,EAAU,IAGtBtrC,GAWN,OAAQ1hC,KAAKg+D,YAAYlpD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEwsB,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASuwC,OAAQ6J,EAAUE,GACtD,MAEF,OACA,OACExrC,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAAS68C,OACTjnB,EAAA51B,SAASuwC,OACb6J,EACAE,GAEF,MAEF,OACA,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS68C,OAAQzC,EAAUE,GACtD,MAEF,QACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS88C,OAAQ1C,EAAUE,GACtD,MAEF,QACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS+8C,OAAQ3C,EAAUE,GACtD,MAEF,QACEtkE,QAAO,GACP84B,EAAO3hC,EAAOymC,oBAGlB,MAEF,KAAKyS,EAAAC,MAAMsW,aAAc6d,GAAW,EACpC,KAAKp0B,EAAAC,MAAMrqC,MAKT,GAJAm+D,EAAW5sE,KAAKgiE,4BAA4BvgC,EAAMg3B,EAAc,GAChEoU,EAAW7sE,KAAKg+D,YAGZh+D,KAAKg+D,YAAYxiD,GAAE,KAAuB,CAE5C,GADIktC,EAAiBmkB,EAASnkB,eAG5B,GADIx/B,EAAWw/B,EAAe3/B,eAAeo/B,EAAAz8C,aAAa2B,KAC5C,CACZi0B,EAAOthC,KAAKktE,sBAAsBhkD,EAAUuY,EAAMmrC,EAAUlrC,EAAOiD,GACnE,MAOJ,OAJA3kC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENnJ,KAAKL,OAAOymC,oBAGrB,GAAI6mC,EACFH,EAAY9sE,KAAKsiE,kBAAkB5gC,EAAOmrC,EAAQ,KAClDE,EAAY/sE,KAAKg+D,gBACZ,CAGL,GAFA8O,EAAY9sE,KAAKgiE,4BAA4BtgC,EAAOmrC,EAAQ,GAC5DE,EAAY/sE,KAAKg+D,cACbgP,EAAanhE,EAAAsH,KAAKy2C,kBAAkBijB,EAAUE,GAAW,IAuB3D,OALA/sE,KAAKwL,MACHI,EAAA/C,eAAeskE,8CACfxoC,EAAWx7B,MAAO,IAAK0jE,EAAS/iE,WAAYijE,EAAUjjE,YAExD9J,KAAKg+D,YAAcvF,EACZ94D,EAAOymC,oBAtBdwmC,EAAW5sE,KAAK+qE,kBACd6B,EACAC,EACAA,EAAWG,EAAU,IAGrBvrC,GAEFqrC,EAAY9sE,KAAK+qE,kBACf+B,EACAC,EACAA,EAAYC,EAAU,IAGtBtrC,GAWN,OAAQ1hC,KAAKg+D,YAAYlpD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEwsB,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASg9C,OAAQ5C,EAAUE,GACtD,MAEF,OACA,OACExrC,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAASi9C,OACTrnB,EAAA51B,SAASg9C,OACb5C,EACAE,GAEF,MAEF,OACA,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASi9C,OAAQ7C,EAAUE,GACtD,MAEF,QACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASk9C,OAAQ9C,EAAUE,GACtD,MAEF,QACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASm9C,OAAQ/C,EAAUE,GACtD,MAEF,QACEtkE,QAAO,GACP84B,EAAO3hC,EAAOymC,oBAGlB,MAEF,KAAKyS,EAAAC,MAAMuW,gBAAiB4d,GAAW,EACvC,KAAKp0B,EAAAC,MAAMqV,SAKT,GAJAye,EAAW5sE,KAAKgiE,4BAA4BvgC,EAAMg3B,EAAc,GAChEoU,EAAW7sE,KAAKg+D,YAGZh+D,KAAKg+D,YAAYxiD,GAAE,KAAuB,CAE5C,GADIktC,EAAiBmkB,EAASnkB,eAG5B,GADIx/B,EAAWw/B,EAAe3/B,eAAeo/B,EAAAz8C,aAAa4B,KAC5C,CACZg0B,EAAOthC,KAAKktE,sBAAsBhkD,EAAUuY,EAAMmrC,EAAUlrC,EAAOiD,GACnE,MAOJ,OAJA3kC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENnJ,KAAKL,OAAOymC,oBAGrB,GAAI6mC,EACFL,EAAW5sE,KAAKgrE,uBAAuB4B,EAAUC,GACjDC,EAAY9sE,KAAKsiE,kBAAkB5gC,EAAOmrC,EAAQ,SAC7C,CAGL,GAFAC,EAAY9sE,KAAKgiE,4BAA4BtgC,EAAOmrC,EAAQ,GAC5DE,EAAY/sE,KAAKg+D,cACbgP,EAAanhE,EAAAsH,KAAKy2C,kBAAkBijB,EAAUE,GAAW,IAuB3D,OALA/sE,KAAKwL,MACHI,EAAA/C,eAAeskE,8CACfxoC,EAAWx7B,MAAO,IAAK0jE,EAAS/iE,WAAYijE,EAAUjjE,YAExD9J,KAAKg+D,YAAcvF,EACZ94D,EAAOymC,oBAtBdwmC,EAAW5sE,KAAK+qE,kBACd6B,EACAC,EACAA,EAAWG,EAAU,IAGrBvrC,GAEFqrC,EAAY9sE,KAAK+qE,kBACf+B,EACAC,EACAA,EAAYC,EAAU,IAGtBtrC,GAWN,OAAQ1hC,KAAKg+D,YAAYlpD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEwsB,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASo9C,OAAQhD,EAAUE,GACtD,MAEF,OACA,OACExrC,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAASq9C,OACTznB,EAAA51B,SAASo9C,OACbhD,EACAE,GAEF,MAEF,OACA,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASq9C,OAAQjD,EAAUE,GACtD,MAEF,QACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASs9C,OAAQlD,EAAUE,GACtD,MAEF,QACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASu9C,OAAQnD,EAAUE,GACtD,MAEF,QACEtkE,QAAO,GACP84B,EAAO3hC,EAAOymC,oBAGlB,MAEF,KAAKyS,EAAAC,MAAMwW,yBAA0B2d,GAAW,EAChD,KAAKp0B,EAAAC,MAAMoV,kBAKT,GAJA0e,EAAW5sE,KAAKgiE,4BAA4BvgC,EAAMg3B,EAAc,GAChEoU,EAAW7sE,KAAKg+D,YAGZh+D,KAAKg+D,YAAYxiD,GAAE,KAAuB,CAE5C,GADIktC,EAAiBmkB,EAASnkB,eAG5B,GADIx/B,EAAWw/B,EAAe3/B,eAAeo/B,EAAAz8C,aAAa6B,KAC5C,CACZ+zB,EAAOthC,KAAKktE,sBAAsBhkD,EAAUuY,EAAMmrC,EAAUlrC,EAAOiD,GACnE,MAOJ,OAJA3kC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENnJ,KAAKL,OAAOymC,oBAGrB,IAAI5hB,OAAQ,EAGZ,GAAyB,IAArBxkB,KAAKg+D,YAAYlpD,MAGnB,GAFAg4D,EAAY9sE,KAAKsiE,kBAAkB5gC,EAAO71B,EAAAsH,KAAKtP,IAAG,KAClDkpE,EAAY/sE,KAAKg+D,cACXx5C,EAAWxkB,KAAKy+D,gBAAiB,CAErC,KADIuR,EAAYhwE,KAAK0hB,QAAQ3J,aAAapM,EAAAtG,eAAe8B,QACzC,CACdnH,KAAKwL,MACHI,EAAA/C,eAAeivD,mBACfnzB,EAAWx7B,MAAO,SAEpBm4B,EAAO3hC,EAAOymC,oBACd,MAGF,KADInkC,EAAY+tE,EAAUh1D,QAAUg1D,EAAUh1D,QAAQ9Z,IAAIyK,EAAAtG,eAAeqC,KAAO,MAChE,CACd1H,KAAKwL,MACHI,EAAA/C,eAAeivD,mBACfnzB,EAAWx7B,MAAO,aAEpBm4B,EAAO3hC,EAAOymC,oBACd,MAEF59B,OAAOvG,EAAU6S,MAAQqzC,EAAAl5C,YAAYsK,oBACrCvZ,KAAKy+D,eAAiBj6C,EAAWxkB,KAAKmR,SAASqI,gBAAmCvX,EAAW,YAsB/F,GAhBA2qE,EAAW5sE,KAAK+qE,kBACd6B,EACA5sE,KAAKg+D,YACLnyD,EAAAsH,KAAKrP,IAAG,IAGR29B,GAEForC,EAAW7sE,KAAKg+D,YAChB8O,EAAY9sE,KAAKsiE,kBACf5gC,EACA71B,EAAAsH,KAAKrP,IAAG,KAIVipE,EAAY/sE,KAAKg+D,cACXx5C,EAAWxkB,KAAK0+D,gBAAiB,CAErC,KADIsR,EAAYhwE,KAAK0hB,QAAQ3J,aAAapM,EAAAtG,eAAe6B,OACzC,CACdlH,KAAKwL,MACHI,EAAA/C,eAAeivD,mBACfnzB,EAAWx7B,MAAO,QAEpBm4B,EAAO3hC,EAAOymC,oBACd,MAGF,KADInkC,EAAY+tE,EAAUh1D,QAAUg1D,EAAUh1D,QAAQ9Z,IAAIyK,EAAAtG,eAAeqC,KAAO,MAChE,CACd1H,KAAKwL,MACHI,EAAA/C,eAAeivD,mBACfnzB,EAAWx7B,MAAO,YAEpBm4B,EAAO3hC,EAAOymC,oBACd,MAEF59B,OAAOvG,EAAU6S,MAAQqzC,EAAAl5C,YAAYsK,oBACrCvZ,KAAK0+D,eAAiBl6C,EAAWxkB,KAAKmR,SAASqI,gBAAmCvX,EAAW,MAM/Fq/B,EAHI9c,GAAYxkB,KAAKgjE,gBAAgBx+C,GAG9BxkB,KAAKiwE,eAAezrD,EAAU,CAAEooD,EAAUE,IAF1CntE,EAAOymC,oBAIhB,MAEF,KAAKyS,EAAAC,MAAMyW,aAAc0d,GAAW,EACpC,KAAKp0B,EAAAC,MAAMsV,MAKT,GAJAwe,EAAW5sE,KAAKgiE,4BAA4BvgC,EAAMg3B,EAAc,GAChEoU,EAAW7sE,KAAKg+D,YAGZh+D,KAAKg+D,YAAYxiD,GAAE,KAAuB,CAE5C,GADIktC,EAAiBmkB,EAASnkB,eAG5B,GADIx/B,EAAWw/B,EAAe3/B,eAAeo/B,EAAAz8C,aAAa8B,KAC5C,CACZ8zB,EAAOthC,KAAKktE,sBAAsBhkD,EAAUuY,EAAMmrC,EAAUlrC,EAAOiD,GACnE,MAOJ,OAJA3kC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENnJ,KAAKL,OAAOymC,oBAGrB,GAAI6mC,EACFL,EAAW5sE,KAAKgrE,uBAAuB4B,EAAUC,GACjDC,EAAY9sE,KAAKsiE,kBAAkB5gC,EAAOmrC,EAAQ,KAClDE,EAAY/sE,KAAKg+D,gBACZ,CAGL,GAFA8O,EAAY9sE,KAAKgiE,4BAA4BtgC,EAAOmrC,EAAQ,GAC5DE,EAAY/sE,KAAKg+D,cACbgP,EAAanhE,EAAAsH,KAAKy2C,kBAAkBijB,EAAUE,GAAW,IAuB3D,OALA/sE,KAAKwL,MACHI,EAAA/C,eAAeskE,8CACfxoC,EAAWx7B,MAAO,IAAK0jE,EAAS/iE,WAAYijE,EAAUjjE,YAExD9J,KAAKg+D,YAAcvF,EACZ94D,EAAOymC,oBAtBdwmC,EAAW5sE,KAAK+qE,kBACd6B,EACAC,EACAA,EAAWG,EAAU,IAGrBvrC,GAEFqrC,EAAY9sE,KAAK+qE,kBACf+B,EACAC,EACAA,EAAYC,EAAU,IAGtBtrC,GAWN,OAAQ1hC,KAAKg+D,YAAYlpD,MACvB,OACA,OACA,OACEwsB,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS09C,OAAQtD,EAAUE,GACtD,MAEF,OACExrC,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAAS29C,OACT/nB,EAAA51B,SAAS09C,OACbtD,EACAE,GAEF,MAEF,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS29C,OAAQvD,EAAUE,GACtD,MAEF,OACA,OACA,QAIA,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS49C,OAAQxD,EAAUE,GACtD,MAEF,OACExrC,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAAS69C,OACTjoB,EAAA51B,SAAS49C,OACbxD,EACAE,GAEF,MAEF,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS69C,OAAQzD,EAAUE,GACtD,MAEF,QACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS89C,OAAQ1D,EAAUE,GACtD,MAEF,QACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS+9C,OAAQ3D,EAAUE,GACtD,MAEF,QACEtkE,QAAO,GACP84B,EAAO3hC,EAAOymC,oBAGlB,MAEF,KAAKyS,EAAAC,MAAM0W,eAAgByd,GAAW,EACtC,KAAKp0B,EAAAC,MAAMuV,QAKT,GAJAue,EAAW5sE,KAAKgiE,4BAA4BvgC,EAAMg3B,EAAc,GAChEoU,EAAW7sE,KAAKg+D,YAGZh+D,KAAKg+D,YAAYxiD,GAAE,KAAuB,CAE5C,GADIktC,EAAiBmkB,EAASnkB,eAG5B,GADIx/B,EAAWw/B,EAAe3/B,eAAeo/B,EAAAz8C,aAAa+B,KAC5C,CACZ6zB,EAAOthC,KAAKktE,sBAAsBhkD,EAAUuY,EAAMmrC,EAAUlrC,EAAOiD,GACnE,MAOJ,OAJA3kC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENnJ,KAAKL,OAAOymC,oBAGrB,GAAI6mC,EACFL,EAAW5sE,KAAKgrE,uBAAuB4B,EAAUC,GACjDC,EAAY9sE,KAAKsiE,kBAAkB5gC,EAAOmrC,EAAQ,KAClDE,EAAY/sE,KAAKg+D,gBACZ,CAGL,GAFA8O,EAAY9sE,KAAKgiE,4BAA4BtgC,EAAOmrC,EAAQ,GAC5DE,EAAY/sE,KAAKg+D,cACbgP,EAAanhE,EAAAsH,KAAKy2C,kBAAkBijB,EAAUE,GAAW,IAuB3D,OALA/sE,KAAKwL,MACHI,EAAA/C,eAAeskE,8CACfxoC,EAAWx7B,MAAO,IAAK0jE,EAAS/iE,WAAYijE,EAAUjjE,YAExD9J,KAAKg+D,YAAcvF,EACZ94D,EAAOymC,oBAtBdwmC,EAAW5sE,KAAK+qE,kBACd6B,EACAC,EACAA,EAAWG,EAAU,IAGrBvrC,GAEFqrC,EAAY9sE,KAAK+qE,kBACf+B,EACAC,EACAA,EAAYC,EAAU,IAGtBtrC,GAWN,OAAQ1hC,KAAKg+D,YAAYlpD,MACvB,OACA,OAIA,OACEwsB,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASg+C,OAAQ5D,EAAUE,GACtD,MAEF,OACExrC,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAASi+C,OACTroB,EAAA51B,SAASg+C,OACb5D,EACAE,GAEF,MAEF,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASi+C,OAAQ7D,EAAUE,GACtD,MAEF,OACA,OACA,QAIA,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASk+C,OAAQ9D,EAAUE,GACtD,MAEF,OACExrC,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAASm+C,OACTvoB,EAAA51B,SAASk+C,OACb9D,EACAE,GAEF,MAEF,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASm+C,OAAQ/D,EAAUE,GACtD,MAEF,QAEE,KADItoD,EAAWxkB,KAAKu+D,gBACL,CAEb,KADIyR,EAAYhwE,KAAK0hB,QAAQ3J,aAAapM,EAAAtG,eAAe8B,QACzC,CACdnH,KAAKwL,MACHI,EAAA/C,eAAeivD,mBACfnzB,EAAWx7B,MAAO,SAEpBm4B,EAAO3hC,EAAOymC,oBACd,MAGF,KADInkC,EAAY+tE,EAAUh1D,QAAUg1D,EAAUh1D,QAAQ9Z,IAAIyK,EAAAtG,eAAesC,KAAO,MAChE,CACd3H,KAAKwL,MACHI,EAAA/C,eAAeivD,mBACfnzB,EAAWx7B,MAAO,aAEpBm4B,EAAO3hC,EAAOymC,oBACd,MAEF59B,OAAOvG,EAAU6S,MAAQqzC,EAAAl5C,YAAYsK,oBACrCvZ,KAAKu+D,eAAiB/5C,EAAWxkB,KAAKmR,SAASqI,gBAAmCvX,EAAW,MAK7Fq/B,EAHI9c,GAAYxkB,KAAKgjE,gBAAgBx+C,GAG9BxkB,KAAKiwE,eAAezrD,EAAU,CAAEooD,EAAUE,IAF1CntE,EAAOymC,oBAIhB,MAEF,QAEE,KADI5hB,EAAWxkB,KAAKw+D,gBACL,CACb,IAAIwR,EASA/tE,EARJ,KADI+tE,EAAYhwE,KAAK0hB,QAAQ3J,aAAapM,EAAAtG,eAAe6B,OACzC,CACdlH,KAAKwL,MACHI,EAAA/C,eAAeivD,mBACfnzB,EAAWx7B,MAAO,QAEpBm4B,EAAO3hC,EAAOymC,oBACd,MAGF,KADInkC,EAAY+tE,EAAUh1D,QAAUg1D,EAAUh1D,QAAQ9Z,IAAIyK,EAAAtG,eAAesC,KAAO,MAChE,CACd3H,KAAKwL,MACHI,EAAA/C,eAAeivD,mBACfnzB,EAAWx7B,MAAO,YAEpBm4B,EAAO3hC,EAAOymC,oBACd,MAEF59B,OAAOvG,EAAU6S,MAAQqzC,EAAAl5C,YAAYsK,oBACrCvZ,KAAKw+D,eAAiBh6C,EAAWxkB,KAAKmR,SAASqI,gBAAmCvX,EAAW,MAK7Fq/B,EAHI9c,GAAYxkB,KAAKgjE,gBAAgBx+C,GAG9BxkB,KAAKiwE,eAAezrD,EAAU,CAAEooD,EAAUE,IAF1CntE,EAAOymC,oBAIhB,MAEF,QACE59B,QAAO,GACP84B,EAAO3hC,EAAOymC,oBAGlB,MAEF,KAAKyS,EAAAC,MAAM2W,yBAA0Bwd,GAAW,EAChD,KAAKp0B,EAAAC,MAAM0V,kBAKT,GAJAoe,EAAW5sE,KAAKgiE,4BAA4BvgC,EAAMg3B,EAAemY,QAAO,GACxE/D,EAAW7sE,KAAKg+D,YAGZh+D,KAAKg+D,YAAYxiD,GAAE,KAAuB,CAE5C,GADIktC,EAAiBmkB,EAASnkB,eAG5B,GADIx/B,EAAWw/B,EAAe3/B,eAAeo/B,EAAAz8C,aAAa2C,aAC5C,CACZizB,EAAOthC,KAAKktE,sBAAsBhkD,EAAUuY,EAAMmrC,EAAUlrC,EAAOiD,GACnE,MAOJ,OAJA3kC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENnJ,KAAKL,OAAOymC,oBAKrB,OAFA0mC,EAAY9sE,KAAKsiE,kBAAkB5gC,EAAOmrC,EAAQ,KAClDE,EAAY/sE,KAAKg+D,YACTh+D,KAAKg+D,YAAYlpD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEwsB,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASq+C,OAAQjE,EAAUE,GACtD,MAEF,OACA,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASs+C,OAAQlE,EAAUE,GACtD,MAEF,OACA,OACExrC,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAASs+C,OACT1oB,EAAA51B,SAASq+C,OACbjE,EACAE,GAEF,MAEF,QACA,QAKE,OAJA9sE,KAAKwL,MACHI,EAAA/C,eAAekoE,2CACfpsC,EAAWx7B,MAAO0vC,EAAA2U,sBAAsB7oB,EAAWoX,UAAW/7C,KAAKg+D,YAAYl0D,YAE1EnK,EAAOymC,oBAEhB,QACE59B,QAAO,GACP84B,EAAO3hC,EAAOymC,oBAGlB,MAEF,KAAKyS,EAAAC,MAAM4W,+BAAgCud,GAAW,EACtD,KAAKp0B,EAAAC,MAAM2V,wBAKT,GAJAme,EAAW5sE,KAAKgiE,4BAA4BvgC,EAAMg3B,EAAemY,QAAO,GACxE/D,EAAW7sE,KAAKg+D,YAGZh+D,KAAKg+D,YAAYxiD,GAAE,KAAuB,CAE5C,GADIktC,EAAiBmkB,EAASnkB,eAG5B,GADIx/B,EAAWw/B,EAAe3/B,eAAeo/B,EAAAz8C,aAAauC,aAC5C,CACZqzB,EAAOthC,KAAKktE,sBAAsBhkD,EAAUuY,EAAMmrC,EAAUlrC,EAAOiD,GACnE,MAOJ,OAJA3kC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENnJ,KAAKL,OAAOymC,oBAMrB,OAHAwmC,EAAW5sE,KAAKgrE,uBAAuB4B,EAAUC,GACjDC,EAAY9sE,KAAKsiE,kBAAkB5gC,EAAOmrC,EAAQ,KAClDE,EAAY/sE,KAAKg+D,YACTh+D,KAAKg+D,YAAYlpD,MACvB,OACA,OAIA,OACEwsB,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASw+C,OAAQpE,EAAUE,GACtD,MAEF,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASy+C,OAAQrE,EAAUE,GACtD,MAEF,OACExrC,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAASy+C,OACT7oB,EAAA51B,SAASw+C,OACbpE,EACAE,GAEF,MAEF,OACA,OACA,QAIA,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS0+C,OAAQtE,EAAUE,GACtD,MAEF,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS2+C,OAAQvE,EAAUE,GACtD,MAEF,OACExrC,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAAS2+C,OACT/oB,EAAA51B,SAAS0+C,OACbtE,EACAE,GAEF,MAEF,QACA,QAKE,OAJA9sE,KAAKwL,MACHI,EAAA/C,eAAekoE,2CACfpsC,EAAWx7B,MAAO0vC,EAAA2U,sBAAsB7oB,EAAWoX,UAAW/7C,KAAKg+D,YAAYl0D,YAE1EnK,EAAOymC,oBAEhB,QACE59B,QAAO,GACP84B,EAAO3hC,EAAOymC,oBAGlB,MAEF,KAAKyS,EAAAC,MAAM6W,2CAA4Csd,GAAW,EAClE,KAAKp0B,EAAAC,MAAM4V,oCAKT,GAJAke,EAAW5sE,KAAKgiE,4BAA4BvgC,EAAMg3B,EAAemY,QAAO,GACxE/D,EAAW7sE,KAAKg+D,YAGZh+D,KAAKg+D,YAAYxiD,GAAE,KAAuB,CAE5C,GADIktC,EAAiBmkB,EAASnkB,eAG5B,GADIx/B,EAAWw/B,EAAe3/B,eAAeo/B,EAAAz8C,aAAawC,eAC5C,CACZozB,EAAOthC,KAAKktE,sBAAsBhkD,EAAUuY,EAAMmrC,EAAUlrC,EAAOiD,GACnE,MAOJ,OAJA3kC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENnJ,KAAKL,OAAOymC,oBAMrB,OAHAwmC,EAAW5sE,KAAKgrE,uBAAuB4B,EAAUC,GACjDC,EAAY9sE,KAAKsiE,kBAAkB5gC,EAAOmrC,EAAQ,KAClDE,EAAY/sE,KAAKg+D,YACTh+D,KAAKg+D,YAAYlpD,MACvB,OACA,OACA,QACEwsB,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS0+C,OAAQtE,EAAUE,GAExD,OACA,OACA,OACA,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS0+C,OAAQtE,EAAUE,GACtD,MAEF,OACA,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS2+C,OAAQvE,EAAUE,GACtD,MAEF,OACA,OACExrC,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAAS2+C,OACT/oB,EAAA51B,SAAS0+C,OACbtE,EACAE,GAEF,MAEF,QACA,QAKE,OAJA9sE,KAAKwL,MACHI,EAAA/C,eAAekoE,2CACfpsC,EAAWx7B,MAAO0vC,EAAA2U,sBAAsB7oB,EAAWoX,UAAW/7C,KAAKg+D,YAAYl0D,YAE1EnK,EAAOymC,oBAEhB,QACE59B,QAAO,GACP84B,EAAO3hC,EAAOymC,oBAGlB,MAEF,KAAKyS,EAAAC,MAAM8W,iBAAkBqd,GAAW,EACxC,KAAKp0B,EAAAC,MAAM6V,UAKT,GAJAie,EAAW5sE,KAAKgiE,4BAA4BvgC,EAAMg3B,EAAemY,QAAO,GACxE/D,EAAW7sE,KAAKg+D,YAGZh+D,KAAKg+D,YAAYxiD,GAAE,KAAuB,CAE5C,GADIktC,EAAiBmkB,EAASnkB,eAG5B,GADIx/B,EAAWw/B,EAAe3/B,eAAeo/B,EAAAz8C,aAAagC,aAC5C,CACZ4zB,EAAOthC,KAAKktE,sBAAsBhkD,EAAUuY,EAAMmrC,EAAUlrC,EAAOiD,GACnE,MAOJ,OAJA3kC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENnJ,KAAKL,OAAOymC,oBAGrB,GAAI6mC,EACFH,EAAY9sE,KAAKsiE,kBAAkB5gC,EAAOmrC,EAAQ,KAClDE,EAAY/sE,KAAKg+D,gBACZ,CAGL,GAFA8O,EAAY9sE,KAAKgiE,4BAA4BtgC,EAAOmrC,EAAQ,GAC5DE,EAAY/sE,KAAKg+D,cACbgP,EAAanhE,EAAAsH,KAAKy2C,kBAAkBijB,EAAUE,GAAW,IAuB3D,OALA/sE,KAAKwL,MACHI,EAAA/C,eAAeskE,8CACfxoC,EAAWx7B,MAAO,IAAK0jE,EAAS/iE,WAAYijE,EAAUjjE,YAExD9J,KAAKg+D,YAAcvF,EACZ94D,EAAOymC,oBAtBdwmC,EAAW5sE,KAAK+qE,kBACd6B,EACAC,EACAA,EAAWG,EAAU,IAGrBvrC,GAEFqrC,EAAY9sE,KAAK+qE,kBACf+B,EACAC,EACAA,EAAYC,EAAU,IAGtBtrC,GAWN,OAAQ1hC,KAAKg+D,YAAYlpD,MACvB,OACA,OACA,OACA,OACA,OACA,QACA,OACEwsB,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS4+C,OAAQxE,EAAUE,GACtD,MAEF,OACA,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS6+C,OAAQzE,EAAUE,GACtD,MAEF,OACA,OACExrC,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAAS6+C,OACTjpB,EAAA51B,SAAS4+C,OACbxE,EACAE,GAEF,MAEF,QACA,QAKE,OAJA9sE,KAAKwL,MACHI,EAAA/C,eAAekoE,2CACfpsC,EAAWx7B,MAAO0vC,EAAA2U,sBAAsB7oB,EAAWoX,UAAW/7C,KAAKg+D,YAAYl0D,YAE1EnK,EAAOymC,oBAEhB,QACE59B,QAAO,GACP84B,EAAO3hC,EAAOymC,oBAGlB,MAEF,KAAKyS,EAAAC,MAAM+W,WAAYod,GAAW,EAClC,KAAKp0B,EAAAC,MAAM8V,IAKT,GAJAge,EAAW5sE,KAAKgiE,4BAA4BvgC,EAAMg3B,EAAemY,QAAO,GACxE/D,EAAW7sE,KAAKg+D,YAGZh+D,KAAKg+D,YAAYxiD,GAAE,KAAuB,CAE5C,GADIktC,EAAiBmkB,EAASnkB,eAG5B,GADIx/B,EAAWw/B,EAAe3/B,eAAeo/B,EAAAz8C,aAAaiC,YAC5C,CACZ2zB,EAAOthC,KAAKktE,sBAAsBhkD,EAAUuY,EAAMmrC,EAAUlrC,EAAOiD,GACnE,MAOJ,OAJA3kC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENnJ,KAAKL,OAAOymC,oBAGrB,GAAI6mC,EACFH,EAAY9sE,KAAKsiE,kBAAkB5gC,EAAOmrC,EAAQ,KAClDE,EAAY/sE,KAAKg+D,gBACZ,CAGL,GAFA8O,EAAY9sE,KAAKgiE,4BAA4BtgC,EAAOmrC,EAAQ,GAC5DE,EAAY/sE,KAAKg+D,cACbgP,EAAanhE,EAAAsH,KAAKy2C,kBAAkBijB,EAAUE,GAAW,IAuB3D,OALA/sE,KAAKwL,MACHI,EAAA/C,eAAeskE,8CACfxoC,EAAWx7B,MAAO,IAAK0jE,EAAS/iE,WAAYijE,EAAUjjE,YAExD9J,KAAKg+D,YAAcvF,EACZ94D,EAAOymC,oBAtBdwmC,EAAW5sE,KAAK+qE,kBACd6B,EACAC,EACAA,EAAWG,EAAU,IAGrBvrC,GAEFqrC,EAAY9sE,KAAK+qE,kBACf+B,EACAC,EACAA,EAAYC,EAAU,IAGtBtrC,GAWN,OAAQ1hC,KAAKg+D,YAAYlpD,MACvB,OACA,OACA,OACA,OACA,QACEwsB,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS8+C,MAAO1E,EAAUE,GACrD,MAEF,OACA,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS8+C,MAAO1E,EAAUE,GACrD,MAEF,OACA,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS++C,MAAO3E,EAAUE,GACrD,MAEF,OACA,OACExrC,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAAS++C,MACTnpB,EAAA51B,SAAS8+C,MACb1E,EACAE,GAEF,MAEF,QACA,QAKE,OAJA9sE,KAAKwL,MACHI,EAAA/C,eAAekoE,2CACfpsC,EAAWx7B,MAAO0vC,EAAA2U,sBAAsB7oB,EAAWoX,UAAW/7C,KAAKg+D,YAAYl0D,YAE1EnK,EAAOymC,oBAEhB,QACE59B,QAAO,GACP84B,EAAO3hC,EAAOymC,oBAGlB,MAEF,KAAKyS,EAAAC,MAAMgX,aAAcmd,GAAW,EACpC,KAAKp0B,EAAAC,MAAM+V,MAKT,GAJA+d,EAAW5sE,KAAKgiE,4BAA4BvgC,EAAMg3B,EAAemY,QAAO,GACxE/D,EAAW7sE,KAAKg+D,YAGZh+D,KAAKg+D,YAAYxiD,GAAE,KAAuB,CAC5C,IAAIktC,EAEEx/B,EADN,GADIw/B,EAAiBmkB,EAASnkB,eAG5B,GADIx/B,EAAWw/B,EAAe3/B,eAAeo/B,EAAAz8C,aAAakC,aAC5C,CACZ0zB,EAAOthC,KAAKktE,sBAAsBhkD,EAAUuY,EAAMmrC,EAAUlrC,EAAOiD,GACnE,MAOJ,OAJA3kC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENnJ,KAAKL,OAAOymC,oBAGrB,GAAI6mC,EACFH,EAAY9sE,KAAKsiE,kBAAkB5gC,EAAOmrC,EAAQ,KAClDE,EAAY/sE,KAAKg+D,gBACZ,CAGL,GAFA8O,EAAY9sE,KAAKgiE,4BAA4BtgC,EAAOmrC,EAAQ,GAC5DE,EAAY/sE,KAAKg+D,cACbgP,EAAanhE,EAAAsH,KAAKy2C,kBAAkBijB,EAAUE,GAAW,IAuB3D,OALA/sE,KAAKwL,MACHI,EAAA/C,eAAeskE,8CACfxoC,EAAWx7B,MAAO,IAAK0jE,EAAS/iE,WAAYijE,EAAUjjE,YAExD9J,KAAKg+D,YAAcvF,EACZ94D,EAAOymC,oBAtBdwmC,EAAW5sE,KAAK+qE,kBACd6B,EACAC,EACAA,EAAWG,EAAU,IAGrBvrC,GAEFqrC,EAAY9sE,KAAK+qE,kBACf+B,EACAC,EACAA,EAAYC,EAAU,IAGtBtrC,GAWN,OAAQ1hC,KAAKg+D,YAAYlpD,MACvB,OACA,OACA,OACA,OACA,QACEwsB,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASg/C,OAAQ5E,EAAUE,GACtD,MAEF,OACA,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASg/C,OAAQ5E,EAAUE,GACtD,MAEF,OACA,OACExrC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASi/C,OAAQ7E,EAAUE,GACtD,MAEF,OACA,OACExrC,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAASi/C,OACTrpB,EAAA51B,SAASg/C,OACb5E,EACAE,GAEF,MAEF,QACA,QAKE,OAJA9sE,KAAKwL,MACHI,EAAA/C,eAAekoE,2CACfpsC,EAAWx7B,MAAO0vC,EAAA2U,sBAAsB7oB,EAAWoX,UAAW/7C,KAAKg+D,YAAYl0D,YAE1EnK,EAAOymC,oBAEhB,QACE59B,QAAO,GACP84B,EAAO3hC,EAAOymC,oBAGlB,MAKF,KAAKyS,EAAAC,MAAMkW,oBAOT,GANA4d,EAAW5sE,KAAKgiE,4BAA4BvgC,EAAMg3B,EAAc,GAChEoU,EAAW7sE,KAAKg+D,YAChB8O,EAAY9sE,KAAKsiE,kBAAkB5gC,EAAOmrC,EAAQ,KAClDE,EAAY/sE,KAAKg+D,YAGb18B,EAAO3hC,EAAOmvC,gBAAgB89B,GAAU,EAAM,GAChDtrC,EAAO3hC,EAAOolC,SACZ/kC,KAAK2mE,cAAciG,EAAU5sE,KAAKg+D,aAClC8O,EACAxrC,OAIG,CACL,IACI4mC,GADA/hD,EAAOnmB,KAAK++D,aACK2S,oBACnB1xE,KAAKg+D,aACJ73C,EAAKo9C,YAAYqJ,EAAU5sE,KAAKg+D,cAEnC18B,EAAO3hC,EAAOolC,SACZ/kC,KAAK2mE,cACHhnE,EAAOuiC,eAAegmC,EAAUtkD,MAAOgpD,GACvC5sE,KAAKg+D,aAEP8O,EACAntE,EAAOqiC,eACLx5B,OAAO0/D,GAAWtkD,MAClB5jB,KAAKg+D,YAAYlU,iBAIvB,MAEF,KAAKjR,EAAAC,MAAMmW,QAOT,GANA2d,EAAW5sE,KAAKgiE,4BAA4BvgC,EAAMg3B,EAAc,GAChEoU,EAAW7sE,KAAKg+D,YAChB8O,EAAY9sE,KAAKsiE,kBAAkB5gC,EAAOmrC,EAAQ,KAClDE,EAAY/sE,KAAKg+D,YAGb18B,EAAOthC,KAAKL,OAAOmvC,gBAAgB89B,GAAU,EAAM,GACrDtrC,EAAOthC,KAAKL,OAAOolC,SACjB/kC,KAAK2mE,cAAciG,EAAU5sE,KAAKg+D,aAClC18B,EACAwrC,OAIG,CACL,IAAI3mD,EACA+hD,GADA/hD,EAAOnmB,KAAK++D,aACK2S,oBACnB1xE,KAAKg+D,aACJ73C,EAAKo9C,YAAYqJ,EAAU5sE,KAAKg+D,cAEnC18B,EAAO3hC,EAAOolC,SACZ/kC,KAAK2mE,cACHhnE,EAAOuiC,eAAegmC,EAAUtkD,MAAOgpD,GACvC5sE,KAAKg+D,aAEPr+D,EAAOqiC,eACLx5B,OAAO0/D,GAAWtkD,MAClB5jB,KAAKg+D,YAAYlU,gBAEnBgjB,GAGJ,MAEF,QACEtkE,QAAO,GACP84B,EAAOthC,KAAKL,OAAOymC,oBAGvB,OAAO6mC,EACHjtE,KAAK0pE,2BAA2BjoC,EAAMH,EAAMm3B,GAAkB5sD,EAAAsH,KAAKG,MACnEguB,GAGNu8B,EAAA57D,UAAA0vE,qBAAA,SACE7U,EACAx7D,EACAswE,EACAnW,GAEA,IAAIoW,EACAC,EAAyB,EAO7B,OANIhV,EAAiBthD,GAAG7P,EAAAtJ,YAAY4e,WAClC6wD,EAAUF,EACVC,EAAsB,IAEtBA,EAAsB,CAAEvwE,GAEnBtB,KAAK+xE,kBACVjV,EACA+U,EACApW,EACAqW,IAIJjU,EAAA57D,UAAAirE,sBAAA,SACEpQ,EACAr7B,EACAmrC,EACAlrC,EACA+5B,GAEA,IAAIoW,EACAC,EAAyB,EAC7B,GAAIhV,EAAiBthD,GAAG7P,EAAAtJ,YAAY4e,UAAW,CAC7C,IAAIkD,EAAgB3b,OAAOs0D,EAAiBrqD,QAASjK,OAAO2b,EAAcrP,MAAQqzC,EAAAl5C,YAAY8L,OAC9F+2D,EAAUlF,EACViF,EAAsB,CAAEnwC,QAExBmwC,EAAsB,CAAEpwC,EAAMC,GAQhC,OANU1hC,KAAK+xE,kBACbjV,EACA+U,EACApW,EACAqW,IAKJjU,EAAA57D,UAAAmtE,kBAAA,SAAkBzqC,EAAwBqtC,EAA6BvZ,GACrE,IAOIvP,EANA/3C,EADUnR,KAAK0hB,QACIvQ,SACnBgV,EAAOnmB,KAAK++D,YACZj2C,EAAS3X,EAASwnD,kBAAkBh0B,EAAYxe,GACpD,IAAK2C,EAAQ,OAAO9oB,KAAKL,OAAOymC,oBAIhC,OAAQtd,EAAOhU,MACb,KAAKqzC,EAAAl5C,YAAYiO,OACf,IAAKld,KAAK+gE,cAAsBj4C,GAC9B,OAAO9oB,KAAKL,OAAOymC,oBAErB59B,OAAgBsgB,EAAQ3N,MAAQtP,EAAAsH,KAAKG,MAGvC,KAAK60C,EAAAl5C,YAAY4U,MACjB,KAAKskC,EAAAl5C,YAAY6L,MACfouC,EAAmCpgC,EAAQ3N,KAC3C,MAEF,KAAKgtC,EAAAl5C,YAAYwL,mBACf,IAAIE,EAAsCmO,EAAQnO,gBAClD,IAAKA,EAKH,OAJA3a,KAAKwL,MACHI,EAAA/C,eAAeopE,oEACfttC,EAAWx7B,MAAkB2f,EAAQ5X,cAEhClR,KAAKL,OAAOymC,oBAGrB,KADI3e,EAAiBznB,KAAKmR,SAASqI,gBAAgBmB,EAAiB,KAAM1S,EAAAyvD,UAAW3rD,EAAAwqD,WAAWM,SAC3E,OAAO72D,KAAKL,OAAOymC,oBACxC59B,OAAyD,GAAlDif,EAAejV,UAAUiH,eAAejS,QAC/C0hD,EAAazhC,EAAejV,UAAUiH,eAAe,GACrD,MAEF,KAAK0uC,EAAAl5C,YAAY2L,SACf,IAAI6M,EACJ,KADIA,EAA4BqB,EAAQrB,gBAMtC,OAJAznB,KAAKwL,MACHI,EAAA/C,eAAeopE,oEACfttC,EAAWx7B,MAAkB2f,EAAQ5X,cAEhClR,KAAKL,OAAOymC,oBAErB59B,OAAyD,GAAlDif,EAAejV,UAAUiH,eAAejS,QAC/C0hD,EAAazhC,EAAejV,UAAUiH,eAAe,GACrD,MAEF,KAAK0uC,EAAAl5C,YAAY8L,MACf,GAAI5J,EAASslD,yBAA0B,CACrC,IAAIyb,EAAc/rD,EAAK3K,GAAE,MACrB22D,EAAqBrpD,EAAQC,eAAeo/B,EAAAz8C,aAAauB,YAAailE,GAC1E,IAAKC,EAaH,OAZyBrpD,EAAQC,eAAeo/B,EAAAz8C,aAAasB,YAAaklE,GAOxElyE,KAAKwL,MACHI,EAAA/C,eAAeupE,+CACfztC,EAAWx7B,MAAe2f,EAAQ5X,cAPpClR,KAAKwL,MACHI,EAAA/C,eAAeiwD,qCACfn0B,EAAWx7B,MAAe2f,EAAQ5X,cAQ/BlR,KAAKL,OAAOymC,oBAErB59B,OAAqD,GAA9C2pE,EAAW3/D,UAAUiH,eAAejS,QAC3C0hD,EAAaipB,EAAW3/D,UAAUiH,eAAe,GACjD,MAIJ,QAKE,OAJAzZ,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENnJ,KAAKL,OAAOymC,oBAKvB59B,OAAO0gD,GAAcr9C,EAAAsH,KAAKG,MAC1B,IAAIs+D,EAAY5xE,KAAKsiE,kBAAkB0P,EAAiB9oB,EAAU,KAClE,OAAOlpD,KAAK0pE,2BACV/kC,EACAitC,EACAnZ,GAAkB5sD,EAAAsH,KAAKG,OAI3BuqD,EAAA57D,UAAAynE,2BAAA,SACE/kC,EACA0tC,EACAC,QAAA,IAAAA,OAAA,GAEA,IAAI3yE,EAASK,KAAKL,OACdwmB,EAAOnmB,KAAK++D,YACZj2C,EAAS9oB,KAAKmR,SAASwnD,kBAAkBh0B,EAAYxe,GACzD,IAAK2C,EAAQ,OAAOnpB,EAAOymC,oBAE3B,OAAQtd,EAAOhU,MACb,KAAKqzC,EAAAl5C,YAAY4U,MACf,IAAI1I,EAAe2N,EAAQ3N,KAG3B,OAFA3S,OAAO2S,GAAQtP,EAAAsH,KAAKG,MACpBtT,KAAKg+D,YAAcsU,EAAMn3D,EAAOtP,EAAAsH,KAAKG,KACzBwV,EAAQtN,GAAG7P,EAAAtJ,YAAYsZ,QACjC3b,KAAKwL,MACHI,EAAA/C,eAAeopE,oEACfttC,EAAWx7B,MAAO2f,EAAO5X,cAEpBvR,EAAOymC,sBAEZjrB,EAAKK,GAAG,KACV2K,EAAKwjD,gBAAwB7gD,EAAQlF,OAAQuC,EAAKo9C,YAAY8O,EAAsBl3D,IAE/Em3D,EACH3yE,EAAOuiC,eAAuBpZ,EAAQlF,MAAOyuD,GAC7C1yE,EAAOmkC,eAAuBhb,EAAQlF,MAAOyuD,IAEnD,KAAKlqB,EAAAl5C,YAAYiO,OACf,IAAKld,KAAK+gE,cAAsBj4C,GAAS,OAAOnpB,EAAOymC,oBACnDjrB,EAAgB2N,EAAQ3N,KAG5B,GAFA3S,OAAO2S,GAAQtP,EAAAsH,KAAKG,MACpBtT,KAAKg+D,YAAcsU,EAAMn3D,EAAOtP,EAAAsH,KAAKG,KACzBwV,EAAQtN,GAAG7P,EAAAtJ,YAAYsZ,OAMjC,OALA3b,KAAKwL,MACHI,EAAA/C,eAAeopE,oEACfttC,EAAWx7B,MACX2f,EAAO5X,cAEFvR,EAAOymC,oBAGhB,GADAisC,EAAuBryE,KAAKgrE,uBAAuBqH,EAAsBl3D,GACrEm3D,EAAK,CACP,IAAI9R,EAAarlD,EAAK2uC,eAClB54C,EAAe4X,EAAO5X,aAC1B,OAAOvR,EAAOukC,YAAY,KAAM,CAC9BvkC,EAAOqkC,gBAAgB9yB,EAAcmhE,GACrC1yE,EAAOyiC,gBAAgBlxB,EAAcsvD,IACpCA,GAEH,OAAO7gE,EAAOqkC,gBAAgBlb,EAAO5X,aAAcmhE,GAGvD,KAAKlqB,EAAAl5C,YAAY6L,MACf,IAAIgnD,EAA0Bh5C,EAAQg5C,gBACtC,GACUh5C,EAAQtN,GAAG7P,EAAAtJ,YAAYgc,YAE7B8H,EAAK6zC,eAAex+C,GAAG7P,EAAAtJ,YAAYuc,eACnCkjD,EAOF,OAJA9hE,KAAKwL,MACHI,EAAA/C,eAAeopE,oEACfttC,EAAWx7B,MAAe2f,EAAQ5X,cAE7BvR,EAAOymC,oBAEhB,IAAImsC,EAAiB/pE,OAAOxI,KAAKmR,SAASqlD,uBACtCgc,EAAWxyE,KAAKgiE,4BAClBuQ,EACAvyE,KAAKiT,QAAQI,UAAS,GAGpB8H,EAAe2N,EAAQ3N,KAC3Bnb,KAAKg+D,YAAcsU,EAAMn3D,EAAOtP,EAAAsH,KAAKG,KACjCktD,EAAarlD,EAAK2uC,eAKtB,GAJa,IAAT3uC,EAAKrG,OAEPu9D,EAAuBryE,KAAKgrE,uBAAuBqH,EAAsBl3D,IAEvEm3D,EAAK,CACP,IAAIG,EAAOzyE,KAAK++D,YAKZqJ,EAJYqK,EAAKf,oBACnBv2D,GACCs3D,EAAKlP,YAAY8O,EAAsBl3D,IAEXyI,MAG/B,OAAOjkB,EAAOukC,YAAY,KAAM,CAC9BvkC,EAAOmkC,eAAeskC,EAAgBiK,GACtC1yE,EAAOgjC,YACLxnB,EAAKvB,SACL44D,EACA7yE,EAAOqiC,eAAeomC,EAAgB5H,GACtCA,EACQ13C,EAAQzB,cAElB1nB,EAAOqiC,eAAeomC,EAAgB5H,IACrCA,GAGH,OAAO7gE,EAAOgjC,YACZxnB,EAAKvB,SACL44D,EACAH,EACA7R,EACQ13C,EAAQzB,cAItB,KAAK8gC,EAAAl5C,YAAYwL,mBACf,IAAIE,EAAsCmO,EAAQnO,gBAClD,IAAKA,EAKH,OAJA3a,KAAKwL,MACHI,EAAA/C,eAAeopE,oEACfttC,EAAWx7B,MAAO2f,EAAO5X,cAEpBvR,EAAOymC,oBAGhB,KADI3e,EAAiBznB,KAAKmR,SAASqI,gBAAgBmB,EAAiB,KAAM1S,EAAAyvD,UAAW3rD,EAAAwqD,WAAWM,SAC3E,OAAOl3D,EAAOymC,oBAEnC,IAAKksC,EAAK,OAAOtyE,KAAKiwE,eAAexoD,EAAgB,CAAE4qD,IAEvD,IAAI33D,EAAkBlS,OAA2BsgB,EAAQpO,iBAEzD,KADI8M,EAAiBxnB,KAAKmR,SAASqI,gBAAgBkB,EAAiB,KAAMzS,EAAAyvD,UAAW3rD,EAAAwqD,WAAWM,SAC3E,OAAOl3D,EAAOymC,oBACnC,IACIssC,GADA/4D,EAAa6N,EAAehV,UAAUmH,YACRmwC,eAClC,OAAOnqD,EAAOukC,YAAY,KAAM,CAC9BlkC,KAAKiwE,eAAexoD,EAAgB,CAAE4qD,IACtCryE,KAAKiwE,eAAezoD,IACnBkrD,GAEL,KAAKvqB,EAAAl5C,YAAY2L,SACf,IAAI6M,EACJ,KADIA,EAA4BqB,EAAQrB,gBAMtC,OAJAznB,KAAKwL,MACHI,EAAA/C,eAAeopE,oEACfttC,EAAWx7B,MAAO2f,EAAO5X,cAEpBvR,EAAOymC,oBAGhB,IAAKksC,EAAK,CACR,IAAIK,EAAW3yE,KAAKgiE,4BAClBx5D,OAAOxI,KAAKmR,SAASqlD,uBACrBx2D,KAAKiT,QAAQI,UAAS,GAGxB,OAAOrT,KAAKiwE,eAAexoD,EAAgB,CAAEkrD,EAAUN,IAGzD,IAAI7qD,EAEAkrD,GADA/4D,GADA6N,EAAiBhf,OAAkBsgB,EAAQtB,iBACfhV,UAAUmH,YACRmwC,eAC9B0oB,EAAWxyE,KAAKgiE,4BAClBx5D,OAAOxI,KAAKmR,SAASqlD,uBACrBx2D,KAAKiT,QAAQI,UAAS,GAIpB+0D,EADYjiD,EAAKurD,oBAAoB/3D,GAAY,GACtBiK,MAC/B,OAAOjkB,EAAOukC,YAAY,KAAM,CAC9BlkC,KAAKiwE,eAAexoD,EAAgB,CAClC9nB,EAAOuiC,eAAekmC,EAAgBoK,GACtCH,IAEFryE,KAAKiwE,eAAezoD,EAAgB,CAClC7nB,EAAOqiC,eAAeomC,EAAgBsK,MAEvCA,GAEL,KAAKvqB,EAAAl5C,YAAY8L,MACf,IAAI8hC,EAAoB78C,KAAKmR,SAASslD,yBACtC,GAAI5Z,EAAmB,CACrB,IAAIq1B,EAAc/rD,EAAK3K,GAAE,MACrBq9C,EAAqB/vC,EAAQC,eAAeo/B,EAAAz8C,aAAasB,YAAaklE,GAC1E,IAAKrZ,EAKH,OAJA74D,KAAKwL,MACHI,EAAA/C,eAAeiwD,qCACfn0B,EAAWx7B,MAAO2f,EAAO5X,cAEpBvR,EAAOymC,oBAEhB,IAAI+rC,EAAqBrpD,EAAQC,eAAeo/B,EAAAz8C,aAAauB,YAAailE,GAC1E,IAAKC,EAMH,OALAnyE,KAAKwL,MACHI,EAAA/C,eAAeupE,+CACfztC,EAAWx7B,MAAO2f,EAAO5X,cAE3BlR,KAAKg+D,YAAcsU,EAAMzZ,EAAWrmD,UAAUmH,WAAa9N,EAAAsH,KAAKG,KACzD3T,EAAOymC,oBAEhB,IAAI8iB,EAAqBpgC,EAAQ3N,KAO7By3D,GANAL,EAAiB/pE,OAAOxI,KAAKmR,SAASqlD,uBACtCgc,EAAWxyE,KAAKgiE,4BAClBuQ,EACAvyE,KAAKiT,QAAQI,UAAS,GAGNrT,KAAKsiE,kBACrBzlB,EACAhxC,EAAAsH,KAAK/P,IAAG,MAIV,GAAIkvE,EAAK,CACP,IAAIO,EAAkB1sD,EAAKgiD,aAAajf,GAAY,GAChD4pB,EAAmB3sD,EAAKurD,oBAAoB1xE,KAAKg+D,aAAa,GAC9DrkD,EAAak/C,EAAWrmD,UAAUmH,WAEtC,OADAwM,EAAKsiD,cAAcoK,GACZlzE,EAAOukC,YAAY,KAAM,CAC9BlkC,KAAKiwE,eAAekC,EAAY,CAC9BxyE,EAAOuiC,eAAe2wC,EAAgBjvD,MAAO4uD,GAC7C7yE,EAAOuiC,eAAe4wC,EAAiBlvD,MAAOgvD,GAC9CP,IAEFryE,KAAKiwE,eAAepX,EAAY,CAC9Bl5D,EAAOqiC,eAAe6wC,EAAgBjvD,MAAOivD,EAAgB13D,KAAK2uC,gBAClEnqD,EAAOqiC,eAAe8wC,EAAiBlvD,MAAOkvD,EAAiB33D,KAAK2uC,mBAErEnwC,EAAWmwC,gBAEd,OAAO9pD,KAAKiwE,eAAekC,EAAY,CACrCK,EACAI,EACAP,KAWV,OAJAryE,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENxJ,EAAOymC,qBAGhBy3B,EAAA57D,UAAAioE,sBAAA,SAAsBvlC,EAA4B8zB,GAChD,IAAI94D,EAASK,KAAKL,OACdwmB,EAAOnmB,KAAK++D,YAGhB,GAAIp6B,EAAWA,WAAW7vB,MAAQhJ,EAAAiJ,SAAS2kC,MAAO,CAChD,IAAIq5B,EAAO/yE,KAAK++D,YACZ/E,EAAiB+Y,EAAK/Y,eAC1B,IAAKA,EAAex+C,GAAG7P,EAAAtJ,YAAYuc,aAKjC,OAJA5e,KAAKwL,MACHI,EAAA/C,eAAemqE,8FACfruC,EAAWx7B,OAENxJ,EAAOymC,oBAGhB,IAAIjiB,EAAgB3b,OAAOwxD,EAAevnD,QAASjK,OAAO2b,EAAcrP,MAAQqzC,EAAAl5C,YAAY8L,OAC5F,IAAIk4D,EAAoBzqE,OAAe2b,EAAe6D,MAClDsyC,EAAY9xD,OAAOuqE,EAAKxY,YAAY5uD,EAAA3I,cAAckC,QAClDu7D,EAAiBzgE,KAAKiT,QAAQwtD,eAO9B0C,EAAyB,CAC3BxjE,EAAOmkC,eAAew2B,EAAU12C,MAC9B5jB,KAAK+xE,kBACH/xE,KAAKkzE,kBAAkBD,EAAmBtuC,GAC1CA,EAAW3lB,UACX2lB,EACAhlC,EAAOolC,SACLplC,EAAOqiC,eAAes4B,EAAU12C,MAAO68C,GACvC9gE,EAAOqiC,eAAes4B,EAAU12C,MAAO68C,GACvCzgE,KAAK6jE,eAAsB1/C,OAQnC,OAHAnkB,KAAK8jE,wBAA+B3/C,EAAeg/C,GAG/C4P,EAAKl1D,MACP,OAGA7d,KAAKwL,MACHI,EAAA/C,eAAesqE,kFACfxuC,EAAWx7B,OAENxJ,EAAOymC,sBAEhB2sC,EAAK9hE,IAAI,IACTjR,KAAKg+D,YAAcnyD,EAAAsH,KAAKG,KACjB3T,EAAOukC,YAAY,KAAMi/B,IAIlC,IAGI3wD,EACA4gE,EAJAtqD,EAAS9oB,KAAKmR,SAASwnD,kBAAkBh0B,EAAWA,WAAYxe,GACpE,IAAK2C,EAAQ,OAAOnpB,EAAOymC,oBAI3B,OAAQtd,EAAOhU,MAGb,KAAKqzC,EAAAl5C,YAAYsK,mBACf,IAAItX,EAA+B6mB,EAC/Bf,EAAgB4c,EAAW5c,cAG/B,GAAI9lB,EAAUuW,aAAa2vC,EAAAj5C,eAAeyE,SACxC,OAAO3T,KAAKqzE,6BAA6BpxE,EAAW0iC,EAAY8zB,GAGlE,IAAIj0C,EAA4B,KAGhC,GAAIuD,EAAe,CACjB,IAAK9lB,EAAUuZ,GAAG7P,EAAAtJ,YAAYqR,SAK5B,OAJA1T,KAAKwL,MACHI,EAAA/C,eAAe0uD,sBACf5yB,EAAWA,WAAWx7B,MAAOlH,EAAUiP,cAElCvR,EAAOymC,oBAEhB5hB,EAAWxkB,KAAKmR,SAASypD,iCACvB34D,EACA8lB,EACA5B,EAAK6zC,eAAevnD,OACpBxK,EAAAyvD,QAAqBvxC,EAAKzB,yBAC1BigB,OAIG,IAAI1iC,EAAUuZ,GAAG7P,EAAAtJ,YAAYqR,SAAU,CAI5C,IAHA,IAAI4/D,EAAgB,IAAI5jE,IACpBiZ,EAAqBngB,OAAOvG,EAAU0mB,oBACtCgzC,EAAoBhzC,EAAmBnhB,OAClCnH,EAAI,EAAGA,EAAIs7D,IAAqBt7D,EACvCizE,EAAcriE,IAAI0X,EAAmBtoB,GAAGO,KAAKyJ,KAAM,MAGrD,IAAIysD,EAAiB70D,EAAUo5D,cAAc9gB,WACzCyQ,EAAgB8L,EAAetvD,OAC/B+rE,EAAgB5uC,EAAW3lB,UAC3BqmC,EAAekuB,EAAc/rE,OAC7BgsE,EAAgB,IAAIxsE,MAAqBq+C,GAC7C,IAAShlD,EAAI,EAAGA,EAAI2qD,IAAiB3qD,EAAG,CACtC,IAAI+2D,EAAWN,EAAez2D,GAAG8a,KAC7Bs4D,EAAerc,EAAStiD,MAAQhJ,EAAAiJ,SAASqvC,MAAoBgT,EAAUx2D,KAAKwV,KAE5E,KADWghD,EAAUx2D,KAAKiR,WAAWxH,KAErCqpE,EAAqBrzE,EAAIglD,EACzBkuB,EAAclzE,GACdy2D,EAAez2D,GAAG+iB,YACtB,IAAKswD,EAKH,OAJA1zE,KAAKwL,MACHI,EAAA/C,eAAe8W,+BACfglB,EAAWx7B,MAAO6hD,EAAclhD,SAAS,IAAKu7C,EAAav7C,SAAS,KAE/DnK,EAAOymC,oBAEhB,GAAqB,OAAjBqtC,GAAyBH,EAAcvgE,IAAI0gE,GAAe,CAE5D,GADIE,EAAeL,EAAcpyE,IAAIuyE,GACnB,CAChBD,EAAcnzE,GAAKL,KAAKgiE,4BAA4B0R,EAAoBC,EAAY,GACpF,IAAI3G,OAAU,EACd,KAAMA,EAAanhE,EAAAsH,KAAKy2C,kBAAkB+pB,EAAc3zE,KAAKg+D,aAAa,OAClEgP,EAAanhE,EAAAsH,KAAKy2C,kBAAkB+pB,EAAc3zE,KAAKg+D,aAAa,IAKxE,OAJAh+D,KAAKwL,MACHI,EAAA/C,eAAeo5D,mCACfnL,EAAez2D,GAAG8a,KAAKhS,MAAOnJ,KAAKg+D,YAAYl0D,WAAY6pE,EAAa7pE,YAEnEnK,EAAOymC,oBAGlButC,EAAe3G,OAEfwG,EAAcnzE,GAAKL,KAAKgiE,4BAA4B0R,EAAoB7nE,EAAAsH,KAAK/P,IAAG,GAChFuwE,EAAe3zE,KAAKg+D,YAGtBsV,EAAcriE,IAAIwiE,EAAcE,OAC3B,CACL,IAAIC,EAAe5zE,KAAKmR,SAASulD,YAC/BI,EAAez2D,GAAG8a,KAClBgL,EAAK6zC,eACL7zC,EAAKzB,yBAEP,IAAKkvD,EAAc,OAAOj0E,EAAOymC,oBACjCotC,EAAcnzE,GAAKL,KAAKsiE,kBACtBoR,EACAE,EAAY,MAMlB,IAAIlY,EAAwB,IAAI10D,MAAY20D,GAC5C,IAASt7D,EAAI,EAAGA,EAAIs7D,IAAqBt7D,EAAG,CAC1C,IAAIszE,EAAenrE,OAAO8qE,EAAcpyE,IAAIynB,EAAmBtoB,GAAGO,KAAKyJ,OACvEqxD,EAAsBr7D,GAAKszE,EAO7B,OALAnvD,EAAWxkB,KAAKmR,SAASqI,gBACvBvX,EACAy5D,EACAzzD,EAAAyvD,QAAqBvxC,EAAKzB,2BAGrB1kB,KAAKiwE,eAAezrD,EAAUgvD,GADfxzE,KAAKL,OAAOymC,oBAQlC5hB,EAAWxkB,KAAKmR,SAASqI,gBAAgBvX,EAAW,MAEtD,IAAKuiB,EAAU,OAAOxkB,KAAKL,OAAOymC,oBAGlC,IAAIosC,EAA0B,EAS9B,OARIhuD,EAAShJ,GAAG7P,EAAAtJ,YAAY4e,YAC1BuxD,EAAWxyE,KAAKgiE,4BACdx5D,OAAOxI,KAAKmR,SAASqlD,uBACrBx2D,KAAKiT,QAAQI,UAAS,IAKnBrT,KAAK+xE,kBACVvtD,EACAmgB,EAAW3lB,UACX2lB,EACA6tC,GAKJ,KAAKrqB,EAAAl5C,YAAY4U,MACf,GAAIrR,EAAoBsW,EAAQ3N,KAAKzB,mBAAoB,CAErD05D,EADUtqD,EAAQtN,GAAG7P,EAAAtJ,YAAYihB,SACtB3jB,EAAOygC,UAAU0K,QAAgBhiB,EAAQzF,uBAEzC1jB,EAAOqiC,eAAuBlZ,EAAQlF,MAAOwkC,EAAAj+B,WAAWhkB,KAErE,MAMA,OAJAnG,KAAKwL,MACHI,EAAA/C,eAAegyD,uGACfl2B,EAAWx7B,MAAe2f,EAAQ3N,KAAKrR,YAElCnK,EAAOymC,oBAGlB,KAAK+hB,EAAAl5C,YAAYiO,OACf,GAAI1K,EAAqBsW,EAAQ3N,KAAKzB,mBAAoB,CACxD05D,EAAWzzE,EAAOyiC,gBAAyBtZ,EAAQ5X,aAAuB4X,EAAQ3N,KAAK2uC,gBACvF,MAMA,OAJA9pD,KAAKwL,MACHI,EAAA/C,eAAegyD,uGACfl2B,EAAWx7B,MAAgB2f,EAAQ3N,KAAKrR,YAEnCnK,EAAOymC,oBAGlB,KAAK+hB,EAAAl5C,YAAY6L,MACf,IAAIK,EAAe2N,EAAQ3N,KAC3B,GAAI3I,EAAY2I,EAAKzB,mBAAoB,CACvC,IAAI64D,EAAiB/pE,OAAOxI,KAAKmR,SAASqlD,uBACtCgc,EAAWxyE,KAAKgiE,4BAClBuQ,EACAvyE,KAAKiT,QAAQI,UAAS,GAGxB+/D,EAAWzzE,EAAO2iC,WAChB,GACA,EACAkwC,EACApqB,EAAAj+B,WAAWhkB,IACH2iB,EAAQzB,cAElB,MAMA,OAJArnB,KAAKwL,MACHI,EAAA/C,eAAegyD,uGACfl2B,EAAWx7B,MAAOgS,EAAKrR,YAElBnK,EAAOymC,oBAGlB,KAAK+hB,EAAAl5C,YAAY+X,gBACfxU,EAA6BsW,EAAQtW,UACrC4gE,EAAWpzE,KAAKsiE,kBACd39B,EAAWA,WACM7b,EAAQ3N,KAAI,KAI/B,MAGF,KAAKgtC,EAAAl5C,YAAYwL,mBACf,IAAIC,EAAkBlS,OAA2BsgB,EAAQpO,iBAEzD,KADI8M,EAAiBxnB,KAAKmR,SAASqI,gBAAgBkB,EAAiB,OAC/C,OAAO/a,EAAOymC,oBAGnC,GAFAgtC,EAAWpzE,KAAK+xE,kBAAkBvqD,EAAgB,GAAImd,EAAWA,cACjEnyB,EAAYxS,KAAKg+D,YAAYtkD,oBAM3B,OAJA1Z,KAAKwL,MACHI,EAAA/C,eAAegyD,uGACfl2B,EAAWx7B,MAAOnJ,KAAKg+D,YAAYl0D,YAE9BnK,EAAOymC,oBAEhB,MAEF,KAAK+hB,EAAAl5C,YAAY2L,SACf,IAAI4M,EAAiBhf,OAAkBsgB,EAAQtB,gBAS/C,GARA4rD,EAAWpzE,KAAK+xE,kBAAkBvqD,EAAgB,GAAImd,EAAWA,WAC/D3kC,KAAKgiE,4BACHx5D,OAAOxI,KAAKmR,SAASqlD,uBACrBx2D,KAAKiT,QAAQI,UAAS,MAI1Bb,EAAYxS,KAAKg+D,YAAYtkD,oBAM3B,OAJA1Z,KAAKwL,MACHI,EAAA/C,eAAegyD,uGACfl2B,EAAWx7B,MAAOnJ,KAAKg+D,YAAYl0D,YAE9BnK,EAAOymC,oBAEhB,MAIF,QAKE,OAJApmC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENxJ,EAAOymC,oBAGlB,OAAOpmC,KAAK6zE,oBACVrhE,EACA4gE,EACAzuC,EAAW3lB,UACX2lB,IAIIk5B,EAAA57D,UAAAoxE,6BAAR,SACEpxE,EACA0iC,EACA8zB,GAEA,IAAI1wC,EAA+B,KAI/BY,EAAqB1mB,EAAU0mB,mBAC/B0uC,EAAoB1yB,EAAW5c,cAC/B4c,EAAW5c,gBACR9lB,EAAUuZ,GAAG7P,EAAAtJ,YAAYqR,UAC5B1T,KAAKwL,MACHI,EAAA/C,eAAe0uD,sBACf5yB,EAAWx7B,MAAOlH,EAAUiP,cAGhC6W,EAAgB/nB,KAAKmR,SAAS0mD,qBAC5BrvD,OAAOmgB,GACP0uC,EACAr3D,KAAK++D,YAAY/E,eAAevnD,OAChCxK,EAAAyvD,QAAqB13D,KAAK++D,YAAYr6C,yBACtCigB,IAKJ,IAAIrD,EAAOy7B,EAAA+W,YACT9zE,KACAiC,EACA8lB,EACA4c,EAAW3lB,UACXy5C,EACA9zB,GAEF,OAAKrD,IACHthC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENnJ,KAAKL,OAAOymC,sBASvBy3B,EAAA57D,UAAA8xE,mBAAA,SACEvhE,EACA6yC,EACA2uB,EACAvY,GAKA,GAAIuY,IAAwB,MADbxhE,EAAUuT,UAMvB,OAJA/lB,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfm+C,EAAWtyD,QAEN,EAIT,IAAIshD,EAAUj4C,EAAUi4C,QACxB,GAAIA,EAKF,OAJAzqD,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfm+C,EAAWtyD,QAEN,EAGT,IAAI8qE,EAAUzhE,EAAUg4C,mBACpBjgB,EAAU/3B,EAAUiH,eAAejS,OAGvC,OAAI69C,EAAe4uB,GACjBj0E,KAAKwL,MACHyoE,EAAU1pC,EACN3+B,EAAA/C,eAAeqrE,wCACftoE,EAAA/C,eAAe8W,+BACnB87C,EAAWtyD,MAAO8qE,EAAQnqE,WAAYu7C,EAAav7C,aAE9C,KAILu7C,EAAe9a,IAAYkgB,KAC7BzqD,KAAKwL,MACHI,EAAA/C,eAAe8W,+BACf87C,EAAWtyD,MAAOohC,EAAQzgC,WAAYu7C,EAAav7C,aAE9C,IAOX+zD,EAAA57D,UAAA8vE,kBAAA,SACEvtD,EACAqtD,EACApW,EACAqW,QAAA,IAAAA,MAAA,GAEA,IAAIzsB,EAAewsB,EAAoBrqE,OACnCgL,EAAYgS,EAAShS,UAEzB,IAAKxS,KAAK+zE,mBACRvhE,EACA6yC,EACW,GAAXysB,EACArW,GAEA,OAAOz7D,KAAKL,OAAOymC,oBAIrB,GAAI5hB,EAAShM,aAAa2vC,EAAAj5C,eAAeoP,QAAS,CAEhD,GADA9V,QAAQgc,EAAShJ,GAAG7P,EAAAtJ,YAAYqiE,cAC5B1kE,KAAK89D,uBAAuBv7C,SAASiC,GAKlC,CACLxkB,KAAK89D,uBAAuBjzD,KAAK2Z,GACjC,IAAI8c,EAAOthC,KAAKm0E,4BAA4B3vD,EAAUqtD,EAAqBC,GAE3E,OADA9xE,KAAK89D,uBAAuBsW,MACrB9yC,EARPthC,KAAKsL,QACHM,EAAA/C,eAAewrE,yCACf5Y,EAAWtyD,MAAOqb,EAAStT,cAWjC,IAAIojE,EAAuBxC,EAAUzsB,EAAe,EAAIA,EACpDxjB,EAAW,IAAI76B,MAAqBstE,GACpC1wD,EAAQ,EACRkuD,IACFjwC,EAAS,GAAKiwC,EACdluD,EAAQ,GAGV,IADA,IAAInK,EAAiBjH,EAAUiH,eACtBpZ,EAAI,EAAGA,EAAIglD,IAAgBhlD,IAAKujB,EACvCie,EAASje,GAAS5jB,KAAKsiE,kBACrBuP,EAAoBxxE,GACpBoZ,EAAepZ,GAAE,KAMrB,OADAmI,OAAOob,GAAS0wD,GACTt0E,KAAKiwE,eAAezrD,EAAUqd,IAI/Bg8B,EAAA57D,UAAAkyE,4BAAR,SACE3vD,EACAqtD,EACAC,QAAA,IAAAA,MAAA,GAEA,IAAInyE,EAASK,KAAKL,OAGd+hE,EAAe1hE,KAAK++D,YACpB54C,EAAOna,EAAAoa,KAAKmuD,aAAa7S,EAAa4H,eAAgB9kD,GAItDR,EAAO,GAEX,GAAI8tD,EAAS,CACX,IAAI3tD,EAAgB3b,OAAOgc,EAAS/R,QAASjK,OAAO2b,EAAcrP,MAAQqzC,EAAAl5C,YAAY8L,OACtF,IAAIgL,EAAWvd,OAAOgc,EAAShS,UAAUuT,UACrCu0C,EAAYn0C,EAAKsjD,eAAe99D,EAAA3I,cAAckC,MAAO6gB,GAAU,GACnE/B,EAAKnZ,KACHlL,EAAOmkC,eAAew2B,EAAU12C,MAAOkuD,IAEzC,IAAI0C,EAAuBrwD,EAAe6D,KACtCwsD,GAAcruD,EAAKsuD,eAAe9oE,EAAA3I,cAAcmC,OAAQqvE,EAAar5D,KAAMm/C,EAAU12C,OAM3F,IAHA,IAAIyhC,EAAewsB,EAAoBrqE,OACnCgL,EAAYgS,EAAShS,UACrBiH,EAAiBjH,EAAUiH,eACtBpZ,EAAI,EAAGA,EAAIglD,IAAgBhlD,EAAG,CACrC,IAAIq0E,EAAY10E,KAAKsiE,kBACnBuP,EAAoBxxE,GACpBoZ,EAAepZ,GAAE,KAIfs0E,EAAgBxuD,EAAKsjD,eACvBj3D,EAAU0T,iBAAiB7lB,GAC3BoZ,EAAepZ,IACdqhE,EAAa6B,YAAYmR,EAAWj7D,EAAepZ,KAEtD2jB,EAAKnZ,KACHlL,EAAOmkC,eAAe6wC,EAAc/wD,MAAO8wD,IAK/C10E,KAAK++D,YAAc54C,EACnB,IAAI6kC,EAAgBx4C,EAAUiH,eAAejS,OAC7C,IAASnH,EAAIglD,EAAchlD,EAAI2qD,IAAiB3qD,EAAG,CACjD,IAAIwhE,EAAW7hE,KAAKsiE,kBAClB95D,OAAOgc,EAASviB,UAAUo5D,cAAc9gB,WAAWl6C,GAAG+iB,aACtD3J,EAAepZ,GAAE,KAIfs0E,EAAgBxuD,EAAKsjD,eACvBj3D,EAAU0T,iBAAiB7lB,GAC3BoZ,EAAepZ,IACd8lB,EAAKo9C,YAAY1B,EAAUpoD,EAAepZ,KAE7C2jB,EAAKnZ,KACHlL,EAAOmkC,eAAe6wC,EAAc/wD,MAAOi+C,IAO7C,IADA,IAAIsB,EAAQnjE,KAAKkjE,oBAAoB1+C,GACrB/P,GAAPpU,EAAI,EAAO8iE,EAAM37D,QAAQnH,EAAIoU,IAAKpU,EAAG2jB,EAAKnZ,KAAKs4D,EAAM9iE,IAIhE8lB,EAAKigD,mBACL,IAAIzsD,EAAawM,EAAKxM,WAKtB,OAJA3Z,KAAK++D,YAAc2C,EACnB1hE,KAAKg+D,YAAcrkD,EAGZha,EAAOukC,YAAY/d,EAAK6hD,kBAAmBhkD,EAAMrK,EAAWmwC,iBAIrE+T,EAAA57D,UAAAo+D,iBAAA,SAAiBuU,GAQf,IAAI3vD,EAAa2vD,EAAS3vD,WAC1B,GAAIA,EAAY,OAAOA,EAEvB,IAAI4vD,EAAoBD,EAASpiE,UAC7BsiE,EAAeF,EAAS1jE,aACxB6jE,EAAyBF,EAAkBp7D,eAC3Cu7D,EAAgCJ,EAAS3yE,UAAUo5D,cAAc9gB,WACjE06B,EAAmBJ,EAAkBl7D,WACrCu7D,EAAiBL,EAAkB9uD,SACnCkE,EAAa2qD,EAASp5D,GAAG7P,EAAAtJ,YAAY4e,UAGrCk0D,EAAeN,EAAkBrqB,mBACjC4qB,EAAcD,EACdE,EAAeN,EAAuBvtE,OACtC8tE,EAAcD,EACdprD,MACAmrD,IACAE,GAEJ,IAAIC,EAAc/sE,OAAO8sE,EAAcF,GAEnCI,EAAoB,IAAIxuE,MAAqBouE,GAC7CK,EAAe,EAGf91E,EAASK,KAAKL,OACdsqB,IACFurD,EAAkB,GAAK71E,EAAOqiC,eAAe,EAAGhiC,KAAKiT,QAAQwtD,gBAC7DgV,EAAe,GAIjB,IAAK,IAAIp1E,EAAI,EAAGA,EAAI80E,IAAgB90E,IAAKo1E,EACvCD,EAAkBC,GAAgB91E,EAAOqiC,eAAeyzC,EAAcV,EAAuB10E,GAAGypD,gBAElGthD,OAAOitE,GAAgBL,GAGvB,IAAIM,EAAsB,IAAI7pE,EAAAuW,UAAU2yD,EAAwBE,EAAkBC,GAClFQ,EAAoBlrB,mBAAqB6qB,GACzCpwD,EAAa,IAAIkjC,EAAAx1C,SACfiiE,EAASh0E,KAAO,cAChBg0E,EAAS3yE,UACTyzE,EACAd,EAASlwD,0BAEAzT,IAAI2jE,EAASrjE,MAAQ5F,EAAAtJ,YAAYqiE,WAAa/4D,EAAAtJ,YAAYk+D,UACrEqU,EAAS3vD,WAAaA,EAItB,IAAIy8C,EAAe1hE,KAAK++D,YACxB/+D,KAAK++D,YAAc95C,EAAWkB,KAG9B,IAAIyf,EAAW2vC,EAAc,EACzB7vC,EAAQ,IAAI1+B,MAAc4+B,GAC1B+vC,EAAM,KAAOJ,EAAYzrE,SAAS,IACtC,IAASzJ,EAAI,EAAGA,EAAIulC,IAAYvlC,EAAG,CACjC,IAAI8jC,EAAQ9jC,EAAEyJ,SAAS,IAAM6rE,EAC7BjwC,EAAMrlC,GAAK8jC,EAEb,IAAIngB,EAAOrkB,EAAOukC,YAAYwB,EAAM,GAAI,CACtC/lC,EAAOukC,YAAY,aAAc,CAC/BvkC,EAAO8lC,aAAaC,EAAO,aAEzByvC,EACIx1E,EAAO6hC,aACL4mB,EAAA51B,SAASg9C,OACT7vE,EAAOyiC,gBAAgBw7B,EAAgBgY,KAAMxtB,EAAAj+B,WAAWhkB,KACxDxG,EAAOygC,UAAU+0C,IAEnBx1E,EAAOyiC,gBAAgBw7B,EAAgBgY,KAAMxtB,EAAAj+B,WAAWhkB,QAGhExG,EAAOymC,sBAET,IAAS/lC,EAAI,EAAGA,EAAIk1E,IAAel1E,IAAKo1E,EAAc,CACpD,IAAIt6D,EAAO45D,EAAuBI,EAAe90E,GAC7CyS,EAAckiE,EAA8BG,EAAe90E,GAC3D+iB,EAActQ,EAAYsQ,YAC1By+C,OAAQ,EACRz+C,EACFy+C,EAAWliE,EAAOmkC,eAAe2xC,EAC/Bz1E,KAAKsiE,kBACHl/C,EACAjI,EAAI,OAMRnb,KAAKwL,MACHI,EAAA/C,eAAegtE,4CACf/iE,EAAY3J,OAEd04D,EAAWliE,EAAOymC,qBAEpBpiB,EAAOrkB,EAAOukC,YAAYwB,EAAMrlC,EAAI,GAAI,CACtC2jB,EACA69C,IAEF2T,EAAkBC,GAAgB91E,EAAOqiC,eAAeyzC,EAAct6D,EAAK2uC,gBAE7E9pD,KAAK++D,YAAc2C,EACnBl5D,OAAOitE,GAAgBH,GAEvB,IAAIhW,EAAU3/D,EAAOsoC,YACnBhjB,EAAW/T,aACXlR,KAAKu/D,mBACHmW,EAAoBj8D,eACpBi8D,EAAoB/7D,WACpB+7D,EAAoB3vD,UAEtBla,EAAAq+C,mBAAmBjlC,EAAWJ,kBAC9BllB,EAAOukC,YAAY,KAAM,CACvBlgB,EACArkB,EAAOomC,WACL+uC,EACAU,EACAP,EAAiBnrB,iBAElBmrB,EAAiBnrB,iBAGtB,OADA7kC,EAAWuB,SAAS7mB,EAAQ2/D,GACrBr6C,GAID44C,EAAA57D,UAAA6zE,cAAR,WACE,IAAK91E,KAAKo+D,QAAS,CACjB,IAAIz+D,EAASK,KAAKL,OAClBK,KAAKo+D,QAAUz+D,EAAOioC,UACpBg2B,EAAgBgY,KAChBxtB,EAAAj+B,WAAWhkB,KACX,EACAxG,EAAOygC,UAAU,IAGrB,OAAOw9B,EAAgBgY,MAIjB/X,EAAA57D,UAAAq+D,cAAR,WACE,IAAIpvD,EAAe0sD,EAAgBmY,QACnC,IAAK/1E,KAAKq+D,QAAS,CACjB,IAAI1+D,EAASK,KAAKL,OAClBK,KAAKq+D,QAAU1+D,EAAOsoC,YAAY/2B,EAChClR,KAAKu/D,mBAAmB,CAAE1zD,EAAAsH,KAAK1P,KAAOoI,EAAAsH,KAAKG,MAC3C,KACA3T,EAAOqkC,gBAAgBhkC,KAAK81E,gBAC1Bn2E,EAAOqiC,eAAe,EAAGomB,EAAAj+B,WAAWhkB,OAGxCxG,EAAO+oC,kBAAkBx3B,EAAc,YAEzC,OAAOA,GAIT2sD,EAAA57D,UAAAguE,eAAA,SACEzrD,EACAqd,QAAA,IAAAA,MAAA,MAEA,IAAIm0C,EAAcn0C,EAAWA,EAASr6B,OAAS,EAC3C69C,EAAe2wB,EAEfZ,EADe5wD,EAAShS,UAAUg4C,mBAElC6qB,EAAe7wD,EAAShS,UAAUiH,eAAejS,OACjD8tE,EAAcD,EACd7wD,EAAShJ,GAAG7P,EAAAtJ,YAAY4e,cACxBm0D,IACAE,IACAjwB,GAEJ78C,OAAOwtE,GAAeZ,GAEtB,IAAIz1E,EAASK,KAAKL,OAClB,IAAKK,KAAKgjE,gBAAgBx+C,GAAW,OAAO7kB,EAAOymC,oBACnD,IAAIzsB,EAAa6K,EAAShS,UAAUmH,WAChCs8D,EAAezxD,EAAShJ,GAAG7P,EAAAtJ,YAAY8/D,eAG3C,GAAI6T,EAAcV,EAAa,CACxBzzC,KACHA,EAAW,IAAI76B,MAAMsuE,IACZ9tE,OAAS,GAEpB,IAAIiS,EAAiB+K,EAAShS,UAAUiH,eACpCq9C,EAAiBtyC,EAASviB,UAAUo5D,cAAc9gB,WACtD/xC,OAAOsuD,EAAetvD,QAAUiS,EAAejS,QAE/C,IADA,IAAI0uE,GAA0B,EACrB71E,EAAIglD,EAAchlD,EAAIg1E,IAAgBh1E,EAAG,CAChD,IAAI+iB,EAAc0zC,EAAez2D,GAAG+iB,YACpC,IAAMA,IAAetX,EAAAitC,oBAAoB31B,EAAYtO,MAAQ,CAC3DohE,GAA0B,EAC1B,OAGJ,GAAIA,EACF,IAAS71E,EAAIglD,EAAchlD,EAAIg1E,IAAgBh1E,EAC7CwhC,EAASh3B,KACP7K,KAAKsiE,kBACSxL,EAAez2D,GAAG+iB,YAC9B3J,EAAepZ,GAAE,UAMlB,CACL,IAASA,EAAIglD,EAAchlD,EAAIg1E,IAAgBh1E,EAC7CwhC,EAASh3B,KAAK4O,EAAepZ,GAAG0pD,aAAapqD,IAE/C,IAAKs2E,EAAc,CACjB,IAAIrB,EAAWpwD,EAEf,GADAA,EAAWxkB,KAAKqgE,iBAAiB77C,IAC5BxkB,KAAKgjE,gBAAgBx+C,GAAW,OAAO7kB,EAAOymC,oBACnD5hB,EAAS2B,KAAK5U,MAAQqjE,EAASzuD,KAAK5U,MACpC,IAAImhE,EAAmB/4D,EAAWmwC,eAElC,OADA9pD,KAAKg+D,YAAcrkD,EACZha,EAAOukC,YAAY,KAAM,CAC9BvkC,EAAOqkC,gBAAgBhkC,KAAK81E,gBAAiBn2E,EAAOygC,UAAUilB,IAC9D1lD,EAAOomC,WAAWvhB,EAAStT,aAAc2wB,EAAU6wC,IAClDA,KAOT,OADA1yE,KAAKg+D,YAAcrkD,EACZha,EAAOomC,WAAWvhB,EAAStT,aAAc2wB,EAAUloB,EAAWmwC,iBAIvE+T,EAAA57D,UAAA4xE,oBAAA,SACErhE,EACA4gE,EACAvB,EACApW,EACAqW,QAAA,IAAAA,MAAA,GAEA,IAAIzsB,EAAewsB,EAAoBrqE,OAEvC,IAAKxH,KAAK+zE,mBACRvhE,EACA6yC,EACW,GAAXysB,EACArW,GAEA,OAAOz7D,KAAKL,OAAOymC,oBAGrB,IAAIkuC,EAAuBxC,EAAUzsB,EAAe,EAAIA,EACpDxjB,EAAW,IAAI76B,MAAqBstE,GACpC1wD,EAAQ,EACRkuD,IACFjwC,EAAS,GAAKiwC,EACdluD,EAAQ,GAGV,IADA,IAAInK,EAAiBjH,EAAUiH,eACtBpZ,EAAI,EAAGA,EAAIglD,IAAgBhlD,IAAKujB,EACvCie,EAASje,GAAS5jB,KAAKsiE,kBACrBuP,EAAoBxxE,GACpBoZ,EAAepZ,GAAE,KAMrB,OADAmI,OAAOob,GAAS0wD,GACTt0E,KAAKm2E,iBAAiB3jE,EAAW4gE,EAAUvxC,IAIpDg8B,EAAA57D,UAAAk0E,iBAAA,SACE3jE,EACA4gE,EACAvxC,QAAA,IAAAA,MAAA,MAEA,IAAIm0C,EAAcn0C,EAAWA,EAASr6B,OAAS,EAC3C69C,EAAe2wB,EAEfZ,EADe5iE,EAAUg4C,mBAEzB6qB,EAAe7iE,EAAUiH,eAAejS,OACxC8tE,EAAcD,EACd7iE,EAAUuT,aACVqvD,IACAE,IACAjwB,GAEJ78C,OAAOwtE,GAAeZ,GAEtBp1E,KAAKu/D,mBAAmB/sD,EAAUiH,eAAgBjH,EAAUmH,WAAYnH,EAAUuT,UAClF,IAAIpmB,EAASK,KAAKL,OAGlB,GAAIq2E,EAAcV,EAAa,CACxBzzC,KACHA,EAAW,IAAI76B,MAAMsuE,IACZ9tE,OAAS,GAGpB,IADA,IAAIiS,EAAiBjH,EAAUiH,eACtBpZ,EAAIglD,EAAchlD,EAAIg1E,IAAgBh1E,EAC7CwhC,EAASh3B,KAAK4O,EAAepZ,GAAG0pD,aAAapqD,IAIjD,IAAIga,EAAanH,EAAUmH,WAE3B,OADA3Z,KAAKg+D,YAAcrkD,EACZha,EAAOukC,YAAY,KAAM,CAC9BvkC,EAAOqkC,gBAAgBhkC,KAAK81E,gBAC1Bn2E,EAAOygC,UAAUilB,IAEnB1lD,EAAOsmC,mBAAmBmtC,EAAUvxC,EAAUrvB,EAAUyU,sBACvDtN,EAAWmwC,iBAGhB+T,EAAA57D,UAAAkoE,uBAAA,SAAuBxlC,EAA6B8zB,GAIlD,IAHA,IAAIlc,EAAc5X,EAAW4X,YACzB65B,EAAiB75B,EAAY/0C,OAC7B6uE,EAAQ,IAAIrvE,MAAqBovE,KAC5B/1E,EAAI,EAAGA,EAAI+1E,IAAkB/1E,EACpCg2E,EAAMh2E,GAAKL,KAAKsiE,kBACd/lB,EAAYl8C,GACZwL,EAAAsH,KAAKG,UAWT,OANA+iE,EAAMD,GAAkBp2E,KAAKsiE,kBAC3B/lB,EAAY65B,GACZ3d,OAIKz4D,KAAKL,OAAOukC,YAAY,KAAMmyC,EAAOr2E,KAAKg+D,YAAYlU,iBAG/D+T,EAAA57D,UAAAmoE,+BAAA,SAA+BzlC,EAAqC8zB,GAClE,IAAI3vC,EAAS9oB,KAAKmR,SAAS4nD,+BACzBp0B,EACA3kC,KAAK++D,YACLtG,GAEF,IAAK3vC,EAAQ,OAAO9oB,KAAKL,OAAOymC,oBAChC,OAAQtd,EAAOhU,MACb,KAAKqzC,EAAAl5C,YAAY8L,MACf,IAAIm3D,EAAclyE,KAAK++D,YAAYvjD,GAAE,MACjCq9C,EAAqB/vC,EAAQC,eAAeo/B,EAAAz8C,aAAasB,YAAaklE,GAC1E,IAAKrZ,EAKH,OAJA74D,KAAKwL,MACHI,EAAA/C,eAAeiwD,qCACfn0B,EAAWA,WAAWx7B,MAAe2f,EAAQ5X,cAExClR,KAAKL,OAAOymC,oBAErB,IAAI0rC,EAAU9xE,KAAKsiE,kBACjB39B,EAAWA,WACH7b,EAAQ3N,KAAI,KAItB,OAAOnb,KAAK+xE,kBAAkBlZ,EAAY,CACxCl0B,EAAWkY,mBACVlY,EAAYmtC,GAOnB,OAJA9xE,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENnJ,KAAKL,OAAOymC,qBAGrBy3B,EAAA57D,UAAAooE,0BAAA,SACE1lC,EACA2xC,GAEA,IAAIxjE,EAAc6xB,EAAW7xB,YAAYy0C,QACzC/+C,QAAQsK,EAAYgQ,gBACpB,IAUI0B,EAVA2B,EAAOnmB,KAAK++D,YACZ/E,EAAiB7zC,EAAK6zC,eACtB/3D,EAAY,IAAIkmD,EAAAv1C,kBAClBE,EAAYlS,KAAKyJ,KAAK7C,OAClBsL,EAAYlS,KAAKyJ,KACjB,cAAgB2vD,EAAe70C,mBAAmBrb,SAAS,IAC/DkwD,EACAlnD,EACAq1C,EAAAj5C,eAAesC,MAGbkT,EAA0Bzc,EAAAyvD,QAAQvxC,EAAKzB,yBAI3C,GAAI4xD,EAAqB,CACvB,IAAIjb,EAAgBp5D,EAAUo5D,cAC1BvE,EAAiBuE,EAAc9gB,WAC/Bg8B,EAAuBzf,EAAetvD,OAGtCiS,EAAiB68D,EAAoB78D,eACrCuxC,EAAgBvxC,EAAejS,OACnC,GAAI+uE,EAAuBvrB,EAKzB,OAJAhrD,KAAKwL,MACHI,EAAA/C,eAAe8W,+BACfglB,EAAWx7B,MAAO6hD,EAAclhD,WAAYysE,EAAqBzsE,YAE5D9J,KAAKL,OAAOymC,oBAKrB,IADA,IAAImkB,EAAiB,IAAIvjD,MAAcuvE,GAC9Bl2E,EAAI,EAAGA,EAAIk2E,IAAwBl2E,EAAG,CAC7C,IAAI02D,EAAgBD,EAAez2D,GAEnC,GADAkqD,EAAelqD,GAAK02D,EAAcn2D,KAAKyJ,MAClCyB,EAAAo8C,cAAc6O,EAAc57C,MAAO,CAMtC,KALI4mD,EAAe/hE,KAAKmR,SAASulD,YAC/BK,EAAc57C,KACd6+C,EAAevnD,OACfiS,IAEiB,OAAO1kB,KAAKL,OAAOymC,oBACtC,IAAK3sB,EAAepZ,GAAGspD,uBAAuBoY,GAK5C,OAJA/hE,KAAKwL,MACHI,EAAA/C,eAAeo5D,mCACflL,EAAc5tD,MAAOsQ,EAAepZ,GAAGyJ,WAAYi4D,EAAaj4D,YAE3D9J,KAAKL,OAAOymC,qBAOzB,IAAIzsB,EAAa28D,EAAoB38D,WACrC,IAAK7N,EAAAo8C,cAAcmT,EAAc1hD,YAAa,CAM5C,KALIooD,EAAe/hE,KAAKmR,SAASulD,YAC/B2E,EAAc1hD,WACdqgD,EAAevnD,OACfiS,IAEiB,OAAO1kB,KAAKL,OAAOymC,oBACtC,GACEzsB,GAAc9N,EAAAsH,KAAKG,KACfyuD,GAAgBl2D,EAAAsH,KAAKG,MACpByuD,EAAapY,uBAAuBhwC,GAMzC,OAJA3Z,KAAKwL,MACHI,EAAA/C,eAAeo5D,mCACf5G,EAAc1hD,WAAWxQ,MAAO44D,EAAaj4D,WAAY6P,EAAW7P,YAE/D9J,KAAKL,OAAOymC,oBAKvB,IAAIrgB,EAAWuwD,EAAoBvwD,SAC/BywD,EAAenb,EAAc7gB,iBACjC,GAAIg8B,EAAc,CAChB,IAAKzwD,EAKH,OAJA/lB,KAAKwL,MACHI,EAAA/C,eAAe2xD,+CACfgc,EAAartE,OAERnJ,KAAKL,OAAOymC,oBAErB,IAAI27B,EAKJ,KALIA,EAAe/hE,KAAKmR,SAASulD,YAC/B8f,EACAxc,EAAevnD,OACfiS,IAEiB,OAAO1kB,KAAKL,OAAOymC,oBACtC,IAAKrgB,EAAS4jC,uBAAuBoY,GAKnC,OAJA/hE,KAAKwL,MACHI,EAAA/C,eAAeo5D,mCACfuU,EAAartE,MAAO4c,EAASjc,WAAYi4D,EAAaj4D,YAEjD9J,KAAKL,OAAOymC,oBAIvB,IAAI5zB,EAAY,IAAI3G,EAAAuW,UAAU3I,EAAgBE,EAAYoM,GAS1D,GARAvT,EAAUg4C,mBAAqBQ,EAC/Bx4C,EAAU+3C,eAAiBA,EAC3B/lC,EAAW,IAAI2jC,EAAAx1C,SACb1Q,EAAUrB,KACVqB,EACAuQ,EACAkS,IAEG1kB,KAAKgjE,gBAAgBx+C,GAAW,OAAOxkB,KAAKL,OAAOymC,oBACxDpmC,KAAKg+D,YAAcsY,EAAoBn7D,SAGlC,CAML,KALAqJ,EAAWxkB,KAAKihE,kCACdh/D,EACA,GACAyiB,IAEa,OAAO1kB,KAAKL,OAAOymC,oBAClCpmC,KAAKg+D,YAAcx5C,EAAShS,UAAU2I,KAGxC,IAAIyI,EAAQ5jB,KAAKykE,yBAAyBjgD,GAC1C,OAAOZ,EAAQ,EACX5jB,KAAKL,OAAOymC,oBACZpmC,KAAKL,OAAOygC,UAAUxc,IAIpBi6C,EAAA57D,UAAAw0E,4BAAR,SAAoC9xC,GAClC,IAAItkB,EAAeskB,EAAWx7B,MAAMY,OAAOsW,aACvC5Q,EAAczP,KAAK0hB,QAAQjS,YAC/BjH,OAAOiH,EAAYsD,IAAIsN,IACH5Q,EAAYvO,IAAImf,GACjB7E,GAAG7P,EAAAtJ,YAAYk+D,WAChCvgE,KAAKshE,kBAAkBjhD,EAAcskB,IASzCk5B,EAAA57D,UAAAqoE,4BAAA,SACE3lC,EACA8zB,EACAie,GAEA,IAAI/2E,EAASK,KAAKL,OACdwmB,EAAOnmB,KAAK++D,YACZ/E,EAAiB7zC,EAAK6zC,eAG1B,OAAQr1B,EAAW7vB,MACjB,KAAKhJ,EAAAiJ,SAASikC,KACZ,IAAI/lC,EAAUjT,KAAKiT,QAInB,OAHKwlD,EAAe/P,iBAClB1oD,KAAKg+D,YAAc/qD,EAAQI,WAEtBJ,EAAQc,SACXpU,EAAO6gC,UAAU,GACjB7gC,EAAOygC,UAAU,GAEvB,KAAKt0B,EAAAiJ,SAASkkC,KAEZ,OADAj5C,KAAKg+D,YAAcnyD,EAAAsH,KAAKvP,KACjBjE,EAAOygC,UAAU,GAE1B,KAAKt0B,EAAAiJ,SAASmkC,MAEZ,OADAl5C,KAAKg+D,YAAcnyD,EAAAsH,KAAKvP,KACjBjE,EAAOygC,UAAU,GAE1B,KAAKt0B,EAAAiJ,SAAS+wC,KACZ,GAAIkU,EAAex+C,GAAG7P,EAAAtJ,YAAY4e,UAAW,CAC3C,IAAIq5C,EAAY9xD,OAAO2d,EAAKo0C,YAAY5uD,EAAA3I,cAAckC,QAClDif,EAAgB3b,OAAOwxD,EAAevnD,QAASjK,OAAO2b,EAAcrP,MAAQqzC,EAAAl5C,YAAY8L,OAC5F,IAAI0lD,EAAiBzgE,KAAKiT,QAAQwtD,eAClC,GAAIzG,EAAex+C,GAAG7P,EAAAtJ,YAAYuc,eAC3BuH,EAAK3K,GAAE,IAAuB,CACjC2K,EAAKlV,IAAG,IAOR,IAAIkyD,EAAyB,CAC3BxjE,EAAOolC,SACLplC,EAAOyhC,YAAYq/B,GAAkBrY,EAAAj+B,WAAW/jB,IAAMgiD,EAAAl7B,QAAQ02C,OAASxb,EAAAl7B,QAAQw2C,OAC7E/jE,EAAOqiC,eAAes4B,EAAU12C,MAAO68C,IAEzC9gE,EAAOmkC,eAAew2B,EAAU12C,MAC9B5jB,KAAK6jE,eAAsB1/C,MASjC,OALAnkB,KAAK8jE,wBAA+B3/C,EAAeg/C,GACnDA,EAAMt4D,KACJlL,EAAOqiC,eAAes4B,EAAU12C,MAAO68C,IAEzCzgE,KAAKg+D,YAAc1D,EAAUn/C,KACtBxb,EAAOukC,YAAY,KAAMi/B,EAAO1C,GAI3C,IAAI16C,EAAWvd,OAAOwxD,EAAexnD,UAAUuT,UAE/C,OADA/lB,KAAKg+D,YAAcj4C,EACZpmB,EAAOqiC,eAAes4B,EAAU12C,MAAOmC,EAAS+jC,gBAOzD,OALA9pD,KAAKwL,MACHI,EAAA/C,eAAe2xD,+CACf71B,EAAWx7B,OAEbnJ,KAAKg+D,YAAch+D,KAAKiT,QAAQI,UACzB1T,EAAOymC,oBAEhB,KAAKt6B,EAAAiJ,SAAS2kC,MACZ,IAAIi9B,EAAO32E,KAAK++D,YACZ6X,EAAiBD,EAAK3c,eAU1B,GATI4c,EAAep7D,GAAG7P,EAAAtJ,YAAYuc,eAC3B+3D,EAAKn7D,GAAE,KAEVxb,KAAKwL,MACHI,EAAA/C,eAAeguE,iGACflyC,EAAWx7B,QAIbwtE,EAAKn7D,GAAE,MAA4B,CACrC,IAAIs7D,EAAaH,EAAKpc,YAAY5uD,EAAA3I,cAAckC,OAChD,GAAI4xE,EAAY,CACd,IACI9uD,EADkBxf,OAAOsuE,EAAW37D,KAAKutC,gBAClB1gC,KAC3B,GAAIA,EAEF,OADAhoB,KAAKg+D,YAAch2C,EAAK7M,KACjBxb,EAAOqiC,eAAe80C,EAAWlzD,MAAOoE,EAAK7M,KAAK2uC,iBAI/D,GAAI8sB,EAAep7D,GAAG7P,EAAAtJ,YAAY4e,UAAW,CACvCkD,EAAgB3b,OAAOouE,EAAenkE,QAASjK,OAAO2b,EAAcrP,MAAQqzC,EAAAl5C,YAAY8L,OAC5F,IAAIk4D,EAA4B9uD,EAAe6D,KAC/C,GAAIirD,EAAmB,CACrB,IAAI8D,EAAY9D,EAAkB93D,KAElC,OADAnb,KAAKg+D,YAAc+Y,EACZp3E,EAAOqiC,eAAe,EAAG+0C,EAAUjtB,iBAQ9C,OALA9pD,KAAKwL,MACHI,EAAA/C,eAAe6xD,iDACf/1B,EAAWx7B,OAEbnJ,KAAKg+D,YAAch+D,KAAKiT,QAAQI,UACzB1T,EAAOymC,oBAIlBpmC,KAAKy2E,4BAA4B9xC,GAGjC,IAAI7b,EAAS9oB,KAAKmR,SAASknD,kBACzB1zB,EACAxe,EACAnmB,KAAK+9D,aAAe/D,GAEtB,IAAKlxC,EAAQ,OAAOnpB,EAAOymC,oBAE3B,OAAQtd,EAAOhU,MACb,KAAKqzC,EAAAl5C,YAAY4U,MACf,IAAImzD,EAAoBluD,EAAQ3N,KAEhC,GADA3S,OAAOwuE,GAAanrE,EAAAsH,KAAKG,MACbwV,EAAQtN,GAAG7P,EAAAtJ,YAAYihB,SACjC,OAAOtjB,KAAK4pE,sBAA6B9gD,EAAQ2vC,EAAgBie,GAEnE,IAAI7wD,EAAqBiD,EAAQlF,MAGjC,OAFApb,OAAOqd,GAAc,GACrB7lB,KAAKg+D,YAAcgZ,EACZh3E,KAAKL,OAAOqiC,eAAenc,EAAYmxD,EAAUltB,gBAE1D,KAAK3B,EAAAl5C,YAAYiO,OACf,IAAKld,KAAK+gE,cAAsBj4C,GAC9B,OAAO9oB,KAAKL,OAAOymC,oBAErB,IAAI+D,EAAsBrhB,EAAQ3N,KAElC,OADA3S,OAAO2hC,GAAct+B,EAAAsH,KAAKG,MACbwV,EAAQtN,GAAG7P,EAAAtJ,YAAYihB,SAC3BtjB,KAAK4pE,sBAA8B9gD,EAAQ2vC,EAAgBie,IAEpE12E,KAAKg+D,YAAc7zB,EACZnqC,KAAKL,OAAOyiC,gBAAyBtZ,EAAQ5X,aAAci5B,EAAW2f,iBAE/E,KAAK3B,EAAAl5C,YAAYuU,UACf,OAAKsF,EAAOtN,GAAG7P,EAAAtJ,YAAYk+D,WAQ3BvgE,KAAKg+D,YAAcnyD,EAAAsH,KAAK/P,IACR0lB,EAAQtN,GAAG7P,EAAAtJ,YAAYihB,UACrC9a,OAA4C,GAAzBsgB,EAAQ3F,mBACpBnjB,KAAKL,OAAOygC,UAAU0K,QAAoBhiB,EAAQzF,wBAEpDrjB,KAAKL,OAAOyiC,gBAA4BtZ,EAAQ5X,aAAck3C,EAAAj+B,WAAWhkB,OAZ9EnG,KAAKwL,MACHI,EAAA/C,eAAeouE,+HACftyC,EAAWx7B,OAEbnJ,KAAKg+D,YAAcnyD,EAAAsH,KAAK/P,IACjBpD,KAAKL,OAAOymC,qBASvB,KAAK+hB,EAAAl5C,YAAYsK,mBACf,IAAIiL,EAAWxkB,KAAKmR,SAASqI,gBACRsP,EACnB,KACA7gB,EAAAyvD,QAAqBvxC,EAAKzB,0BAE5B,IAAMF,IAAYxkB,KAAKgjE,gBAAgBx+C,GAAY,OAAO7kB,EAAOymC,oBACjE,IAAIxiB,EAAQ5jB,KAAKykE,yBAAyBjgD,GAE1C,OADAxkB,KAAKg+D,YAAcx5C,EAAShS,UAAU2I,KAC/Bnb,KAAKL,OAAOygC,UAAUxc,GAOjC,OAJA5jB,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENnJ,KAAKL,OAAOymC,qBAGrBy3B,EAAA57D,UAAAsoE,4BAAA,SACE5lC,EACA8zB,GAEA,IAAI94D,EAASK,KAAKL,OAId2hC,EAAOthC,KAAKgiE,4BAA4Br9B,EAAWA,WAAY3kC,KAAKiT,QAAQI,UAAS,GACrF6jE,EAAal3E,KAAKg+D,YAClBv6B,EAAezjC,KAAKmR,SAASulD,YAC/B/xB,EAAW0Y,OACXr9C,KAAK++D,YAAY/E,gBAGnB,OADAh6D,KAAKg+D,YAAcnyD,EAAAsH,KAAKvP,KACnB6/B,EAGAA,EAAajoB,GAAE,KAKlB07D,EAAW17D,GAAE,OAAyBioB,EAAajoB,GAAE,MACrD07D,EAAWvuB,gBAAgB9/B,eAAe4a,GAEnC9jC,EAAO6hC,aACZ01C,EAAW17D,GAAE,IACT4sC,EAAA51B,SAAS+5C,MACTnkB,EAAA51B,SAASy8C,MACb3tC,EACA41C,EAAWntB,aAAapqD,IAGrBA,EAAOygC,UAAU82C,EAAWruD,eAAe4a,GAAgB,EAAI,GAf7D9jC,EAAOygC,UAAU82C,GAAczzC,EAAe,EAAI,GAJjC9jC,EAAOymC,qBAsBnCy3B,EAAA57D,UAAAuoE,yBAAA,SACE7lC,EACA8zB,EACA0e,QAAA,IAAAA,OAAA,GAEA,IAAIx3E,EAASK,KAAKL,OAClB,OAAQglC,EAAWxlB,aACjB,KAAKrT,EAAAsT,YAAY8lC,MACf18C,QAAQ2uE,GACR,IAAI/tB,EAAYqP,EAAe/P,eAC/B,OACEU,GACAA,EAAUnnD,WAAajC,KAAK0hB,QAAQ1R,eAE7BhQ,KAAKo3E,oBACV5uE,OAAO4gD,EAAUrhC,eAAe,GACP4c,EAAY8W,oBACrC,EACA9W,IAGJ3kC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENxJ,EAAOymC,qBAEhB,KAAKt6B,EAAAsT,YAAYmmC,MACf,IAAI8xB,EAAsC1yC,EAAYrjC,MAItD,OAHI61E,IACFE,GAAcA,GAEZ5e,GAAkB5sD,EAAAsH,KAAKtP,IAClBlE,EAAOihC,UAAey2C,IAE/Br3E,KAAKg+D,YAAcnyD,EAAAsH,KAAKrP,IACjBnE,EAAOmhC,UAAUu2C,IAE1B,KAAKvrE,EAAAsT,YAAYqmC,QACf,IAAIyT,EAAsCv0B,EAAYrjC,MAClD61E,IACFje,EAAWkB,QACTtmD,QAAQ,GACRolD,IAGJ,IAAI/9C,EAAOnb,KAAKmR,SAAS8nD,4BAA4BC,EAAUT,GAE/D,OADAz4D,KAAKg+D,YAAc7iD,EACXA,EAAKrG,MACX,OAAqB,IAAK9U,KAAKiT,QAAQc,SAAU,OAAOpU,EAAOygC,UAAU0K,QAAQouB,IACjF,OAAmB,OAAOv5D,EAAO6gC,UAAUsK,QAAQouB,GAAWnuB,SAASmuB,IACvE,OAAqB,IAAKl5D,KAAKiT,QAAQc,SAAU,OAAOpU,EAAOygC,UAAU0K,QAAQouB,IACjF,OAAmB,OAAOv5D,EAAO6gC,UAAUsK,QAAQouB,GAAWnuB,SAASmuB,IACvE,QAAmB,OAAOv5D,EAAOihC,UAAU02C,WAAWpe,IACtD,QAAmB,OAAOv5D,EAAOmhC,UAAUy2C,WAAWre,IACtD,QAAS,OAAOv5D,EAAOygC,UAAU0K,QAAQouB,IAG7C,KAAKptD,EAAAsT,YAAYC,OAEf,OADA7W,QAAQ2uE,GACDn3E,KAAKw3E,qBAA8C7yC,GAE5D,KAAK74B,EAAAsT,YAAYumC,OAEf,OADAn9C,QAAQ2uE,GACDn3E,KAAKy3E,qBAA8C9yC,EAAY8zB,GAS1E,OALAz4D,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAEbnJ,KAAKg+D,YAAcvF,EACZ94D,EAAOymC,qBAIhBy3B,EAAA57D,UAAAy1E,mBAAA,SAAmBC,GACjB,IAKIC,EALAl2D,EAAU1hB,KAAK0hB,QACftR,EAAQsR,EAAQtR,MAChBI,EAAekR,EAAQlR,aAEvBP,EAAiBzH,OAAOkZ,EAAQzR,gBAIhCu6B,EAAWxqC,KAAKk+D,eACpB,GAAI1zB,EAASz3B,IAAI4kE,GACfC,EAA+BptC,EAAStpC,IAAIy2E,OAGvC,CACL,IAAInwE,EAASmwE,EAAYnwE,OACrBqwE,EAAc5nE,EAAeiY,oBAAsB,GAAK,EACxD4vD,EAAYD,EAAsB,EAATrwE,EAEzBuwE,OAAG,EACHxxB,OAAG,EAEHn2C,GACF2nE,EAAM,IAAI5pC,WAAW39B,EAAesnE,GACpCvxB,EAAM/1C,EACNvI,EAAA+vE,SAASjb,EAAAkb,aAAaj4E,KAAMiQ,GAAiB8nE,EAAKr2D,EAAQjR,gBAE1DsnE,EAAM,IAAI5pC,WAAW2pC,GACrBvxB,EAAM,GAERt+C,EAAA+vE,SAASxwE,EAAQuwE,EAAKxxB,EAAMt2C,EAAekZ,SAASxd,EAAAtG,eAAemC,SACnE++C,GAAOsxB,EACP,IAAK,IAAIx3E,EAAI,EAAGA,EAAImH,IAAUnH,EAC5B4H,EAAAiwE,SAASP,EAAYjtE,WAAWrK,GAAI03E,EAAKxxB,GAAOlmD,GAAK,IAEvDu3E,EAAgB53E,KAAKukE,iBAAiBwT,GACtCvtC,EAASv5B,IAAI0mE,EAAaC,GAE5B,IAAIO,EAAeP,EAAcl5C,OAIjC,OAHItuB,IAAO+nE,EAAerjB,QAAQqjB,EAAcrkE,QAAQtD,KAExDxQ,KAAKg+D,YAAc/tD,EAAekL,KAC9Bnb,KAAKiT,QAAQc,SACR/T,KAAKL,OAAO6gC,UAAUsK,QAAQqtC,GAAeptC,SAASotC,KAE7D3vE,OAAOgxD,WAAW2e,IACXn4E,KAAKL,OAAOygC,UAAU0K,QAAQqtC,MAIzCta,EAAA57D,UAAAu1E,qBAAA,SAAqB7yC,GACnB,OAAO3kC,KAAK03E,mBAAmB/yC,EAAWrjC,QAI5Cu8D,EAAA57D,UAAAm2E,kBAAA,SAAkBC,EAAmBv+D,GACnC,IASIi+D,EACAxxB,EAVA7kC,EAAU1hB,KAAK0hB,QACftR,EAAQsR,EAAQtR,MAChBI,EAAekR,EAAQlR,aAEvBhJ,EAASsS,EAAOtS,OAChBoS,EAAWy+D,EAAYz+D,SACvBnS,EAAaD,EAASoS,EACtB0+D,EAAgBt4E,KAAKiT,QAAQI,UAAUuG,SAMvC2+D,EAAiB/vE,OAAOkZ,EAAQ3R,qBAChCyoE,EAAoBD,EAAerwD,oBAAsB,GAAK,EAC9DuwD,EAAkB,GAAM,GAAKC,IAAIF,EAAmB/wE,EAAa,GACjE2I,GACF2nE,EAAM,IAAI5pC,WAAW39B,EAAeioE,GACpClyB,EAAM/1C,EACNvI,EAAA+vE,SAASjb,EAAAkb,aAAaj4E,KAAMu4E,GAAiBR,EAAKr2D,EAAQjR,gBAE1DsnE,EAAM,IAAI5pC,WAAWsqC,GACrBlyB,EAAM,GAERt+C,EAAA+vE,SAASvwE,EAAYswE,EAAKxxB,EAAMgyB,EAAepvD,SAASxd,EAAAtG,eAAeoC,aACvE8+C,GAAOiyB,EACP,IAAIhY,EAAa6X,EAAYvuB,eAC7B,OAAQ0W,GACN,KAAKpY,EAAAj+B,WAAWhkB,IACd,OAAQyT,GACN,KAAK,EACH,IAAK,IAAIvZ,EAAI,EAAGA,EAAImH,IAAUnH,EAAG,CAC/B,IAAIiB,EAAQwY,EAAOzZ,GACnBmI,OAAO4/C,EAAA5W,kBAAkBlwC,IAAUk/D,GACnCh4D,OAAO4/C,EAAA7W,gBAAgBjwC,IAAU8mD,EAAAh+B,aAAailB,OAC9CpnC,EAAA0wE,QAAQvwB,EAAA3W,iBAAiBnwC,GAAQy2E,EAAKxxB,GACtCA,GAAO,EAET,MAEF,KAAK,EACH,IAASlmD,EAAI,EAAGA,EAAImH,IAAUnH,EAAG,CAC3BiB,EAAQwY,EAAOzZ,GACnBmI,OAAO4/C,EAAA5W,kBAAkBlwC,IAAUk/D,GACnCh4D,OAAO4/C,EAAA7W,gBAAgBjwC,IAAU8mD,EAAAh+B,aAAailB,OAC9CpnC,EAAAiwE,SAAS9vB,EAAA3W,iBAAiBnwC,GAAQy2E,EAAKxxB,GACvCA,GAAO,EAET,MAEF,KAAK,EACH,IAASlmD,EAAI,EAAGA,EAAImH,IAAUnH,EAAG,CAC3BiB,EAAQwY,EAAOzZ,GACnBmI,OAAO4/C,EAAA5W,kBAAkBlwC,IAAUk/D,GACnCh4D,OAAO4/C,EAAA7W,gBAAgBjwC,IAAU8mD,EAAAh+B,aAAailB,OAC9CpnC,EAAA+vE,SAAS5vB,EAAA3W,iBAAiBnwC,GAAQy2E,EAAKxxB,GACvCA,GAAO,EAET,MAEF,QAAS/9C,QAAO,GAElB,MAEF,KAAK4/C,EAAAj+B,WAAW/jB,IACd,IAAS/F,EAAI,EAAGA,EAAImH,IAAUnH,EAAG,CAC3BiB,EAAQwY,EAAOzZ,GACnBmI,OAAO4/C,EAAA5W,kBAAkBlwC,IAAUk/D,GACnCh4D,OAAO4/C,EAAA7W,gBAAgBjwC,IAAU8mD,EAAAh+B,aAAailB,OAC9CpnC,EAAA2wE,SAAS9kE,QAAQs0C,EAAA1W,oBAAoBpwC,GAAQ8mD,EAAAzW,qBAAqBrwC,IAASy2E,EAAKxxB,GAChFA,GAAO,EAET,MAEF,KAAK6B,EAAAj+B,WAAWvjB,IACd,IAASvG,EAAI,EAAGA,EAAImH,IAAUnH,EAAG,CAC3BiB,EAAQwY,EAAOzZ,GACnBmI,OAAO4/C,EAAA5W,kBAAkBlwC,IAAUk/D,GACnCh4D,OAAO4/C,EAAA7W,gBAAgBjwC,IAAU8mD,EAAAh+B,aAAailB,OAC9CpnC,EAAA4wE,SAASzwB,EAAAxW,iBAAiBtwC,GAAQy2E,EAAKxxB,GACvCA,GAAO,EAET,MAEF,KAAK6B,EAAAj+B,WAAWtjB,IACd,IAASxG,EAAI,EAAGA,EAAImH,IAAUnH,EAAG,CAC3BiB,EAAQwY,EAAOzZ,GACnBmI,OAAO4/C,EAAA5W,kBAAkBlwC,IAAUk/D,GACnCh4D,OAAO4/C,EAAA7W,gBAAgBjwC,IAAU8mD,EAAAh+B,aAAailB,OAC9CpnC,EAAA6wE,SAAS1wB,EAAAvW,iBAAiBvwC,GAAQy2E,EAAKxxB,GACvCA,GAAO,EAET,MAEF,QAAS/9C,QAAO,GAElB,IACIuwE,EADgB/4E,KAAKukE,iBAAiBwT,GACTr5C,OAC7BtuB,IAAO2oE,EAAejkB,QAAQikB,EAAcjlE,QAAQtD,KAGxD,IAAIR,EAAiBxH,OAAOkZ,EAAQ1R,gBAChCgpE,EAAgBxwE,OAAOxI,KAAKmR,SAASmI,aACvCtJ,EACA,CAAEqoE,GACFpwE,EAAAyvD,YAEEuhB,EAAmBD,EAAc9wD,oBAAsB,GAAK,EAC5D9X,GACF2nE,EAAM,IAAI5pC,WAAW39B,EAAeyoE,GACpC1yB,EAAM/1C,EACNvI,EAAA+vE,SAASjb,EAAAkb,aAAaj4E,KAAMg5E,GAAgBjB,EAAKr2D,EAAQjR,gBAEzDsnE,EAAM,IAAI5pC,WAAW8qC,GACrB1yB,EAAM,GAER,IACI2yB,EADel5E,KAAKukE,iBAAiBwT,GACVr5C,OAC3BtuB,IAAO8oE,EAAcpkB,QAAQokB,EAAaplE,QAAQtD,KACtDxQ,KAAKg+D,YAAcgb,EAAc79D,KACjC,IAAIg+D,EAAgB5yB,EAAMyyB,EAAc7vD,SAAS,WAC7CiwD,EAAgB7yB,EAAMyyB,EAAc7vD,SAAS,WACjD,OAAqB,GAAjBmvD,GACFrwE,EAAA2wE,SAASG,EAAchB,EAAKoB,GAC5BlxE,EAAA+vE,SAASxwE,EAAQuwE,EAAKqB,GACfp5E,KAAKL,OAAO6gC,UAAUsK,QAAQouC,GAAcnuC,SAASmuC,MAE5D1wE,OAAOgxD,WAAWuf,IAClB9wE,EAAA+vE,SAASltC,QAAQiuC,GAAehB,EAAKoB,GACrClxE,EAAA+vE,SAASxwE,EAAQuwE,EAAKqB,GACtB5wE,OAAOgxD,WAAW0f,IACXl5E,KAAKL,OAAOygC,UAAU0K,QAAQouC,MAIzCrb,EAAA57D,UAAAm1E,oBAAA,SACEiB,EACA97B,EACA88B,EACA5d,GAUA,IARA,IAAI97D,EAASK,KAAKL,OAGd6H,EAAS+0C,EAAY/0C,OACrB8xE,EAAiB,IAAItyE,MAAqBQ,GAC1C+xE,EAAiB,IAAIvyE,MAAqBQ,GAC1CgyE,EAAoBnB,EAAYvuB,eAChCnrC,GAAW,EACNte,EAAI,EAAGA,EAAImH,IAAUnH,EAAG,CAC/B,IAAIskC,EAAa4X,EAAYl8C,GACzBihC,EAAOqD,EACP3kC,KAAKsiE,kBAA8B39B,EAAY0zC,EAAW,KAC1DA,EAAYtuB,aAAapqD,GAC7B25E,EAAej5E,GAAKihC,EAChB3iB,IACF2iB,EAAO3hC,EAAOmtC,qBAAqBxL,GAC/B8mB,EAAA7W,gBAAgBjQ,IAAS8mB,EAAAh+B,aAAailB,OACxC7mC,OAAO4/C,EAAA5W,kBAAkBlQ,IAASk4C,GAClCD,EAAel5E,GAAKihC,IAEhB+3C,GACFr5E,KAAKsL,QACHM,EAAA/C,eAAe05D,4DACf9G,EAAWtyD,OAGfwV,GAAW,IAMjB,GAAIA,EAAU,OAAO3e,KAAKo4E,kBAAkBC,EAAakB,GAGzD,IAAIvpE,EAAiBxH,OAAOxI,KAAK0hB,QAAQ1R,gBACrCgpE,EAAgBxwE,OAAOxI,KAAKmR,SAASmI,aACvBtJ,EAChB,CAAEqoE,GACFpwE,EAAAyvD,YAEE+hB,EAAYT,EAAc79D,KAG9Bnb,KAAKg+D,YAAcyb,EACnB,IAAItZ,EAAS6Y,EAAcjwD,eAAeo/B,EAAAz8C,aAAauB,aAAa,GACpE,IAAKkzD,EAKH,OAJAngE,KAAKwL,MACHI,EAAA/C,eAAeupE,+CACf3W,EAAWtyD,MAAO6vE,EAAc9nE,cAE3BvR,EAAOymC,oBAEhB,IAAIszC,EAAkBD,EAAU3vB,eAC5B3jC,EAAOnmB,KAAK++D,YACZmJ,EAAY/hD,EAAKmjD,eAAehjD,SAASmzD,GACzCtW,EAAQ,IAAIn8D,MAAqB,EAAIQ,GACrCoc,EAAQ,EACZu/C,EAAMv/C,KAAWjkB,EAAOmkC,eAAeokC,EAAUtkD,MAC/C5jB,KAAKiwE,eAAeznE,OAAOwwE,EAAc7wD,qBAAsB,CAC7DxoB,EAAOygC,UAAU,GACjBzgC,EAAOygC,UAAU54B,MAGrB,IAASnH,EAAI,EAAGA,EAAImH,IAAUnH,EAC5B8iE,EAAMv/C,KAAW5jB,KAAKiwE,eAAe9P,EAAQ,CAC3CxgE,EAAOqiC,eAAekmC,EAAUtkD,MAAO81D,GACvC/5E,EAAOygC,UAAU//B,GACjBi5E,EAAej5E,KAOnB,OAJAmI,OAAOob,EAAQ,GAAKu/C,EAAM37D,QAC1B27D,EAAMv/C,GAASjkB,EAAOqiC,eAAekmC,EAAUtkD,MAAO81D,GACtDvzD,EAAKsiD,cAAcP,GACnBloE,KAAKg+D,YAAcyb,EACZ95E,EAAOukC,YAAY,KAAMi/B,EAAOuW,IAGzC7b,EAAA57D,UAAAw1E,qBAAA,SAAqB9yC,EAAqC8zB,GACxD,IAAI94D,EAASK,KAAKL,OAGd+oD,EAAiB+P,EAAe/P,eACpC,IAAKA,GAAkBA,EAAeltC,GAAG7P,EAAAtJ,YAAYmc,UAKnD,OAJAxe,KAAKwL,MACHI,EAAA/C,eAAeo5D,mCACft9B,EAAWx7B,MAAO,WAAYsvD,EAAe3uD,YAExCnK,EAAOymC,oBAIhB,IAAIuzC,EAAOjxB,EAAevgC,oBAC1B,GAAIwxD,EAAM,CAGR,GAAIA,EAAKnnE,UAAUg4C,mBAKjB,OAJAxqD,KAAKwL,MACHI,EAAA/C,eAAe+wE,sDACfj1C,EAAWx7B,MAAOu/C,EAAe5+C,YAE5BnK,EAAOymC,oBAEhB,GAAIuzC,EAAKn+D,GAAG7P,EAAAtJ,YAAY0qD,SAKtB,OAJA/sD,KAAKwL,MACHI,EAAA/C,eAAegxE,mFACfl1C,EAAWx7B,MAAOu/C,EAAe5+C,YAE5BnK,EAAOymC,oBAEhB,GAAIuzC,EAAKn+D,GAAG7P,EAAAtJ,YAAY2qD,WAKtB,OAJAhtD,KAAKwL,MACHI,EAAA/C,eAAeixE,qFACfn1C,EAAWx7B,MAAOu/C,EAAe5+C,YAE5BnK,EAAOymC,oBAKlB,IAAIV,EAAQf,EAAWe,MACnBE,EAAWF,EAAMl+B,OACjBsS,EAAS6qB,EAAW7qB,OACpBkB,EAAU0tC,EAAe1tC,QACzB++D,GAAY,EACZ1D,EAAQ,IAAIrvE,MAAqB4+B,EAAW,GAE5CsiC,EADOloE,KAAK++D,YACKoJ,aAAanoE,KAAKiT,QAAQI,WAC/C7K,OAAOo9B,GAAY9rB,EAAOtS,QAC1B,IAAK,IAAInH,EAAI,EAAGoU,EAAImxB,EAAUvlC,EAAIoU,IAAKpU,EAAG,CACxC,IAAIma,EAASQ,EAAUA,EAAQ9Z,IAAIwkC,EAAMrlC,GAAGgK,MAAQ,KACpD,GAAKmQ,GAAUA,EAAO1F,MAAQqzC,EAAAl5C,YAAY6L,MAA1C,CAQA,IAAIK,EAAeX,EAAQW,KAC3Bk7D,EAAMh2E,EAAI,GAAKL,KAAKL,OAAOgjC,YACzBxnB,EAAKvB,SACL5Z,KAAKL,OAAOqiC,eAAekmC,EAAUtkD,MAAO5jB,KAAKiT,QAAQwtD,gBACzDzgE,KAAKsiE,kBAAkBxoD,EAAOzZ,GAAYma,EAAQW,KAAI,KACtDA,EAAK2uC,eACGtvC,EAAQ6M,mBAbhBrnB,KAAKwL,MACHI,EAAA/C,eAAemvD,oCACftyB,EAAMrlC,GAAG8I,MAAOu8B,EAAMrlC,GAAGgK,KAAMq+C,EAAe5+C,YAEhDiwE,GAAY,EAahB,OADA/5E,KAAKg+D,YAActV,EAAevtC,KAAKwtC,gBACnCoxB,EAAkBp6E,EAAOymC,qBAG7BiwC,EAAM,GAAK12E,EAAOmkC,eAChBokC,EAAUtkD,MACV5jB,KAAK6jE,eAAenb,IAItB2tB,EAAMA,EAAM7uE,OAAS,GAAK7H,EAAOqiC,eAAekmC,EAAUtkD,MAAO5jB,KAAKiT,QAAQwtD,gBAEvE9gE,EAAOukC,YAAY,KAAMmyC,EAAOr2E,KAAKiT,QAAQwtD,kBAGtD5C,EAAA57D,UAAAwoE,qBAAA,SAAqB9lC,EAA2B8zB,GAC9C,IAAI94D,EAASK,KAAKL,OACdwmB,EAAOnmB,KAAK++D,YAGZj2C,EAAS9oB,KAAKmR,SAASwnD,kBACzBh0B,EAAWA,WACXxe,GAEF,IAAK2C,EAAQ,OAAOnpB,EAAOymC,oBAC3B,GAAItd,EAAOhU,MAAQqzC,EAAAl5C,YAAYqJ,gBAK7B,OAJAtY,KAAKwL,MACHI,EAAA/C,eAAemxE,yEACfr1C,EAAWA,WAAWx7B,OAEjBnJ,KAAKL,OAAOymC,oBAErB,IAGIsiB,EAHA5pC,EAAiCgK,EACjC3E,EAA8B,KAC9B4D,EAAgB4c,EAAW5c,cAqB/B,OAdE5D,GAJC4D,GACoD,QAApD2gC,EAAiB+P,EAAe/P,iBACjCA,EAAeltC,GAAG7P,EAAAtJ,YAAYqR,SAEd1T,KAAKmR,SAASmI,aAC5BwF,EACA4pC,EAAe3gC,cACf9f,EAAAyvD,QAAqBvxC,EAAKzB,0BAGZ1kB,KAAKmR,SAASsmD,8BAC5B34C,EACAiJ,EACA5B,EAAK6zC,eAAevnD,OACpBxK,EAAAyvD,QAAqBvxC,EAAKzB,yBAC1BigB,IAIG3kC,KAAKi6E,mBAAmB91D,EAAewgB,EAAW3lB,UAAW2lB,GADzChlC,EAAOymC,qBAKpCy3B,EAAA57D,UAAAixE,kBAAA,SAAkB/uD,EAAsBs3C,GACtC,IAAIj3C,EAAWL,EAAcgE,oBAC7B,GAAI3D,EAGF,OADKA,EAAShM,aAAa2vC,EAAAj5C,eAAeoP,SAASte,KAAKgjE,gBAAgBx+C,GACjEA,EAIT,IAAIo3C,EAAYz3C,EAAc6D,KAC9B,GAAI4zC,EAAW,CACb,IAAIse,EAAWl6E,KAAKkzE,kBAAkBtX,EAAWH,GACjDj3C,EAAW,IAAI2jC,EAAAx1C,SACbhH,EAAA3I,cAAcoC,YACd,IAAI+iD,EAAAv1C,kBACFjH,EAAA3I,cAAcoC,YACd+e,EAEsB+1D,EAASpnE,YAAay0C,SAE9C2yB,EAAS1nE,UACT,WAKFgS,EAAW,IAAI2jC,EAAAx1C,SACbhH,EAAA3I,cAAcoC,YACd,IAAI+iD,EAAAv1C,kBACFjH,EAAA3I,cAAcoC,YACd+e,EACAnkB,KAAK0hB,QAAQ1P,8BAA8BrG,EAAA3I,cAAcoC,YACvDuG,EAAAtJ,YAAY4e,SAAWtV,EAAAtJ,YAAYuc,cAGvC,IAAI/S,EAAAuW,UAAU,KAAM+B,EAAchJ,KAAMgJ,EAAchJ,MACtD,MAIJqJ,EAAStT,aAAeiT,EAAcjT,aAAevF,EAAAjJ,mBAAqB,cAC1E8hB,EAASvT,IAAItF,EAAAtJ,YAAYk+D,UACzB/7C,EAASviB,UAAUsiB,oBAAoB,GAAIC,GAC3CL,EAAcgE,oBAAsB3D,EACpC,IAAIk9C,EAAe1hE,KAAK++D,YACxB/+D,KAAK++D,YAAcv6C,EAAS2B,KAG5B,IAAI3T,EAAYgS,EAAShS,UACrB7S,EAASK,KAAKL,OACd8gE,EAAiBzgE,KAAKiT,QAAQwtD,eAC9B0C,EAAQ,IAAIn8D,MAmBhB,GAVAm8D,EAAMt4D,KACJlL,EAAOolC,SACLplC,EAAOyhC,YAAYq/B,GAAkBrY,EAAAj+B,WAAW/jB,IAAMgiD,EAAAl7B,QAAQ02C,OAASxb,EAAAl7B,QAAQw2C,OAC7E/jE,EAAOqiC,eAAe,EAAGy+B,IAE3B9gE,EAAOmkC,eAAe,EACpB9jC,KAAK6jE,eAAe1/C,MAItBy3C,EAAW,CACb,IAAIniD,EAAiBjH,EAAUiH,eAC3BuxC,EAAgBvxC,EAAejS,OAC/Bq6B,EAAW,IAAI76B,MAAqB,EAAIgkD,GAC5CnpB,EAAS,GAAKliC,EAAOqiC,eAAe,EAAGy+B,GACvC,IAAK,IAAIpgE,EAAI,EAAGA,EAAI2qD,IAAiB3qD,EACnCwhC,EAASxhC,EAAI,GAAKV,EAAOqiC,eAAe3hC,EAAI,EAAGoZ,EAAepZ,GAAGypD,gBAGnEqZ,EAAMt4D,KACJlL,EAAOmkC,eAAe,EACpB9jC,KAAKiwE,eAAeznE,OAAOozD,EAAUzzC,qBAAsB0Z,KAIjE7hC,KAAK8jE,wBAAwB3/C,EAAeg/C,GAC5CA,EAAMt4D,KACJlL,EAAOqiC,eAAe,EAAGy+B,IAI3B,IAAIj4B,EAAUxoC,KAAKu/D,mBAAmB/sD,EAAUiH,eAAgBjH,EAAUmH,WAAYnH,EAAUuT,UAC5FQ,EAAS/B,EAASI,cAClBsjB,EAAW,IAAIlhC,MACfgvE,EAAc,EAAIxjE,EAAUiH,eAAejS,OAC3Co6D,EAAYr7C,EAAO/e,OACvB,GAAIo6D,EAAYoU,EACd,IAAS31E,EAAI21E,EAAa31E,EAAIuhE,IAAavhE,EAAG6nC,EAASr9B,KAAK0b,EAAOlmB,GAAG8a,KAAK2uC,gBAE7E,IAAIwV,EAAU3/D,EAAOsoC,YAAYzjB,EAAStT,aAAcs3B,EAASN,EAC/C,GAAhBi7B,EAAM37D,OACF27D,EAAM,GACNxjE,EAAOukC,YAAY,KAAMi/B,EAAO1C,IAItC,OAFAj8C,EAASgC,SAAS7mB,EAAQ2/D,GAC1Bt/D,KAAK++D,YAAc2C,EACZl9C,GAGTq5C,EAAA57D,UAAAg4E,mBAAA,SAAmB91D,EAAsB0tD,EAAmCpW,GAC1E,IAAIke,EAAO35E,KAAKkzE,kBAAkB/uD,EAAes3C,GAC7Cn6B,EAAOthC,KAAK+xE,kBACd4H,EACA9H,EACApW,EACAz7D,KAAKiT,QAAQI,UAAU02C,aAAa/pD,KAAKL,SAG3C,OADAK,KAAKg+D,YAAc75C,EAAchJ,KAC1BmmB,GAGTu8B,EAAA57D,UAAAyoE,+BAAA,SACE/lC,EACA8zB,GAGA,OAAOz4D,KAAKsiE,kBACV39B,EAAWA,WACX8zB,EAAc,MAWlBoF,EAAA57D,UAAA0oE,gCAAA,SACEnS,EACAC,EACAie,GAEA,IAAI/2E,EAASK,KAAKL,OACdwmB,EAAOnmB,KAAK++D,YAEhB/+D,KAAKy2E,4BAA4Bje,GAEjC,IAAI1vC,EAAS9oB,KAAKmR,SAASonD,gCAAgCC,EAAgBryC,EAAMsyC,GACjF,IAAK3vC,EAAQ,OAAOnpB,EAAOymC,oBAE3B,OAAQtd,EAAOhU,MACb,KAAKqzC,EAAAl5C,YAAYiO,OACf,IAAKld,KAAK+gE,cAAsBj4C,GAC9B,OAAOnpB,EAAOymC,oBAEhB,IAAI+D,EAAsBrhB,EAAQ3N,KAElC,OADA3S,OAAO2hC,GAAct+B,EAAAsH,KAAKG,MACbwV,EAAQtN,GAAG7P,EAAAtJ,YAAYihB,SAC3BtjB,KAAK4pE,sBAA8B9gD,EAAQ2vC,EAAgBie,IAEpE12E,KAAKg+D,YAAc7zB,EACZxqC,EAAOyiC,gBAAyBtZ,EAAQ5X,aAAci5B,EAAW2f,iBAE1E,KAAK3B,EAAAl5C,YAAYuU,UACf,IAAI22D,EAAU3xE,OAAmBsgB,EAAQrW,QACzC,OADkDjK,OAAO2xE,EAAQrlE,MAAQqzC,EAAAl5C,YAAY+T,MAChFhjB,KAAKghE,YAAkBmZ,IAI5Bn6E,KAAKg+D,YAAcnyD,EAAAsH,KAAK/P,IACR0lB,EAAQtN,GAAG7P,EAAAtJ,YAAYihB,UACrC9a,OAA4C,GAAzBsgB,EAAQ3F,mBACpBxjB,EAAOygC,UAAU0K,QAAoBhiB,EAAQzF,wBAE/C1jB,EAAOyiC,gBAA4BtZ,EAAQ5X,aAAck3C,EAAAj+B,WAAWhkB,OARzEnG,KAAKg+D,YAAcnyD,EAAAsH,KAAK/P,IACjBpD,KAAKL,OAAOymC,qBASvB,KAAK+hB,EAAAl5C,YAAY6L,MACftS,OAAesgB,EAAQzB,cAAgB,GACvC,IAAImrD,EAAWxyE,KAAKgiE,4BAClBx5D,OAAOxI,KAAKmR,SAASqlD,uBACrBx2D,KAAKiT,QAAQI,UAAS,GAIxB,OADArT,KAAKg+D,YAAsBl1C,EAAQ3N,KAC5Bxb,EAAO2iC,WACJxZ,EAAQ3N,KAAKvB,SACbkP,EAAQ3N,KAAKK,GAAG,GACxBg3D,EACQ1pD,EAAQ3N,KAAK2uC,eACbhhC,EAAQzB,cAGpB,KAAK8gC,EAAAl5C,YAAYwL,mBACf,IAAIC,EAAsCoO,EAAQpO,gBAClD,GAAIA,EAAiB,CACnB,IAAI7Z,EAASb,KAAKmR,SAASqI,gBAAgBkB,EAAiB,MAC5D,GAAI7Z,EAAQ,OAAOb,KAAK+xE,kBAAkBlxE,EAAQ,GAAI23D,EAAgB,GAExE,OAAO74D,EAAOymC,oBAEhB,KAAK+hB,EAAAl5C,YAAY2L,SACf,IAAI4M,EAAiBhf,OAAkBsgB,EAAQtB,gBAC/C,OAAOxnB,KAAK+xE,kBAAkBvqD,EAAgB,GAAIgxC,EAChDx4D,KAAKgiE,4BACHx5D,OAAOxI,KAAKmR,SAASqlD,uBACrBx2D,KAAKiT,QAAQI,UAAS,IAK5B,KAAK80C,EAAAl5C,YAAYsK,mBAKf,OAJAvZ,KAAKwL,MACHI,EAAA/C,eAAeuxE,wEACf5hB,EAAervD,MAA2B2f,EAAQloB,MAE7CjB,EAAOymC,oBAOlB,OAJApmC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfk7C,EAAervD,OAEVxJ,EAAOymC,qBAGRy3B,EAAA57D,UAAAo4E,cAAR,SAAsBvxD,EAA2B2yC,GAC/C,IAAIx5D,EAAY6mB,EAAOpO,gBACvB,GAAIzY,EAAW,CACb,IAAIuiB,EAAWxkB,KAAKmR,SAASqI,gBAAgBvX,EAAW,MACxD,IAAKuiB,EAAU,OAAOxkB,KAAKL,OAAOymC,oBAClC,IAAI5zB,EAAYgS,EAAShS,UACzB,IAAKxS,KAAK+zE,mBACRvhE,EACA,EACAgS,EAAShJ,GAAG7P,EAAAtJ,YAAY4e,UACxBw6C,GAEA,OAAOz7D,KAAKL,OAAOymC,oBAErB,GAAI5hB,EAAShJ,GAAG7P,EAAAtJ,YAAY4e,UAAW,CACrC,IAAIkD,EAAgB3b,OAAOgc,EAAS/R,QAASjK,OAAO2b,EAAcrP,MAAQqzC,EAAAl5C,YAAY8L,OACtF,IAAIw3D,EAAiB/pE,OAAOxI,KAAKmR,SAASqlD,uBACtCgc,EAAWxyE,KAAKgiE,4BAClBuQ,EACAvyE,KAAKiT,QAAQI,UAAS,QAIxB;OADArT,KAAKg+D,YAAcxrD,EAAUmH,WACtB3Z,KAAK+xE,kBAAkBvtD,EAAU,GAAIi3C,EAAY+W,GAGxD,OADAxyE,KAAKg+D,YAAcxrD,EAAUmH,WACtB3Z,KAAK+xE,kBAAkBvtD,EAAU,GAAIi3C,EAAY,GAO1D,OAJAz7D,KAAKwL,MACHI,EAAA/C,eAAemvD,oCACfyD,EAAWtyD,MAA2B2f,EAAQloB,KAA0BkoB,EAAQrW,OAAO3I,YAElF9J,KAAKL,OAAOymC,qBAIvBy3B,EAAA57D,UAAA2oE,yBAAA,SAAyBjmC,EAA+B8zB,GACtD,IAAIja,EAAS7Z,EAAW6Z,OACpBC,EAAS9Z,EAAW8Z,OACpBwnB,EAAYjmE,KAAK++D,YAEjB2H,EAAW1mE,KAAK2mE,cAClB3mE,KAAKgiE,4BAA4Br9B,EAAWH,UAAW34B,EAAAsH,KAAKvP,KAAI,GAChE5D,KAAKg+D,aAIH0J,EAAkB1nE,KAAKL,OAAOmtC,qBAAqB45B,GACvD,GACEte,EAAA7W,gBAAgBm2B,IAAoBtf,EAAAh+B,aAAailB,OACjD+Y,EAAA5W,kBAAkBk2B,IAAoBtf,EAAAj+B,WAAWhkB,IAEjD,OAAOiiD,EAAA3W,iBAAiBi2B,GACpB1nE,KAAKgiE,4BAA4BxjB,EAAQia,EAAc,GACvDz4D,KAAKgiE,4BAA4BvjB,EAAQga,EAAc,GAI3DiO,EAAW1mE,KAAK2mE,cACd3mE,KAAKgiE,4BAA4Br9B,EAAWH,UAAW34B,EAAAsH,KAAKvP,KAAI,GAChE5D,KAAKg+D,aAIT,IAAIsc,EAAarU,EAAUE,OAC3BnmE,KAAK++D,YAAcub,EACnB,IAAIC,EAAav6E,KAAKgiE,4BAA4BxjB,EAAQia,EAAc,GACpE+hB,EAAax6E,KAAKg+D,YACtBsc,EAAWlU,mBAEX,IAAIqU,EAAaxU,EAAUE,OAC3BnmE,KAAK++D,YAAc0b,EACnB,IAAIC,EAAa16E,KAAKgiE,4BAA4BvjB,EAAQga,EAAc,GACpEkiB,EAAa36E,KAAKg+D,YACtByc,EAAWrU,mBACXpmE,KAAK++D,YAAckH,EAEnBA,EAAU8B,cAAcuS,EAAYG,GAEpC,IAAIzN,EAAanhE,EAAAsH,KAAKy2C,kBAAkB4wB,EAAYG,GAAY,GAChE,OAAK3N,GAQLuN,EAAav6E,KAAK+qE,kBAChBwP,EACAC,EACAxN,EAAU,IAGVxuB,GAEFk8B,EAAa16E,KAAK+qE,kBAChB2P,EACAC,EACA3N,EAAU,IAGVvuB,GAEFz+C,KAAKg+D,YAAcgP,EACZhtE,KAAKL,OAAOolC,SAAS2hC,EAAU6T,EAAYG,KAxBhD16E,KAAKwL,MACHI,EAAA/C,eAAeo5D,mCACft9B,EAAWx7B,MAAOqxE,EAAW1wE,WAAY6wE,EAAW7wE,YAEtD9J,KAAKg+D,YAAcvF,EACZz4D,KAAKL,OAAOymC,sBAsBvBy3B,EAAA57D,UAAA4oE,8BAAA,SAA8BlmC,EAAoC8zB,GAChE,IAAI94D,EAASK,KAAKL,OACdwmB,EAAOnmB,KAAK++D,YAGZ6b,EAAW56E,KAAKsiE,kBAClB39B,EAAWya,QACXqZ,GAAkB5sD,EAAAsH,KAAKG,KACnBzH,EAAAsH,KAAK/P,IACLq1D,EAAc,KAMpB,GAAIrQ,EAAA7W,gBAAgBqpC,IAAaxyB,EAAAh+B,aAAaouB,YAAa,OAAOoiC,EAElE,IAYIC,EAZA7c,EAAch+D,KAAKg+D,YAGnBkK,EAA0B,KAW9B,OAVIzP,GAAkB5sD,EAAAsH,KAAKG,OACzB40D,EAAY/hD,EAAKgiD,aAAanK,GAAa,GAC3C4c,EAAWj7E,EAAOuiC,eAChBgmC,EAAUtkD,MACVg3D,IAMIj2C,EAAWoX,UACjB,KAAKlD,EAAAC,MAAMwV,UACT,OAAQ0P,EAAYlpD,MAClB,OACA,OACA,OACA,OACA,OACA,OACA,QACE+lE,EAAYl7E,EAAO6hC,aACjB4mB,EAAA51B,SAASuwC,OACT6X,EACAj7E,EAAOygC,UAAU,IAEnB,MAEF,OAEE,GAAIpgC,KAAKg+D,YAAYxiD,GAAE,KAAuB,CAE5C,GADIktC,EAAiB1oD,KAAKg+D,YAAYtV,eAGpC,GADIx/B,EAAWw/B,EAAe3/B,eAAeo/B,EAAAz8C,aAAaoD,aAC5C,CACZ+rE,EAAY76E,KAAK2xE,qBAAqBzoD,EAAUyb,EAAWya,QAASw7B,EAAUj2C,GAC9E,MAOJ,OAJA3kC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENxJ,EAAOymC,oBAGlB,OACE,IAAInzB,EAAUjT,KAAKiT,QACnB4nE,EAAYl7E,EAAO6hC,aACjBvuB,EAAQc,SACJq0C,EAAA51B,SAAS68C,OACTjnB,EAAA51B,SAASuwC,OACb6X,EACA5c,EAAYhU,YAAYrqD,IAE1B,MAEF,OACA,OACEk7E,EAAYl7E,EAAO6hC,aACjB4mB,EAAA51B,SAAS68C,OACTuL,EACAj7E,EAAO6gC,UAAU,IAEnB,MAEF,QACEq6C,EAAYl7E,EAAO6hC,aACjB4mB,EAAA51B,SAAS88C,OACTsL,EACAj7E,EAAOihC,UAAU,IAEnB,MAEF,QACEi6C,EAAYl7E,EAAO6hC,aACjB4mB,EAAA51B,SAAS+8C,OACTqL,EACAj7E,EAAOmhC,UAAU,IAEnB,MAEF,QAEE,OADAt4B,QAAO,GACA7I,EAAOymC,oBAGlB,MAEF,KAAKyS,EAAAC,MAAMyV,YACT,OAAQyP,EAAYlpD,MAClB,OACA,OACA,OACA,OACA,OACA,OACA,QACE+lE,EAAYl7E,EAAO6hC,aACjB4mB,EAAA51B,SAASg9C,OACToL,EACAj7E,EAAOygC,UAAU,IAEnB,MAEF,OAEE,GAAIpgC,KAAKg+D,YAAYxiD,GAAE,KAAuB,CAC5C,IAAIktC,EAEEx/B,EADN,GADIw/B,EAAiB1oD,KAAKg+D,YAAYtV,eAGpC,GADIx/B,EAAWw/B,EAAe3/B,eAAeo/B,EAAAz8C,aAAaqD,aAC5C,CACZ8rE,EAAY76E,KAAK2xE,qBAAqBzoD,EAAUyb,EAAWya,QAASw7B,EAAUj2C,GAC9E,MAOJ,OAJA3kC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENxJ,EAAOymC,oBAGlB,OACMnzB,EAAUjT,KAAKiT,QACnB4nE,EAAYl7E,EAAO6hC,aACjBvuB,EAAQc,SACJq0C,EAAA51B,SAASi9C,OACTrnB,EAAA51B,SAASg9C,OACboL,EACA5c,EAAYhU,YAAYrqD,IAE1B,MAEF,OACA,OACEk7E,EAAYl7E,EAAO6hC,aACjB4mB,EAAA51B,SAASi9C,OACTmL,EACAj7E,EAAO6gC,UAAU,IAEnB,MAEF,QACEq6C,EAAYl7E,EAAO6hC,aACjB4mB,EAAA51B,SAASk9C,OACTkL,EACAj7E,EAAOihC,UAAU,IAEnB,MAEF,QACEi6C,EAAYl7E,EAAO6hC,aACjB4mB,EAAA51B,SAASm9C,OACTiL,EACAj7E,EAAOmhC,UAAU,IAEnB,MAEF,QAEE,OADAt4B,QAAO,GACA7I,EAAOymC,oBAGlB,MAEF,QAEE,OADA59B,QAAO,GACA7I,EAAOymC,oBAKlB,IAAK8hC,EAEH,OADAloE,KAAKg+D,YAAcnyD,EAAAsH,KAAKG,KACjBtT,KAAK0pE,2BAA2B/kC,EAAWya,QAChDy7B,GACA,GAKJ,IAAIC,EAAW96E,KAAK0pE,2BAA2B/kC,EAAWya,QACxDy7B,GACA,GAGF76E,KAAKg+D,YAAckK,EAAU/sD,KAC7BgL,EAAKsiD,cAAcP,GACnB,IAAI1H,EAAa0H,EAAU/sD,KAAK2uC,eAEhC,OAAOnqD,EAAOukC,YAAY,KAAM,CAC9B42C,EACAn7E,EAAOqiC,eAAekmC,EAAUtkD,MAAO48C,IACtCA,IAGL3C,EAAA57D,UAAA6oE,6BAAA,SACEnmC,EACA8zB,GAEA,IAEIn3B,EAFA3hC,EAASK,KAAKL,OACdstE,GAAW,EAGf,OAAQtoC,EAAWoX,UACjB,KAAKlD,EAAAC,MAAMvqC,KAWT,GAVA+yB,EAAOthC,KAAKsiE,kBACV39B,EAAWya,QACXqZ,GAAkB5sD,EAAAsH,KAAKG,KACnBzH,EAAAsH,KAAK/P,IACLq1D,EAAc,KAMhBz4D,KAAKg+D,YAAYxiD,GAAE,KAAuB,CAE5C,GADIktC,EAAiB1oD,KAAKg+D,YAAYtV,eAGpC,GADIx/B,EAAWw/B,EAAe3/B,eAAeo/B,EAAAz8C,aAAa6C,MAC5C,CACZ+yB,EAAOthC,KAAK2xE,qBAAqBzoD,EAAUyb,EAAWya,QAAS9d,EAAMqD,GACrE,MAOJ,OAJA3kC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENxJ,EAAOymC,oBAIhB,MAEF,KAAKyS,EAAAC,MAAMrqC,MACT,GAAIk2B,EAAWya,QAAQtqC,MAAQhJ,EAAAiJ,SAASmK,UAClBylB,EAAWya,QAASjgC,aAAerT,EAAAsT,YAAYqmC,SAC/C9gB,EAAWya,QAASjgC,aAAerT,EAAAsT,YAAYmmC,OAClE,CAEDjkB,EAAOthC,KAAKwqE,yBAA4C7lC,EAAWya,QAASqZ,GAAgB,GAExFz4D,KAAKiT,QAAQwT,WAAWzmB,KAAK8lE,iBAAiBxkC,EAAMqD,EAAWx7B,OACnE,MAaF,GAVAm4B,EAAOthC,KAAKsiE,kBACV39B,EAAWya,QACXqZ,GAAkB5sD,EAAAsH,KAAKG,KACnBzH,EAAAsH,KAAK/P,IACLq1D,EAAc,KAMhBz4D,KAAKg+D,YAAYxiD,GAAE,KAAuB,CAE5C,GADIktC,EAAiB1oD,KAAKg+D,YAAYtV,eAGpC,GADIx/B,EAAWw/B,EAAe3/B,eAAeo/B,EAAAz8C,aAAa+C,OAC5C,CACZ6yB,EAAOthC,KAAK2xE,qBAAqBzoD,EAAUyb,EAAWya,QAAS9d,EAAMqD,GACrE,MAOJ,OAJA3kC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENxJ,EAAOymC,oBAGhB,OAAQpmC,KAAKg+D,YAAYlpD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEwsB,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASg9C,OAAQ7vE,EAAOygC,UAAU,GAAIkB,GACjE,MAEF,OACA,OACEA,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAASi9C,OACTrnB,EAAA51B,SAASg9C,OACbxvE,KAAKg+D,YAAYjU,aAAapqD,GAC9B2hC,GAEF,MAEF,OACA,OACEA,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASi9C,OAAQ9vE,EAAO6gC,UAAU,GAAIc,GACjE,MAEF,QACEA,EAAO3hC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQ6tD,OAAQz5C,GAC1C,MAEF,QACEA,EAAO3hC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQ8tD,OAAQ15C,GAC1C,MAEF,QACE94B,QAAO,GACP84B,EAAO3hC,EAAOymC,oBAGlB,MAEF,KAAKyS,EAAAC,MAAMwV,UAYT,GAXA2e,GAAW,EACX3rC,EAAOthC,KAAKsiE,kBACV39B,EAAWya,QACXqZ,GAAkB5sD,EAAAsH,KAAKG,KACnBzH,EAAAsH,KAAK/P,IACLq1D,EAAc,KAMhBz4D,KAAKg+D,YAAYxiD,GAAE,KAAuB,CAE5C,GADIktC,EAAiB1oD,KAAKg+D,YAAYtV,eAGpC,GADIx/B,EAAWw/B,EAAe3/B,eAAeo/B,EAAAz8C,aAAa8C,YAC5C,CACZ8yB,EAAOthC,KAAK2xE,qBAAqBzoD,EAAUyb,EAAWya,QAAS9d,EAAMqD,GACrE,MAOJ,OAJA3kC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENxJ,EAAOymC,oBAGhB,OAAQpmC,KAAKg+D,YAAYlpD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEwsB,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASuwC,OAAQzhC,EAAMthC,KAAKL,OAAOygC,UAAU,IACxE,MAEF,OACA,OACEkB,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAAS68C,OACTjnB,EAAA51B,SAASuwC,OACbzhC,EACAthC,KAAKg+D,YAAYhU,YAAYrqD,IAE/B,MAEF,OACA,OACE2hC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS68C,OAAQ/tC,EAAM3hC,EAAO6gC,UAAU,IACnE,MAEF,QACEc,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS88C,OAAQhuC,EAAM3hC,EAAOihC,UAAU,IACnE,MAEF,QACEU,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS+8C,OAAQjuC,EAAM3hC,EAAOmhC,UAAU,IACnE,MAEF,QACEt4B,QAAO,GACP84B,EAAO3hC,EAAOymC,oBAGlB,MAEF,KAAKyS,EAAAC,MAAMyV,YAYT,GAXA0e,GAAW,EACX3rC,EAAOthC,KAAKsiE,kBACV39B,EAAWya,QACXqZ,GAAkB5sD,EAAAsH,KAAKG,KACnBzH,EAAAsH,KAAK/P,IACLq1D,EAAc,KAMhBz4D,KAAKg+D,YAAYxiD,GAAE,KAAuB,CAE5C,GADIktC,EAAiB1oD,KAAKg+D,YAAYtV,eAGpC,GADIx/B,EAAWw/B,EAAe3/B,eAAeo/B,EAAAz8C,aAAagD,YAC5C,CACZ4yB,EAAOthC,KAAK2xE,qBAAqBzoD,EAAUyb,EAAWya,QAAS9d,EAAMqD,GACrE,MAOJ,OAJA3kC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENxJ,EAAOymC,oBAGhB,OAAQpmC,KAAKg+D,YAAYlpD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEwsB,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASg9C,OAAQluC,EAAM3hC,EAAOygC,UAAU,IACnE,MAEF,OACA,OACEkB,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAASi9C,OACTrnB,EAAA51B,SAASg9C,OACbluC,EACAthC,KAAKg+D,YAAYhU,YAAYrqD,IAE/B,MAEF,OACA,OACE2hC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASi9C,OAAQnuC,EAAM3hC,EAAO6gC,UAAU,IACnE,MAEF,QACEc,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASk9C,OAAQpuC,EAAM3hC,EAAOihC,UAAU,IACnE,MAEF,QACEU,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASm9C,OAAQruC,EAAM3hC,EAAOmhC,UAAU,IACnE,MAEF,QACEt4B,QAAO,GACP84B,EAAO3hC,EAAOymC,oBAGlB,MAEF,KAAKyS,EAAAC,MAAMgW,YAWT,GAVAxtB,EAAOthC,KAAKsiE,kBACV39B,EAAWya,QACXqZ,GAAkB5sD,EAAAsH,KAAKG,KACnBzH,EAAAsH,KAAK/P,IACLq1D,EAAc,KAMhBz4D,KAAKg+D,YAAYxiD,GAAE,KAErB,GADIktC,EAAiB1oD,KAAKg+D,YAAYtV,eAGpC,GADIx/B,EAAWw/B,EAAe3/B,eAAeo/B,EAAAz8C,aAAaiD,KAC5C,CACZ2yB,EAAOthC,KAAK2xE,qBAAqBzoD,EAAUyb,EAAWya,QAAS9d,EAAMqD,GACrE,MAMNrD,EAAOthC,KAAKi7E,eAAe35C,EAAMthC,KAAKg+D,aACtCh+D,KAAKg+D,YAAcnyD,EAAAsH,KAAKvP,KACxB,MAEF,KAAKi1C,EAAAC,MAAMiW,MAaT,GAZAztB,EAAOthC,KAAKsiE,kBACV39B,EAAWya,QACXqZ,GAAkB5sD,EAAAsH,KAAKG,KACnBzH,EAAAsH,KAAK/P,IACLq1D,EAAej9C,GAAE,GACf3P,EAAAsH,KAAK9P,IACLo1D,EAAc,KAMlBz4D,KAAKg+D,YAAYxiD,GAAE,KAAuB,CAC5C,IAAIktC,EAEEx/B,EADN,GADIw/B,EAAiB1oD,KAAKg+D,YAAYtV,eAGpC,GADIx/B,EAAWw/B,EAAe3/B,eAAeo/B,EAAAz8C,aAAakD,aAC5C,CACZ0yB,EAAOthC,KAAK2xE,qBAAqBzoD,EAAUyb,EAAWya,QAAS9d,EAAMqD,GACrE,MAOJ,OAJA3kC,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENxJ,EAAOymC,oBAUhB,OARE9E,EAAOthC,KAAK+qE,kBACVzpC,EACAthC,KAAKg+D,YAAah+D,KAAKg+D,YAAY4S,QAAO,IAE1CjsC,EAAWya,SAIPp/C,KAAKg+D,YAAYlpD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEwsB,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASg/C,OAAQlwC,EAAM3hC,EAAOygC,WAAW,IACpE,MAEF,OACA,OACEkB,EAAO3hC,EAAO6hC,aACZxhC,KAAKiT,QAAQc,SACTq0C,EAAA51B,SAASi/C,OACTrpB,EAAA51B,SAASg/C,OACblwC,EACAthC,KAAKg+D,YAAY/T,eAAetqD,IAElC,MAEF,OACA,OACE2hC,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASi/C,OAAQnwC,EAAM3hC,EAAO6gC,WAAW,GAAI,IACxE,MAEF,QACEh4B,QAAO,GACP84B,EAAO3hC,EAAOymC,oBAGlB,MAEF,KAAKyS,EAAAC,MAAMoU,OAKT,OAJAltD,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfqnB,EAAWx7B,OAENxJ,EAAOymC,oBAEhB,QAEE,OADA59B,QAAO,GACA7I,EAAOymC,oBAGlB,OAAO6mC,EACHjtE,KAAK0pE,2BAA2B/kC,EAAWya,QAAS9d,EAAMm3B,GAAkB5sD,EAAAsH,KAAKG,MACjFguB,GAINu8B,EAAA57D,UAAA+oE,uBAAA,SAAuB1pC,EAAqBnmB,GAC1C,IAAIxb,EAASK,KAAKL,OACdwmB,EAAOnmB,KAAK++D,YAChB,OAAQ5jD,EAAKrG,MACX,OACMqR,EAAKo9C,YAAYjiC,EAAMnmB,KACzBmmB,EAAOthC,KAAKiT,QAAQW,WAAU,GAC1BjU,EAAOyhC,YAAYgnB,EAAAl7B,QAAQguD,cAAe55C,GAC1C3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASw+C,OAC3BrxE,EAAO6hC,aAAa4mB,EAAA51B,SAASq+C,OAC3BvvC,EACA3hC,EAAOygC,UAAU,KAEnBzgC,EAAOygC,UAAU,MAGzB,MAEF,OACMja,EAAKo9C,YAAYjiC,EAAMnmB,KACzBmmB,EAAOthC,KAAKiT,QAAQW,WAAU,GAC1BjU,EAAOyhC,YAAYgnB,EAAAl7B,QAAQiuD,eAAgB75C,GAC3C3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASw+C,OAC3BrxE,EAAO6hC,aAAa4mB,EAAA51B,SAASq+C,OAC3BvvC,EACA3hC,EAAOygC,UAAU,KAEnBzgC,EAAOygC,UAAU,MAGzB,MAEF,OACMja,EAAKo9C,YAAYjiC,EAAMnmB,KACzBmmB,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS4+C,OAClC9vC,EACA3hC,EAAOygC,UAAU,OAGrB,MAEF,OACMja,EAAKo9C,YAAYjiC,EAAMnmB,KACzBmmB,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS4+C,OAClC9vC,EACA3hC,EAAOygC,UAAU,SAGrB,MAEF,QACMja,EAAKo9C,YAAYjiC,EAAMnmB,KAEzBmmB,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASy8C,MAClC3tC,EACA3hC,EAAOygC,UAAU,KAMzB,OAAOkB,GAITu8B,EAAA57D,UAAAg5E,eAAA,SAAe35C,EAAqBnmB,GAClC,IAAIxb,EAASK,KAAKL,OAClB,OAAQwb,EAAKrG,MACX,OACA,OACA,OACA,OACA,QACEwsB,EAAOthC,KAAKgrE,uBAAuB1pC,EAAMnmB,GAG3C,OACA,OACE,OAAOxb,EAAOyhC,YAAYgnB,EAAAl7B,QAAQw2C,OAAQpiC,GAE5C,OACA,OACE,OAAO3hC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQ02C,OAAQtiC,GAE5C,OACA,OACE,OAAO3hC,EAAOyhC,YAAyB,IAAbjmB,EAAKorB,KAAa6hB,EAAAl7B,QAAQ02C,OAASxb,EAAAl7B,QAAQw2C,OAAQpiC,GAE/E,QACE,OAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASq8C,MAAOvtC,EAAM3hC,EAAOihC,UAAU,IAEpE,QACE,OAAOjhC,EAAO6hC,aAAa4mB,EAAA51B,SAASs8C,MAAOxtC,EAAM3hC,EAAOmhC,UAAU,IAEpE,QAEE,OADAt4B,QAAO,GACA7I,EAAOygC,UAAU,KAM9By9B,EAAA57D,UAAA0kE,cAAA,SAAcrlC,EAAqBnmB,GACjC,IAAIxb,EAASK,KAAKL,OAClB,OAAQwb,EAAKrG,MACX,OACA,OACA,OACA,OACA,QACEwsB,EAAOthC,KAAKgrE,uBAAuB1pC,EAAMnmB,GAG3C,OACA,OACE,OAAOmmB,EAET,OACA,OACE,OAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS+5C,MAAOjrC,EAAM3hC,EAAO6gC,UAAU,IAEpE,OACA,OACE,OAAoB,IAAbrlB,EAAKorB,KACR5mC,EAAO6hC,aAAa4mB,EAAA51B,SAAS+5C,MAAOjrC,EAAM3hC,EAAO6gC,UAAU,IAC3Dc,EAEN,QACE,OAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAAS64C,MAAO/pC,EAAM3hC,EAAOihC,UAAU,IAEpE,QACE,OAAOjhC,EAAO6hC,aAAa4mB,EAAA51B,SAASk5C,MAAOpqC,EAAM3hC,EAAOmhC,UAAU,IAEpE,QAEE,OADAt4B,QAAO,GACA7I,EAAOygC,UAAU,KAM9By9B,EAAA57D,UAAA4hE,eAAA,SAAe1/C,GACb,IAAIzC,EAAU1hB,KAAK0hB,QACnBlZ,OAAO2b,EAAczC,SAAWA,GAChC,IAAI/hB,EAASK,KAAKL,OACdsT,EAAUjT,KAAKiT,QAGnB,GAAIyO,EAAQtR,OAAS+T,EAAchJ,KAAK6tC,UAAUtnC,GAAU,CAC1D,IAAI05D,EAAmB5yE,OAAOkZ,EAAQrR,oBACtC,OAAKrQ,KAAKgjE,gBAAgBoY,IAC1Bp7E,KAAKg+D,YAAc75C,EAAchJ,KAC1Bxb,EAAOomC,WACZq1C,EAAiBlqE,aAAc,CAC7B+B,EAAQc,SACJpU,EAAO6gC,UAAUrc,EAAc+D,qBAC/BvoB,EAAOygC,UAAUjc,EAAc+D,qBACnCvoB,EAAOygC,UACL28B,EAAAkb,aAAaj4E,KAAMmkB,KAGvBlR,EAAQwtD,iBAX0C9gE,EAAOymC,oBAiB3D,OADIg1C,EAAmB15D,EAAQvR,yBACLnQ,KAAKgjE,gBAAgBoY,IAC/Cp7E,KAAKg+D,YAAc75C,EAAchJ,KAC1Bxb,EAAOomC,WACZq1C,EAAiBlqE,aAAc,CAC7B+B,EAAQc,SACJpU,EAAO6gC,UAAUrc,EAAc+D,qBAC/BvoB,EAAOygC,UAAUjc,EAAc+D,sBAErCjV,EAAQwtD,iBAR+D9gE,EAAOymC,qBAcpFy3B,EAAA57D,UAAA6hE,wBAAA,SAAwB3/C,EAAsBg/C,gBAAA,IAAAA,MAAA,IAC5C,IAAInoD,EAAUmJ,EAAcnJ,QAC5B,IAAKA,EAAS,MAAO,GAErB,IAAIrb,EAASK,KAAKL,OACdwmB,EAAOnmB,KAAK++D,YACZ2D,EAAWv8C,EAAK3K,GAAE,MAClBmoD,EAAiBjB,EACjBl6D,OAAO2d,EAAKo0C,YAAY5uD,EAAA3I,cAAckC,QAAQ0e,MAC9C,EACA68C,EAAiBzgE,KAAKiT,QAAQwtD,mBAElC,IAAmB,IAAA/9C,EAAAxM,EAAA8E,EAAQlB,UAAQQ,EAAAoI,EAAAtM,QAAAkE,EAAAjE,KAAAiE,EAAAoI,EAAAtM,OAAE,CAAhC,IAAIoE,EAAMF,EAAAhZ,MACb,GACEkZ,EAAO1F,MAAQqzC,EAAAl5C,YAAY6L,OAC3BN,EAAO/H,QAAU0R,EAFnB,CAKA,IAAIkF,EAAe7O,EAAQhS,QAAQ6gB,EAAMxL,MAAMlS,EAAAtJ,YAAYsZ,QAC3D,IAAI0gD,EAAYhzC,EAAMlO,KAClBkgE,EAAkBhf,EAAUvS,eAC5BgY,EAAkBz4C,EAAMpnB,UAAU6/D,gBACtC,GAAIA,EACFqB,EAAMt4D,KACJlL,EAAOgjC,YAAY05B,EAAUziD,SAC3Bja,EAAOqiC,eAAe2hC,EAAgBlD,GACtCzgE,KAAKsiE,kBACHR,EACAzF,EAAS,KAIXgf,EACAhyD,EAAMhC,mBAGL,CACL,IAAIF,EAAiBkC,EAAMpnB,UAAUklB,eACrCg8C,EAAMt4D,KACJlL,EAAOgjC,YAAY05B,EAAUziD,SAC3Bja,EAAOqiC,eAAe2hC,EAAgBlD,GACtCt5C,GAAkB,EACdxnB,EAAOqiC,eACL0gC,EACIl6D,OAAO2d,EAAKo0C,YAAYlxC,EAAMzoB,OAAOgjB,MACrC,EAAIuD,EACRk0D,GAEFhf,EAAUtS,aAAapqD,GAC3B07E,EACAhyD,EAAMhC,mHAKd,OAAO87C,GAITtF,EAAA57D,UAAA6jE,iBAAA,SAAiBxkC,EAAqBn4B,GACpC,IAAImgE,EAAiBtpE,KAAK++D,YAAYuK,eAClCv/D,EAASZ,EAAMY,OACfA,EAAO8c,eAAiB,IAAG9c,EAAO8c,eAAiB7mB,KAAKL,OAAOmxC,iBAAiB/mC,EAAOC,iBAC3Fb,EAAMyd,aAAe0a,EACrBgoC,EAAexkD,eAAeja,KAAK1B,IAEvC00D,EA1/OA,CAA8BjyD,EAAAX,mBA8/O9B,SAASm3D,EACPrrD,EACAjE,GAQA,GALA4qD,EAA8B5qD,EAAY3J,MAAMY,OAAO08C,WAEvDkX,EAA+BxV,EAAAtlC,mBAC7B9L,EAAQnW,KAAMmW,EAAQtE,OAAQsE,EAAQyE,GAAG7P,EAAAtJ,YAAY4e,WAAW,GAE7DlK,EAAQyB,aAAa2vC,EAAAj5C,eAAe8R,UAAzC,CAEA,IAAIU,EAAU3K,EAAQ2K,QAClBhF,EAAYlU,OAAOsD,EAAAuV,cAAcvV,EAAAe,cAAcmU,SAAUlO,EAAY0J,aACrEo+B,EAAOl+B,EAAUsC,UACrB,GAAI47B,GAAQA,EAAKpzC,OAAQ,CACvB,IAAIoF,EAAMguC,EAAK,GAGXhuC,EAAIkI,MAAQhJ,EAAAiJ,SAASmK,SAA+BtS,EAAKuS,aAAerT,EAAAsT,YAAYC,QACtFs+C,EAAyD/wD,EAAKtL,MAC1Ds5C,EAAKpzC,QAAU,KACjBoF,EAAMguC,EAAK,IACH9lC,MAAQhJ,EAAAiJ,SAASmK,SAA+BtS,EAAKuS,aAAerT,EAAAsT,YAAYC,QACtFq+C,EAA8BC,EAC9BA,EAAyD/wD,EAAKtL,MAC1Ds5C,EAAKpzC,OAAS,GAChBka,EAAQlW,MACNI,EAAA/C,eAAe8W,+BACfjD,EAAUvT,MAAO,IAAKyxC,EAAKpzC,OAAOsC,aAItC4X,EAAQlW,MACNI,EAAA/C,eAAe6W,wBACf9S,EAAIzD,SAKVuY,EAAQlW,MACNI,EAAA/C,eAAe6W,wBACf9S,EAAIzD,YAIRuY,EAAQlW,MACNI,EAAA/C,eAAeqrE,wCACfx3D,EAAUvT,MAAO,IAAK,MA9iPfzJ,EAAAm+D,WAujPb,SAAUD,GAEKA,EAAA4F,QAAU,eAEV5F,EAAAgY,KAAO,YAEPhY,EAAAmY,QAAU,eANzB,CAAUnY,MAAe,oFC3zPzB,SAAY/0D,GACVA,IAAA,uDACAA,IAAA,+CACAA,IAAA,qCACAA,IAAA,mHACAA,IAAA,6LACAA,IAAA,6EACAA,IAAA,yFACAA,IAAA,uEACAA,IAAA,qEACAA,IAAA,+HACAA,IAAA,qIACAA,IAAA,mGACAA,IAAA,yEACAA,IAAA,+FACAA,IAAA,yFACAA,IAAA,mEACAA,IAAA,+CACAA,IAAA,yMACAA,IAAA,+FACAA,IAAA,mHACAA,IAAA,yFACAA,IAAA,uJACAA,IAAA,mFACAA,IAAA,6FACAA,IAAA,+FACAA,IAAA,iGACAA,IAAA,2DACAA,IAAA,gEACAA,IAAA,gDACAA,IAAA,gCACAA,IAAA,0FACAA,IAAA,8DACAA,IAAA,0CACAA,IAAA,4GACAA,IAAA,gHACAA,IAAA,0HACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,wEACAA,IAAA,gFACAA,IAAA,gGACAA,IAAA,sGACAA,IAAA,gHACAA,IAAA,oFACAA,IAAA,4EACAA,IAAA,8HACAA,IAAA,8HACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,gFACAA,IAAA,oKACAA,IAAA,kLACAA,IAAA,8HACAA,IAAA,gDACAA,IAAA,oCACAA,IAAA,gJACAA,IAAA,4CACAA,IAAA,oGACAA,IAAA,sCACAA,IAAA,8DACAA,IAAA,sDACAA,IAAA,4CACAA,IAAA,4DACAA,IAAA,kIACAA,IAAA,wIACAA,IAAA,sDACAA,IAAA,wDACAA,IAAA,oEACAA,IAAA,kDACAA,IAAA,wFACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,oDACAA,IAAA,kDACAA,IAAA,0HACAA,IAAA,gKACAA,IAAA,kFACAA,IAAA,oEACAA,IAAA,kKACAA,IAAA,kJACAA,IAAA,0IACAA,IAAA,oFACAA,IAAA,sIACAA,IAAA,sDACAA,IAAA,8CACAA,IAAA,4EACAA,IAAA,4FACAA,IAAA,oDACAA,IAAA,8EACAA,IAAA,kFACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,oMACAA,IAAA,gFACAA,IAAA,sNACAA,IAAA,0JACAA,IAAA,sIACAA,IAAA,4LACAA,IAAA,sLACAA,IAAA,oGACAA,IAAA,gIACAA,IAAA,8HACAA,IAAA,oGACAA,IAAA,oFACAA,IAAA,wKACAA,IAAA,kHACAA,IAAA,4EACAA,IAAA,4KACAA,IAAA,sMACAA,IAAA,0DACAA,IAAA,8FACAA,IAAA,4JACAA,IAAA,gIACAA,IAAA,gJACAA,IAAA,gJACAA,IAAA,sGACAA,IAAA,sEACAA,IAAA,wFACAA,IAAA,gFACAA,IAAA,sQACAA,IAAA,8KACAA,IAAA,kLACAA,IAAA,kFACAA,IAAA,0IACAA,IAAA,kDACAA,IAAA,0CACAA,IAAA,wFACAA,IAAA,4HACAA,IAAA,6KACAA,IAAA,2MAlIF,CAAYnJ,EAAAmJ,iBAAAnJ,EAAAmJ,eAAc,KAsI1BnJ,EAAAoJ,uBAAA,SAAuCG,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,2BACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,oDACjB,KAAK,IAAK,MAAO,uCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,+DACjB,KAAK,IAAK,MAAO,kEACjB,KAAK,IAAK,MAAO,iDACjB,KAAK,IAAK,MAAO,oCACjB,KAAK,IAAK,MAAO,uDACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,qCACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,qGACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,6DACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,iFACjB,KAAK,IAAK,MAAO,yCACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,2DACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,KAAM,MAAO,+BAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,oBAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,uDAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,kDAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,sCAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,gEAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,iBAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,iDAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,qBAClB,KAAK,KAAM,MAAO,gCAClB,KAAK,KAAM,MAAO,iEAClB,KAAK,KAAM,MAAO,qEAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,2BAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,wCAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,4EAClB,KAAK,KAAM,MAAO,wEAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,kEAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,6CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,6BAClB,KAAK,KAAM,MAAO,8CAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mDAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,iGAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,+GAClB,KAAK,KAAM,MAAO,8EAClB,KAAK,KAAM,MAAO,oEAClB,KAAK,KAAM,MAAO,6FAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,6DAClB,KAAK,KAAM,MAAO,iEAClB,KAAK,KAAM,MAAO,gEAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,wDAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,yFAClB,KAAK,KAAM,MAAO,kGAClB,KAAK,KAAM,MAAO,oCAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,mEAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,uEAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mIAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,4FAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,oEAClB,KAAK,KAAM,MAAO,4BAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,6DAClB,KAAK,MAAO,MAAO,wFACnB,KAAK,MAAO,MAAO,uGACnB,QAAS,MAAO,sRC7QpB,IAAA4C,EAAA1L,EAAA,GAMAgoD,EAAAhoD,EAAA,GAQAioD,EAAAjoD,EAAA,GAiCAwL,EAAAxL,EAAA,GAIAyL,EAAAzL,EAAA,GAQA8H,EAAA9H,EAAA,IAMA,SAAkBm7E,GAEhBA,IAAA,eAKAA,IAAA,qBAEAA,IAAA,qCAEAA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,0BAEAA,IAAA,0BAEAA,IAAA,8BAKAA,IAAA,mDAEAA,IAAA,iDAEAA,IAAA,iDAEAA,IAAA,wDAEAA,IAAA,wDAKAA,IAAA,sCAEAA,IAAA,4CAKAA,IAAA,sCAMAA,IAAA,uCASAA,IAAA,wCA3DF,CAAkB57E,EAAA47E,YAAA57E,EAAA47E,UAAS,KAmE3B,IAAAl1D,EAAA,WAuDE,SAAAA,IAtCApmB,KAAAupE,aAAyC,KAwlB3C,OA7kBSnjD,EAAAzkB,OAAP,SAAc2nE,GACZ,IAAInjD,EAAO,IAAIC,EAYf,OAXAD,EAAK1T,OAAS,KACd0T,EAAK5U,MAAK,EACV4U,EAAKmjD,eAAiBA,EACtBnjD,EAAKogD,cAAgB,KACrBpgD,EAAKR,WAAa,KAClBQ,EAAKxM,WAAa2vD,EAAe92D,UAAUmH,WAC3CwM,EAAKzB,wBAA0B4kD,EAAe5kD,wBAC9CyB,EAAKo1D,cAAgBznE,QAAQ,GAC7BqS,EAAKq1D,iBAAmB,KACxBr1D,EAAKs1D,eAAiB,KACtBt1D,EAAK6hD,kBAAoB,KAClB7hD,GAIFC,EAAAmuD,aAAP,SAAoBjL,EAA0BmS,GAC5C,IAAIt1D,EAAOC,EAAKzkB,OAAO2nE,GAMvB,OALAnjD,EAAKlV,IAAG,MACRkV,EAAKs1D,eAAiBA,EACtBt1D,EAAK6hD,kBAAoByT,EAAevqE,aAAe,aAAeuqE,EAAev2D,gBAAgBpb,SAAS,IAC9Gqc,EAAKxM,WAAa8hE,EAAejpE,UAAUmH,WAC3CwM,EAAKzB,wBAA0B+2D,EAAe/2D,wBACvCyB,GAMTplB,OAAAC,eAAIolB,EAAAnkB,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAKy7E,gBAAkBz7E,KAAKspE,gDAIrCljD,EAAAnkB,UAAAuZ,GAAA,SAAGmB,GAAyB,OAAQ3c,KAAKuR,MAAQoL,IAASA,GAE1DyJ,EAAAnkB,UAAA4b,MAAA,SAAMlB,GAAyB,OAA8B,IAAtB3c,KAAKuR,MAAQoL,IAEpDyJ,EAAAnkB,UAAAgP,IAAA,SAAI0L,GAAyB3c,KAAKuR,OAASoL,GAE3CyJ,EAAAnkB,UAAA6kE,MAAA,SAAMnqD,GAAyB3c,KAAKuR,QAAUoL,GAG9CyJ,EAAAnkB,UAAAkkE,KAAA,WACE,IAAIuV,EAAS,IAAIt1D,EAYjB,OAXAs1D,EAAOjpE,OAASzS,KAChB07E,EAAOnqE,MAAQvR,KAAKuR,MACpBmqE,EAAOpS,eAAiBtpE,KAAKspE,eAC7BoS,EAAOnV,cAAgBvmE,KAAKumE,cAC5BmV,EAAO/1D,WAAa3lB,KAAK2lB,WACzB+1D,EAAO/hE,WAAa3Z,KAAK2Z,WACzB+hE,EAAOh3D,wBAA0B1kB,KAAK0kB,wBACtCg3D,EAAOH,cAAgBv7E,KAAKu7E,cAC5BG,EAAOF,iBAAmBx7E,KAAKw7E,iBAAmBx7E,KAAKw7E,iBAAiBG,QAAU,KAClFD,EAAOD,eAAiBz7E,KAAKy7E,eAC7BC,EAAO1T,kBAAoBhoE,KAAKgoE,kBACzB0T,GAITt1D,EAAAnkB,UAAAkmE,aAAA,SAAahtD,EAAYygE,QAAA,IAAAA,OAAA,GACvB,IACIC,EASA/1D,EAVAwjD,EAAiBtpE,KAAKspE,eAE1B,OAAQnuD,EAAK2uC,gBACX,KAAK1B,EAAAj+B,WAAWhkB,IAAO01E,EAAQvS,EAAelkD,SAAU,MACxD,KAAKgjC,EAAAj+B,WAAW/jB,IAAOy1E,EAAQvS,EAAejkD,SAAU,MACxD,KAAK+iC,EAAAj+B,WAAWvjB,IAAOi1E,EAAQvS,EAAehkD,SAAU,MACxD,KAAK8iC,EAAAj+B,WAAWtjB,IAAOg1E,EAAQvS,EAAe/jD,SAAU,MACxD,KAAK6iC,EAAAj+B,WAAWrjB,KAAQ+0E,EAAQvS,EAAe9jD,UAAW,MAC1D,QAAS,MAAM,IAAInM,MAAM,0BAW3B,OARIwiE,GAASA,EAAMr0E,SACjBse,EAAQ+1D,EAAMzH,OACRj5D,KAAOA,EACb2K,EAAMvU,MAAQ5F,EAAAtJ,YAAYmP,MAE1BsU,EAAQwjD,EAAehjD,SAASnL,GAE9BA,EAAKK,GAAG,KAAsCxb,KAAK2pE,gBAAgB7jD,EAAMlC,MAAOg4D,GAC7E91D,GAITM,EAAAnkB,UAAAwmE,cAAA,SAAc3iD,GACZ,IAAIA,EAAMtK,GAAG7P,EAAAtJ,YAAYihB,SAAzB,CACA9a,OAAOsd,EAAMlC,OAAS,GACtB,IACIi4D,EADAvS,EAAiBtpE,KAAKspE,eAG1B,OADA9gE,OAAqB,MAAdsd,EAAM3K,MACE2K,EAAM3K,KAAM2uC,gBACzB,KAAK1B,EAAAj+B,WAAWhkB,IACd01E,EAAQvS,EAAelkD,WAAakkD,EAAelkD,SAAW,IAC9D,MAEF,KAAKgjC,EAAAj+B,WAAW/jB,IACdy1E,EAAQvS,EAAejkD,WAAaikD,EAAejkD,SAAW,IAC9D,MAEF,KAAK+iC,EAAAj+B,WAAWvjB,IACdi1E,EAAQvS,EAAehkD,WAAagkD,EAAehkD,SAAW,IAC9D,MAEF,KAAK8iC,EAAAj+B,WAAWtjB,IACdg1E,EAAQvS,EAAe/jD,WAAa+jD,EAAe/jD,SAAW,IAC9D,MAEF,KAAK6iC,EAAAj+B,WAAWrjB,KACd+0E,EAAQvS,EAAe9jD,YAAc8jD,EAAe9jD,UAAY,IAChE,MAEF,QAAS,MAAM,IAAInM,MAAM,0BAE3B7Q,OAAOsd,EAAMlC,OAAS,GACtBi4D,EAAMhxE,KAAKib,KAIbM,EAAAnkB,UAAAyvE,oBAAA,SAAoBv2D,EAAYygE,GAC9B,IACIC,EAwBA/1D,EAzBAwjD,EAAiBtpE,KAAKspE,eAE1B,OAAQnuD,EAAK2uC,gBACX,KAAK1B,EAAAj+B,WAAWhkB,IACd01E,EAAQvS,EAAelkD,WAAakkD,EAAelkD,SAAW,IAC9D,MAEF,KAAKgjC,EAAAj+B,WAAW/jB,IACdy1E,EAAQvS,EAAejkD,WAAaikD,EAAejkD,SAAW,IAC9D,MAEF,KAAK+iC,EAAAj+B,WAAWvjB,IACdi1E,EAAQvS,EAAehkD,WAAagkD,EAAehkD,SAAW,IAC9D,MAEF,KAAK8iC,EAAAj+B,WAAWtjB,IACdg1E,EAAQvS,EAAe/jD,WAAa+jD,EAAe/jD,SAAW,IAC9D,MAEF,KAAK6iC,EAAAj+B,WAAWrjB,KACd+0E,EAAQvS,EAAe9jD,YAAc8jD,EAAe9jD,UAAY,IAChE,MAEF,QAAS,MAAM,IAAInM,MAAM,0BAW3B,OARIwiE,EAAMr0E,QACRse,EAAQ+1D,EAAMA,EAAMr0E,OAAS,IACvB2T,KAAOA,GAEb2K,EAAQwjD,EAAehjD,SAASnL,GAChC0gE,EAAMhxE,KAAKib,IAET3K,EAAKK,GAAG,KAAsCxb,KAAK2pE,gBAAgB7jD,EAAMlC,MAAOg4D,GAC7E91D,GAITM,EAAAnkB,UAAAwnE,eAAA,SAAe7oE,EAAcua,EAAYygE,EAAengB,QAAA,IAAAA,MAAA,MACtD,IAAIqgB,EAAc97E,KAAKmoE,aAAahtD,GAAM,GAC1C,GAAKnb,KAAKupE,aACL,CACH,IAAIwS,EAAgB/7E,KAAKupE,aAAaroE,IAAIN,GAC1C,GAAIm7E,EAOF,OANItgB,GACFz7D,KAAKspE,eAAe5nD,QAAQlW,MAC1BI,EAAA/C,eAAeqT,uBACfu/C,EAAWtyD,OAGR4yE,OAVa/7E,KAAKupE,aAAe,IAAI75D,IAkBhD,OALAosE,EAAY7qE,IAAItF,EAAAtJ,YAAY25E,QAC5Bh8E,KAAKupE,aAAat4D,IAAIrQ,EAAMk7E,GACxB3gE,EAAKK,GAAG,KACVxb,KAAK2pE,gBAAgBmS,EAAYl4D,MAAOg4D,GAEnCE,GAIT11D,EAAAnkB,UAAAwyE,eAAA,SAAe7zE,EAAcua,EAAYyI,EAAY63C,GACnD,QADmD,IAAAA,MAAA,MAC9Cz7D,KAAKupE,aACL,CACH,IAAIwS,EAAgB/7E,KAAKupE,aAAaroE,IAAIN,GAC1C,GAAIm7E,EAOF,OANItgB,GACFz7D,KAAKspE,eAAe5nD,QAAQlW,MAC1BI,EAAA/C,eAAeqT,uBACfu/C,EAAWtyD,OAGR4yE,OAVa/7E,KAAKupE,aAAe,IAAI75D,IAahDlH,OAAOob,EAAQ5jB,KAAKspE,eAAe1kD,cAAcpd,QACjD,IAAIy0E,EAAc,IAAI9zB,EAAAxkC,MACpB/iB,EACAgjB,EACAzI,EACAnb,KAAKspE,gBAIP,OADAtpE,KAAKupE,aAAat4D,IAAIrQ,EAAMq7E,GACrBA,GAIT71D,EAAAnkB,UAAAmkE,iBAAA,mBACE,GAAIpmE,KAAKupE,aAAc,KACrB,IAAwB,IAAA7mD,EAAAxM,EAAAlW,KAAKupE,aAAazvD,UAAQQ,EAAAoI,EAAAtM,QAAAkE,EAAAjE,KAAAiE,EAAAoI,EAAAtM,OAAE,CAA/C,IAAI0lE,EAAWxhE,EAAAhZ,MACdw6E,EAAYtgE,GAAG7P,EAAAtJ,YAAY25E,SAC7Bh8E,KAAKyoE,cAAcqT,qGAGvB97E,KAAKupE,aAAe,OAKxBnjD,EAAAnkB,UAAAs4D,YAAA,SAAY35D,GACV,IACIs7E,EADAt6D,EAAuB5hB,KAE3B,GAAG,IAAKk8E,EAAQt6D,EAAQ2nD,eAAkB2S,EAAMnpE,IAAInS,GAAQ,OAAOs7E,EAAMh7E,IAAIN,SACtEghB,EAAUA,EAAQnP,QACzB,OAAOzS,KAAKspE,eAAe3kD,aAAazjB,IAAIN,IAI9CwlB,EAAAnkB,UAAAqgB,OAAA,SAAO1hB,GACL,IAAImW,EAAU/W,KAAKu6D,YAAY35D,GAC/B,OAAImW,GACG/W,KAAKg6D,eAAe13C,OAAO1hB,IAIpCwlB,EAAAnkB,UAAAk6E,eAAA,SAAev4D,GACb,GAAIA,EAAQ,EAAG,OAAO,EACtB,GAAIA,EAAQ,GAAI,OAAO3b,EAAAm0E,SAASp8E,KAAKu7E,cAAe33D,GACpD,IAAIy4D,EAAMr8E,KAAKw7E,iBACXn7E,GAAMujB,EAAQ,IAAM,GAAM,EAC9B,SAAMy4D,GAAOh8E,EAAIg8E,EAAI70E,SACdS,EAAAm0E,SAASC,EAAIh8E,GAAIujB,EAAkB,IAATvjB,EAAI,KAIvC+lB,EAAAnkB,UAAA0nE,gBAAA,SAAgB/lD,EAAYg4D,GAC1B,KAAIh4D,EAAQ,GACZ,GAAIA,EAAQ,GACV5jB,KAAKu7E,cAAgBtzE,EAAAq0E,UAAUt8E,KAAKu7E,cAAe33D,EAAOg4D,OAD5D,CAIA,IAAIS,EAAMr8E,KAAKw7E,iBACXn7E,GAAMujB,EAAQ,IAAM,GAAM,EAC9B,GAAKy4D,EAIH,KAAOA,EAAI70E,QAAUnH,GAAGg8E,EAAIxxE,KAAKiJ,QAAQ,QAJjC,CACR9T,KAAKw7E,iBAAmBa,EAAM,IAAIr1E,MAAM3G,EAAI,GAC5C,IAAK,IAAIuU,EAAI,EAAGA,GAAKvU,IAAKuU,EAAGynE,EAAIznE,GAAKd,QAAQ,GAIhDuoE,EAAIh8E,GAAK4H,EAAAq0E,UAAUD,EAAIh8E,GAAIujB,EAAkB,IAATvjB,EAAI,GAASu7E,KAInDx1D,EAAAnkB,UAAAwkE,eAAA,WACE,IAAI6C,EAAiBtpE,KAAKspE,eACtBiT,EAAKjT,EAAe7jD,cACpB+2D,EAAQlT,EAAe5jD,WAG3B,OAFK82D,EACAA,EAAM3xE,KAAK0xE,GADJjT,EAAe5jD,WAAa,CAAE62D,GAEnCjT,EAAe3jD,WAAa42D,EAAGzyE,SAAS,KAIjDsc,EAAAnkB,UAAA2kE,cAAA,WACE,IAAI0C,EAAiBtpE,KAAKspE,eACtBkT,EAAQh0E,OAAO8gE,EAAe5jD,YAC9Ble,EAASgB,OAAOg0E,EAAMh1E,QAC1Bg1E,EAAMpI,MACF5sE,EAAS,EACX8hE,EAAe3jD,WAAa62D,EAAMh1E,EAAS,GAAGsC,SAAS,KAEvDw/D,EAAe3jD,WAAa,KAC5B2jD,EAAe5jD,WAAa,OAKhCU,EAAAnkB,UAAAokE,QAAA,SAAQoW,GACNz8E,KAAKuR,OAAuB,KAAdkrE,EAAMlrE,MACpBvR,KAAKu7E,cAAgBkB,EAAMlB,cAC3Bv7E,KAAKw7E,iBAAmBiB,EAAMjB,kBAIhCp1D,EAAAnkB,UAAAslE,mBAAA,SAAmBkV,GACbA,EAAMjhE,GAAE,IACVxb,KAAKiR,IAAG,KAENwrE,EAAMjhE,GAAE,IACVxb,KAAKiR,IAAG,KAENwrE,EAAMjhE,GAAE,IAAsBihE,EAAM92D,YAAc3lB,KAAK2lB,YACzD3lB,KAAKiR,IAAG,KAENwrE,EAAMjhE,GAAE,KAAyBihE,EAAMlW,eAAiBvmE,KAAKumE,eAC/DvmE,KAAKiR,IAAG,MAENwrE,EAAMjhE,GAAE,KACVxb,KAAKiR,IAAG,OAKZmV,EAAAnkB,UAAA8lE,cAAA,SAActmC,EAAYC,GAExB1hC,KAAKuR,OAASkwB,EAAKlwB,MAAQmwB,EAAMnwB,MAAK,IAGtCvR,KAAKuR,OAAmB,KAAVkwB,EAAKlwB,MACnBvR,KAAKuR,OAAoB,KAAXmwB,EAAMnwB,MAGpBvR,KAAKu7E,cAAgBmB,QAAQj7C,EAAK85C,cAAe75C,EAAM65C,eACvD,IAAIoB,EAAUl7C,EAAK+5C,iBACfoB,EAAWl7C,EAAM85C,iBACrB,GAAe,MAAXmB,GAA+B,MAAZC,EAAkB,CACvC,IAAIC,EAAU78E,KAAKw7E,iBACfsB,EAAYC,IAAIJ,EAAQn1E,OAAQo1E,EAASp1E,QAC7C,GAAIs1E,EAAW,CACb,GAAKD,EACA,KAAOA,EAAQr1E,OAASs1E,GAAWD,EAAQhyE,KAAKiJ,QAAQ,SAD/C+oE,EAAU,IAAI71E,MAAM81E,GAElC,IAAK,IAAIz8E,EAAI,EAAGA,EAAIy8E,IAAaz8E,EAC/Bw8E,EAAQx8E,GAAKq8E,QACXC,EAAQt8E,GACRu8E,EAASv8E,OAYnB+lB,EAAAnkB,UAAAshE,YAAA,SAAYjiC,EAAqBnmB,GAM/B,GAHA3S,OAAO2S,GAAQtP,EAAAsH,KAAKG,OAGf6H,EAAKK,GAAG,IAAsC,OAAO,EAE1D,IAAI4jC,EACJ,OAAQgJ,EAAA7W,gBAAgBjQ,IAGtB,KAAK8mB,EAAAh+B,aAAaulB,SAChB,IAAI7pB,EAAQ9lB,KAAKspE,eAAe1kD,cAAcwjC,EAAAtW,iBAAiBxQ,IAC/D,OAAQthC,KAAKm8E,eAAer2D,EAAMlC,QAC3Bo5D,EAAsBl3D,EAAM3K,KAAMA,GAI3C,KAAKitC,EAAAh+B,aAAa6yD,SAEhB,OADAz0E,OAAO4/C,EAAAjW,WAAW7Q,IACXthC,KAAKujE,YAAYnb,EAAAnW,iBAAiB3Q,GAAOnmB,GAIlD,KAAKitC,EAAAh+B,aAAaylB,UAEhB,IAAIqtC,EAAS10E,OAAOxI,KAAKspE,eAAe5nD,QAAQ/R,eAAezO,IAAIsH,OAAO4/C,EAAA/V,iBAAiB/Q,MAE3F,OADA94B,OAAO00E,EAAOpoE,MAAQqzC,EAAAl5C,YAAYiO,QAC3B8/D,EAAsBx0E,OAAgB00E,EAAQ/hE,MAAOA,GAG9D,KAAKitC,EAAAh+B,aAAasmB,OAChB,OAAQ0X,EAAA9V,YAAYhR,IAGlB,KAAK8mB,EAAA51B,SAASg2C,MACd,KAAKpgB,EAAA51B,SAASo8C,MACd,KAAKxmB,EAAA51B,SAASq8C,MACd,KAAKzmB,EAAA51B,SAASs8C,MACd,KAAK1mB,EAAA51B,SAASy8C,MACd,KAAK7mB,EAAA51B,SAAS+5C,MACd,KAAKnkB,EAAA51B,SAAS64C,MACd,KAAKjjB,EAAA51B,SAASk5C,MACd,KAAKtjB,EAAA51B,SAAS46C,MACd,KAAKhlB,EAAA51B,SAAS86C,MACd,KAAKllB,EAAA51B,SAAS66C,MACd,KAAKjlB,EAAA51B,SAAS+6C,MACd,KAAKnlB,EAAA51B,SAASg7C,MACd,KAAKplB,EAAA51B,SAASi7C,MACd,KAAKrlB,EAAA51B,SAASw7C,MACd,KAAK5lB,EAAA51B,SAAS07C,MACd,KAAK9lB,EAAA51B,SAASy7C,MACd,KAAK7lB,EAAA51B,SAAS27C,MACd,KAAK/lB,EAAA51B,SAAS47C,MACd,KAAKhmB,EAAA51B,SAAS67C,MACd,KAAKjmB,EAAA51B,SAASk7C,MACd,KAAKtlB,EAAA51B,SAASo7C,MACd,KAAKxlB,EAAA51B,SAASm7C,MACd,KAAKvlB,EAAA51B,SAASq7C,MACd,KAAKzlB,EAAA51B,SAASs7C,MACd,KAAK1lB,EAAA51B,SAASu7C,MACd,KAAK3lB,EAAA51B,SAAS87C,MACd,KAAKlmB,EAAA51B,SAASg8C,MACd,KAAKpmB,EAAA51B,SAAS+7C,MACd,KAAKnmB,EAAA51B,SAASi8C,MACd,KAAKrmB,EAAA51B,SAASk8C,MACd,KAAKtmB,EAAA51B,SAASm8C,MAAO,OAAO,EAG5B,KAAKvmB,EAAA51B,SAASo9C,OACZ,QAEIxnB,EAAA7W,gBAAgB6N,EAAUgJ,EAAA7V,cAAcjR,KAAU8mB,EAAAh+B,aAAailB,QAEhC,GAA7B+Y,EAAA3W,iBAAiB2N,IAEc,GAA7BgJ,EAAA3W,iBAAiB2N,KAChBp/C,KAAKujE,YAAYnb,EAAA5V,eAAelR,GAAOnmB,KAI5CitC,EAAA7W,gBAAgB6N,EAAUgJ,EAAA5V,eAAelR,KAAU8mB,EAAAh+B,aAAailB,QAEjC,GAA7B+Y,EAAA3W,iBAAiB2N,IAEc,GAA7BgJ,EAAA3W,iBAAiB2N,KAChBp/C,KAAKujE,YAAYnb,EAAA7V,cAAcjR,GAAOnmB,KASjD,KAAKitC,EAAA51B,SAAS4+C,OAGZ,QAGMhpB,EAAA7W,gBAAgB6N,EAAUgJ,EAAA7V,cAAcjR,KAAU8mB,EAAAh+B,aAAailB,OAC/D+Y,EAAA3W,iBAAiB2N,IAAYjkC,EAAKguC,wBAAwBt9C,EAAAsH,KAAK/P,OAC3DpD,KAAKujE,YAAYnkB,EAASjkC,IAG9BitC,EAAA7W,gBAAgB6N,EAAUgJ,EAAA5V,eAAelR,KAAU8mB,EAAAh+B,aAAailB,OAChE+Y,EAAA3W,iBAAiB2N,IAAYjkC,EAAKguC,wBAAwBt9C,EAAAsH,KAAK/P,OAC3DpD,KAAKujE,YAAYnkB,EAASjkC,IAMtC,KAAKitC,EAAA51B,SAASq+C,OACZ,IAAInpC,EAAQ,GAAKvsB,EAAKorB,KACtB,OAAO6hB,EAAA7W,gBAAgB6N,EAAUgJ,EAAA5V,eAAelR,KAAU8mB,EAAAh+B,aAAailB,OAChE+Y,EAAA3W,iBAAiB2N,GAAW1X,EAIrC,KAAK0gB,EAAA51B,SAASw+C,OACRtpC,EAAQ,GAAKvsB,EAAKorB,KACtB,OAAOvmC,KAAKujE,YAAYnb,EAAA7V,cAAcjR,GAAOnmB,KAC3CitC,EAAA7W,gBAAgB6N,EAAUgJ,EAAA5V,eAAelR,KAAU8mB,EAAAh+B,aAAailB,OAChE+Y,EAAA3W,iBAAiB2N,GAAW1X,GAMhC,KAAK0gB,EAAA51B,SAAS0+C,OACRxpC,EAAQ,GAAKvsB,EAAKorB,KACtB,OAAOprB,EAAKK,GAAE,KAER4sC,EAAA7W,gBAAgB6N,EAAUgJ,EAAA5V,eAAelR,KAAU8mB,EAAAh+B,aAAailB,OAChE+Y,EAAA3W,iBAAiB2N,GAAW1X,GAE9B1nC,KAAKujE,YAAYnb,EAAA7V,cAAcjR,GAAOnmB,MACpCitC,EAAA7W,gBAAgB6N,EAAUgJ,EAAA5V,eAAelR,KAAU8mB,EAAAh+B,aAAailB,OAChE+Y,EAAA3W,iBAAiB2N,IAAY1X,GAKrC,KAAK0gB,EAAA51B,SAAS49C,OACd,KAAKhoB,EAAA51B,SAASg+C,OACd,KAAKpoB,EAAA51B,SAASk+C,OACZ,OAAO1wE,KAAKujE,YAAYnb,EAAA7V,cAAcjR,GAAOnmB,IACtCnb,KAAKujE,YAAYnb,EAAA5V,eAAelR,GAAOnmB,GAGlD,MAGF,KAAKitC,EAAAh+B,aAAammB,MAChB,OAAQ6X,EAAA3V,WAAWnR,IAGjB,KAAK8mB,EAAAl7B,QAAQw2C,OACb,KAAKtb,EAAAl7B,QAAQ02C,OAAQ,OAAO,EAG5B,KAAKxb,EAAAl7B,QAAQiwD,OACb,KAAK/0B,EAAAl7B,QAAQkwD,OACb,KAAKh1B,EAAAl7B,QAAQmwD,UAAW,OAAOliE,EAAKorB,KAAO,EAE7C,MAIF,KAAK6hB,EAAAh+B,aAAailB,MAChB,IAAI/tC,EAAa,EACjB,OAAQ8mD,EAAA5W,kBAAkBlQ,IACxB,KAAK8mB,EAAAj+B,WAAWhkB,IAAO7E,EAAQ8mD,EAAA3W,iBAAiBnQ,GAAO,MACvD,KAAK8mB,EAAAj+B,WAAW/jB,IAAO9E,EAAQ8mD,EAAA1W,oBAAoBpQ,GAAO,MAC1D,KAAK8mB,EAAAj+B,WAAWvjB,IAAOtF,EAAQ8B,IAAIglD,EAAAxW,iBAAiBtQ,IAAQ,MAC5D,KAAK8mB,EAAAj+B,WAAWtjB,IAAOvF,EAAQ8B,IAAIglD,EAAAvW,iBAAiBvQ,IAAQ,MAC5D,QAAS94B,QAAO,GAElB,OAAQ2S,EAAKrG,MACX,OAAkB,OAAOxT,EAAQ4B,GAAGo6E,WAAah8E,EAAQ4B,GAAG+rC,UAC5D,OAAmB,OAAO3tC,EAAQ6B,IAAIm6E,WAAah8E,EAAQ6B,IAAI8rC,UAC/D,OAAkB,OAAO3tC,EAAQ,GAAKA,EAAQiC,GAAG0rC,UACjD,OAAmB,OAAO3tC,EAAQ,GAAKA,EAAQkC,IAAIyrC,UACnD,QAAoB,OAAuB,KAAP,EAAR3tC,GAE9B,MAIF,KAAK8mD,EAAAh+B,aAAa4lB,KAChB,IAAIi7B,OAAQ,EACZ,OAAQ7iB,EAAAzV,aAAarR,IACnB,KAAK,EAAM2pC,EAAW7iB,EAAAtV,aAAaxR,GAAQz1B,EAAAsH,KAAKjQ,GAAK2I,EAAAsH,KAAK5P,GAAI,MAC9D,KAAK,EAAM0nE,EAAW7iB,EAAAtV,aAAaxR,GAAQz1B,EAAAsH,KAAKhQ,IAAM0I,EAAAsH,KAAK3P,IAAK,MAChE,QAAWynE,EAAW7iB,EAAAtV,aAAaxR,GAAQz1B,EAAAsH,KAAK/P,IAAMyI,EAAAsH,KAAK1P,IAE7D,OAAOu5E,EAAsB/R,EAAU9vD,GAMzC,KAAKitC,EAAAh+B,aAAauuB,MAChB,IAAKyP,EAAA7U,aAAajS,GAAO,CACvB,IAAIiF,EAAO/9B,OAAO4/C,EAAA3U,mBAAmBnS,IACjCi8C,EAAOn1B,EAAAzU,cAAcrS,EAAMiF,EAAO,GACtC,OAAOvmC,KAAKujE,YAAYga,EAAMpiE,GAEhC,MAIF,KAAKitC,EAAAh+B,aAAaozD,GAChB,OAAOx9E,KAAKujE,YAAYnb,EAAArU,UAAUzS,GAAOnmB,IAClCnb,KAAKujE,YAAY/6D,OAAO4/C,EAAAnU,WAAW3S,IAAQnmB,GAIpD,KAAKitC,EAAAh+B,aAAaqzD,OAChB,OAAOz9E,KAAKujE,YAAYnb,EAAAzT,cAAcrT,GAAOnmB,IACtCnb,KAAKujE,YAAYnb,EAAAvT,cAAcvT,GAAOnmB,GAI/C,KAAKitC,EAAAh+B,aAAaszD,KAChB,IAAIh8D,EAAU1hB,KAAKspE,eAAe5nD,QAC9B8C,EAAWhc,OAAOkZ,EAAQ7R,gBAAgB3O,IAAIsH,OAAO4/C,EAAA/S,cAAc/T,MACvE94B,OAAOgc,EAAS1P,MAAQqzC,EAAAl5C,YAAY4L,UACpC,IAAIlB,EAAwB6K,EAAUhS,UAAUmH,WAChD,OAAmB6K,EAAU2B,KAAK3K,GAAE,IAC7BwhE,EAAsBrjE,EAAYwB,GAI3C,KAAKitC,EAAAh+B,aAAaouB,YAAa,OAAO,EAExC,OAAO,GAEXpyB,EAzmBA,GA4mBA,SAAS42D,EAAsB/R,EAAgBrvB,GAC7C,OAAQqvB,EAASzvD,GAAE,IACZyvD,EAAS1kC,KAAOqV,EAAOrV,MACvB0kC,EAASzvD,GAAE,IAAsBogC,EAAOpgC,GAAE,GA/mBtC9b,EAAA0mB,sFCpIb,IAAAgiC,EAAAjoD,EAAA,GAwDAw9E,EAAA,WAWE,SAAAA,IAHA39E,KAAAqK,KAAiB,GACjBrK,KAAA49E,WAAkB,EAmyBpB,OA1yBSD,EAAAE,UAAP,SAAiBl+E,GACf,IAAIm+E,EAAa,IAAIH,EAErB,OADAG,EAAWD,UAAUl+E,GACdm+E,EAAW3nB,UASpBwnB,EAAA17E,UAAA47E,UAAA,SAAUl+E,GACR,MAAM,IAAI0Z,MAAM,oBAGlBskE,EAAA17E,UAAA87E,kBAAA,SAAkBvyC,GAChB,IAAI5qC,EAAOwnD,EAAApS,gBAAgBxK,IAAS,IAAMxrC,KAAK49E,WAAW9zE,SAAS,IAC/Dka,EAAOokC,EAAArS,gBAAgBvK,GAC3BxrC,KAAK6K,KAAK,aACV7K,KAAK6K,KAAKjK,GACVZ,KAAK6K,KAAK,KACT,IAAK,IAAIxK,EAAW,EAAGoU,EAAW2zC,EAAAlS,sBAAsB1K,GAAOnrC,EAAIoU,IAAKpU,EACnEA,EAAI,GAAGL,KAAK6K,KAAK,MACrB7K,KAAK6K,KAAK,KACV7K,KAAK6K,KAAKxK,EAAEyJ,SAAS,KACrB9J,KAAK6K,KAAK,MACV7K,KAAK6K,KAAKmzE,EAAiB51B,EAAAhS,qBAAqB5K,EAAMnrC,KAExDL,KAAK6K,KAAK,OACV7K,KAAK6K,KAAKmzE,EAAiB51B,EAAA9R,sBAAsB9K,KACjDxrC,KAAK6K,KAAK,KACNu9C,EAAA7W,gBAAgBvtB,IAASokC,EAAAh+B,aAAauuB,OACxC34C,KAAK6K,KAAK,OAEZ7K,KAAKi+E,oBAAoBj6D,GACrBokC,EAAA7W,gBAAgBvtB,IAASokC,EAAAh+B,aAAauuB,OACxC34C,KAAK6K,KAAK,WAEV7K,KAAK49E,YAGTD,EAAA17E,UAAAg8E,oBAAA,SAAoB38C,GAClB,IAGI48C,EACAr5E,EACAxE,EAAUoU,EALV8nE,EAAKn0B,EAAA7W,gBAAgBjQ,GACrBnmB,EAAOitC,EAAA5W,kBAAkBlQ,GAM7B,OAAQi7C,GACN,KAAKn0B,EAAAh+B,aAAauuB,MAOhB,IANqC,OAAhC9zC,EAASujD,EAAA7U,aAAajS,MACzBthC,KAAK6K,KAAKhG,GACV7E,KAAK6K,KAAK,OAEZ7K,KAAK6K,KAAK,OACV4J,EAAI2zC,EAAA3U,mBAAmBnS,GAClBjhC,EAAI,EAAGA,EAAIoU,IAAKpU,EACnBL,KAAKi+E,oBAAoB71B,EAAAzU,cAAcrS,EAAMjhC,IAG/C,YADAL,KAAK6K,KAAK,OAGZ,KAAKu9C,EAAAh+B,aAAaozD,GAiBhB,YAhBIriE,GAAQitC,EAAAj+B,WAAWka,MACrBrkC,KAAK6K,KAAK,QACV7K,KAAKi+E,oBAAoB71B,EAAAvU,eAAevS,IACxCthC,KAAK6K,KAAK,MACV7K,KAAKi+E,oBAAoB71B,EAAArU,UAAUzS,KAC/B48C,EAAS91B,EAAAnU,WAAW3S,MACtBthC,KAAK6K,KAAK,UACV7K,KAAKi+E,oBAAoBC,MAG3Bl+E,KAAKi+E,oBAAoB71B,EAAAvU,eAAevS,IACxCthC,KAAK6K,KAAK,OACV7K,KAAKi+E,oBAAoB71B,EAAArU,UAAUzS,IACnCthC,KAAK6K,KAAK,OACV7K,KAAKi+E,oBAAoB71B,EAAAnU,WAAW3S,MAIxC,KAAK8mB,EAAAh+B,aAAa+zD,KACoB,OAA/Bt5E,EAASujD,EAAAjU,YAAY7S,MACxBthC,KAAK6K,KAAKhG,GACV7E,KAAK6K,KAAK,OAEZ7K,KAAK6K,KAAK,OACV7K,KAAKi+E,oBAAoB71B,EAAA/T,YAAY/S,IACrCthC,KAAK6K,KAAK,gBAEZ,KAAKu9C,EAAAh+B,aAAasuB,MAahB,OAZIwlC,EAAS91B,EAAA3T,kBAAkBnT,MAC7BthC,KAAK6K,KAAK,QACV7K,KAAKi+E,oBAAoBC,GACzBl+E,KAAK6K,KAAK,YAEyB,OAAhChG,EAASujD,EAAA7T,aAAajT,KACzBthC,KAAK6K,KAAK,UACV7K,KAAK6K,KAAKhG,GACV7E,KAAK6K,KAAK,QAEV7K,KAAK6K,KAAK,aAId,KAAKu9C,EAAAh+B,aAAag0D,OAClB,KAAKh2B,EAAAh+B,aAAaszD,KAClB,KAAKt1B,EAAAh+B,aAAai0D,aAChB,MAAM,IAAIhlE,MAAM,mBAElB,KAAK+uC,EAAAh+B,aAAaulB,SAGhB,OAFA3vC,KAAK6K,KAAK,UACV7K,KAAK6K,KAAKu9C,EAAAtW,iBAAiBxQ,GAAMx3B,SAAS,KAG5C,KAAKs+C,EAAAh+B,aAAa6yD,SAKhB,OAJAj9E,KAAK6K,KAAK,KACV7K,KAAK6K,KAAKu9C,EAAArW,iBAAiBzQ,GAAMx3B,SAAS,KAC1C9J,KAAK6K,KAAK,YACV7K,KAAKi+E,oBAAoB71B,EAAAnW,iBAAiB3Q,IAG5C,KAAK8mB,EAAAh+B,aAAaylB,UAClB,KAAKuY,EAAAh+B,aAAak0D,UAChB,MAAM,IAAIjlE,MAAM,mBAElB,KAAK+uC,EAAAh+B,aAAa4lB,KAQhB,OAPAhwC,KAAK6K,KAAK,SACV7K,KAAK6K,KAAKmzE,EAAiB7iE,IAC3Bnb,KAAK6K,KAAK,MACV7K,KAAK6K,KAAKu9C,EAAAxV,cAActR,GAAMx3B,SAAS,KACvC9J,KAAK6K,KAAK,OACV7K,KAAKi+E,oBAAoB71B,EAAAvV,WAAWvR,SACpCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAAh+B,aAAam0D,MAUhB,OATAv+E,KAAK6K,KAAK,UACV7K,KAAK6K,KAAKmzE,EAAiB7iE,IAC3Bnb,KAAK6K,KAAK,MACV7K,KAAK6K,KAAKu9C,EAAAnV,eAAe3R,GAAMx3B,SAAS,KACxC9J,KAAK6K,KAAK,OACV7K,KAAKi+E,oBAAoB71B,EAAAjV,YAAY7R,IACrCthC,KAAK6K,KAAK,MACV7K,KAAKi+E,oBAAoB71B,EAAA/U,cAAc/R,SACvCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAAh+B,aAAailB,MAChB,OAAQl0B,GACN,KAAKitC,EAAAj+B,WAAWhkB,IAEd,YADAnG,KAAK6K,KAAKu9C,EAAA3W,iBAAiBnQ,GAAMx3B,SAAS,KAG5C,KAAKs+C,EAAAj+B,WAAW/jB,IASd,YARApG,KAAK6K,KACH2zE,cACE1qE,QACEs0C,EAAA1W,oBAAoBpQ,GACpB8mB,EAAAzW,qBAAqBrQ,MAM7B,KAAK8mB,EAAAj+B,WAAWvjB,IAEd,YADA5G,KAAK6K,KAAKu9C,EAAAxW,iBAAiBtQ,GAAMx3B,SAAS,KAG5C,KAAKs+C,EAAAj+B,WAAWtjB,IAEd,YADA7G,KAAK6K,KAAKu9C,EAAAvW,iBAAiBvQ,GAAMx3B,SAAS,KAI9C,MAEF,KAAKs+C,EAAAh+B,aAAammB,MAChB,OAAQ6X,EAAA3V,WAAWnR,IACjB,KAAK8mB,EAAAl7B,QAAQiwD,OAIX,OAHAn9E,KAAK6K,KAAK,aACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,SACvCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAAl7B,QAAQkwD,OAIX,OAHAp9E,KAAK6K,KAAK,aACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,SACvCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAAl7B,QAAQmwD,UAIX,OAHAr9E,KAAK6K,KAAK,gBACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,SACvCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAAl7B,QAAQ6tD,OACb,KAAK3yB,EAAAl7B,QAAQ8tD,OAGX,OAFAh7E,KAAK6K,KAAK,UACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,IAGzC,KAAK8mB,EAAAl7B,QAAQuxD,OAIX,OAHAz+E,KAAK6K,KAAK,aACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,SACvCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAAl7B,QAAQwxD,QAIX,OAHA1+E,KAAK6K,KAAK,cACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,SACvCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAAl7B,QAAQyxD,SAIX,OAHA3+E,KAAK6K,KAAK,eACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,SACvCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAAl7B,QAAQ0xD,SAIX,OAHA5+E,KAAK6K,KAAK,eACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,SACvCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAAl7B,QAAQ2xD,WAIX,OAHA7+E,KAAK6K,KAAK,iBACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,SACvCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAAl7B,QAAQ4xD,QAIX,OAHA9+E,KAAK6K,KAAK,cACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,SACvCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAAl7B,QAAQw2C,OACb,KAAKtb,EAAAl7B,QAAQ02C,OAGX,OAFA5jE,KAAK6K,KAAK,UACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,IAGzC,KAAK8mB,EAAAl7B,QAAQ6xD,OAIX,OAHA/+E,KAAK6K,KAAK,aACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,SACvCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAAl7B,QAAQ8xD,OAIX,OAHAh/E,KAAK6K,KAAK,aACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,SACvCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAAl7B,QAAQ+xD,UAIX,OAHAj/E,KAAK6K,KAAK,gBACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,SACvCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAAl7B,QAAQgyD,OAIX,OAHAl/E,KAAK6K,KAAK,aACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,SACvCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAAl7B,QAAQiyD,QAIX,OAHAn/E,KAAK6K,KAAK,cACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,SACvCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAAl7B,QAAQkyD,SAIX,OAHAp/E,KAAK6K,KAAK,eACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,SACvCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAAl7B,QAAQmyD,SAIX,OAHAr/E,KAAK6K,KAAK,eACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,SACvCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAAl7B,QAAQoyD,WAIX,OAHAt/E,KAAK6K,KAAK,iBACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,SACvCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAAl7B,QAAQqyD,QAIX,OAHAv/E,KAAK6K,KAAK,cACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,SACvCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAAl7B,QAAQu/C,UAGX,OAFAzsE,KAAK6K,KAAK,cACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,IAGzC,KAAK8mB,EAAAl7B,QAAQw/C,UAGX,OAFA1sE,KAAK6K,KAAK,mBACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,IAGzC,KAAK8mB,EAAAl7B,QAAQs/C,QAKb,KAAKpkB,EAAAl7B,QAAQq+C,cAGX,OAFAvrE,KAAK6K,KAAK,cACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,IAGzC,KAAK8mB,EAAAl7B,QAAQo+C,cAGX,OAFAtrE,KAAK6K,KAAK,cACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,IAGzC,KAAK8mB,EAAAl7B,QAAQu+C,cAGX,OAFAzrE,KAAK6K,KAAK,mBACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,IAGzC,KAAK8mB,EAAAl7B,QAAQs+C,cAGX,OAFAxrE,KAAK6K,KAAK,mBACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,IAGzC,KAAK8mB,EAAAl7B,QAAQ0+C,cAGX,OAFA5rE,KAAK6K,KAAK,cACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,IAGzC,KAAK8mB,EAAAl7B,QAAQy+C,cAGX,OAFA3rE,KAAK6K,KAAK,cACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,IAGzC,KAAK8mB,EAAAl7B,QAAQ4+C,cAGX,OAFA9rE,KAAK6K,KAAK,mBACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,IAGzC,KAAK8mB,EAAAl7B,QAAQ2+C,cAGX,OAFA7rE,KAAK6K,KAAK,mBACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,IAGzC,KAAK8mB,EAAAl7B,QAAQsyD,eAIX,OAHAx/E,KAAK6K,KAAK,yBACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,SACvCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAAl7B,QAAQuyD,eAIX,OAHAz/E,KAAK6K,KAAK,yBACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,SACvCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAAl7B,QAAQ++C,gBAGX,OAFAjsE,KAAK6K,KAAK,cACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,IAGzC,KAAK8mB,EAAAl7B,QAAQm/C,gBAGX,OAFArsE,KAAK6K,KAAK,cACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,IAGzC,KAAK8mB,EAAAl7B,QAAQg/C,gBAGX,OAFAlsE,KAAK6K,KAAK,mBACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,IAGzC,KAAK8mB,EAAAl7B,QAAQo/C,gBAGX,OAFAtsE,KAAK6K,KAAK,mBACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,IAGzC,KAAK8mB,EAAAl7B,QAAQ6+C,gBAGX,OAFA/rE,KAAK6K,KAAK,cACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,IAGzC,KAAK8mB,EAAAl7B,QAAQi/C,gBAGX,OAFAnsE,KAAK6K,KAAK,cACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,IAGzC,KAAK8mB,EAAAl7B,QAAQ8+C,gBAGX,OAFAhsE,KAAK6K,KAAK,mBACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,IAGzC,KAAK8mB,EAAAl7B,QAAQk/C,gBAGX,OAFApsE,KAAK6K,KAAK,mBACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,IAGzC,KAAK8mB,EAAAl7B,QAAQi+C,WAGX,OAFAnrE,KAAK6K,KAAK,cACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,IAGzC,KAAK8mB,EAAAl7B,QAAQk+C,UAGX,OAFAprE,KAAK6K,KAAK,cACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,IAGzC,KAAK8mB,EAAAl7B,QAAQwyD,eAIX,OAHA1/E,KAAK6K,KAAK,yBACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,SACvCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAAl7B,QAAQyyD,eAIX,OAHA3/E,KAAK6K,KAAK,yBACV7K,KAAKi+E,oBAAoB71B,EAAA1V,cAAcpR,SACvCthC,KAAK6K,KAAK,KAId,MAEF,KAAKu9C,EAAAh+B,aAAasmB,OAChB,OAAQ0X,EAAA9V,YAAYhR,IAClB,KAAK8mB,EAAA51B,SAASuwC,OACd,KAAK3a,EAAA51B,SAAS68C,OACd,KAAKjnB,EAAA51B,SAAS88C,OACd,KAAKlnB,EAAA51B,SAAS+8C,OAIZ,OAHAvvE,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,YACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAASg9C,OACd,KAAKpnB,EAAA51B,SAASi9C,OACd,KAAKrnB,EAAA51B,SAASk9C,OACd,KAAKtnB,EAAA51B,SAASm9C,OAIZ,OAHA3vE,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,YACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAASo9C,OACd,KAAKxnB,EAAA51B,SAASq9C,OACd,KAAKznB,EAAA51B,SAASs9C,OACd,KAAK1nB,EAAA51B,SAASu9C,OAIZ,OAHA/vE,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,YACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAAS09C,OACd,KAAK9nB,EAAA51B,SAAS29C,OACd,KAAK/nB,EAAA51B,SAAS89C,OACd,KAAKloB,EAAA51B,SAAS+9C,OAIZ,OAHAvwE,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,YACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAAS49C,OAMZ,OALApwE,KAAK6K,KAAK,eACV7K,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,YACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,SACxCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAA51B,SAASg+C,OACd,KAAKpoB,EAAA51B,SAASi+C,OAIZ,OAHAzwE,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,YACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAASk+C,OAMZ,OALA1wE,KAAK6K,KAAK,eACV7K,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,YACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,SACxCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAA51B,SAAS4+C,OACd,KAAKhpB,EAAA51B,SAAS6+C,OAIZ,OAHArxE,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,YACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAAS8+C,MACd,KAAKlpB,EAAA51B,SAAS++C,MAIZ,OAHAvxE,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,YACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAASg/C,OACd,KAAKppB,EAAA51B,SAASi/C,OAIZ,OAHAzxE,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,YACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAASq+C,OACd,KAAKzoB,EAAA51B,SAASs+C,OAIZ,OAHA9wE,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,aACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAAS0+C,OACd,KAAK9oB,EAAA51B,SAAS2+C,OAIZ,OAHAnxE,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,cACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAASw+C,OACd,KAAK5oB,EAAA51B,SAASy+C,OAIZ,OAHAjxE,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,aACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAASotD,QAMZ,OALA5/E,KAAK6K,KAAK,cACV7K,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,MACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,SACxCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAA51B,SAASqtD,QAMZ,OALA7/E,KAAK6K,KAAK,cACV7K,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,MACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,SACxCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAA51B,SAASg2C,MACd,KAAKpgB,EAAA51B,SAASo8C,MACd,KAAKxmB,EAAA51B,SAASq8C,MACd,KAAKzmB,EAAA51B,SAASs8C,MAIZ,OAHA9uE,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,aACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAASy8C,MACd,KAAK7mB,EAAA51B,SAAS+5C,MACd,KAAKnkB,EAAA51B,SAAS64C,MACd,KAAKjjB,EAAA51B,SAASk5C,MAIZ,OAHA1rE,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,aACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAAS46C,MACd,KAAKhlB,EAAA51B,SAAS66C,MACd,KAAKjlB,EAAA51B,SAASg7C,MACd,KAAKplB,EAAA51B,SAASi7C,MAIZ,OAHAztE,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,YACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAAS86C,MAKZ,OAJAttE,KAAK6K,KAAK,SACV7K,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,iBACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAASw7C,MACd,KAAK5lB,EAAA51B,SAASy7C,MACd,KAAK7lB,EAAA51B,SAAS47C,MACd,KAAKhmB,EAAA51B,SAAS67C,MAIZ,OAHAruE,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,aACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAAS07C,MAKZ,OAJAluE,KAAK6K,KAAK,SACV7K,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,kBACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAASk7C,MACd,KAAKtlB,EAAA51B,SAASm7C,MACd,KAAKvlB,EAAA51B,SAASs7C,MACd,KAAK1lB,EAAA51B,SAASu7C,MAIZ,OAHA/tE,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,YACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAASo7C,MAKZ,OAJA5tE,KAAK6K,KAAK,SACV7K,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,iBACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAAS87C,MACd,KAAKlmB,EAAA51B,SAAS+7C,MACd,KAAKnmB,EAAA51B,SAASk8C,MACd,KAAKtmB,EAAA51B,SAASm8C,MAIZ,OAHA3uE,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,aACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAASg8C,MAKZ,OAJAxuE,KAAK6K,KAAK,SACV7K,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,kBACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAAS69C,OAKZ,OAJArwE,KAAK6K,KAAK,SACV7K,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,iBACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAASm+C,OAKZ,OAJA3wE,KAAK6K,KAAK,SACV7K,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,iBACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAASstD,QAMZ,OALA9/E,KAAK6K,KAAK,cACV7K,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,MACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,SACxCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAA51B,SAASutD,QAMZ,OALA//E,KAAK6K,KAAK,cACV7K,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,MACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,SACxCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAA51B,SAAS+6C,MAKZ,OAJAvtE,KAAK6K,KAAK,SACV7K,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,iBACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAAS27C,MAKZ,OAJAnuE,KAAK6K,KAAK,SACV7K,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,kBACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAASq7C,MAKZ,OAJA7tE,KAAK6K,KAAK,SACV7K,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,iBACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAASi8C,MAKZ,OAJAzuE,KAAK6K,KAAK,SACV7K,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,kBACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,IAG1C,KAAK8mB,EAAA51B,SAASwtD,YAMZ,OALAhgF,KAAK6K,KAAK,kBACV7K,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,MACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,SACxCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAA51B,SAASytD,OAMZ,OALAjgF,KAAK6K,KAAK,aACV7K,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,MACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,SACxCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAA51B,SAAS0tD,OAMZ,OALAlgF,KAAK6K,KAAK,aACV7K,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,MACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,SACxCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAA51B,SAAS2tD,YAMZ,OALAngF,KAAK6K,KAAK,kBACV7K,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,MACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,SACxCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAA51B,SAAS4tD,OAMZ,OALApgF,KAAK6K,KAAK,aACV7K,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,MACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,SACxCthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAA51B,SAAS6tD,OAMZ,OALArgF,KAAK6K,KAAK,aACV7K,KAAKi+E,oBAAoB71B,EAAA7V,cAAcjR,IACvCthC,KAAK6K,KAAK,MACV7K,KAAKi+E,oBAAoB71B,EAAA5V,eAAelR,SACxCthC,KAAK6K,KAAK,KAId,OAEF,KAAKu9C,EAAAh+B,aAAaqzD,OAUhB,OATAz9E,KAAK6K,KAAK,WACV7K,KAAK6K,KAAKmzE,EAAiB7iE,IAC3Bnb,KAAK6K,KAAK,MACV7K,KAAKi+E,oBAAoB71B,EAAAzT,cAAcrT,IACvCthC,KAAK6K,KAAK,MACV7K,KAAKi+E,oBAAoB71B,EAAAvT,cAAcvT,IACvCthC,KAAK6K,KAAK,MACV7K,KAAKi+E,oBAAoB71B,EAAArT,mBAAmBzT,SAC5CthC,KAAK6K,KAAK,KAGZ,KAAKu9C,EAAAh+B,aAAak2D,KAGhB,OAFAtgF,KAAKi+E,oBAAoB71B,EAAAnT,aAAa3T,SACtCthC,KAAK6K,KAAK,OAGZ,KAAKu9C,EAAAh+B,aAAaquB,OAQhB,aAPIylC,EAAS91B,EAAAjT,eAAe7T,KAC1BthC,KAAK6K,KAAK,WACV7K,KAAKi+E,oBAAoBC,GACzBl+E,KAAK6K,KAAK,QAEV7K,KAAK6K,KAAK,cAId,KAAKu9C,EAAAh+B,aAAam2D,KAChB,OAAQn4B,EAAA7S,UAAUjU,IAChB,KAAK8mB,EAAAnsB,OAAOukD,cAEV,YADAxgF,KAAK6K,KAAK,iBAGZ,KAAKu9C,EAAAnsB,OAAOwkD,WAIV,OAHAzgF,KAAK6K,KAAK,gBACV7K,KAAKi+E,oBAAoB71B,EAAAzS,eAAerU,EAAM,SAC9CthC,KAAK6K,KAAK,KAId,MAEF,KAAKu9C,EAAAh+B,aAAay6C,IAEhB,YADA7kE,KAAK6K,KAAK,OAGZ,KAAKu9C,EAAAh+B,aAAaouB,YAEhB,YADAx4C,KAAK6K,KAAK,iBAGZ,KAAKu9C,EAAAh+B,aAAas2D,cAClB,KAAKt4B,EAAAh+B,aAAau2D,UAClB,KAAKv4B,EAAAh+B,aAAaw2D,WAClB,KAAKx4B,EAAAh+B,aAAay2D,YAEpB,MAAM,IAAIxnE,MAAM,oBAGVskE,EAAA17E,UAAA4I,KAAR,SAAaR,GAEXrK,KAAKqK,KAAKQ,KAAKR,IAGjBszE,EAAA17E,UAAAk0D,OAAA,WACE,IAAInoB,EAAMhuC,KAAKqK,KAAKS,KAAK,IAEzB,OADA9K,KAAKqK,KAAO,GACL2jC,GAEX2vC,EA5yBA,GA8yBA,SAASK,EAAiB7iE,GACxB,OAAQA,GACN,KAAKitC,EAAAj+B,WAAWka,KAAM,MAAO,OAC7B,KAAK+jB,EAAAj+B,WAAWhkB,IAAK,MAAO,MAC5B,KAAKiiD,EAAAj+B,WAAW/jB,IAAK,MAAO,MAC5B,KAAKgiD,EAAAj+B,WAAWvjB,IAAK,MAAO,MAC5B,KAAKwhD,EAAAj+B,WAAWtjB,IAAK,MAAO,MAC5B,KAAKuhD,EAAAj+B,WAAWrjB,KAAM,MAAO,OAC7B,KAAKshD,EAAAj+B,WAAWquB,YAAa,MAAM,IAAIn/B,MAAM,oBAC7C,KAAK+uC,EAAAj+B,WAAW22D,KAAM,MAAM,IAAIznE,MAAM,aACtC,QAAS,MAAM,IAAIA,MAAM,oBAxzBhB3Z,EAAAi+E,u5BCxDb,IAAAhyE,EAAAxL,EAAA,GAIAgoD,EAAAhoD,EAAA,GAwBA8H,EAAA9H,EAAA,GAKA4gF,EAAA,WAYE,SAAAA,EAAYr/D,EAAkBs/D,QAAA,IAAAA,OAAA,GAL9BhhF,KAAAihF,KAAkB,GAElBjhF,KAAAkhF,KAAqB,IAAIC,IAIvBnhF,KAAK0hB,QAAUA,EACf1hB,KAAKghF,eAmGT,OA/FED,EAAA9+E,UAAAm/E,KAAA,2BACE,IAAiB,IAAA9mE,EAAApE,EAAAlW,KAAK0hB,QAAQjS,YAAYqK,UAAQS,EAAAD,EAAAlE,QAAAmE,EAAAlE,KAAAkE,EAAAD,EAAAlE,OAAE,CAA/C,IACC4E,EADOT,EAAAjZ,MACQ0Z,QACnB,GAAKA,MACL,IAAmB,IAAAC,EAAA/E,EAAA8E,EAAQlB,UAAQoB,EAAAD,EAAA7E,QAAA8E,EAAA7E,KAAA6E,EAAAD,EAAA7E,OAAE,CAAhC,IAAIoE,EAAMU,EAAA5Z,MAEbtB,KAAKqhF,aAAa7mE,wMAItB,IADA,IAAIymE,EAAOjhF,KAAKihF,KACH,EAAOA,EAAKz5E,QAAUxH,KAAKqhF,aAAaJ,EAAxC,KAIfF,EAAA9+E,UAAAo/E,aAAA,SAAatqE,GACX,KAAIA,EAAQyE,GAAG7P,EAAAtJ,YAAY0qD,UAAa/sD,KAAKghF,kBACzChhF,KAAKkhF,KAAKnuE,IAAIgE,GAElB,OADA/W,KAAKkhF,KAAK3tE,IAAIwD,GACNA,EAAQjC,MACd,KAAKqzC,EAAAl5C,YAAYiO,OACXnG,EAAQyE,GAAG7P,EAAAtJ,YAAYk+D,WAAWvgE,KAAKshF,YAAoBvqE,GAC/D,MAEF,KAAKoxC,EAAAl5C,YAAY+T,KACXjM,EAAQyE,GAAG7P,EAAAtJ,YAAYk+D,WAAWvgE,KAAKuhF,UAAgBxqE,GAC3D,MAEF,KAAKoxC,EAAAl5C,YAAYsK,mBACfvZ,KAAKwhF,uBAA0CzqE,GAC/C,MAEF,KAAKoxC,EAAAl5C,YAAYqJ,gBACftY,KAAKyhF,oBAAoC1qE,GACzC,MAEF,KAAKoxC,EAAAl5C,YAAY6L,MACH/D,EAASyE,GAAG7P,EAAAtJ,YAAYk+D,WAAWvgE,KAAK0hF,WAAkB3qE,GACtE,MAEF,KAAKoxC,EAAAl5C,YAAYwL,mBACfza,KAAK2hF,uBAA0C5qE,GAC/C,MAEF,KAAKoxC,EAAAl5C,YAAY2L,SACf,IAAIgnE,EAAiB7qE,EACjBlW,EAAS+gF,EAAKp6D,eACd3mB,GAAQb,KAAK6hF,cAAchhF,GAC/B,IAAIs/D,EAASyhB,EAAKn6D,eACd04C,GAAQngE,KAAK6hF,cAAc1hB,GAC/B,MAEF,KAAKhY,EAAAl5C,YAAY8T,WAkbvB,SAAS++D,EAAkB/qE,mBACzB,IAAIiE,EAAUjE,EAAQiE,QACtB,GAAIA,MACF,IAAmB,IAAAT,EAAArE,EAAA8E,EAAQlB,UAAQmB,EAAAV,EAAAnE,QAAA6E,EAAA5E,KAAA4E,EAAAV,EAAAnE,OAAE,CAAhC,IAAIoE,EAAMS,EAAA3Z,MACb,OAAQkZ,EAAO1F,MACb,KAAKqzC,EAAAl5C,YAAYsK,mBACf,IAAIuK,EAAgCtJ,EAAQsJ,UAC5C,GAAIA,MACF,IAAqB,IAAA5I,EAAAhF,EAAA4N,EAAUhK,UAAQxD,EAAA4E,EAAA9E,QAAAE,EAAAD,KAAAC,EAAA4E,EAAA9E,OAAE,CAApC,IAAIoO,EAAQlO,EAAAhV,MACf,GAAIkjB,EAAShJ,GAAG7P,EAAAtJ,YAAYk+D,UAAW,OAAO,oGAGlD,MAEF,KAAKpY,EAAAl5C,YAAYqJ,gBACf,IAAIwL,EAA6BtJ,EAAQsJ,UACzC,GAAIA,MACF,IAAqB,IAAAxM,EAAApB,EAAA4N,EAAUhK,UAAQrC,EAAAH,EAAAlB,QAAAqB,EAAApB,KAAAoB,EAAAH,EAAAlB,OAAE,CAApC,IAAIoO,EAAQ/M,EAAAnW,MACf,GAAIkjB,EAAShJ,GAAG7P,EAAAtJ,YAAYk+D,UAAW,OAAO,oGAGlD,MAEF,QACE,GAAI/lD,EAAOgB,GAAG7P,EAAAtJ,YAAYk+D,WAAauhB,EAAkBtnE,GAAS,OAAO,qGAMjF,OAAO,GA/cGsnE,CAAkB/qE,IAAU/W,KAAK+hF,eAAehrE,GACpD,MAEF,KAAKoxC,EAAAl5C,YAAY2T,eAAgB,MACjC,QAASpa,QAAO,KAIZu4E,EAAA9+E,UAAAu/E,uBAAR,SAA+BzqE,WACzB+M,EAAY/M,EAAQ+M,UACxB,GAAIA,MACF,IAAqB,IAAApB,EAAAxM,EAAA4N,EAAUhK,UAAQQ,EAAAoI,EAAAtM,QAAAkE,EAAAjE,KAAAiE,EAAAoI,EAAAtM,OAAE,CAApC,IAAIoO,EAAQlK,EAAAhZ,MACXkjB,EAAShJ,GAAG7P,EAAAtJ,YAAYk+D,WAAWvgE,KAAK6hF,cAAwBr9D,uGAKlEu8D,EAAA9+E,UAAAw/E,oBAAR,SAA4B1qE,WACtB+M,EAAY/M,EAAQ+M,UACxB,GAAIA,MACF,IAAqB,IAAApB,EAAAxM,EAAA4N,EAAUhK,UAAQQ,EAAAoI,EAAAtM,QAAAkE,EAAAjE,KAAAiE,EAAAoI,EAAAtM,OAAE,CAApC,IAAIoO,EAAQlK,EAAAhZ,MACXkjB,EAAShJ,GAAG7P,EAAAtJ,YAAYk+D,WAAWvgE,KAAKgiF,WAAkBx9D,uGAK5Du8D,EAAA9+E,UAAA0/E,uBAAR,SAA+B5qE,GAO7BvO,QAAO,IAUXu4E,EAjHA,GAoHAkB,EAAA,SAAA7yE,GAWE,SAAA6yE,EAAYvgE,EAAkBs/D,QAAA,IAAAA,OAAA,GAA9B,IAAA3xE,EACED,EAAA5O,KAAAR,KAAM0hB,EAASs/D,IAAehhF,YALxBqP,EAAA1E,GAAe,GACf0E,EAAA6yE,YAAmB,IAmK7B,OA3KgC7wE,EAAA4wE,EAAA7yE,GAGvB6yE,EAAAE,MAAP,SAAazgE,GACX,OAAO,IAAIugE,EAAWvgE,GAASygE,SAWjCF,EAAAhgF,UAAAq/E,YAAA,SAAYvqE,GACV,IAAIpM,EAAK3K,KAAK2K,GACV0uE,EAAUtiE,EAAQyE,GAAG7P,EAAAtJ,YAAYihB,SAMrC,GALArb,EAAAm6E,OAAOz3E,EAAI3K,KAAKkiF,aACZ7I,GAAS1uE,EAAGE,KAAK,UACrBF,EAAGE,KAAK7K,KAAKqiF,aAAatrE,EAAQoE,OAClCxQ,EAAGE,KAAK,KACRF,EAAGE,KAAKkM,EAAQnW,MACZy4E,EACF,OAAQtiE,EAAQoM,mBACd,OACExY,EAAGE,KAAK,OACRF,EAAGE,KAAK2zE,cAAcznE,EAAQsM,uBAC9B,MAEF,OACE1Y,EAAGE,KAAK,OACRF,EAAGE,KAAKkM,EAAQwM,mBAAmBzZ,YACnC,MAEF,QAAStB,QAAO,GAGpBmC,EAAGE,KAAK,QAGVo3E,EAAAhgF,UAAAs/E,UAAA,SAAUxqE,eACJpM,EAAK3K,KAAK2K,GACd1C,EAAAm6E,OAAOz3E,EAAI3K,KAAKkiF,eAChBv3E,EAAGE,KAAK,cACRF,EAAGE,KAAKkM,EAAQnW,MAChB+J,EAAGE,KAAK,QACR,IAAImQ,EAAUjE,EAAQiE,QACtB,GAAIA,EAAS,KACX,IAA2B,IAAA6kD,EAAA3pD,EAAA8E,GAAO8kD,EAAAD,EAAAzpD,QAAA0pD,EAAAzpD,KAAAypD,EAAAD,EAAAzpD,OAAE,CAA3B,IAAAkE,EAAA/D,EAAAupD,EAAAx+D,MAAA,GAACV,EAAA0Z,EAAA,GACR,IADcE,EAAAF,EAAA,IACHxF,MAAQqzC,EAAAl5C,YAAYuU,UAAW,CACxC,IAAI61D,EAAsB7+D,EAAQgB,GAAG7P,EAAAtJ,YAAYihB,SACjDrb,EAAAm6E,OAAOz3E,EAAI3K,KAAKkiF,aACZ7I,EAAS1uE,EAAGE,KAAK,UAChBF,EAAGE,KAAK,aACbF,EAAGE,KAAK,kBACRF,EAAGE,KAAKjK,GACJy4E,IACF1uE,EAAGE,KAAK,OACRrC,OAA4C,GAAzBgS,EAAQ2I,mBAC3BxY,EAAGE,KAAKigC,QAAoBtwB,EAAQ6I,sBAAsBvZ,SAAS,MAErEa,EAAGE,KAAK,8GAGZ,IAAmB,IAAA0P,EAAArE,EAAA8E,EAAQlB,UAAQmB,EAAAV,EAAAnE,QAAA6E,EAAA5E,KAAA4E,EAAAV,EAAAnE,OAAE,CAAhC,IAAIoE,KAAMS,EAAA3Z,OACFwT,MAAQqzC,EAAAl5C,YAAYuU,WAAWxjB,KAAKqhF,aAAa7mE,sGAGhEvS,EAAAm6E,OAAOz3E,IAAM3K,KAAKkiF,aAClBv3E,EAAGE,KAAK,QAGVo3E,EAAAhgF,UAAA4/E,cAAA,SAAc9qE,WACRpM,EAAK3K,KAAK2K,GACV6H,EAAYuE,EAAQvE,UACxBvK,EAAAm6E,OAAOz3E,EAAI3K,KAAKkiF,aAChBv3E,EAAGE,KAAK7K,KAAKqiF,aAAa7vE,EAAUmH,aACpChP,EAAGE,KAAK,KACRF,EAAGE,KAAKkM,EAAQnW,MAChB+J,EAAGE,KAAK,KAIR,IAHA,IAAI0vC,EAAa/nC,EAAUiH,eACvBuxC,EAAgBzQ,EAAW/yC,OAEtBnH,EAAI,EAAGA,EAAI2qD,IAAiB3qD,EAC/BA,GAAGsK,EAAGE,KAAK,MAEfF,EAAGE,KAAK7K,KAAKqiF,aAAa9nC,EAAWl6C,KACrCsK,EAAGE,KAAK,KACRF,EAAGE,KAAK2H,EAAU0T,iBAAiB7lB,IAErCsK,EAAGE,KAAK,QACR,IAAImQ,EAAUjE,EAAQiE,QACtB,GAAIA,GAAWA,EAAQurB,KAAM,CAC3Bt+B,EAAAm6E,OAAOz3E,EAAI3K,KAAKkiF,aAChBv3E,EAAGE,KAAK,cACRF,EAAGE,KAAKkM,EAAQnW,MAChB+J,EAAGE,KAAK,YACR,IAAmB,IAAA6X,EAAAxM,EAAA8E,EAAQlB,UAAQQ,EAAAoI,EAAAtM,QAAAkE,EAAAjE,KAAAiE,EAAAoI,EAAAtM,OAAA,CAA9B,IAAIoE,EAAMF,EAAAhZ,MAAsBtB,KAAKqhF,aAAa7mE,qGACvDvS,EAAAm6E,OAAOz3E,IAAM3K,KAAKkiF,aAClBv3E,EAAGE,KAAK,SAIZo3E,EAAAhgF,UAAA+/E,WAAA,SAAWjrE,GACT,IAAIpM,EAAK3K,KAAK2K,GACd1C,EAAAm6E,OAAOz3E,EAAI3K,KAAKkiF,eAChBv3E,EAAGE,KAAK,cACRF,EAAGE,KAAKkM,EAAQnW,MAChB+J,EAAGE,KAAK,QAER5C,EAAAm6E,OAAOz3E,IAAM3K,KAAKkiF,aAClBv3E,EAAGE,KAAK,QAGVo3E,EAAAhgF,UAAAqgF,eAAA,SAAevrE,GACb/W,KAAKgiF,WAAWjrE,IAGlBkrE,EAAAhgF,UAAAy/E,WAAA,SAAW3qE,KAIXkrE,EAAAhgF,UAAA8/E,eAAA,SAAehrE,WACTpM,EAAK3K,KAAK2K,GACd1C,EAAAm6E,OAAOz3E,EAAI3K,KAAKkiF,eAChBv3E,EAAGE,KAAK,cACRF,EAAGE,KAAKkM,EAAQnW,MAChB+J,EAAGE,KAAK,QACR,IAAImQ,EAAUjE,EAAQiE,QACtB,GAAIA,MACF,IAAmB,IAAA0H,EAAAxM,EAAA8E,EAAQlB,UAAQQ,EAAAoI,EAAAtM,QAAAkE,EAAAjE,KAAAiE,EAAAoI,EAAAtM,OAAA,CAA9B,IAAIoE,EAAMF,EAAAhZ,MAAsBtB,KAAKqhF,aAAa7mE,qGAEzDvS,EAAAm6E,OAAOz3E,IAAM3K,KAAKkiF,aAClBv3E,EAAGE,KAAK,QAGVo3E,EAAAhgF,UAAAogF,aAAA,SAAalnE,GACX,OAAQA,EAAKrG,MACX,OAAkB,MAAO,OACzB,OAAmB,MAAO,QAC1B,OAAmB,MAAO,OAC1B,OAAmB,MAAO,YAC1B,OAAqB,OAAO9U,KAAK0hB,QAAQzO,QAAQc,SAAW,YAAc,OAC1E,OAAkB,MAAO,QACzB,OAAmB,MAAO,iBAC1B,OAAmB,MAAO,gBAE1B,OAAmB,MAAO,qBAC1B,OAAqB,OAAO/T,KAAK0hB,QAAQzO,QAAQc,SAAW,qBAAuB,gBAEnF,QAAoB,MAAO,UAC3B,QAAmB,MAAO,qBAC1B,QAAmB,MAAO,sBAC1B,QAAoB,MAAO,OAC3B,QAEE,OADAvL,QAAO,GACA,KAKby5E,EAAAhgF,UAAAkgF,MAAA,WACE,IAAIx3E,EAAK3K,KAAK2K,GAMd,OALAA,EAAGE,KAAK,4BACN7K,KAAKkiF,YACPliF,KAAKohF,SACHphF,KAAKkiF,YACPv3E,EAAGE,KAAK,OACDF,EAAGG,KAAK,KAEnBm3E,EA3KA,CAAgClB,GAAnBrhF,EAAAuiF,aA8Kb,IAAAM,EAAA,SAAAnzE,GAWE,SAAAmzE,EAAY7gE,EAAkBs/D,QAAA,IAAAA,OAAA,GAA9B,IAAA3xE,EACED,EAAA5O,KAAAR,KAAM0hB,EAASs/D,IAAehhF,YALxBqP,EAAA1E,GAAe,GACf0E,EAAA6yE,YAAmB,IAwM7B,OAhNgC7wE,EAAAkxE,EAAAnzE,GAGvBmzE,EAAAJ,MAAP,SAAazgE,GACX,OAAO,IAAI6gE,EAAW7gE,GAASygE,SAWjCI,EAAAtgF,UAAAq/E,YAAA,SAAYvqE,GACV,IAAIpM,EAAK3K,KAAK2K,GACV0uE,EAAUtiE,EAAQyE,GAAG7P,EAAAtJ,YAAYihB,SACrCrb,EAAAm6E,OAAOz3E,EAAI3K,KAAKkiF,aACZnrE,EAAQyE,GAAG7P,EAAAtJ,YAAY8b,QACrBk7D,EAAS1uE,EAAGE,KAAK,oBAChBF,EAAGE,KAAK,WAETwuE,EAAS1uE,EAAGE,KAAK,UAChBF,EAAGE,KAAK,QAEfF,EAAGE,KAAKkM,EAAQnW,MAChB+J,EAAGE,KAAK,MACRF,EAAGE,KAAK7K,KAAKqiF,aAAatrE,EAAQoE,OAClCxQ,EAAGE,KAAK,OACR7K,KAAK+hF,eAAehrE,IAGtBwrE,EAAAtgF,UAAAs/E,UAAA,SAAUxqE,WACJpM,EAAK3K,KAAK2K,GACd1C,EAAAm6E,OAAOz3E,EAAI3K,KAAKkiF,eAChBv3E,EAAGE,KAAK,SACRF,EAAGE,KAAKkM,EAAQnW,MAChB+J,EAAGE,KAAK,QACR,IAAImQ,EAAUjE,EAAQiE,QACtB,GAAIA,EAAS,CACX,IAAIwnE,EAAaxnE,EAAQurB,SACzB,IAA2B,IAAAk8C,EAAAvsE,EAAA8E,GAAO0nE,EAAAD,EAAArsE,QAAAssE,EAAArsE,KAAAqsE,EAAAD,EAAArsE,OAAE,CAA3B,IAAAsM,EAAAnM,EAAAmsE,EAAAphF,MAAA,GAACV,EAAA8hB,EAAA,GAAMlI,EAAAkI,EAAA,GACVlI,EAAO1F,MAAQqzC,EAAAl5C,YAAYuU,YAC7Bvb,EAAAm6E,OAAOz3E,EAAI3K,KAAKkiF,aAChBv3E,EAAGE,KAAKjK,GACJ4Z,EAAOgB,GAAG7P,EAAAtJ,YAAYihB,WACxB3Y,EAAGE,KAAK,OACRrC,OAA4C,GAAzBgS,EAAQ2I,mBAC3BxY,EAAGE,KAAKigC,QAAoBtwB,EAAQ6I,sBAAsBvZ,SAAS,MAErEa,EAAGE,KAAK,SACN23E,qGAGFA,GAAYxiF,KAAK+hF,eAAehrE,GAEtC9O,EAAAm6E,OAAOz3E,IAAM3K,KAAKkiF,aAClBv3E,EAAGE,KAAK,QAGV03E,EAAAtgF,UAAA4/E,cAAA,SAAc9qE,GACZ,IAAIA,EAAQ8G,MAAMlS,EAAAtJ,YAAY0qD,QAAUphD,EAAAtJ,YAAY0b,KAApD,CACA,IAAIpT,EAAK3K,KAAK2K,GACV6H,EAAYuE,EAAQvE,UAIxB,GAHAvK,EAAAm6E,OAAOz3E,EAAI3K,KAAKkiF,aACZnrE,EAAQyE,GAAG7P,EAAAtJ,YAAY2qD,YAAYriD,EAAGE,KAAK,cAC3CkM,EAAQyE,GAAG7P,EAAAtJ,YAAY8b,SAASxT,EAAGE,KAAK,WACxCkM,EAAQyE,GAAG7P,EAAAtJ,YAAYyb,KAKzB,OAJAnT,EAAGE,KAAKkM,EAAQ4B,eAAetO,MAC/BM,EAAGE,KAAK,MACRF,EAAGE,KAAK7K,KAAKqiF,aAAa7vE,EAAUmH,kBACpChP,EAAGE,KAAK,OAGHkM,EAAQ8G,MAAMlS,EAAAtJ,YAAY8b,OAASxS,EAAAtJ,YAAY4e,WAAWtW,EAAGE,KAAK,aACvEF,EAAGE,KAAKkM,EAAQnW,MAElB+J,EAAGE,KAAK,KAIR,IAHA,IAAI0vC,EAAa/nC,EAAUiH,eACvBuxC,EAAgBzQ,EAAW/yC,OAEtBnH,EAAI,EAAGA,EAAI2qD,IAAiB3qD,EAC/BA,GAAGsK,EAAGE,KAAK,MAEfF,EAAGE,KAAK2H,EAAU0T,iBAAiB7lB,IACnCsK,EAAGE,KAAK,MACRF,EAAGE,KAAK7K,KAAKqiF,aAAa9nC,EAAWl6C,KAEnC0W,EAAQ8G,MAAMlS,EAAAtJ,YAAYuc,YAAcjT,EAAAtJ,YAAY0b,KACtDpT,EAAGE,KAAK,MAERF,EAAGE,KAAK,OACRF,EAAGE,KAAK7K,KAAKqiF,aAAa7vE,EAAUmH,cAEtChP,EAAGE,KAAK,OACR7K,KAAK+hF,eAAehrE,KAGtBwrE,EAAAtgF,UAAA+/E,WAAA,SAAWjrE,eACLpM,EAAK3K,KAAK2K,GACVg4E,EAAc5rE,EAAQjC,MAAQqzC,EAAAl5C,YAAYgZ,UAC9ChgB,EAAAm6E,OAAOz3E,EAAI3K,KAAKkiF,eACZS,EACFh4E,EAAGE,KAAK,eAEJkM,EAAQyE,GAAG7P,EAAAtJ,YAAYmc,WAAW7T,EAAGE,KAAK,aAC9CF,EAAGE,KAAK,WAEVF,EAAGE,KAAKkM,EAAQnW,MAChB,IAAIonB,EAAOjR,EAAQiR,KACfA,GAAQA,EAAKxM,GAAG7P,EAAAtJ,YAAYk+D,SAAW50D,EAAAtJ,YAAY+X,iBACrDzP,EAAGE,KAAK,aACRF,EAAGE,KAAKmd,EAAKpnB,OAEf+J,EAAGE,KAAK,QACR,IAAImQ,EAAUjE,EAAQtE,OAAOuI,QAC7B,GAAIA,MACF,IAAmB,IAAAV,EAAApE,EAAA8E,EAAQlB,UAAQS,EAAAD,EAAAlE,QAAAmE,EAAAlE,KAAAkE,EAAAD,EAAAlE,OAAE,CAAhC,IAAIoE,EAAMD,EAAAjZ,MACbtB,KAAKqhF,aAAa7mE,qGAGtB,IAAIm/D,EAAO5iE,EAAQoR,oBAGnB,GAFIwxD,GAAM35E,KAAK6hF,cAAclI,GAC7B3+D,EAAUjE,EAAQiE,YAEhB,IAAmB,IAAAC,EAAA/E,EAAA8E,EAAQlB,UAAQoB,EAAAD,EAAA7E,QAAA8E,EAAA7E,KAAA6E,EAAAD,EAAA7E,OAAA,CAA1BoE,EAAMU,EAAA5Z,MAAsBtB,KAAKqhF,aAAa7mE,qGAEzDvS,EAAAm6E,OAAOz3E,IAAM3K,KAAKkiF,aAClBv3E,EAAGE,KAAK,QAGV03E,EAAAtgF,UAAAqgF,eAAA,SAAevrE,GACb/W,KAAKgiF,WAAWjrE,IAGlBwrE,EAAAtgF,UAAAy/E,WAAA,SAAW3qE,GACT,IAAIA,EAAQyE,GAAG7P,EAAAtJ,YAAY0qD,SAA3B,CACA,IAAIpiD,EAAK3K,KAAK2K,GACd1C,EAAAm6E,OAAOz3E,EAAI3K,KAAKkiF,aACZnrE,EAAQyE,GAAG7P,EAAAtJ,YAAY2qD,YAAYriD,EAAGE,KAAK,cAC3CkM,EAAQyE,GAAG7P,EAAAtJ,YAAY8b,SAASxT,EAAGE,KAAK,WACxCkM,EAAQyE,GAAG7P,EAAAtJ,YAAYgc,WAAW1T,EAAGE,KAAK,aAC9CF,EAAGE,KAAKkM,EAAQnW,MAChB+J,EAAGE,KAAK,MACRF,EAAGE,KAAK7K,KAAKqiF,aAAatrE,EAAQoE,OAClCxQ,EAAGE,KAAK,SAGV03E,EAAAtgF,UAAA8/E,eAAA,SAAehrE,WACTiE,EAAUjE,EAAQiE,QACtB,GAAIA,GAAWA,EAAQurB,KAAM,CAC3B,IAAI57B,EAAK3K,KAAK2K,GACd1C,EAAAm6E,OAAOz3E,EAAI3K,KAAKkiF,eAChBv3E,EAAGE,KAAK,cACRF,EAAGE,KAAKkM,EAAQnW,MAChB+J,EAAGE,KAAK,YACR,IAAmB,IAAA6X,EAAAxM,EAAA8E,EAAQlB,UAAQQ,EAAAoI,EAAAtM,QAAAkE,EAAAjE,KAAAiE,EAAAoI,EAAAtM,OAAA,CAA9B,IAAIoE,EAAMF,EAAAhZ,MAAsBtB,KAAKqhF,aAAa7mE,qGACvDvS,EAAAm6E,OAAOz3E,IAAM3K,KAAKkiF,aAClBv3E,EAAGE,KAAK,SAIZ03E,EAAAtgF,UAAAogF,aAAA,SAAalnE,GACX,OAAQA,EAAKrG,MACX,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,OAAO9U,KAAK0hB,QAAQzO,QAAQc,SAAW,MAAQ,MACpE,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAE1B,OAAmB,MAAO,MAC1B,OAAqB,OAAO/T,KAAK0hB,QAAQzO,QAAQc,SAAW,MAAQ,MAEpE,QAAoB,MAAO,OAC3B,QAAmB,MAAO,MAC1B,QAAmB,MAAO,MAC1B,QAAoB,MAAO,OAC3B,QAAoB,MAAO,OAC3B,QAEE,OADAvL,QAAO,GACA,KAKb+5E,EAAAtgF,UAAAkgF,MAAA,WACE,IAAIx3E,EAAK3K,KAAK2K,GAgBd,OAfAA,EAAGE,KAAK,+BACRF,EAAGE,KAAK,yBACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,yBACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACN7K,KAAKkiF,YACPliF,KAAKohF,SACHphF,KAAKkiF,YACPv3E,EAAGE,KAAK,OACRF,EAAGE,KAAK,8BACD7K,KAAK2K,GAAGG,KAAK,KAExBy3E,EAhNA,CAAgCxB,GAAnBrhF,EAAA6iF,4aCnUb,IAAA52E,EAAAxL,EAAA,GAMAgoD,EAAAhoD,EAAA,GAIA04C,EAAA14C,EAAA,GAQAyL,EAAAzL,EAAA,GAKA8H,EAAA9H,EAAA,GAIA2L,EAAA3L,EAAA,GA2DAyiF,EAAA,SAAAxzE,GAcE,SAAAwzE,IAAA,IAAAvzE,EACED,EAAA5O,KAAAR,OAAOA,YAVTqP,EAAAwzE,QAAoB,IAAI77E,MAExBqI,EAAAyzE,QAAuB,IAAI3B,IAE3B9xE,EAAA0zE,QAAuB,IAAI5B,IAE3B9xE,EAAAihD,UAAmC,KAwc3BjhD,EAAA2zE,8BAAqC,EAwdrC3zE,EAAA4zE,oBAAuC,KA35B7C5zE,EAAKqS,QAAU,IAAIymC,EAAAh5C,QAAQE,EAAKnE,eAgnHpC,OAhoH4BmG,EAAAuxE,EAAAxzE,GAoB1BwzE,EAAA3gF,UAAAihF,UAAA,SACE74E,EACAmW,EACAxG,GAEA,IAAIhQ,EAAiB/B,EAAA04C,cAAcngC,GAC/BH,EAAevU,EAAAg1C,mBAAmB92C,GAGtC,IAAIhK,KAAK+iF,QAAQhwE,IAAIsN,GAArB,CACArgB,KAAK+iF,QAAQxvE,IAAI8M,GACjBrgB,KAAK8iF,QAAQvvE,IAAI8M,GAGjB,IAAItW,EAAS,IAAI+B,EAAA8E,OACf5G,EACAK,EACA2P,EACIlO,EAAA+E,WAAW61C,MACXlmC,EAAKogC,WAAWj1C,EAAA7I,iBAAmB0d,EAAK2iE,QAAQx3E,EAAArJ,eAAgBqJ,EAAA7I,eAAe0E,QAAU,EACvFsE,EAAA+E,WAAWC,QACXhF,EAAA+E,WAAWo7C,SAEfvqC,EAAU1hB,KAAK0hB,QACnBA,EAAQpS,QAAQzE,KAAKd,GAGrB,IAAIq5E,EAAK,IAAIvqC,EAAAoX,UAAUlmD,EAAQ2X,EAAQxW,aACvCk4E,EAAG9yB,UAAYtwD,KAAKswD,UACpBvmD,EAAOq8C,UAAYg9B,EAEnB,IADA,IAAIzuE,EAAa5K,EAAO4K,YAChByuE,EAAGnwB,KAAKpa,EAAAC,MAAM4Z,YAAY,CAChC,IAAI79C,EAAY7U,KAAKqjF,uBAAuBD,EAAI,MAC5CvuE,GAAWF,EAAW9J,KAAKgK,GAEjCuuE,EAAGjtB,WAILysB,EAAA3gF,UAAAohF,uBAAA,SACED,EACApT,QAAA,IAAAA,MAAA,MAOA,IALA,IAAIz+D,EAAQ5F,EAAAtJ,YAAYmP,KACpB8xE,GAAiB,EAGjB9mE,EAAqC,KAClC4mE,EAAGnwB,KAAKpa,EAAAC,MAAMkZ,KAAK,CACpBsxB,EAAW,IAAGA,EAAWF,EAAGlzB,UAChC,IAAIxzC,EAAY1c,KAAKujF,eAAeH,GAC/B1mE,EAIAF,EACAA,EAAW3R,KAAK6R,GADJF,EAAa,CAACE,GAH7B1c,KAAKwjF,cAAcJ,GAQvB,IAAIK,EAAmB,EACnBC,EAAiB,EACjBN,EAAGnwB,KAAKpa,EAAAC,MAAMrlC,UACZ2vE,EAAGnwB,KAAKpa,EAAAC,MAAMmT,UAChBjsD,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACf8lE,EAAGj6E,SAGHm6E,EAAW,IAAGA,EAAWF,EAAGlzB,UAChC3+C,GAAS5F,EAAAtJ,YAAYoR,OACrBgwE,EAAcL,EAAGlzB,SACjBwzB,EAAYN,EAAG78B,KAGjB,IAEIo9B,EAAgC,MAAb3T,GAAqBA,EAAUx0D,GAAG7P,EAAAtJ,YAAY0e,SACjEqiE,EAAGnwB,KAAKpa,EAAAC,MAAMt3B,UACZ8hE,EAAW,IAAGA,EAAWF,EAAGlzB,UAC5ByzB,GACF3jF,KAAKwL,MACHI,EAAA/C,eAAe+6E,gEACfR,EAAGj6E,SAGPoI,GAAS5F,EAAAtJ,YAAYmf,QAAU7V,EAAAtJ,YAAY0e,SAClC4iE,IACTpyE,GAAS5F,EAAAtJ,YAAY0e,SAIvB,IAAIlM,EAA8B,KAG9BgvE,EAAQT,EAAGzwB,OAEf,OADI2wB,EAAW,IAAGA,EAAWF,EAAGhzB,cACxByzB,GACN,KAAKhrC,EAAAC,MAAMn9B,MACTynE,EAAGhtE,OACH7E,GAAS5F,EAAAtJ,YAAYsZ,MAEnB9G,EADEuuE,EAAGnwB,KAAKpa,EAAAC,MAAM91B,MACJhjB,KAAK8jF,UAAUV,EAAI7xE,EAAOiL,EAAY8mE,GAEtCtjF,KAAK+jF,cAAcX,EAAI7xE,EAAOiL,EAAY8mE,GAExD9mE,EAAa,KACb,MAEF,KAAKq8B,EAAAC,MAAM6T,IAAKp7C,GAAS5F,EAAAtJ,YAAYsqD,IACrC,KAAK9T,EAAAC,MAAMqU,IACTi2B,EAAGhtE,OACHvB,EAAY7U,KAAK+jF,cAAcX,EAAI7xE,EAAOiL,EAAY8mE,GACtD9mE,EAAa,KACb,MAEF,KAAKq8B,EAAAC,MAAM91B,KACTogE,EAAGhtE,OACHvB,EAAY7U,KAAK8jF,UAAUV,EAAI7xE,EAAOiL,EAAY8mE,GAClD9mE,EAAa,KACb,MAEF,KAAKq8B,EAAAC,MAAMj+B,SACTuoE,EAAGhtE,OACHvB,EAAY7U,KAAKgkF,cAAcZ,EAAI7xE,EAAOiL,EAAY8mE,GACtD9mE,EAAa,KACb,MAEF,KAAKq8B,EAAAC,MAAMt6B,SACT,IAAI20C,EAAQiwB,EAAGlwB,OAEf,GADAkwB,EAAGhtE,QACEgtE,EAAGnwB,KAAKpa,EAAAC,MAAM/9B,OAAQ,CACzBqoE,EAAG7vB,MAAMJ,GACTt+C,EAAY7U,KAAKikF,eAAeb,GAAI,GACpC,MAEAA,EAAG9vB,QAAQH,GAEb5hD,GAAS5F,EAAAtJ,YAAYmc,SAGvB,KAAKq6B,EAAAC,MAAM/9B,MACX,KAAK89B,EAAAC,MAAM7wB,UACTm7D,EAAGhtE,OACHvB,EAAY7U,KAAKkkF,sBAAsBd,EAAI7xE,EAAOiL,EAAY8mE,GAC9D9mE,EAAa,KACb,MAEF,KAAKq8B,EAAAC,MAAM/1B,UACLowC,EAAQiwB,EAAGlwB,OACfkwB,EAAGhtE,OACCgtE,EAAGzwB,MAAK,EAAO9Z,EAAA4S,mBAAmB8G,SAAW1Z,EAAAC,MAAMM,YACrDgqC,EAAG9vB,QAAQH,GACXt+C,EAAY7U,KAAKmkF,eAAef,EAAI7xE,EAAOiL,EAAY8mE,GACvD9mE,EAAa,OAEb4mE,EAAG7vB,MAAMJ,GACTt+C,EAAY7U,KAAKikF,eAAeb,GAAI,IAEtC,MAEF,KAAKvqC,EAAAC,MAAM7jC,OACTmuE,EAAGhtE,OAGDvB,GAFFtD,GAAS5F,EAAAtJ,YAAY4S,QACTtJ,EAAAtJ,YAAYoR,OACVzT,KAAKokF,kBAAkBhB,EAAIE,GAE3BtjF,KAAKqkF,YAAYjB,GAE/B,MAEF,KAAKvqC,EAAAC,MAAMsL,KACL+O,EAAQiwB,EAAGlwB,OACfkwB,EAAGhtE,OACCgtE,EAAGzwB,MAAK,EAAO9Z,EAAA4S,mBAAmB8G,SAAW1Z,EAAAC,MAAMM,YACrDgqC,EAAG9vB,QAAQH,GACXt+C,EAAY7U,KAAKskF,qBAAqBlB,EAAI7xE,EAAOiL,EAAY8mE,GAC7D9mE,EAAa,OAEb4mE,EAAG7vB,MAAMJ,GACTt+C,EAAY7U,KAAKikF,eAAeb,GAAI,IAEtC,MAEF,QAGM7xE,EAAQ5F,EAAAtJ,YAAYoR,OACtBoB,EAAY7U,KAAKukF,YAAYnB,EAAIE,EAA2C,IAAhC/xE,EAAQ5F,EAAAtJ,YAAYmf,WAI5DkiE,GACF1jF,KAAKwL,MACHI,EAAA/C,eAAe27E,gCACfpB,EAAGj6E,MAAMs6E,EAAaC,GAAY,UASjC1T,IACHn7D,EAAY7U,KAAKikF,eAAeb,GAAI,KAQ5C,GAAI5mE,EACF,IAAK,IAAInc,EAAI,EAAGoU,EAAI+H,EAAWhV,OAAQnH,EAAIoU,IAAKpU,EAC9CL,KAAKwL,MACHI,EAAA/C,eAAe47E,8BACfjoE,EAAWnc,GAAG8I,OAIpB,OAAO0L,GAIT+tE,EAAA3gF,UAAAyiF,SAAA,WACE,IAAI7B,EAAU7iF,KAAK6iF,QACnB,OAAOA,EAAQr7E,OAASq7E,EAAQn7C,QAAU,MAI5Ck7C,EAAA3gF,UAAAk0D,OAAA,WACE,GAAIn2D,KAAK6iF,QAAQr7E,OAAQ,MAAM,IAAI6R,MAAM,wBAIzC,OAHArZ,KAAK6iF,QAAU,GACf7iF,KAAK8iF,QAAQ6B,QACb3kF,KAAK+iF,QAAQ4B,QACN3kF,KAAK0hB,SAIdkhE,EAAA3gF,UAAA2iF,UAAA,SACExB,EACAyB,EACAC,QADA,IAAAD,OAAA,QACA,IAAAC,OAAA,GAIA,IAGI3pE,EAHAoyC,EAAQ61B,EAAGhtE,OACXktE,EAAWF,EAAGlzB,SAKlB,GAAI3C,GAAS1U,EAAAC,MAAM8X,UAAW,CAG5B,IAAIm0B,EAAsB3B,EAAGnwB,KAAKpa,EAAAC,MAAM8X,WAEpCp+C,EAAYxS,KAAKglF,kBAAkB5B,GACvC,GAAI5wE,EAAW,CACb,GAAIuyE,EAAqB,CACvB,IAAK3B,EAAGnwB,KAAKpa,EAAAC,MAAM+X,YAKjB,OAJA7wD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,KAET,IAAKi6E,EAAGnwB,KAAKpa,EAAAC,MAAM8V,KAKjB,OAJA5uD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,KAEJi6E,EAAGnwB,KAAKpa,EAAAC,MAAME,OACjBh5C,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,QAGhBqJ,EAAUsnC,YAAa,EAEzB,OAAOtnC,EACF,GAAIuyE,GAAuB/kF,KAAKgjF,6BAKrC,OAJAhjF,KAAKwL,MACHI,EAAA/C,eAAeo8E,iBACf7B,EAAGj6E,SAEE,KAIT,IAAI07E,EAoBF,OAJA7kF,KAAKwL,MACHI,EAAA/C,eAAeo8E,iBACf7B,EAAGj6E,SAEE,KAnBP,IAAI+7E,EAAYllF,KAAK4kF,UAAUxB,GAAI,EAAO0B,GAC1C,IAAKI,EAAW,OAAO,KACvB,IAAK9B,EAAGnwB,KAAKpa,EAAAC,MAAM+X,YAOjB,OANKi0B,GACH9kF,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,MAAMi6E,EAAG78B,KAAM,KAGf,MAETprC,EAAO+pE,GACF/7E,MAAMoB,MAAQ+4E,EACnBnoE,EAAKhS,MAAMqB,IAAM44E,EAAG78B,SAUjB,GAAIgH,GAAS1U,EAAAC,MAAMkP,KACxB7sC,EAAOrP,EAAA2F,KAAKU,WACVrG,EAAA2F,KAAKW,qBAAqB,OAAQgxE,EAAGj6E,SAAU,IAAI,EAAOi6E,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,WAI7E,GAAIgH,GAAS1U,EAAAC,MAAMgN,KACxB3qC,EAAOrP,EAAA2F,KAAKU,WACVrG,EAAA2F,KAAKW,qBAAqB,OAAQgxE,EAAGj6E,SAAU,IAAI,EAAOi6E,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,WAI7E,GAAIgH,GAAS1U,EAAAC,MAAMG,MAAQsU,GAAS1U,EAAAC,MAAMI,MAC/C/9B,EAAOrP,EAAA2F,KAAKU,WACVrG,EAAA2F,KAAKW,qBAAqB,OAAQgxE,EAAGj6E,SAAU,IAAI,EAAOi6E,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,WAI7E,GAAIgH,GAAS1U,EAAAC,MAAM4X,cACxB0yB,EAAG90C,aACHnzB,EAAOrP,EAAA2F,KAAKU,WACVrG,EAAA2F,KAAKW,qBAAqB,SAAUgxE,EAAGj6E,SAAU,IAAI,EAAOi6E,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,UAI/E,IAAIgH,GAAS1U,EAAAC,MAAMM,WA6DxB,OANK0rC,GACH9kF,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf/B,EAAGj6E,SAGA,KAtDP,IANA,IAAI06E,EAAQ/3E,EAAA2F,KAAKW,qBAAqBgxE,EAAG5vB,iBAAkB4vB,EAAGj6E,SAC1DyY,EAAUiiE,EACVtpC,EAAgC,KAChC6qC,GAAW,EAGRhC,EAAGnwB,KAAKpa,EAAAC,MAAMkY,MAAM,CACzB,IAAIoyB,EAAGnwB,KAAKpa,EAAAC,MAAMM,YAShB,OAJAp5C,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf/B,EAAGj6E,MAAMi6E,EAAG78B,MAEP,KARP,IAAInwC,EAAOtK,EAAA2F,KAAKW,qBAAqBgxE,EAAG5vB,iBAAkB4vB,EAAGj6E,SAC7DyY,EAAQxL,KAAOA,EACfwL,EAAUxL,EAWd,GAAIgtE,EAAGnwB,KAAKpa,EAAAC,MAAM4U,UAAW,CAC3B,EAAG,CACD,IAAI23B,EAAYrlF,KAAK4kF,UAAUxB,GAAI,EAAM0B,GACzC,IAAKO,EAAW,OAAO,KAClB9qC,EACAA,EAAW1vC,KAAew6E,GADd9qC,EAAa,CAAW8qC,SAElCjC,EAAGnwB,KAAKpa,EAAAC,MAAMwM,QACvB,IAAK89B,EAAGnwB,KAAKpa,EAAAC,MAAM6U,aAOjB,OANKm3B,GACH9kF,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,MAAMi6E,EAAG78B,KAAM,KAGf,KAIX,KAAO68B,EAAGnwB,KAAKpa,EAAAC,MAAM8V,MAAM,CACzB,IAAIw0B,EAAGnwB,KAAKpa,EAAAC,MAAME,MAShB,OANK8rC,GACH9kF,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,MAAMi6E,EAAG78B,KAAM,QAGf,KARP6+B,GAAW,EAWfjqE,EAAOrP,EAAA2F,KAAKU,WAAW0xE,EAAOtpC,GAAc,GAAI6qC,EAAUhC,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAWlF,KAAO68B,EAAGnwB,KAAKpa,EAAAC,MAAM8Y,cAAc,CACjC,IAAI0zB,EAAelC,EAAGlzB,SACtB,IAAKkzB,EAAGnwB,KAAKpa,EAAAC,MAAM+Y,cAOjB,OANKizB,GACH9kF,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAGT,KAET,IAAIo8E,EAAenC,EAAGj6E,MAAMm8E,EAAclC,EAAG78B,KAGzC6+B,GAAW,EACf,GAAIhC,EAAGnwB,KAAKpa,EAAAC,MAAM8V,KAAM,CACtB,IAAIw0B,EAAGnwB,KAAKpa,EAAAC,MAAME,MAShB,OANK8rC,GACH9kF,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,QAGT,KARPi8E,GAAW,EAiBf,GANAjqE,EAAOrP,EAAA2F,KAAKU,WACVrG,EAAA2F,KAAKW,qBAAqB,QAASmzE,GACnC,CAAEpqE,GACFiqE,EACAhC,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAEpB6+B,EAAU,MAGhB,OAAOjqE,GAOTynE,EAAA3gF,UAAA+iF,kBAAA,SACE5B,GAKA,IAuGIzpE,EAvGAw5C,EAAQiwB,EAAGlwB,OACXowB,EAAWF,EAAGlzB,SACd3V,EAAqC,KACrCx0B,EAA4B,KAC5By/D,GAAoB,EAExB,GAAIpC,EAAGnwB,KAAKpa,EAAAC,MAAM+X,YAChB20B,GAAc,EACdpC,EAAG9vB,QAAQH,GACX5Y,EAAa,OAER,CACLirC,GAAc,EACd,EAAG,CACD,IAAI1wE,EAAOhJ,EAAAw4C,cAAc2H,QAMzB,GALIm3B,EAAGnwB,KAAKpa,EAAAC,MAAM2U,eAChB+3B,GAAc,EACdpC,EAAG9vB,QAAQH,GACXr+C,EAAOhJ,EAAAw4C,cAAc0S,MAEnBosB,EAAGnwB,KAAKpa,EAAAC,MAAMgN,MAAO,CACvB,IAAIs9B,EAAGnwB,KAAKpa,EAAAC,MAAM0Y,OAiBhB,OAFA4xB,EAAG7vB,MAAMJ,GACTnzD,KAAKgjF,8BAA+B,EAC7B,KAhBPwC,GAAc,EACdpC,EAAG9vB,QAAQH,GACX,IAAI5xD,EAAIvB,KAAK4kF,UAAUxB,GAAI,GAC3B,IAAK7hF,EAAG,OAAO,KACf,GAAIA,EAAEuT,MAAQhJ,EAAAiJ,SAASqvC,KAMrB,OALApkD,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACf/b,EAAE4H,OAEJnJ,KAAKgjF,8BAA+B,EAC7B,KAETj9D,EAAqBxkB,MAMlB,KAAI6hF,EAAGpwB,iBA8CZ,OATIwyB,EACFxlF,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf/B,EAAGj6E,SAGLi6E,EAAG7vB,MAAMJ,GAEXnzD,KAAKgjF,6BAA+BwC,EAC7B,KA7CP,IAAI5kF,EAAOkL,EAAA2F,KAAKE,2BAA2ByxE,EAAG5vB,iBAAkB4vB,EAAGj6E,MAAMi6E,EAAGlzB,SAAUkzB,EAAG78B,MAazF,GAZI68B,EAAGnwB,KAAKpa,EAAAC,MAAM6Y,YAChB6zB,GAAc,EACdpC,EAAG9vB,QAAQH,GACPr+C,GAAQhJ,EAAAw4C,cAAc0S,KACxBh3D,KAAKwL,MACHI,EAAA/C,eAAe48E,oCACfrC,EAAGj6E,SAGL2L,EAAOhJ,EAAAw4C,cAAcohC,UAGrBtC,EAAGnwB,KAAKpa,EAAAC,MAAM0Y,OAAQ,CACxBg0B,GAAc,EACdpC,EAAG9vB,QAAQH,GACX,IAAIh4C,EAAOnb,KAAK4kF,UAAUxB,GAC1B,IAAKjoE,EAEH,OADAnb,KAAKgjF,6BAA+BwC,EAC7B,KAET,IAAIG,EAAQ,IAAI75E,EAAAuuC,cAChBsrC,EAAMrrC,cAAgBxlC,EACtB6wE,EAAM/kF,KAAOA,EACb+kF,EAAMxqE,KAAOA,EACRo/B,EACAA,EAAW1vC,KAAK86E,GADJprC,EAAa,CAAEorC,QAG5BH,GACFxlF,KAAKwL,MACHI,EAAA/C,eAAequD,cACfksB,EAAGj6E,gBAgBJi6E,EAAGnwB,KAAKpa,EAAAC,MAAMwM,QACvB,IAAK89B,EAAGnwB,KAAKpa,EAAAC,MAAM+X,YAUjB,OATI20B,EACFxlF,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAGdi6E,EAAG7vB,MAAMJ,GAEXnzD,KAAKgjF,6BAA+BwC,EAC7B,KAKX,OAAIpC,EAAGnwB,KAAKpa,EAAAC,MAAM4Y,qBAChB8zB,GAAc,EACdpC,EAAG9vB,QAAQH,IACXx5C,EAAa3Z,KAAK4kF,UAAUxB,KAiB9BpjF,KAAKgjF,8BAA+B,EAC7Bl3E,EAAA2F,KAAKS,gBACVqoC,GAAc,GACd5gC,EACAoM,GACA,EACAq9D,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,QArBpBvmD,KAAKgjF,6BAA+BwC,EAC7B,QAGLA,EACFxlF,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,MAGdi6E,EAAG7vB,MAAMJ,GAEXnzD,KAAKgjF,6BAA+BwC,EAC7B,OAcX5C,EAAA3gF,UAAAshF,eAAA,SACEH,GAKA,IAAIE,EAAWF,EAAGlzB,SAClB,GAAIkzB,EAAGpwB,iBAAkB,CAGvB,IAFA,IAAIpyD,EAAOwiF,EAAG5vB,iBACV7uB,EAAyB74B,EAAA2F,KAAKE,2BAA2B/Q,EAAMwiF,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAClF68B,EAAGnwB,KAAKpa,EAAAC,MAAMkY,MAAM,CACzB,IAAIoyB,EAAGpwB,iBAYL,OAJAhzD,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf/B,EAAGj6E,SAEE,KAXPvI,EAAOwiF,EAAG5vB,iBACV7uB,EAAa74B,EAAA2F,KAAKwsC,+BAChBtZ,EACA74B,EAAA2F,KAAKE,2BAA2B/Q,EAAMwiF,EAAGj6E,SACzCi6E,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAU5B,IAAI3L,OAAI,EACR,IAAIwoC,EAAGnwB,KAAKpa,EAAAC,MAAM8X,WAMhB,OAAO9kD,EAAA2F,KAAKkpC,gBAAgBhW,EAAY,KAAMy+C,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAJpE,GADA3L,EAAO56C,KAAK4lF,eAAexC,GAEzB,OAAOt3E,EAAA2F,KAAKkpC,gBAAgBhW,EAAYiW,EAAMwoC,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,WAMxEvmD,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf/B,EAAGj6E,SAGP,OAAO,MAGTy5E,EAAA3gF,UAAA8hF,cAAA,SACEX,EACA7xE,EACAiL,EACA8mE,GAKA,IAAItoE,EAAU,IAAIhU,MAClB,EAAG,CACD,IAAIwT,EAASxa,KAAK6lF,yBAAyBzC,EAAI7xE,EAAOiL,GACtD,IAAKhC,EAAQ,OAAO,KACpBQ,EAAQnQ,KAA0B2P,SAC3B4oE,EAAGnwB,KAAKpa,EAAAC,MAAMwM,QAEvB,IAAItX,EAAMliC,EAAA2F,KAAKkyC,wBAAwB3oC,EAASwB,EAAY4mE,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAElF,OADA68B,EAAGnwB,KAAKpa,EAAAC,MAAM2Y,WACPzjB,GAGT40C,EAAA3gF,UAAA4jF,yBAAA,SACEzC,EACA0C,EACAC,GAKA,IAAK3C,EAAGpwB,iBAKN,OAJAhzD,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf/B,EAAGj6E,SAEE,KAET,IAAI0I,EAAa/F,EAAA2F,KAAKE,2BAA2ByxE,EAAG5vB,iBAAkB4vB,EAAGj6E,SACrEoI,EAAQu0E,EACR1C,EAAGnwB,KAAKpa,EAAAC,MAAMgW,eAChBv9C,GAAS5F,EAAAtJ,YAAY2jF,qBAGvB,IAAI7qE,EAA8B,KAC9BioE,EAAGnwB,KAAKpa,EAAAC,MAAM0Y,SAChBr2C,EAAOnb,KAAK4kF,UAAUxB,IAGxB,IAAIhgE,EAAiC,KACrC,GAAIggE,EAAGnwB,KAAKpa,EAAAC,MAAMoW,SAQhB,GAPI39C,EAAQ5F,EAAAtJ,YAAY0e,SACtB/gB,KAAKwL,MACHI,EAAA/C,eAAeo9E,iDACf7C,EAAGj6E,WAGPia,EAAcpjB,KAAKkmF,gBAAgB9C,EAAI,IACrB,OAAO,UAErB7xE,EAAQ5F,EAAAtJ,YAAYsZ,MAChBpK,EAAQ5F,EAAAtJ,YAAY0e,SACxB/gB,KAAKwL,MACHI,EAAA/C,eAAe2gE,wCACf33D,EAAW1I,OAGLgS,GACVnb,KAAKwL,MACHI,EAAA/C,eAAequD,cACfksB,EAAGj6E,MAAMi6E,EAAG78B,MAIlB,IAAIp9C,EAAQ0vC,EAAA//B,MAAMhO,KAAK+G,EAAW1I,MAAOi6E,EAAGj6E,SAM5C,OALKoI,EAAQ5F,EAAAtJ,YAAY2jF,qBAAwB5iE,GAC/CpjB,KAAKwL,MACHI,EAAA/C,eAAes9E,iEACfh9E,GAEG2C,EAAA2F,KAAKC,0BACVG,EACAsJ,EACAiI,EACA2iE,EACAx0E,EACApI,IAIJy5E,EAAA3gF,UAAA6hF,UAAA,SACEV,EACA7xE,EACAiL,EACA8mE,GAKA,GAAIF,EAAGhtE,QAAUyiC,EAAAC,MAAMM,WAKrB,OAJAp5C,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf/B,EAAGj6E,SAEE,KAET,IAAI0I,EAAa/F,EAAA2F,KAAKE,2BAA2ByxE,EAAG5vB,iBAAkB4vB,EAAGj6E,SACzE,GAAIi6E,EAAGhtE,QAAUyiC,EAAAC,MAAMgZ,UAKrB,OAJA9xD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,KAGT,IADA,IAAI6R,EAAU,IAAIhU,OACVo8E,EAAGnwB,KAAKpa,EAAAC,MAAMiZ,aAAa,CACjC,IAAIv3C,EAASxa,KAAKomF,eAAehD,EAAIz3E,EAAAtJ,YAAYmP,MACjD,IAAKgJ,EAAQ,OAAO,KAEpB,GADAQ,EAAQnQ,KAA2B2P,IAC9B4oE,EAAGnwB,KAAKpa,EAAAC,MAAMwM,OAAQ,CACzB,GAAI89B,EAAGnwB,KAAKpa,EAAAC,MAAMiZ,YAChB,MAMA,OAJA/xD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,MAIb,IAAI6kC,EAAMliC,EAAA2F,KAAK2uC,sBACbvuC,EACAmJ,EACAwB,EACAjL,EACA6xE,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAGxB,OADA68B,EAAGnwB,KAAKpa,EAAAC,MAAM2Y,WACPzjB,GAGT40C,EAAA3gF,UAAAmkF,eAAA,SACEhD,EACA0C,GAKA,IAAK1C,EAAGpwB,iBAKN,OAJAhzD,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf/B,EAAGj6E,SAEE,KAET,IAAI0I,EAAa/F,EAAA2F,KAAKE,2BAA2ByxE,EAAG5vB,iBAAkB4vB,EAAGj6E,SACrE7H,EAA2B,KAC/B,OAAI8hF,EAAGnwB,KAAKpa,EAAAC,MAAMoW,WAChB5tD,EAAQtB,KAAKkmF,gBAAgB9C,EAAI,IACd,KAEdt3E,EAAA2F,KAAK6uC,2BACVzuC,EACAvQ,EACAwkF,EACAjtC,EAAA//B,MAAMhO,KAAK+G,EAAW1I,MAAOi6E,EAAGj6E,WAIpCy5E,EAAA3gF,UAAAokF,YAAA,SACEjD,GAKA,IAAI9hD,EAA0B,KAC9B,GACE8hD,EAAGzwB,MAAK,IAAS9Z,EAAAC,MAAM2Y,WACvB2xB,EAAGjzB,WAAatX,EAAAC,MAAMiZ,aACrBqxB,EAAG/yB,sBAEE/uB,EAAOthC,KAAKkmF,gBAAgB9C,IAAM,OAAO,KAGjD,IAAIp1C,EAAMliC,EAAA2F,KAAKmxC,sBAAsBthB,EAAM8hD,EAAGj6E,SAE9C,OADAi6E,EAAGnwB,KAAKpa,EAAAC,MAAM2Y,WACPzjB,GAGT40C,EAAA3gF,UAAAqkF,oBAAA,SACElD,GAOA,IAFA,IAAItgE,EAA6C,KAC7CyjE,GAAe,GACXnD,EAAGnwB,KAAKpa,EAAAC,MAAM6U,cAAc,CAClC,IAAI64B,EAAgBxmF,KAAKymF,mBAAmBrD,GAC5C,IAAKoD,EAAe,OAAO,KAY3B,GAXkC,OAA9BA,EAAcvsC,YAChBssC,GAAe,EACNA,IACTvmF,KAAKwL,MACHI,EAAA/C,eAAe69E,iEACfF,EAAcr9E,OAEhBq9E,EAAcvsC,YAAc,MAEzBn3B,EACAA,EAAejY,KAAK27E,GADJ1jE,EAAiB,CAAE0jE,IAEnCpD,EAAGnwB,KAAKpa,EAAAC,MAAMwM,OAAQ,CACzB,GAAI89B,EAAGnwB,KAAKpa,EAAAC,MAAM6U,aAChB,MAMA,OAJA3tD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,MAUb,OANM2Z,GAAkBA,EAAetb,QACrCxH,KAAKwL,MACHI,EAAA/C,eAAe89E,oCACfvD,EAAGj6E,SAGA2Z,GAGT8/D,EAAA3gF,UAAAwkF,mBAAA,SACErD,GAKA,GAAIA,EAAGhtE,QAAUyiC,EAAAC,MAAMM,WAAY,CACjC,IAAIvnC,EAAa/F,EAAA2F,KAAKE,2BACpByxE,EAAG5vB,iBACH4vB,EAAGj6E,SAEDoU,EAA+B,KACnC,GAAI6lE,EAAGnwB,KAAKpa,EAAAC,MAAMsT,SAAU,CAE1B,KADI7qD,EAAIvB,KAAK4kF,UAAUxB,IACf,OAAO,KACf,GAAI7hF,EAAEuT,MAAQhJ,EAAAiJ,SAASqvC,KAKrB,OAJApkD,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACf/b,EAAE4H,OAEG,KAEToU,EAAwBhc,EAE1B,IAAI04C,EAA+B,KACnC,GAAImpC,EAAGnwB,KAAKpa,EAAAC,MAAMoW,QAAS,CACzB,IAAI3tD,EACJ,KADIA,EAAIvB,KAAK4kF,UAAUxB,IACf,OAAO,KACf,GAAI7hF,EAAEuT,MAAQhJ,EAAAiJ,SAASqvC,KAKrB,OAJApkD,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACf/b,EAAE4H,OAEG,KAET8wC,EAAwB14C,EAE1B,OAAOuK,EAAA2F,KAAKuoC,oBACVnoC,EACA0L,EACA08B,EACApB,EAAA//B,MAAMhO,KAAK+G,EAAW1I,MAAOi6E,EAAGj6E,UAQpC,OALEnJ,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf/B,EAAGj6E,SAGA,MAKTy5E,EAAA3gF,UAAA2kF,gBAAA,SACExD,EACAyD,QAAA,IAAAA,OAAA,GAKA,IAAItsC,EAAa,IAAIvzC,MACjB8/E,EAAiC,KACjCP,GAAe,EACfQ,GAAe,EACfhhE,EAAkC,KAItC,GADA/lB,KAAKijF,oBAAsB,KACvBG,EAAGnwB,KAAKpa,EAAAC,MAAMgN,MAAO,CACvB,IAAIs9B,EAAGnwB,KAAKpa,EAAAC,MAAM0Y,OAgBhB,OAJAxxD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,KAdP,KADA4c,EAAW/lB,KAAK4kF,UAAUxB,IACX,OAAO,KAgBxB,GAfMr9D,EAASjR,MAAQhJ,EAAAiJ,SAASqvC,KAC5BpkD,KAAKijF,oBAAgCl9D,EAErC/lB,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACfyI,EAAS5c,QAUVi6E,EAAGnwB,KAAKpa,EAAAC,MAAMwM,OACjB,OAAI89B,EAAGnwB,KAAKpa,EAAAC,MAAM+X,YACTtW,GAEPv6C,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,MAKb,MAAQi6E,EAAGnwB,KAAKpa,EAAAC,MAAM+X,aAAa,CACjC,IAAI80B,EAAQ3lF,KAAKgnF,eAAe5D,EAAIyD,GACpC,IAAKlB,EAAO,OAAO,KAQnB,OAPImB,IAAaC,IACf/mF,KAAKwL,MACHI,EAAA/C,eAAeo+E,kDACfH,EAASlmF,KAAKuI,OAEhB49E,GAAe,GAETpB,EAAMrrC,eACZ,QACMisC,GACFvmF,KAAKwL,MACHI,EAAA/C,eAAeq+E,yDACfvB,EAAM/kF,KAAKuI,OAGf,MAEF,KAAK2C,EAAAw4C,cAAcohC,SACjBa,GAAe,EACf,MAEF,KAAKz6E,EAAAw4C,cAAc0S,KACjB8vB,EAAWnB,EAKf,GADAprC,EAAW1vC,KAAK86E,IACXvC,EAAGnwB,KAAKpa,EAAAC,MAAMwM,OAAQ,CACzB,GAAI89B,EAAGnwB,KAAKpa,EAAAC,MAAM+X,YAChB,MAMA,OAJA7wD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,MAIb,OAAOoxC,GAGTqoC,EAAA3gF,UAAA+kF,eAAA,SACE5D,EACAyD,QAAA,IAAAA,OAAA,GAKA,IAAIM,GAAS,EACTC,GAAa,EACbC,EAA2B,KAC3BC,EAA2B37E,EAAAtJ,YAAYmP,KAC3C,GAAIq1E,IACEzD,EAAGnwB,KAAKpa,EAAAC,MAAMmU,SAChBo6B,EAAajE,EAAGj6E,QAChBm+E,GAAe37E,EAAAtJ,YAAY4qD,QAClBm2B,EAAGnwB,KAAKpa,EAAAC,MAAMkU,YACvBq6B,EAAajE,EAAGj6E,QAChBm+E,GAAe37E,EAAAtJ,YAAY2qD,WAClBo2B,EAAGnwB,KAAKpa,EAAAC,MAAMiU,WACvBs6B,EAAajE,EAAGj6E,QAChBm+E,GAAe37E,EAAAtJ,YAAY0qD,SAEzBq2B,EAAGzwB,QAAU9Z,EAAAC,MAAMz6B,UAAU,CAC/B,IAAI80C,EAAQiwB,EAAGlwB,OACfkwB,EAAGhtE,OACCgtE,EAAGzwB,QAAU9Z,EAAAC,MAAM0Y,OACrB4xB,EAAG9vB,QAAQH,GACNk0B,IAAYA,EAAajE,EAAGj6E,SACjCm+E,GAAe37E,EAAAtJ,YAAYgc,UAE3B+kE,EAAG7vB,MAAMJ,GAef,GAXIiwB,EAAGnwB,KAAKpa,EAAAC,MAAM2U,eACZ65B,EACFtnF,KAAKwL,MACHI,EAAA/C,eAAe0+E,+DACfnE,EAAGj6E,SAGLk+E,EAAajE,EAAGj6E,QAElBg+E,GAAS,GAEP/D,EAAGpwB,iBAAkB,CAClBm0B,IAAQE,EAAajE,EAAGj6E,SAC7B,IAAI0I,EAAa/F,EAAA2F,KAAKE,2BAA2ByxE,EAAG5vB,iBAAkB4vB,EAAGj6E,SACrEgS,EAA8B,KASlC,IARIisE,EAAahE,EAAGnwB,KAAKpa,EAAAC,MAAM6Y,YACzBw1B,GACFnnF,KAAKwL,MACHI,EAAA/C,eAAe48E,oCACf5zE,EAAW1I,OAIbi6E,EAAGnwB,KAAKpa,EAAAC,MAAM0Y,QAEhB,KADAr2C,EAAOnb,KAAK4kF,UAAUxB,IACX,OAAO,UAElBjoE,EAAOrP,EAAA2F,KAAKM,kBAAkBqxE,EAAGj6E,MAAMi6E,EAAG78B,MAE5C,IAAInjC,EAAiC,KACrC,GAAIggE,EAAGnwB,KAAKpa,EAAAC,MAAMoW,UACZi4B,GACFnnF,KAAKwL,MACHI,EAAA/C,eAAe2+E,4CACf31E,EAAW1I,OAGXi+E,EACFpnF,KAAKwL,MACHI,EAAA/C,eAAe4+E,oDACf51E,EAAW1I,OAGbi+E,GAAa,IAEfhkE,EAAcpjB,KAAKkmF,gBAAgB9C,EAAI,KACrB,OAAO,KAE3B,IAAIuC,EAAQ75E,EAAA2F,KAAK2oC,gBACfvoC,EACAsJ,EACAiI,EACA+jE,EACIr7E,EAAAw4C,cAAc0S,KACdowB,EACEt7E,EAAAw4C,cAAcohC,SACd55E,EAAAw4C,cAAc2H,QACpBpT,EAAA//B,MAAMhO,KAAYu8E,EAAYjE,EAAGj6E,UAGnC,OADAw8E,EAAMp0E,OAAS+1E,EACR3B,EAOT,OALE3lF,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf/B,EAAGj6E,SAGA,MAGTy5E,EAAA3gF,UAAA+hF,cAAA,SACEZ,EACA7xE,EACAiL,EACA8mE,GAUA,IAAKF,EAAGpwB,iBAKN,OAJAhzD,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf/B,EAAGj6E,MAAMi6E,EAAG78B,MAEP,KAGT,IAAI3lD,EAAOkL,EAAA2F,KAAKE,2BAA2ByxE,EAAG5vB,iBAAkB4vB,EAAGj6E,SAC/Du+E,GAAuB,EAEvB5kE,EAA6C,KACjD,GAAIsgE,EAAGnwB,KAAKpa,EAAAC,MAAM4U,UAAW,CAG3B,GAFAg6B,EAAiBtE,EAAGlzB,WACpBptC,EAAiB9iB,KAAKsmF,oBAAoBlD,IACrB,OAAO,KAC5B7xE,GAAS5F,EAAAtJ,YAAYqR,QAGvB,IAAK0vE,EAAGnwB,KAAKpa,EAAAC,MAAM8X,WAKjB,OAJA5wD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,MAAMi6E,EAAG78B,KAAM,KAEb,KAGLmhC,EAAiB,IACnBA,EAAiBtE,EAAGlzB,UAGtB,IAAI3V,EAAav6C,KAAK4mF,gBAAgBxD,GACtC,IAAK7oC,EAAY,OAAO,KACxB,IAAIx0B,EAAW/lB,KAAKijF,oBAEhB0E,EAAwC,IAA5Bp2E,EAAQ5F,EAAAtJ,YAAY0b,KAChC4pE,IACuB,GAArBptC,EAAW/yC,QACbxH,KAAKwL,MACHI,EAAA/C,eAAe++E,+CACfhnF,EAAKuI,OAGLoxC,EAAW/yC,QAAU+yC,EAAW,GAAGn3B,aACrCpjB,KAAKwL,MACHI,EAAA/C,eAAeg/E,oDACfjnF,EAAKuI,QAKPoI,EAAQ5F,EAAAtJ,YAAYyb,KAClBy8B,EAAW/yC,QACbxH,KAAKwL,MACHI,EAAA/C,eAAei/E,sCACflnF,EAAKuI,OAKX,IAAIwQ,EAAoC,KACxC,GAAIypE,EAAGnwB,KAAKpa,EAAAC,MAAM0Y,UAChB73C,EAAa3Z,KAAK4kF,UAAUxB,GAAI,EAAMuE,IACrB,OAAO,KAGrBhuE,IACHA,EAAa7N,EAAA2F,KAAKM,kBAChBqxE,EAAGj6E,MAAMi6E,EAAG78B,MAETohC,GACH3nF,KAAKwL,MACHI,EAAA/C,eAAequD,cACfv9C,EAAWxQ,QAKjB,IAAIqJ,EAAY1G,EAAA2F,KAAKS,gBACnBqoC,EACA5gC,EACAoM,GACA,EACAq9D,EAAGj6E,MAAMu+E,EAAgBtE,EAAG78B,MAG1BviC,EAAyB,KAC7B,GAAIo/D,EAAGnwB,KAAKpa,EAAAC,MAAMgZ,YAShB,GARIvgD,EAAQ5F,EAAAtJ,YAAY0e,SACtB/gB,KAAKwL,MACHI,EAAA/C,eAAeo7D,yDACfmf,EAAGj6E,WAIP6a,EAAOhkB,KAAK+nF,oBAAoB3E,GAAI,IACzB,OAAO,UACP7xE,EAAQ5F,EAAAtJ,YAAY0e,SAC/B/gB,KAAKwL,MACHI,EAAA/C,eAAes7D,gFACfif,EAAGj6E,MAAMi6E,EAAG78B,MAIhB,IAAIvY,EAAMliC,EAAA2F,KAAKQ,0BACbrR,EACAkiB,EACAtQ,EACAwR,EACAxH,EACAjL,EAAK,EAEL6xE,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAGxB,OADA68B,EAAGnwB,KAAKpa,EAAAC,MAAM2Y,WACPzjB,GAGT40C,EAAA3gF,UAAA+lF,wBAAA,SAAwB5E,GACtB,IACIxiF,EADA0iF,EAAWF,EAAGlzB,SAEdjsC,EAAS,EAOb,GAAIm/D,EAAG71B,OAAS1U,EAAAC,MAAMj+B,UAMpB,GAJEja,EADEwiF,EAAGpwB,iBACElnD,EAAA2F,KAAKE,2BAA2ByxE,EAAG5vB,iBAAkB4vB,EAAGj6E,SAExD2C,EAAA2F,KAAK6pC,gCAAgC8nC,EAAGj6E,MAAMi6E,EAAG78B,OAErD68B,EAAGnwB,KAAKpa,EAAAC,MAAM8X,WAKjB,OAJA5wD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,MAAMi6E,EAAG78B,KAAM,KAEb,UAQTtiC,EAAS,EACTzb,OAAO46E,EAAG71B,OAAS1U,EAAAC,MAAM8X,WACzBhwD,EAAOkL,EAAA2F,KAAK6pC,gCAAgC8nC,EAAGj6E,MAAMi6E,EAAGlzB,WAK1D,IAAIw3B,EAAiBtE,EAAG78B,IACpBhM,EAAav6C,KAAK4mF,gBAAgBxD,GACtC,OAAK7oC,EAEEv6C,KAAKioF,8BAA8B7E,EAAIxiF,EAAM25C,EAAYt2B,EAAWq/D,EAAUoE,GAF7D,MAKlB9E,EAAA3gF,UAAAgmF,8BAAR,SACE7E,EACAxiF,EACA25C,EACAt2B,EACAq/D,EACAoE,QADA,IAAApE,OAAiB,QACjB,IAAAoE,OAAuB,GAEnBpE,EAAW,IAAGA,EAAW1iF,EAAKuI,MAAMoB,OACpCm9E,EAAiB,IAAGA,EAAiBpE,GAEzC,IAAI3pE,EAAoC,KACxC,GAAa,GAATsK,GAAuCm/D,EAAGnwB,KAAKpa,EAAAC,MAAM0Y,QAEvD,KADA73C,EAAa3Z,KAAK4kF,UAAUxB,IACX,OAAO,UAExBzpE,EAAa7N,EAAA2F,KAAKM,kBAAkBqxE,EAAGj6E,MAAMi6E,EAAG78B,MAGlD,GAAItiC,IACGm/D,EAAGnwB,KAAKpa,EAAAC,MAAM4Y,oBAKjB,OAJA1xD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,MAAMi6E,EAAG78B,KAAM,MAEb,KAIX,IAAI/zC,EAAY1G,EAAA2F,KAAKS,gBACnBqoC,EACA5gC,EACA,MACA,EACAypE,EAAGj6E,MAAMu+E,EAAgBtE,EAAG78B,MAG1BviC,EAAyB,KAC7B,GAAIC,EACF,GAAIm/D,EAAGnwB,KAAKpa,EAAAC,MAAMgZ,WAChB9tC,EAAOhkB,KAAK+nF,oBAAoB3E,GAAI,OAC/B,CACL,IAAI8E,EAAiBloF,KAAKkmF,gBAAgB9C,EAAI,GAC1C8E,IAAgBlkE,EAAOlY,EAAA2F,KAAK0vC,0BAA0B+mC,QAEvD,CACL,IAAK9E,EAAGnwB,KAAKpa,EAAAC,MAAMgZ,WAKjB,OAJA9xD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,MAAMi6E,EAAG78B,KAAM,KAEb,KAETviC,EAAOhkB,KAAK+nF,oBAAoB3E,GAAI,GAEtC,IAAKp/D,EAAM,OAAO,KAElB,IAAIlR,EAAchH,EAAA2F,KAAKQ,0BACrBrR,EACA,KACA4R,EACAwR,EACA,KACArY,EAAAtJ,YAAYmP,KACZyS,EACAm/D,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAExB,OAAOz6C,EAAA2F,KAAKyrC,yBAAyBpqC,IAGvC8vE,EAAA3gF,UAAAiiF,sBAAA,SACEd,EACA7xE,EACAiL,EACA8mE,GAUA,IAAIX,EAAcS,EAAG71B,OAAS1U,EAAAC,MAAM7wB,UAEpC,IAAKm7D,EAAGpwB,iBAKN,OAJAhzD,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf/B,EAAGj6E,SAEE,KAGT,IAAI0I,EAAa/F,EAAA2F,KAAKE,2BACpByxE,EAAG5vB,iBACH4vB,EAAGj6E,SAGD2Z,EAA6C,KACjD,GAAIsgE,EAAGnwB,KAAKpa,EAAAC,MAAM4U,UAAW,CAE3B,KADA5qC,EAAiB9iB,KAAKsmF,oBAAoBlD,IACrB,OAAO,KAC5B7xE,GAAS5F,EAAAtJ,YAAYqR,QAGvB,IAAI6J,EAA+B,KACnC,GAAI6lE,EAAGnwB,KAAKpa,EAAAC,MAAMsT,SAAU,CAC1B,IAAI7qD,EAAIvB,KAAK4kF,UAAUxB,GACvB,IAAK7hF,EAAG,OAAO,KACf,GAAIA,EAAEuT,MAAQhJ,EAAAiJ,SAASqvC,KAKrB,OAJApkD,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACf/b,EAAE4H,OAEG,KAEToU,EAAwBhc,EAG1B,IAAI4b,EAAqC,KACzC,GAAIimE,EAAGnwB,KAAKpa,EAAAC,MAAMyT,YAAa,CACzBo2B,GACF3iF,KAAKwL,MACHI,EAAA/C,eAAes/E,oDACf/E,EAAGj6E,SAGP,EAAG,CACD,IAAIgS,EAAOnb,KAAK4kF,UAAUxB,GAC1B,IAAKjoE,EAAM,OAAO,KACbwnE,IACExlE,EACAA,EAAgBtS,KAAesQ,GADdgC,EAAkB,CAAWhC,UAG9CioE,EAAGnwB,KAAKpa,EAAAC,MAAMwM,QAGzB,IAAK89B,EAAGnwB,KAAKpa,EAAAC,MAAMgZ,WAKjB,OAJA9xD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,KAGT,IACI2J,EADAkI,EAAU,IAAIhU,MAyBlB,GAvBI27E,GACFn6E,QAAQ2U,GACRrK,EAAchH,EAAA2F,KAAKowC,2BACjBhwC,EACAiR,EACAvF,EACAvC,EACAwB,EACAjL,EACA6xE,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,OAGxBzzC,EAAchH,EAAA2F,KAAKmuC,uBACjB/tC,EACAiR,EACAvF,EACAJ,EACAnC,EACAwB,EACAjL,EACA6xE,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,OAGrB68B,EAAGnwB,KAAKpa,EAAAC,MAAMiZ,YACjB,EAAG,CACD,IAAIv3C,EAASxa,KAAKooF,iBAAiBhF,EAAItwE,GACvC,GAAI0H,EAAQQ,EAAQnQ,KAA2B2P,QAG7C,GADAxa,KAAKwjF,cAAcJ,GACfA,EAAGnwB,KAAKpa,EAAAC,MAAM4Z,WAKhB,OAJA1yD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,YAGHi6E,EAAGnwB,KAAKpa,EAAAC,MAAMiZ,aAE1B,OAAOj/C,GAGT8vE,EAAA3gF,UAAAomF,qBAAA,SAAqBjF,GAInB,IACIxiF,EADA0iF,EAAWF,EAAGlzB,SASlB,GALEtvD,EADEwiF,EAAGpwB,iBACElnD,EAAA2F,KAAKE,2BAA2ByxE,EAAG5vB,iBAAkB4vB,EAAGj6E,SAExD2C,EAAA2F,KAAK6pC,gCAAgC8nC,EAAGj6E,MAAMi6E,EAAG78B,OAGrD68B,EAAGnwB,KAAKpa,EAAAC,MAAMgZ,WAKjB,OAJA9xD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,MAAMi6E,EAAG78B,KAAM,KAEb,KAGT,IAAIvrC,EAAU,IAAIhU,MACd8L,EAAchH,EAAA2F,KAAKmuC,uBACrBh/C,EACA,GACA,KACA,KACAoa,EACA,KACArP,EAAAtJ,YAAYmP,KACZ4xE,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAExB,IAAK68B,EAAGnwB,KAAKpa,EAAAC,MAAMiZ,YACjB,EAAG,CACD,IAAIv3C,EAASxa,KAAKooF,iBAAiBhF,EAAItwE,GACvC,GAAI0H,EAAQQ,EAAQnQ,KAA2B2P,QAG7C,GADAxa,KAAKwjF,cAAcJ,GACfA,EAAGnwB,KAAKpa,EAAAC,MAAM4Z,WAKhB,OAJA1yD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,YAGHi6E,EAAGnwB,KAAKpa,EAAAC,MAAMiZ,aAE1B,OAAOjmD,EAAA2F,KAAK2qC,sBAAsBtpC,IAGpC8vE,EAAA3gF,UAAAmmF,iBAAA,SACEhF,EACA3wE,GAUA,IAAI6wE,EAAWF,EAAG78B,IACdo8B,EAAclwE,EAAOqC,MAAQhJ,EAAAiJ,SAASY,qBAEtC6G,EAAqC,KACzC,GAAI4mE,EAAGnwB,KAAKpa,EAAAC,MAAMkZ,IAAK,CACrB,EAAG,CACD,IAAIt1C,EAAY1c,KAAKujF,eAAeH,GACpC,IAAK1mE,EAAW,MACXF,EACAA,EAAW3R,KAAoB6R,GADnBF,EAAa,CAAgBE,SAEvC0mE,EAAGnwB,KAAKpa,EAAAC,MAAMkZ,KACnBx1C,GAAcmmE,GAChB3iF,KAAKwL,MACHI,EAAA/C,eAAe47E,8BACf5rC,EAAA//B,MAAMhO,KAAK0R,EAAW,GAAGrT,MAAOqT,EAAWA,EAAWhV,OAAS,GAAG2B,QAMxE,IAAIoI,EAAQkB,EAAOlB,MAAQ5F,EAAAtJ,YAAY0e,QAGnC4hE,IAAapxE,GAAS5F,EAAAtJ,YAAYimF,SAEtC,IAAIC,EAAc,EACdC,EAAY,EACZpF,EAAGnwB,KAAKpa,EAAAC,MAAMmU,SACZ01B,GACF3iF,KAAKwL,MACHI,EAAA/C,eAAe27E,gCACfpB,EAAGj6E,QAAS,UAGhBoI,GAAS5F,EAAAtJ,YAAY4qD,OACrBs7B,EAAcnF,EAAGlzB,SACjBs4B,EAAYpF,EAAG78B,KACN68B,EAAGnwB,KAAKpa,EAAAC,MAAMiU,UACnB41B,GACF3iF,KAAKwL,MACHI,EAAA/C,eAAe27E,gCACfpB,EAAGj6E,QAAS,WAGhBoI,GAAS5F,EAAAtJ,YAAY0qD,QACrBw7B,EAAcnF,EAAGlzB,SACjBs4B,EAAYpF,EAAG78B,KACN68B,EAAGnwB,KAAKpa,EAAAC,MAAMkU,aACnB21B,GACF3iF,KAAKwL,MACHI,EAAA/C,eAAe27E,gCACfpB,EAAGj6E,QAAS,aAGhBoI,GAAS5F,EAAAtJ,YAAY2qD,UACrBu7B,EAAcnF,EAAGlzB,SACjBs4B,EAAYpF,EAAG78B,KAGjB,IAAIkiC,EAAc,EACdC,EAAY,EACZC,EAAgB,EAChBC,EAAc,EACdxF,EAAGnwB,KAAKpa,EAAAC,MAAM36B,SACZwkE,GACF3iF,KAAKwL,MACHI,EAAA/C,eAAe27E,gCACfpB,EAAGj6E,QAAS,UAGhBoI,GAAS5F,EAAAtJ,YAAY8b,OACrBsqE,EAAcrF,EAAGlzB,SACjBw4B,EAAYtF,EAAG78B,MAEfh1C,GAAS5F,EAAAtJ,YAAY4e,SACjBmiE,EAAGnwB,KAAKpa,EAAAC,MAAMt6B,YACZmkE,GACF3iF,KAAKwL,MACHI,EAAA/C,eAAe27E,gCACfpB,EAAGj6E,QAAS,YAGhBoI,GAAS5F,EAAAtJ,YAAYmc,SACrBmqE,EAAgBvF,EAAGlzB,SACnB04B,EAAcxF,EAAG78B,KAEf9zC,EAAOlB,MAAQ5F,EAAAtJ,YAAYqR,UAASnC,GAAS5F,EAAAtJ,YAAYwmF,kBAG/D,IAAIC,EAAqB,EACrBC,EAAmB,EACnB3F,EAAGnwB,KAAKpa,EAAAC,MAAMz6B,YAChB9M,GAAS5F,EAAAtJ,YAAYgc,SACrByqE,EAAgB1F,EAAGlzB,SACnB64B,EAAc3F,EAAG78B,KAInB,IA+DI3lD,EA/DAuyD,EAAQiwB,EAAGlwB,OACX2zB,GAAgB,EAChB7mE,GAAW,EAGX2nE,GAAW,EACXp8C,EAAgB,EAChBy9C,EAAc,EAyDlB,GAxDKrG,IACCS,EAAGnwB,KAAKpa,EAAAC,MAAMh7B,KACZslE,EAAGzwB,MAAK,EAAM9Z,EAAA4S,mBAAmB8G,SAAW1Z,EAAAC,MAAMM,YAAegqC,EAAG/yB,mBAYtE+yB,EAAG7vB,MAAMJ,IAXT5hD,GAAS5F,EAAAtJ,YAAYyb,IACrBkC,GAAW,EACXurB,EAAW63C,EAAGlzB,SACd84B,EAAS5F,EAAG78B,IACRh1C,EAAQ5F,EAAAtJ,YAAYgc,UACtBre,KAAKwL,MACHI,EAAA/C,eAAe27E,gCACfpB,EAAGj6E,MAAM2/E,EAAeC,GAAc,aAMnC3F,EAAGnwB,KAAKpa,EAAAC,MAAM/6B,KACnBqlE,EAAGzwB,MAAK,EAAM9Z,EAAA4S,mBAAmB8G,SAAW1Z,EAAAC,MAAMM,YAAegqC,EAAG/yB,mBAYtE+yB,EAAG7vB,MAAMJ,IAXT5hD,GAAS5F,EAAAtJ,YAAY0b,IACrB4pE,GAAW,EACXp8C,EAAW63C,EAAGlzB,SACd84B,EAAS5F,EAAG78B,IACRh1C,EAAQ5F,EAAAtJ,YAAYgc,UACtBre,KAAKwL,MACHI,EAAA/C,eAAe27E,gCACfpB,EAAGj6E,MAAM2/E,EAAeC,GAAc,aAMnC3F,EAAGnwB,KAAKpa,EAAAC,MAAMl6B,eAEvBioE,GAAgB,GADhBt1E,GAAS5F,EAAAtJ,YAAYuc,aAETjT,EAAAtJ,YAAY8b,QACtBne,KAAKwL,MACHI,EAAA/C,eAAe27E,gCACfpB,EAAGj6E,MAAMs/E,EAAaC,GAAY,UAGlCn3E,EAAQ5F,EAAAtJ,YAAYmc,UACtBxe,KAAKwL,MACHI,EAAA/C,eAAe27E,gCACfpB,EAAGj6E,MAAMw/E,EAAeC,GAAc,YAGtCr3E,EAAQ5F,EAAAtJ,YAAYgc,UACtBre,KAAKwL,MACHI,EAAA/C,eAAe27E,gCACfpB,EAAGj6E,MAAM2/E,EAAeC,GAAc,cAO1ClC,EACFjmF,EAAOkL,EAAA2F,KAAKgrC,4BAA4B2mC,EAAGj6E,aACtC,CACL,IAAM6W,IAAY2nE,GAAavE,EAAGnwB,KAAKpa,EAAAC,MAAM8Y,aAAc,CAErDrgD,EAAQ5F,EAAAtJ,YAAY4qD,OACtBjtD,KAAKwL,MACHI,EAAA/C,eAAe27E,gCACfpB,EAAGj6E,MAAMo/E,EAAaC,GAAY,UAE3Bj3E,EAAQ5F,EAAAtJ,YAAY2qD,UAC7BhtD,KAAKwL,MACHI,EAAA/C,eAAe27E,gCACfpB,EAAGj6E,MAAMo/E,EAAaC,GAAY,aAE3Bj3E,EAAQ5F,EAAAtJ,YAAY0qD,SAC7B/sD,KAAKwL,MACHI,EAAA/C,eAAe27E,gCACfpB,EAAGj6E,MAAMo/E,EAAaC,GAAY,aAGlCj3E,EAAQ5F,EAAAtJ,YAAY8b,QACtBne,KAAKwL,MACHI,EAAA/C,eAAe27E,gCACfpB,EAAGj6E,MAAMs/E,EAAaC,GAAY,UAGlCn3E,EAAQ5F,EAAAtJ,YAAYmc,UACtBxe,KAAKwL,MACHI,EAAA/C,eAAe27E,gCACfpB,EAAGj6E,MAAMw/E,EAAeC,GAAc,YAGtCr3E,EAAQ5F,EAAAtJ,YAAYgc,UACtBre,KAAKwL,MACHI,EAAA/C,eAAe27E,gCACfpB,EAAGj6E,MAAM2/E,EAAeC,GAAc,YAG1C,IAAIE,EAAWjpF,KAAKkpF,+BAA+B9F,EAAI5mE,GACvD,OAAKysE,GACL7F,EAAGnwB,KAAKpa,EAAAC,MAAM2Y,WACPw3B,GAFe,KAIxB,IAAK7F,EAAGpwB,iBAKN,OAJAhzD,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf/B,EAAGj6E,SAEE,KAETvI,EAAOkL,EAAA2F,KAAKE,2BAA2ByxE,EAAG5vB,iBAAkB4vB,EAAGj6E,SAEjE,IAAI2Z,EAA6C,KACjD,GAAIsgE,EAAGnwB,KAAKpa,EAAAC,MAAM4U,UAAW,CAC3B,IAAIy7B,EAAsB/F,EAAGlzB,SAE7B,KADAptC,EAAiB9iB,KAAKsmF,oBAAoBlD,IACrB,OAAO,KACxByD,EACF7mF,KAAKwL,MACHI,EAAA/C,eAAeugF,2DACfhG,EAAGj6E,MAAMggF,EAAqB/F,EAAG78B,MAE1BvmC,GAAY2nE,EACrB3nF,KAAKwL,MACHI,EAAA/C,eAAewgF,wCACfjG,EAAGj6E,MAAMggF,EAAqB/F,EAAG78B,MAGnCh1C,GAAS5F,EAAAtJ,YAAYqR,QAKzB,GAAI0vE,EAAGnwB,KAAKpa,EAAAC,MAAM8X,WAAY,CAC5B,IAAI82B,EAAiBtE,EAAGlzB,SACpB3V,EAAav6C,KAAK4mF,gBAAgBxD,EAAIyD,GAC1C,IAAKtsC,EAAY,OAAO,KACxB,IAAIx0B,EAAW/lB,KAAKijF,oBACpB,GAAI4D,EACF,IAAK,IAAIxmF,EAAI,EAAGoU,EAAI8lC,EAAW/yC,OAAQnH,EAAIoU,IAAKpU,EAAG,CACjD,IAAIglF,EAAY9qC,EAAWl6C,GAC3B,GAAIglF,EAAUxnE,MACZlS,EAAAtJ,YAAY4qD,OACZthD,EAAAtJ,YAAY2qD,UACZrhD,EAAAtJ,YAAY0qD,QACZphD,EAAAtJ,YAAYgc,UACX,CACD,IAAImmC,EAA2B14C,EAAA2F,KAAKswC,uBAClCsjC,EAAUzkF,KACVykF,EAAUlqE,KACV,KACA,KACAkqE,EAAU9zE,MAAQ5F,EAAAtJ,YAAY4e,SAC9BokE,EAAUl8E,OAEZq7C,EAAyBr9B,eAAiB9mB,EAC1CglF,EAAU7gC,yBAA2BA,EACrC/xC,EAAOuI,QAAQnQ,KAAK25C,SAGfxkC,EACLu6B,EAAW/yC,QACbxH,KAAKwL,MACHI,EAAA/C,eAAei/E,sCACflnF,EAAKuI,OAGAw+E,IACgB,GAArBptC,EAAW/yC,QACbxH,KAAKwL,MACHI,EAAA/C,eAAe++E,+CACfhnF,EAAKuI,OAGLoxC,EAAW/yC,QAAU+yC,EAAW,GAAGn3B,aACrCpjB,KAAKwL,MACHI,EAAA/C,eAAeg/E,oDACfjnF,EAAKuI,QAKX,IAAIwQ,EAAoC,KACxC,GAAIypE,EAAGnwB,KAAKpa,EAAAC,MAAM0Y,QAahB,GAZI5wD,EAAKkU,MAAQhJ,EAAAiJ,SAAS6J,YACxB5e,KAAKwL,MACHI,EAAA/C,eAAeygF,2DACflG,EAAGj6E,SAEIw+E,GACT3nF,KAAKwL,MACHI,EAAA/C,eAAe0gF,oDACfnG,EAAGj6E,WAGPwQ,EAAa3Z,KAAK4kF,UAAUxB,EAAIxiF,EAAKkU,MAAQhJ,EAAAiJ,SAAS6J,aAAe+oE,IACpD,OAAO,UAExBhuE,EAAa7N,EAAA2F,KAAKM,kBAAkBqxE,EAAGj6E,MAAMi6E,EAAG78B,MAC3CohC,GAAY/mF,EAAKkU,MAAQhJ,EAAAiJ,SAAS6J,aACrC5e,KAAKwL,MACHI,EAAA/C,eAAequD,cACfv9C,EAAWxQ,OAKjB,IAAIqJ,EAAY1G,EAAA2F,KAAKS,gBACnBqoC,EACA5gC,EACAoM,GACA,EACAq9D,EAAGj6E,MAAMu+E,EAAgBtE,EAAG78B,MAG1BviC,EAAyB,KAC7B,GAAIo/D,EAAGnwB,KAAKpa,EAAAC,MAAMgZ,YAahB,GAZIvgD,EAAQ5F,EAAAtJ,YAAY0e,QACtB/gB,KAAKwL,MACHI,EAAA/C,eAAeo7D,yDACfmf,EAAGj6E,SAEIoI,EAAQ5F,EAAAtJ,YAAYmc,UAC7Bxe,KAAKwL,MACHI,EAAA/C,eAAe2gF,qEACfpG,EAAGj6E,QAASvI,EAAKyJ,QAGrB2Z,EAAOhkB,KAAK+nF,oBAAoB3E,GAAI,IACzB,OAAO,UACP7xE,EAAQ5F,EAAAtJ,YAAY0e,SAAa4hE,GAC5C3iF,KAAKwL,MACHI,EAAA/C,eAAes7D,gFACfif,EAAGj6E,SAIP,IAAIsgF,EAAY39E,EAAA2F,KAAKgxC,wBACnB7hD,EACAkiB,EACAtQ,EACAwR,EACAxH,EACAjL,EACA6xE,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAGxB,OADA68B,EAAGnwB,KAAKpa,EAAAC,MAAM2Y,WACPg4B,EAEF,GAAI5C,EACT7mF,KAAKwL,MACHI,EAAA/C,eAAe6gF,sCACf9oF,EAAKuI,WAGF,KAAI6W,IAAY2nE,EAOhB,CACDp2E,EAAQ5F,EAAAtJ,YAAYmc,UACtBxe,KAAKwL,MACHI,EAAA/C,eAAe27E,gCACfpB,EAAGj6E,MAAMw/E,EAAeC,GAAc,YAItCr3E,EAAQ5F,EAAAtJ,YAAYyb,KACtB9d,KAAKwL,MACHI,EAAA/C,eAAe27E,gCACfpB,EAAGj6E,MAnRW,EACF,GAkRgB,OAI5BoI,EAAQ5F,EAAAtJ,YAAY0b,KACtB/d,KAAKwL,MACHI,EAAA/C,eAAe27E,gCACfpB,EAAGj6E,MAAMoiC,EAAUy9C,GAAS,OAIhC,IAAI7tE,EAA8B,KAUlC,GATIioE,EAAGnwB,KAAKpa,EAAAC,MAAM6Y,WAChB3xD,KAAKwL,MACHI,EAAA/C,eAAe8gF,sCACfvG,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAGtB68B,EAAGnwB,KAAKpa,EAAAC,MAAMgW,eAChBv9C,GAAS5F,EAAAtJ,YAAY2jF,qBAEnB5C,EAAGnwB,KAAKpa,EAAAC,MAAM0Y,QAEhB,KADAr2C,EAAOnb,KAAK4kF,UAAUxB,IACX,OAAO,UAElBpjF,KAAKwL,MACHI,EAAA/C,eAAequD,cACfksB,EAAGj6E,SAGP,IAAIia,EAAiC,KACrC,GAAIggE,EAAGnwB,KAAKpa,EAAAC,MAAMoW,WAChB9rC,EAAcpjB,KAAKkmF,gBAAgB9C,IACjB,OAAO,KAE3B,IAAIj6E,EAAQi6E,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,KAC7Bh1C,EAAQ5F,EAAAtJ,YAAY2jF,sBAA0Bz0E,EAAQ5F,EAAAtJ,YAAY8b,QAAWwkE,GAAev/D,IAC/FpjB,KAAKwL,MACHI,EAAA/C,eAAes9E,iEACfh9E,GAGJ,IAAIygF,EAAW99E,EAAA2F,KAAKswC,uBAClBnhD,EACAua,EACAiI,EACA5G,EACAjL,EACApI,GAGF,OADAi6E,EAAGnwB,KAAKpa,EAAAC,MAAM2Y,WACPm4B,EApEP5pF,KAAKwL,MACHI,EAAA/C,eAAes7D,gFACfvjE,EAAKuI,OAoET,OAAO,MAGTy5E,EAAA3gF,UAAAinF,+BAAA,SAA+B9F,EAAe5mE,GAIxCA,GAAcA,EAAWhV,QAC3BxH,KAAKwL,MACHI,EAAA/C,eAAe47E,8BACf5rC,EAAA//B,MAAMhO,KAAK0R,EAAW,GAAGrT,MAAOqT,EAAWA,EAAWhV,OAAS,GAAG2B,QAItE,IAAIoB,EAAQ64E,EAAGlzB,SACf,GAAIkzB,EAAGpwB,iBAEL,GAAU,OADDowB,EAAG5vB,iBAEV,GAAI4vB,EAAGnwB,KAAKpa,EAAAC,MAAM0Y,OAAQ,CACxB,IAAIlP,EAAUtiD,KAAK4kF,UAAUxB,GAC7B,IAAK9gC,EAAS,OAAO,KACrB,GAAIA,EAAQxtC,MAAQhJ,EAAAiJ,SAASqvC,KAK3B,OAJApkD,KAAKwL,MACHI,EAAA/C,eAAequD,cACfksB,EAAGj6E,SAEE,KAET,GAAIi6E,EAAGnwB,KAAKpa,EAAAC,MAAM+Y,cAAe,CAC/B,GAAIuxB,EAAGnwB,KAAKpa,EAAAC,MAAM0Y,OAAQ,CACxB,IAAIjP,EAAYviD,KAAK4kF,UAAUxB,GAC/B,OAAK7gC,EACEz2C,EAAA2F,KAAK4wC,gCAA0CC,EAASC,EAAW6gC,EAAGj6E,MAAMoB,EAAO64E,EAAG78B,MADtE,KAGvBvmD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,UAIhBnJ,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,UAIhBnJ,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,UAIhBnJ,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,YAIhBnJ,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf/B,EAAGj6E,SAGP,OAAO,MAGTy5E,EAAA3gF,UAAAkiF,eAAA,SACEf,EACA7xE,EACAiL,EACA8mE,GAKA,GAAIF,EAAGpwB,iBAAkB,CACvB,IAAInhD,EAAa/F,EAAA2F,KAAKE,2BAA2ByxE,EAAG5vB,iBAAkB4vB,EAAGj6E,SACzE,GAAIi6E,EAAGnwB,KAAKpa,EAAAC,MAAMgZ,WAAY,CAS5B,IARA,IAAI92C,EAAU,IAAIhU,MACdtF,EAAKoK,EAAA2F,KAAKa,2BACZT,EACAmJ,EACAwB,EACAjL,EACA6xE,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,OAEhB68B,EAAGnwB,KAAKpa,EAAAC,MAAMiZ,aAAa,CACjC,IAAIv3C,EAASxa,KAAKqjF,uBAAuBD,EAAI1hF,GAC7C,GAAI8Y,EAAQQ,EAAQnQ,KAAK2P,QAGvB,GADAxa,KAAKwjF,cAAcJ,GACfA,EAAGnwB,KAAKpa,EAAAC,MAAM4Z,WAKhB,OAJA1yD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,KAKb,OADAi6E,EAAGnwB,KAAKpa,EAAAC,MAAM2Y,WACP/vD,EAEP1B,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,UAIhBnJ,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf/B,EAAGj6E,SAGP,OAAO,MAGTy5E,EAAA3gF,UAAAsiF,YAAA,SACEnB,EACAE,EACA7iC,GAKA,IAAIjgC,EAAuC,KAC3C,GAAI4iE,EAAGnwB,KAAKpa,EAAAC,MAAMgZ,WAAY,CAE5B,IADA,IAAI92C,EAAU,IAAIhU,OACVo8E,EAAGnwB,KAAKpa,EAAAC,MAAMiZ,aAAa,CACjC,IAAIv3C,EAASxa,KAAK6pF,kBAAkBzG,GACpC,IAAK5oE,EAAQ,OAAO,KAEpB,GADAQ,EAAQnQ,KAAK2P,IACR4oE,EAAGnwB,KAAKpa,EAAAC,MAAMwM,OAAQ,CACzB,GAAI89B,EAAGnwB,KAAKpa,EAAAC,MAAMiZ,YAChB,MAMA,OAJA/xD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,MAIb,GAAIi6E,EAAGnwB,KAAKpa,EAAAC,MAAMwT,MAAO,CACvB,IAAI82B,EAAGnwB,KAAKpa,EAAAC,MAAM4X,eAOhB,OAJA1wD,KAAKwL,MACHI,EAAA/C,eAAe6W,wBACf0jE,EAAGj6E,SAEE,KANPqX,EAAO1U,EAAA2F,KAAKktC,8BAA8BykC,EAAG90C,aAAc80C,EAAGj6E,SAgBlE,OALqB,QADjBkX,GADA2tB,EAAMliC,EAAA2F,KAAK+uC,sBAAsBxlC,EAASwF,EAAMigC,EAAW2iC,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,OAC9DlmC,eACOrgB,KAAK8iF,QAAQ/vE,IAAIsN,KAC7CrgB,KAAK6iF,QAAQh4E,KAAKwV,GAClBrgB,KAAK8iF,QAAQvvE,IAAI8M,IAEnB+iE,EAAGnwB,KAAKpa,EAAAC,MAAM2Y,WACPzjB,EACF,GAAIo1C,EAAGnwB,KAAKpa,EAAAC,MAAMqV,UACvB,GAAIi1B,EAAGnwB,KAAKpa,EAAAC,MAAMwT,MAAO,CACvB,GAAI82B,EAAGnwB,KAAKpa,EAAAC,MAAM4X,eAAgB,CAChClwC,EAAO1U,EAAA2F,KAAKktC,8BAA8BykC,EAAG90C,aAAc80C,EAAGj6E,SAC9D,IAAI6kC,EAAMliC,EAAA2F,KAAK+uC,sBAAsB,KAAMhgC,EAAMigC,EAAW2iC,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAC9ElmC,EAAe7X,OAAOwlC,EAAI3tB,cAC1BtW,EAASq5E,EAAGr5E,OAQhB,OAPKA,EAAOs8C,cAAat8C,EAAOs8C,YAAc,IAAI86B,KAClDp3E,EAAOs8C,YAAY9yC,IAAI8M,GAClBrgB,KAAK8iF,QAAQ/vE,IAAIsN,KACpBrgB,KAAK6iF,QAAQh4E,KAAKwV,GAClBrgB,KAAK8iF,QAAQvvE,IAAI8M,IAEnB+iE,EAAGnwB,KAAKpa,EAAAC,MAAM2Y,WACPzjB,EAEPhuC,KAAKwL,MACHI,EAAA/C,eAAe6W,wBACf0jE,EAAGj6E,cAIPnJ,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,aAIhBnJ,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAGhB,OAAO,MAGTy5E,EAAA3gF,UAAA4nF,kBAAA,SACEzG,GAKA,GAAIA,EAAGpwB,iBAAkB,CACvB,IAAInhD,EAAa/F,EAAA2F,KAAKE,2BAA2ByxE,EAAG5vB,iBAAkB4vB,EAAGj6E,SACrE2gF,EAA4C,KAChD,GAAI1G,EAAGnwB,KAAKpa,EAAAC,MAAM6S,IAAK,CACrB,IAAIy3B,EAAGpwB,eAAena,EAAA4S,mBAAmB6G,QAOvC,OAJAtyD,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf/B,EAAGj6E,SAEE,KANP2gF,EAAeh+E,EAAA2F,KAAKE,2BAA2ByxE,EAAG5vB,iBAAkB4vB,EAAGj6E,SAS3E,OAAO2C,EAAA2F,KAAKwvC,mBACVpvC,EACAi4E,EACAA,EACIjxC,EAAA//B,MAAMhO,KAAK+G,EAAW1I,MAAO2gF,EAAa3gF,OAC1C0I,EAAW1I,OAQnB,OALEnJ,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf/B,EAAGj6E,SAGA,MAGTy5E,EAAA3gF,UAAAoiF,YAAA,SACEjB,GAOA,IAAIE,EAAWF,EAAGlzB,SACdl1C,EAAsC,KACtC6F,EAA6C,KAC7CkpE,GAAW,EACf,GAAI3G,EAAGnwB,KAAKpa,EAAAC,MAAMgZ,WAEhB,IADA92C,EAAU,IAAIhU,OACNo8E,EAAGnwB,KAAKpa,EAAAC,MAAMiZ,aAAa,CACjC,IAAIv3C,EAASxa,KAAKgqF,uBAAuB5G,GACzC,IAAK5oE,EAAQ,OAAO,KAEpB,GADAQ,EAAQnQ,KAAK2P,IACR4oE,EAAGnwB,KAAKpa,EAAAC,MAAMwM,OAAQ,CACzB,GAAI89B,EAAGnwB,KAAKpa,EAAAC,MAAMiZ,YAChB,MAMA,OAJA/xD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,WAIR,GAAIi6E,EAAGnwB,KAAKpa,EAAAC,MAAMqV,UAAW,CAClC,IAAIi1B,EAAGnwB,KAAKpa,EAAAC,MAAM6S,IAehB,OAJA3rD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,MAEP,KAdP,IAAIi6E,EAAGpwB,iBAOL,OAJAhzD,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf/B,EAAGj6E,SAEE,KANP0X,EAAgB/U,EAAA2F,KAAKE,2BAA2ByxE,EAAG5vB,iBAAkB4vB,EAAGj6E,cAgB5E4gF,GAAW,EAGb,GAAIA,GAAY3G,EAAGnwB,KAAKpa,EAAAC,MAAMwT,MAAO,CACnC,GAAI82B,EAAGnwB,KAAKpa,EAAAC,MAAM4X,eAAgB,CAChC,IAAIlwC,EAAO1U,EAAA2F,KAAKktC,8BAA8BykC,EAAG90C,aAAc80C,EAAGj6E,SAC9D6kC,OAAG,EACHntB,GACFrY,QAAQwS,GACRgzB,EAAMliC,EAAA2F,KAAKiwC,kCAAkC7gC,EAAeL,EAAM4iE,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,OAExFvY,EAAMliC,EAAA2F,KAAK8vC,sBAAsBvmC,EAASwF,EAAM4iE,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAExE,IAAIlmC,EAAe2tB,EAAI3tB,aAMvB,OALKrgB,KAAK8iF,QAAQ/vE,IAAIsN,KACpBrgB,KAAK6iF,QAAQh4E,KAAKwV,GAClBrgB,KAAK8iF,QAAQvvE,IAAI8M,IAEnB+iE,EAAGnwB,KAAKpa,EAAAC,MAAM2Y,WACPzjB,EAEPhuC,KAAKwL,MACHI,EAAA/C,eAAe6W,wBACf0jE,EAAGj6E,cAIPnJ,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,QAGhB,OAAO,MAGTy5E,EAAA3gF,UAAA+nF,uBAAA,SACE5G,GAKA,GAAIA,EAAGpwB,eAAena,EAAA4S,mBAAmB6G,QAAS,CAChD,IAAIzgD,EAAa/F,EAAA2F,KAAKE,2BAA2ByxE,EAAG5vB,iBAAkB4vB,EAAGj6E,SACrE2gF,EAA4C,KAChD,GAAI1G,EAAGnwB,KAAKpa,EAAAC,MAAM6S,IAAK,CACrB,IAAIy3B,EAAGpwB,iBAOL,OAJAhzD,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf/B,EAAGj6E,SAEE,KANP2gF,EAAeh+E,EAAA2F,KAAKE,2BAA2ByxE,EAAG5vB,iBAAkB4vB,EAAGj6E,SAS3E,OAAO2C,EAAA2F,KAAKkwC,wBACV9vC,EACAi4E,EACAA,EACIjxC,EAAA//B,MAAMhO,KAAK+G,EAAW1I,MAAO2gF,EAAa3gF,OAC1C0I,EAAW1I,OAQnB,OALEnJ,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf/B,EAAGj6E,SAGA,MAGTy5E,EAAA3gF,UAAAmiF,kBAAA,SACEhB,EACAE,GAKA,GAAIF,EAAGpwB,iBAAkB,CACvB,IAAI82B,EAAeh+E,EAAA2F,KAAKE,2BAA2ByxE,EAAG5vB,iBAAkB4vB,EAAGj6E,SAC3E,GAAIi6E,EAAGnwB,KAAKpa,EAAAC,MAAMoW,QAAS,CACzB,GAAIk0B,EAAGpwB,iBAAkB,CACvB,IAAInhD,EAAa/F,EAAA2F,KAAKE,2BAA2ByxE,EAAG5vB,iBAAkB4vB,EAAGj6E,SACrE6kC,EAAMliC,EAAA2F,KAAKsvC,4BAA4BlvC,EAAYi4E,EAAc1G,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAE3F,OADA68B,EAAGnwB,KAAKpa,EAAAC,MAAM2Y,WACPzjB,EAEPhuC,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf/B,EAAGj6E,cAIPnJ,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,UAIhBnJ,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf/B,EAAGj6E,SAGP,OAAO,MAGTy5E,EAAA3gF,UAAAgiF,eAAA,SACEb,EACA6G,QAAA,IAAAA,OAAA,GAKA,IAAI92B,EAAQiwB,EAAGlwB,OAEXr+C,EAA8B,KAClC,OAFYuuE,EAAGhtE,QAGb,KAAKyiC,EAAAC,MAAMgO,MACTjyC,EAAY7U,KAAKkqF,WAAW9G,GAC5B,MAEF,KAAKvqC,EAAAC,MAAMn9B,MACT9G,EAAY7U,KAAK+jF,cAAcX,EAAIz3E,EAAAtJ,YAAYsZ,MAAO,KAAMynE,EAAGlzB,UAC/D,MAEF,KAAKrX,EAAAC,MAAMiO,SACTlyC,EAAY7U,KAAKmqF,cAAc/G,GAC/B,MAEF,KAAKvqC,EAAAC,MAAMkO,GACTnyC,EAAY7U,KAAKoqF,iBAAiBhH,GAClC,MAEF,KAAKvqC,EAAAC,MAAMuO,IACTxyC,EAAY7U,KAAKqqF,kBAAkBjH,GACnC,MAEF,KAAKvqC,EAAAC,MAAM0O,GACT3yC,EAAY7U,KAAKsqF,iBAAiBlH,GAClC,MAEF,KAAKvqC,EAAAC,MAAM6T,IACT93C,EAAY7U,KAAK+jF,cAAcX,EAAIz3E,EAAAtJ,YAAYsqD,IAAK,KAAMy2B,EAAGlzB,UAC7D,MAEF,KAAKrX,EAAAC,MAAMqU,IACTt4C,EAAY7U,KAAK+jF,cAAcX,EAAIz3E,EAAAtJ,YAAYmP,KAAM,KAAM4xE,EAAGlzB,UAC9D,MAEF,KAAKrX,EAAAC,MAAMgZ,UACTj9C,EAAY7U,KAAK+nF,oBAAoB3E,EAAI6G,GACzC,MAEF,KAAKpxC,EAAAC,MAAM4O,OACLuiC,GACFjqF,KAAKwL,MACHI,EAAA/C,eAAe0hF,2DACfnH,EAAGj6E,SAGP0L,EAAY7U,KAAKqmF,YAAYjD,GAC7B,MAEF,KAAKvqC,EAAAC,MAAM2Y,UACT,OAAO3lD,EAAA2F,KAAKyuC,qBAAqBkjC,EAAGj6E,MAAMi6E,EAAGlzB,WAE/C,KAAKrX,EAAAC,MAAM8O,OACT/yC,EAAY7U,KAAKwqF,qBAAqBpH,GACtC,MAEF,KAAKvqC,EAAAC,MAAM+O,MACThzC,EAAY7U,KAAKyqF,oBAAoBrH,GACrC,MAEF,KAAKvqC,EAAAC,MAAMgP,IACTjzC,EAAY7U,KAAK0qF,kBAAkBtH,GACnC,MAEF,KAAKvqC,EAAAC,MAAMkP,KACTnzC,EAAY7U,KAAK2qF,mBAAmBvH,GACpC,MAEF,KAAKvqC,EAAAC,MAAMmP,MACTpzC,EAAY7U,KAAK4qF,oBAAoBxH,GACrC,MAEF,KAAKvqC,EAAAC,MAAMsL,KACT,GAAIg/B,EAAGzwB,MAAK,EAAO9Z,EAAA4S,mBAAmB8G,SAAW1Z,EAAAC,MAAMM,WAAY,CACjEvkC,EAAY7U,KAAKskF,qBAAqBlB,EAAIz3E,EAAAtJ,YAAYmP,KAAM,KAAM4xE,EAAGlzB,UACrE,MAIJ,QACEkzB,EAAG7vB,MAAMJ,GACTt+C,EAAY7U,KAAK6qF,yBAAyBzH,GAU9C,OANKvuE,EAIHuuE,EAAG9vB,QAAQH,IAHXiwB,EAAG7vB,MAAMJ,GACTnzD,KAAKwjF,cAAcJ,IAIdvuE,GAGT+tE,EAAA3gF,UAAA8lF,oBAAA,SACE3E,EACA6G,GAOA,IAFA,IAAI3G,EAAWF,EAAGlzB,SACdv7C,EAAa,IAAI3N,OACbo8E,EAAGnwB,KAAKpa,EAAAC,MAAMiZ,aAAa,CACjC,IAAIoB,EAAQiwB,EAAGlwB,OACXr+C,EAAY7U,KAAKikF,eAAeb,EAAI6G,GACxC,GAAKp1E,EAKHuuE,EAAG9vB,QAAQH,GACXx+C,EAAW9J,KAAKgK,OANF,CACd,GAAIuuE,EAAG71B,OAAS1U,EAAAC,MAAM4Z,UAAW,OAAO,KACxC0wB,EAAG7vB,MAAMJ,GACTnzD,KAAKwjF,cAAcJ,IAMvB,IAAIp1C,EAAMliC,EAAA2F,KAAK+tC,qBAAqB7qC,EAAYyuE,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAEtE,OADA68B,EAAGnwB,KAAKpa,EAAAC,MAAM2Y,WACPzjB,GAGT40C,EAAA3gF,UAAAioF,WAAA,SACE9G,GAKA,IAAIvxE,EAA0C,KAC1CuxE,EAAGzwB,MAAK,IAAS9Z,EAAAC,MAAMM,YAAegqC,EAAG/yB,qBAC3C+yB,EAAGhtE,KAAKyiC,EAAA4S,mBAAmB8G,QAC3B1gD,EAAa/F,EAAA2F,KAAKE,2BAA2ByxE,EAAG5vB,iBAAkB4vB,EAAGj6E,UAEvE,IAAI6kC,EAAMliC,EAAA2F,KAAKiuC,qBAAqB7tC,EAAYuxE,EAAGj6E,SAEnD,OADAi6E,EAAGnwB,KAAKpa,EAAAC,MAAM2Y,WACPzjB,GAGT40C,EAAA3gF,UAAAkoF,cAAA,SACE/G,GAKA,IAAIvxE,EAA0C,KAC1CuxE,EAAGzwB,MAAK,IAAS9Z,EAAAC,MAAMM,YAAegqC,EAAG/yB,qBAC3C+yB,EAAGhtE,KAAKyiC,EAAA4S,mBAAmB8G,QAC3B1gD,EAAa/F,EAAA2F,KAAKE,2BAA2ByxE,EAAG5vB,iBAAkB4vB,EAAGj6E,UAEvE,IAAI6kC,EAAMliC,EAAA2F,KAAKquC,wBAAwBjuC,EAAYuxE,EAAGj6E,SAEtD,OADAi6E,EAAGnwB,KAAKpa,EAAAC,MAAM2Y,WACPzjB,GAGT40C,EAAA3gF,UAAAmoF,iBAAA,SACEhH,GAKA,IAAIE,EAAWF,EAAGlzB,SACdr7C,EAAY7U,KAAKikF,eAAeb,GACpC,IAAKvuE,EAAW,OAAO,KAEvB,GAAIuuE,EAAGnwB,KAAKpa,EAAAC,MAAMmP,OAEhB,GAAIm7B,EAAGnwB,KAAKpa,EAAAC,MAAM8X,WAAY,CAC5B,IAAIpsB,EAAYxkC,KAAKkmF,gBAAgB9C,GACrC,IAAK5+C,EAAW,OAAO,KAEvB,GAAI4+C,EAAGnwB,KAAKpa,EAAAC,MAAM+X,YAAa,CAC7B,IAAI7iB,EAAMliC,EAAA2F,KAAKuuC,kBAA6BnrC,EAAuB2vB,EAAW4+C,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAEpG,OADA68B,EAAGnwB,KAAKpa,EAAAC,MAAM2Y,WACPzjB,EAEPhuC,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,UAIhBnJ,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,UAIhBnJ,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,SAGhB,OAAO,MAGTy5E,EAAA3gF,UAAA4oF,yBAAA,SACEzH,GAKA,IAAI9hD,EAAOthC,KAAKkmF,gBAAgB9C,GAChC,IAAK9hD,EAAM,OAAO,KAElB,IAAI0M,EAAMliC,EAAA2F,KAAK0vC,0BAA0B7f,GAEzC,OADA8hD,EAAGnwB,KAAKpa,EAAAC,MAAM2Y,WACPzjB,GAGT40C,EAAA3gF,UAAAooF,kBAAA,SACEjH,GAKA,IAAIE,EAAWF,EAAGlzB,SAElB,GAAIkzB,EAAGnwB,KAAKpa,EAAAC,MAAM8X,WAAY,CAC5B,IAAIxtC,EAAgC,KAEpC,GAAIggE,EAAGnwB,KAAKpa,EAAAC,MAAMn9B,OAChByH,EAAcpjB,KAAK+jF,cAAcX,EAAIz3E,EAAAtJ,YAAYsZ,MAAO,KAAMynE,EAAGlzB,eAC5D,GAAIkzB,EAAGnwB,KAAKpa,EAAAC,MAAM6T,KACvBvpC,EAAcpjB,KAAK+jF,cAAcX,EAAIz3E,EAAAtJ,YAAYsqD,IAAK,KAAMy2B,EAAGlzB,eAC1D,GAAIkzB,EAAGnwB,KAAKpa,EAAAC,MAAMqU,KACvB/pC,EAAcpjB,KAAK+jF,cAAcX,EAAIz3E,EAAAtJ,YAAYmP,KAAM,KAAM4xE,EAAGlzB,eAE3D,IAAKkzB,EAAGnwB,KAAKpa,EAAAC,MAAM2Y,cACxBruC,EAAcpjB,KAAK6qF,yBAAyBzH,IAC1B,OAAO,KAG3B,GAAIA,EAAG71B,OAAS1U,EAAAC,MAAM2Y,UAAW,CAC/B,IAAIjtB,EAAwC,KAC5C,IAAK4+C,EAAGnwB,KAAKpa,EAAAC,MAAM2Y,cACjBjtB,EAAYxkC,KAAK6qF,yBAAyBzH,IAC1B,OAAO,KAGzB,GAAIA,EAAG71B,OAAS1U,EAAAC,MAAM2Y,UAAW,CAC/B,IAAIvP,EAAiC,KACrC,IAAKkhC,EAAGnwB,KAAKpa,EAAAC,MAAM+X,YAAa,CAE9B,KADA3O,EAAcliD,KAAKkmF,gBAAgB9C,IACjB,OAAO,KAEzB,IAAKA,EAAGnwB,KAAKpa,EAAAC,MAAM+X,YAKjB,OAJA7wD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,KAIX,IAAI0L,EAAY7U,KAAKikF,eAAeb,GACpC,OAAKvuE,EAEE/I,EAAA2F,KAAKwwC,mBACV7+B,EACAohB,EACIA,EAAUG,WACV,KACJud,EACArtC,EACAuuE,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MATD,KAavBvmD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,UAIhBnJ,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,UAIhBnJ,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAGhB,OAAO,MAGTy5E,EAAA3gF,UAAAqoF,iBAAA,SACElH,GAKA,IAAIE,EAAWF,EAAGlzB,SAClB,GAAIkzB,EAAGnwB,KAAKpa,EAAAC,MAAM8X,WAAY,CAC5B,IAAIpsB,EAAYxkC,KAAKkmF,gBAAgB9C,GACrC,IAAK5+C,EAAW,OAAO,KACvB,GAAI4+C,EAAGnwB,KAAKpa,EAAAC,MAAM+X,YAAa,CAC7B,IAAIh8C,EAAY7U,KAAKikF,eAAeb,GACpC,IAAKvuE,EAAW,OAAO,KACvB,IAAIi2E,EAAkC,KACtC,OAAI1H,EAAGnwB,KAAKpa,EAAAC,MAAMqT,SAChB2+B,EAAgB9qF,KAAKikF,eAAeb,IACT,KAEtBt3E,EAAA2F,KAAK4vC,kBACV7c,EACA3vB,EACAi2E,EACA1H,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAGxBvmD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,UAIhBnJ,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAGhB,OAAO,MAGTy5E,EAAA3gF,UAAAuoF,qBAAA,SACEpH,GAKA,IAAIE,EAAWF,EAAGlzB,SAClB,GAAIkzB,EAAGnwB,KAAKpa,EAAAC,MAAM8X,WAAY,CAC5B,IAAIpsB,EAAYxkC,KAAKkmF,gBAAgB9C,GACrC,IAAK5+C,EAAW,OAAO,KACvB,GAAI4+C,EAAGnwB,KAAKpa,EAAAC,MAAM+X,YAAa,CAC7B,GAAIuyB,EAAGnwB,KAAKpa,EAAAC,MAAMgZ,WAAY,CAE5B,IADA,IAAI/O,EAAQ,IAAI/7C,OACRo8E,EAAGnwB,KAAKpa,EAAAC,MAAMiZ,aAAa,CACjC,IAAIg5B,EAAQ/qF,KAAKgrF,gBAAgB5H,GACjC,IAAK2H,EAAO,OAAO,KACnBhoC,EAAMl4C,KAAiBkgF,GAEzB,IAAI/8C,EAAMliC,EAAA2F,KAAKqxC,sBAAsBte,EAAWue,EAAOqgC,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAE7E,OADA68B,EAAGnwB,KAAKpa,EAAAC,MAAM2Y,WACPzjB,EAEPhuC,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,UAIhBnJ,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,UAIhBnJ,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAGhB,OAAO,MAGTy5E,EAAA3gF,UAAA+oF,gBAAA,SACE5H,GAGA,IACIzuE,EACAE,EAFAyuE,EAAWF,EAAGlzB,SAMlB,GAAIkzB,EAAGnwB,KAAKpa,EAAAC,MAAMgT,MAAO,CACvB,IAAI3nB,EAAQnkC,KAAKkmF,gBAAgB9C,GACjC,IAAKj/C,EAAO,OAAO,KACnB,GAAIi/C,EAAGnwB,KAAKpa,EAAAC,MAAM0Y,OAAQ,CAExB,IADA78C,EAAa,IAAI3N,MACVo8E,EAAGzwB,QAAU9Z,EAAAC,MAAMgT,MAAQs3B,EAAGjzB,WAAatX,EAAAC,MAAMmT,SAAWm3B,EAAGjzB,WAAatX,EAAAC,MAAMiZ,YAAY,CAEnG,KADAl9C,EAAY7U,KAAKikF,eAAeb,IAChB,OAAO,KACvBzuE,EAAW9J,KAAKgK,GAElB,OAAO/I,EAAA2F,KAAKwxC,iBAAiB9e,EAAOxvB,EAAYyuE,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAEtEvmD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,UAMX,GAAIi6E,EAAGnwB,KAAKpa,EAAAC,MAAMmT,SAAU,CACjC,GAAIm3B,EAAGnwB,KAAKpa,EAAAC,MAAM0Y,OAAQ,CAExB,IADA78C,EAAa,IAAI3N,MACVo8E,EAAGzwB,QAAU9Z,EAAAC,MAAMgT,MAAQs3B,EAAGjzB,WAAatX,EAAAC,MAAMmT,SAAWm3B,EAAGjzB,WAAatX,EAAAC,MAAMiZ,YAAY,CAEnG,KADAl9C,EAAY7U,KAAKikF,eAAeb,IAChB,OAAO,KACvBzuE,EAAW9J,KAAKgK,GAElB,OAAO/I,EAAA2F,KAAKwxC,iBAAiB,KAAMtuC,EAAYyuE,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAErEvmD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,UAIhBnJ,KAAKwL,MACHI,EAAA/C,eAAeoiF,0BACf7H,EAAGj6E,SAGP,OAAO,MAGTy5E,EAAA3gF,UAAAwoF,oBAAA,SACErH,GAKA,IAAIE,EAAWF,EAAGlzB,SACdvrB,EAAa3kC,KAAKkmF,gBAAgB9C,GACtC,IAAKz+C,EAAY,OAAO,KACxB,IAAIqJ,EAAMliC,EAAA2F,KAAK0xC,qBAAiCxe,EAAYy+C,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAElF,OADA68B,EAAGnwB,KAAKpa,EAAAC,MAAM2Y,WACPzjB,GAGT40C,EAAA3gF,UAAAyoF,kBAAA,SACEtH,GAQA,IACIvoC,EADAyoC,EAAWF,EAAGlzB,SAElB,GAAIkzB,EAAGnwB,KAAKpa,EAAAC,MAAMgZ,WAAY,CAE5B,IADA,IAAIn9C,EAAa,IAAI3N,OACbo8E,EAAGnwB,KAAKpa,EAAAC,MAAMiZ,aAAa,CAEjC,KADAlX,EAAO76C,KAAKikF,eAAeb,IAChB,OAAO,KAClBzuE,EAAW9J,KAAgBgwC,GAE7B,IAAIyI,EAA6C,KAC7CC,EAAsC,KACtCC,EAAwC,KAC5C,GAAI4/B,EAAGnwB,KAAKpa,EAAAC,MAAMiT,OAAQ,CACxB,IAAKq3B,EAAGnwB,KAAKpa,EAAAC,MAAM8X,WAKjB,OAJA5wD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,KAET,IAAKi6E,EAAGpwB,iBAKN,OAJAhzD,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf/B,EAAGj6E,SAEE,KAGT,GADAm6C,EAAgBx3C,EAAA2F,KAAKE,2BAA2ByxE,EAAG5vB,iBAAkB4vB,EAAGj6E,UACnEi6E,EAAGnwB,KAAKpa,EAAAC,MAAM+X,YAKjB,OAJA7wD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,KAET,IAAKi6E,EAAGnwB,KAAKpa,EAAAC,MAAMgZ,WAKjB,OAJA9xD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,KAGT,IADAo6C,EAAkB,IACV6/B,EAAGnwB,KAAKpa,EAAAC,MAAMiZ,aAAa,CAEjC,KADAlX,EAAO76C,KAAKikF,eAAeb,IAChB,OAAO,KAClB7/B,EAAgB14C,KAAgBgwC,IAGpC,GAAIuoC,EAAGnwB,KAAKpa,EAAAC,MAAMuT,SAAU,CAC1B,IAAK+2B,EAAGnwB,KAAKpa,EAAAC,MAAMgZ,WAKjB,OAJA9xD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,KAGT,IADAq6C,EAAoB,IACZ4/B,EAAGnwB,KAAKpa,EAAAC,MAAMiZ,aAAa,CAEjC,KADAlX,EAAO76C,KAAKikF,eAAeb,IAChB,OAAO,KAClB5/B,EAAkB34C,KAAgBgwC,IAGtC,IAAM0I,IAAmBC,EAKvB,OAJAxjD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,SAEP,KAET,IAAI6kC,EAAMliC,EAAA2F,KAAK4xC,mBACb1uC,EACA2uC,EACAC,EACAC,EACA4/B,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAGxB,OADA68B,EAAGnwB,KAAKpa,EAAAC,MAAM2Y,WACPzjB,EAOT,OALEhuC,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAGT,MAGTy5E,EAAA3gF,UAAAqiF,qBAAA,SACElB,EACA7xE,EACAiL,EACA8mE,GAKA,GAAIF,EAAGpwB,iBAAkB,CACvB,IAAIpyD,EAAOkL,EAAA2F,KAAKE,2BAA2ByxE,EAAG5vB,iBAAkB4vB,EAAGj6E,SAC/D2Z,EAA6C,KACjD,GAAIsgE,EAAGnwB,KAAKpa,EAAAC,MAAM4U,UAAW,CAE3B,KADA5qC,EAAiB9iB,KAAKsmF,oBAAoBlD,IACrB,OAAO,KAC5B7xE,GAAS5F,EAAAtJ,YAAYqR,QAEvB,GAAI0vE,EAAGnwB,KAAKpa,EAAAC,MAAMoW,QAAS,CACzB,IAAI/zC,EAAOnb,KAAK4kF,UAAUxB,GAC1B,IAAKjoE,EAAM,OAAO,KAClB,IAAI6yB,EAAMliC,EAAA2F,KAAKK,sBACblR,EACAkiB,EACA3H,EACAqB,EACAjL,EACA6xE,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAGxB,OADA68B,EAAGnwB,KAAKpa,EAAAC,MAAM2Y,WACPzjB,EAEPhuC,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,UAIhBnJ,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf/B,EAAGj6E,SAGP,OAAO,MAGTy5E,EAAA3gF,UAAA0oF,mBAAA,SACEvH,GAKA,IAAIE,EAAWF,EAAGlzB,SACdvrB,EAAa3kC,KAAKkmF,gBAAgB9C,EAAE,IACxC,IAAKz+C,EAAY,OAAO,KACxB,IAAIqJ,EAAMliC,EAAA2F,KAAKqyC,oBAAoBnf,EAAYy+C,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAErE,OADA68B,EAAGnwB,KAAKpa,EAAAC,MAAM2Y,WACPzjB,GAGT40C,EAAA3gF,UAAA2oF,oBAAA,SACExH,GAKA,IAAIE,EAAWF,EAAGlzB,SAClB,GAAIkzB,EAAGnwB,KAAKpa,EAAAC,MAAM8X,WAAY,CAC5B,IAAIjsB,EAAa3kC,KAAKkmF,gBAAgB9C,GACtC,IAAKz+C,EAAY,OAAO,KACxB,GAAIy+C,EAAGnwB,KAAKpa,EAAAC,MAAM+X,YAAa,CAC7B,IAAIh8C,EAAY7U,KAAKikF,eAAeb,GACpC,IAAKvuE,EAAW,OAAO,KACvB,IAAIm5B,EAAMliC,EAAA2F,KAAKuyC,qBAAqBrf,EAAY9vB,EAAWuuE,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAEjF,OADA68B,EAAGnwB,KAAKpa,EAAAC,MAAM2Y,WACPzjB,EAEPhuC,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,UAIhBnJ,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAGhB,OAAO,MAMTy5E,EAAA3gF,UAAAipF,qBAAA,SACE9H,GAGA,IAAI71B,EAAQ61B,EAAGhtE,KAAKyiC,EAAA4S,mBAAmB8G,QACnC+wB,EAAWF,EAAGlzB,SACdi7B,EA4sBR,SAAkCr2E,GAChC,OAAQA,GACN,KAAK+jC,EAAAC,MAAM2U,YAAa,SACxB,KAAK5U,EAAAC,MAAMuU,MAAO,SAClB,KAAKxU,EAAAC,MAAMgW,YACX,KAAKjW,EAAAC,MAAMiW,MACX,KAAKlW,EAAAC,MAAMvqC,KACX,KAAKsqC,EAAAC,MAAMrqC,MACX,KAAKoqC,EAAAC,MAAMwV,UACX,KAAKzV,EAAAC,MAAMyV,YACX,KAAK1V,EAAAC,MAAMoU,OACX,KAAKrU,EAAAC,MAAMkP,KACX,KAAKnP,EAAAC,MAAMoT,OAAQ,UACnB,KAAKrT,EAAAC,MAAM4M,IAAK,UAElB,SA3tBmB0lC,CAAyB79B,GAC1C,GAAc,GAAV49B,EAA+B,CACjC,IAAI/rC,OAAO,EAKX,OAAImO,GAAS1U,EAAAC,MAAM4M,KACjBtG,EAAUp/C,KAAKkmF,gBAAgB9C,EAAE,KAE7BhkC,EAAQtqC,MAAQhJ,EAAAiJ,SAASukC,KACpBxtC,EAAA2F,KAAKgsC,oBACO2B,EAASza,WACTya,EAASr3B,cACTq3B,EAASpgC,UAC1BokE,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,OAGxBvmD,KAAKwL,MACHI,EAAA/C,eAAeyU,wBACf8lE,EAAGj6E,SAGA,MAdc,MAgBrBi2C,EAAUp/C,KAAKkmF,gBAAgB9C,EAAI+H,KAKjC59B,GAAS1U,EAAAC,MAAMwV,WAAaf,GAAS1U,EAAAC,MAAMyV,aAE3CnP,EAAQtqC,MAAQhJ,EAAAiJ,SAASqkC,YACzBgG,EAAQtqC,MAAQhJ,EAAAiJ,SAASwkC,eACzB6F,EAAQtqC,MAAQhJ,EAAAiJ,SAAS0kC,gBAEzBz5C,KAAKwL,MACHI,EAAA/C,eAAewiF,0FACfjsC,EAAQj2C,OAIP2C,EAAA2F,KAAK6tC,4BAA4BiO,EAAOnO,EAASgkC,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,OAhBvD,KAmBzB,IAAIjlB,EAA0B,KAC9B,OAAQisB,GAEN,KAAK1U,EAAAC,MAAME,KAAM,OAAOltC,EAAA2F,KAAKksC,qBAAqBylC,EAAGj6E,SACrD,KAAK0vC,EAAAC,MAAMG,KAAM,OAAOntC,EAAA2F,KAAKwtC,qBAAqBmkC,EAAGj6E,SACrD,KAAK0vC,EAAAC,MAAMI,MAAO,OAAOptC,EAAA2F,KAAKqrC,sBAAsBsmC,EAAGj6E,SAIvD,KAAK0vC,EAAAC,MAAM8X,UAGT,GAAIwyB,EAAGnwB,KAAKpa,EAAAC,MAAM+X,YAChB,OAAO7wD,KAAKioF,8BACV7E,EACAt3E,EAAA2F,KAAK6pC,gCAAgC8nC,EAAGj6E,MAAMm6E,IAC9C,GAAE,GAIN,IAAInwB,EAAQiwB,EAAGlwB,OACXo4B,GAAQ,EACZ,GACE,OAAQlI,EAAGhtE,KAAKyiC,EAAA4S,mBAAmB8G,SAGjC,KAAK1Z,EAAAC,MAAM2U,YAET,OADA21B,EAAG7vB,MAAMJ,GACFnzD,KAAKgoF,wBAAwB5E,GAGtC,KAAKvqC,EAAAC,MAAMM,WAET,OADAgqC,EAAG5vB,iBACK4vB,EAAGhtE,QAGT,KAAKyiC,EAAAC,MAAM+X,WACT,IACGuyB,EAAGnwB,KAAKpa,EAAAC,MAAM0Y,SACd4xB,EAAGnwB,KAAKpa,EAAAC,MAAM4Y,oBACf,CACA45B,GAAQ,EACR,MAKJ,KAAKzyC,EAAAC,MAAM0Y,MAET,OADA4xB,EAAG7vB,MAAMJ,GACFnzD,KAAKgoF,wBAAwB5E,GAGtC,KAAKvqC,EAAAC,MAAM6Y,SACT,GACEyxB,EAAGnwB,KAAKpa,EAAAC,MAAM0Y,QACd4xB,EAAGnwB,KAAKpa,EAAAC,MAAMwM,QACd89B,EAAGnwB,KAAKpa,EAAAC,MAAM+X,YAGd,OADAuyB,EAAG7vB,MAAMJ,GACFnzD,KAAKgoF,wBAAwB5E,GAEtCkI,GAAQ,EACR,MAEF,KAAKzyC,EAAAC,MAAMwM,MACT,MAIF,QACEgmC,GAAQ,EAIZ,MAGF,QACEA,GAAQ,SAILA,GAKT,OAJAlI,EAAG7vB,MAAMJ,IAGT7xB,EAAOthC,KAAKkmF,gBAAgB9C,IAEvBA,EAAGnwB,KAAKpa,EAAAC,MAAM+X,YAOZ/kD,EAAA2F,KAAKssC,8BAA8Bzc,EAAM8hD,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,OANpEvmD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,MANS,KAWpB,KAAK0vC,EAAAC,MAAM8Y,YAET,IADA,IAAInW,EAAqB,IAAIz0C,OACrBo8E,EAAGnwB,KAAKpa,EAAAC,MAAM+Y,eAAe,CACnC,GAAIuxB,EAAGzwB,QAAU9Z,EAAAC,MAAMwM,MACrBhkB,EAAO,UAGP,KADAA,EAAOthC,KAAKkmF,gBAAgB9C,EAAI,IACrB,OAAO,KAGpB,GADA3nC,EAAmB5wC,KAAKy2B,IACnB8hD,EAAGnwB,KAAKpa,EAAAC,MAAMwM,OAAQ,CACzB,GAAI89B,EAAGnwB,KAAKpa,EAAAC,MAAM+Y,cAChB,MAMA,OAJA7xD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,MAIb,OAAO2C,EAAA2F,KAAK8pC,6BAA6BE,EAAoB2nC,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAGrF,KAAK1N,EAAAC,MAAMgZ,UAKT,IAJA,IAAIy5B,EAAWnI,EAAGlzB,SACdxqB,EAAQ,IAAI1+B,MACZ8S,EAAS,IAAI9S,MACbpG,OAAI,GACAwiF,EAAGnwB,KAAKpa,EAAAC,MAAMiZ,aAAa,CACjC,GAAKqxB,EAAGpwB,iBAWNpyD,EAAOkL,EAAA2F,KAAKE,2BAA2ByxE,EAAG5vB,iBAAkB4vB,EAAGj6E,aAXvC,CACxB,IAAKi6E,EAAGnwB,KAAKpa,EAAAC,MAAM4X,eAKjB,OAJA1wD,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf/B,EAAGj6E,SAEE,MAETvI,EAAOkL,EAAA2F,KAAKE,2BAA2ByxE,EAAG90C,aAAc80C,EAAGj6E,UACtDgyC,UAAW,EAKlB,GADAzV,EAAM76B,KAAKjK,GACPwiF,EAAGnwB,KAAKpa,EAAAC,MAAM0Y,OAAQ,CACxB,IAAIlwD,EAAQtB,KAAKkmF,gBAAgB9C,EAAI,GACrC,IAAK9hF,EAAO,OAAO,KACnBwY,EAAOjP,KAAKvJ,OACP,IAAKV,EAAKu6C,SAOf,OAJAn7C,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,KANP2Q,EAAOjP,KAAKjK,GAQd,IAAKwiF,EAAGnwB,KAAKpa,EAAAC,MAAMwM,OAAQ,CACzB,GAAI89B,EAAGnwB,KAAKpa,EAAAC,MAAMiZ,YAChB,MAMA,OAJA/xD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,MAIb,OAAO2C,EAAA2F,KAAKosC,8BAA8BnY,EAAO5rB,EAAQspE,EAAGj6E,MAAMoiF,EAAUnI,EAAG78B,MAGjF,KAAK1N,EAAAC,MAAM4U,SACT,IAAI9R,EAAS57C,KAAK4kF,UAAUxB,GAC5B,OAAKxnC,EACAwnC,EAAGnwB,KAAKpa,EAAAC,MAAM6U,cAOnBrsB,EAAOthC,KAAKkmF,gBAAgB9C,EAAE,KAEvBt3E,EAAA2F,KAAKiqC,0BACV5vC,EAAAq5C,cAAcwnB,OACdrrC,EACAsa,EACAwnC,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MALN,MAPhBvmD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,MANW,KAiBtB,KAAK0vC,EAAAC,MAAMM,WACT,IAAIvnC,EAAa/F,EAAA2F,KAAKE,2BAA2ByxE,EAAG5vB,iBAAkB4vB,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAC5F,OAAI68B,EAAGzwB,MAAK,IAAS9Z,EAAAC,MAAM4Y,oBAAuB0xB,EAAG/yB,mBAiB9Cx+C,EAhBE7R,KAAKioF,8BACV7E,EACAt3E,EAAA2F,KAAK6pC,gCAAgC8nC,EAAGj6E,MAAMm6E,IAC9C,CACEx3E,EAAA2F,KAAK2oC,gBACHvoC,EACA/F,EAAA2F,KAAKM,kBAAkBF,EAAW1I,MAAMozD,OACxC,KACAzwD,EAAAw4C,cAAc2H,QACdp6C,EAAW1I,QAEd,EAEDm6E,GAKN,KAAKzqC,EAAAC,MAAMgN,KACT,OAAOh6C,EAAA2F,KAAKstC,qBAAqBqkC,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAEzD,KAAK1N,EAAAC,MAAMl6B,YACT,OAAO9S,EAAA2F,KAAKgrC,4BAA4B2mC,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAEhE,KAAK1N,EAAAC,MAAMY,MAOT,OANI0pC,EAAGzwB,QAAU9Z,EAAAC,MAAMkY,KAAOoyB,EAAGjzB,WAAatX,EAAAC,MAAM8X,WAClD5wD,KAAKwL,MACHI,EAAA/C,eAAe2iF,6DACfpI,EAAGj6E,SAGA2C,EAAA2F,KAAKotC,sBAAsBukC,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAE1D,KAAK1N,EAAAC,MAAM4X,cACT,OAAO5kD,EAAA2F,KAAKktC,8BAA8BykC,EAAG90C,aAAc80C,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAEnF,KAAK1N,EAAAC,MAAMyY,eACT,OAAOzlD,EAAA2F,KAAK8rC,+BAA+B6lC,EAAG/uB,cAAe+uB,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAErF,KAAK1N,EAAAC,MAAMiY,aACT,OAAOjlD,EAAA2F,KAAKurC,6BAA6BomC,EAAG1tB,YAAa0tB,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAIjF,KAAK1N,EAAAC,MAAMsV,MACT,IAAIq9B,EAAgBrI,EAAGpvB,oBACvB,OAAKovB,EAAGnwB,KAAKpa,EAAAC,MAAMsV,OAOZtiD,EAAA2F,KAAK0sC,8BACVstC,EACArI,EAAGjvB,kBACHivB,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,OATtBvmD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,MAQX,KAAK0vC,EAAAC,MAAMj+B,SACT,OAAO7a,KAAKgoF,wBAAwB5E,GAEtC,KAAKvqC,EAAAC,MAAM/9B,MACT,OAAO/a,KAAKqoF,qBAAqBjF,GAEnC,QAYE,OAXI71B,GAAS1U,EAAAC,MAAM4Z,UACjB1yD,KAAKwL,MACHI,EAAA/C,eAAe+qD,uBACfwvB,EAAGj6E,MAAMm6E,IAGXtjF,KAAKwL,MACHI,EAAA/C,eAAe6iF,oBACftI,EAAGj6E,SAGA,OAKby5E,EAAA3gF,UAAA0pF,qCAAA,SACEvI,GAKA,IAAIjwB,EAAQiwB,EAAGlwB,OACf,IAAKkwB,EAAGnwB,KAAKpa,EAAAC,MAAM4U,UAAW,OAAO,KACrC,IAAI3lC,EAAyC,KAC7C,EAAG,CACD,GAAIq7D,EAAGzwB,SAAW9Z,EAAAC,MAAM6U,YACtB,MAEF,IAAIxyC,EAAOnb,KAAK4kF,UAAUxB,GAAI,GAAM,GACpC,IAAKjoE,EAEH,OADAioE,EAAG7vB,MAAMJ,GACF,KAEJprC,EACAA,EAAcld,KAAKsQ,GADJ4M,EAAgB,CAAE5M,SAE/BioE,EAAGnwB,KAAKpa,EAAAC,MAAMwM,QACvB,OAAI89B,EAAGnwB,KAAKpa,EAAAC,MAAM6U,cAAgBy1B,EAAGnwB,KAAKpa,EAAAC,MAAM8X,WACvC7oC,GAETq7D,EAAG7vB,MAAMJ,GACF,OAGTyvB,EAAA3gF,UAAA2jF,eAAA,SACExC,GAMA,IADA,IAAIxoC,EAAO,IAAI5zC,OACPo8E,EAAGnwB,KAAKpa,EAAAC,MAAM+X,aAAa,CACjC,IAAIvvB,EAAOthC,KAAKkmF,gBAAgB9C,EAAI,GACpC,IAAK9hD,EAAM,OAAO,KAElB,GADAsZ,EAAK/vC,KAAKy2B,IACL8hD,EAAGnwB,KAAKpa,EAAAC,MAAMwM,OAAQ,CACzB,GAAI89B,EAAGnwB,KAAKpa,EAAAC,MAAM+X,YAChB,MAMA,OAJA7wD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,MAIb,OAAOyxC,GAGTgoC,EAAA3gF,UAAAikF,gBAAA,SACE9C,EACA+H,QAAA,IAAAA,MAAA,GAEA3iF,OAAiB,GAAV2iF,GAEP,IAAI7pD,EAAOthC,KAAKkrF,qBAAqB9H,GACrC,IAAK9hD,EAAM,OAAO,KAOlB,IAJA,IACIisB,EAEAq+B,EAHAtI,GAFJhiD,EAAOthC,KAAK6rF,yBAAyBzI,EAAI9hD,IAErBn4B,MAAMoB,MAEtB6L,EAA0B,MAG3Bw1E,EAAiBE,EAAoBv+B,EAAQ61B,EAAGzwB,UAAYw4B,GAC7D,CAEA,OADA/H,EAAGhtE,OACKm3C,GAEN,KAAK1U,EAAAC,MAAM6S,GACT,IAAI/P,EAAS57C,KAAK4kF,UAAUxB,GAC5B,IAAKxnC,EAAQ,OAAO,KACpBta,EAAOx1B,EAAA2F,KAAKiqC,0BACV5vC,EAAAq5C,cAAcwG,GACdrqB,EACAsa,EACAwnC,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAExB,MAEF,KAAK1N,EAAAC,MAAMgW,YACTxtB,EAAOx1B,EAAA2F,KAAKiqC,0BACV5vC,EAAAq5C,cAAcgV,QACd74B,EACA,KACA8hD,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAExB,MAGF,KAAK1N,EAAAC,MAAM0M,WACT,IAAInI,EAASr9C,KAAK4kF,UAAUxB,GAC5B,IAAK/lC,EAAQ,OAAO,KACpB/b,EAAOx1B,EAAA2F,KAAK2rC,2BACV9b,EACA+b,EACA+lC,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAExB,MAGF,KAAK1N,EAAAC,MAAM8Y,YAET,KADAx7C,EAAOpW,KAAKkmF,gBAAgB9C,IACjB,OAAO,KAClB,IAAKA,EAAGnwB,KAAKpa,EAAAC,MAAM+Y,cAKjB,OAJA7xD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,KAETm4B,EAAOx1B,EAAA2F,KAAKkrC,8BACVrb,EACAlrB,EACAgtE,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAExB,MAGF,KAAK1N,EAAAC,MAAMwV,UACX,KAAKzV,EAAAC,MAAMyV,YAEPjtB,EAAKxsB,MAAQhJ,EAAAiJ,SAASqkC,YACtB9X,EAAKxsB,MAAQhJ,EAAAiJ,SAASwkC,eACtBjY,EAAKxsB,MAAQhJ,EAAAiJ,SAAS0kC,gBAEtBz5C,KAAKwL,MACHI,EAAA/C,eAAewiF,0FACf/pD,EAAKn4B,OAGTm4B,EAAOx1B,EAAA2F,KAAK0tC,6BACVoO,EACAjsB,EACA8hD,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAExB,MAGF,KAAK1N,EAAAC,MAAM6Y,SACT,IAAInT,EAASx+C,KAAKkmF,gBAAgB9C,GAClC,IAAK5kC,EAAQ,OAAO,KACpB,IAAK4kC,EAAGnwB,KAAKpa,EAAAC,MAAM0Y,OAKjB,OAJAxxD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEP,KAET,IAAIs1C,EAASz+C,KAAKkmF,gBAAgB9C,EAAI+H,EAAU,EAC5C,EACD,GAEH,IAAK1sC,EAAQ,OAAO,KACpBnd,EAAOx1B,EAAA2F,KAAK8sC,wBACVjd,EACAkd,EACAC,EACA2kC,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAExB,MAGF,KAAK1N,EAAAC,MAAMwM,MACT,IAAIymC,EAA2B,CAAEzqD,GACjC,EAAG,CAED,KADAA,EAAOthC,KAAKkmF,gBAAgB9C,EAAI,IACrB,OAAO,KAClB2I,EAAWlhF,KAAKy2B,SACT8hD,EAAGnwB,KAAKpa,EAAAC,MAAMwM,QACvBhkB,EAAOx1B,EAAA2F,KAAK6qC,sBAAsByvC,EAAY3I,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MACpE,MAEF,QAGE,GAAIgH,GAAS1U,EAAAC,MAAMkY,IAAK,CACtB,GAAIoyB,EAAGpwB,iBACL58C,EAAOtK,EAAA2F,KAAKE,2BAA2ByxE,EAAG5vB,iBAAkB4vB,EAAGj6E,cAO/D,KALAiN,EAAOpW,KAAKkmF,gBAAgB9C,EAC1B4I,EAAmBz+B,GACfq+B,EACAA,EAAiB,IAEZ,OAAO,KAEpB,GAAIx1E,EAAKtB,MAAQhJ,EAAAiJ,SAASqkC,WACxB9X,EAAOx1B,EAAA2F,KAAKwsC,+BACV3c,EACsBlrB,EACtBgtE,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,UAEnB,IAAInwC,EAAKtB,MAAQhJ,EAAAiJ,SAASukC,KAQ/B,OAJAt5C,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf/uE,EAAKjN,OAEA,KANP,KADAm4B,EAAOthC,KAAKisF,iBAAiB7I,EAAIE,EAAUhiD,EAAsBlrB,IACtD,OAAO,UAUf,CAML,KALAA,EAAOpW,KAAKkmF,gBAAgB9C,EAC1B4I,EAAmBz+B,GACfq+B,EACAA,EAAiB,IAEZ,OAAO,KAClBtqD,EAAOx1B,EAAA2F,KAAKqqC,uBAAuByR,EAAOjsB,EAAMlrB,EAAMgtE,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,OAKlFjlB,EAAOthC,KAAK6rF,yBAAyBzI,EAAI9hD,GAE3C,OAAOA,GAGDshD,EAAA3gF,UAAAgqF,iBAAR,SACE7I,EACAE,EACAhiD,EACA9gC,GAEA,IAAI0rF,EAAS1rF,EAAKmkC,WAClB,OAAQunD,EAAOp3E,MACb,KAAKhJ,EAAAiJ,SAASqkC,WACZ54C,EAAKmkC,WAAa74B,EAAA2F,KAAKwsC,+BACrB3c,EACsB4qD,EACtB9I,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,MAExB,MAEF,KAAKz6C,EAAAiJ,SAASukC,KACZ,IAAI6yC,EAAQnsF,KAAKisF,iBAAiB7I,EAAIE,EAAUhiD,EAAsB4qD,GACtE,IAAKC,EAAO,OAAO,KACnB3rF,EAAKmkC,WAAawnD,EAClB3rF,EAAK2I,MAAQi6E,EAAGj6E,MAAMm6E,EAAUF,EAAG78B,KACnC,MAEF,QAKE,OAJAvmD,KAAKwL,MACHI,EAAA/C,eAAes8E,oBACf3kF,EAAK2I,OAEA,KAGX,OAAO3I,GAGDoiF,EAAA3gF,UAAA4pF,yBAAR,SACEzI,EACA9hD,GAEA,GAAIx1B,EAAAqtC,eAAe7X,EAAKxsB,MAEtB,IADA,IAAIiT,EAAyC,KAE3Cq7D,EAAGnwB,KAAKpa,EAAAC,MAAM8X,YAEd9kD,EAAA6tC,sBAAsBrY,EAAKxsB,OAA6E,QAAnEiT,EAAgB/nB,KAAK2rF,qCAAqCvI,KAC/F,CACA,IAAIxoC,EAAO56C,KAAK4lF,eAAexC,GAC/B,IAAKxoC,EAAM,MACXtZ,EAAOx1B,EAAA2F,KAAKwqC,qBACV3a,EACAvZ,EACA6yB,EACAwoC,EAAGj6E,MAAMm4B,EAAKn4B,MAAMoB,MAAO64E,EAAG78B,MAIpC,OAAOjlB,GAITshD,EAAA3gF,UAAAuhF,cAAA,SAAcJ,GAGZ,IAFAA,EAAGzwB,MAAK,GACJywB,EAAG/yB,oBAAoB+yB,EAAGhtE,SAC3B,CACD,IAAI+5C,EAAYizB,EAAGzwB,MAAK,GACxB,GACExC,GAAatX,EAAAC,MAAM4Z,WACnBvC,GAAatX,EAAAC,MAAM2Y,UACnB,CACA2xB,EAAGhtE,OACH,MAEF,GAAIgtE,EAAG/yB,mBAAoB,MAC3B,OAAQ+yB,EAAGhtE,QACT,KAAKyiC,EAAAC,MAAMM,WACTgqC,EAAG5vB,iBACH,MAEF,KAAK3a,EAAAC,MAAM4X,cACT0yB,EAAG90C,aACH,MAEF,KAAKuK,EAAAC,MAAMyY,eACT6xB,EAAG/uB,cACH,MAEF,KAAKxb,EAAAC,MAAMiY,aACTqyB,EAAG1tB,YACH,MAEF,KAAK7c,EAAAC,MAAMgZ,UACT9xD,KAAKosF,UAAUhJ,MAQvBR,EAAA3gF,UAAAmqF,UAAA,SAAUhJ,GAER,IAAIiJ,EAAQ,EACRf,GAAQ,EACZ,GACE,OAAQlI,EAAGhtE,QACT,KAAKyiC,EAAAC,MAAM4Z,UACT1yD,KAAKwL,MACHI,EAAA/C,eAAewoD,YACf+xB,EAAGj6E,QAAS,KAEdmiF,GAAQ,EACR,MAEF,KAAKzyC,EAAAC,MAAMgZ,YACPu6B,EACF,MAEF,KAAKxzC,EAAAC,MAAMiZ,aACPs6B,IACUf,GAAQ,GACpB,MAEF,KAAKzyC,EAAAC,MAAMM,WACTgqC,EAAG5vB,iBACH,MAEF,KAAK3a,EAAAC,MAAM4X,cACT0yB,EAAG90C,aACH,MAEF,KAAKuK,EAAAC,MAAMyY,eACT6xB,EAAG/uB,cACH,MAEF,KAAKxb,EAAAC,MAAMiY,aACTqyB,EAAG1tB,mBAIA41B,IAEb1I,EAhoHA,CAA4Bh3E,EAAAX,mBAgrH5B,SAAS6gF,EAAoBh3E,GAC3B,OAAQA,GACN,KAAK+jC,EAAAC,MAAMwM,MAAO,SAClB,KAAKzM,EAAAC,MAAMoW,OACX,KAAKrW,EAAAC,MAAMqW,YACX,KAAKtW,EAAAC,MAAMsW,aACX,KAAKvW,EAAAC,MAAMwW,yBACX,KAAKzW,EAAAC,MAAMuW,gBACX,KAAKxW,EAAAC,MAAMyW,aACX,KAAK1W,EAAAC,MAAM0W,eACX,KAAK3W,EAAAC,MAAM2W,yBACX,KAAK5W,EAAAC,MAAM4W,+BACX,KAAK7W,EAAAC,MAAM6W,2CACX,KAAK9W,EAAAC,MAAM8W,iBACX,KAAK/W,EAAAC,MAAMgX,aACX,KAAKjX,EAAAC,MAAM+W,WAAY,SACvB,KAAKhX,EAAAC,MAAM6Y,SAAU,SACrB,KAAK9Y,EAAAC,MAAMmW,QAAS,SACpB,KAAKpW,EAAAC,MAAMkW,oBAAqB,SAChC,KAAKnW,EAAAC,MAAM8V,IAAK,SAChB,KAAK/V,EAAAC,MAAM+V,MAAO,SAClB,KAAKhW,EAAAC,MAAM6V,UAAW,UACtB,KAAK9V,EAAAC,MAAMgV,cACX,KAAKjV,EAAAC,MAAMiV,mBACX,KAAKlV,EAAAC,MAAMkV,qBACX,KAAKnV,EAAAC,MAAMmV,0BAA2B,UACtC,KAAKpV,EAAAC,MAAM6S,GACX,KAAK9S,EAAAC,MAAM0T,GACX,KAAK3T,EAAAC,MAAM0M,WACX,KAAK3M,EAAAC,MAAM4U,SACX,KAAK7U,EAAAC,MAAM6U,YACX,KAAK9U,EAAAC,MAAM8U,gBACX,KAAK/U,EAAAC,MAAM+U,mBAAoB,UAC/B,KAAKhV,EAAAC,MAAM0V,kBACX,KAAK3V,EAAAC,MAAM2V,wBACX,KAAK5V,EAAAC,MAAM4V,oCAAqC,UAChD,KAAK7V,EAAAC,MAAMvqC,KACX,KAAKsqC,EAAAC,MAAMrqC,MAAO,UAClB,KAAKoqC,EAAAC,MAAMqV,SACX,KAAKtV,EAAAC,MAAMsV,MACX,KAAKvV,EAAAC,MAAMuV,QAAS,UACpB,KAAKxV,EAAAC,MAAMoV,kBAAmB,UAC9B,KAAKrV,EAAAC,MAAMwV,UACX,KAAKzV,EAAAC,MAAMyV,YAAa,UACxB,KAAK1V,EAAAC,MAAMkY,IACX,KAAKnY,EAAAC,MAAM4M,IACX,KAAK7M,EAAAC,MAAM8Y,YACX,KAAK/Y,EAAAC,MAAMgW,YAAa,UAE1B,SAIF,SAASk9B,EAAmBl3E,GAC1B,OAAQA,GACN,KAAK+jC,EAAAC,MAAMoW,OACX,KAAKrW,EAAAC,MAAMqW,YACX,KAAKtW,EAAAC,MAAMsW,aACX,KAAKvW,EAAAC,MAAMwW,yBACX,KAAKzW,EAAAC,MAAMuW,gBACX,KAAKxW,EAAAC,MAAMyW,aACX,KAAK1W,EAAAC,MAAM0W,eACX,KAAK3W,EAAAC,MAAM2W,yBACX,KAAK5W,EAAAC,MAAM4W,+BACX,KAAK7W,EAAAC,MAAM6W,2CACX,KAAK9W,EAAAC,MAAM8W,iBACX,KAAK/W,EAAAC,MAAMgX,aACX,KAAKjX,EAAAC,MAAM+W,WACX,KAAKhX,EAAAC,MAAM6Y,SACX,KAAK9Y,EAAAC,MAAMoV,kBAAmB,OAAO,EACrC,QAAS,OAAO,GAtvHPxuD,EAAAkjF,SAmoHb,SAAkB0J,GAChBA,IAAA,eACAA,IAAA,iBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,8BACAA,IAAA,wBACAA,IAAA,4BACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,oCACAA,IAAA,kCACAA,IAAA,gCACAA,IAAA,kCACAA,IAAA,gBACAA,IAAA,gCACAA,IAAA,wBAtBF,CAAkB5sF,EAAA4sF,aAAA5sF,EAAA4sF,WAAU,2HCttH5BnsF,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IAEA,IAAAioD,EAAAjoD,EAAA,GAEAioD,EAAAxpB,OAAO38B,UAAUssC,OAAS,WACxB,OAAOg+C,SAASC,WAAWxsF,KAAK+kB,KAAK0nE,eAGvCrkC,EAAAxpB,OAAO38B,UAAUusC,QAAU,WACzB,OAAO+9C,SAASC,WAAWxsF,KAAK+kB,KAAK2nE,+BCpBvC,SAAAjxE,GAEA,MAAA8wE,EAAA9wE,EAAAkxE,UAAoCxsF,EAAQ,IAG5C,QAAAyB,KAFA6Z,EAAA8wE,WAEAA,GACA3qF,EAAAg/C,WAAA,cAAAh/C,EAAAg/C,WAAA,gBAAAnlC,EAAA7Z,GAAA2qF,EAAA3qF,IAKA6Z,EAAAmxE,kBAAAL,EAAAM,QACApxE,EAAAqxE,cAAAP,EAAAQ,MACAtxE,EAAAuxE,cAAAT,EAAAU,SACAxxE,EAAAyxE,QAAA,SAAA1qD,EAAAoV,GAAqC20C,EAAAY,OAAA3qD,GAAAoV,GACrCn8B,EAAA2xE,OAAA,SAAA5qD,GAA+B,OAAA+pD,EAAAY,OAAA3qD,qCCf/B7iC,EAAAD,QAAAO,oBCAA,SAAAwb,GAEA,IAAA4xE,EAAA,oBAAA/2B,qBAAA,IAAA76C,MAAA1b,KAEAstF,EAAA/nF,WAAA,EACA+nF,EAAA7nF,eAAA,EACA6nF,EAAA5nF,gBAAA,EACA4nF,EAAA3nF,mBAAA,EACA2nF,EAAA1nF,iBAAA,EACA0nF,EAAAznF,4BAAA,EACAynF,EAAAxnF,4BAAA,EACAwnF,EAAAvnF,yBAAA,EACAunF,EAAAtnF,kBAAA,EACAsnF,EAAArnF,qBAAA,EAEA,IAAAa,EAAA,IAAAymF,aAAA,GACA7mF,EAAA,IAAA8mF,YAAA1mF,EAAA43B,QA2IA,SAAA+uD,IACAn0E,MAAAo0E,kBACAp0E,MAAAo0E,kBAAAztF,KAAAwtF,GAEAxtF,KAAAw8E,MAAAx8E,KAAAY,KAAA,KAAAZ,KAAAkJ,QAAA,UAAAmQ,OAAAmjE,MAWA,SAAAkR,EAAAxkF,GACAlJ,KAAAkJ,WAAA,mBACAmQ,MAAAo0E,kBACAp0E,MAAAo0E,kBAAAztF,KAAA0tF,GAEA1tF,KAAAw8E,MAAAx8E,KAAAY,KAAA,KAAAZ,KAAAkJ,QAAA,UAAAmQ,OAAAmjE,MA7JAz7E,OAAA4sF,iBACAN,EAAA,YAAA/rF,GAA0C,OAAAA,GAAA,QAC1C,CACAg8E,UAAA,CAAgBh8E,OAAA,IAAAssF,UAAA,GAChB3+C,UAAA,CAAgB3tC,MAAA,IAAAssF,UAAA,KAGhB7sF,OAAA4sF,iBACAN,EAAA,aAAA/rF,GAA4C,OAAAA,GAAA,QAC5C,CACAg8E,UAAA,CAAgBh8E,OAAA,MAAAssF,UAAA,GAChB3+C,UAAA,CAAgB3tC,MAAA,MAAAssF,UAAA,KAGhB7sF,OAAA4sF,iBACAN,EAAA,IAAAA,EAAA,eAAA/rF,GAAmE,SAAAA,GACnE,CACAg8E,UAAA,CAAgBh8E,OAAA,WAAAssF,UAAA,GAChB3+C,UAAA,CAAgB3tC,MAAA,WAAAssF,UAAA,KAGhB7sF,OAAA4sF,iBACAN,EAAA,YAAA/rF,GAA0C,WAAAA,GAC1C,CACAg8E,UAAA,CAAgBh8E,MAAA,EAAAssF,UAAA,GAChB3+C,UAAA,CAAgB3tC,MAAA,IAAAssF,UAAA,KAGhB7sF,OAAA4sF,iBACAN,EAAA,aAAA/rF,GAA4C,aAAAA,GAC5C,CACAg8E,UAAA,CAAgBh8E,MAAA,EAAAssF,UAAA,GAChB3+C,UAAA,CAAgB3tC,MAAA,MAAAssF,UAAA,KAGhB7sF,OAAA4sF,iBACAN,EAAA,IAAAA,EAAA,eAAA/rF,GAAmE,OAAAA,IAAA,GACnE,CACAg8E,UAAA,CAAgBh8E,MAAA,EAAAssF,UAAA,GAChB3+C,UAAA,CAAgB3tC,MAAA,WAAAssF,UAAA,KAGhB7sF,OAAA4sF,iBACAN,EAAA,cAAA/rF,GAA8C,QAAAA,GAC9C,CACAg8E,UAAA,CAAgBh8E,OAAA,EAAAssF,UAAA,GAChB3+C,UAAA,CAAgB3tC,OAAA,EAAAssF,UAAA,KAGhB7sF,OAAA4sF,iBACAN,EAAA,aAAA/rF,GAA4C,OAAA4F,KAAA2mF,OAAAvsF,IAC5C,CACAwsF,QAAA,CAAgBxsF,MAAA4F,KAAA2mF,OAAA,cAAAD,UAAA,GAChBtQ,UAAA,CAAgBh8E,MAAA4F,KAAA2mF,OAAA,eAAAD,UAAA,GAChB3+C,UAAA,CAAgB3tC,MAAA4F,KAAA2mF,OAAA,cAAAD,UAAA,GAChBG,iBAAA,CAAwBzsF,MAAA4F,KAAA2mF,OAAA,gBAAAD,UAAA,GACxBI,iBAAA,CAAwB1sF,OAAA,SAAAssF,UAAA,GACxBK,iBAAA,CAAwB3sF,MAAA,SAAAssF,UAAA,KAGxB7sF,OAAA4sF,iBACAN,EAAA,aAAA/rF,GAA4C,OAAAA,GAC5C,CACAwsF,QAAA,CAAgBxsF,MAAA,sBAAAssF,UAAA,GAChBtQ,UAAA,CAAgBh8E,MAAA,OAAAssF,UAAA,GAChB3+C,UAAA,CAAgB3tC,MAAA,uBAAAssF,UAAA,GAChBG,iBAAA,CAAwBzsF,MAAA,wBAAAssF,UAAA,GACxBI,iBAAA,CAAwB1sF,OAAA,iBAAAssF,UAAA,GACxBK,iBAAA,CAAwB3sF,MAAA,iBAAAssF,UAAA,KAGxBP,EAAA,IAAAnmF,KAAAgnF,MAEAb,EAAA,aAAA/rF,GACA,IAAAZ,EAAAwG,KAAAgnF,MAAA5sF,MACA,OAAAA,EAAA,GAAAZ,KAGA2sF,EAAA,gBAAA/rF,GAGA,kBADAA,GAAA,WADAA,OAAA,gBACAA,IAAA,eACAA,IAAA,oBAGA+rF,EAAA,cAAA/rF,EAAAomC,GAEA,OAAApmC,IADAomC,GAAA,IACApmC,IAAA,GAAAomC,GAGA2lD,EAAA,cAAA/rF,EAAAomC,GAEA,OAAApmC,KADAomC,GAAA,IACApmC,GAAA,GAAAomC,GAGA2lD,EAAA,IAAAnmF,KAAAinF,IAEAd,EAAA,IAAAnmF,KAAAy3D,IAEA0uB,EAAA,IAAAnmF,KAAA61E,IAEAsQ,EAAA,KAAAnmF,KAAAuhD,KAEA4kC,EAAA,MAAAnmF,KAAAknF,MAGAf,EAAA,iBAAA/rF,GACA,WAAA4F,KAAAinF,IAAA7sF,EAAA4F,KAAAmnF,MAAA/sF,IACA,EAAA4F,KAAAonF,MAAA,GAAAhtF,GAEA4F,KAAAonF,MAAAhtF,IAGA+rF,EAAA,gBAAAroD,EAAAC,EAAAT,GACA,OAAAA,EAAAQ,EAAAC,GAGAooD,EAAA,KAAAnmF,KAAAqnF,KAEAlB,EAAA,MAAAnmF,KAAAmnF,MAEAhB,EAAA,kBAAAvlF,EAAA0mF,GACA,OAAAtnF,KAAAinF,IAAArmF,GAAAZ,KAAAunF,KAAAD,IAGAnB,EAAA,eAAA/rF,GACA,IAAAyuD,EAAAzuD,GAAA,WACA0uD,GAAA,SAAA1uD,IAAA,EAIA,OAFAyuD,GADAzuD,EAAAyuD,EAAAC,IACA,WACAA,GAAA,MAAA1uD,IAAA,KAIA+rF,EAAA,iBAAA/rF,GACA,OAAAA,GAAA,QAAAA,GAAA,iBAAAA,GAUAksF,EAAAvrF,UAAAlB,OAAAY,OAAA0X,MAAApX,WACAurF,EAAAvrF,UAAArB,KAAA,mBACA4sF,EAAAvrF,UAAAiH,QAAA,cAEAmkF,EAAA,uBACA,UAAAG,GAWAE,EAAAzrF,UAAAlB,OAAAY,OAAA0X,MAAApX,WACAyrF,EAAAzrF,UAAArB,KAAA,iBAEAysF,EAAA,gBAAAqB,EAAAxlF,GACA,GAAAwlF,EAAA,OAAAA,EACA,UAAAhB,EAAAxkF,IAGAmkF,EAAA,oBAAA/rF,GACA,OAAAA,GAGA+rF,EAAA,kBAAA5+C,EAAAkgD,GACA,SAAAC,SAAAngD,OAAAogD,IAGA9nF,OAAA,uBAAAsxC,GACA,OAAAtxC,OAAAgtD,aAAA9xC,MAAAlb,OAAAsxC,IAGAtxC,OAAA,wBAAAsxC,GACA,OAAAtxC,OAAA+nF,cAAA7sE,MAAAlb,OAAAsxC,IAGAg1C,EAAA,UAAA0B,OAAAC,UAEA3B,EAAA,iBAAAzgF,GACA,uBAAAA,GAGAygF,EAAA,oBAAAzgF,GACA,UAGAygF,EAAA,qBAAAzgF,GACA,uBAAAA,GAAA,iBAAAA,GAGAygF,EAAA,oBAAAzgF,GACA,yBAAAA,GAGAygF,EAAA,kBAAAzgF,GACA,uBAAAA,gBAAA7F,QAGAsmF,EAAA,QAAArmF,MAAAioF,QACA5B,EAAA,qBAAA/rD,GACA,OAAAA,GACA,iBAAAA,GACA,iBAAAA,EAAA95B,QACA85B,EAAA95B,QAAA,GACAN,KAAAmnF,MAAA/sD,EAAA95B,UAAA85B,EAAA95B,QAGA6lF,EAAA,mBAAA/rD,GACA,gBAAAA,GAGA+rD,EAAA,oBAAA/rD,GACA,UAGA+rD,EAAA,mBAAA/rD,GACA,OAAAA,GAGA+rD,EAAA,cAAAvlF,EAAA0mF,GACA,OAAA1mF,EAAA0mF,GAGAnB,EAAA,eAAAvlF,EAAA0mF,GACA,OAAAtnF,KAAA2mF,OAAA/lF,EAAA0mF,IAGAnB,EAAA,OAAAnmF,KAEAnG,OAAA4sF,iBAAAN,EAAA,QACA6B,WAAA,CAAe5tF,MAAA,EAAAssF,UAAA,GACfuB,WAAA,CAAe7tF,MAAA,EAAAssF,UAAA,GACfwB,QAAA,CACA9tF,MAAA,SAAAwG,GACiB,OAAjBjB,EAAA,GAAAiB,EAAiBunF,QAAA5oF,EAAA,QAAAqB,QAGjBwnF,OAAA,CACAhuF,MAAA,SAAAwG,GACA9H,KAAAkvF,WAAAhoF,KAAAqoF,IAAAznF,GACA9H,KAAAmvF,WAAAjoF,KAAAsoF,IAAA1nF,OAKAulF,EAAA,aACA,IAAAoC,EAAA,IAAAthD,WAAA,GACAuhD,EAAA,EACA,OACAroF,SAAAgmF,EAAA,4BAAA9mD,GACA,KAAAA,KAAA,YACA,GAAAmpD,EAAAnpD,EAAAkpD,EAAAjoF,OAAA,CACA,IAAAmoF,EAAAF,GACAA,EAAA,IAAAthD,WAAAjnC,KAAAy3D,IAAA,MAAA8wB,EAAAjoF,OAAA++B,EAAA,EAAAkpD,EAAAjoF,UACAyJ,IAAA0+E,GAEA,IAAAntD,EAAAktD,EAEA,OADA,GAAAA,GAAAnpD,KAAAmpD,EAAA,KAAAA,IACAltD,GAEAotD,KAAAvC,EAAA,wBAAAzjE,EAAAtoB,EAAAilC,GACAkpD,EAAAG,KAAAtuF,EAAAsoB,IAAA2c,IAEAhH,KAAA8tD,EAAA,wBAAA7qD,KACAqtD,KAAAxC,EAAA,wBAAAzjE,EAAAD,EAAA4c,GACAkpD,EAAAK,WAAAlmE,EAAAD,IAAA4c,IAEAgtB,MAAA85B,EAAA,2BACAoC,EAAA,IAAAthD,WAAA,GACAuhD,EAAA,KAxBA,GA6BArC,EAAA,MAAAA,EAAA,kBAAA7qD,EAAAlhC,EAAAo9B,GACA+wD,MAAA,EAAAjtD,IAAA,EAAA9D,IAAAp9B,GAGA+rF,EAAA,KAAAA,EAAA,iBAAA7qD,EAAA9D,GACA,OAAA+wD,MAAA,EAAAjtD,IAAA,EAAA9D,yCCjTA,SAAAjjB,GAAA,MAAA5U,EAAA,IAAAymF,aAAA,GACA1mF,EAAA,IAAAmpF,aAAAlpF,EAAA43B,QACAt4B,EAAA,IAAA6pF,WAAAnpF,EAAA43B,QAEAhjB,EAAAw0E,WAAA,SAAA3uF,GAEA,OADAsF,EAAA,GAAAtF,EACA6E,EAAA,IAGAsV,EAAAy0E,WAAA,SAAA5uF,GAEA,OADA6E,EAAA,GAAA7E,EACAsF,EAAA,IAGA6U,EAAA00E,WAAA,SAAA7uF,GAEA,OADAuF,EAAA,GAAAvF,EACAwS,QAAA3N,EAAA,GAAAA,EAAA,KAGAsV,EAAA20E,WAAA,SAAA9uF,GAGA,OAFA6E,EAAA,GAAA2kC,QAAAxpC,GACA6E,EAAA,GAAA4kC,SAAAzpC,GACAuF,EAAA,wCCtBA,SAAA4U,GAAA,MAAA40E,EAAA50E,EAAA40E,MAA4BlwF,EAAQ,IAEpCsb,EAAA4+C,SAAAg2B,EAAAC,KAEA70E,EAAA80E,QAAAF,EAAAG,IAEA/0E,EAAA3H,QAAA,SAAA28E,EAAAC,GACA,OAAAL,EAAAM,SAAAF,EAAAC,IAGAj1E,EAAAqvB,QAAA,SAAAxpC,GACA,OAAAA,EAAAsvF,KAGAn1E,EAAAsvB,SAAA,SAAAzpC,GACA,OAAAA,EAAAuvF,MAGAp1E,EAAAq5C,QAAA,SAAArzB,EAAAC,GACA,OAAAD,EAAAluB,IAAAmuB,IAGAjmB,EAAA2+C,QAAA,SAAA34B,EAAAC,GACA,OAAAD,EAAAqvD,IAAApvD,IAGAjmB,EAAA25C,QAAA,SAAA3zB,EAAAC,GACA,OAAAD,EAAAsvD,IAAArvD,IAGAjmB,EAAAu1E,QAAA,SAAAvvD,EAAAC,GACA,OAAAD,EAAAwvD,IAAAvvD,IAGAjmB,EAAAy1E,UAAA,SAAAzvD,EAAAC,GACA,OAAAD,EAAA0vD,aAAAF,IAAAvvD,EAAAyvD,cAAAC,YAGA31E,EAAA41E,QAAA,SAAA5vD,EAAAC,GACA,OAAAD,EAAA95B,IAAA+5B,IAGAjmB,EAAA61E,UAAA,SAAA7vD,EAAAC,GACA,OAAAD,EAAA0vD,aAAAxpF,IAAA+5B,EAAAyvD,cAAAC,YAGA31E,EAAAihE,QAAA,SAAAj7C,EAAAC,GACA,OAAAD,EAAA8vD,IAAA7vD,IAGAjmB,EAAA+1E,OAAA,SAAA/vD,EAAAC,GACA,OAAAD,EAAAgwD,GAAA/vD,IAGAjmB,EAAAi2E,QAAA,SAAAjwD,EAAAC,GACA,OAAAD,EAAAkwD,IAAAjwD,IAGAjmB,EAAAs5C,QAAA,SAAAtzB,EAAAC,GACA,OAAAD,EAAAmwD,IAAAlwD,IAGAjmB,EAAAo2E,QAAA,SAAApwD,EAAAC,GACA,OAAAD,EAAAqwD,IAAApwD,IAGAjmB,EAAAikD,UAAA,SAAAj+B,EAAAC,GACA,OAAAD,EAAAswD,KAAArwD,IAGAjmB,EAAAu2E,QAAA,SAAA1wF,GACA,OAAAA,EAAA2wF,OAGAx2E,EAAAy2E,OAAA,SAAAzwD,EAAAC,GACA,OAAAD,EAAA0wD,GAAAzwD,IAGAjmB,EAAA22E,OAAA,SAAA3wD,EAAAC,GACA,OAAAD,EAAA4wD,GAAA3wD,IAGAjmB,EAAA+jD,UAAA,SAAAl+D,EAAAkjE,GACAh8D,OAAAg8D,GAAA,IAAAA,IAAA,IACA,IAAAp9B,EAAAipD,EAAAiC,QAAA9tB,EAAA,GACA,OAAAljE,EAAAiS,IAAA6zB,GAAAmqD,IAAAnqD,EAAA6qD,QAGAx2E,EAAA09C,UAAA,SAAA73D,GACA,WAAAA,EAAAuvF,MAAAvvF,EAAAsvF,KAAA,GAAAtvF,EAAAsvF,KAAA1tF,GAAA+rC,YACA,IAAA3tC,EAAAuvF,MAAAvvF,EAAAsvF,KAAA1tF,GAAAo6E,WAAAh8E,EAAAsvF,IAAA,GAGAn1E,EAAA49C,WAAA,SAAA/3D,GACA,WAAAA,EAAAuvF,MAAAvvF,EAAAsvF,KAAA,GAAAtvF,EAAAsvF,KAAAztF,IAAA8rC,YACA,IAAA3tC,EAAAuvF,MAAAvvF,EAAAsvF,KAAAztF,IAAAm6E,WAAAh8E,EAAAsvF,IAAA,GAGAn1E,EAAA89C,WAAA,SAAAj4D,GACA,WAAAA,EAAAuvF,MAAAvvF,EAAAsvF,KAAA,IACA,IAAAtvF,EAAAuvF,MAAAvvF,EAAAsvF,IAAA,GAGAn1E,EAAA29C,UAAA,SAAA93D,GACA,WAAAA,EAAAuvF,MAAAvvF,EAAAsvF,KAAA,GAAAtvF,EAAAsvF,KAAArtF,GAAA0rC,WAGAxzB,EAAA69C,WAAA,SAAAh4D,GACA,WAAAA,EAAAuvF,MAAAvvF,EAAAsvF,KAAA,GAAAtvF,EAAAsvF,KAAAptF,IAAAyrC,WAGAxzB,EAAA+9C,WAAA,SAAAl4D,GACA,WAAAA,EAAAuvF,MAGAp1E,EAAAg+C,YAAA,SAAAn4D,GACA,WAAAA,EAAAuvF,OAAA,IAAAvvF,EAAAsvF,KAAA,IAAAtvF,EAAAsvF,MAGA,MAAA2B,EAAAlC,EAAAmC,WAAA3uF,IAAAmqF,kBACAyE,EAAApC,EAAAmC,WAAA3uF,IAAAoqF,kBAEAxyE,EAAAi3E,WAAA,SAAApxF,GACA,OAAAA,EAAAqxF,IAAAJ,IAAAjxF,EAAAsxF,IAAAH,IAGA,MAAAI,EAAAxC,EAAAmC,WAAA1uF,IAAAkqF,kBACA8E,EAAAzC,EAAAmC,WAAA1uF,IAAAmqF,kBAEAxyE,EAAAs3E,WAAA,SAAAzxF,GACA,OAAAA,EAAAqxF,IAAAE,IAAAvxF,EAAAsxF,IAAAE,IAGAr3E,EAAA67D,WAAA,SAAAh2E,GACA,OAAAma,EAAAvU,KAAA2mF,OAAAvsF,EAAA0xF,aAGAv3E,EAAA87D,WAAA,SAAAj2E,GACA,OAAAA,EAAA0xF,YAGAv3E,EAAA+iE,cAAA,SAAAl9E,EAAA2xF,GACA,OAAAA,EAAA3xF,EAAA6vF,aAAA7vF,GAAAwI,SAAA,sCC9IAnK,EAAAD,QAAA2wF,EAKA,IAAA6C,EAAA,KAEA,IACAA,EAAA,IAAAC,YAAAC,SAAA,IAAAD,YAAAv0D,OAAA,IAAAuP,WAAA,CACA,m2BACA,IAASzuC,QACR,MAAA22D,IAcD,SAAAg6B,EAAAO,EAAAC,EAAAoC,GAMAjzF,KAAA4wF,IAAA,EAAAA,EAMA5wF,KAAA6wF,KAAA,EAAAA,EAMA7wF,KAAAizF,aAoCA,SAAAI,EAAAC,GACA,YAAAA,KAAA,YAXAjD,EAAApuF,UAAAsxF,WAEAxyF,OAAAC,eAAAqvF,EAAApuF,UAAA,cAAqDX,OAAA,IAkBrD+uF,EAAAgD,SAOA,IAAAG,EAAA,GAOAC,EAAA,GAQA,SAAAnB,EAAAhxF,EAAA2xF,GACA,IAAAK,EAAAI,EAAAC,EACA,OAAAV,GAEAU,EAAA,IADAryF,KAAA,IACAA,EAAA,OACAoyF,EAAAD,EAAAnyF,IAEAoyF,GAEAJ,EAAA3C,EAAArvF,GAAA,EAAAA,GAAA,WACAqyF,IACAF,EAAAnyF,GAAAgyF,GACAA,IAGAK,GAAA,MADAryF,GAAA,IACAA,EAAA,OACAoyF,EAAAF,EAAAlyF,IAEAoyF,GAEAJ,EAAA3C,EAAArvF,IAAA,WACAqyF,IACAH,EAAAlyF,GAAAgyF,GACAA,GAmBA,SAAAd,EAAAlxF,EAAA2xF,GACA,GAAAW,MAAAtyF,GACA,OAAA2xF,EAAAY,EAAAvD,EACA,GAAA2C,EAAA,CACA,GAAA3xF,EAAA,EACA,OAAAuyF,EACA,GAAAvyF,GAAAwyF,EACA,OAAAC,MACK,CACL,GAAAzyF,IAAA0yF,EACA,OAAA1W,EACA,GAAAh8E,EAAA,GAAA0yF,EACA,OAAA/kD,EAEA,OAAA3tC,EAAA,EACAkxF,GAAAlxF,EAAA2xF,GAAAgB,MACAtD,EAAArvF,EAAA4yF,EAAA,EAAA5yF,EAAA4yF,EAAA,EAAAjB,GAmBA,SAAAtC,EAAAwD,EAAAC,EAAAnB,GACA,WAAA5C,EAAA8D,EAAAC,EAAAnB,GA5CA5C,EAAAiC,UAkCAjC,EAAAmC,aAsBAnC,EAAAM,WASA,IAAA0D,EAAAntF,KAAAQ,IASA,SAAA4sF,EAAA7lD,EAAAwkD,EAAAtE,GACA,OAAAlgD,EAAAjnC,OACA,MAAA6R,MAAA,gBACA,WAAAo1B,GAAA,aAAAA,GAAA,cAAAA,GAAA,cAAAA,EACA,OAAA6hD,EASA,GARA,iBAAA2C,GAEAtE,EAAAsE,EACAA,GAAA,GAEAA,OAEAtE,KAAA,IACA,MAAAA,EACA,MAAA4F,WAAA,SAEA,IAAApyF,EACA,IAAAA,EAAAssC,EAAA00C,QAAA,QACA,MAAA9pE,MAAA,mBACA,OAAAlX,EACA,OAAAmyF,EAAA7lD,EAAA7jC,UAAA,GAAAqoF,EAAAtE,GAAAsF,MAQA,IAHA,IAAAO,EAAAhC,EAAA6B,EAAA1F,EAAA,IAEAjvD,EAAA4wD,EACAjwF,EAAA,EAAmBA,EAAAouC,EAAAjnC,OAAgBnH,GAAA,GACnC,IAAAkmC,EAAAr/B,KAAA61E,IAAA,EAAAtuC,EAAAjnC,OAAAnH,GACAiB,EAAAstF,SAAAngD,EAAA7jC,UAAAvK,IAAAkmC,GAAAooD,GACA,GAAApoD,EAAA,GACA,IAAAkuD,EAAAjC,EAAA6B,EAAA1F,EAAApoD,IACA7G,IAAAqxD,IAAA0D,GAAAlhF,IAAAi/E,EAAAlxF,SAGAo+B,GADAA,IAAAqxD,IAAAyD,IACAjhF,IAAAi/E,EAAAlxF,IAIA,OADAo+B,EAAAuzD,WACAvzD,EAoBA,SAAAg1D,EAAA98C,EAAAq7C,GACA,uBAAAr7C,EACA46C,EAAA56C,EAAAq7C,GACA,iBAAAr7C,EACA08C,EAAA18C,EAAAq7C,GAEAtC,EAAA/4C,EAAAg5C,IAAAh5C,EAAAi5C,KAAA,kBAAAoC,IAAAr7C,EAAAq7C,UAfA5C,EAAAiE,aAyBAjE,EAAAqE,YAUA,IAcAR,EAAAS,WAOAb,EAAAI,IAOAF,EAAAF,EAAA,EAOAc,EAAAtC,EA5BA,OAkCAhC,EAAAgC,EAAA,GAMAjC,EAAAC,OAMA,IAAAuD,EAAAvB,EAAA,MAMAjC,EAAAwD,QAMA,IAAArD,EAAA8B,EAAA,GAMAjC,EAAAG,MAMA,IAAAqE,EAAAvC,EAAA,MAMAjC,EAAAwE,OAMA,IAAAC,EAAAxC,GAAA,GAMAjC,EAAAyE,UAMA,IAAA7lD,EAAA0hD,GAAA,iBAMAN,EAAAphD,YAMA,IAAA8kD,EAAApD,GAAA,SAMAN,EAAA0D,qBAMA,IAAAzW,EAAAqT,EAAA,kBAMAN,EAAA/S,YAMA,IAAAyX,EAAA1E,EAAApuF,UAMA8yF,EAAAC,MAAA,WACA,OAAAh1F,KAAAizF,SAAAjzF,KAAA4wF,MAAA,EAAA5wF,KAAA4wF,KAOAmE,EAAA/B,SAAA,WACA,OAAAhzF,KAAAizF,UACAjzF,KAAA6wF,OAAA,GAAAqD,GAAAl0F,KAAA4wF,MAAA,GACA5wF,KAAA6wF,KAAAqD,GAAAl0F,KAAA4wF,MAAA,IAUAmE,EAAAjrF,SAAA,SAAA6kF,GAEA,IADAA,KAAA,IACA,MAAAA,EACA,MAAA4F,WAAA,SACA,GAAAv0F,KAAAi1F,SACA,UACA,GAAAj1F,KAAAk1F,aAAA,CACA,GAAAl1F,KAAAmyF,GAAA7U,GAAA,CAGA,IAAA6X,EAAA3C,EAAA7D,GACAsC,EAAAjxF,KAAAixF,IAAAkE,GACAC,EAAAnE,EAAAF,IAAAoE,GAAArE,IAAA9wF,MACA,OAAAixF,EAAAnnF,SAAA6kF,GAAAyG,EAAAJ,QAAAlrF,SAAA6kF,GAEA,UAAA3uF,KAAAi0F,MAAAnqF,SAAA6kF,GAQA,IAHA,IAAA6F,EAAAhC,EAAA6B,EAAA1F,EAAA,GAAA3uF,KAAAizF,UACAoC,EAAAr1F,KACA0/B,EAAA,KACA,CACA,IAAA41D,EAAAD,EAAApE,IAAAuD,GAEAe,GADAF,EAAAvE,IAAAwE,EAAAvE,IAAAyD,IAAAQ,UAAA,GACAlrF,SAAA6kF,GAEA,IADA0G,EAAAC,GACAL,SACA,OAAAM,EAAA71D,EAEA,KAAA61D,EAAA/tF,OAAA,GACA+tF,EAAA,IAAAA,EACA71D,EAAA,GAAA61D,EAAA71D,IASAq1D,EAAAS,YAAA,WACA,OAAAx1F,KAAA6wF,MAOAkE,EAAAU,oBAAA,WACA,OAAAz1F,KAAA6wF,OAAA,GAOAkE,EAAAW,WAAA,WACA,OAAA11F,KAAA4wF,KAOAmE,EAAAY,mBAAA,WACA,OAAA31F,KAAA4wF,MAAA,GAOAmE,EAAAa,cAAA,WACA,GAAA51F,KAAAk1F,aACA,OAAAl1F,KAAAmyF,GAAA7U,GAAA,GAAAt9E,KAAAi0F,MAAA2B,gBAEA,IADA,IAAAh+C,EAAA,GAAA53C,KAAA6wF,KAAA7wF,KAAA6wF,KAAA7wF,KAAA4wF,IACAiF,EAAA,GAAsBA,EAAA,GACtB,IAAAj+C,EAAA,GAAAi+C,GAD+BA,KAG/B,UAAA71F,KAAA6wF,KAAAgF,EAAA,GAAAA,EAAA,GAOAd,EAAAE,OAAA,WACA,WAAAj1F,KAAA6wF,MAAA,IAAA7wF,KAAA4wF,KAOAmE,EAAAe,IAAAf,EAAAE,OAMAF,EAAAG,WAAA,WACA,OAAAl1F,KAAAizF,UAAAjzF,KAAA6wF,KAAA,GAOAkE,EAAAgB,WAAA,WACA,OAAA/1F,KAAAizF,UAAAjzF,KAAA6wF,MAAA,GAOAkE,EAAAiB,MAAA,WACA,aAAAh2F,KAAA4wF,MAOAmE,EAAAkB,OAAA,WACA,aAAAj2F,KAAA4wF,MAQAmE,EAAAmB,OAAA,SAAAzZ,GAGA,OAFA4W,EAAA5W,KACAA,EAAAiY,EAAAjY,KACAz8E,KAAAizF,WAAAxW,EAAAwW,UAAAjzF,KAAA6wF,OAAA,OAAApU,EAAAoU,OAAA,SAEA7wF,KAAA6wF,OAAApU,EAAAoU,MAAA7wF,KAAA4wF,MAAAnU,EAAAmU,MASAmE,EAAA5C,GAAA4C,EAAAmB,OAOAnB,EAAAoB,UAAA,SAAA1Z,GACA,OAAAz8E,KAAAmyF,GAAA1V,IASAsY,EAAAqB,IAAArB,EAAAoB,UAQApB,EAAA1C,GAAA0C,EAAAoB,UAOApB,EAAAsB,SAAA,SAAA5Z,GACA,OAAAz8E,KAAAs2F,KAAA7Z,GAAA,GASAsY,EAAAwB,GAAAxB,EAAAsB,SAOAtB,EAAAyB,gBAAA,SAAA/Z,GACA,OAAAz8E,KAAAs2F,KAAA7Z,IAAA,GASAsY,EAAAnC,IAAAmC,EAAAyB,gBAQAzB,EAAA0B,GAAA1B,EAAAyB,gBAOAzB,EAAA2B,YAAA,SAAAja,GACA,OAAAz8E,KAAAs2F,KAAA7Z,GAAA,GASAsY,EAAA4B,GAAA5B,EAAA2B,YAOA3B,EAAA6B,mBAAA,SAAAna,GACA,OAAAz8E,KAAAs2F,KAAA7Z,IAAA,GASAsY,EAAApC,IAAAoC,EAAA6B,mBAQA7B,EAAA8B,GAAA9B,EAAA6B,mBAQA7B,EAAA+B,QAAA,SAAAra,GAGA,GAFA4W,EAAA5W,KACAA,EAAAiY,EAAAjY,IACAz8E,KAAAmyF,GAAA1V,GACA,SACA,IAAAsa,EAAA/2F,KAAAk1F,aACA8B,EAAAva,EAAAyY,aACA,OAAA6B,IAAAC,GACA,GACAD,GAAAC,EACA,EAEAh3F,KAAAizF,SAGAxW,EAAAoU,OAAA,EAAA7wF,KAAA6wF,OAAA,GAAApU,EAAAoU,OAAA7wF,KAAA6wF,MAAApU,EAAAmU,MAAA,EAAA5wF,KAAA4wF,MAAA,OAFA5wF,KAAA8wF,IAAArU,GAAAyY,cAAA,KAYAH,EAAAuB,KAAAvB,EAAA+B,QAMA/B,EAAAkC,OAAA,WACA,OAAAj3F,KAAAizF,UAAAjzF,KAAAmyF,GAAA7U,GACAA,EACAt9E,KAAAiyF,MAAA1+E,IAAAi9E,IAQAuE,EAAAd,IAAAc,EAAAkC,OAOAlC,EAAAxhF,IAAA,SAAA2jF,GACA7D,EAAA6D,KACAA,EAAAxC,EAAAwC,IAIA,IAAAC,EAAAn3F,KAAA6wF,OAAA,GACAuG,EAAA,MAAAp3F,KAAA6wF,KACAwG,EAAAr3F,KAAA4wF,MAAA,GACA0G,EAAA,MAAAt3F,KAAA4wF,IAEA2G,EAAAL,EAAArG,OAAA,GACA2G,EAAA,MAAAN,EAAArG,KACA4G,EAAAP,EAAAtG,MAAA,GAGA8G,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAYA,OAVAD,IADAC,GAAAP,GAHA,MAAAJ,EAAAtG,QAIA,GAGA+G,IADAC,GAAAP,EAAAI,KACA,GAGAC,IADAC,GAAAP,EAAAI,KACA,GAEAE,GAAAP,EAAAI,EAEA5G,GANAiH,GAAA,QAMA,IATAC,GAAA,QAQAH,GAAA,QACA,IAHAC,GAAA,OAGA33F,KAAAizF,WAQA8B,EAAA+C,SAAA,SAAAC,GAGA,OAFA1E,EAAA0E,KACAA,EAAArD,EAAAqD,IACA/3F,KAAAuT,IAAAwkF,EAAA9D,QASAc,EAAAjE,IAAAiE,EAAA+C,SAOA/C,EAAAiD,SAAA,SAAAC,GACA,GAAAj4F,KAAAi1F,SACA,OAAA3E,EAKA,GAJA+C,EAAA4E,KACAA,EAAAvD,EAAAuD,IAGA/E,EAKA,OAAAvC,EAJAuC,EAAAnC,IAAA/wF,KAAA4wF,IACA5wF,KAAA6wF,KACAoH,EAAArH,IACAqH,EAAApH,MACAqC,EAAAgF,WAAAl4F,KAAAizF,UAGA,GAAAgF,EAAAhD,SACA,OAAA3E,EACA,GAAAtwF,KAAAmyF,GAAA7U,GACA,OAAA2a,EAAAjC,QAAA1Y,EAAAgT,EACA,GAAA2H,EAAA9F,GAAA7U,GACA,OAAAt9E,KAAAg2F,QAAA1Y,EAAAgT,EAEA,GAAAtwF,KAAAk1F,aACA,OAAA+C,EAAA/C,aACAl1F,KAAAi0F,MAAAlD,IAAAkH,EAAAhE,OAEAj0F,KAAAi0F,MAAAlD,IAAAkH,GAAAhE,MACK,GAAAgE,EAAA/C,aACL,OAAAl1F,KAAA+wF,IAAAkH,EAAAhE,aAGA,GAAAj0F,KAAAu2F,GAAA3B,IAAAqD,EAAA1B,GAAA3B,GACA,OAAApC,EAAAxyF,KAAAgzF,WAAAiF,EAAAjF,WAAAhzF,KAAAizF,UAKA,IAAAkE,EAAAn3F,KAAA6wF,OAAA,GACAuG,EAAA,MAAAp3F,KAAA6wF,KACAwG,EAAAr3F,KAAA4wF,MAAA,GACA0G,EAAA,MAAAt3F,KAAA4wF,IAEA2G,EAAAU,EAAApH,OAAA,GACA2G,EAAA,MAAAS,EAAApH,KACA4G,EAAAQ,EAAArH,MAAA,GACAuH,EAAA,MAAAF,EAAArH,IAEA8G,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAqBA,OAnBAD,IADAC,GAAAP,EAAAa,KACA,GAGAR,IADAC,GAAAP,EAAAc,KACA,GACAP,GAAA,MAEAD,IADAC,GAAAN,EAAAG,KACA,GAGAC,IADAC,GAAAP,EAAAe,KACA,GACAR,GAAA,MAEAD,IADAC,GAAAN,EAAAI,KACA,GACAE,GAAA,MAEAD,IADAC,GAAAL,EAAAE,KACA,GAEAE,GAAAP,EAAAgB,EAAAf,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,EAEA5G,GAZAiH,GAAA,QAYA,IAlBAC,GAAA,QAiBAH,GAAA,QACA,IAHAC,GAAA,OAGA33F,KAAAizF,WASA8B,EAAAhE,IAAAgE,EAAAiD,SAQAjD,EAAAqD,OAAA,SAAAC,GAGA,GAFAhF,EAAAgF,KACAA,EAAA3D,EAAA2D,IACAA,EAAApD,SACA,MAAA57E,MAAA,oBAaA,IAWAi/E,EAAAjD,EAAAkD,EArBA,GAAArF,EAIA,OAAAlzF,KAAAizF,WACA,aAAAjzF,KAAA6wF,OACA,IAAAwH,EAAAzH,MAAA,IAAAyH,EAAAxH,KAUAF,GANA3wF,KAAAizF,SAAAC,EAAAsF,MAAAtF,EAAAuF,OACAz4F,KAAA4wF,IACA5wF,KAAA6wF,KACAwH,EAAAzH,IACAyH,EAAAxH,MAEAqC,EAAAgF,WAAAl4F,KAAAizF,UARAjzF,KAWA,GAAAA,KAAAi1F,SACA,OAAAj1F,KAAAizF,SAAAY,EAAAvD,EAEA,GAAAtwF,KAAAizF,SA6BK,CAKL,GAFAoF,EAAApF,WACAoF,IAAAlH,cACAkH,EAAA1B,GAAA32F,MACA,OAAA6zF,EACA,GAAAwE,EAAA1B,GAAA32F,KAAA+xF,KAAA,IACA,OAAA8C,EACA0D,EAAA1E,MAtCA,CAGA,GAAA7zF,KAAAmyF,GAAA7U,GACA,OAAA+a,EAAAlG,GAAA3B,IAAA6H,EAAAlG,GAAA2C,GACAxX,EACA+a,EAAAlG,GAAA7U,GACAkT,GAIA8H,EADAt4F,KAAA8xF,IAAA,GACAb,IAAAoH,GAAAzG,IAAA,IACAO,GAAA7B,GACA+H,EAAAnD,aAAA1E,EAAAsE,GAEAO,EAAAr1F,KAAA8wF,IAAAuH,EAAAtH,IAAAuH,IACAC,EAAAD,EAAA/kF,IAAA8hF,EAAApE,IAAAoH,KAIS,GAAAA,EAAAlG,GAAA7U,GACT,OAAAt9E,KAAAizF,SAAAY,EAAAvD,EACA,GAAAtwF,KAAAk1F,aACA,OAAAmD,EAAAnD,aACAl1F,KAAAi0F,MAAAhD,IAAAoH,EAAApE,OACAj0F,KAAAi0F,MAAAhD,IAAAoH,GAAApE,MACS,GAAAoE,EAAAnD,aACT,OAAAl1F,KAAAixF,IAAAoH,EAAApE,aACAsE,EAAAjI,EAmBA,IADA+E,EAAAr1F,KACAq1F,EAAA1C,IAAA0F,IAAA,CAGAC,EAAApxF,KAAAy3D,IAAA,EAAAz3D,KAAAknF,MAAAiH,EAAArC,WAAAqF,EAAArF,aAWA,IAPA,IAAA0F,EAAAxxF,KAAAuhD,KAAAvhD,KAAAyxF,IAAAL,GAAApxF,KAAA0xF,KACAC,EAAAH,GAAA,KAAArE,EAAA,EAAAqE,EAAA,IAIAI,EAAAtG,EAAA8F,GACAS,EAAAD,EAAA/H,IAAAsH,GACAU,EAAA7D,cAAA6D,EAAApC,GAAAtB,IAGA0D,GADAD,EAAAtG,EADA8F,GAAAO,EACA74F,KAAAizF,WACAlC,IAAAsH,GAKAS,EAAA7D,WACA6D,EAAAtI,GAEA+H,IAAAhlF,IAAAulF,GACAzD,IAAAvE,IAAAiI,GAEA,OAAAR,GASAxD,EAAA9D,IAAA8D,EAAAqD,OAOArD,EAAAiE,OAAA,SAAAX,GAKA,OAJAhF,EAAAgF,KACAA,EAAA3D,EAAA2D,IAGAnF,EAOAvC,GANA3wF,KAAAizF,SAAAC,EAAA+F,MAAA/F,EAAAgG,OACAl5F,KAAA4wF,IACA5wF,KAAA6wF,KACAwH,EAAAzH,IACAyH,EAAAxH,MAEAqC,EAAAgF,WAAAl4F,KAAAizF,UAGAjzF,KAAA8wF,IAAA9wF,KAAAixF,IAAAoH,GAAAtH,IAAAsH,KASAtD,EAAAptF,IAAAotF,EAAAiE,OAQAjE,EAAAM,IAAAN,EAAAiE,OAMAjE,EAAA9C,IAAA,WACA,OAAAtB,GAAA3wF,KAAA4wF,KAAA5wF,KAAA6wF,KAAA7wF,KAAAizF,WAQA8B,EAAAxD,IAAA,SAAA9U,GAGA,OAFA4W,EAAA5W,KACAA,EAAAiY,EAAAjY,IACAkU,EAAA3wF,KAAA4wF,IAAAnU,EAAAmU,IAAA5wF,KAAA6wF,KAAApU,EAAAoU,KAAA7wF,KAAAizF,WAQA8B,EAAAtD,GAAA,SAAAhV,GAGA,OAFA4W,EAAA5W,KACAA,EAAAiY,EAAAjY,IACAkU,EAAA3wF,KAAA4wF,IAAAnU,EAAAmU,IAAA5wF,KAAA6wF,KAAApU,EAAAoU,KAAA7wF,KAAAizF,WAQA8B,EAAApD,IAAA,SAAAlV,GAGA,OAFA4W,EAAA5W,KACAA,EAAAiY,EAAAjY,IACAkU,EAAA3wF,KAAA4wF,IAAAnU,EAAAmU,IAAA5wF,KAAA6wF,KAAApU,EAAAoU,KAAA7wF,KAAAizF,WAQA8B,EAAAoE,UAAA,SAAAC,GAGA,OAFA/F,EAAA+F,KACAA,IAAApE,SACA,IAAAoE,GAAA,IACAp5F,KACAo5F,EAAA,GACAzI,EAAA3wF,KAAA4wF,KAAAwI,EAAAp5F,KAAA6wF,MAAAuI,EAAAp5F,KAAA4wF,MAAA,GAAAwI,EAAAp5F,KAAAizF,UAEAtC,EAAA,EAAA3wF,KAAA4wF,KAAAwI,EAAA,GAAAp5F,KAAAizF,WASA8B,EAAAnD,IAAAmD,EAAAoE,UAOApE,EAAAsE,WAAA,SAAAD,GAGA,OAFA/F,EAAA+F,KACAA,IAAApE,SACA,IAAAoE,GAAA,IACAp5F,KACAo5F,EAAA,GACAzI,EAAA3wF,KAAA4wF,MAAAwI,EAAAp5F,KAAA6wF,MAAA,GAAAuI,EAAAp5F,KAAA6wF,MAAAuI,EAAAp5F,KAAAizF,UAEAtC,EAAA3wF,KAAA6wF,MAAAuI,EAAA,GAAAp5F,KAAA6wF,MAAA,OAAA7wF,KAAAizF,WASA8B,EAAAjD,IAAAiD,EAAAsE,WAOAtE,EAAAuE,mBAAA,SAAAF,GAIA,GAHA/F,EAAA+F,KACAA,IAAApE,SAEA,KADAoE,GAAA,IAEA,OAAAp5F,KAEA,IAAA6wF,EAAA7wF,KAAA6wF,KACA,OAAAuI,EAAA,GAEAzI,EADA3wF,KAAA4wF,MACAwI,EAAAvI,GAAA,GAAAuI,EAAAvI,IAAAuI,EAAAp5F,KAAAizF,UAEAtC,EADS,KAAAyI,EACTvI,EAEAA,IAAAuI,EAAA,GAFA,EAAAp5F,KAAAizF,WAYA8B,EAAAhD,KAAAgD,EAAAuE,mBAQAvE,EAAAwE,MAAAxE,EAAAuE,mBAMAvE,EAAA3D,SAAA,WACA,OAAApxF,KAAAizF,SAEAtC,EAAA3wF,KAAA4wF,IAAA5wF,KAAA6wF,MAAA,GADA7wF,MAQA+0F,EAAA5D,WAAA,WACA,OAAAnxF,KAAAizF,SACAjzF,KACA2wF,EAAA3wF,KAAA4wF,IAAA5wF,KAAA6wF,MAAA,IAQAkE,EAAAyE,QAAA,SAAA/C,GACA,OAAAA,EAAAz2F,KAAAy5F,YAAAz5F,KAAA05F,aAOA3E,EAAA0E,UAAA,WACA,IAAA/I,EAAA1wF,KAAA6wF,KACAJ,EAAAzwF,KAAA4wF,IACA,OACA,IAAAH,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,GACA,IAAAC,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,KAQAqE,EAAA2E,UAAA,WACA,IAAAhJ,EAAA1wF,KAAA6wF,KACAJ,EAAAzwF,KAAA4wF,IACA,OACAF,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,EACAD,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,IAWAJ,EAAAsJ,UAAA,SAAA14D,EAAAgyD,EAAAwD,GACA,OAAAA,EAAApG,EAAAuJ,YAAA34D,EAAAgyD,GAAA5C,EAAAwJ,YAAA54D,EAAAgyD,IASA5C,EAAAuJ,YAAA,SAAA34D,EAAAgyD,GACA,WAAA5C,EACApvD,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACAA,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACAgyD,IAUA5C,EAAAwJ,YAAA,SAAA54D,EAAAgyD,GACA,WAAA5C,EACApvD,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACAA,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACAgyD,qRC5xCA,IA0EiBh0B,EA1EjBrzD,EAAAzL,EAAA,GAIA2L,EAAA3L,EAAA,GAUA0L,EAAA1L,EAAA,GAOAioD,EAAAjoD,EAAA,GAoBAgoD,EAAAhoD,EAAA,GAeA4L,EAAA5L,EAAA,GAIAwL,EAAAxL,EAAA,GAIA8H,EAAA9H,EAAA,GAmZA,SAAgB2zE,EAEdgmB,EAEA73F,EAEA8lB,EAEA8Z,EAEA42B,EAEAgD,EAEAs+B,QAAA,IAAAA,OAAA,GAEA,IAAIp6F,EAASm6F,EAASn6F,OAUtB,OAAQsC,EAAUiP,cAIhB,KAAK+tD,EAAe+vB,UAClB,IAAI7zE,EAAO6+E,EAAqBF,EAAU/xE,EAAe8Z,EAAU45B,GAEnE,OADAq+B,EAAS97B,YAAcnyD,EAAAsH,KAAKvP,KACvBuX,EACEA,EAAKK,GAAE,KAAwBL,EAAKK,GAAE,KACzC7b,EAAOygC,UAAU,GACjBzgC,EAAOygC,UAAU,GAHHzgC,EAAOymC,oBAK3B,KAAK64B,EAAeg7B,QACd9+E,EAAO6+E,EAAqBF,EAAU/xE,EAAe8Z,EAAU45B,GAEnE,OADAq+B,EAAS97B,YAAcnyD,EAAAsH,KAAKvP,KACvBuX,EACEA,EAAKK,GAAE,GACV7b,EAAOygC,UAAU,GACjBzgC,EAAOygC,UAAU,GAHHzgC,EAAOymC,oBAK3B,KAAK64B,EAAei7B,SACd/+E,EAAO6+E,EAAqBF,EAAU/xE,EAAe8Z,EAAU45B,GAEnE,OADAq+B,EAAS97B,YAAcnyD,EAAAsH,KAAKvP,KACvBuX,EACEA,EAAKK,GAAE,GACV7b,EAAOygC,UAAU,GACjBzgC,EAAOygC,UAAU,GAHHzgC,EAAOymC,oBAK3B,KAAK64B,EAAek7B,YACdh/E,EAAO6+E,EAAqBF,EAAU/xE,EAAe8Z,EAAU45B,GAEnE,OADAq+B,EAAS97B,YAAcnyD,EAAAsH,KAAKvP,KACvBuX,EACEA,EAAKK,GAAE,KACV7b,EAAOygC,UAAU,GACjBzgC,EAAOygC,UAAU,GAHHzgC,EAAOymC,oBAK3B,KAAK64B,EAAem7B,SACdj/E,EAAO6+E,EAAqBF,EAAU/xE,EAAe8Z,EAAU45B,GAEnE,GADAq+B,EAAS97B,YAAcnyD,EAAAsH,KAAKvP,MACvBuX,EAAM,OAAOxb,EAAOymC,oBAEzB,GADIgjB,EAAYjuC,EAAKutC,eACN,CACb,IAAIz4C,EAAiB6pF,EAASp4E,QAAQzR,eACtC,GAAIA,GAAkBm5C,EAAUvgC,eAAe5Y,GAAiB,OAAOtQ,EAAOygC,UAAU,GAE1F,OAAOzgC,EAAOygC,UAAU,GAE1B,KAAK6+B,EAAegwB,QACd9zE,EAAO6+E,EAAqBF,EAAU/xE,EAAe8Z,EAAU45B,GAEnE,GADAq+B,EAAS97B,YAAcnyD,EAAAsH,KAAKvP,MACvBuX,EAAM,OAAOxb,EAAOymC,oBAEzB,KADIsiB,EAAiBvtC,EAAKutC,gBACL,OAAO/oD,EAAOygC,UAAU,GAC7C,IAAIthB,EAAiB4pC,EAAezmD,UACpC,OAAOtC,EAAOygC,UACKthB,EAAgB8I,QAAQkyE,EAASp4E,QAAQ1R,gBACtD,EACA,GAGR,KAAKivD,EAAeo7B,YAClB,IAGI3xC,EAHAvtC,EAAO6+E,EAAqBF,EAAU/xE,EAAe8Z,EAAU45B,GAEnE,OADAq+B,EAAS97B,YAAcnyD,EAAAsH,KAAKvP,KACvBuX,GACDutC,EAAiBvtC,EAAKutC,gBAEnB/oD,EAAOygC,UACZsoB,EAAe7wC,aAAa,YAC1B6wC,EAAe3/B,eAAeo/B,EAAAz8C,aAAasB,cAC3C07C,EAAe3/B,eAAeo/B,EAAAz8C,aAAawB,wBACzC,EAAI,GALkBvN,EAAOygC,UAAU,GAF3BzgC,EAAOymC,oBAU3B,KAAK64B,EAAeq7B,WACdn/E,EAAO6+E,EAAqBF,EAAU/xE,EAAe8Z,EAAU45B,GAEnE,OADAq+B,EAAS97B,YAAcnyD,EAAAsH,KAAKvP,KACvBuX,EACExb,EAAOygC,UAAUjlB,EAAKzB,mBAAqB,EAAI,GADpC/Z,EAAOymC,oBAG3B,KAAK64B,EAAenlB,WACd3+B,EAAO6+E,EAAqBF,EAAU/xE,EAAe8Z,EAAU45B,GAEnE,OADAq+B,EAAS97B,YAAcnyD,EAAAsH,KAAKvP,KACvBuX,EACExb,EAAOygC,UAAUjlB,EAAKK,GAAE,KAAuB,EAAI,GADxC7b,EAAOymC,oBAG3B,KAAK64B,EAAes7B,UAElB,GADAT,EAAS97B,YAAcnyD,EAAAsH,KAAKvP,KAE1B42F,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAC3C,OAAOn6F,EAAOymC,oBAChB,IAAIrvB,EAAU+iF,EAAS3oF,SAASwnD,kBAC9B92B,EAAS,GACTi4D,EAAS/6B,YACTlzD,EAAAsH,KAAKG,KACLvH,EAAAwqD,WAAWmkC,SAEb,OAAO/6F,EAAOygC,UAAUrpB,EAAU,EAAI,GAExC,KAAKkoD,EAAe07B,WAElB,GADAb,EAAS97B,YAAcnyD,EAAAsH,KAAKvP,KAE1B42F,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAC3C,OAAOn6F,EAAOymC,oBAChB,IAAI9E,EAAOw4D,EAAS93B,4BAA4BngC,EAAS,GAAIh2B,EAAAsH,KAAK/P,IAAG,GAErE,OADA02F,EAAS97B,YAAcnyD,EAAAsH,KAAKvP,KACrBjE,EAAOygC,UAAUgoB,EAAA7W,gBAAgBjQ,IAAS8mB,EAAAh+B,aAAailB,MAAQ,EAAI,GAE5E,KAAK4vB,EAAejW,UAClB,IAAK8wC,EAASp4E,QAAQtR,MAEpB,OADA0pF,EAAS97B,YAAcnyD,EAAAsH,KAAKvP,KACrBjE,EAAOygC,UAAU,GAEtBjlB,EAAO6+E,EAAqBF,EAAU/xE,EAAe8Z,EAAU45B,GAEnE,OADAq+B,EAAS97B,YAAcnyD,EAAAsH,KAAKvP,KACvBuX,EAEgB,QADjBiuC,EAAYjuC,EAAKutC,iBACSU,EAAU5wC,aAAa2vC,EAAAj5C,eAAe0J,WAEhEjZ,EAAOygC,UAAU,GADjBzgC,EAAOygC,UAAU,GAHHzgC,EAAOymC,oBAM3B,KAAK64B,EAAe27B,OAElB,GADAd,EAAS97B,YAAc87B,EAAS7mF,QAAQI,UAEtCwnF,EAAkB9yE,EAAe0zC,EAAYq+B,GAC7CW,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAC3C,OAAOn6F,EAAOymC,oBAChB,IAAIxsB,EAAoBmO,EAAe,GAAGnO,SACtC0nB,OAAI,EAkBR,OAjBIw4D,EAAS7mF,QAAQc,SAEf0kD,EAAej9C,GAAE,IAAuBi9C,EAAelyB,MAAQ,IACjEuzD,EAAS97B,YAAcnyD,EAAAsH,KAAK1P,IAC5B69B,EAAO3hC,EAAOygC,UAAUxmB,IAExB0nB,EAAO3hC,EAAO6gC,UAAU5mB,EAAU,GAIhC6+C,EAAej9C,GAAE,IAA8C,IAAvBi9C,EAAelyB,MACzDuzD,EAAS97B,YAAcnyD,EAAAsH,KAAKzP,IAC5B49B,EAAO3hC,EAAO6gC,UAAU5mB,EAAU,IAElC0nB,EAAO3hC,EAAOygC,UAAUxmB,GAGrB0nB,EAET,KAAK29B,EAAe67B,QAElB,GADAhB,EAAS97B,YAAc87B,EAAS7mF,QAAQI,UAEtCwnF,EAAkB9yE,EAAe0zC,EAAYq+B,GAC7CW,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAC3C,OAAOn6F,EAAOymC,oBACZxsB,EAAoBmO,EAAe,GAAGnO,SAC1CpR,OAAOP,EAAAJ,WAAW+R,IAClB,IAAImhF,EAAYC,IAASphF,GACrB0nB,OAAI,EAkBR,OAjBIw4D,EAAS7mF,QAAQc,SAEf0kD,EAAej9C,GAAE,IAAuBi9C,EAAelyB,MAAQ,IACjEuzD,EAAS97B,YAAcnyD,EAAAsH,KAAK1P,IAC5B69B,EAAO3hC,EAAOygC,UAAU26D,IAExBz5D,EAAO3hC,EAAO6gC,UAAUu6D,EAAW,GAIjCtiC,EAAej9C,GAAE,IAA8C,IAAvBi9C,EAAelyB,MACzDuzD,EAAS97B,YAAcnyD,EAAAsH,KAAKzP,IAC5B49B,EAAO3hC,EAAO6gC,UAAUu6D,EAAW,IAEnCz5D,EAAO3hC,EAAOygC,UAAU26D,GAGrBz5D,EAET,KAAK29B,EAAe91C,SAElB,GADA2wE,EAAS97B,YAAc87B,EAAS7mF,QAAQI,UAEtCwnF,EAAkB9yE,EAAe0zC,EAAYq+B,GAC7CmB,EAAkBp5D,EAAU,EAAG,EAAG45B,EAAYq+B,GAC9C,OAAOn6F,EAAOymC,oBAChB,IAAIgjB,EACJ,KADIA,EAAYrhC,EAAe,GAAG2gC,gBAMhC,OAJAoxC,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAENv7F,EAAOymC,oBAEhB,IAAI1H,OAAM,EACV,GAAImD,EAASr6B,OAAQ,CACnB,GACEq6B,EAAS,GAAG/sB,MAAQhJ,EAAAiJ,SAASmK,SACT2iB,EAAS,GAAI1iB,aAAerT,EAAAsT,YAAYC,OAM5D,OAJAy6E,EAAStuF,MACPI,EAAA/C,eAAe6W,wBACfmiB,EAAS,GAAG14B,OAEPxJ,EAAOymC,oBAEhB,IAAIhd,EAAsCyY,EAAS,GAAIvgC,MACnD+nB,EAAQ+/B,EAAUpuC,QAAUouC,EAAUpuC,QAAQ9Z,IAAIkoB,GAAa,KACnE,IAAMC,GAASA,EAAMvU,MAAQqzC,EAAAl5C,YAAY6L,MAKvC,OAJAg/E,EAAStuF,MACPI,EAAA/C,eAAesyF,yBACft5D,EAAS,GAAG14B,MAAOigD,EAAUl4C,aAAckY,GAEtCzpB,EAAOymC,oBAEhB1H,EAAiBrV,EAAOhC,kBAExBqX,EAAS0qB,EAAUlhC,oBAErB,OAAI4xE,EAAS7mF,QAAQc,SAEf0kD,EAAej9C,GAAE,IAAuBi9C,EAAelyB,MAAQ,IACjEuzD,EAAS97B,YAAcnyD,EAAAsH,KAAK1P,IACrB9D,EAAOygC,UAAU1B,IAEjB/+B,EAAO6gC,UAAU9B,GAItB+5B,EAAej9C,GAAE,IAA8C,IAAvBi9C,EAAelyB,MACzDuzD,EAAS97B,YAAcnyD,EAAAsH,KAAKzP,IACrB/D,EAAO6gC,UAAU9B,IAEjB/+B,EAAOygC,UAAU1B,GAO9B,KAAKugC,EAAeyZ,IACpB,KAAKzZ,EAAe+7B,IACpB,KAAK/7B,EAAem8B,OAClB,GACEC,EAAkBtzE,EAAe0zC,EAAYq+B,GAAU,GACvDW,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAC3C,OAAOn6F,EAAOymC,oBAChB,IAAI/8B,EAAO0e,EACP+xE,EAASx3B,kBAAkBzgC,EAAS,GAAI9Z,EAAc,GAAE,KACxD+xE,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAK/P,IAAG,KAEpD,IADI+X,EAAO2+E,EAAS97B,aACXxiD,GAAE,KAKT,OAJAs+E,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAENv7F,EAAOymC,oBAEhB,IAAI/E,GAAe,EACnB,OAAQp/B,EAAUiP,cAChB,KAAK+tD,EAAeyZ,IAClB,OAAQv9D,EAAKrG,MACX,QACA,OACA,OACA,OACA,OACA,OACA,OAAqBusB,EAAK+mB,EAAAl7B,QAAQiwD,OAAQ,MAC1C,OACA,OACE97C,EAAKy4D,EAAS7mF,QAAQc,SAClBq0C,EAAAl7B,QAAQ6xD,OACR32B,EAAAl7B,QAAQiwD,OACZ,MAEF,OACA,OAAqB97C,EAAK+mB,EAAAl7B,QAAQ6xD,OAEpC,MAEF,KAAK9f,EAAe+7B,IAClB,OAAQ7/E,EAAKrG,MACX,QACA,OACA,OACA,OACA,OACA,OACA,OAAqBusB,EAAK+mB,EAAAl7B,QAAQkwD,OAAQ,MAC1C,OACA,OACE/7C,EAAKy4D,EAAS7mF,QAAQc,SAClBq0C,EAAAl7B,QAAQ8xD,OACR52B,EAAAl7B,QAAQkwD,OACZ,MAEF,OACA,OAAqB/7C,EAAK+mB,EAAAl7B,QAAQ8xD,OAEpC,MAEF,KAAK/f,EAAem8B,OAClB,OAAQtB,EAAS97B,YAAYlpD,MAC3B,QACA,OACA,OACA,OACA,OACA,OACA,OAAqBusB,EAAK+mB,EAAAl7B,QAAQmwD,UAAW,MAC7C,OACA,OACEh8C,EAAKy4D,EAAS7mF,QAAQc,SAClBq0C,EAAAl7B,QAAQ+xD,UACR72B,EAAAl7B,QAAQmwD,UACZ,MAEF,OACA,OAAqBh8C,EAAK+mB,EAAAl7B,QAAQ+xD,WAKxC,OAAW,GAAP59C,GACFy4D,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAENv7F,EAAOymC,qBAETzmC,EAAOyhC,YAAYC,EAAIh4B,GAEhC,KAAK41D,EAAeq8B,KAClB,GACED,EAAkBtzE,EAAe0zC,EAAYq+B,GAAU,GACvDW,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAC3C,OAAOn6F,EAAOymC,oBACZ/8B,EAAO0e,EACP+xE,EAASx3B,kBAAkBzgC,EAAS,GAAI9Z,EAAc,GAAE,KACxD+xE,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAK/P,IAAG,KAEpD,IADI+X,EAAO2+E,EAAS97B,aACXxiD,GAAE,KAKT,OAJAs+E,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAENv7F,EAAOymC,oBAEhB,IAAI98B,EAAOwwF,EAASx3B,kBAAkBzgC,EAAS,GAAI1mB,EAAI,KACnDmmB,OAAI,EACR,OAAQnmB,EAAKrG,MACX,OACA,OACA,OACA,OACA,QACEwsB,EAAOw4D,EAAS9uB,uBACdrrE,EAAO6hC,aAAa4mB,EAAA51B,SAASotD,QAASv2E,EAAMC,GAC5C6R,GAIJ,OACA,OACEmmB,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASotD,QAASv2E,EAAMC,GACnD,MAEF,OACA,OACEg4B,EAAO3hC,EAAO6hC,aACZs4D,EAAS7mF,QAAQc,SACbq0C,EAAA51B,SAASstD,QACT13B,EAAA51B,SAASotD,QACbv2E,EAAMC,GAER,MAEF,OACA,OACEg4B,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASstD,QAASz2E,EAAMC,GACnD,MAEF,QACEwwF,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAEb55D,EAAO3hC,EAAOymC,oBAIlB,OAAO9E,EAET,KAAK29B,EAAes8B,KAClB,GACEF,EAAkBtzE,EAAe0zC,EAAYq+B,GAAU,GACvDW,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAC3C,OAAOn6F,EAAOymC,oBACZ/8B,EAAO0e,EACP+xE,EAASx3B,kBAAkBzgC,EAAS,GAAI9Z,EAAc,GAAE,KACxD+xE,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAK/P,IAAG,KAEpD,IADI+X,EAAO2+E,EAAS97B,aACXxiD,GAAE,KAKT,OAJAs+E,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAENv7F,EAAOymC,oBAEZ98B,EAAOwwF,EAASx3B,kBAAkBzgC,EAAS,GAAI1mB,EAAI,KACnDmmB,OAAI,EACR,OAAQnmB,EAAKrG,MACX,OACA,OACA,OACA,OACA,QACEwsB,EAAOw4D,EAAS9uB,uBACdrrE,EAAO6hC,aAAa4mB,EAAA51B,SAASqtD,QAASx2E,EAAMC,GAC5C6R,GAEF,MAEF,OACA,OACEmmB,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASqtD,QAASx2E,EAAMC,GACnD,MAEF,OACA,OACEg4B,EAAO3hC,EAAO6hC,aACZs4D,EAAS7mF,QAAQc,SACbq0C,EAAA51B,SAASutD,QACT33B,EAAA51B,SAASqtD,QACbx2E,EAAMC,GAER,MAEF,OACA,OACEg4B,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASutD,QAAS12E,EAAMC,GACnD,MAEF,QACEwwF,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAEb55D,EAAO3hC,EAAOymC,oBAIlB,OAAO9E,EAET,KAAK29B,EAAekvB,IAClB,GACEkN,EAAkBtzE,EAAe0zC,EAAYq+B,GAAU,GACvDW,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAC3C,OAAOn6F,EAAOymC,oBACZ/8B,EAAO0e,EACP+xE,EAASx3B,kBAAkBzgC,EAAS,GAAI9Z,EAAc,GAAE,KACxD+xE,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKrP,IAAG,KAEpD,IADIqX,EAAO2+E,EAAS97B,aACXxiD,GAAE,KAKT,OAJAs+E,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAENv7F,EAAOymC,oBAEZ9E,OAAI,EACR,OAAQnmB,EAAKrG,MACX,OACA,OACA,OACE,IAGI0mF,GAHAr1E,EAAO2zE,EAAS/6B,aAGEoJ,aAAat8D,EAAAsH,KAAK/P,KAAK,GACzCq4F,EAAkBt1E,EAAKurD,oBAAoB7lE,EAAAsH,KAAK/P,KAAK,GAAOwgB,MAC5D83E,EAAkBF,EAAW53E,MAGjC0d,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASg/C,OAClC7xE,EAAO6hC,aAAa4mB,EAAA51B,SAASuwC,OAC3BpjE,EAAOuiC,eACLu5D,EACA97F,EAAO6hC,aAAa4mB,EAAA51B,SAASw+C,OAC3BrxE,EAAOuiC,eAAew5D,EAAiBryF,GACvC1J,EAAOygC,UAAU,MAGrBzgC,EAAOqiC,eAAe05D,EAAiBtzC,EAAAj+B,WAAWhkB,MAEpDxG,EAAOqiC,eAAey5D,EAAiBrzC,EAAAj+B,WAAWhkB,MAGpDggB,EAAKsiD,cAAc+yB,GACnB,MAEF,OACE,IAAIvoF,EAAU6mF,EAAS7mF,QACnBkT,EAAO2zE,EAAS/6B,YAChB48B,EAAS1oF,EAAQc,SAEjBynF,EAAar1E,EAAKgiD,aAAal1D,EAAQI,WAAW,GAClDooF,EAAkBt1E,EAAKurD,oBAAoBz+D,EAAQI,WAAW,GAAOuQ,MACrE83E,EAAkBF,EAAW53E,MAEjC0d,EAAO3hC,EAAO6hC,aAAam6D,EAASvzC,EAAA51B,SAASi/C,OAASrpB,EAAA51B,SAASg/C,OAC7D7xE,EAAO6hC,aAAam6D,EAASvzC,EAAA51B,SAAS68C,OAASjnB,EAAA51B,SAASuwC,OACtDpjE,EAAOuiC,eACLu5D,EACA97F,EAAO6hC,aAAam6D,EAASvzC,EAAA51B,SAASy+C,OAAS7oB,EAAA51B,SAASw+C,OACtDrxE,EAAOuiC,eAAew5D,EAAiBryF,GACvCsyF,EAASh8F,EAAO6gC,UAAU,IAAM7gC,EAAOygC,UAAU,MAGrDzgC,EAAOqiC,eAAe05D,EAAiBzoF,EAAQwtD,iBAEjD9gE,EAAOqiC,eAAey5D,EAAiBxoF,EAAQwtD,iBAGjDt6C,EAAKsiD,cAAc+yB,GACnB,MAEF,OAGMA,GAFAr1E,EAAO2zE,EAAS/6B,aAEEoJ,aAAat8D,EAAAsH,KAAK9P,KAAK,GACzCo4F,EAAkBt1E,EAAKurD,oBAAoB7lE,EAAAsH,KAAK9P,KAAK,GAAOugB,MAC5D83E,EAAkBF,EAAW53E,MAGjC0d,EAAO3hC,EAAO6hC,aAAa4mB,EAAA51B,SAASi/C,OAClC9xE,EAAO6hC,aAAa4mB,EAAA51B,SAAS68C,OAC3B1vE,EAAOuiC,eACLu5D,EACA97F,EAAO6hC,aAAa4mB,EAAA51B,SAASy+C,OAC3BtxE,EAAOuiC,eAAew5D,EAAiBryF,GACvC1J,EAAO6gC,UAAU,MAGrB7gC,EAAOqiC,eAAe05D,EAAiBtzC,EAAAj+B,WAAW/jB,MAEpDzG,EAAOqiC,eAAey5D,EAAiBrzC,EAAAj+B,WAAW/jB,MAGpD+f,EAAKsiD,cAAc+yB,GACnB,MAEF,OACA,OACA,OACA,OACA,OACA,QACEl6D,EAAOj4B,EACP,MAEF,QACEi4B,EAAO3hC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQuxD,OAAQp1E,GAC1C,MAEF,QACEi4B,EAAO3hC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQgyD,OAAQ71E,GAC1C,MAEF,QACEywF,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAEb55D,EAAO3hC,EAAOymC,oBAIlB,OAAO9E,EAET,KAAK29B,EAAeN,IAClB,GACE08B,EAAkBtzE,EAAe0zC,EAAYq+B,GAAU,GACvDW,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAC3C,OAAOn6F,EAAOymC,oBACZ/8B,EAAO0e,EACP+xE,EAASx3B,kBAAkBzgC,EAAS,GAAI9Z,EAAc,GAAE,KACxD+xE,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKrP,IAAG,KAEpD,IADIqX,EAAO2+E,EAAS97B,aACXxiD,GAAE,KAKT,OAJAs+E,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAENv7F,EAAOymC,oBAEZ98B,EAAOwwF,EAASx3B,kBAAkBzgC,EAAS,GAAI1mB,EAAI,KACnDkmB,OAAE,EACN,OAAQlmB,EAAKrG,MACX,OACA,OACA,OAAqBusB,EAAK+mB,EAAA51B,SAASk7C,MAAO,MAC1C,OACA,OACA,OACA,QAAsBrsC,EAAK+mB,EAAA51B,SAASo7C,MAAO,MAC3C,OAAqBvsC,EAAK+mB,EAAA51B,SAASm7C,MAAO,MAC1C,OAAqBtsC,EAAK+mB,EAAA51B,SAASq7C,MAAO,MAC1C,OACExsC,EAAKy4D,EAAS7mF,QAAQc,SAClBq0C,EAAA51B,SAASm7C,MACTvlB,EAAA51B,SAASk7C,MACb,MAEF,OACErsC,EAAKy4D,EAAS7mF,QAAQc,SAClBq0C,EAAA51B,SAASq7C,MACTzlB,EAAA51B,SAASo7C,MACb,MAEF,QACE,OAAOjuE,EAAO6hC,aAAa4mB,EAAA51B,SAAS0tD,OAAQ72E,EAAMC,GAEpD,QACE,OAAO3J,EAAO6hC,aAAa4mB,EAAA51B,SAAS6tD,OAAQh3E,EAAMC,GAEpD,QAKE,OAJAwwF,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAENv7F,EAAOymC,oBAGdjgB,EAAO2zE,EAAS/6B,YAApB,IACIyB,EAAarlD,EAAK2uC,eAClB8xC,EAAaz1E,EAAKgiD,aAAahtD,GAAM,GACrCqgF,EAAar1E,EAAKurD,oBAAoBv2D,GAAM,GAEhD,OADAgL,EAAKsiD,cAAcmzB,GACZj8F,EAAO4lC,aACZ5lC,EAAOuiC,eAAe05D,EAAWh4E,MAAOva,GACxC1J,EAAOuiC,eAAes5D,EAAW53E,MAAOta,GACxC3J,EAAO6hC,aAAaH,EAClB1hC,EAAOqiC,eAAe45D,EAAWh4E,MAAO48C,GACxC7gE,EAAOqiC,eAAew5D,EAAW53E,MAAO48C,KAI9C,KAAKvB,EAAe8d,IAClB,GACEse,EAAkBtzE,EAAe0zC,EAAYq+B,GAAU,GACvDW,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAC3C,OAAOn6F,EAAOymC,oBACZ/8B,EAAO0e,EACP+xE,EAASx3B,kBAAkBzgC,EAAS,GAAI9Z,EAAc,GAAE,KACxD+xE,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKrP,IAAG,KAEpD,IADIqX,EAAO2+E,EAAS97B,aACXxiD,GAAE,KAKT,OAJAs+E,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAENv7F,EAAOymC,oBAEZ98B,EAAOwwF,EAASx3B,kBAAkBzgC,EAAS,GAAI1mB,EAAI,KACnDkmB,OAAE,EACN,OAAQlmB,EAAKrG,MACX,OACA,OACA,OAAqBusB,EAAK+mB,EAAA51B,SAAS46C,MAAO,MAC1C,OACA,OACA,OACA,QAAsB/rC,EAAK+mB,EAAA51B,SAAS86C,MAAO,MAC3C,OAAsBjsC,EAAK+mB,EAAA51B,SAAS66C,MAAO,MAC3C,OAAsBhsC,EAAK+mB,EAAA51B,SAAS+6C,MAAO,MAC3C,OACElsC,EAAKy4D,EAAS7mF,QAAQc,SAClBq0C,EAAA51B,SAAS66C,MACTjlB,EAAA51B,SAAS46C,MACb,MAEF,OACE/rC,EAAKy4D,EAAS7mF,QAAQc,SAClBq0C,EAAA51B,SAAS+6C,MACTnlB,EAAA51B,SAAS86C,MACb,MAEF,QACE,OAAO3tE,EAAO6hC,aAAa4mB,EAAA51B,SAASytD,OAAQ52E,EAAMC,GAEpD,QACE,OAAO3J,EAAO6hC,aAAa4mB,EAAA51B,SAAS4tD,OAAQ/2E,EAAMC,GAEpD,QAKE,OAJAwwF,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAENv7F,EAAOymC,oBAGdjgB,EAAO2zE,EAAS/6B,YAChByB,EAAarlD,EAAK2uC,eAClB8xC,EAAaz1E,EAAKgiD,aAAahtD,GAAM,GACrCqgF,EAAar1E,EAAKurD,oBAAoBv2D,GAAM,GAEhD,OADAgL,EAAKsiD,cAAcmzB,GACZj8F,EAAO4lC,aACZ5lC,EAAOuiC,eAAe05D,EAAWh4E,MAAOva,GACxC1J,EAAOuiC,eAAes5D,EAAW53E,MAAOta,GACxC3J,EAAO6hC,aAAaH,EAClB1hC,EAAOqiC,eAAe45D,EAAWh4E,MAAO48C,GACxC7gE,EAAOqiC,eAAew5D,EAAW53E,MAAO48C,KAI9C,KAAKvB,EAAexW,KACpB,KAAKwW,EAAemvB,MAClB,GACEiN,EAAkBtzE,EAAe0zC,EAAYq+B,GAAU,GACvDW,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAC3C,OAAOn6F,EAAOymC,oBACZ/8B,EAAO0e,EACP+xE,EAASx3B,kBAAkBzgC,EAAS,GAAI9Z,EAAc,GAAE,KACxD+xE,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKrP,IAAG,KAEpD,IADIqX,EAAO2+E,EAAS97B,aACXxiD,GAAE,KAKT,OAJAs+E,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAENv7F,EAAOymC,oBAEZ/E,OAAE,EACN,OAAQlmB,EAAKrG,MACX,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QAAoB,OAAOzL,EAC3B,QACEg4B,EAAKp/B,EAAUiP,cAAgB+tD,EAAexW,KAC1CL,EAAAl7B,QAAQwxD,QACRt2B,EAAAl7B,QAAQyxD,SACZ,MAEF,QACEt9C,EAAKp/B,EAAUiP,cAAgB+tD,EAAexW,KAC1CL,EAAAl7B,QAAQiyD,QACR/2B,EAAAl7B,QAAQkyD,SACZ,MAEF,QAKE,OAJA0a,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAENv7F,EAAOymC,oBAGlB,OAAOzmC,EAAOyhC,YAAYC,EAAIh4B,GAEhC,KAAK41D,EAAe48B,SAClB,GACER,EAAkBtzE,EAAe0zC,EAAYq+B,GAAU,GACvDW,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAC3C,OAAOn6F,EAAOymC,oBACZ/8B,EAAO0e,EACP+xE,EAASx3B,kBAAkBzgC,EAAS,GAAI9Z,EAAc,GAAE,KACxD+xE,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKrP,IAAG,KAEpD,IADIqX,EAAO2+E,EAAS97B,aACXxiD,GAAE,KAKT,OAJAs+E,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAENv7F,EAAOymC,oBAEZ98B,EAAOwwF,EAASx3B,kBAAkBzgC,EAAS,GAAI1mB,EAAI,KACnDkmB,OAAE,EACN,OAAQlmB,EAAKrG,MAEX,QAAqBusB,EAAK+mB,EAAA51B,SAASwtD,YAAa,MAChD,QAAqB3+C,EAAK+mB,EAAA51B,SAAS2tD,YAAa,MAChD,QAKE,OAJA2Z,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAENv7F,EAAOymC,oBAGlB,OAAOzmC,EAAO6hC,aAAaH,EAAIh4B,EAAMC,GAEvC,KAAK21D,EAAe68B,QAClB,GACET,EAAkBtzE,EAAe0zC,EAAYq+B,GAAU,GACvDW,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAC3C,OAAOn6F,EAAOymC,oBACZ/8B,EAAO0e,EACP+xE,EAASx3B,kBAAkBzgC,EAAS,GAAI9Z,EAAc,GAAE,KACxD+xE,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKrP,IAAG,KAEpD,IADIqX,EAAO2+E,EAAS97B,aACXxiD,GAAE,KAKT,OAJAs+E,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAENv7F,EAAOymC,oBAEZ9E,OAAI,EACR,OAAQnmB,EAAKrG,MACX,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QACEwsB,EAAOj4B,EACP,MAEF,QACEi4B,EAAO3hC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQ2xD,WAAYx1E,GAC9C,MAEF,QACEi4B,EAAO3hC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQoyD,WAAYj2E,GAC9C,MAEF,QACEywF,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAEb55D,EAAO3hC,EAAOymC,oBAIlB,OAAO9E,EAET,KAAK29B,EAAe88B,YAClB,GACElB,EAAkB9yE,EAAe0zC,EAAYq+B,GAAU,GACvDW,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAC3C,OAAOn6F,EAAOymC,oBAEhB,IADIjrB,EAAO4M,EAAe,IACjBvM,GAAE,KAMT,OALAs+E,EAAS97B,YAAc7iD,EACvB2+E,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAENv7F,EAAOymC,oBAEZ9E,OAAI,EACR,OAAQnmB,EAAKrG,MACX,OACA,OACMzL,EAAOywF,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKtP,IAAG,KAC3Dy9B,EAAO3hC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQsyD,eAAgBn2E,GAClD,MAEF,OACA,OACMA,EAAOywF,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKrP,IAAG,KAC3Dw9B,EAAO3hC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQuyD,eAAgBp2E,GAClD,MAEF,OACA,OACMA,EAAOywF,EAASx3B,kBAClBzgC,EAAS,GACTi4D,EAAS7mF,QAAQc,SACblI,EAAAsH,KAAKrP,IACL+H,EAAAsH,KAAKtP,IAAG,KAIdy9B,EAAO3hC,EAAOyhC,YACZ04D,EAAS7mF,QAAQc,SACbq0C,EAAAl7B,QAAQuyD,eACRr3B,EAAAl7B,QAAQsyD,eACZn2E,GAEF,MAEF,QACMA,EAAOywF,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAK/P,IAAG,KAC3Dk+B,EAAO3hC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQwyD,eAAgBr2E,GAClD,MAEF,QACMA,EAAOywF,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAK9P,IAAG,KAC3Di+B,EAAO3hC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQyyD,eAAgBt2E,GAClD,MAEF,QACEywF,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAEb55D,EAAO3hC,EAAOymC,oBAKlB,OADA0zD,EAAS97B,YAAc7iD,EAChBmmB,EAET,KAAK29B,EAAesvB,KAClB,GACE8M,EAAkBtzE,EAAe0zC,EAAYq+B,GAAU,GACvDW,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAC3C,OAAOn6F,EAAOymC,oBACZ/8B,EAAO0e,EACP+xE,EAASx3B,kBAAkBzgC,EAAS,GAAI9Z,EAAc,GAAE,KACxD+xE,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKrP,IAAG,KAEpD,IADIqX,EAAO2+E,EAAS97B,aACXxiD,GAAE,KAMT,OALAs+E,EAAS97B,YAAc7iD,EACvB2+E,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAENv7F,EAAOymC,oBAEZ9E,OAAI,EACR,OAAQnmB,EAAKrG,MACX,QACEwsB,EAAO3hC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQ4xD,QAASz1E,GAC3C,MAEF,QACEi4B,EAAO3hC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQqyD,QAASl2E,GAC3C,MAEF,QACEywF,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAEb55D,EAAO3hC,EAAOymC,oBAIlB,OAAO9E,EAET,KAAK29B,EAAeovB,MAClB,GACEgN,EAAkBtzE,EAAe0zC,EAAYq+B,GAAU,GACvDW,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAC3C,OAAOn6F,EAAOymC,oBACZ/8B,EAAO0e,EACP+xE,EAASx3B,kBAAkBzgC,EAAS,GAAI9Z,EAAc,GAAE,KACxD+xE,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKrP,IAAG,KAEpD,IADIqX,EAAO2+E,EAAS97B,aACXxiD,GAAE,KAKT,OAJAs+E,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWtyD,OAENxJ,EAAOymC,oBAEZ9E,OAAI,EACR,OAAQnmB,EAAKrG,MACX,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QACEwsB,EAAOj4B,EACP,MAGF,QACEi4B,EAAO3hC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQ0xD,SAAUv1E,GAC5C,MAEF,QACEi4B,EAAO3hC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQmyD,SAAUh2E,GAC5C,MAEF,QACEywF,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAEb55D,EAAO3hC,EAAOymC,oBAIlB,OAAO9E,EAKT,KAAK29B,EAAe7wB,KAClB,GACEysD,EAAkB9yE,EAAe0zC,EAAYq+B,GAAU,GACvDmB,EAAkBp5D,EAAU,EAAG,EAAG45B,EAAYq+B,GAC9C,OAAOn6F,EAAOymC,oBAChB,IACI41D,GADA7gF,EAAO4M,EAAe,IAEnBvM,GAAE,IACPi9C,EAAej9C,GAAE,IACjBi9C,EAAelyB,KAAOprB,EAAKorB,KACzBkyB,EAAiBt9C,EACjB9R,EAAOywF,EAASx3B,kBAClBzgC,EAAS,GACTi4D,EAAS7mF,QAAQI,UAAS,KAM5B,IADI4oF,GADAjmB,GAAcn0C,EAASr6B,SACI,EAAI00F,EAAwBr6D,EAAS,GAAIi4D,GAAY,GACpE,EAEd,OADAA,EAAS97B,YAAcg+B,EAChBr8F,EAAOymC,oBAEhB,IAAI+1D,OAAQ,EACRC,EAAejhF,EAAKvB,SACxB,GAAmB,GAAfo8D,GAAkB,CAEpB,IADAmmB,EAAWD,EAAwBr6D,EAAS,GAAIi4D,IACjC,EAEb,OADAA,EAAS97B,YAAcg+B,EAChBr8F,EAAOymC,oBAEhB,GAAI+1D,EAAWC,EAMb,OALAtC,EAAStuF,MACPI,EAAA/C,eAAewzF,6CACfx6D,EAAS,GAAG14B,MAAO,YAAa,IAAKizF,EAAatyF,YAEpDgwF,EAAS97B,YAAcg+B,EAChBr8F,EAAOymC,oBAEhB,IAAKn+B,EAAAJ,WAAWs0F,GAMd,OALArC,EAAStuF,MACPI,EAAA/C,eAAeyzF,0BACfz6D,EAAS,GAAG14B,MAAO,aAErB2wF,EAAS97B,YAAcg+B,EAChBr8F,EAAOymC,yBAGhB+1D,EAAWC,EAGb,OADAtC,EAAS97B,YAAcg+B,EAChBr8F,EAAO2iC,WACZnnB,EAAKvB,SACLuB,EAAKK,GAAG,GACRnS,EACA2yF,EAAQlyC,eACRmyC,EACAE,GAGJ,KAAKl9B,EAAe/9B,MAElB,GADA44D,EAAS97B,YAAcnyD,EAAAsH,KAAKG,KAE1BunF,EAAkB9yE,EAAe0zC,EAAYq+B,GAC7CmB,EAAkBp5D,EAAU,EAAG,EAAG45B,EAAYq+B,GAC9C,OAAOn6F,EAAOymC,oBACZjrB,EAAO4M,EAAe,GACtB1e,EAAOywF,EAASx3B,kBAClBzgC,EAAS,GACTi4D,EAAS7mF,QAAQI,UAAS,KAIxB/J,EAAOywF,EACPD,EAASx3B,kBACPzgC,EAAS,GACT42B,EAAc,KAIhBqhC,EAASx3B,kBACPzgC,EAAS,GACT1mB,EACAA,EAAKK,GAAE,GACJ,EACA,EAAwB,GAnBjC,IAsBI+gF,EAASzC,EAAS97B,YAkBtB,GAhBE7iD,EAAKK,GAAE,MAEJ+gF,EAAO/gF,GAAE,IACV+gF,EAAOh2D,KAAOprB,EAAKorB,QAGrBj9B,EAAOwwF,EAAS/uB,kBACdzhE,EACAizF,EAAQphF,EAAI,IAGZ0mB,EAAS,IAEX06D,EAASphF,IAEP8gF,EAAYp6D,EAASr6B,QAAU,EAAI00F,EAAwBr6D,EAAS,GAAIi4D,GAAY,GACxE,EAEd,OADAA,EAAS97B,YAAcnyD,EAAAsH,KAAKG,KACrB3T,EAAOymC,oBAEZ+1D,OAAQ,EACRC,EAAejhF,EAAKvB,SACxB,GAAuB,GAAnBioB,EAASr6B,OAAa,CAExB,IADA20F,EAAWD,EAAwBr6D,EAAS,GAAIi4D,IACjC,EAEb,OADAA,EAAS97B,YAAcnyD,EAAAsH,KAAKG,KACrB3T,EAAOymC,oBAEhB,GAAI+1D,EAAWC,EAMb,OALAtC,EAAStuF,MACPI,EAAA/C,eAAewzF,6CACfx6D,EAAS,GAAG14B,MAAO,YAAa,IAAKizF,EAAatyF,YAEpDgwF,EAAS97B,YAAcnyD,EAAAsH,KAAKG,KACrB3T,EAAOymC,oBAEhB,IAAKn+B,EAAAJ,WAAWs0F,GAMd,OALArC,EAAStuF,MACPI,EAAA/C,eAAeyzF,0BACfz6D,EAAS,GAAG14B,MAAO,aAErB2wF,EAAS97B,YAAcnyD,EAAAsH,KAAKG,KACrB3T,EAAOymC,yBAGhB+1D,EAAWC,EAGb,OADAtC,EAAS97B,YAAcnyD,EAAAsH,KAAKG,KACrB3T,EAAOgjC,YAAYxnB,EAAKvB,SAAUvQ,EAAMC,EAAMizF,EAAOzyC,eAAgBmyC,EAAWE,GAKzF,KAAKl9B,EAAeu9B,YAClB,IAAK1C,EAAS7mF,QAAQW,WAAU,IAAmB,MACnD,GACEinF,EAAkB9yE,EAAe0zC,EAAYq+B,GAAU,GACvDmB,EAAkBp5D,EAAU,EAAG,EAAG45B,EAAYq+B,GAC9C,OAAOn6F,EAAOymC,oBAEZ41D,GADA7gF,EAAO4M,EAAe,IAEnBvM,GAAE,IACPi9C,EAAej9C,GAAE,IACjBi9C,EAAelyB,KAAOprB,EAAKorB,KACzBkyB,EAAiBt9C,EACrB,IAAKA,EAAKK,GAAE,GAMV,OALAs+E,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAEbpB,EAAS97B,YAAcg+B,EAChBr8F,EAAOymC,oBAEZ/8B,EAAOywF,EAASx3B,kBAClBzgC,EAAS,GACTi4D,EAAS7mF,QAAQI,UAAS,KAK5B,OADI4oF,EAA+B,GAAnBp6D,EAASr6B,OAAc00F,EAAwBr6D,EAAS,GAAIi4D,GAAY,GACxE,GACdA,EAAS97B,YAAcg+B,EAChBr8F,EAAOymC,sBAEhB0zD,EAAS97B,YAAcg+B,EAChBr8F,EAAOkjC,iBACZ1nB,EAAKvB,SACLvQ,EACA2yF,EAAQlyC,eACRmyC,IAGJ,KAAKh9B,EAAew9B,aAClB,IAAK3C,EAAS7mF,QAAQW,WAAU,IAAmB,MAEnD,GADAkmF,EAAS97B,YAAcnyD,EAAAsH,KAAKG,KAE1BunF,EAAkB9yE,EAAe0zC,EAAYq+B,GAC7CmB,EAAkBp5D,EAAU,EAAG,EAAG45B,EAAYq+B,GAC9C,OAAOn6F,EAAOymC,oBAEhB,KADIjrB,EAAO4M,EAAe,IAChBvM,GAAE,IAAuBL,EAAKorB,KAAO,EAK7C,OAJAuzD,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAENv7F,EAAOymC,oBAEZ/8B,EAAOywF,EAASx3B,kBAClBzgC,EAAS,GACTi4D,EAAS7mF,QAAQI,UAAS,KAIxB/J,EAAOywF,EACPD,EAASx3B,kBACPzgC,EAAS,GACT42B,EAAc,KAIhBqhC,EAASx3B,kBACPzgC,EAAS,GACT1mB,EACAA,EAAKK,GAAE,GACJ,EACA,EAAwB,GAG7B+gF,EAASzC,EAAS97B,YAkBtB,OAhBE7iD,EAAKK,GAAE,MAEJ+gF,EAAO/gF,GAAE,IACV+gF,EAAOh2D,KAAOprB,EAAKorB,QAGrBj9B,EAAOwwF,EAAS/uB,kBACdzhE,EACAizF,EAAQphF,EAAI,IAGZ0mB,EAAS,IAEX06D,EAASphF,IAEP8gF,EAA+B,GAAnBp6D,EAASr6B,OAAc00F,EAAwBr6D,EAAS,GAAIi4D,GAAY,GACxE,GACdA,EAAS97B,YAAcnyD,EAAAsH,KAAKG,KACrB3T,EAAOymC,sBAEhB0zD,EAAS97B,YAAcnyD,EAAAsH,KAAKG,KACrB3T,EAAOojC,kBAAkB5nB,EAAKvB,SAAUvQ,EAAMC,EAAMizF,EAAOzyC,eAAgBmyC,IAEpF,KAAKh9B,EAAey9B,WACpB,KAAKz9B,EAAe09B,WACpB,KAAK19B,EAAe29B,WACpB,KAAK39B,EAAe49B,UACpB,KAAK59B,EAAe69B,WACpB,KAAK79B,EAAe89B,YAClB,IAAKjD,EAAS7mF,QAAQW,WAAU,IAAmB,MACnD,GACEinF,EAAkB9yE,EAAe0zC,EAAYq+B,GAAU,GACvDmB,EAAkBp5D,EAAU,EAAG,EAAG45B,EAAYq+B,GAC9C,OAAOn6F,EAAOymC,oBAEhB,KADIjrB,EAAO4M,EAAe,IAChBvM,GAAE,IAAuBL,EAAKorB,KAAO,EAK7C,OAJAuzD,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAENv7F,EAAOymC,oBAEZ/8B,EAAOywF,EAASx3B,kBAClBzgC,EAAS,GACTi4D,EAAS7mF,QAAQI,UAAS,KAIxB/J,EAAOywF,EACPD,EAASx3B,kBACPzgC,EAAS,GACT42B,EAAc,KAIhBqhC,EAASx3B,kBACPzgC,EAAS,GACT1mB,EACAA,EAAKK,GAAE,GACJ,EACA,EAAwB,GAG7B+gF,EAASzC,EAAS97B,YAkBtB,GAhBE7iD,EAAKK,GAAE,MAEJ+gF,EAAO/gF,GAAE,IACV+gF,EAAOh2D,KAAOprB,EAAKorB,QAGrBj9B,EAAOwwF,EAAS/uB,kBACdzhE,EACAizF,EAAQphF,EAAI,IAGZ0mB,EAAS,IAEX06D,EAASphF,IAEP8gF,EAA+B,GAAnBp6D,EAASr6B,OAAc00F,EAAwBr6D,EAAS,GAAIi4D,GAAY,GACxE,EAEd,OADAA,EAAS97B,YAAcu+B,EAChB58F,EAAOymC,oBAEZ/E,OAAE,EACN,OAAQp/B,EAAUiP,cAChB,QAAS1I,QAAO,GAChB,KAAKy2D,EAAey9B,WAAer7D,EAAK+mB,EAAAhsB,YAAY4gE,IAAM,MAC1D,KAAK/9B,EAAe09B,WAAet7D,EAAK+mB,EAAAhsB,YAAY6gE,IAAM,MAC1D,KAAKh+B,EAAe29B,WAAev7D,EAAK+mB,EAAAhsB,YAAY8gE,IAAM,MAC1D,KAAKj+B,EAAe49B,UAAex7D,EAAK+mB,EAAAhsB,YAAY+gE,GAAM,MAC1D,KAAKl+B,EAAe69B,WAAez7D,EAAK+mB,EAAAhsB,YAAYghE,IAAM,MAC1D,KAAKn+B,EAAe89B,YAAe17D,EAAK+mB,EAAAhsB,YAAYihE,KAGtD,OADAvD,EAAS97B,YAAcu+B,EAChB58F,EAAOsjC,gBACZ5B,EAAIlmB,EAAKvB,SAAUqiF,EAAW5yF,EAAMC,EAAMizF,EAAOzyC,gBAGrD,KAAKmV,EAAeq+B,eAClB,IAAKxD,EAAS7mF,QAAQW,WAAU,IAAmB,MACnD,GACEinF,EAAkB9yE,EAAe0zC,EAAYq+B,GAAU,GACvDmB,EAAkBp5D,EAAU,EAAG,EAAG45B,EAAYq+B,GAC9C,OAAOn6F,EAAOymC,oBAEhB,KADIjrB,EAAO4M,EAAe,IAChBvM,GAAE,IAAuBL,EAAKorB,KAAO,EAK7C,OAJAuzD,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAENv7F,EAAOymC,oBAEZ/8B,EAAOywF,EAASx3B,kBAClBzgC,EAAS,GACTi4D,EAAS7mF,QAAQI,UAAS,KAIxB/J,EAAOywF,EACPD,EAASx3B,kBACPzgC,EAAS,GACT42B,EAAc,KAIhBqhC,EAASx3B,kBACPzgC,EAAS,GACT1mB,EACAA,EAAKK,GAAE,GACJ,EACA,EAAwB,GAG7B+gF,EAASzC,EAAS97B,YArBtB,IAmDIi+B,EA7BA1yF,EAAOuwF,EAASx3B,kBAClBzgC,EAAS,GACT06D,EAAM,KA4BR,OAvBEphF,EAAKK,GAAE,MAEJ+gF,EAAO/gF,GAAE,IACV+gF,EAAOh2D,KAAOprB,EAAKorB,QAGrBj9B,EAAOwwF,EAAS/uB,kBACdzhE,EACAizF,EAAQphF,EAAI,IAGZ0mB,EAAS,IAEXt4B,EAAOuwF,EAAS/uB,kBACdxhE,EACAgzF,EAAQphF,EAAI,IAGZ0mB,EAAS,IAEX06D,EAASphF,IAEP8gF,EAA+B,GAAnBp6D,EAASr6B,OAAc00F,EAAwBr6D,EAAS,GAAIi4D,GAAY,GACxE,GACdA,EAAS97B,YAAcu+B,EAChB58F,EAAOymC,sBAEhB0zD,EAAS97B,YAAcu+B,EAChB58F,EAAOwjC,oBACZhoB,EAAKvB,SAAUqiF,EAAW5yF,EAAMC,EAAMC,EAAMgzF,EAAOzyC,iBAGvD,KAAKmV,EAAes+B,YAClB,IAAKzD,EAAS7mF,QAAQW,WAAU,IAAmB,MAEnD,GADAkmF,EAAS97B,YAAcnyD,EAAAsH,KAAK/P,IAE1By3F,EAAkB9yE,EAAe0zC,EAAYq+B,GAC7CW,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAC3C,OAAOn6F,EAAOymC,oBAEhB,KADIjrB,EAAO4M,EAAe,IAChBvM,GAAE,IAAuBL,EAAKorB,KAAO,GAK7C,OAJAuzD,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAENv7F,EAAOymC,oBAEZ/8B,EAAOywF,EAASx3B,kBAClBzgC,EAAS,GACTi4D,EAAS7mF,QAAQI,UAAS,KAIxB/J,EAAOwwF,EAASx3B,kBAClBzgC,EAAS,GACT1mB,EAAI,KAIF5R,EAAOuwF,EAASx3B,kBAClBzgC,EAAS,GACTh2B,EAAAsH,KAAK9P,IAAG,KAKV,OADAy2F,EAAS97B,YAAcnyD,EAAAsH,KAAK/P,IACrBzD,EAAO4jC,iBAAiBl6B,EAAMC,EAAMC,EAAM4R,EAAK2uC,gBAExD,KAAKmV,EAAeu+B,cAClB,IAAK1D,EAAS7mF,QAAQW,WAAU,IAAmB,MAEnD,GADAkmF,EAAS97B,YAAcnyD,EAAAsH,KAAK/P,IAE1By3F,EAAkB9yE,EAAe0zC,EAAYq+B,GAC7CW,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAC3C,OAAOn6F,EAAOymC,oBAEhB,KADIjrB,EAAO4M,EAAe,IAChBvM,GAAE,IAAuBL,EAAKorB,KAAO,GAK7C,OAJAuzD,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAENv7F,EAAOymC,oBAEZ/8B,EAAOywF,EAASx3B,kBAClBzgC,EAAS,GACTi4D,EAAS7mF,QAAQI,UAAS,KAIxB/J,EAAOwwF,EAASx3B,kBAClBzgC,EAAS,GACT1mB,EAAI,KAKN,OADA2+E,EAAS97B,YAAcnyD,EAAAsH,KAAK/P,IACrBzD,EAAOgkC,iBAAiBt6B,EAAMC,GAKvC,KAAK21D,EAAew+B,OAClB,GACEpC,EAAkBtzE,EAAe0zC,EAAYq+B,GAAU,GACvDW,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAC3C,OAAOn6F,EAAOymC,oBACZ/8B,EAAO0e,EACP+xE,EAASx3B,kBAAkBzgC,EAAS,GAAI9Z,EAAc,GAAE,KACxD+xE,EAAS93B,4BAA4BngC,EAAS,GAAIh2B,EAAAsH,KAAK/P,IAAG,GAE9D,KADI+X,EAAO2+E,EAAS97B,aACVngD,MAAM,KAKd,OAJAi8E,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAENv7F,EAAOymC,oBAEZ98B,EAAOwwF,EAASx3B,kBAAkBzgC,EAAS,GAAI1mB,EAAI,KACnD5R,EAAOuwF,EAASnzB,cAClBmzB,EAAS93B,4BAA4BngC,EAAS,GAAIh2B,EAAAsH,KAAKvP,KAAI,GAC3Dk2F,EAAS97B,aAGX,OADA87B,EAAS97B,YAAc7iD,EAChBxb,EAAO4lC,aAAal8B,EAAMC,EAAMC,GAEzC,KAAK01D,EAAey+B,YAQlB,OAPI31E,GACF+xE,EAAStuF,MACPI,EAAA/C,eAAe0uD,sBACfkE,EAAWy/B,mBAAoBj5F,EAAUiP,cAG7CupF,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GACpCn6F,EAAOymC,oBAKhB,KAAK64B,EAAe0+B,YAElB,OADA7D,EAAS97B,YAAcnyD,EAAAsH,KAAK/P,IAE1Bo3F,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GACpCn6F,EAAOymC,oBACTzmC,EAAOiiC,WAAWwmB,EAAAnsB,OAAOukD,eAElC,KAAKvhB,EAAe2+B,YAElB,OADA9D,EAAS97B,YAAcnyD,EAAAsH,KAAK/P,IAE1Bo3F,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GACpCn6F,EAAOymC,oBACTzmC,EAAOiiC,WAAWwmB,EAAAnsB,OAAOwkD,WAAY,KAAM,CAChDqZ,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAK/P,IAAG,OAGpD,KAAK67D,EAAe4+B,YAElB,GADA/D,EAAS97B,YAAcnyD,EAAAsH,KAAKG,KAE1BknF,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAC3C,OAAOn6F,EAAOymC,oBAChB,IAAK0zD,EAAS7mF,QAAQW,WAAU,GAAuB,CACrD,IAAI4Q,GAAWs1E,EAAS3oF,SAASqI,gBAAgBvX,EAAW,MAE5D,OADA63F,EAAS97B,YAAcnyD,EAAAsH,KAAKG,KACvBkR,GACEs1E,EAAS/nB,kBAAkBvtD,GAAUqd,EAAU45B,GADhC97D,EAAOymC,oBAG/B,IAAI/yB,GAAYymF,EAAS7mF,QAAQI,UAC7BhK,EAAOywF,EAASx3B,kBAClBzgC,EAAS,GACTxuB,GAAS,KAIP/J,EAAOwwF,EAASx3B,kBAClBzgC,EAAS,GACTxuB,GAAS,KAIP9J,EAAOuwF,EAASx3B,kBAClBzgC,EAAS,GACTxuB,GAAS,KAKX,OADAymF,EAAS97B,YAAcnyD,EAAAsH,KAAKG,KACrB3T,EAAO2mC,iBAAiBj9B,EAAMC,EAAMC,GAE7C,KAAK01D,EAAe6+B,YAElB,GADAhE,EAAS97B,YAAcnyD,EAAAsH,KAAKG,KAE1BknF,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAC3C,OAAOn6F,EAAOymC,oBAChB,IAAK0zD,EAAS7mF,QAAQW,WAAU,GAAuB,CACjD4Q,GAAWs1E,EAAS3oF,SAASqI,gBAAgBvX,EAAW,MAE5D,OADA63F,EAAS97B,YAAcnyD,EAAAsH,KAAKG,KACvBkR,GACEs1E,EAAS/nB,kBAAkBvtD,GAAUqd,EAAU45B,GADhC97D,EAAOymC,oBAG3B/yB,GAAYymF,EAAS7mF,QAAQI,UAC7BhK,EAAOywF,EAASx3B,kBAClBzgC,EAAS,GACTxuB,GAAS,KAIP/J,EAAOwwF,EAASx3B,kBAClBzgC,EAAS,GACTh2B,EAAAsH,KAAK5P,GAAE,KAILgG,EAAOuwF,EAASx3B,kBAClBzgC,EAAS,GACTxuB,GAAS,KAKX,OADAymF,EAAS97B,YAAcnyD,EAAAsH,KAAKG,KACrB3T,EAAO8mC,iBAAiBp9B,EAAMC,EAAMC,GAK7C,KAAK01D,EAAez/B,WAClB,GACEq7D,EAAkB9yE,EAAe0zC,EAAYq+B,GAAU,GACvDW,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAC3C,OAAOn6F,EAAOymC,oBAChB,IAAIwV,GAAS7zB,EAAe,GAMxBkjD,IALA5hE,EAAOywF,EAAS93B,4BAClBngC,EAAS,GACT+Z,GAAM,GAGOk+C,EAAS97B,aAExB,OADA87B,EAAS97B,YAAcpiB,GACnBqvB,GAAS1kC,MAAQqV,GAAOrV,MAC1BuzD,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWtyD,OAENxJ,EAAOymC,qBAET/8B,EAET,KAAK41D,EAAez2D,OAClB,GACE6yF,EAAkBtzE,EAAe0zC,EAAYq+B,GAC7CmB,EAAkBp5D,EAAU,EAAG,EAAG45B,EAAYq+B,GAM9C,OAJI/xE,IACFvf,OAAOuf,EAAcvgB,QACrBsyF,EAAS97B,YAAcj2C,EAAc,GAAG4gC,iBAEnChpD,EAAOymC,oBAEZ/8B,EAAO0e,EACP+xE,EAASx3B,kBAAkBzgC,EAAS,GAAI9Z,EAAc,GAAE,KACxD+xE,EAAS93B,4BAA4BngC,EAAS,GAAIh2B,EAAAsH,KAAKvP,KAAI,GAC3DuX,EAAO2+E,EAAS97B,YAIpB,GAHA87B,EAAS97B,YAAc7iD,EAAKwtC,gBAGxBmxC,EAAS7mF,QAAQe,SACnB,OAAIykD,GAAkB5sD,EAAAsH,KAAKG,MACzBwmF,EAAS97B,YAAcnyD,EAAAsH,KAAKG,KACrB3T,EAAOwlC,aAET97B,EAIT,IAAI/B,GAAQ4hE,EAAa4wB,EAA6B,GAAnBj4D,EAASr6B,OAAcq6B,EAAS,GAAK,KAAM45B,GAC9Eq+B,EAAS97B,YAAc7iD,EAAKwtC,gBACxBrnB,OAAI,EACR,GAAIm3B,GAAkB5sD,EAAAsH,KAAKG,KAEzB,OADAwmF,EAAS97B,YAAcnyD,EAAAsH,KAAKG,KACpB6H,EAAKrG,MACX,OACA,OACA,OACA,OACA,OACA,OACA,QACEwsB,EAAO3hC,EAAOolC,SACZplC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQw2C,OAAQr6D,GACnC/B,IAEF,MAEF,OACA,OACEg6B,EAAO3hC,EAAOolC,SACZplC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQ02C,OAAQv6D,GACnC/B,IAEF,MAEF,OACA,OACEg6B,EAAO3hC,EAAOolC,SACZplC,EAAOyhC,YACL04D,EAAS7mF,QAAQc,SACbq0C,EAAAl7B,QAAQ02C,OACRxb,EAAAl7B,QAAQw2C,OACZr6D,GAEF/B,IAEF,MAGF,QACEg6B,EAAO3hC,EAAOolC,SACZplC,EAAO6hC,aAAa4mB,EAAA51B,SAASq8C,MAC3BxlE,EACA1J,EAAOihC,UAAU,IAEnBt5B,IAEF,MAEF,QACEg6B,EAAO3hC,EAAOolC,SACZplC,EAAO6hC,aAAa4mB,EAAA51B,SAASs8C,MAC3BzlE,EACA1J,EAAOmhC,UAAU,IAEnBx5B,IAEF,MAEF,QACEwyF,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAEb55D,EAAOh6B,QAMX,OADAwyF,EAAS97B,YAAc7iD,EAAKwtC,gBACpBmxC,EAAS97B,YAAYlpD,MAC3B,OACA,OACA,OACA,OACA,OACA,OACA,QACE,IAAIozD,GAAY4xB,EAAS/6B,YAAY2S,oBAAoBv2D,GAAM,GAC/DmmB,EAAO3hC,EAAOolC,SACZplC,EAAOuiC,eAAegmC,GAAUtkD,MAAOva,GACvC1J,EAAOqiC,eAAekmC,GAAUtkD,MAAOwkC,EAAAj+B,WAAWhkB,KAClDmB,IAEF,MAEF,OACA,OACM4gE,GAAY4xB,EAAS/6B,YAAY2S,oBAAoB7lE,EAAAsH,KAAK9P,KAAK,GACnEi+B,EAAO3hC,EAAOolC,SACZplC,EAAOyhC,YAAYgnB,EAAAl7B,QAAQ02C,OACzBjkE,EAAOuiC,eAAegmC,GAAUtkD,MAAOva,IAEzC/B,GACA3H,EAAOqiC,eAAekmC,GAAUtkD,MAAOwkC,EAAAj+B,WAAW/jB,MAEpD,MAEF,OACA,OACM8hE,GAAY4xB,EAAS/6B,YAAY2S,oBAAoBooB,EAAS7mF,QAAQI,WAAW,GACrFiuB,EAAO3hC,EAAOolC,SACZplC,EAAOyhC,YACL04D,EAAS7mF,QAAQc,SACbq0C,EAAAl7B,QAAQ02C,OACRxb,EAAAl7B,QAAQw2C,OACZ/jE,EAAOuiC,eAAegmC,GAAUtkD,MAAOva,IAEzC/B,GACA3H,EAAOqiC,eAAekmC,GAAUtkD,MAAOk2E,EAAS7mF,QAAQwtD,iBAE1D,MAEF,QACMyH,GAAY4xB,EAAS/6B,YAAY2S,oBAAoB7lE,EAAAsH,KAAKtP,KAAK,GACnEy9B,EAAO3hC,EAAOolC,SACZplC,EAAO6hC,aAAa4mB,EAAA51B,SAASq8C,MAC3BlvE,EAAOuiC,eAAegmC,GAAUtkD,MAAOva,GACvC1J,EAAOihC,UAAU,IAEnBt5B,GACA3H,EAAOqiC,eAAekmC,GAAUtkD,MAAOwkC,EAAAj+B,WAAWvjB,MAEpD,MAEF,QACMshE,GAAY4xB,EAAS/6B,YAAY2S,oBAAoB7lE,EAAAsH,KAAKrP,KAAK,GACnEw9B,EAAO3hC,EAAOolC,SACZplC,EAAO6hC,aAAa4mB,EAAA51B,SAASs8C,MAC3BnvE,EAAOuiC,eAAegmC,GAAUtkD,MAAOva,GACvC1J,EAAOmhC,UAAU,IAEnBx5B,GACA3H,EAAOqiC,eAAekmC,GAAUtkD,MAAOwkC,EAAAj+B,WAAWtjB,MAEpD,MAEF,QACEizF,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAEb55D,EAAOh6B,GAKb,OAAOg6B,EAET,KAAK29B,EAAej2C,UAClB,GACEwxE,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAC3C,OAAOn6F,EAAOymC,oBAChB,IACI23D,IADA53E,EAAO2zE,EAAS/6B,aACQvjD,GAAE,MAC9B2K,EAAKlV,IAAG,MACJqwB,EAAOw4D,EAAS93B,4BAA4BngC,EAAS,GAAI42B,EAAc,GAE3E,OADKslC,IAAkB53E,EAAK2gD,MAAK,MAC1BxlC,EAET,KAAK29B,EAAe++B,cAClB,GACE3C,EAAkBtzE,EAAe0zC,EAAYq+B,GAAU,GACvDmB,EAAkBp5D,EAAU,EAAGz+B,IAAI6rC,UAAWwsB,EAAYq+B,GAC1D,OAAOn6F,EAAOymC,oBAChB,IAAIzsB,GAAaoO,EAAgBA,EAAc,GAAK0wC,EAEhDwlC,IADA50F,EAAOywF,EAAS93B,4BAA4BngC,EAAS,GAAIh2B,EAAAsH,KAAK1P,IAAG,GACtDq2F,EAAS97B,aACxB,KACEigC,IAAYpyF,EAAAsH,KAAK1P,KACJ,GAAbw6F,GAASnpF,MAAwBmpF,GAASvkF,oBAM1C,OAJAogF,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfukB,EAAS,GAAG14B,OAEPxJ,EAAOymC,oBAOhB,IALA,IAAI4vC,GAAcn0C,EAASr6B,OAAS,EAChC02F,GAAe,IAAIl3F,MAAqBgvE,IACxCtD,GAAmB/4D,GAAWmwC,eAC9BrwC,GAAiB,IAAIzS,MAAYgvE,IACjCmoB,GAAmB,IAAIn3F,MAAkBgvE,IACpC31E,GAAI,EAAGA,GAAI21E,KAAe31E,GAAG,CACpC69F,GAAa79F,IAAKy5F,EAAS93B,4BAA4BngC,EAAS,EAAIxhC,IAAIwL,EAAAsH,KAAK/P,IAAG,GAChF,IAAIg7F,GAActE,EAAS97B,YAC3BvkD,GAAepZ,IAAK+9F,GACpBD,GAAiB99F,IAAK+9F,GAAYt0C,eAEpC,IAAI5jB,GAAWr6B,EAAAuW,UAAUipC,oBAAoB5xC,GAAgBE,IACzD6uB,GAAU7oC,EAAOqgC,2BAA2B0yC,GAAkByrB,IAKlE,OAJK31D,KAASA,GAAU7oC,EAAO8/B,gBAAgByG,GAAUwsC,GAAkByrB,KAC3ErE,EAAS97B,YAAcrkD,GAGhBha,EAAOsmC,mBAAmB58B,EAAM60F,GAAch4D,IAEvD,KAAK+4B,EAAeo/B,YAClB,GACExD,EAAkB9yE,EAAe0zC,EAAYq+B,GAAU,GACvD,OAAOn6F,EAAOymC,oBAChB,IAAIjiB,GAAgB4D,EAAe,GAAG2gC,eACtC,OAAKvkC,IAOL21E,EAAS97B,YAAc75C,GAAchJ,KAC9B2+E,EAAS7f,mBAAmB91D,GAAe0d,EAAU45B,KAP1Dq+B,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAENv7F,EAAOymC,qBAQlB,KAAK64B,EAAe12D,MAMlB,OALAiyF,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3C63F,EAAStuF,MACPI,EAAA/C,eAAey1F,eACf7iC,EAAWtyD,OAAQ04B,EAASr6B,OAASq6B,EAAS,GAAK45B,GAAYtyD,MAAMW,YAEhEnK,EAAOymC,oBAEhB,KAAK64B,EAAe32D,QAMlB,OALAkyF,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3C63F,EAASxuF,QACPM,EAAA/C,eAAey1F,eACf7iC,EAAWtyD,OAAQ04B,EAASr6B,OAASq6B,EAAS,GAAK45B,GAAYtyD,MAAMW,YAEhEnK,EAAOwlC,YAEhB,KAAK85B,EAAe52D,KAMlB,OALAmyF,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3C63F,EAAS1uF,KACPQ,EAAA/C,eAAey1F,eACf7iC,EAAWtyD,OAAQ04B,EAASr6B,OAASq6B,EAAS,GAAK45B,GAAYtyD,MAAMW,YAEhEnK,EAAOwlC,YAKhB,KAAK85B,EAAe/7D,GAClB,OACEs3F,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,IAE3CA,EAAS97B,YAAcnyD,EAAAsH,KAAKjQ,GACrBvD,EAAOymC,qBAET0zD,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKjQ,GAAE,KAExD,KAAK+7D,EAAe97D,IAClB,OACEq3F,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,IAE3CA,EAAS97B,YAAcnyD,EAAAsH,KAAKhQ,IACrBxD,EAAOymC,qBAET0zD,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKhQ,IAAG,KAEzD,KAAK87D,EAAe77D,IAClB,OACEo3F,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,IAE3CA,EAAS97B,YAAcnyD,EAAAsH,KAAK/P,IACrBzD,EAAOymC,qBAET0zD,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAK/P,IAAG,KAEzD,KAAK67D,EAAe57D,IAClB,OACEm3F,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,IAE3CA,EAAS97B,YAAcnyD,EAAAsH,KAAK9P,IACrB1D,EAAOymC,qBAET0zD,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAK9P,IAAG,KAEzD,KAAK47D,EAAe37D,MAClB,IAAI8P,GAAY0mF,EAAS7mF,QAAQG,UACjC,OACEonF,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,IAE3CA,EAAS97B,YAAc5qD,GAChBzT,EAAOymC,qBAET0zD,EAASx3B,kBAAkBzgC,EAAS,GAAIzuB,GAAS,KAE1D,KAAK6rD,EAAe17D,GAClB,OACEi3F,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,IAE3CA,EAAS97B,YAAcnyD,EAAAsH,KAAK5P,GACrB5D,EAAOymC,qBAET0zD,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAK5P,GAAE,KAExD,KAAK07D,EAAez7D,IAClB,OACEg3F,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,IAE3CA,EAAS97B,YAAcnyD,EAAAsH,KAAK3P,IACrB7D,EAAOymC,qBAET0zD,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAK3P,IAAG,KAEzD,KAAKy7D,EAAex7D,IAClB,OACE+2F,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,IAE3CA,EAAS97B,YAAcnyD,EAAAsH,KAAK1P,IACrB9D,EAAOymC,qBAET0zD,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAK1P,IAAG,KAEzD,KAAKw7D,EAAev7D,IAClB,OACE82F,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,IAE3CA,EAAS97B,YAAcnyD,EAAAsH,KAAKzP,IACrB/D,EAAOymC,qBAET0zD,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKzP,IAAG,KAEzD,KAAKu7D,EAAet7D,MACd0P,GAAYymF,EAAS7mF,QAAQI,UACjC,OACEmnF,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,IAE3CA,EAAS97B,YAAc3qD,GAChB1T,EAAOymC,qBAET0zD,EAASx3B,kBAAkBzgC,EAAS,GAAIxuB,GAAS,KAE1D,KAAK4rD,EAAer7D,KAClB,OACE42F,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,IAE3CA,EAAS97B,YAAcnyD,EAAAsH,KAAKvP,KACrBjE,EAAOymC,qBAET0zD,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKvP,KAAI,KAE1D,KAAKq7D,EAAep7D,IAClB,OACE22F,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,IAE3CA,EAAS97B,YAAcnyD,EAAAsH,KAAKtP,IACrBlE,EAAOymC,qBAET0zD,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKtP,IAAG,KAEzD,KAAKo7D,EAAen7D,IAClB,OACE02F,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,IAE3CA,EAAS97B,YAAcnyD,EAAAsH,KAAKrP,IACrBnE,EAAOymC,qBAET0zD,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKrP,IAAG,KAKzD,KAAKm7D,EAAel7D,KACpB,KAAKk7D,EAAej7D,MAClB,IAAK81F,EAAS7mF,QAAQW,WAAU,GAAgB,MAChD,GACE4mF,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,GAAI45B,EAAYq+B,GAG5C,OADAA,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAEhB,IAAInF,GAAQ,IAAIkN,WAAW,IAC3B,IAAS9tC,GAAI,EAAGA,GAAI,KAAMA,GAAG,CAE3B,GADIiB,GAAQugC,EAASxhC,IACV,CACLihC,EAAO3hC,EAAOmtC,qBAChBgtD,EAASx3B,kBAAkBhhE,GAAOuK,EAAAsH,KAAKjQ,GAAE,MAE3C,GAAIklD,EAAA7W,gBAAgBjQ,IAAS8mB,EAAAh+B,aAAailB,MAMxC,OALAyqD,EAAStuF,MACPI,EAAA/C,eAAe01F,2CACfj9F,GAAM6H,OAER2wF,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAEhB59B,OAAO4/C,EAAA5W,kBAAkBlQ,IAAS8mB,EAAAj+B,WAAWhkB,KAC7C8B,EAAA0wE,QAAQvwB,EAAA3W,iBAAiBnQ,GAAOL,GAAO5gC,KAI3C,OADAy5F,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOqhC,WAAWC,IAE3B,KAAKg+B,EAAe/6D,MAClB,IAAK41F,EAAS7mF,QAAQW,WAAU,GAAgB,MAChD,GACE4mF,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAG3C,OADAA,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAGhB,IADInF,GAAQ,IAAIkN,WAAW,IAClB9tC,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAE1B,GADIiB,GAAQugC,EAASxhC,IACV,CACLihC,EAAO3hC,EAAOmtC,qBAChBgtD,EAASx3B,kBAAkBhhE,GAAOuK,EAAAsH,KAAKhQ,IAAG,MAE5C,GAAIilD,EAAA7W,gBAAgBjQ,IAAS8mB,EAAAh+B,aAAailB,MAMxC,OALAyqD,EAAStuF,MACPI,EAAA/C,eAAe01F,2CACfj9F,GAAM6H,OAER2wF,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAEhB59B,OAAO4/C,EAAA5W,kBAAkBlQ,IAAS8mB,EAAAj+B,WAAWhkB,KAC7C8B,EAAAiwE,SAAS9vB,EAAA3W,iBAAiBnQ,GAAOL,GAAO5gC,IAAK,IAIjD,OADAy5F,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOqhC,WAAWC,IAE3B,KAAKg+B,EAAe76D,MAClB,IAAK01F,EAAS7mF,QAAQW,WAAU,GAAgB,MAChD,GACE4mF,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAG3C,OADAA,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAGhB,IADInF,GAAQ,IAAIkN,WAAW,IAClB9tC,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAE1B,GADIiB,GAAQugC,EAASxhC,IACV,CACLihC,EAAO3hC,EAAOmtC,qBAChBgtD,EAASx3B,kBAAkBhhE,GAAOuK,EAAAsH,KAAK/P,IAAG,MAE5C,GAAIglD,EAAA7W,gBAAgBjQ,IAAS8mB,EAAAh+B,aAAailB,MAMxC,OALAyqD,EAAStuF,MACPI,EAAA/C,eAAe01F,2CACfj9F,GAAM6H,OAER2wF,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAEhB59B,OAAO4/C,EAAA5W,kBAAkBlQ,IAAS8mB,EAAAj+B,WAAWhkB,KAC7C8B,EAAA+vE,SAAS5vB,EAAA3W,iBAAiBnQ,GAAOL,GAAO5gC,IAAK,IAIjD,OADAy5F,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOqhC,WAAWC,IAE3B,KAAKg+B,EAAe36D,MAClB,IAAKw1F,EAAS7mF,QAAQW,WAAU,GAAgB,MAChD,GACE4mF,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAG3C,OADAA,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAGhB,IADInF,GAAQ,IAAIkN,WAAW,IAClB9tC,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAE1B,GADIiB,GAAQugC,EAASxhC,IACV,CACLihC,EAAO3hC,EAAOmtC,qBAChBgtD,EAASx3B,kBAAkBhhE,GAAOuK,EAAAsH,KAAK9P,IAAG,MAE5C,GAAI+kD,EAAA7W,gBAAgBjQ,IAAS8mB,EAAAh+B,aAAailB,MAMxC,OALAyqD,EAAStuF,MACPI,EAAA/C,eAAe01F,2CACfj9F,GAAM6H,OAER2wF,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAEhB59B,OAAO4/C,EAAA5W,kBAAkBlQ,IAAS8mB,EAAAj+B,WAAW/jB,KAC7C,IAAIo4F,GAAMn+F,IAAK,EACf4H,EAAA+vE,SAAS5vB,EAAA1W,oBAAoBpQ,GAAOL,GAAOu9D,IAC3Cv2F,EAAA+vE,SAAS5vB,EAAAzW,qBAAqBrQ,GAAOL,GAAOu9D,GAAM,IAItD,OADA1E,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOqhC,WAAWC,IAE3B,KAAKg+B,EAAez6D,MAClB,IAAKs1F,EAAS7mF,QAAQW,WAAU,GAAgB,MAChD,GACE4mF,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAG3C,OADAA,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAGhB,IADInF,GAAQ,IAAIkN,WAAW,IAClB9tC,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAE1B,GADIiB,GAAQugC,EAASxhC,IACV,CACLihC,EAAO3hC,EAAOmtC,qBAChBgtD,EAASx3B,kBAAkBhhE,GAAOuK,EAAAsH,KAAKtP,IAAG,MAE5C,GAAIukD,EAAA7W,gBAAgBjQ,IAAS8mB,EAAAh+B,aAAailB,MAMxC,OALAyqD,EAAStuF,MACPI,EAAA/C,eAAe01F,2CACfj9F,GAAM6H,OAER2wF,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAEhB59B,OAAO4/C,EAAA5W,kBAAkBlQ,IAAS8mB,EAAAj+B,WAAWvjB,KAC7CqB,EAAA4wE,SAASzwB,EAAAxW,iBAAiBtQ,GAAOL,GAAO5gC,IAAK,IAIjD,OADAy5F,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOqhC,WAAWC,IAE3B,KAAKg+B,EAAex6D,MAClB,IAAKq1F,EAAS7mF,QAAQW,WAAU,GAAgB,MAChD,GACE4mF,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAG3C,OADAA,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAGhB,IADInF,GAAQ,IAAIkN,WAAW,IAClB9tC,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAC1B,IAAIiB,GACJ,GADIA,GAAQugC,EAASxhC,IACV,CACLihC,EAAO3hC,EAAOmtC,qBAChBgtD,EAASx3B,kBAAkBhhE,GAAOuK,EAAAsH,KAAKrP,IAAG,MAE5C,GAAIskD,EAAA7W,gBAAgBjQ,IAAS8mB,EAAAh+B,aAAailB,MAMxC,OALAyqD,EAAStuF,MACPI,EAAA/C,eAAe01F,2CACfj9F,GAAM6H,OAER2wF,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAEhB59B,OAAO4/C,EAAA5W,kBAAkBlQ,IAAS8mB,EAAAj+B,WAAWtjB,KAC7CoB,EAAA6wE,SAAS1wB,EAAAvW,iBAAiBvQ,GAAOL,GAAO5gC,IAAK,IAIjD,OADAy5F,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOqhC,WAAWC,IAE3B,KAAKg+B,EAAew/B,WAClB,IAAK3E,EAAS7mF,QAAQW,WAAU,GAAgB,MAChD,GACEinF,EAAkB9yE,EAAe0zC,EAAYq+B,GAC7CW,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAG3C,OADAA,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAGhB,IADIjrB,EAAO4M,EAAe,IACjBvM,GAAE,KAMT,OALAs+E,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAEbpB,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAEZ/E,OAAE,EACN,OAAQlmB,EAAKrG,MACX,OACA,OAAqBusB,EAAK+mB,EAAAl7B,QAAQwxE,cAAe,MACjD,OACA,OAAqBr9D,EAAK+mB,EAAAl7B,QAAQyxE,cAAe,MACjD,OACA,OAAqBt9D,EAAK+mB,EAAAl7B,QAAQ0xE,cAAe,MACjD,OACA,OAAqBv9D,EAAK+mB,EAAAl7B,QAAQ2xE,cAAe,MACjD,OACA,OACEx9D,EAAKy4D,EAAS7mF,QAAQc,SAClBq0C,EAAAl7B,QAAQ2xE,cACRz2C,EAAAl7B,QAAQ0xE,cACZ,MAEF,QAAqBv9D,EAAK+mB,EAAAl7B,QAAQ4xE,cAAe,MACjD,QAAqBz9D,EAAK+mB,EAAAl7B,QAAQ6xE,cAAe,MACjD,QAME,OALAjF,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAEbpB,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAGd/8B,EAAOywF,EAASx3B,kBAAkBzgC,EAAS,GAAI1mB,EAAI,KAEvD,OADA2+E,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOyhC,YAAYC,EAAIh4B,GAEhC,KAAK41D,EAAe+/B,kBAClB,IAAKlF,EAAS7mF,QAAQW,WAAU,GAAgB,MAChD,GACEinF,EAAkB9yE,EAAe0zC,EAAYq+B,GAAU,GACvDW,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAC3C,OAAOn6F,EAAOymC,oBAEhB,IADIjrB,EAAO4M,EAAe,IACjBvM,GAAE,KAMT,OALAs+E,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAEbpB,EAAS97B,YAAc7iD,EAChBxb,EAAOymC,oBAEZ/E,OAAE,EACN,OAAQlmB,EAAKrG,MACX,OAAqBusB,EAAK+mB,EAAAzrB,cAAcsiE,qBAAsB,MAC9D,OAAqB59D,EAAK+mB,EAAAzrB,cAAcuiE,qBAAsB,MAC9D,OAAqB79D,EAAK+mB,EAAAzrB,cAAcwiE,qBAAsB,MAC9D,OAAqB99D,EAAK+mB,EAAAzrB,cAAcyiE,qBAAsB,MAC9D,OACA,OAAqB/9D,EAAK+mB,EAAAzrB,cAAc0iE,oBAAqB,MAC7D,OACA,OAAqBh+D,EAAK+mB,EAAAzrB,cAAc2iE,oBAAqB,MAC7D,OACA,OACEj+D,EAAKy4D,EAAS7mF,QAAQc,SAClBq0C,EAAAzrB,cAAc2iE,oBACdl3C,EAAAzrB,cAAc0iE,oBAClB,MAEF,QAAqBh+D,EAAK+mB,EAAAzrB,cAAc4iE,oBAAqB,MAC7D,QAAqBl+D,EAAK+mB,EAAAzrB,cAAc6iE,oBAAqB,MAC7D,QAME,OALA1F,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAEbpB,EAAS97B,YAAc7iD,EAChBxb,EAAOymC,oBAGd/8B,EAAOywF,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKpP,KAAI,KACxDuF,EAAO3J,EAAOmtC,qBAChBgtD,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAK5P,GAAE,MAGjD,GADAu2F,EAAS97B,YAAc7iD,EACnBitC,EAAA7W,gBAAgBjoC,IAAS8+C,EAAAh+B,aAAailB,MAKxC,OAJAyqD,EAAStuF,MACPI,EAAA/C,eAAe01F,2CACf18D,EAAS,GAAG14B,OAEPxJ,EAAOymC,oBAEhB59B,OAAO4/C,EAAA5W,kBAAkBloC,IAAS8+C,EAAAj+B,WAAWhkB,KAC7C,IAAIs5F,GAAU,GAAKtkF,EAAKvB,SAAY,EAEpC,OADIitB,GAAMuhB,EAAA3W,iBAAiBnoC,IACjB,GAAKu9B,GAAM44D,IACnB3F,EAAStuF,MACPI,EAAA/C,eAAewzF,6CACfx6D,EAAS,GAAG14B,MAAO,aAAc,IAAKs2F,GAAO31F,YAExCnK,EAAOymC,qBAETzmC,EAAOgnC,kBAAkBtF,EAAIh4B,EAAMw9B,IAE5C,KAAKo4B,EAAeygC,kBAClB,IAAK5F,EAAS7mF,QAAQW,WAAU,GAAgB,MAChD,GACEinF,EAAkB9yE,EAAe0zC,EAAYq+B,GAC7CW,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAG3C,OADAA,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAGhB,IADIjrB,EAAO4M,EAAe,IACjBvM,GAAE,KAMT,OALAs+E,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAEbpB,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAEZ/E,OAAE,EACN,OAAQlmB,EAAKrG,MACX,OACA,OAAqBusB,EAAK+mB,EAAAhrB,cAAcuiE,oBAAqB,MAC7D,OACA,OAAqBt+D,EAAK+mB,EAAAhrB,cAAcwiE,oBAAqB,MAC7D,OACA,OAAqBv+D,EAAK+mB,EAAAhrB,cAAcyiE,oBAAqB,MAC7D,OACA,OAAqBx+D,EAAK+mB,EAAAhrB,cAAc0iE,oBAAqB,MAC7D,OACA,OACEz+D,EAAKy4D,EAAS7mF,QAAQc,SAClBq0C,EAAAhrB,cAAc0iE,oBACd13C,EAAAhrB,cAAcyiE,oBAClB,MAEF,QAAqBx+D,EAAK+mB,EAAAhrB,cAAc2iE,oBAAqB,MAC7D,QAAqB1+D,EAAK+mB,EAAAhrB,cAAc4iE,oBAAqB,MAC7D,QAME,OALAlG,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAEbpB,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAGd/8B,EAAOywF,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKpP,KAAI,KACxDuF,EAAO3J,EAAOmtC,qBAChBgtD,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAK5P,GAAE,MAEjD,GAAI6kD,EAAA7W,gBAAgBjoC,IAAS8+C,EAAAh+B,aAAailB,MAMxC,OALAyqD,EAAStuF,MACPI,EAAA/C,eAAe01F,2CACf18D,EAAS,GAAG14B,OAEd2wF,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAEhB59B,OAAO4/C,EAAA5W,kBAAkBloC,IAAS8+C,EAAAj+B,WAAWhkB,KACzCs5F,GAAU,GAAKtkF,EAAKvB,SAAY,EAEpC,IADIitB,GAAMuhB,EAAA3W,iBAAiBnoC,IACjB,GAAKu9B,GAAM44D,GAKnB,OAJA3F,EAAStuF,MACPI,EAAA/C,eAAewzF,6CACfx6D,EAAS,GAAG14B,MAAO,aAAc,IAAKs2F,GAAO31F,YAExCnK,EAAOymC,oBAEZ78B,EAAOuwF,EAASx3B,kBAAkBzgC,EAAS,GAAI1mB,EAAI,KAEvD,OADA2+E,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOonC,kBAAkB1F,EAAIh4B,EAAMw9B,GAAKt9B,GAEjD,KAAK01D,EAAeghC,aAClB,IAAKnG,EAAS7mF,QAAQW,WAAU,GAAgB,MAChD,GACEinF,EAAkB9yE,EAAe0zC,EAAYq+B,GAG7C,OADAA,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAGhB,IADIjrB,EAAO4M,EAAe,IACjBvM,GAAE,KAMT,OALAs+E,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAEbpB,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAEhB,IAAI85D,GAAY/kF,EAAKvB,SACjBumF,GAAY,GAAKD,GAErB,GADA13F,OAAOwmF,UAAUmR,KAAcl4F,EAAAJ,WAAWs4F,KAExC1F,EAAkB54D,EAAU,EAAIs+D,GAAW1kC,EAAYq+B,GAGvD,OADAA,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAEhB,OAAQjrB,EAAKrG,MACX,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QACA,QAAmB,MACnB,QAME,OALAglF,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAEbpB,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAGd/8B,EAAOywF,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKpP,KAAI,KACxDuF,EAAOwwF,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKpP,KAAI,KAD5D,IAEIqjC,GAAO,IAAI+G,WAAW,IAE1B,IADIsxD,IAAUU,IAAa,GAAK,EACvB9/F,GAAI,EAAGA,GAAI8/F,KAAa9/F,GAAG,CAClC,IAaIwmC,GAbAuY,GAAUvd,EAAS,EAAIxhC,IACvB+/F,GAAOzgG,EAAOmtC,qBAChBgtD,EAASx3B,kBAAkBljB,GAASvzC,EAAAsH,KAAK5P,GAAE,MAE7C,GAAI6kD,EAAA7W,gBAAgB6uD,KAASh4C,EAAAh+B,aAAailB,MAMxC,OALAyqD,EAAStuF,MACPI,EAAA/C,eAAe01F,2CACfn/C,GAAQj2C,OAEV2wF,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAIhB,GAFA59B,OAAO4/C,EAAA5W,kBAAkB4uD,KAASh4C,EAAAj+B,WAAWhkB,MACzC0gC,GAAMuhB,EAAA3W,iBAAiB2uD,KACjB,GAAKv5D,GAAM44D,GAMnB,OALA3F,EAAStuF,MACPI,EAAA/C,eAAewzF,6CACfj9C,GAAQj2C,MAAO,aAAc,IAAKs2F,GAAO31F,YAE3CgwF,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAEhB,OAAQ85D,IACN,KAAK,EACHj4F,EAAA0wE,QAAQ9xC,GAAKO,GAAM/mC,IACnB,MAEF,KAAK,EACH,IAAIggG,GAAOhgG,IAAK,EACZigG,GAAOz5D,IAAO,EAClB5+B,EAAA0wE,QAAQ2nB,GAAUl5D,GAAMi5D,IACxBp4F,EAAA0wE,QAAQ2nB,GAAO,EAAGl5D,GAAMi5D,GAAO,GAC/B,MAEF,KAAK,EACCA,GAAOhgG,IAAK,EACZigG,GAAOz5D,IAAO,EAClB5+B,EAAA0wE,QAAQ2nB,GAAUl5D,GAAMi5D,IACxBp4F,EAAA0wE,QAAQ2nB,GAAO,EAAGl5D,GAAMi5D,GAAO,GAC/Bp4F,EAAA0wE,QAAQ2nB,GAAO,EAAGl5D,GAAMi5D,GAAO,GAC/Bp4F,EAAA0wE,QAAQ2nB,GAAO,EAAGl5D,GAAMi5D,GAAO,GAC/B,MAEF,KAAK,EACCA,GAAOhgG,IAAK,EACZigG,GAAOz5D,IAAO,EAClB5+B,EAAA0wE,QAAQ2nB,GAAUl5D,GAAMi5D,IACxBp4F,EAAA0wE,QAAQ2nB,GAAO,EAAGl5D,GAAMi5D,GAAO,GAC/Bp4F,EAAA0wE,QAAQ2nB,GAAO,EAAGl5D,GAAMi5D,GAAO,GAC/Bp4F,EAAA0wE,QAAQ2nB,GAAO,EAAGl5D,GAAMi5D,GAAO,GAC/Bp4F,EAAA0wE,QAAQ2nB,GAAO,EAAGl5D,GAAMi5D,GAAO,GAC/Bp4F,EAAA0wE,QAAQ2nB,GAAO,EAAGl5D,GAAMi5D,GAAO,GAC/Bp4F,EAAA0wE,QAAQ2nB,GAAO,EAAGl5D,GAAMi5D,GAAO,GAC/Bp4F,EAAA0wE,QAAQ2nB,GAAO,EAAGl5D,GAAMi5D,GAAO,GAC/B,MAEF,QAAS73F,QAAO,IAIpB,OADAsxF,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOsnC,kBAAkB59B,EAAMC,EAAM89B,IAE9C,KAAK63B,EAAeshC,SACpB,KAAKthC,EAAeuhC,SACpB,KAAKvhC,EAAewhC,SACpB,KAAKxhC,EAAeyhC,SACpB,KAAKzhC,EAAe0hC,kBACpB,KAAK1hC,EAAe2hC,kBACpB,KAAK3hC,EAAe4hC,SACpB,KAAK5hC,EAAe6hC,SACpB,KAAK7hC,EAAe8hC,QACpB,KAAK9hC,EAAe+hC,QACpB,KAAK/hC,EAAegiC,QACpB,KAAKhiC,EAAeiiC,QACpB,KAAKjiC,EAAekiC,QACpB,KAAKliC,EAAemiC,QAClB,IAAKtH,EAAS7mF,QAAQW,WAAU,GAAgB,MAChD,GACEinF,EAAkB9yE,EAAe0zC,EAAYq+B,GAC7CW,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAG3C,OADAA,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAGhB,IADIjrB,EAAO4M,EAAe,IACjBvM,GAAE,KAMT,OALAs+E,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAEbpB,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAEZ/E,GAAgB,EACpB,OAAQp/B,EAAUiP,cAChB,KAAK+tD,EAAeshC,SAClB,OAAQplF,EAAKrG,MACX,OACA,OAAqBusB,EAAK+mB,EAAA51B,SAAS6uE,YAAa,MAChD,OACA,OAAqBhgE,EAAK+mB,EAAA51B,SAAS8uE,YAAa,MAChD,OACA,OAAqBjgE,EAAK+mB,EAAA51B,SAAS+uE,YAAa,MAChD,OACA,OAAqBlgE,EAAK+mB,EAAA51B,SAASgvE,YAAa,MAChD,OACA,OACEngE,EAAKy4D,EAAS7mF,QAAQc,SAClBq0C,EAAA51B,SAASgvE,YACTp5C,EAAA51B,SAAS+uE,YACb,MAEF,QAAqBlgE,EAAK+mB,EAAA51B,SAASivE,YAAa,MAChD,QAAqBpgE,EAAK+mB,EAAA51B,SAASkvE,YAErC,MAEF,KAAKziC,EAAeuhC,SAClB,OAAQrlF,EAAKrG,MACX,OACA,OAAqBusB,EAAK+mB,EAAA51B,SAASmvE,YAAa,MAChD,OACA,OAAqBtgE,EAAK+mB,EAAA51B,SAASovE,YAAa,MAChD,OACA,OAAqBvgE,EAAK+mB,EAAA51B,SAASqvE,YAAa,MAChD,OACA,OAAqBxgE,EAAK+mB,EAAA51B,SAASsvE,YAAa,MAChD,OACA,OACEzgE,EAAKy4D,EAAS7mF,QAAQc,SAClBq0C,EAAA51B,SAASsvE,YACT15C,EAAA51B,SAASqvE,YACb,MAEF,QAAqBxgE,EAAK+mB,EAAA51B,SAASuvE,YAAa,MAChD,QAAqB1gE,EAAK+mB,EAAA51B,SAASwvE,YAErC,MAEF,KAAK/iC,EAAewhC,SAClB,OAAQtlF,EAAKrG,MACX,OACA,OAAqBusB,EAAK+mB,EAAA51B,SAASyvE,YAAa,MAChD,OACA,OAAqB5gE,EAAK+mB,EAAA51B,SAAS0vE,YAAa,MAChD,OACA,OAAqB7gE,EAAK+mB,EAAA51B,SAAS2vE,YAAa,MAChD,QAAqB9gE,EAAK+mB,EAAA51B,SAAS4vE,YAAa,MAChD,QAAqB/gE,EAAK+mB,EAAA51B,SAAS6vE,YAAa,MAChD,OACA,OACOvI,EAAS7mF,QAAQc,WAAUstB,EAAK+mB,EAAA51B,SAAS2vE,aAIlD,MAEF,KAAKljC,EAAeyhC,SAClB,OAAQvlF,EAAKrG,MACX,QAAqBusB,EAAK+mB,EAAA51B,SAAS8vE,YAAa,MAChD,QAAqBjhE,EAAK+mB,EAAA51B,SAAS+vE,YAErC,MAEF,KAAKtjC,EAAe0hC,kBAClB,OAAQxlF,EAAKrG,MACX,OAAqBusB,EAAK+mB,EAAA51B,SAASgwE,gBAAiB,MACpD,OAAqBnhE,EAAK+mB,EAAA51B,SAASiwE,gBAAiB,MACpD,OAAqBphE,EAAK+mB,EAAA51B,SAASkwE,gBAAiB,MACpD,OAAqBrhE,EAAK+mB,EAAA51B,SAASmwE,gBAErC,MAEF,KAAK1jC,EAAe2hC,kBAClB,OAAQzlF,EAAKrG,MACX,OAAqBusB,EAAK+mB,EAAA51B,SAASowE,gBAAiB,MACpD,OAAqBvhE,EAAK+mB,EAAA51B,SAASqwE,gBAAiB,MACpD,OAAqBxhE,EAAK+mB,EAAA51B,SAASswE,gBAAiB,MACpD,OAAqBzhE,EAAK+mB,EAAA51B,SAASuwE,gBAErC,MAEF,KAAK9jC,EAAe4hC,SAClB,OAAQ1lF,EAAKrG,MACX,QAAqBusB,EAAK+mB,EAAA51B,SAASwwE,YAAa,MAChD,QAAqB3hE,EAAK+mB,EAAA51B,SAASywE,YAErC,MAEF,KAAKhkC,EAAe6hC,SAClB,OAAQ3lF,EAAKrG,MACX,QAAqBusB,EAAK+mB,EAAA51B,SAAS0wE,YAAa,MAChD,QAAqB7hE,EAAK+mB,EAAA51B,SAAS2wE,YAErC,MAEF,KAAKlkC,EAAe8hC,QAClB,OAAQ5lF,EAAKrG,MACX,OACA,OAAqBusB,EAAK+mB,EAAA51B,SAASw8C,WAAY,MAC/C,OACA,OAAqB3tC,EAAK+mB,EAAA51B,SAAS4wE,WAAY,MAC/C,OACA,OAAqB/hE,EAAK+mB,EAAA51B,SAAS6wE,WAAY,MAC/C,QAAqBhiE,EAAK+mB,EAAA51B,SAAS8wE,WAAY,MAC/C,QAAqBjiE,EAAK+mB,EAAA51B,SAAS+wE,WAAY,MAC/C,OACA,OACOzJ,EAAS7mF,QAAQc,WAAUstB,EAAK+mB,EAAA51B,SAAS6wE,YAIlD,MAEF,KAAKpkC,EAAe+hC,QAClB,OAAQ7lF,EAAKrG,MACX,OACA,OAAqBusB,EAAK+mB,EAAA51B,SAAS28C,WAAY,MAC/C,OACA,OAAqB9tC,EAAK+mB,EAAA51B,SAASgxE,WAAY,MAC/C,OACA,OAAqBniE,EAAK+mB,EAAA51B,SAASixE,WAAY,MAC/C,QAAqBpiE,EAAK+mB,EAAA51B,SAASkxE,WAAY,MAC/C,QAAqBriE,EAAK+mB,EAAA51B,SAASmxE,WAAY,MAC/C,OACA,OACO7J,EAAS7mF,QAAQc,WAAUstB,EAAK+mB,EAAA51B,SAASixE,YAIlD,MAEF,KAAKxkC,EAAegiC,QAClB,OAAQ9lF,EAAKrG,MACX,OAAqBusB,EAAK+mB,EAAA51B,SAASoxE,YAAa,MAChD,OAAqBviE,EAAK+mB,EAAA51B,SAASqxE,YAAa,MAChD,OAAqBxiE,EAAK+mB,EAAA51B,SAASsxE,YAAa,MAChD,OAAqBziE,EAAK+mB,EAAA51B,SAASuxE,YAAa,MAChD,OAAqB1iE,EAAK+mB,EAAA51B,SAASwxE,YAAa,MAChD,OAAqB3iE,EAAK+mB,EAAA51B,SAASyxE,YAAa,MAChD,QAAqB5iE,EAAK+mB,EAAA51B,SAAS0xE,WAAY,MAC/C,QAAqB7iE,EAAK+mB,EAAA51B,SAAS2xE,WAAY,MAC/C,OACA,OACOrK,EAAS7mF,QAAQc,WACpBstB,EAAc,GAATlmB,EAAKrG,KACNszC,EAAA51B,SAASwxE,YACT57C,EAAA51B,SAASyxE,aAKnB,MAEF,KAAKhlC,EAAeiiC,QAClB,OAAQ/lF,EAAKrG,MACX,OAAqBusB,EAAK+mB,EAAA51B,SAAS4xE,YAAa,MAChD,OAAqB/iE,EAAK+mB,EAAA51B,SAAS6xE,YAAa,MAChD,OAAqBhjE,EAAK+mB,EAAA51B,SAAS8xE,YAAa,MAChD,OAAqBjjE,EAAK+mB,EAAA51B,SAAS+xE,YAAa,MAChD,OAAqBljE,EAAK+mB,EAAA51B,SAASgyE,YAAa,MAChD,OAAqBnjE,EAAK+mB,EAAA51B,SAASiyE,YAAa,MAChD,QAAqBpjE,EAAK+mB,EAAA51B,SAASkyE,WAAY,MAC/C,QAAqBrjE,EAAK+mB,EAAA51B,SAASmyE,WAAY,MAC/C,OACA,OACO7K,EAAS7mF,QAAQc,WACpBstB,EAAc,GAATlmB,EAAKrG,KACNszC,EAAA51B,SAASgyE,YACTp8C,EAAA51B,SAASiyE,aAKnB,MAEF,KAAKxlC,EAAekiC,QAClB,OAAQhmF,EAAKrG,MACX,OAAqBusB,EAAK+mB,EAAA51B,SAASoyE,YAAa,MAChD,OAAqBvjE,EAAK+mB,EAAA51B,SAASqyE,YAAa,MAChD,OAAqBxjE,EAAK+mB,EAAA51B,SAASsyE,YAAa,MAChD,OAAqBzjE,EAAK+mB,EAAA51B,SAASuyE,YAAa,MAChD,OAAqB1jE,EAAK+mB,EAAA51B,SAASwyE,YAAa,MAChD,OAAqB3jE,EAAK+mB,EAAA51B,SAASyyE,YAAa,MAChD,QAAqB5jE,EAAK+mB,EAAA51B,SAAS0yE,WAAY,MAC/C,QAAqB7jE,EAAK+mB,EAAA51B,SAAS2yE,WAAY,MAC/C,OACA,OACOrL,EAAS7mF,QAAQc,WACpBstB,EAAc,GAATlmB,EAAKrG,KACNszC,EAAA51B,SAASwyE,YACT58C,EAAA51B,SAASyyE,aAKnB,MAEF,KAAKhmC,EAAemiC,QAClB,OAAQjmF,EAAKrG,MACX,OAAqBusB,EAAK+mB,EAAA51B,SAAS4yE,YAAa,MAChD,OAAqB/jE,EAAK+mB,EAAA51B,SAAS6yE,YAAa,MAChD,OAAqBhkE,EAAK+mB,EAAA51B,SAAS8yE,YAAa,MAChD,OAAqBjkE,EAAK+mB,EAAA51B,SAAS+yE,YAAa,MAChD,OAAqBlkE,EAAK+mB,EAAA51B,SAASgzE,YAAa,MAChD,OAAqBnkE,EAAK+mB,EAAA51B,SAASizE,YAAa,MAChD,QAAqBpkE,EAAK+mB,EAAA51B,SAASkzE,WAAY,MAC/C,QAAqBrkE,EAAK+mB,EAAA51B,SAASmzE,WAAY,MAC/C,OACA,OACO7L,EAAS7mF,QAAQc,WACpBstB,EAAc,GAATlmB,EAAKrG,KACNszC,EAAA51B,SAASgzE,YACTp9C,EAAA51B,SAASizE,cAQvB,IAAW,GAAPpkE,EAMF,OALAy4D,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAEbpB,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAEZ/8B,EAAOywF,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKpP,KAAI,KACxDuF,EAAOwwF,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKpP,KAAI,KAE5D,OADA+1F,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAO6hC,aAAaH,EAAIh4B,EAAMC,GAEvC,KAAK21D,EAAe2mC,SACpB,KAAK3mC,EAAe4mC,SACpB,KAAK5mC,EAAe6mC,UACpB,KAAK7mC,EAAe8mC,aACpB,KAAK9mC,EAAe+mC,WAClB,IAAKlM,EAAS7mF,QAAQW,WAAU,GAAgB,MAChD,GACEinF,EAAkB9yE,EAAe0zC,EAAYq+B,GAC7CW,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAG3C,OADAA,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAGhB,IADIjrB,EAAO4M,EAAe,IACjBvM,GAAE,KAMT,OALAs+E,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWtyD,OAEb2wF,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAEZ/E,GAAe,EACnB,OAAQp/B,EAAUiP,cAChB,KAAK+tD,EAAe2mC,SAClB,OAAQzqF,EAAKrG,MACX,OACA,OAAqBusB,EAAK+mB,EAAAl7B,QAAQ+4E,YAAa,MAC/C,OACA,OAAqB5kE,EAAK+mB,EAAAl7B,QAAQg5E,YAAa,MAC/C,OACA,OAAqB7kE,EAAK+mB,EAAAl7B,QAAQi5E,YAAa,MAC/C,OACA,OAAqB9kE,EAAK+mB,EAAAl7B,QAAQk5E,YAAa,MAC/C,OACA,OACE/kE,EAAKy4D,EAAS7mF,QAAQc,SAClBq0C,EAAAl7B,QAAQk5E,YACRh+C,EAAAl7B,QAAQi5E,YACZ,MAEF,QAAqB9kE,EAAK+mB,EAAAl7B,QAAQm5E,YAAa,MAC/C,QAAqBhlE,EAAK+mB,EAAAl7B,QAAQo5E,YAEpC,MAEF,KAAKrnC,EAAe4mC,SAClB,OAAQ1qF,EAAKrG,MACX,QAAqBusB,EAAK+mB,EAAAl7B,QAAQq5E,YAAa,MAC/C,QAAqBllE,EAAK+mB,EAAAl7B,QAAQs5E,YAEpC,MAEF,KAAKvnC,EAAe6mC,UAClB,OAAQ3qF,EAAKrG,MACX,QAAqBusB,EAAK+mB,EAAAl7B,QAAQu5E,aAAc,MAChD,QAAqBplE,EAAK+mB,EAAAl7B,QAAQw5E,aAEpC,MAEF,KAAKznC,EAAe8mC,aAClB,OAAQ5qF,EAAKrG,MACX,OAAqBusB,EAAK+mB,EAAAl7B,QAAQy5E,2BAA4B,MAC9D,OAAqBtlE,EAAK+mB,EAAAl7B,QAAQ05E,2BAA4B,MAC9D,OAAqBvlE,EAAK+mB,EAAAl7B,QAAQ25E,2BAA4B,MAC9D,OAAqBxlE,EAAK+mB,EAAAl7B,QAAQ45E,2BAEpC,MAEF,KAAK7nC,EAAe+mC,WAClB,OAAQ7qF,EAAKrG,MACX,OAAqBusB,EAAK+mB,EAAAl7B,QAAQ65E,4BAA6B,MAC/D,OAAqB1lE,EAAK+mB,EAAAl7B,QAAQ85E,4BAA6B,MAC/D,OAAqB3lE,EAAK+mB,EAAAl7B,QAAQ+5E,4BAA6B,MAC/D,OAAqB5lE,EAAK+mB,EAAAl7B,QAAQg6E,6BAKxC,IAAW,GAAP7lE,EAMF,OALAy4D,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAEbpB,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAEZ/8B,EAAOywF,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKpP,KAAI,KAE5D,OADA+1F,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOyhC,YAAYC,EAAIh4B,GAEhC,KAAK41D,EAAekoC,SACpB,KAAKloC,EAAemoC,SAClB,IAAKtN,EAAS7mF,QAAQW,WAAU,GAAgB,MAChD,GACEinF,EAAkB9yE,EAAe0zC,EAAYq+B,GAC7CW,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAG3C,OADAA,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAGhB,IADIjrB,EAAO4M,EAAe,IACjBvM,GAAE,KAMT,OALAs+E,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAEbpB,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAEZ/E,GAAmB,EACvB,OAAQp/B,EAAUiP,cAChB,KAAK+tD,EAAekoC,SAClB,OAAQhsF,EAAKrG,MACX,OACA,OAAqBusB,EAAK+mB,EAAAzqB,YAAY0pE,YAAa,MACnD,OACA,OAAqBhmE,EAAK+mB,EAAAzqB,YAAY2pE,YAAa,MACnD,OACA,OAAqBjmE,EAAK+mB,EAAAzqB,YAAY4pE,YAAa,MACnD,OACA,OAAqBlmE,EAAK+mB,EAAAzqB,YAAY6pE,YAAa,MACnD,OACA,OACEnmE,EAAKy4D,EAAS7mF,QAAQc,SAClBq0C,EAAAzqB,YAAY6pE,YACZp/C,EAAAzqB,YAAY4pE,YAIpB,MAEF,KAAKtoC,EAAemoC,SAClB,OAAQjsF,EAAKrG,MACX,OAAqBusB,EAAK+mB,EAAAzqB,YAAY8pE,aAAc,MACpD,OAAqBpmE,EAAK+mB,EAAAzqB,YAAY+pE,aAAc,MACpD,OAAqBrmE,EAAK+mB,EAAAzqB,YAAYgqE,aAAc,MACpD,OAAqBtmE,EAAK+mB,EAAAzqB,YAAYiqE,aAAc,MACpD,OAAqBvmE,EAAK+mB,EAAAzqB,YAAYkqE,aAAc,MACpD,OAAqBxmE,EAAK+mB,EAAAzqB,YAAYmqE,aAAc,MACpD,OAAqBzmE,EAAK+mB,EAAAzqB,YAAYoqE,aAAc,MACpD,OAAqB1mE,EAAK+mB,EAAAzqB,YAAYqqE,aAAc,MACpD,OACE3mE,EAAKy4D,EAAS7mF,QAAQc,SAClBq0C,EAAAzqB,YAAYoqE,aACZ3/C,EAAAzqB,YAAYkqE,aAChB,MAEF,OACExmE,EAAKy4D,EAAS7mF,QAAQc,SAClBq0C,EAAAzqB,YAAYqqE,aACZ5/C,EAAAzqB,YAAYmqE,cAOxB,IAAW,GAAPzmE,EAMF,OALAy4D,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWtyD,OAEb2wF,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAEZ/8B,EAAOywF,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKpP,KAAI,KACxDuF,EAAOwwF,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAK/P,IAAG,KAE3D,OADA02F,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAO8nC,gBAAgBpG,EAAIh4B,EAAMC,GAE1C,KAAK21D,EAAegpC,SACpB,KAAKhpC,EAAeipC,QACpB,KAAKjpC,EAAekpC,SAClB,IAAKrO,EAAS7mF,QAAQW,WAAU,GAAgB,MAChD,GACE4mF,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAG3C,OADAA,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAEZ/E,GAAgB,EACpB,OAAQp/B,EAAUiP,cAChB,QAAS1I,QAAO,GAChB,KAAKy2D,EAAegpC,SAAY5mE,EAAK+mB,EAAA51B,SAAS41E,UAAW,MACzD,KAAKnpC,EAAeipC,QAAY7mE,EAAK+mB,EAAA51B,SAAS61E,SAAU,MACxD,KAAKppC,EAAekpC,SAAY9mE,EAAK+mB,EAAA51B,SAAS81E,UAE5Cj/F,EAAOywF,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKpP,KAAI,KACxDuF,EAAOwwF,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKpP,KAAI,KAC5D,OAAOpE,EAAO6hC,aAAaH,EAAIh4B,EAAMC,GAEvC,KAAK21D,EAAespC,SAClB,IAAKzO,EAAS7mF,QAAQW,WAAU,GAAgB,MAChD,GACE4mF,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAG3C,OADAA,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAEZ/8B,EAAOywF,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKpP,KAAI,KAC5D,OAAOpE,EAAOyhC,YAAYgnB,EAAAl7B,QAAQs7E,UAAWn/F,GAE/C,KAAK41D,EAAewpC,eAClB,IAAK3O,EAAS7mF,QAAQW,WAAU,GAAgB,MAChD,GACE4mF,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAG3C,OADAA,EAAS97B,YAAcnyD,EAAAsH,KAAKpP,KACrBpE,EAAOymC,oBAEZ/8B,EAAOywF,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKpP,KAAI,KACxDuF,EAAOwwF,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKpP,KAAI,KACxDwF,EAAOuwF,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKpP,KAAI,KAC5D,OAAOpE,EAAO2nC,oBAAoBj+B,EAAMC,EAAMC,GAEhD,KAAK01D,EAAeypC,cACpB,KAAKzpC,EAAe0pC,cAClB,IAAK7O,EAAS7mF,QAAQW,WAAU,GAAgB,MAChD,GACEinF,EAAkB9yE,EAAe0zC,EAAYq+B,GAC7CW,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAG3C,OADAA,EAAS97B,YAAcnyD,EAAAsH,KAAKvP,KACrBjE,EAAOymC,oBAGhB,IADIjrB,EAAO4M,EAAe,IACjBvM,GAAE,KAKT,OAJAs+E,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAENv7F,EAAOymC,oBAEZ/E,GAAe,EACnB,OAAQp/B,EAAUiP,cAChB,QAAS1I,QAAO,GAChB,KAAKy2D,EAAeypC,cAClB,OAAQvtF,EAAKrG,MACX,OACA,OAAqBusB,EAAK+mB,EAAAl7B,QAAQgiD,gBAAiB,MACnD,OACA,OAAqB7tC,EAAK+mB,EAAAl7B,QAAQ07E,gBAAiB,MACnD,OACA,OAAqBvnE,EAAK+mB,EAAAl7B,QAAQ27E,gBAAiB,MACnD,OACA,OAAqBxnE,EAAK+mB,EAAAl7B,QAAQ47E,gBAAiB,MACnD,OACA,OACEznE,EAAKy4D,EAAS7mF,QAAQc,SAClBq0C,EAAAl7B,QAAQ47E,gBACR1gD,EAAAl7B,QAAQ27E,gBAIhB,MAEF,KAAK5pC,EAAe0pC,cAClB,OAAQxtF,EAAKrG,MACX,OACA,OAAqBusB,EAAK+mB,EAAAl7B,QAAQ6hD,gBAAiB,MACnD,OACA,OAAqB1tC,EAAK+mB,EAAAl7B,QAAQ67E,gBAAiB,MACnD,OACA,OAAqB1nE,EAAK+mB,EAAAl7B,QAAQ87E,gBAAiB,MACnD,OACA,OAAqB3nE,EAAK+mB,EAAAl7B,QAAQ+7E,gBAAiB,MACnD,OACA,OACE5nE,EAAKy4D,EAAS7mF,QAAQc,SAClBq0C,EAAAl7B,QAAQ+7E,gBACR7gD,EAAAl7B,QAAQ87E,iBAOpB,IAAW,GAAP3nE,EAMF,OALAy4D,EAAStuF,MACPI,EAAA/C,eAAeyU,wBACfm+C,EAAWy/B,oBAEbpB,EAAS97B,YAAcnyD,EAAAsH,KAAKvP,KACrBjE,EAAOymC,oBAEZ/8B,EAAOywF,EAASx3B,kBAAkBzgC,EAAS,GAAIh2B,EAAAsH,KAAKpP,KAAI,KAE5D,OADA+1F,EAAS97B,YAAcnyD,EAAAsH,KAAKvP,KACrBjE,EAAOyhC,YAAYC,EAAIh4B,GAKhC,KAAK41D,EAAeiqC,aAClB,GACE1O,EAAgBzyE,EAAe0zC,EAAYx5D,GAC3Cw4F,EAAkB54D,EAAU,EAAG45B,EAAYq+B,GAG3C,OADAA,EAAS97B,YAAcnyD,EAAAsH,KAAKG,KACrB3T,EAAOymC,oBAEZ9E,EAAOw4D,EAAS93B,4BAA4BngC,EAAS,GAAIh2B,EAAAsH,KAAK1P,IAAG,GAArE,IAEIiW,IADAyB,EAAO2+E,EAAS97B,aACUtkD,mBAC9B,OACGyB,EAAKK,GAAE,MACP9B,IAC2C,GAA5CA,GAAmBD,eAAejS,QAClCkS,GAAmBD,eAAe,IAAMqgF,EAAS7mF,QAAQI,WAU3DymF,EAASx7B,mBAAoB,EAC7Bw7B,EAAS97B,YAAcnyD,EAAAsH,KAAKG,KACrB3T,EAAOomC,WAAW,gBAAiB,CAAEzE,GAAQ8mB,EAAAj+B,WAAWka,QAV7Dy1D,EAAStuF,MACPI,EAAA/C,eAAeo5D,mCACfxG,EAAWtyD,MAAOgS,EAAKrR,WAAY,wBAErCgwF,EAAS97B,YAAcnyD,EAAAsH,KAAKG,KACrB3T,EAAOymC,qBAYlB,OADI9E,EAmBR,SACEw4D,EACA73F,EACA4/B,EACA45B,GAGA,OAAQx5D,EAAUiP,cAOhB,KAAK+tD,EAAekqC,QAAS,OAAOC,EAASnqC,EAAeyZ,IAAKohB,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GACzG,KAAKwD,EAAeoqC,QAAS,OAAOD,EAASnqC,EAAeyZ,IAAKohB,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GACzG,KAAKwD,EAAeqqC,QAAS,OAAOF,EAASnqC,EAAe+7B,IAAKlB,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GACzG,KAAKwD,EAAesqC,QAAS,OAAOH,EAASnqC,EAAe+7B,IAAKlB,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GACzG,KAAKwD,EAAeuqC,WAAY,OAAOJ,EAASnqC,EAAem8B,OAAQtB,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC/G,KAAKwD,EAAewqC,WAAY,OAAOL,EAASnqC,EAAem8B,OAAQtB,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC/G,KAAKwD,EAAeyqC,SAAU,OAAON,EAASnqC,EAAeq8B,KAAMxB,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC3G,KAAKwD,EAAe0qC,SAAU,OAAOP,EAASnqC,EAAeq8B,KAAMxB,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC3G,KAAKwD,EAAe2qC,SAAU,OAAOR,EAASnqC,EAAes8B,KAAMzB,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC3G,KAAKwD,EAAe4qC,SAAU,OAAOT,EAASnqC,EAAes8B,KAAMzB,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC3G,KAAKwD,EAAe6qC,QAAS,OAAOV,EAASnqC,EAAekvB,IAAK2L,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKtP,IAAK43D,GACzG,KAAKwD,EAAe8qC,QAAS,OAAOX,EAASnqC,EAAekvB,IAAK2L,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKrP,IAAK23D,GACzG,KAAKwD,EAAe+qC,QAAS,OAAOZ,EAASnqC,EAAeN,IAAKm7B,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKtP,IAAK43D,GACzG,KAAKwD,EAAegrC,QAAS,OAAOb,EAASnqC,EAAeN,IAAKm7B,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKrP,IAAK23D,GACzG,KAAKwD,EAAeirC,QAAS,OAAOd,EAASnqC,EAAe8d,IAAK+c,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKtP,IAAK43D,GACzG,KAAKwD,EAAekrC,QAAS,OAAOf,EAASnqC,EAAe8d,IAAK+c,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKrP,IAAK23D,GACzG,KAAKwD,EAAemrC,SAAU,OAAOhB,EAASnqC,EAAexW,KAAMqxC,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKtP,IAAK43D,GAC3G,KAAKwD,EAAeorC,SAAU,OAAOjB,EAASnqC,EAAexW,KAAMqxC,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKrP,IAAK23D,GAC3G,KAAKwD,EAAeqrC,UAAW,OAAOlB,EAASnqC,EAAemvB,MAAO0L,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKtP,IAAK43D,GAC7G,KAAKwD,EAAesrC,UAAW,OAAOnB,EAASnqC,EAAemvB,MAAO0L,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKrP,IAAK23D,GAC7G,KAAKwD,EAAeurC,aAAc,OAAOpB,EAASnqC,EAAe48B,SAAU/B,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKtP,IAAK43D,GACnH,KAAKwD,EAAewrC,aAAc,OAAOrB,EAASnqC,EAAe48B,SAAU/B,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKrP,IAAK23D,GACnH,KAAKwD,EAAeyrC,YAAa,OAAOtB,EAASnqC,EAAe68B,QAAShC,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKtP,IAAK43D,GACjH,KAAKwD,EAAe0rC,YAAa,OAAOvB,EAASnqC,EAAe68B,QAAShC,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKrP,IAAK23D,GACjH,KAAKwD,EAAe2rC,oBAAqB,OAAOxB,EAASnqC,EAAe88B,YAAajC,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAKtP,IAAK43D,GAC7H,KAAKwD,EAAe4rC,oBAAqB,OAAOzB,EAASnqC,EAAe88B,YAAajC,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAKrP,IAAK23D,GAC7H,KAAKwD,EAAe6rC,oBAAqB,OAAO1B,EAASnqC,EAAe88B,YAAajC,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC7H,KAAKwD,EAAe8rC,oBAAqB,OAAO3B,EAASnqC,EAAe88B,YAAajC,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC7H,KAAKwD,EAAe+rC,SAAU,OAAO5B,EAASnqC,EAAesvB,KAAMuL,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKtP,IAAK43D,GAC3G,KAAKwD,EAAegsC,SAAU,OAAO7B,EAASnqC,EAAesvB,KAAMuL,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKrP,IAAK23D,GAC3G,KAAKwD,EAAeisC,UAAW,OAAO9B,EAASnqC,EAAeovB,MAAOyL,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKtP,IAAK43D,GAC7G,KAAKwD,EAAeksC,UAAW,OAAO/B,EAASnqC,EAAeovB,MAAOyL,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKrP,IAAK23D,GAC7G,KAAKwD,EAAemsC,YAAa,OAAOhC,EAASnqC,EAAe7wB,KAAM0rD,EAAUjuF,EAAAsH,KAAKjQ,GAAI2+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC7G,KAAKwD,EAAeosC,YAAa,OAAOjC,EAASnqC,EAAe7wB,KAAM0rD,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC7G,KAAKwD,EAAeqsC,aAAc,OAAOlC,EAASnqC,EAAe7wB,KAAM0rD,EAAUjuF,EAAAsH,KAAKhQ,IAAK0+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC/G,KAAKwD,EAAessC,aAAc,OAAOnC,EAASnqC,EAAe7wB,KAAM0rD,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC/G,KAAKwD,EAAeusC,SAAU,OAAOpC,EAASnqC,EAAe7wB,KAAM0rD,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC3G,KAAKwD,EAAewsC,YAAa,OAAOrC,EAASnqC,EAAe7wB,KAAM0rD,EAAUjuF,EAAAsH,KAAKjQ,GAAI2+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC7G,KAAKwD,EAAeysC,YAAa,OAAOtC,EAASnqC,EAAe7wB,KAAM0rD,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC7G,KAAKwD,EAAe0sC,aAAc,OAAOvC,EAASnqC,EAAe7wB,KAAM0rD,EAAUjuF,EAAAsH,KAAKhQ,IAAK0+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC/G,KAAKwD,EAAe2sC,aAAc,OAAOxC,EAASnqC,EAAe7wB,KAAM0rD,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC/G,KAAKwD,EAAe4sC,aAAc,OAAOzC,EAASnqC,EAAe7wB,KAAM0rD,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC/G,KAAKwD,EAAe6sC,aAAc,OAAO1C,EAASnqC,EAAe7wB,KAAM0rD,EAAUjuF,EAAAsH,KAAK1P,IAAKo+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC/G,KAAKwD,EAAe8sC,SAAU,OAAO3C,EAASnqC,EAAe7wB,KAAM0rD,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC3G,KAAKwD,EAAe+sC,SAAU,OAAO5C,EAASnqC,EAAe7wB,KAAM0rD,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKtP,IAAK43D,GAC3G,KAAKwD,EAAegtC,SAAU,OAAO7C,EAASnqC,EAAe7wB,KAAM0rD,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKrP,IAAK23D,GAC3G,KAAKwD,EAAeitC,WAAY,OAAO9C,EAASnqC,EAAe/9B,MAAO44D,EAAUjuF,EAAAsH,KAAKjQ,GAAI2+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC7G,KAAKwD,EAAektC,YAAa,OAAO/C,EAASnqC,EAAe/9B,MAAO44D,EAAUjuF,EAAAsH,KAAKhQ,IAAK0+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC/G,KAAKwD,EAAemtC,UAAW,OAAOhD,EAASnqC,EAAe/9B,MAAO44D,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC7G,KAAKwD,EAAeotC,WAAY,OAAOjD,EAASnqC,EAAe/9B,MAAO44D,EAAUjuF,EAAAsH,KAAKjQ,GAAI2+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC7G,KAAKwD,EAAeqtC,YAAa,OAAOlD,EAASnqC,EAAe/9B,MAAO44D,EAAUjuF,EAAAsH,KAAKhQ,IAAK0+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC/G,KAAKwD,EAAestC,YAAa,OAAOnD,EAASnqC,EAAe/9B,MAAO44D,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC/G,KAAKwD,EAAeutC,UAAW,OAAOpD,EAASnqC,EAAe/9B,MAAO44D,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC7G,KAAKwD,EAAewtC,UAAW,OAAOrD,EAASnqC,EAAe/9B,MAAO44D,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKtP,IAAK43D,GAC7G,KAAKwD,EAAeytC,UAAW,OAAOtD,EAASnqC,EAAe/9B,MAAO44D,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKrP,IAAK23D,GAE/G,GAAIq+B,EAAS7mF,QAAQW,WAAU,IAC7B,OAAQ3R,EAAUiP,cAEhB,KAAK+tD,EAAe0tC,mBAAoB,OAAOvD,EAASnqC,EAAeu9B,YAAa1C,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC3H,KAAKwD,EAAe2tC,oBAAqB,OAAOxD,EAASnqC,EAAeu9B,YAAa1C,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC7H,KAAKwD,EAAe4tC,gBAAiB,OAAOzD,EAASnqC,EAAeu9B,YAAa1C,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GACzH,KAAKwD,EAAe6tC,mBAAoB,OAAO1D,EAASnqC,EAAeu9B,YAAa1C,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC3H,KAAKwD,EAAe8tC,oBAAqB,OAAO3D,EAASnqC,EAAeu9B,YAAa1C,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC7H,KAAKwD,EAAe+tC,oBAAqB,OAAO5D,EAASnqC,EAAeu9B,YAAa1C,EAAUjuF,EAAAsH,KAAK1P,IAAKo+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC7H,KAAKwD,EAAeguC,gBAAiB,OAAO7D,EAASnqC,EAAeu9B,YAAa1C,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAEzH,KAAKwD,EAAeiuC,kBAAmB,OAAO9D,EAASnqC,EAAew9B,aAAc3C,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC3H,KAAKwD,EAAekuC,mBAAoB,OAAO/D,EAASnqC,EAAew9B,aAAc3C,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC7H,KAAKwD,EAAemuC,iBAAkB,OAAOhE,EAASnqC,EAAew9B,aAAc3C,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC3H,KAAKwD,EAAeouC,kBAAmB,OAAOjE,EAASnqC,EAAew9B,aAAc3C,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC3H,KAAKwD,EAAequC,mBAAoB,OAAOlE,EAASnqC,EAAew9B,aAAc3C,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC7H,KAAKwD,EAAesuC,mBAAoB,OAAOnE,EAASnqC,EAAew9B,aAAc3C,EAAUjuF,EAAAsH,KAAK1P,IAAKo+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC7H,KAAKwD,EAAeuuC,iBAAkB,OAAOpE,EAASnqC,EAAew9B,aAAc3C,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAE3H,KAAKwD,EAAewuC,sBAAuB,OAAOrE,EAASnqC,EAAey9B,WAAY5C,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC7H,KAAKwD,EAAeyuC,uBAAwB,OAAOtE,EAASnqC,EAAey9B,WAAY5C,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC/H,KAAKwD,EAAe0uC,mBAAoB,OAAOvE,EAASnqC,EAAey9B,WAAY5C,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC3H,KAAKwD,EAAe2uC,sBAAuB,OAAOxE,EAASnqC,EAAey9B,WAAY5C,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC7H,KAAKwD,EAAe4uC,uBAAwB,OAAOzE,EAASnqC,EAAey9B,WAAY5C,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC/H,KAAKwD,EAAe6uC,uBAAwB,OAAO1E,EAASnqC,EAAey9B,WAAY5C,EAAUjuF,EAAAsH,KAAK1P,IAAKo+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC/H,KAAKwD,EAAe8uC,mBAAoB,OAAO3E,EAASnqC,EAAey9B,WAAY5C,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAE3H,KAAKwD,EAAe+uC,sBAAuB,OAAO5E,EAASnqC,EAAe09B,WAAY7C,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC7H,KAAKwD,EAAegvC,uBAAwB,OAAO7E,EAASnqC,EAAe09B,WAAY7C,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC/H,KAAKwD,EAAeivC,mBAAoB,OAAO9E,EAASnqC,EAAe09B,WAAY7C,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC3H,KAAKwD,EAAekvC,sBAAuB,OAAO/E,EAASnqC,EAAe09B,WAAY7C,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC7H,KAAKwD,EAAemvC,uBAAwB,OAAOhF,EAASnqC,EAAe09B,WAAY7C,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC/H,KAAKwD,EAAeovC,uBAAwB,OAAOjF,EAASnqC,EAAe09B,WAAY7C,EAAUjuF,EAAAsH,KAAK1P,IAAKo+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC/H,KAAKwD,EAAeqvC,mBAAoB,OAAOlF,EAASnqC,EAAe09B,WAAY7C,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAE3H,KAAKwD,EAAesvC,sBAAuB,OAAOnF,EAASnqC,EAAe29B,WAAY9C,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC7H,KAAKwD,EAAeuvC,uBAAwB,OAAOpF,EAASnqC,EAAe29B,WAAY9C,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC/H,KAAKwD,EAAewvC,mBAAoB,OAAOrF,EAASnqC,EAAe29B,WAAY9C,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC3H,KAAKwD,EAAeyvC,sBAAuB,OAAOtF,EAASnqC,EAAe29B,WAAY9C,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC7H,KAAKwD,EAAe0vC,uBAAwB,OAAOvF,EAASnqC,EAAe29B,WAAY9C,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC/H,KAAKwD,EAAe2vC,uBAAwB,OAAOxF,EAASnqC,EAAe29B,WAAY9C,EAAUjuF,EAAAsH,KAAK1P,IAAKo+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC/H,KAAKwD,EAAe4vC,mBAAoB,OAAOzF,EAASnqC,EAAe29B,WAAY9C,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAE3H,KAAKwD,EAAe6vC,qBAAsB,OAAO1F,EAASnqC,EAAe49B,UAAW/C,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC3H,KAAKwD,EAAe8vC,sBAAuB,OAAO3F,EAASnqC,EAAe49B,UAAW/C,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC7H,KAAKwD,EAAe+vC,kBAAmB,OAAO5F,EAASnqC,EAAe49B,UAAW/C,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GACzH,KAAKwD,EAAegwC,qBAAsB,OAAO7F,EAASnqC,EAAe49B,UAAW/C,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC3H,KAAKwD,EAAeiwC,sBAAuB,OAAO9F,EAASnqC,EAAe49B,UAAW/C,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC7H,KAAKwD,EAAekwC,sBAAuB,OAAO/F,EAASnqC,EAAe49B,UAAW/C,EAAUjuF,EAAAsH,KAAK1P,IAAKo+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC7H,KAAKwD,EAAemwC,kBAAmB,OAAOhG,EAASnqC,EAAe49B,UAAW/C,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAEzH,KAAKwD,EAAeowC,sBAAuB,OAAOjG,EAASnqC,EAAe69B,WAAYhD,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC7H,KAAKwD,EAAeqwC,uBAAwB,OAAOlG,EAASnqC,EAAe69B,WAAYhD,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC/H,KAAKwD,EAAeswC,mBAAoB,OAAOnG,EAASnqC,EAAe69B,WAAYhD,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC3H,KAAKwD,EAAeuwC,sBAAuB,OAAOpG,EAASnqC,EAAe69B,WAAYhD,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC7H,KAAKwD,EAAewwC,uBAAwB,OAAOrG,EAASnqC,EAAe69B,WAAYhD,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC/H,KAAKwD,EAAeywC,uBAAwB,OAAOtG,EAASnqC,EAAe69B,WAAYhD,EAAUjuF,EAAAsH,KAAK1P,IAAKo+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC/H,KAAKwD,EAAe0wC,mBAAoB,OAAOvG,EAASnqC,EAAe69B,WAAYhD,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAE3H,KAAKwD,EAAe2wC,uBAAwB,OAAOxG,EAASnqC,EAAe89B,YAAajD,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC/H,KAAKwD,EAAe4wC,wBAAyB,OAAOzG,EAASnqC,EAAe89B,YAAajD,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GACjI,KAAKwD,EAAe6wC,oBAAqB,OAAO1G,EAASnqC,EAAe89B,YAAajD,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC7H,KAAKwD,EAAe8wC,uBAAwB,OAAO3G,EAASnqC,EAAe89B,YAAajD,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAC/H,KAAKwD,EAAe+wC,wBAAyB,OAAO5G,EAASnqC,EAAe89B,YAAajD,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GACjI,KAAKwD,EAAegxC,wBAAyB,OAAO7G,EAASnqC,EAAe89B,YAAajD,EAAUjuF,EAAAsH,KAAK1P,IAAKo+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GACjI,KAAKwD,EAAeixC,oBAAqB,OAAO9G,EAASnqC,EAAe89B,YAAajD,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAE7H,KAAKwD,EAAekxC,0BAA2B,OAAO/G,EAASnqC,EAAeq+B,eAAgBxD,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GACrI,KAAKwD,EAAemxC,2BAA4B,OAAOhH,EAASnqC,EAAeq+B,eAAgBxD,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GACvI,KAAKwD,EAAeoxC,uBAAwB,OAAOjH,EAASnqC,EAAeq+B,eAAgBxD,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GACnI,KAAKwD,EAAeqxC,0BAA2B,OAAOlH,EAASnqC,EAAeq+B,eAAgBxD,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GACrI,KAAKwD,EAAesxC,2BAA4B,OAAOnH,EAASnqC,EAAeq+B,eAAgBxD,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GACvI,KAAKwD,EAAeuxC,2BAA4B,OAAOpH,EAASnqC,EAAeq+B,eAAgBxD,EAAUjuF,EAAAsH,KAAK1P,IAAKo+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GACvI,KAAKwD,EAAewxC,uBAAwB,OAAOrH,EAASnqC,EAAeq+B,eAAgBxD,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAEnI,KAAKwD,EAAeyxC,SAAU,OAAOtH,EAASnqC,EAAes+B,YAAazD,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAClH,KAAKwD,EAAe0xC,SAAU,OAAOvH,EAASnqC,EAAes+B,YAAazD,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAClH,KAAKwD,EAAe2xC,WAAY,OAAOxH,EAASnqC,EAAeu+B,cAAe1D,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GACtH,KAAKwD,EAAe4xC,WAAY,OAAOzH,EAASnqC,EAAeu+B,cAAe1D,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAG1H,GAAIq+B,EAAS7mF,QAAQW,WAAU,GAC7B,OAAQ3R,EAAUiP,cAEhB,KAAK+tD,EAAe6xC,UAAW,OAAO1H,EAASnqC,EAAe7wB,KAAM0rD,EAAUjuF,EAAAsH,KAAKpP,KAAM89B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAC9G,KAAKwD,EAAe8xC,WAAY,OAAO3H,EAASnqC,EAAe/9B,MAAO44D,EAAUjuF,EAAAsH,KAAKpP,KAAM89B,EAAUh2B,EAAAsH,KAAKG,KAAMmoD,GAEhH,KAAKwD,EAAe+xC,YAAa,OAAO5H,EAASnqC,EAAew/B,WAAY3E,EAAUjuF,EAAAsH,KAAKjQ,GAAI2+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACpH,KAAKwD,EAAegyC,qBAAsB,OAAO7H,EAASnqC,EAAe+/B,kBAAmBlF,EAAUjuF,EAAAsH,KAAKjQ,GAAI2+B,EAAUh2B,EAAAsH,KAAKjQ,GAAIu4D,GAClI,KAAKwD,EAAeiyC,qBAAsB,OAAO9H,EAASnqC,EAAe+/B,kBAAmBlF,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAK5P,GAAIk4D,GAClI,KAAKwD,EAAekyC,mBAAoB,OAAO/H,EAASnqC,EAAeygC,kBAAmB5F,EAAUjuF,EAAAsH,KAAKjQ,GAAI2+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAClI,KAAKwD,EAAemyC,UAAW,OAAOhI,EAASnqC,EAAeshC,SAAUzG,EAAUjuF,EAAAsH,KAAKjQ,GAAI2+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAChH,KAAKwD,EAAeoyC,UAAW,OAAOjI,EAASnqC,EAAeuhC,SAAU1G,EAAUjuF,EAAAsH,KAAKjQ,GAAI2+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAChH,KAAKwD,EAAeqyC,UAAW,OAAOlI,EAASnqC,EAAewhC,SAAU3G,EAAUjuF,EAAAsH,KAAKjQ,GAAI2+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAChH,KAAKwD,EAAesyC,UAAW,OAAOnI,EAASnqC,EAAe2mC,SAAU9L,EAAUjuF,EAAAsH,KAAKjQ,GAAI2+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAChH,KAAKwD,EAAeuyC,qBAAsB,OAAOpI,EAASnqC,EAAe0hC,kBAAmB7G,EAAUjuF,EAAAsH,KAAKjQ,GAAI2+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACpI,KAAKwD,EAAewyC,qBAAsB,OAAOrI,EAASnqC,EAAe0hC,kBAAmB7G,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACpI,KAAKwD,EAAeyyC,qBAAsB,OAAOtI,EAASnqC,EAAe2hC,kBAAmB9G,EAAUjuF,EAAAsH,KAAKjQ,GAAI2+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACpI,KAAKwD,EAAe0yC,qBAAsB,OAAOvI,EAASnqC,EAAe2hC,kBAAmB9G,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACpI,KAAKwD,EAAe2yC,UAAW,OAAOxI,EAASnqC,EAAekoC,SAAUrN,EAAUjuF,EAAAsH,KAAKjQ,GAAI2+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAChH,KAAKwD,EAAe4yC,YAAa,OAAOzI,EAASnqC,EAAemoC,SAAUtN,EAAUjuF,EAAAsH,KAAKjQ,GAAI2+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAClH,KAAKwD,EAAe6yC,YAAa,OAAO1I,EAASnqC,EAAemoC,SAAUtN,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAClH,KAAKwD,EAAe8yC,eAAgB,OAAO3I,EAASnqC,EAAeypC,cAAe5O,EAAUjuF,EAAAsH,KAAKjQ,GAAI2+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GACzH,KAAKwD,EAAe+yC,eAAgB,OAAO5I,EAASnqC,EAAe0pC,cAAe7O,EAAUjuF,EAAAsH,KAAKjQ,GAAI2+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GACzH,KAAKwD,EAAegzC,SAAU,OAAO7I,EAASnqC,EAAe8hC,QAASjH,EAAUjuF,EAAAsH,KAAKjQ,GAAI2+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAC9G,KAAKwD,EAAeizC,SAAU,OAAO9I,EAASnqC,EAAe+hC,QAASlH,EAAUjuF,EAAAsH,KAAKjQ,GAAI2+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAC9G,KAAKwD,EAAekzC,WAAY,OAAO/I,EAASnqC,EAAegiC,QAASnH,EAAUjuF,EAAAsH,KAAKjQ,GAAI2+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAChH,KAAKwD,EAAemzC,WAAY,OAAOhJ,EAASnqC,EAAegiC,QAASnH,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAChH,KAAKwD,EAAeozC,WAAY,OAAOjJ,EAASnqC,EAAeiiC,QAASpH,EAAUjuF,EAAAsH,KAAKjQ,GAAI2+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAChH,KAAKwD,EAAeqzC,WAAY,OAAOlJ,EAASnqC,EAAeiiC,QAASpH,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAChH,KAAKwD,EAAeszC,WAAY,OAAOnJ,EAASnqC,EAAekiC,QAASrH,EAAUjuF,EAAAsH,KAAKjQ,GAAI2+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAChH,KAAKwD,EAAeuzC,WAAY,OAAOpJ,EAASnqC,EAAekiC,QAASrH,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAChH,KAAKwD,EAAewzC,WAAY,OAAOrJ,EAASnqC,EAAemiC,QAAStH,EAAUjuF,EAAAsH,KAAKjQ,GAAI2+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAChH,KAAKwD,EAAeyzC,WAAY,OAAOtJ,EAASnqC,EAAemiC,QAAStH,EAAUjuF,EAAAsH,KAAK5P,GAAIs+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAEhH,KAAKwD,EAAe0zC,YAAa,OAAOvJ,EAASnqC,EAAew/B,WAAY3E,EAAUjuF,EAAAsH,KAAKhQ,IAAK0+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACrH,KAAKwD,EAAe2zC,qBAAsB,OAAOxJ,EAASnqC,EAAe+/B,kBAAmBlF,EAAUjuF,EAAAsH,KAAKhQ,IAAK0+B,EAAUh2B,EAAAsH,KAAKhQ,IAAKs4D,GACpI,KAAKwD,EAAe4zC,qBAAsB,OAAOzJ,EAASnqC,EAAe+/B,kBAAmBlF,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAK3P,IAAKi4D,GACpI,KAAKwD,EAAe6zC,mBAAoB,OAAO1J,EAASnqC,EAAeygC,kBAAmB5F,EAAUjuF,EAAAsH,KAAKhQ,IAAK0+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACnI,KAAKwD,EAAe8zC,UAAW,OAAO3J,EAASnqC,EAAeshC,SAAUzG,EAAUjuF,EAAAsH,KAAKhQ,IAAK0+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAe+zC,UAAW,OAAO5J,EAASnqC,EAAeuhC,SAAU1G,EAAUjuF,EAAAsH,KAAKhQ,IAAK0+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAeg0C,UAAW,OAAO7J,EAASnqC,EAAewhC,SAAU3G,EAAUjuF,EAAAsH,KAAKhQ,IAAK0+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAei0C,UAAW,OAAO9J,EAASnqC,EAAe2mC,SAAU9L,EAAUjuF,EAAAsH,KAAKhQ,IAAK0+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAek0C,qBAAsB,OAAO/J,EAASnqC,EAAe0hC,kBAAmB7G,EAAUjuF,EAAAsH,KAAKhQ,IAAK0+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACrI,KAAKwD,EAAem0C,qBAAsB,OAAOhK,EAASnqC,EAAe0hC,kBAAmB7G,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACrI,KAAKwD,EAAeo0C,qBAAsB,OAAOjK,EAASnqC,EAAe2hC,kBAAmB9G,EAAUjuF,EAAAsH,KAAKhQ,IAAK0+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACrI,KAAKwD,EAAeq0C,qBAAsB,OAAOlK,EAASnqC,EAAe2hC,kBAAmB9G,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACrI,KAAKwD,EAAes0C,UAAW,OAAOnK,EAASnqC,EAAekoC,SAAUrN,EAAUjuF,EAAAsH,KAAKhQ,IAAK0+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAeu0C,YAAa,OAAOpK,EAASnqC,EAAemoC,SAAUtN,EAAUjuF,EAAAsH,KAAKhQ,IAAK0+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACnH,KAAKwD,EAAew0C,YAAa,OAAOrK,EAASnqC,EAAemoC,SAAUtN,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACnH,KAAKwD,EAAey0C,eAAgB,OAAOtK,EAASnqC,EAAeypC,cAAe5O,EAAUjuF,EAAAsH,KAAKhQ,IAAK0+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC1H,KAAKwD,EAAe00C,eAAgB,OAAOvK,EAASnqC,EAAe0pC,cAAe7O,EAAUjuF,EAAAsH,KAAKhQ,IAAK0+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC1H,KAAKwD,EAAe20C,SAAU,OAAOxK,EAASnqC,EAAe8hC,QAASjH,EAAUjuF,EAAAsH,KAAKhQ,IAAK0+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAC/G,KAAKwD,EAAe40C,SAAU,OAAOzK,EAASnqC,EAAe+hC,QAASlH,EAAUjuF,EAAAsH,KAAKhQ,IAAK0+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAC/G,KAAKwD,EAAe60C,WAAY,OAAO1K,EAASnqC,EAAegiC,QAASnH,EAAUjuF,EAAAsH,KAAKhQ,IAAK0+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAe80C,WAAY,OAAO3K,EAASnqC,EAAegiC,QAASnH,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAe+0C,WAAY,OAAO5K,EAASnqC,EAAeiiC,QAASpH,EAAUjuF,EAAAsH,KAAKhQ,IAAK0+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAeg1C,WAAY,OAAO7K,EAASnqC,EAAeiiC,QAASpH,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAei1C,WAAY,OAAO9K,EAASnqC,EAAekiC,QAASrH,EAAUjuF,EAAAsH,KAAKhQ,IAAK0+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAek1C,WAAY,OAAO/K,EAASnqC,EAAekiC,QAASrH,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAem1C,WAAY,OAAOhL,EAASnqC,EAAemiC,QAAStH,EAAUjuF,EAAAsH,KAAKhQ,IAAK0+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAeo1C,WAAY,OAAOjL,EAASnqC,EAAemiC,QAAStH,EAAUjuF,EAAAsH,KAAK3P,IAAKq+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAEjH,KAAKwD,EAAeq1C,YAAa,OAAOlL,EAASnqC,EAAew/B,WAAY3E,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACrH,KAAKwD,EAAes1C,mBAAoB,OAAOnL,EAASnqC,EAAe+/B,kBAAmBlF,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAClI,KAAKwD,EAAeu1C,mBAAoB,OAAOpL,EAASnqC,EAAeygC,kBAAmB5F,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACnI,KAAKwD,EAAew1C,UAAW,OAAOrL,EAASnqC,EAAeshC,SAAUzG,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAey1C,UAAW,OAAOtL,EAASnqC,EAAeuhC,SAAU1G,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAe01C,UAAW,OAAOvL,EAASnqC,EAAewhC,SAAU3G,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAe21C,UAAW,OAAOxL,EAASnqC,EAAe2mC,SAAU9L,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAe41C,UAAW,OAAOzL,EAASnqC,EAAekoC,SAAUrN,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAe61C,YAAa,OAAO1L,EAASnqC,EAAemoC,SAAUtN,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACnH,KAAKwD,EAAe81C,YAAa,OAAO3L,EAASnqC,EAAemoC,SAAUtN,EAAUjuF,EAAAsH,KAAK1P,IAAKo+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACnH,KAAKwD,EAAe+1C,eAAgB,OAAO5L,EAASnqC,EAAeypC,cAAe5O,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC1H,KAAKwD,EAAeg2C,eAAgB,OAAO7L,EAASnqC,EAAe0pC,cAAe7O,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC1H,KAAKwD,EAAei2C,SAAU,OAAO9L,EAASnqC,EAAe8hC,QAASjH,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAC/G,KAAKwD,EAAek2C,SAAU,OAAO/L,EAASnqC,EAAe+hC,QAASlH,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAC/G,KAAKwD,EAAem2C,WAAY,OAAOhM,EAASnqC,EAAegiC,QAASnH,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAeo2C,WAAY,OAAOjM,EAASnqC,EAAegiC,QAASnH,EAAUjuF,EAAAsH,KAAK1P,IAAKo+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAeq2C,WAAY,OAAOlM,EAASnqC,EAAeiiC,QAASpH,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAes2C,WAAY,OAAOnM,EAASnqC,EAAeiiC,QAASpH,EAAUjuF,EAAAsH,KAAK1P,IAAKo+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAeu2C,WAAY,OAAOpM,EAASnqC,EAAekiC,QAASrH,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAew2C,WAAY,OAAOrM,EAASnqC,EAAekiC,QAASrH,EAAUjuF,EAAAsH,KAAK1P,IAAKo+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAey2C,WAAY,OAAOtM,EAASnqC,EAAemiC,QAAStH,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAe02C,WAAY,OAAOvM,EAASnqC,EAAemiC,QAAStH,EAAUjuF,EAAAsH,KAAK1P,IAAKo+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAe22C,wBAAyB,OAAOxM,EAASnqC,EAAe+mC,WAAYlM,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjI,KAAKwD,EAAe42C,wBAAyB,OAAOzM,EAASnqC,EAAe+mC,WAAYlM,EAAUjuF,EAAAsH,KAAK1P,IAAKo+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAEjI,KAAKwD,EAAe62C,YAAa,OAAO1M,EAASnqC,EAAew/B,WAAY3E,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACrH,KAAKwD,EAAe82C,mBAAoB,OAAO3M,EAASnqC,EAAe+/B,kBAAmBlF,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAK9P,IAAKo4D,GAClI,KAAKwD,EAAe+2C,mBAAoB,OAAO5M,EAASnqC,EAAeygC,kBAAmB5F,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACnI,KAAKwD,EAAeg3C,UAAW,OAAO7M,EAASnqC,EAAeshC,SAAUzG,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAei3C,UAAW,OAAO9M,EAASnqC,EAAeuhC,SAAU1G,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAek3C,UAAW,OAAO/M,EAASnqC,EAAe2mC,SAAU9L,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAem3C,UAAW,OAAOhN,EAASnqC,EAAekoC,SAAUrN,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAeo3C,YAAa,OAAOjN,EAASnqC,EAAemoC,SAAUtN,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACnH,KAAKwD,EAAeq3C,YAAa,OAAOlN,EAASnqC,EAAemoC,SAAUtN,EAAUjuF,EAAAsH,KAAKzP,IAAKm+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACnH,KAAKwD,EAAes3C,eAAgB,OAAOnN,EAASnqC,EAAeypC,cAAe5O,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC1H,KAAKwD,EAAeu3C,eAAgB,OAAOpN,EAASnqC,EAAe0pC,cAAe7O,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAK/P,IAAKq4D,GAC1H,KAAKwD,EAAew3C,wBAAyB,OAAOrN,EAASnqC,EAAe+mC,WAAYlM,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjI,KAAKwD,EAAey3C,wBAAyB,OAAOtN,EAASnqC,EAAe+mC,WAAYlM,EAAUjuF,EAAAsH,KAAKzP,IAAKm+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAEjI,KAAKwD,EAAe03C,YAAa,OAAOvN,EAASnqC,EAAew/B,WAAY3E,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACrH,KAAKwD,EAAe23C,mBAAoB,OAAOxN,EAASnqC,EAAe+/B,kBAAmBlF,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKtP,IAAK43D,GAClI,KAAKwD,EAAe43C,mBAAoB,OAAOzN,EAASnqC,EAAeygC,kBAAmB5F,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACnI,KAAKwD,EAAe63C,UAAW,OAAO1N,EAASnqC,EAAeshC,SAAUzG,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAe83C,UAAW,OAAO3N,EAASnqC,EAAeuhC,SAAU1G,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAe+3C,UAAW,OAAO5N,EAASnqC,EAAewhC,SAAU3G,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAeg4C,UAAW,OAAO7N,EAASnqC,EAAeyhC,SAAU5G,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAei4C,UAAW,OAAO9N,EAASnqC,EAAe2mC,SAAU9L,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAek4C,UAAW,OAAO/N,EAASnqC,EAAe4hC,SAAU/G,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAem4C,UAAW,OAAOhO,EAASnqC,EAAe6hC,SAAUhH,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAeo4C,UAAW,OAAOjO,EAASnqC,EAAe4mC,SAAU/L,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAeq4C,WAAY,OAAOlO,EAASnqC,EAAe6mC,UAAWhM,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACnH,KAAKwD,EAAes4C,SAAU,OAAOnO,EAASnqC,EAAe8hC,QAASjH,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAC/G,KAAKwD,EAAeu4C,SAAU,OAAOpO,EAASnqC,EAAe+hC,QAASlH,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAC/G,KAAKwD,EAAew4C,SAAU,OAAOrO,EAASnqC,EAAegiC,QAASnH,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAC/G,KAAKwD,EAAey4C,SAAU,OAAOtO,EAASnqC,EAAeiiC,QAASpH,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAC/G,KAAKwD,EAAe04C,SAAU,OAAOvO,EAASnqC,EAAekiC,QAASrH,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAC/G,KAAKwD,EAAe24C,SAAU,OAAOxO,EAASnqC,EAAemiC,QAAStH,EAAUjuF,EAAAsH,KAAKtP,IAAKg+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAC/G,KAAKwD,EAAe44C,sBAAuB,OAAOzO,EAASnqC,EAAe8mC,aAAcjM,EAAUjuF,EAAAsH,KAAK/P,IAAKy+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjI,KAAKwD,EAAe64C,sBAAuB,OAAO1O,EAASnqC,EAAe8mC,aAAcjM,EAAUjuF,EAAAsH,KAAK1P,IAAKo+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAEjI,KAAKwD,EAAe84C,YAAa,OAAO3O,EAASnqC,EAAew/B,WAAY3E,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACrH,KAAKwD,EAAe+4C,mBAAoB,OAAO5O,EAASnqC,EAAe+/B,kBAAmBlF,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKrP,IAAK23D,GAClI,KAAKwD,EAAeg5C,mBAAoB,OAAO7O,EAASnqC,EAAeygC,kBAAmB5F,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACnI,KAAKwD,EAAei5C,UAAW,OAAO9O,EAASnqC,EAAeshC,SAAUzG,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAek5C,UAAW,OAAO/O,EAASnqC,EAAeuhC,SAAU1G,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAem5C,UAAW,OAAOhP,EAASnqC,EAAewhC,SAAU3G,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAeo5C,UAAW,OAAOjP,EAASnqC,EAAeyhC,SAAU5G,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAeq5C,UAAW,OAAOlP,EAASnqC,EAAe2mC,SAAU9L,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAes5C,UAAW,OAAOnP,EAASnqC,EAAe4hC,SAAU/G,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAeu5C,UAAW,OAAOpP,EAASnqC,EAAe6hC,SAAUhH,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAew5C,UAAW,OAAOrP,EAASnqC,EAAe4mC,SAAU/L,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjH,KAAKwD,EAAey5C,WAAY,OAAOtP,EAASnqC,EAAe6mC,UAAWhM,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACnH,KAAKwD,EAAe05C,SAAU,OAAOvP,EAASnqC,EAAe8hC,QAASjH,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAC/G,KAAKwD,EAAe25C,SAAU,OAAOxP,EAASnqC,EAAe+hC,QAASlH,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAC/G,KAAKwD,EAAe45C,SAAU,OAAOzP,EAASnqC,EAAegiC,QAASnH,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAC/G,KAAKwD,EAAe65C,SAAU,OAAO1P,EAASnqC,EAAeiiC,QAASpH,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAC/G,KAAKwD,EAAe85C,SAAU,OAAO3P,EAASnqC,EAAekiC,QAASrH,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAC/G,KAAKwD,EAAe+5C,SAAU,OAAO5P,EAASnqC,EAAemiC,QAAStH,EAAUjuF,EAAAsH,KAAKrP,IAAK+9B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAC/G,KAAKwD,EAAeg6C,sBAAuB,OAAO7P,EAASnqC,EAAe8mC,aAAcjM,EAAUjuF,EAAAsH,KAAK9P,IAAKw+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GACjI,KAAKwD,EAAei6C,sBAAuB,OAAO9P,EAASnqC,EAAe8mC,aAAcjM,EAAUjuF,EAAAsH,KAAKzP,IAAKm+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAEjI,KAAKwD,EAAek6C,cAAe,OAAO/P,EAASnqC,EAAeghC,aAAcnG,EAAUjuF,EAAAsH,KAAKjQ,GAAI2+B,EAAUh2B,EAAAsH,KAAKpP,KAAM03D,GAI5H,OAAO,EA7TM29C,CAAYtf,EAAU73F,EAAW4/B,EAAU45B,KAEhD1zC,GACF+xE,EAAStuF,MACPI,EAAA/C,eAAe0uD,sBACfkE,EAAWy/B,mBAAoBj5F,EAAUiP,cAGtCowB,IAGXw4D,EAAStuF,MACPI,EAAA/C,eAAeivD,mBACf2D,EAAW92B,WAAWx7B,MAAOlH,EAAUiP,cAElCvR,EAAOymC,qBAkThB,SAASgjE,EACPxoG,EACAk5F,EACAliC,EACA/1B,EACA42B,EACAgD,GAEAjzD,OAAOsxF,EAASp4E,QAAQ/R,eAAeoD,IAAInS,IAC3C,IAAIqB,EAAY63F,EAASp4E,QAAQ/R,eAAezO,IAAIN,GAEpD,OADA4H,OAAOvG,EAAU6S,MAAQqzC,EAAAl5C,YAAYsK,oBAC9Bu6D,EACLgmB,EACmB73F,EACnB,CAAE21D,GACF/1B,EACA42B,EACAgD,GACY,GAKhB,SAAgByN,EACd4wB,EACA5wF,EACAuyD,GAEA,IAAI/5C,EAAUo4E,EAASp4E,QACnB/hB,EAASm6F,EAASn6F,OAElBsQ,EAAiB6pF,EAASp4E,QAAQzR,eACtC,IAAKA,EAAgB,OAAOtQ,EAAOymC,oBAEnC,IAAIl2B,EAAgBwR,EAAQxR,cAC5B,IAAMA,IAAiB4pF,EAAS92B,gBAAgB9yD,GAAiB,OAAOvQ,EAAOymC,oBAE/E,IAAIizE,EAAwB,MAAXnwG,EACb4wF,EAASx3B,kBAAkBp5D,EAAS+G,EAAekL,KAAI,KACvDlL,EAAekL,KAAK4uC,aAAapqD,GAEjC25G,EAAcxf,EAASpiB,mBAAmBjc,EAAWtyD,MAAMY,OAAOC,gBAGtE,OADA8vF,EAAS97B,YAAcnyD,EAAAsH,KAAKG,KACrB3T,EAAOukC,YAAY,KAAM,CAC9BvkC,EAAOomC,WACL71B,EAAcgB,aAAc,CAC1BmoG,EACAC,EACA35G,EAAOygC,UAAUq7B,EAAWtyD,MAAMc,MAClCtK,EAAOygC,UAAUq7B,EAAWtyD,MAAMe,SAEpCk+C,EAAAj+B,WAAWka,MAEb1kC,EAAOymC,sBAoLX,SAAS4zD,EACPF,EACA/xE,EACA8Z,EACA45B,GAEA,GAAuB,GAAnB55B,EAASr6B,OACX,OAAKugB,GAAyC,GAAxBA,EAAcvgB,OAO7BugB,EAAc,IANnB+xE,EAAStuF,MACPI,EAAA/C,eAAe8uD,oCACf8D,EAAWy/B,mBAAoB,IAAKnzE,EAAgBA,EAAcvgB,OAAOsC,SAAS,IAAM,KAEnF,MAIX,GAAuB,GAAnB+3B,EAASr6B,OAAa,CACxB,GAAIugB,EACF,GAA4B,GAAxBA,EAAcvgB,OAChBsyF,EAASx3B,kBAAkBzgC,EAAS,GAAI9Z,EAAc,GAAE,SACnD,CACL,GAAIA,EAAcvgB,OAKhB,OAJAsyF,EAAStuF,MACPI,EAAA/C,eAAe8uD,oCACf8D,EAAWy/B,mBAAoB,IAAKnzE,EAAcvgB,OAAOsC,SAAS,KAE7D,KAETgwF,EAAS93B,4BAA4BngC,EAAS,GAAIh2B,EAAAsH,KAAK/P,IAAG,QAG5D02F,EAAS93B,4BAA4BngC,EAAS,GAAIh2B,EAAAsH,KAAK/P,IAAG,GAE5D,OAAO02F,EAAS97B,YAYlB,OAVIj2C,GAAiBA,EAAcvgB,OAAS,GAC1CsyF,EAAStuF,MACPI,EAAA/C,eAAe8uD,oCACf8D,EAAWy/B,mBAAoB,IAAKnzE,EAAcvgB,OAAOsC,SAAS,KAGtEgwF,EAAStuF,MACPI,EAAA/C,eAAe8W,+BACf87C,EAAW89C,eAAgB,IAAK13E,EAASr6B,OAAOsC,SAAS,KAEpD,KAIT,SAASoyF,EAAwBv3D,EAAwBm1D,GACvD,IAAIx4D,EACAhgC,EA6BJ,OA5BIw4F,EAAS7mF,QAAQc,UACnButB,EAAOw4D,EAAShtD,qBAAqBnI,EAAY94B,EAAAsH,KAAK21C,QAAO,MAE3DV,EAAA7W,gBAAgBjQ,IAAS8mB,EAAAh+B,aAAailB,OACtC+Y,EAAA5W,kBAAkBlQ,IAAS8mB,EAAAj+B,WAAW/jB,KACR,GAA9BgiD,EAAAzW,qBAAqBrQ,KACpBhgC,EAAQ8mD,EAAA1W,oBAAoBpQ,IAAS,KAEtCw4D,EAAStuF,MACPI,EAAA/C,eAAe01F,2CACf55D,EAAWx7B,OAEb7H,GAAS,KAGXggC,EAAOw4D,EAAShtD,qBAAqBnI,EAAY94B,EAAAsH,KAAK41C,QAAO,MAE3DX,EAAA7W,gBAAgBjQ,IAAS8mB,EAAAh+B,aAAailB,OACtC+Y,EAAA5W,kBAAkBlQ,IAAS8mB,EAAAj+B,WAAWhkB,MACrC7E,EAAQ8mD,EAAA3W,iBAAiBnQ,IAAS,KAEnCw4D,EAAStuF,MACPI,EAAA/C,eAAe01F,2CACf55D,EAAWx7B,OAEb7H,GAAS,IAGNA,EAIT,SAASu5F,EACP9yE,EACA0zC,EACAq+B,EACA0f,GAEA,QAFA,IAAAA,OAAA,GAEIzxF,EAAe,CACjB,IAAIa,EAAmBb,EAAcvgB,OACrC,GAAwB,GAApBohB,EAAuB,OAAO,EAClCpgB,OAAOogB,GACH4wF,IAAuB1f,EAAS97B,YAAcj2C,EAAc,IAChE+xE,EAAStuF,MACPI,EAAA/C,eAAe8uD,oCACf8D,EAAWy/B,mBAAoB,IAAKtyE,EAAiB9e,iBAGvDgwF,EAAStuF,MACPI,EAAA/C,eAAe8uD,oCACf8D,EAAWtyD,MAAO,IAAK,KAG3B,OAAO,EAIT,SAASkyF,EACPtzE,EACA0zC,EACAq+B,EACA0f,GAEA,QAFA,IAAAA,OAAA,GAEIzxF,EAAe,CACjB,IAAIa,EAAmBb,EAAcvgB,OACrC,OAAwB,GAApBohB,EAA8B,GAClCpgB,OAAOogB,GACH4wF,IAAuB1f,EAAS97B,YAAcj2C,EAAc,IAChE+xE,EAAStuF,MACPI,EAAA/C,eAAe8uD,oCACf8D,EAAWy/B,mBAAoB,IAAKtyE,EAAiB9e,YAEhD,GAET,OAAO,EAIT,SAAS0wF,EACPzyE,EACA0zC,EACAx5D,GAEA,OAAI8lB,GACF9lB,EAAUyf,QAAQlW,MAChBI,EAAA/C,eAAe0uD,sBACfkE,EAAWy/B,mBAAoBj5F,EAAUiP,cAEpC,GAEF,EAIT,SAASupF,EACP54D,EACAuB,EACAq4B,EACAq+B,GAEA,OAAIj4D,EAASr6B,QAAU47B,GACrB02D,EAAStuF,MACPI,EAAA/C,eAAe8W,+BACf87C,EAAWtyD,MAAOi6B,EAASt5B,WAAY+3B,EAASr6B,OAAOsC,YAElD,GAEF,EAIT,SAASmxF,EACPp5D,EACA43E,EACAC,EACAj+C,EACAq+B,GAEA,IAAI9jB,EAAcn0C,EAASr6B,OAC3B,OAAIwuE,EAAcyjC,GAChB3f,EAAStuF,MACPI,EAAA/C,eAAeqrE,wCACfzY,EAAWtyD,MAAOswG,EAAgB3vG,WAAYksE,EAAYlsE,YAErD,GACEksE,EAAc0jC,GACvB5f,EAAStuF,MACPI,EAAA/C,eAAe8W,+BACf87C,EAAWtyD,MAAOuwG,EAAgB5vG,WAAYksE,EAAYlsE,YAErD,GAEF,GAzrIT,SAAiBm1D,GAEFA,EAAA+vB,UAAY,0BACZ/vB,EAAAg7B,QAAU,wBACVh7B,EAAAi7B,SAAW,yBACXj7B,EAAAk7B,YAAc,4BACdl7B,EAAAm7B,SAAW,yBACXn7B,EAAAgwB,QAAU,wBACVhwB,EAAAo7B,YAAc,4BACdp7B,EAAAq7B,WAAa,2BACbr7B,EAAAnlB,WAAa,2BACbmlB,EAAAs7B,UAAY,0BACZt7B,EAAA07B,WAAa,2BACb17B,EAAAjW,UAAY,0BAEZiW,EAAAyZ,IAAM,oBACNzZ,EAAA+7B,IAAM,oBACN/7B,EAAAm8B,OAAS,uBACTn8B,EAAAq8B,KAAO,qBACPr8B,EAAAs8B,KAAO,qBACPt8B,EAAAkvB,IAAM,oBACNlvB,EAAAN,IAAM,oBACNM,EAAA8d,IAAM,oBACN9d,EAAAxW,KAAO,qBACPwW,EAAAmvB,MAAQ,sBACRnvB,EAAA48B,SAAW,yBACX58B,EAAA68B,QAAU,wBACV78B,EAAA88B,YAAc,4BACd98B,EAAAsvB,KAAO,qBACPtvB,EAAAovB,MAAQ,sBACRpvB,EAAA7wB,KAAO,qBACP6wB,EAAA/9B,MAAQ,sBACR+9B,EAAAu9B,YAAc,4BACdv9B,EAAAw9B,aAAe,6BACfx9B,EAAAy9B,WAAa,2BACbz9B,EAAA09B,WAAa,2BACb19B,EAAA29B,WAAa,2BACb39B,EAAA49B,UAAY,0BACZ59B,EAAA69B,WAAa,2BACb79B,EAAA89B,YAAc,4BACd99B,EAAAq+B,eAAiB,+BACjBr+B,EAAAs+B,YAAc,4BACdt+B,EAAAu+B,cAAgB,8BAEhBv+B,EAAA27B,OAAS,uBACT37B,EAAA67B,QAAU,wBACV77B,EAAA91C,SAAW,yBACX81C,EAAAw+B,OAAS,uBACTx+B,EAAAy+B,YAAc,4BACdz+B,EAAAz/B,WAAa,2BACby/B,EAAAz2D,OAAS,uBACTy2D,EAAAj2C,UAAY,0BACZi2C,EAAA++B,cAAgB,8BAChB/+B,EAAAo/B,YAAc,4BAEdp/B,EAAA/7D,GAAK,mBACL+7D,EAAA97D,IAAM,oBACN87D,EAAA77D,IAAM,oBACN67D,EAAA57D,IAAM,oBACN47D,EAAA37D,MAAQ,sBACR27D,EAAA17D,GAAK,mBACL07D,EAAAz7D,IAAM,oBACNy7D,EAAAx7D,IAAM,oBACNw7D,EAAAv7D,IAAM,oBACNu7D,EAAAt7D,MAAQ,sBACRs7D,EAAAr7D,KAAO,qBACPq7D,EAAAp7D,IAAM,oBACNo7D,EAAAn7D,IAAM,oBACNm7D,EAAAl7D,KAAO,qBACPk7D,EAAAv6D,MAAQ,qBAERu6D,EAAAkqC,QAAU,wBACVlqC,EAAAoqC,QAAU,wBACVpqC,EAAAqqC,QAAU,wBACVrqC,EAAAsqC,QAAU,wBACVtqC,EAAAuqC,WAAa,2BACbvqC,EAAAwqC,WAAa,2BACbxqC,EAAAyqC,SAAW,yBACXzqC,EAAA0qC,SAAW,yBACX1qC,EAAA2qC,SAAW,yBACX3qC,EAAA4qC,SAAW,yBAEX5qC,EAAA6qC,QAAU,wBACV7qC,EAAA8qC,QAAU,wBACV9qC,EAAA+qC,QAAU,wBACV/qC,EAAAgrC,QAAU,wBACVhrC,EAAAirC,QAAU,wBACVjrC,EAAAkrC,QAAU,wBACVlrC,EAAAmrC,SAAW,yBACXnrC,EAAAorC,SAAW,yBACXprC,EAAAqrC,UAAY,0BACZrrC,EAAAsrC,UAAY,0BACZtrC,EAAAurC,aAAe,6BACfvrC,EAAAwrC,aAAe,6BACfxrC,EAAAyrC,YAAc,4BACdzrC,EAAA0rC,YAAc,4BACd1rC,EAAA2rC,oBAAsB,oCACtB3rC,EAAA4rC,oBAAsB,oCACtB5rC,EAAA6rC,oBAAsB,oCACtB7rC,EAAA8rC,oBAAsB,oCACtB9rC,EAAA+rC,SAAW,yBACX/rC,EAAAgsC,SAAW,yBACXhsC,EAAAisC,UAAY,0BACZjsC,EAAAksC,UAAY,0BAEZlsC,EAAAmsC,YAAc,4BACdnsC,EAAAosC,YAAc,4BACdpsC,EAAAqsC,aAAe,6BACfrsC,EAAAssC,aAAe,6BACftsC,EAAAusC,SAAW,yBACXvsC,EAAAwsC,YAAc,4BACdxsC,EAAAysC,YAAc,4BACdzsC,EAAA0sC,aAAe,6BACf1sC,EAAA2sC,aAAe,6BACf3sC,EAAA4sC,aAAe,6BACf5sC,EAAA6sC,aAAe,6BACf7sC,EAAA8sC,SAAW,yBACX9sC,EAAA+sC,SAAW,yBACX/sC,EAAAgtC,SAAW,yBACXhtC,EAAAitC,WAAa,2BACbjtC,EAAAktC,YAAc,4BACdltC,EAAAmtC,UAAY,0BACZntC,EAAAotC,WAAa,2BACbptC,EAAAqtC,YAAc,4BACdrtC,EAAAstC,YAAc,4BACdttC,EAAAutC,UAAY,0BACZvtC,EAAAwtC,UAAY,0BACZxtC,EAAAytC,UAAY,0BAEZztC,EAAA0tC,mBAAqB,mCACrB1tC,EAAA2tC,oBAAsB,oCACtB3tC,EAAA4tC,gBAAkB,gCAClB5tC,EAAA6tC,mBAAqB,mCACrB7tC,EAAA8tC,oBAAsB,oCACtB9tC,EAAA+tC,oBAAsB,oCACtB/tC,EAAAguC,gBAAkB,gCAClBhuC,EAAAiuC,kBAAoB,kCACpBjuC,EAAAkuC,mBAAqB,mCACrBluC,EAAAmuC,iBAAmB,iCACnBnuC,EAAAouC,kBAAoB,kCACpBpuC,EAAAquC,mBAAqB,mCACrBruC,EAAAsuC,mBAAqB,mCACrBtuC,EAAAuuC,iBAAmB,iCACnBvuC,EAAAwuC,sBAAwB,sCACxBxuC,EAAAyuC,uBAAyB,uCACzBzuC,EAAA0uC,mBAAqB,mCACrB1uC,EAAA2uC,sBAAwB,sCACxB3uC,EAAA4uC,uBAAyB,uCACzB5uC,EAAA6uC,uBAAyB,uCACzB7uC,EAAA8uC,mBAAqB,mCACrB9uC,EAAA+uC,sBAAwB,sCACxB/uC,EAAAgvC,uBAAyB,uCACzBhvC,EAAAivC,mBAAqB,mCACrBjvC,EAAAkvC,sBAAwB,sCACxBlvC,EAAAmvC,uBAAyB,uCACzBnvC,EAAAovC,uBAAyB,uCACzBpvC,EAAAqvC,mBAAqB,mCACrBrvC,EAAAsvC,sBAAwB,sCACxBtvC,EAAAuvC,uBAAyB,uCACzBvvC,EAAAwvC,mBAAqB,mCACrBxvC,EAAAyvC,sBAAwB,sCACxBzvC,EAAA0vC,uBAAyB,uCACzB1vC,EAAA2vC,uBAAyB,uCACzB3vC,EAAA4vC,mBAAqB,mCACrB5vC,EAAA6vC,qBAAuB,qCACvB7vC,EAAA8vC,sBAAwB,sCACxB9vC,EAAA+vC,kBAAoB,kCACpB/vC,EAAAgwC,qBAAuB,qCACvBhwC,EAAAiwC,sBAAwB,sCACxBjwC,EAAAkwC,sBAAwB,sCACxBlwC,EAAAmwC,kBAAoB,kCACpBnwC,EAAAowC,sBAAwB,sCACxBpwC,EAAAqwC,uBAAyB,uCACzBrwC,EAAAswC,mBAAqB,mCACrBtwC,EAAAuwC,sBAAwB,sCACxBvwC,EAAAwwC,uBAAyB,uCACzBxwC,EAAAywC,uBAAyB,uCACzBzwC,EAAA0wC,mBAAqB,mCACrB1wC,EAAA2wC,uBAAyB,uCACzB3wC,EAAA4wC,wBAA0B,wCAC1B5wC,EAAA6wC,oBAAsB,oCACtB7wC,EAAA8wC,uBAAyB,uCACzB9wC,EAAA+wC,wBAA0B,wCAC1B/wC,EAAAgxC,wBAA0B,wCAC1BhxC,EAAAixC,oBAAsB,oCACtBjxC,EAAAkxC,0BAA4B,0CAC5BlxC,EAAAmxC,2BAA6B,2CAC7BnxC,EAAAoxC,uBAAyB,uCACzBpxC,EAAAqxC,0BAA4B,0CAC5BrxC,EAAAsxC,2BAA6B,2CAC7BtxC,EAAAuxC,2BAA6B,2CAC7BvxC,EAAAwxC,uBAAyB,uCACzBxxC,EAAAyxC,SAAW,yBACXzxC,EAAA0xC,SAAW,yBACX1xC,EAAA2xC,WAAa,2BACb3xC,EAAA4xC,WAAa,2BAEb5xC,EAAAw/B,WAAa,2BACbx/B,EAAA+/B,kBAAoB,kCACpB//B,EAAAygC,kBAAoB,kCACpBzgC,EAAAghC,aAAe,6BACfhhC,EAAA6xC,UAAY,0BACZ7xC,EAAA8xC,WAAa,2BACb9xC,EAAAshC,SAAW,yBACXthC,EAAAuhC,SAAW,yBACXvhC,EAAAwhC,SAAW,yBACXxhC,EAAAyhC,SAAW,yBACXzhC,EAAA2mC,SAAW,yBACX3mC,EAAA0hC,kBAAoB,kCACpB1hC,EAAA2hC,kBAAoB,kCACpB3hC,EAAAkoC,SAAW,yBACXloC,EAAAmoC,SAAW,yBACXnoC,EAAAgpC,SAAW,yBACXhpC,EAAAipC,QAAU,wBACVjpC,EAAAkpC,SAAW,yBACXlpC,EAAAspC,SAAW,yBACXtpC,EAAAwpC,eAAiB,+BACjBxpC,EAAAypC,cAAgB,8BAChBzpC,EAAA0pC,cAAgB,8BAChB1pC,EAAA4hC,SAAW,yBACX5hC,EAAA6hC,SAAW,yBACX7hC,EAAA4mC,SAAW,yBACX5mC,EAAA6mC,UAAY,0BACZ7mC,EAAA8hC,QAAU,wBACV9hC,EAAA+hC,QAAU,wBACV/hC,EAAAgiC,QAAU,wBACVhiC,EAAAiiC,QAAU,wBACVjiC,EAAAkiC,QAAU,wBACVliC,EAAAmiC,QAAU,wBACVniC,EAAA8mC,aAAe,6BACf9mC,EAAA+mC,WAAa,2BAEb/mC,EAAAj7D,MAAQ,sBACRi7D,EAAA/6D,MAAQ,sBACR+6D,EAAA76D,MAAQ,sBACR66D,EAAA36D,MAAQ,sBACR26D,EAAAz6D,MAAQ,sBACRy6D,EAAAx6D,MAAQ,sBAERw6D,EAAA+xC,YAAc,4BACd/xC,EAAAgyC,qBAAuB,qCACvBhyC,EAAAiyC,qBAAuB,qCACvBjyC,EAAAkyC,mBAAqB,mCACrBlyC,EAAAmyC,UAAY,0BACZnyC,EAAAoyC,UAAY,0BACZpyC,EAAAqyC,UAAY,0BACZryC,EAAAsyC,UAAY,0BACZtyC,EAAAuyC,qBAAuB,qCACvBvyC,EAAAwyC,qBAAuB,qCACvBxyC,EAAAyyC,qBAAuB,qCACvBzyC,EAAA0yC,qBAAuB,qCACvB1yC,EAAA2yC,UAAY,0BACZ3yC,EAAA4yC,YAAc,4BACd5yC,EAAA6yC,YAAc,4BACd7yC,EAAA8yC,eAAiB,+BACjB9yC,EAAA+yC,eAAiB,+BACjB/yC,EAAAgzC,SAAW,yBACXhzC,EAAAizC,SAAW,yBACXjzC,EAAAkzC,WAAa,2BACblzC,EAAAmzC,WAAa,2BACbnzC,EAAAozC,WAAa,2BACbpzC,EAAAqzC,WAAa,2BACbrzC,EAAAszC,WAAa,2BACbtzC,EAAAuzC,WAAa,2BACbvzC,EAAAwzC,WAAa,2BACbxzC,EAAAyzC,WAAa,2BAEbzzC,EAAA0zC,YAAc,4BACd1zC,EAAA2zC,qBAAuB,qCACvB3zC,EAAA4zC,qBAAuB,qCACvB5zC,EAAA6zC,mBAAqB,mCACrB7zC,EAAA8zC,UAAY,0BACZ9zC,EAAA+zC,UAAY,0BACZ/zC,EAAAg0C,UAAY,0BACZh0C,EAAAi0C,UAAY,0BACZj0C,EAAAk0C,qBAAuB,qCACvBl0C,EAAAm0C,qBAAuB,qCACvBn0C,EAAAo0C,qBAAuB,qCACvBp0C,EAAAq0C,qBAAuB,qCACvBr0C,EAAAs0C,UAAY,0BACZt0C,EAAAu0C,YAAc,4BACdv0C,EAAAw0C,YAAc,4BACdx0C,EAAAy0C,eAAiB,+BACjBz0C,EAAA00C,eAAiB,+BACjB10C,EAAA20C,SAAW,yBACX30C,EAAA40C,SAAW,yBACX50C,EAAA60C,WAAa,2BACb70C,EAAA80C,WAAa,2BACb90C,EAAA+0C,WAAa,2BACb/0C,EAAAg1C,WAAa,2BACbh1C,EAAAi1C,WAAa,2BACbj1C,EAAAk1C,WAAa,2BACbl1C,EAAAm1C,WAAa,2BACbn1C,EAAAo1C,WAAa,2BAEbp1C,EAAAq1C,YAAc,4BACdr1C,EAAAs1C,mBAAqB,mCACrBt1C,EAAAu1C,mBAAqB,mCACrBv1C,EAAAw1C,UAAY,0BACZx1C,EAAAy1C,UAAY,0BACZz1C,EAAA01C,UAAY,0BACZ11C,EAAA21C,UAAY,0BACZ31C,EAAA41C,UAAY,0BACZ51C,EAAA61C,YAAc,4BACd71C,EAAA81C,YAAc,4BACd91C,EAAA+1C,eAAiB,+BACjB/1C,EAAAg2C,eAAiB,+BACjBh2C,EAAAi2C,SAAW,yBACXj2C,EAAAk2C,SAAW,yBACXl2C,EAAAm2C,WAAa,2BACbn2C,EAAAo2C,WAAa,2BACbp2C,EAAAq2C,WAAa,2BACbr2C,EAAAs2C,WAAa,2BACbt2C,EAAAu2C,WAAa,2BACbv2C,EAAAw2C,WAAa,2BACbx2C,EAAAy2C,WAAa,2BACbz2C,EAAA02C,WAAa,2BACb12C,EAAA22C,wBAA0B,wCAC1B32C,EAAA42C,wBAA0B,wCAE1B52C,EAAA62C,YAAc,4BACd72C,EAAA82C,mBAAqB,mCACrB92C,EAAA+2C,mBAAqB,mCACrB/2C,EAAAg3C,UAAY,0BACZh3C,EAAAi3C,UAAY,0BACZj3C,EAAAk3C,UAAY,0BACZl3C,EAAAm3C,UAAY,0BACZn3C,EAAAo3C,YAAc,4BACdp3C,EAAAq3C,YAAc,4BACdr3C,EAAAs3C,eAAiB,+BACjBt3C,EAAAu3C,eAAiB,+BACjBv3C,EAAAw3C,wBAA0B,wCAC1Bx3C,EAAAy3C,wBAA0B,wCAE1Bz3C,EAAA03C,YAAc,4BACd13C,EAAA23C,mBAAqB,mCACrB33C,EAAA43C,mBAAqB,mCACrB53C,EAAA63C,UAAY,0BACZ73C,EAAA83C,UAAY,0BACZ93C,EAAA+3C,UAAY,0BACZ/3C,EAAAg4C,UAAY,0BACZh4C,EAAAi4C,UAAY,0BACZj4C,EAAAk4C,UAAY,0BACZl4C,EAAAm4C,UAAY,0BACZn4C,EAAAo4C,UAAY,0BACZp4C,EAAAq4C,WAAa,2BACbr4C,EAAAs4C,SAAW,yBACXt4C,EAAAu4C,SAAW,yBACXv4C,EAAAw4C,SAAW,yBACXx4C,EAAAy4C,SAAW,yBACXz4C,EAAA04C,SAAW,yBACX14C,EAAA24C,SAAW,yBACX34C,EAAA44C,sBAAwB,sCACxB54C,EAAA64C,sBAAwB,sCAExB74C,EAAA84C,YAAc,4BACd94C,EAAA+4C,mBAAqB,mCACrB/4C,EAAAg5C,mBAAqB,mCACrBh5C,EAAAi5C,UAAY,0BACZj5C,EAAAk5C,UAAY,0BACZl5C,EAAAm5C,UAAY,0BACZn5C,EAAAo5C,UAAY,0BACZp5C,EAAAq5C,UAAY,0BACZr5C,EAAAs5C,UAAY,0BACZt5C,EAAAu5C,UAAY,0BACZv5C,EAAAw5C,UAAY,0BACZx5C,EAAAy5C,WAAa,2BACbz5C,EAAA05C,SAAW,yBACX15C,EAAA25C,SAAW,yBACX35C,EAAA45C,SAAW,yBACX55C,EAAA65C,SAAW,yBACX75C,EAAA85C,SAAW,yBACX95C,EAAA+5C,SAAW,yBACX/5C,EAAAg6C,sBAAwB,sCACxBh6C,EAAAi6C,sBAAwB,sCAExBj6C,EAAAk6C,cAAgB,8BAGhBl6C,EAAA12D,MAAQ,yBACR02D,EAAA32D,QAAU,2BACV22D,EAAA52D,KAAO,wBAEP42D,EAAAC,UAAY,wBACZD,EAAA0+B,YAAc,0BACd1+B,EAAA2+B,YAAc,0BACd3+B,EAAA4+B,YAAc,0BACd5+B,EAAA6+B,YAAc,0BAEd7+B,EAAAiqC,aAAe,uBArY9B,CAAiBjqC,EAAAv/D,EAAAu/D,iBAAAv/D,EAAAu/D,eAAc,KAyY/Bv/D,EAAAo0E,cAq6GAp0E,EAAAwpE,eAoCAxpE,EAAAkgE,oBAAA,SAAoCk6B,WAC9Bn6F,EAASm6F,EAASn6F,OAClB02E,EAAQ,IAAIrvE,MACZk/B,EAAWr6B,EAAAuW,UAAUipC,oBAAoB,CAAEx/C,EAAAsH,KAAK/P,KAAOyI,EAAAsH,KAAKG,MAC5Dk1B,EAAUsxD,EAASv6B,mBAAmB,CAAE1zD,EAAAsH,KAAK/P,KAAOyI,EAAAsH,KAAKG,UAE7D,IAAoB,IAAAoP,EAAAxM,EAAA4jF,EAASp4E,QAAQ/R,eAAemK,UAAQQ,EAAAoI,EAAAtM,QAAAkE,EAAAjE,KAAAiE,EAAAoI,EAAAtM,OAAE,CAAzD,IAAIW,EAAOuD,EAAAhZ,MACd,GAAIyV,EAAQjC,MAAQqzC,EAAAl5C,YAAYiO,OAAhC,CACA,IAAIggE,EAAiBnmE,EACjB2xC,EAAiBw0B,EAAO/hE,KAAKutC,eACjC,GACEw0B,EAAO1hE,GAAG7P,EAAAtJ,YAAYk+D,WACH,OAAnB7X,IACCA,EAAelwC,aAAa2vC,EAAAj5C,eAAe0J,WAE5C,GAAIskE,EAAO1hE,GAAG7P,EAAAtJ,YAAYihB,SAAU,CAClC,IAAIhiB,EAAQ47E,EAAO75D,qBACnBgzD,EAAMxrE,KACJlL,EAAOsmC,mBACLtmC,EAAOqiC,eAAe,EAAGomB,EAAAj+B,WAAWhkB,KACpC,CACE2zF,EAAS7mF,QAAQc,SACbpU,EAAO6gC,UAAUsK,QAAQxpC,GAAQypC,SAASzpC,IAC1C3B,EAAOygC,UAAU0K,QAAQxpC,KAE/B4kC,SAIJmwC,EAAMxrE,KACJlL,EAAOsmC,mBACLtmC,EAAOqiC,eAAe,EAAGomB,EAAAj+B,WAAWhkB,KACpC,CACExG,EAAOyiC,gBACL86C,EAAOhsE,aACP4oF,EAAS7mF,QAAQwtD,iBAGrBv6B,uGAMVvmC,EAAOsoC,YAAY,gBAAiBO,EAAS,GAC3C6tC,EAAM7uE,OACF7H,EAAOukC,YAAY,KAAMmyC,GACzB12E,EAAOwlC,cAKfzlC,EAAAu4E,aAAA,SAAgBA,EACd6hB,EACA31E,WAEIzC,EAAUo4E,EAASp4E,QACvBlZ,OAAO2b,EAAchJ,KAAK6tC,UAAUtnC,IAIlC,IAAIi4F,EAAgBx1F,EAAciE,YAClC,IAA2B,GAAvBuxF,EAA0B,OAAOA,EAIvC,IAAI3+F,EAAUmJ,EAAcnJ,QAC5B,GAAImJ,EAAcy1F,qBACA,OAAZ5+F,GAAoBA,EAAQjI,IAAI,QAAS,CAC3C,IAAI8mG,EAAcrxG,OAAOwS,EAAQ9Z,IAAI,SACrCsH,OAAOqxG,EAAY/kG,MAAQqzC,EAAAl5C,YAAYsK,oBACvC,IAAIugG,EAAatxG,OAAOkZ,EAAQvQ,SAASqI,gBAAmCqgG,EAAa,OACzFrxG,OAAOsxG,EAAWt+F,GAAG7P,EAAAtJ,YAAY0qD,QAAUphD,EAAAtJ,YAAY4e,WACvDzY,QAAQsxG,EAAWj8F,MAAMlS,EAAAtJ,YAAY0e,QAAUpV,EAAAtJ,YAAYimF,UAC3D9/E,OAAqD,GAA9CsxG,EAAWtnG,UAAUiH,eAAejS,QAC3CgB,OAAOsxG,EAAWtnG,UAAUmH,YAAc9N,EAAAsH,KAAKG,MAC/CwmG,EAAW5oG,aAAeiT,EAAcjT,aAAe,MACvD1I,OAAOsxF,EAAS92B,gBAAgB82C,IAChC,IAAIl2F,EAAQk2E,EAASr1B,yBAAyBq1C,GAE9C,OADA31F,EAAciE,YAAcxE,EACrBA,EAIX,IAAIjkB,EAASm6F,EAASn6F,OAClBsT,EAAU6mF,EAAS7mF,QACnBwtD,EAAiBxtD,EAAQwtD,eACzBs5C,EAAiB9mG,EAAQI,UAAUuG,SACnCoK,EAAO,IAAIhd,MAGfgd,EAAKnZ,KACHlL,EAAOolC,SACLplC,EAAOyhC,YACLnuB,EAAQc,SACJq0C,EAAAl7B,QAAQ02C,OACRxb,EAAAl7B,QAAQw2C,OACZ/jE,EAAOqiC,eAAe,EAAGy+B,IAE3B9gE,EAAO0lC,iBAKX,IAAI84B,EAAgB27B,EAAS37B,cACzB/1C,EAAc+1C,EAAc32D,OAChC22D,EAActzD,KAAK,iBACnBsZ,EAAciE,YAAcA,EAG5B,IAAIosD,EAAerwD,EAAc6D,KAyBjC,GAxBIwsD,GACFhsE,OAAOgsE,EAAar5D,KAAK6tC,UAAUtnC,IACnCsC,EAAKnZ,KACHlL,EAAOsmC,mBACLtmC,EAAOygC,UACL63C,EAAa6hB,EAAiBtlB,EAAar5D,KAAKutC,iBAElD,CACE/oD,EAAOqiC,eAAe,EAAGy+B,IAE3B,YAAcA,GAAkBrY,EAAAj+B,WAAW/jB,IAAM,KAAO,SAM5D4d,EAAKnZ,KACHlL,EAAOomC,WAAWv9B,OAAOkZ,EAAQnR,gBAAgBW,aAAc,CAC7DvR,EAAOqiC,eAAe,EAAGy+B,IACxBrY,EAAAj+B,WAAWka,OAKdrpB,MACF,IAAmB,IAAA0H,EAAAxM,EAAA8E,EAAQlB,UAAQQ,EAAAoI,EAAAtM,QAAAkE,EAAAjE,KAAAiE,EAAAoI,EAAAtM,OAAE,CAAhC,IAAIoE,EAAMF,EAAAhZ,MACb,GAAIkZ,EAAO1F,MAAQqzC,EAAAl5C,YAAY6L,OACjBN,EAAQ/H,SAAW0R,GACV3J,EAAQW,KAClB6tC,UAAUtnC,GAAU,CAC3B,IAAIgd,EAAiBlkB,EAAQ6M,aAC7B7e,OAAOk2B,GAAU,GACjB1a,EAAKnZ,KACHlL,EAAOomC,WAAWv9B,OAAOkZ,EAAQnR,gBAAgBW,aAAc,CAC7DvR,EAAO2iC,WACLy3E,GACA,EACAp6G,EAAOqiC,eAAe,EAAGy+B,GACzBA,EACA/hC,IAED0pB,EAAAj+B,WAAWka,0GAS1B,IAAI21E,EAAW71F,EAAcjT,aAAe,MAQ5C,OAPAvR,EAAOsoC,YACL+xE,EACAlgB,EAASv6B,mBAAmB,KAAM1zD,EAAAsH,KAAKG,KAAML,EAAQI,WACrD,KACA1T,EAAOukC,YAAY,KAAMlgB,IAE3Bm6C,EAAc/1C,GAAe4xF,EACtB5xF,kFC9kIT1oB,EAAA08E,SAAA,SAAyB69B,EAAUr2F,GAEjC,OADApb,OAAOob,GAAS,GAAKA,EAAQ,IACtBwuE,OACL1V,QACEu9B,EACAllD,QACEw7B,QACAz8E,QAAQ8P,KAGZy2C,WAKJ36D,EAAA48E,UAAA,SAA0B29B,EAAUr2F,EAAYs2F,GAE9C,OADA1xG,OAAOob,GAAS,GAAKA,EAAQ,IACtBs2F,EACH1oB,OACEyoB,EACAllD,QACEw7B,QACAz8E,QAAQ8P,KAGZ84D,QACEu9B,EACAjoB,QACEj9B,QACEw7B,QACAz8E,QAAQ8P,sFC9BpB,SAAkBu2F,GAEhBA,IAAA,eACAA,IAAA,wBACAA,IAAA,oCACAA,IAAA,oCACAA,IAAA,8CACAA,IAAA,yBAEAA,IAAA,kBACAA,IAAA,yCACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,wBACAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,oCACAA,IAAA,gCACAA,IAAA,0CACAA,IAAA,4BACAA,IAAA,4BACAA,IAAA,sCACAA,IAAA,8CACAA,IAAA,2CACAA,IAAA,4CACAA,IAAA,oBAEAA,IAAA,UAEAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UAEAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,eACAA,IAAA,kBACAA,IAAA,6BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,oBACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,2BACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,sBACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,mBAEAA,IAAA,yBACAA,IAAA,wBACAA,IAAA,qCACAA,IAAA,aACAA,IAAA,8BAnIF,CAAkBz6G,EAAAy6G,WAAAz6G,EAAAy6G,SAAQ,KAuI1Bz6G,EAAA+K,YAAA,SAA4B/J,GAC1B,OAAQA,GACN,QACA,QACA,UACA,UACE,OAAO,EAET,QACE,OAAO,IAMbhB,EAAA8yD,aAAA,SAA6B9xD,GAC3B,OAAQA,GACN,QACA,OACA,QACA,QACA,SACA,SACA,UACA,UACA,UACA,WACA,WACE,OAAO,EAET,QACE,OAAOA,GAAC,MAAuBA,GAAC,OAMtChB,EAAAoxD,eAAA,SAA+BpwD,GAC7B,OAAOA,GAAC,IAAmBA,GAAC,IAI9BhB,EAAA+0D,aAAA,SAA6B/zD,GAC3B,OAAOA,GAAC,IAAmBA,GAAC,IAI9BhB,EAAAuyD,kBAAA,SAAkCvxD,GAChC,OAAOA,GAAC,IAAkBA,GAAC,KACpBA,GAAC,IAAkBA,GAAC,IACnB,IAADA,GACC,IAADA,GACAA,EAAI,QAmLqBuI,EAnLYvI,GAoL9B,GAAKuI,EAAO,QACnBmxG,EAAmBnxG,EAAaoxG,GAFzC,IAAkCpxG,GA/KlCvJ,EAAAwyD,mBAAA,SAAmCxxD,GACjC,OAAOA,GAAC,IAAkBA,GAAC,KAI7BhB,EAAA0yD,iBAAA,SAAiC1xD,GAC/B,OAAOA,GAAC,IAAkBA,GAAC,KACpBA,GAAC,IAAkBA,GAAC,IACpBA,GAAC,IAAmBA,GAAC,IACpB,IAADA,GACC,IAADA,GACAA,EAAI,QAyKoBuI,EAzKYvI,GA0K7B,GAAKuI,EAAO,QACnBmxG,EAAmBnxG,EAAaqxG,GAFzC,IAAiCrxG,GArKjC,IAAMoxG,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAG1D,SAASF,EAAmBnxG,EAAWgxG,GACrC,GAAIhxG,EAAOgxG,EAAI,GAAI,OAAO,EAO1B,IALA,IAEIM,EACAC,EAHA/pB,EAAK,EACLC,EAAKupB,EAAIzyG,OAINipF,EAAK,EAAIC,GAAI,CAIlB,GAHA6pB,EAAM9pB,GAAOC,EAAKD,GAAO,IAEzB+pB,EAASP,EADTM,GAAc,EAANA,KAEMtxG,GAAQA,GAAQgxG,EAAIM,EAAM,GACtC,OAAO,EAELtxG,EAAOuxG,EACT9pB,EAAK6pB,EAEL9pB,EAAK8pB,EAAM,EAGf,OAAO,ikBC9WT76G,EAAA+6G,UAAA,SAA6B7lC,GAC3B,QAD2B,IAAAA,MAAA,MACvBA,EAAU,CAEZ,IADA,IAAI8lC,EAAS,IAAI1zG,MAAS4tE,EAASptE,QAC1BnH,EAAI,EAAGoU,EAAImgE,EAASptE,OAAQnH,EAAIoU,IAAKpU,EAAG2oB,UAAU0xF,EAAOr6G,GAAKu0E,EAASv0E,IAChF,OAAOq6G,EAET,OAAO,IAAI1zG,OAGbtH,EAAAi7G,QAAA,SAA2B/lC,WACzB,QADyB,IAAAA,MAAA,MACrBA,EAAU,CACZ,IAAI8lC,EAAS,IAAIv5B,QACjB,IAAc,IAAAy5B,EAAA1kG,EAAA0+D,GAAQimC,EAAAD,EAAAxkG,QAAAykG,EAAAxkG,KAAAwkG,EAAAD,EAAAxkG,OAAA,CAAjB,IAAI0kG,EAACD,EAAAv5G,MAAco5G,EAAOnnG,IAAIunG,qGACnC,OAAOJ,EAET,OAAO,IAAIv5B,KAGbzhF,EAAAg4D,QAAA,SAA6Bkd,EAAkCmmC,wBAAlC,IAAAnmC,MAAA,WAAkC,IAAAmmC,MAAA,MAC7D,IAAIL,EAAS,IAAIhrG,IACjB,GAAIklE,EAAU,KACZ,IAAmB,IAAAomC,EAAA9kG,EAAA0+D,GAAQqmC,EAAAD,EAAA5kG,QAAA6kG,EAAA5kG,KAAA4kG,EAAAD,EAAA5kG,OAAA,CAAlB,IAAAmE,EAAAhE,EAAA0kG,EAAA35G,MAAA,GAACmT,EAAA8F,EAAA,GAAGugG,EAAAvgG,EAAA,GAAgBmgG,EAAOzpG,IAAIwD,EAAGqmG,qGAC3C,GAAIC,MAAW,IAAmB,IAAAG,EAAAhlG,EAAA6kG,GAASI,EAAAD,EAAA9kG,QAAA+kG,EAAA9kG,KAAA8kG,EAAAD,EAAA9kG,OAAA,CAAnB,IAAA6E,EAAA1E,EAAA4kG,EAAA75G,MAAA,GAACmT,EAAAwG,EAAA,GAAG6/F,EAAA7/F,EAAA,GAAiBy/F,EAAOzpG,IAAIwD,EAAGqmG,2GACtD,GAAIC,MACT,IAAmB,IAAAK,EAAAllG,EAAA6kG,GAASM,EAAAD,EAAAhlG,QAAAilG,EAAAhlG,KAAAglG,EAAAD,EAAAhlG,OAAA,CAAnB,IAAA8E,EAAA3E,EAAA8kG,EAAA/5G,MAAA,GAACmT,EAAAyG,EAAA,GAAG4/F,EAAA5/F,EAAA,GAAiBw/F,EAAOzpG,IAAIwD,EAAGqmG,qGAE9C,OAAOJ,kFCpBT,IAAA/uG,EAAAxL,EAAA,GAIMm7G,EAAS,GAMf,SAAgB36D,EAAcngC,GAK5B,IAJA,IAiBI+7C,EAjBAhW,EAAM,EACNj8C,EAAMkW,EAAKhZ,OAGR++C,EAAM,EAAIj8C,GACK,IAApBkW,EAAK9V,WAAW67C,IAChB/lC,EAAK9V,WAAW67C,EAAM,IAAM+0D,GAE5B/0D,GAAO,EAUT,KAPIA,EAAM,GAAKj8C,EAAMkW,EAAKhZ,UACxBgZ,EAAOA,EAAK5V,UAAU27C,EAAKj8C,GAC3BA,GAAOi8C,EACPA,EAAM,GAIDA,EAAM,EAAIj8C,GAAK,CAIpB,GAHAiyD,GAAQ,EAIN/7C,EAAK9V,WAAW67C,IAAQ+0D,GACA,IAAxB96F,EAAK9V,WAAW67C,EAAM,GACtB,CAGA,IADAgW,EAAQhW,EAAM,GAAKj8C,IAEjBi8C,EAAM,EAAIj8C,GACVkW,EAAK9V,WAAW67C,EAAM,IAAM+0D,EAC5B,CACA96F,EAAO+7C,EACH/7C,EAAK5V,UAAU,EAAG27C,GAClB/lC,EAAK5V,UAAU,EAAG27C,GAAO/lC,EAAK5V,UAAU27C,EAAM,GAClDj8C,GAAO,EACP,SAKF,IADAiyD,EAAQhW,EAAM,GAAKj8C,IACkB,IAAxBkW,EAAK9V,WAAW67C,EAAM,IACjCA,EAAM,EAAIj8C,GACc,IAAxBkW,EAAK9V,WAAW67C,EAAM,IACtB/lC,EAAK9V,WAAW67C,EAAM,IAAM+0D,EAC5B,CAGA,IADA,IAAIC,EAAOh1D,IACFg1D,GAAQ,GACf,GAAI/6F,EAAK9V,WAAW6wG,IAASD,EAAW,CAClC/0D,EAAMg1D,GAAQ,GACS,IAAzB/6F,EAAK9V,WAAW6wG,EAAO,IACE,IAAzB/6F,EAAK9V,WAAW6wG,EAAO,KAEvB/6F,EAAO+7C,EACH/7C,EAAK5V,UAAU,EAAG2wG,GAClB/6F,EAAK5V,UAAU,EAAG2wG,GAAQ/6F,EAAK5V,UAAU27C,EAAM,GACnDj8C,GAAOi8C,EAAM,EAAIg1D,EACjBh1D,EAAMg1D,EAAO,GAEf,MAKJ,GAAIA,EAAO,GAAKh1D,EAAM,IACT,GAAPA,GACgB,IAAlB/lC,EAAK9V,WAAW,IACE,IAAlB8V,EAAK9V,WAAW,IAChB,CAEAJ,GADAkW,EAAOA,EAAK5V,UAAU27C,EAAM,IACjB/+C,OACX,WAKR++C,IAEF,OAAOj8C,EAAM,EAAIkW,EAAO,IAc1B,SAAgBg7F,EAAQxxG,GACtB,IAAIu8C,EAAMv8C,EAAexC,OACzB,GAAI++C,GAAO,EAAG,CACZ,GAAW,GAAPA,EAAU,MAAO,IACrB,GAAIv8C,EAAeU,WAAW,IAAM4wG,EAClC,OAAOtxG,EAGX,OAASu8C,EAAM,GACb,GAAIv8C,EAAeU,WAAW67C,IAAQ+0D,EACpC,OAAOtxG,EAAeY,UAAU,EAAG27C,GAGvC,MAAO,IA3GT7mD,EAAAihD,gBAoFAjhD,EAAAmhD,YAAA,SAA4B72C,EAAwByxG,GAClD,OAAIzxG,EAAe42C,WAAW,QACrB52C,EAEF22C,EACL66D,EAAQC,GAAU9vG,EAAArJ,eAAiB0H,IAKvCtK,EAAA87G,yFC5GA,IAAME,EAAW,KACXC,EAAW,OACXC,EAAW,WAGjBl8G,EAAA0iF,OAAA,SAAuBz3E,EAAckhC,GACnC,KAAOA,GAAS,GACdlhC,EAAGE,KAAK+wG,GACR/vE,GAAS,EAEPA,GAAS,IACXlhC,EAAGE,KAAK8wG,GACR9vE,GAAS,GAEPA,GACFlhC,EAAGE,KAAK6wG,kCCQZ,SAAgBG,EAAQp9E,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,EACtBD,EAAOC,EAAS,IAAM,GACtBD,EAAOC,EAAS,IAAM,GAI/B,SAAgBs5C,EAAS12E,EAAYm9B,EAAoBC,GACvDD,EAAOC,GAAcp9B,EACrBm9B,EAAOC,EAAS,GAAKp9B,IAAU,EAC/Bm9B,EAAOC,EAAS,GAAKp9B,IAAU,GAC/Bm9B,EAAOC,EAAS,GAAKp9B,IAAU,GAIjC,SAAgBw6G,EAAQr9E,EAAoBC,GAC1C,IAAI+xD,EAAKorB,EAAQp9E,EAAQC,GACrBgyD,EAAKmrB,EAAQp9E,EAAQC,EAAS,GAClC,OAAO5qB,QAAQ28E,EAAIC,oDAzCrBhxF,EAAAq8G,OAAA,SAAuBt9E,EAAoBC,GACzC,OAAOD,EAAOC,IAIhBh/B,EAAAi5E,QAAA,SAAwBr3E,EAAYm9B,EAAoBC,GACtDD,EAAOC,GAAUp9B,GAInB5B,EAAAs8G,QAAA,SAAwBv9E,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,GAI/Bh/B,EAAAw4E,SAAA,SAAyB52E,EAAYm9B,EAAoBC,GACvDD,EAAOC,GAAcp9B,EACrBm9B,EAAOC,EAAS,GAAKp9B,IAAU,GAIjC5B,EAAAm8G,UAQAn8G,EAAAs4E,WAQAt4E,EAAAo8G,UAOAp8G,EAAAk5E,SAAA,SAAyBt3E,EAAYm9B,EAAoBC,GACvDs5C,EAASltC,QAAQxpC,GAAQm9B,EAAQC,GACjCs5C,EAASjtC,SAASzpC,GAAQm9B,EAAQC,EAAS,IAI7Ch/B,EAAAu8G,QAAA,SAAwBx9E,EAAoBC,GAC1C,OAAOwxD,WAAW2rB,EAAQp9E,EAAQC,KAIpCh/B,EAAAm5E,SAAA,SAAyBv3E,EAAYm9B,EAAoBC,GACvDs5C,EAASiY,WAAW3uF,GAAQm9B,EAAQC,IAItCh/B,EAAAw8G,QAAA,SAAwBz9E,EAAoBC,GAC1C,OAAO0xD,WAAW0rB,EAAQr9E,EAAQC,KAIpCh/B,EAAAo5E,SAAA,SAAyBx3E,EAAYm9B,EAAoBC,GACvD,IAAIy9E,EAAWhsB,WAAW7uF,GAC1B02E,EAASltC,QAAQqxE,GAAW19E,EAAQC,GACpCs5C,EAASjtC,SAASoxE,GAAW19E,EAAQC,EAAS,iJCnEhD,IAAArU,EAAAlqB,EAAA,IAOAi8G,EAAAj8G,EAAA,IAIAk8G,EAAAl8G,EAAA,IAKAyL,EAAAzL,EAAA,GAyCoCT,EAAA48G,iBAtClC1wG,EAAAb,wBAOF,IAAAwxG,EAAAp8G,EAAA,IASAT,EAAAwjF,UAAA,SAA0B74E,EAAcmW,EAAcxG,EACpDwiG,GAIA,YALoD,IAAAxiG,OAAA,QACpD,IAAAwiG,MAAA,MAEKA,IAAQA,EAAS,IAAID,EAAA35B,QAC1B45B,EAAOt5B,UAAU74E,EAAMmW,EAAMxG,GACtBwiG,GAIT98G,EAAAglF,SAAA,SAAyB83B,GACvB,OAAOA,EAAO93B,YAIhBhlF,EAAA+8G,eAAA,SAA+BD,GAC7B,IAAI96F,EAAU86F,EAAO96F,QACrB,OAAOA,EAAQnS,kBAAoBmS,EAAQxW,YAAY1D,OACnDka,EAAQxW,YAAYwW,EAAQnS,qBAC5B,MAON7P,EAAAg9G,OAAA,SAAuBxzG,GACrB,OAAOA,EAAQd,UAAYwD,EAAA7D,mBAAmBM,MAIhD3I,EAAAi9G,UAAA,SAA0BzzG,GACxB,OAAOA,EAAQd,UAAYwD,EAAA7D,mBAAmBO,SAIhD5I,EAAAk9G,QAAA,SAAwB1zG,GACtB,OAAOA,EAAQd,UAAYwD,EAAA7D,mBAAmBQ,OAIhD7I,EAAAm9G,cAAA,WACE,OAAO,IAAIxyF,EAAA2yC,SAIbt9D,EAAAo9G,UAAA,SAA0B7pG,EAAkB6V,GAC1C7V,EAAQ6V,OAASA,GAInBppB,EAAAq9G,YAAA,SAA4B9pG,EAAkBe,GAC5Cf,EAAQe,SAAWA,GAIrBtU,EAAAs9G,gBAAA,SAAgC/pG,EAAkBiqD,GAChDjqD,EAAQiqD,aAAeA,GAIzBx9D,EAAAu9G,gBAAA,SAAgChqG,EAAkBkqD,GAChDlqD,EAAQkqD,aAAeA,GAIzBz9D,EAAAw9G,eAAA,SAA+BjqG,EAAkBmqD,GAC/CnqD,EAAQmqD,YAAcA,GAIxB19D,EAAAy9G,aAAA,SAA6BlqG,EAAkBwT,GAC7CxT,EAAQwT,UAAYA,GAItB/mB,EAAA09G,cAAA,SAA8BnqG,EAAkBgB,GAC9ChB,EAAQgB,WAAaA,GAIvBvU,EAAA29G,eAAA,SAA+BpqG,EAAkBrS,EAAcwY,GAC7D,IAAIJ,EAAgB/F,EAAQ+F,cACvBA,IAAe/F,EAAQ+F,cAAgBA,EAAgB,IAAItJ,KAChEsJ,EAAc/H,IAAIrQ,EAAMwY,IAIb1Z,EAAA49G,uBAAsB,EAEtB59G,EAAA69G,uBAAsB,EAEtB79G,EAAA89G,oBAAmB,EAEnB99G,EAAA+9G,aAAY,EAEZ/9G,EAAAg+G,gBAAe,GAG5Bh+G,EAAAi+G,cAAA,SAA8B1qG,EAAkBqqD,GAC9CrqD,EAAQoqD,UAAYC,GAItB59D,EAAAk+G,sBAAA,SAAsC3qG,EAAkB4qG,EAAoBC,GAC1E7qG,EAAQiB,kBAAoB2pG,EAC5B5qG,EAAQkB,gBAAkB2pG,GAI5Bp+G,EAAAq+G,cAAA,SAA8BvB,GAC5B,OAAOA,EAAOrmD,UAIhBz2D,EAAAs+G,eAAA,SAA+Bt8F,EAAkBzO,GAC/C,YAD+C,IAAAA,MAAA,MACxC,IAAIoX,EAAAwzC,SAASn8C,EAASzO,GAAS2rD,WAIxCl/D,EAAAu+G,gBAAA,SAAgCt+G,GAC9B,IAAIm+E,EAAa,IAAIs+B,EAAAz+B,WAErB,OADAG,EAAWD,UAAUl+E,GACdm+E,EAAW3nB,UAIpBz2D,EAAAw+G,SAAA,SAAyBx8F,GACvB,OAAO26F,EAAAp6B,WAAWE,MAAMzgE,IAI1BhiB,EAAAy+G,SAAA,SAAyBz8F,GACvB,OAAO26F,EAAA95B,WAAWJ,MAAMzgE,IAI1B,IAAA/V,EAAAxL,EAAA,GAAST,EAAAoD,eAAA6I,EAAA7I,eAGT8E,EAAAzH,EAAA,IAEAyH,EAAAzH,EAAA,IACAyH,EAAAzH,EAAA,KACAyH,EAAAzH,EAAA,KACAyH,EAAAzH,EAAA,KACAyH,EAAAzH,EAAA,KACAyH,EAAAzH,EAAA,IACAyH,EAAAzH,EAAA,KACAyH,EAAAzH,EAAA,IACAyH,EAAAzH,EAAA,KACAyH,EAAAzH,EAAA,IACAyH,EAAAzH,EAAA,IACAyH,EAAAzH,EAAA,IACAyH,EAAAzH,EAAA,IACAyH,EAAAzH,EAAA","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__19__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","/**\r\n * Common constants.\r\n * @module common\r\n *//***/\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\r\n  DEFINITE_ASSIGNMENT = 1 << 13,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 14,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 15,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 16,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 17,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 18,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 19,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 20,\r\n\r\n  // Compilation states\r\n\r\n  /** Is resolved. */\r\n  RESOLVED = 1 << 21,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 22,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 23,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 24,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 25,\r\n  /** Is a virtual method. */\r\n  VIRTUAL = 1 << 26,\r\n  /** Is the main function. */\r\n  MAIN = 1 << 27,\r\n\r\n  // Other\r\n\r\n  QUOTED = 1 << 28\r\n}\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n/** Path index suffix. */\r\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\r\n\r\n/** Common compiler symbols. */\r\nexport namespace CommonSymbols {\r\n  // special\r\n  export const EMPTY = \"\";\r\n  // types\r\n  export const i8 = \"i8\";\r\n  export const i16 = \"i16\";\r\n  export const i32 = \"i32\";\r\n  export const i64 = \"i64\";\r\n  export const isize = \"isize\";\r\n  export const u8 = \"u8\";\r\n  export const u16 = \"u16\";\r\n  export const u32 = \"u32\";\r\n  export const u64 = \"u64\";\r\n  export const usize = \"usize\";\r\n  export const bool = \"bool\";\r\n  export const f32 = \"f32\";\r\n  export const f64 = \"f64\";\r\n  export const v128 = \"v128\";\r\n  export const i8x16 = \"i8x16\";\r\n  export const u8x16 = \"u8x16\";\r\n  export const i16x8 = \"i16x8\";\r\n  export const u16x8 = \"u16x8\";\r\n  export const i32x4 = \"i32x4\";\r\n  export const u32x4 = \"u32x4\";\r\n  export const i64x2 = \"i64x2\";\r\n  export const u64x2 = \"u64x2\";\r\n  export const f32x4 = \"f32x4\";\r\n  export const f64x2 = \"f64x2\";\r\n  export const void_ = \"void\";\r\n  export const number = \"number\";\r\n  export const boolean = \"boolean\";\r\n  export const string = \"string\";\r\n  export const native = \"native\";\r\n  // aliases\r\n  export const null_ = \"null\";\r\n  export const true_ = \"true\";\r\n  export const false_ = \"false\";\r\n  // objects\r\n  export const this_ = \"this\";\r\n  export const super_ = \"super\";\r\n  export const constructor = \"constructor\";\r\n}\r\n\r\n/** Common standard library symbols. */\r\nexport namespace LibrarySymbols {\r\n  // constants\r\n  export const ASC_TARGET = \"ASC_TARGET\";\r\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\r\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\r\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\r\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\r\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\r\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\r\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\r\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\r\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\r\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\r\n  // classes\r\n  export const I8 = \"I8\";\r\n  export const I16 = \"I16\";\r\n  export const I32 = \"I32\";\r\n  export const I64 = \"I64\";\r\n  export const Isize = \"Isize\";\r\n  export const U8 = \"U8\";\r\n  export const U16 = \"U16\";\r\n  export const U32 = \"U32\";\r\n  export const U64 = \"U64\";\r\n  export const Usize = \"Usize\";\r\n  export const Bool = \"Bool\";\r\n  export const F32 = \"F32\";\r\n  export const F64 = \"F64\";\r\n  export const V128 = \"V128\";\r\n  export const String = \"String\";\r\n  export const Array = \"Array\";\r\n  export const ArrayBuffer = \"ArrayBuffer\";\r\n  export const Math = \"Math\";\r\n  export const Mathf = \"Mathf\";\r\n  // runtime\r\n  export const memory = \"memory\";\r\n  export const allocate = \"allocate\";\r\n  export const abort = \"abort\";\r\n  export const main = \"main\";\r\n  // other\r\n  export const length = \"length\";\r\n  export const byteLength = \"byteLength\";\r\n  export const pow = \"pow\";\r\n  export const mod = \"mod\";\r\n}\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./bitset\";\r\nexport * from \"./charcode\";\r\nexport * from \"./collections\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n\r\n/** Tests if `x` is a power of two. */\r\nexport function isPowerOf2(x: i32): bool {\r\n  return x != 0 && (x & (x - 1)) == 0;\r\n}\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n  /** Related range, if any. */\r\n  relatedRange: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Adds a related source range to this message. */\r\n  withRelatedRange(range: Range): this {\r\n    this.relatedRange = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(range, useColors));\r\n    }\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n\r\n    let relatedRange = message.relatedRange;\r\n    if (relatedRange) {\r\n      if (showContext) {\r\n        sb.push(\"\\n\");\r\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\r\n      }\r\n      sb.push(\"\\n\");\r\n      sb.push(\" in \");\r\n      sb.push(range.source.normalizedPath);\r\n      sb.push(\"(\");\r\n      sb.push(range.line.toString(10));\r\n      sb.push(\",\");\r\n      sb.push(range.column.toString(10));\r\n      sb.push(\")\");\r\n    }\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) sb.push(\"~\");\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    relatedRange: Range | null,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    if (relatedRange) message.relatedRange = relatedRange;\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message with a related range. */\r\n  infoRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message with a related range. */\r\n  warningRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message with a related range. */\r\n  errorRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  INNER_DELIMITER,\r\n  LIBRARY_SUBST,\r\n  INDEX_SUFFIX,\r\n  CommonSymbols,\r\n  LibrarySymbols\r\n} from \"./common\";\r\n\r\nimport {\r\n  Options,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  Range,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n  SignatureNode,\r\n  TypeParameterNode,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  ArrowKind,\r\n\r\n  Expression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  decoratorNameToKind,\r\n  findDecorator\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  FunctionRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  CharCode\r\n} from \"./util\";\r\n\r\nimport {\r\n  Resolver\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Flow\r\n} from \"./flow\";\r\n\r\n/** Represents a yet unresolved `import`. */\r\nclass QueuedImport {\r\n  constructor(\r\n    /** File being imported into. */\r\n    public localFile: File,\r\n    /** Identifier within the local file. */\r\n    public localIdentifier: IdentifierExpression,\r\n    /** Identifier within the other file. Is an `import *` if not set. */\r\n    public foreignIdentifier: IdentifierExpression | null,\r\n    /** Path to the other file. */\r\n    public foreignPath: string,\r\n    /** Alternative path to the other file. */\r\n    public foreignPathAlt: string\r\n  ) {}\r\n}\r\n\r\n/** Represents a yet unresolved `export`. */\r\nclass QueuedExport {\r\n  constructor(\r\n    /** Identifier within the local file. */\r\n    public localIdentifier: IdentifierExpression,\r\n    /** Identifier within the other file. */\r\n    public foreignIdentifier: IdentifierExpression,\r\n    /** Path to the other file if a re-export. */\r\n    public foreignPath: string | null,\r\n    /** Alternative path to the other file if a re-export. */\r\n    public foreignPathAlt: string | null\r\n  ) {}\r\n}\r\n\r\n/** Represents a yet unresolved `export *`. */\r\nclass QueuedExportStar {\r\n  // stored in a map with localFile as the key\r\n  constructor(\r\n    /** Path to the other file. */\r\n    public foreignPath: string,\r\n    /** Alternative path to the other file. */\r\n    public foreignPathAlt: string,\r\n    /** Reference to the path literal for reporting. */\r\n    public pathLiteral: StringLiteralExpression\r\n  ) {}\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n\r\n  // indexed access\r\n  INDEXED_GET,            // a[]\r\n  INDEXED_SET,            // a[]=b\r\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\r\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\r\n\r\n  // binary\r\n  ADD,                    // a + b\r\n  SUB,                    // a - b\r\n  MUL,                    // a * b\r\n  DIV,                    // a / b\r\n  REM,                    // a % b\r\n  POW,                    // a ** b\r\n  BITWISE_AND,            // a & b\r\n  BITWISE_OR,             // a | b\r\n  BITWISE_XOR,            // a ^ b\r\n  BITWISE_SHL,            // a << b\r\n  BITWISE_SHR,            // a >> b\r\n  BITWISE_SHR_U,          // a >>> b\r\n  EQ,                     // a == b\r\n  NE,                     // a != b\r\n  GT,                     // a > b\r\n  GE,                     // a >= b\r\n  LT,                     // a < b\r\n  LE,                     // a <= b\r\n\r\n  // unary prefix\r\n  PLUS,                   // +a\r\n  MINUS,                  // -a\r\n  NOT,                    // !a\r\n  BITWISE_NOT,            // ~a\r\n  PREFIX_INC,             // ++a\r\n  PREFIX_DEC,             // --a\r\n\r\n  // unary postfix\r\n  POSTFIX_INC,            // a++\r\n  POSTFIX_DEC             // a--\r\n\r\n  // not overridable:\r\n  // IDENTITY             // a === b\r\n  // LOGICAL_AND          // a && b\r\n  // LOGICAL_OR           // a || b\r\n}\r\n\r\n/** Returns the operator kind represented by the specified decorator and string argument. */\r\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\r\n  assert(arg.length);\r\n  switch (decoratorKind) {\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.OPENBRACKET: {\r\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\r\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\r\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.ADD;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.SUB;\r\n          break;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          if (arg == \"*\") return OperatorKind.MUL;\r\n          if (arg == \"**\") return OperatorKind.POW;\r\n          break;\r\n        }\r\n        case CharCode.SLASH: {\r\n          if (arg == \"/\") return OperatorKind.DIV;\r\n          break;\r\n        }\r\n        case CharCode.PERCENT: {\r\n          if (arg == \"%\") return OperatorKind.REM;\r\n          break;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\r\n          break;\r\n        }\r\n        case CharCode.BAR: {\r\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\r\n          break;\r\n        }\r\n        case CharCode.CARET: {\r\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\r\n          break;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          if (arg == \"==\") return OperatorKind.EQ;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!=\") return OperatorKind.NE;\r\n          break;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          if (arg == \">\") return OperatorKind.GT;\r\n          if (arg == \">=\") return OperatorKind.GE;\r\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\r\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\r\n          break;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          if (arg == \"<\") return OperatorKind.LT;\r\n          if (arg == \"<=\") return OperatorKind.LE;\r\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_PREFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.PLUS;\r\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.MINUS;\r\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!\") return OperatorKind.NOT;\r\n          break;\r\n        }\r\n        case CharCode.TILDE: {\r\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_POSTFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return OperatorKind.INVALID;\r\n}\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Resolver instance. */\r\n  resolver: Resolver;\r\n  /** Array of sources. */\r\n  sources: Source[] = [];\r\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Special native code source. */\r\n  nativeSource: Source;\r\n  /** Special native code file. */\r\n  nativeFile: File;\r\n  /** Explicitly annotated start function. */\r\n  explicitStartFunction: FunctionPrototype | null = null;\r\n\r\n  // lookup maps\r\n\r\n  /** Files by unique internal name. */\r\n  filesByName: Map<string,File> = new Map();\r\n  /** Elements by unique internal name in element space. */\r\n  elementsByName: Map<string,Element> = new Map();\r\n  /** Elements by declaration. */\r\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\r\n  /** Element instances by unique internal name. */\r\n  instancesByName: Map<string,Element> = new Map();\r\n  /** Classes backing basic types like `i32`. */\r\n  typeClasses: Map<TypeKind,Class> = new Map();\r\n\r\n  // runtime references\r\n\r\n  /** ArrayBuffer instance reference. */\r\n  arrayBufferInstance: Class | null = null;\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype | null = null;\r\n  /** String instance reference. */\r\n  stringInstance: Class | null = null;\r\n  /** Abort function reference, if present. */\r\n  abortInstance: Function | null = null;\r\n  /** Memory allocation function. */\r\n  memoryAllocateInstance: Function | null = null;\r\n\r\n  // gc integration\r\n\r\n  /** Whether a garbage collector is present or not. */\r\n  hasGC: bool = false;\r\n  /** Garbage collector allocation function. */\r\n  gcAllocateInstance: Function | null = null;\r\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\r\n  gcLinkInstance: Function | null = null;\r\n  /** Garbage collector mark function called to on reachable managed objects. */\r\n  gcMarkInstance: Function | null = null;\r\n  /** Size of a managed object header. */\r\n  gcHeaderSize: u32 = 0;\r\n  /** Offset of the GC hook. */\r\n  gcHookOffset: u32 = 0;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(\r\n    /** Shared array of diagnostic messages (emitted so far). */\r\n    diagnostics: DiagnosticMessage[] | null = null\r\n  ) {\r\n    super(diagnostics);\r\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY);\r\n    this.nativeSource = nativeSource;\r\n    var nativeFile = new File(this, nativeSource);\r\n    this.nativeFile = nativeFile;\r\n    this.filesByName.set(nativeFile.internalName, nativeFile);\r\n    this.resolver = new Resolver(this);\r\n  }\r\n\r\n  /** Creates a native variable declaration. */\r\n  makeNativeVariableDeclaration(\r\n    /** The simple name of the variable */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `CONST`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): VariableDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createVariableDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      null, null, null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native type declaration. */\r\n  makeNativeTypeDeclaration(\r\n    /** The simple name of the type. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): TypeDeclaration {\r\n    var range = this.nativeSource.range;\r\n    var identifier = Node.createIdentifierExpression(name, range);\r\n    return Node.createTypeDeclaration(\r\n      identifier,\r\n      null,\r\n      Node.createOmittedType(range),\r\n      null, flags, range\r\n    );\r\n  }\r\n\r\n  // a dummy signature for programmatically generated native functions\r\n  private nativeDummySignature: SignatureNode | null = null;\r\n\r\n  /** Creates a native function declaration. */\r\n  makeNativeFunctionDeclaration(\r\n    /** The simple name of the function. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): FunctionDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createFunctionDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      null,\r\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createSignature([],\r\n        Node.createType( // ^ AST signature doesn't really matter, is overridden anyway\r\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\r\n          null, false, range\r\n        ),\r\n        null, false, range)\r\n      ),\r\n      null, null, flags, ArrowKind.NONE, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native namespace declaration. */\r\n  makeNativeNamespaceDeclaration(\r\n    /** The simple name of the namespace. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): NamespaceDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createNamespaceDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      [], null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native function. */\r\n  makeNativeFunction(\r\n    /** The simple name of the function. */\r\n    name: string,\r\n    /** Concrete function signature. */\r\n    signature: Signature,\r\n    /** Parent element, usually a file, class or namespace. */\r\n    parent: Element = this.nativeFile,\r\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\r\n    flags: CommonFlags = CommonFlags.NONE,\r\n    /** Decorator flags representing built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ): Function {\r\n    return new Function(\r\n      name,\r\n      new FunctionPrototype(\r\n        name,\r\n        parent,\r\n        this.makeNativeFunctionDeclaration(name, flags),\r\n        decoratorFlags\r\n      ),\r\n      signature\r\n    );\r\n  }\r\n\r\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\r\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\r\n    var elementsByDeclaration = this.elementsByDeclaration;\r\n    assert(elementsByDeclaration.has(declaration));\r\n    return elementsByDeclaration.get(declaration)!;\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n\r\n    // register native types\r\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\r\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\r\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\r\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\r\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\r\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\r\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\r\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\r\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\r\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\r\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\r\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\r\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\r\n    this.registerNativeType(CommonSymbols.void_, Type.void);\r\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\r\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\r\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\r\n      CommonSymbols.native,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\r\n      DecoratorFlags.BUILTIN\r\n    ));\r\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\r\n\r\n    // register compiler hints\r\n    this.registerConstantInteger(LibrarySymbols.ASC_TARGET, Type.i32,\r\n      i64_new(options.isWasm64 ? 2 : 1));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_NO_ASSERT, Type.bool,\r\n      i64_new(options.noAssert ? 1 : 0, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_MEMORY_BASE, Type.i32,\r\n      i64_new(options.memoryBase, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\r\n      i64_new(options.optimizeLevelHint, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_SHRINK_LEVEL, Type.i32,\r\n      i64_new(options.shrinkLevelHint, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\r\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\r\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_SIMD, Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_THREADS, Type.bool,\r\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\r\n\r\n    // remember deferred elements\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\r\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // initialize relevant declaration-like statements of the entire program\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let file = new File(this, source);\r\n      this.filesByName.set(file.internalName, file);\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports * should be linkable now that all files have been processed\r\n    for (let [file, exportsStar] of queuedExportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        let exportStar = exportsStar[i];\r\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\r\n        if (!foreignFile) {\r\n          this.error(\r\n            DiagnosticCode.File_0_not_found,\r\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\r\n          );\r\n          continue;\r\n        }\r\n        file.ensureExportStar(foreignFile);\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\r\n      let queuedImport = queuedImports[i];\r\n      let foreignIdentifier = queuedImport.foreignIdentifier;\r\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\r\n        let element = this.lookupForeign(\r\n          foreignIdentifier.text,\r\n          queuedImport.foreignPath,\r\n          queuedImport.foreignPathAlt,\r\n          queuedExports\r\n        );\r\n        if (element) {\r\n          queuedImport.localFile.add(\r\n            queuedImport.localIdentifier.text,\r\n            element,\r\n            true // isImport\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            foreignIdentifier.range,\r\n            queuedImport.foreignPath,\r\n            foreignIdentifier.text\r\n          );\r\n        }\r\n      } else { // i.e. import * as bar from \"./bar\"\r\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\r\n        if (foreignFile) {\r\n          let localFile = queuedImport.localFile;\r\n          let localName = queuedImport.localIdentifier.text;\r\n          localFile.add(\r\n            localName,\r\n            foreignFile.asImportedNamespace(\r\n              localName,\r\n              localFile\r\n            ),\r\n            true // isImport\r\n          );\r\n        } else {\r\n          assert(false); // already reported by the parser not finding the file\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [file, exports] of queuedExports) {\r\n      for (let [exportName, queuedExport] of exports) {\r\n        let localName = queuedExport.localIdentifier.text;\r\n        let foreignPath = queuedExport.foreignPath;\r\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\r\n          let element = this.lookupForeign(\r\n            localName,\r\n            foreignPath,\r\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\r\n            queuedExports\r\n          );\r\n          if (element) {\r\n            file.ensureExport(exportName, element);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.localIdentifier.range,\r\n              foreignPath, localName\r\n            );\r\n          }\r\n        } else { // i.e. export { foo [as bar] }\r\n          let element = file.lookupInSelf(localName);\r\n          if (element) {\r\n            file.ensureExport(exportName, element);\r\n          } else {\r\n            let globalElement = this.lookupGlobal(localName);\r\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\r\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Module_0_has_no_exported_member_1,\r\n                queuedExport.foreignIdentifier.range,\r\n                file.internalName, queuedExport.foreignIdentifier.text\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // register classes backing basic types\r\n    this.registerNativeTypeClass(TypeKind.I8, LibrarySymbols.I8);\r\n    this.registerNativeTypeClass(TypeKind.I16, LibrarySymbols.I16);\r\n    this.registerNativeTypeClass(TypeKind.I32, LibrarySymbols.I32);\r\n    this.registerNativeTypeClass(TypeKind.I64, LibrarySymbols.I64);\r\n    this.registerNativeTypeClass(TypeKind.ISIZE, LibrarySymbols.Isize);\r\n    this.registerNativeTypeClass(TypeKind.U8, LibrarySymbols.U8);\r\n    this.registerNativeTypeClass(TypeKind.U16, LibrarySymbols.U16);\r\n    this.registerNativeTypeClass(TypeKind.U32, LibrarySymbols.U32);\r\n    this.registerNativeTypeClass(TypeKind.U64, LibrarySymbols.U64);\r\n    this.registerNativeTypeClass(TypeKind.USIZE, LibrarySymbols.Usize);\r\n    this.registerNativeTypeClass(TypeKind.BOOL, LibrarySymbols.Bool);\r\n    this.registerNativeTypeClass(TypeKind.F32, LibrarySymbols.F32);\r\n    this.registerNativeTypeClass(TypeKind.F64, LibrarySymbols.F64);\r\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, LibrarySymbols.V128);\r\n\r\n    // resolve base prototypes of derived classes\r\n    var resolver = this.resolver;\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let thisPrototype = queuedExtends[i];\r\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\r\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\r\n          this.error(\r\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\r\n          );\r\n        }\r\n        if (\r\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\r\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\r\n          );\r\n        }\r\n        thisPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          extendsNode.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    {\r\n      let globalAliases = options.globalAliases;\r\n      if (globalAliases) {\r\n        for (let [alias, name] of globalAliases) {\r\n          if (!name.length) continue; // explicitly disabled\r\n          let elementsByName = this.elementsByName;\r\n          let element = elementsByName.get(name);\r\n          if (element) {\r\n            if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\r\n            elementsByName.set(alias, element);\r\n          }\r\n          else throw new Error(\"no such global element: \" + name);\r\n        }\r\n      }\r\n    }\r\n\r\n    // register global library elements\r\n    {\r\n      let element: Element | null;\r\n      if (element = this.lookupGlobal(LibrarySymbols.String)) {\r\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n        this.stringInstance = resolver.resolveClass(<ClassPrototype>element, null);\r\n      }\r\n      if (element = this.lookupGlobal(LibrarySymbols.ArrayBuffer)) {\r\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n        this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\r\n      }\r\n      if (element = this.lookupGlobal(LibrarySymbols.Array)) {\r\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n        this.arrayPrototype = <ClassPrototype>element;\r\n      }\r\n      if (element = this.lookupGlobal(LibrarySymbols.abort)) {\r\n        assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n        this.abortInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\r\n      }\r\n      if (element = this.lookupGlobal(LibrarySymbols.memory)) {\r\n        if (element = element.lookupInSelf(LibrarySymbols.allocate)) {\r\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n          this.memoryAllocateInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\r\n        }\r\n      }\r\n    }\r\n\r\n    // register GC hooks if present\r\n    // FIXME: think about a better way than globals to model this, maybe a GC namespace that can be\r\n    // dynamically extended by a concrete implementation but then has `@unsafe` methods that normal\r\n    // code cannot call without explicitly enabling it with a flag.\r\n    if (\r\n      this.elementsByName.has(\"__gc_allocate\") &&\r\n      this.elementsByName.has(\"__gc_link\") &&\r\n      this.elementsByName.has(\"__gc_mark\")\r\n    ) {\r\n      // __gc_allocate(usize, (ref: usize) => void): usize\r\n      let element = <Element>this.elementsByName.get(\"__gc_allocate\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      let signature = gcAllocateInstance.signature;\r\n      assert(signature.parameterTypes.length == 2);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.parameterTypes[1].signatureReference);\r\n      assert(signature.returnType == this.options.usizeType);\r\n\r\n      // __gc_link(usize, usize): void\r\n      element = <Element>this.elementsByName.get(\"__gc_link\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      signature = gcLinkInstance.signature;\r\n      assert(signature.parameterTypes.length == 2);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.parameterTypes[1] == this.options.usizeType);\r\n      assert(signature.returnType == Type.void);\r\n\r\n      // __gc_mark(usize): void\r\n      element = <Element>this.elementsByName.get(\"__gc_mark\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      signature = gcMarkInstance.signature;\r\n      assert(signature.parameterTypes.length == 1);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.returnType == Type.void);\r\n\r\n      this.gcAllocateInstance = gcAllocateInstance;\r\n      this.gcLinkInstance = gcLinkInstance;\r\n      this.gcMarkInstance = gcMarkInstance;\r\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\r\n      this.gcHookOffset =  gcHookOffset;\r\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\r\n      this.hasGC = true;\r\n    }\r\n\r\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\r\n    for (let file of this.filesByName.values()) {\r\n      let exports = file.exports;\r\n      if (!(file.source.isEntry && exports)) continue;\r\n      for (let element of exports.values()) this.markModuleExport(element);\r\n    }\r\n  }\r\n\r\n  /** Marks an element and its children as a module export. */\r\n  private markModuleExport(element: Element): void {\r\n    element.set(CommonFlags.MODULE_EXPORT);\r\n    switch (element.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\r\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\r\n        if (getterPrototype) this.markModuleExport(getterPrototype);\r\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\r\n        if (setterPrototype) this.markModuleExport(setterPrototype);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY:\r\n      case ElementKind.FUNCTION:\r\n      case ElementKind.FIELD:\r\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\r\n    }\r\n    {\r\n      let members = element.members;\r\n      if (members) for (let member of members.values()) this.markModuleExport(member);\r\n    }\r\n  }\r\n\r\n  /** Registers a native type with the program. */\r\n  private registerNativeType(name: string, type: Type): void {\r\n    var element = new TypeDefinition(\r\n      name,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\r\n      DecoratorFlags.BUILTIN\r\n    );\r\n    element.setType(type);\r\n    this.nativeFile.add(name, element);\r\n  }\r\n\r\n  /** Registers the backing class of a native type. */\r\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\r\n    assert(!this.typeClasses.has(typeKind));\r\n    var element = this.lookupGlobal(className);\r\n    if (element) {\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\r\n      if (classElement) this.typeClasses.set(typeKind, classElement);\r\n    }\r\n  }\r\n\r\n  /** Registers a constant integer value within the global scope. */\r\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\r\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\r\n    var global = new Global(\r\n      name,\r\n      this.nativeFile,\r\n      DecoratorFlags.NONE,\r\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\r\n    );\r\n    global.setConstantIntegerValue(value, type);\r\n    this.nativeFile.add(name, global);\r\n  }\r\n\r\n  /** Registers a constant float value within the global scope. */\r\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\r\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\r\n    var global = new Global(\r\n      name,\r\n      this.nativeFile,\r\n      DecoratorFlags.NONE,\r\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\r\n    );\r\n    global.setConstantFloatValue(value, type);\r\n    this.nativeFile.add(name, global);\r\n  }\r\n\r\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\r\n  ensureGlobal(name: string, element: DeclaredElement): void {\r\n    var elementsByName = this.elementsByName;\r\n    if (elementsByName.has(name)) {\r\n      let actual = elementsByName.get(name);\r\n      // NOTE: this is effectively only performed when merging native types with\r\n      // their respective namespaces in std/builtins, but can also trigger when a\r\n      // user has multiple global elements of the same name in different files,\r\n      // which might result in unexpected shared symbols accross files. considering\r\n      // this a wonky feature for now that we might want to revisit later.\r\n      if (actual !== element) {\r\n        let merged = tryMerge(elementsByName.get(name)!, element);\r\n        if (!merged) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            element.identifierNode.range, name\r\n          );\r\n          return;\r\n        }\r\n        element = merged;\r\n      }\r\n    }\r\n    elementsByName.set(name, element);\r\n  }\r\n\r\n  /** Looks up the element of the specified name in the global scope. */\r\n  lookupGlobal(name: string): Element | null {\r\n    var elements = this.elementsByName;\r\n    if (elements.has(name)) return elements.get(name);\r\n    return null;\r\n  }\r\n\r\n  /** Tries to locate a foreign file given its normalized path. */\r\n  private lookupForeignFile(\r\n    /** Normalized path to the other file. */\r\n    foreignPath: string,\r\n    /** Alternative normalized path to the other file. */\r\n    foreignPathAlt: string\r\n  ): File | null {\r\n    var filesByName = this.filesByName;\r\n    return filesByName.has(foreignPath)\r\n         ? filesByName.get(foreignPath)!\r\n         : filesByName.has(foreignPathAlt)\r\n         ? filesByName.get(foreignPathAlt)!\r\n         : null;\r\n  }\r\n\r\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\r\n  private lookupForeign(\r\n    /** Identifier within the other file. */\r\n    foreignName: string,\r\n    /** Normalized path to the other file. */\r\n    foreignPath: string,\r\n    /** Alternative normalized path to the other file. */\r\n    foreignPathAlt: string,\r\n    /** So far queued exports. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): DeclaredElement | null {\r\n    do {\r\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\r\n      if (!foreignFile) return null; // no such file\r\n\r\n      // search already resolved exports\r\n      let element = foreignFile.lookupExport(foreignName);\r\n      if (element) return element;\r\n\r\n      // otherwise traverse queued exports\r\n      if (queuedExports.has(foreignFile)) {\r\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\r\n        if (fileQueuedExports.has(foreignName)) {\r\n          let queuedExport = fileQueuedExports.get(foreignName)!;\r\n          if (queuedExport.foreignPath) { // imported from another file\r\n            foreignName = queuedExport.localIdentifier.text;\r\n            foreignPath = queuedExport.foreignPath;\r\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\r\n            continue;\r\n          } else { // local element of this file\r\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\r\n            if (element) return element;\r\n          }\r\n        }\r\n      }\r\n      break;\r\n    } while (true);\r\n    return null;\r\n  }\r\n\r\n  /** Validates that only supported decorators are present. */\r\n  private checkDecorators(\r\n    /** Decorators present on an element. */\r\n    decorators: DecoratorNode[] | null,\r\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\r\n    acceptedFlags: DecoratorFlags\r\n  ): DecoratorFlags {\r\n    var flags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        let kind = decoratorNameToKind(decorator.name);\r\n        let flag = decoratorKindToFlag(kind);\r\n        if (flag) {\r\n          if (flag == DecoratorFlags.BUILTIN) {\r\n            if (decorator.range.source.isLibrary) {\r\n              flags |= flag;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Decorator_0_is_not_valid_here,\r\n                decorator.range, decorator.name.range.toString()\r\n              );\r\n            }\r\n          } else if (!(acceptedFlags & flag)) {\r\n            this.error(\r\n              DiagnosticCode.Decorator_0_is_not_valid_here,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          } else if (flags & flag) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_decorator,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          } else {\r\n            flags |= flag;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return flags;\r\n  }\r\n\r\n  /** Initializes a class declaration. */\r\n  private initializeClass(\r\n    /** The declaration to initialize. */\r\n    declaration: ClassDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: ClassPrototype[],\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new ClassPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL |\r\n        DecoratorFlags.SEALED |\r\n        DecoratorFlags.UNMANAGED\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      // cannot implement interfaces when unmanaged\r\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n      } else if (numImplementsTypes) {\r\n        // remember classes that implement interfaces\r\n        for (let i = 0; i < numImplementsTypes; ++i) {\r\n          this.warning( // TODO: not yet supported\r\n            DiagnosticCode.Operation_not_supported,\r\n            implementsTypes[i].range\r\n          );\r\n        }\r\n        queuedImplements.push(element);\r\n      }\r\n    }\r\n    // remember classes that extend another class\r\n    if (declaration.extendsType) queuedExtends.push(element);\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\r\n        default: assert(false); // class member expected\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Initializes a field of a class or interface. */\r\n  private initializeField(\r\n    /** The declaration to initialize. */\r\n    declaration: FieldDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var element: DeclaredElement;\r\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\r\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\r\n      element = new Global(\r\n        name,\r\n        parent,\r\n        this.checkDecorators(decorators,\r\n          (declaration.is(CommonFlags.READONLY)\r\n            ? DecoratorFlags.INLINE\r\n            : DecoratorFlags.NONE\r\n          ) | DecoratorFlags.LAZY\r\n        ),\r\n        declaration\r\n      );\r\n      if (!parent.add(name, element)) return;\r\n    } else { // actual instance field\r\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\r\n      element = new FieldPrototype(\r\n        name,\r\n        parent,\r\n        declaration,\r\n        this.checkDecorators(decorators, DecoratorFlags.NONE)\r\n      );\r\n      if (!parent.addInstance(name, element)) return;\r\n    }\r\n  }\r\n\r\n  /** Initializes a method of a class or interface. */\r\n  private initializeMethod(\r\n    /** The declaration to initialize. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var isStatic = declaration.is(CommonFlags.STATIC);\r\n    var acceptedFlags = DecoratorFlags.INLINE;\r\n    if (!declaration.is(CommonFlags.GENERIC)) {\r\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\r\n                    |  DecoratorFlags.OPERATOR_PREFIX\r\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\r\n    }\r\n    var element = new FunctionPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, acceptedFlags)\r\n    );\r\n    if (isStatic) { // global function\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n      if (!parent.add(name, element)) return;\r\n    } else { // actual instance method\r\n      if (!parent.addInstance(name, element)) return;\r\n    }\r\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\r\n  }\r\n\r\n  /** Checks that operator overloads are generally valid, if present. */\r\n  private checkOperatorOverloads(\r\n    /** Decorators to check. */\r\n    decorators: DecoratorNode[] | null,\r\n    /** Decorated method. */\r\n    prototype: FunctionPrototype,\r\n    /** Parent class. */\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        switch (decorator.decoratorKind) {\r\n          case DecoratorKind.OPERATOR:\r\n          case DecoratorKind.OPERATOR_BINARY:\r\n          case DecoratorKind.OPERATOR_PREFIX:\r\n          case DecoratorKind.OPERATOR_POSTFIX: {\r\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n            if (numArgs == 1) {\r\n              let firstArg = (<Expression[]>decorator.arguments)[0];\r\n              if (\r\n                firstArg.kind == NodeKind.LITERAL &&\r\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n              ) {\r\n                let kind = operatorKindFromDecorator(\r\n                  decorator.decoratorKind,\r\n                  (<StringLiteralExpression>firstArg).value\r\n                );\r\n                if (kind == OperatorKind.INVALID) {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  let overloads = classPrototype.overloadPrototypes;\r\n                  if (overloads.has(kind)) {\r\n                    this.error(\r\n                      DiagnosticCode.Duplicate_function_implementation,\r\n                      firstArg.range\r\n                    );\r\n                  } else {\r\n                    prototype.operatorKind = kind;\r\n                    overloads.set(kind, prototype);\r\n                  }\r\n                }\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.String_literal_expected,\r\n                  firstArg.range\r\n                );\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                decorator.range, \"1\", numArgs.toString(10)\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\r\n  private ensureProperty(\r\n    /** The declaration of the getter or setter introducing the property. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): PropertyPrototype | null {\r\n    var name = declaration.name.text;\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let parentMembers = parent.members;\r\n      if (parentMembers && parentMembers.has(name)) {\r\n        let element = <Element>parentMembers.get(name)!;\r\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\r\n      } else {\r\n        let element = new PropertyPrototype(name, parent, declaration);\r\n        if (!parent.add(name, element)) return null;\r\n        return element;\r\n      }\r\n    } else {\r\n      let parentMembers = parent.instanceMembers;\r\n      if (parentMembers && parentMembers.has(name)) {\r\n        let element = <Element>parentMembers.get(name);\r\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\r\n      } else {\r\n        let element = new PropertyPrototype(name, parent, declaration);\r\n        if (!parent.addInstance(name, element)) return null;\r\n        return element;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Duplicate_property_0,\r\n      declaration.name.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Initializes a property of a class. */\r\n  private initializeProperty(\r\n    /** The declaration of the getter or setter. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var property = this.ensureProperty(declaration, parent);\r\n    if (!property) return;\r\n    var name = declaration.name.text;\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    if (isGetter) {\r\n      if (property.getterPrototype) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_property_0,\r\n          declaration.name.range, name\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      if (property.setterPrototype) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_property_0,\r\n          declaration.name.range, name\r\n        );\r\n        return;\r\n      }\r\n    }\r\n    var element = new FunctionPrototype(\r\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\r\n      property,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.INLINE\r\n      )\r\n    );\r\n    if (isGetter) {\r\n      property.getterPrototype = element;\r\n    } else {\r\n      property.setterPrototype = element;\r\n    }\r\n  }\r\n\r\n  /** Initializes an enum. */\r\n  private initializeEnum(\r\n    /** The declaration to initialize. */\r\n    declaration: EnumDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new Enum(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL |\r\n        DecoratorFlags.INLINE |\r\n        DecoratorFlags.LAZY\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n  }\r\n\r\n  /** Initializes an enum value. */\r\n  private initializeEnumValue(\r\n    /** The declaration to initialize. */\r\n    declaration: EnumValueDeclaration,\r\n    /** Parent enum. */\r\n    parent: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new EnumValue(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.NONE\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n  }\r\n\r\n  /** Initializes an `export` statement. */\r\n  private initializeExports(\r\n    /** The statement to initialize. */\r\n    statement: ExportStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>,\r\n    /** So far queued `export *`s. */\r\n    queuedExportsStar: Map<File,QueuedExportStar[]>\r\n  ): void {\r\n    var members = statement.members;\r\n    if (members) { // export { foo, bar } [from \"./baz\"]\r\n      for (let i = 0, k = members.length; i < k; ++i) {\r\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\r\n      }\r\n    } else { // export * from \"./baz\"\r\n      let queued: QueuedExportStar[];\r\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\r\n      else queuedExportsStar.set(parent, queued = []);\r\n      let foreignPath = assert(statement.internalPath); // must be set for export *\r\n      queued.push(new QueuedExportStar(\r\n        foreignPath,\r\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n          : foreignPath + INDEX_SUFFIX,\r\n        assert(statement.path)\r\n      ));\r\n    }\r\n  }\r\n\r\n  /** Initializes a single `export` member. Does not handle `export *`. */\r\n  private initializeExport(\r\n    /** The member to initialize. */\r\n    member: ExportMember,\r\n    /** Local file. */\r\n    localFile: File,\r\n    /** Path to the other file, if present. */\r\n    foreignPath: string | null,\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var localName = member.localName.text;\r\n    var foreignName = member.exportedName.text;\r\n\r\n    // check for duplicates\r\n    var element = localFile.lookupExport(foreignName);\r\n    if (element) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.exportedName.range, foreignName\r\n      );\r\n      return;\r\n    }\r\n    // local element, i.e. export { foo [as bar] }\r\n    if (foreignPath === null) {\r\n\r\n      // resolve right away if the local element already exists\r\n      if (element = localFile.lookupInSelf(localName)) {\r\n        localFile.ensureExport(foreignName, element);\r\n\r\n      // otherwise queue it\r\n      } else {\r\n        let queued: Map<string,QueuedExport>;\r\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\r\n        else queuedExports.set(localFile, queued = new Map());\r\n        queued.set(foreignName, new QueuedExport(\r\n          member.localName,\r\n          member.exportedName,\r\n          null, null\r\n        ));\r\n      }\r\n\r\n    // foreign element, i.e. export { foo } from \"./bar\"\r\n    } else {\r\n      let queued: Map<string,QueuedExport>;\r\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\r\n      else queuedExports.set(localFile, queued = new Map());\r\n      queued.set(foreignName, new QueuedExport(\r\n        member.localName,\r\n        member.exportedName,\r\n        foreignPath,\r\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n          : foreignPath + INDEX_SUFFIX\r\n      ));\r\n    }\r\n  }\r\n\r\n  /** Initializes an `import` statement. */\r\n  private initializeImports(\r\n    /** The statement to initialize. */\r\n    statement: ImportStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `import`s. */\r\n    queuedImports: QueuedImport[],\r\n    /** SO far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          parent,\r\n          statement.internalPath,\r\n          queuedImports,\r\n          queuedExports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\r\n      queuedImports.push(new QueuedImport(\r\n        parent,\r\n        statement.namespaceName,\r\n        null, // indicates import *\r\n        statement.internalPath,\r\n        statement.internalPath + INDEX_SUFFIX\r\n      ));\r\n    } else {\r\n      // import \"./foo\"\r\n    }\r\n  }\r\n\r\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\r\n  private initializeImport( // { foo [as bar] }\r\n    /** The declaration to initialize. */\r\n    declaration: ImportDeclaration,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** Path to the other file. */\r\n    foreignPath: string,\r\n    /** So far queued `import`s. */\r\n    queuedImports: QueuedImport[],\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n      : foreignPath + INDEX_SUFFIX;\r\n\r\n    // resolve right away if the element exists\r\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\r\n    if (element) {\r\n      parent.add(declaration.name.text, element, true);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    queuedImports.push(new QueuedImport(\r\n      parent,\r\n      declaration.name,\r\n      declaration.foreignName,\r\n      foreignPath,\r\n      foreignPathAlt\r\n    ));\r\n  }\r\n\r\n  /** Initializes a function. Does not handle methods. */\r\n  private initializeFunction(\r\n    /** The declaration to initialize. */\r\n    declaration: FunctionDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var validDecorators = DecoratorFlags.NONE;\r\n    if (declaration.is(CommonFlags.AMBIENT)) {\r\n      validDecorators |= DecoratorFlags.EXTERNAL;\r\n    } else {\r\n      validDecorators |= DecoratorFlags.INLINE;\r\n    }\r\n    if (!declaration.is(CommonFlags.INSTANCE)) {\r\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\r\n        validDecorators |= DecoratorFlags.GLOBAL;\r\n      }\r\n    }\r\n    if (!declaration.is(CommonFlags.GENERIC)) {\r\n      if (parent.kind == ElementKind.FILE && (<File>parent).source.isEntry) {\r\n        validDecorators |= DecoratorFlags.START;\r\n      }\r\n    }\r\n    var element = new FunctionPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, validDecorators)\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n    if (element.hasDecorator(DecoratorFlags.START)) {\r\n      if (this.explicitStartFunction) {\r\n        this.error(\r\n          DiagnosticCode.Module_cannot_have_multiple_start_functions,\r\n          assert(findDecorator(DecoratorKind.START, declaration.decorators)).range\r\n        );\r\n      } else this.explicitStartFunction = element;\r\n    }\r\n  }\r\n\r\n  /** Initializes an interface. */\r\n  private initializeInterface(\r\n    /** The declaration to initialize. */\r\n    declaration: InterfaceDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new InterfacePrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\r\n          }\r\n          break;\r\n        }\r\n        default: assert(false); // interface member expected\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Initializes a namespace. */\r\n  private initializeNamespace(\r\n    /** The declaration to initialize. */\r\n    declaration: NamespaceDeclaration,\r\n    /** Parent element, usually a file or another namespace. */\r\n    parent: Element,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: ClassPrototype[],\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new Namespace(name, parent, declaration);\r\n    if (!parent.add(name, element)) return;\r\n    element = assert(parent.lookupInSelf(name)); // possibly merged\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>member, element, queuedExtends, queuedImplements);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>member, element);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>member, element);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>member, element);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>member, element, queuedExtends, queuedImplements);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          this.initializeTypeDefinition(<TypeDeclaration>member, element);\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>member, element);\r\n          break;\r\n        }\r\n        default: assert(false); // namespace member expected\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Initializes a `type` definition. */\r\n  private initializeTypeDefinition(\r\n    /** The declaration to initialize. */\r\n    declaration: TypeDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new TypeDefinition(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\r\n    );\r\n    parent.add(name, element); // reports\r\n  }\r\n\r\n  /** Initializes a variable statement. */\r\n  private initializeVariables(\r\n    /** The statement to initialize. */\r\n    statement: VariableStatement,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\r\n      if (declaration.is(CommonFlags.DECLARE)) {\r\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\r\n      }\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        acceptedFlags |= DecoratorFlags.INLINE;\r\n      }\r\n      let element = new Global(\r\n        name,\r\n        parent,\r\n        this.checkDecorators(declaration.decorators, acceptedFlags),\r\n        declaration\r\n      );\r\n      if (!parent.add(name, element)) continue; // reports\r\n    }\r\n  }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link PropertyPrototype}.  */\r\n  PROPERTY_PROTOTYPE,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE,\r\n  /** A {@link File}. */\r\n  FILE,\r\n  /** A {@link TypeDefinition}.  */\r\n  TYPEDEFINITION,\r\n}\r\n\r\n/** Indicates built-in decorators that are present. */\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is a binary operator overload. */\r\n  OPERATOR_BINARY = 1 << 1,\r\n  /** Is a unary prefix operator overload. */\r\n  OPERATOR_PREFIX = 1 << 2,\r\n  /** Is a unary postfix operator overload. */\r\n  OPERATOR_POSTFIX = 1 << 3,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 4,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 5,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 6,\r\n  /** Is using a different external name. */\r\n  EXTERNAL = 1 << 7,\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 8,\r\n  /** Is compiled lazily. */\r\n  LAZY = 1 << 9,\r\n  /** Is the explicit start function. */\r\n  START = 1 << 10\r\n}\r\n\r\n/** Translates a decorator kind to the respective decorator flag. */\r\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\r\n  switch (kind) {\r\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\r\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\r\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\r\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\r\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\r\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\r\n    case DecoratorKind.START: return DecoratorFlags.START;\r\n    default: return DecoratorFlags.NONE;\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Parent element. */\r\n  parent: Element;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Member elements. */\r\n  members: Map<string,DeclaredElement> | null = null;\r\n  /** Shadowing type in type space, if any. */\r\n  shadowType: TypeDefinition | null = null;\r\n\r\n  /** Constructs a new program element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    public kind: ElementKind,\r\n    /** Simple name. */\r\n    public name: string,\r\n    /** Internal name referring to this element. */\r\n    public internalName: string,\r\n    /** Containing {@link Program}. */\r\n    public program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null\r\n  ) {\r\n    this.program = program;\r\n    this.name = name;\r\n    this.internalName = internalName;\r\n    if (parent) {\r\n      this.parent = parent;\r\n    } else {\r\n      assert(this.kind == ElementKind.FILE);\r\n      this.parent = this; // special case to keep this.parent non-nullable\r\n    }\r\n  }\r\n\r\n  /** Gets the enclosing file. */\r\n  get file(): File {\r\n    var current: Element = this;\r\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\r\n    while (true);\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n\r\n  /** Looks up the element with the specified name within this element. */\r\n  lookupInSelf(name: string): DeclaredElement | null {\r\n    var members = this.members;\r\n    if (members && members.has(name)) return members.get(name)!;\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the element with the specified name relative to this element, like in JS. */\r\n  abstract lookup(name: string): Element | null;\r\n\r\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\r\n  add(name: string, element: DeclaredElement): bool {\r\n    var originalDeclaration = element.declaration;\r\n    var members = this.members;\r\n    if (!members) this.members = members = new Map();\r\n    else if (members.has(name)) {\r\n      let actual = members.get(name)!;\r\n      if (actual.parent !== this) {\r\n        // override non-own element\r\n      } else {\r\n        let merged = tryMerge(actual, element);\r\n        if (merged) {\r\n          element = merged; // use merged element\r\n        } else {\r\n          this.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            element.identifierNode.range, element.identifierNode.text\r\n          );\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    members.set(name, element);\r\n    var program = this.program;\r\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\r\n      // prefer unbound prototypes in global lookup maps\r\n      program.elementsByName.set(element.internalName, element);\r\n      program.elementsByDeclaration.set(originalDeclaration, element);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** Returns a string representation of this element. */\r\n  toString(): string {\r\n    return ElementKind[this.kind] + \":\" + this.internalName;\r\n  }\r\n}\r\n\r\n/** Base class of elements with an associated declaration statement. */\r\nexport abstract class DeclaredElement extends Element {\r\n\r\n  /** Constructs a new declared program element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Internal name referring to this element. */\r\n    internalName: string,\r\n    /** Containing {@link Program}. */\r\n    program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null,\r\n    /** Declaration reference. */\r\n    public declaration: DeclarationStatement\r\n  ) {\r\n    super(kind, name, internalName, program, parent);\r\n    // It is necessary to have access to identifiers of all members and exports\r\n    // for reporting purposes and this is the lowest common denominator. Comes\r\n    // at the expense of not having more specific type information in derived\r\n    // classes, though. Instead, derived classes implement getters for other\r\n    // important AST nodes directly through manual casting, allowing the resolver\r\n    // etc. to not worry about actual declarations.\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags; // inherit\r\n  }\r\n\r\n  /** Tests if this element is a library element. */\r\n  get isDeclaredInLibrary(): bool {\r\n    return this.declaration.range.source.isLibrary;\r\n  }\r\n\r\n  /** Gets the associated identifier node. */\r\n  get identifierNode(): IdentifierExpression {\r\n    return this.declaration.name;\r\n  }\r\n\r\n  /** Gets the assiciated decorator nodes. */\r\n  get decoratorNodes(): DecoratorNode[] | null {\r\n    return this.declaration.decorators;\r\n  }\r\n}\r\n\r\n/** Base class of elements that can be resolved to a concrete type. */\r\nexport abstract class TypedElement extends DeclaredElement {\r\n\r\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\r\n  type: Type = Type.void;\r\n\r\n  /** Sets the resolved type of this element. */\r\n  setType(type: Type): void {\r\n    assert(!this.is(CommonFlags.RESOLVED));\r\n    this.type = type;\r\n    this.set(CommonFlags.RESOLVED);\r\n  }\r\n}\r\n\r\n/** A file representing the implicit top-level namespace of a source. */\r\nexport class File extends Element {\r\n\r\n  /** File exports. */\r\n  exports: Map<string,DeclaredElement> | null = null;\r\n  /** File re-exports. */\r\n  exportsStar: File[] | null = null;\r\n  /** Top-level start function of this file. */\r\n  startFunction: Function;\r\n\r\n  /** Constructs a new file. */\r\n  constructor(\r\n    /** Program this file belongs to. */\r\n    program: Program,\r\n    /** Source of this file. */\r\n    public source: Source\r\n  ) {\r\n    super(\r\n      ElementKind.FILE,\r\n      source.normalizedPath,\r\n      source.internalPath,\r\n      program,\r\n      null // special case for files\r\n    );\r\n    this.source = source;\r\n    assert(!program.filesByName.has(this.internalName));\r\n    program.filesByName.set(this.internalName, this);\r\n    var startFunction = this.program.makeNativeFunction(\r\n      \"start:\" + this.internalName,\r\n      new Signature(null, Type.void),\r\n      this\r\n    );\r\n    startFunction.internalName = startFunction.name;\r\n    this.startFunction = startFunction;\r\n  }\r\n\r\n  /* @override */\r\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\r\n    if (!super.add(name, element)) return false;\r\n    element = assert(this.lookupInSelf(name)); // possibly merged\r\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\r\n      this.ensureExport(\r\n        element.name,\r\n        element\r\n      );\r\n    }\r\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) this.program.ensureGlobal(name, element);\r\n    return true;\r\n  }\r\n\r\n  /* @override */\r\n  lookupInSelf(name: string): DeclaredElement | null {\r\n    var element = super.lookupInSelf(name);\r\n    if (element) return element;\r\n    var exportsStar = this.exportsStar;\r\n    if (exportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    var element = this.lookupInSelf(name);\r\n    if (element) return element;\r\n    return this.program.lookupGlobal(name);\r\n  }\r\n\r\n  /** Ensures that an element is an export of this file. */\r\n  ensureExport(name: string, element: DeclaredElement): void {\r\n    var exports = this.exports;\r\n    if (!exports) this.exports = exports = new Map();\r\n    exports.set(name, element);\r\n    if (this.source.isLibrary) this.program.ensureGlobal(name, element);\r\n  }\r\n\r\n  /** Ensures that another file is a re-export of this file. */\r\n  ensureExportStar(file: File): void {\r\n    var exportsStar = this.exportsStar;\r\n    if (!exportsStar) this.exportsStar = exportsStar = [];\r\n    else if (exportsStar.includes(file)) return;\r\n    exportsStar.push(file);\r\n  }\r\n\r\n  /** Looks up the export of the specified name. */\r\n  lookupExport(name: string): DeclaredElement | null {\r\n    var exports = this.exports;\r\n    if (exports && exports.has(name)) return exports.get(name)!;\r\n    var exportsStar = this.exportsStar;\r\n    if (exportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        let element = exportsStar[i].lookupExport(name);\r\n        if (element) return element;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Creates an imported namespace from this file. */\r\n  asImportedNamespace(name: string, parent: Element): Namespace {\r\n    var ns = new Namespace(\r\n      name,\r\n      parent,\r\n      this.program.makeNativeNamespaceDeclaration(name)\r\n    );\r\n    var exports = this.exports;\r\n    if (exports) {\r\n      for (let [memberName, member] of exports) {\r\n        ns.add(memberName, member);\r\n      }\r\n    }\r\n    return ns;\r\n  }\r\n}\r\n\r\n/** A type definition. */\r\nexport class TypeDefinition extends TypedElement {\r\n\r\n  /** Constructs a new type definition. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: TypeDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.TYPEDEFINITION,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<TypeDeclaration>this.declaration).typeParameters;\r\n  }\r\n\r\n  /** Gets the associated type node. */\r\n  get typeNode(): CommonTypeNode {\r\n    return (<TypeDeclaration>this.declaration).type;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A namespace that differs from a file in being user-declared with a name. */\r\nexport class Namespace extends DeclaredElement {\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or another namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: NamespaceDeclaration\r\n  ) {\r\n    super(\r\n      ElementKind.NAMESPACE,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.lookupInSelf(name)\r\n        || this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends TypedElement {\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: EnumDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.ENUM,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.setType(Type.i32);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.lookupInSelf(name)\r\n        || this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** Indicates the kind of an inlined constant value. */\r\nexport const enum ConstantValueKind {\r\n  /** No constant value. */\r\n  NONE,\r\n  /** Constant integer value. */\r\n  INTEGER,\r\n  /** Constant float value. */\r\n  FLOAT\r\n}\r\n\r\n/** Base class of all variable-like program elements. */\r\nexport abstract class VariableLikeElement extends TypedElement {\r\n\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  /** Constructs a new variable-like element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or class. */\r\n    parent: Element,\r\n    /** Declaration reference. Creates a native declaration if omitted. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      kind,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.flags = declaration.flags;\r\n  }\r\n\r\n  /** Gets the associated type node.s */\r\n  get typeNode(): CommonTypeNode | null {\r\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\r\n  }\r\n\r\n  /** Gets the associated initializer node. */\r\n  get initializerNode(): Expression | null {\r\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\r\n  }\r\n\r\n  /** Applies a constant integer value to this element. */\r\n  setConstantIntegerValue(value: I64, type: Type): void {\r\n    assert(type.is(TypeFlags.INTEGER));\r\n    this.type = type;\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\r\n  }\r\n\r\n  /** Applies a constant float value to this element. */\r\n  setConstantFloatValue(value: f64, type: Type): void {\r\n    assert(type.is(TypeFlags.FLOAT));\r\n    this.type = type;\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\r\n  }\r\n\r\n  /** @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends VariableLikeElement {\r\n\r\n  /** Constructs a new enum value. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent enum. */\r\n    parent: Enum,\r\n    /** Declaration reference. */\r\n    declaration: EnumValueDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.ENUMVALUE,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.setType(Type.i32);\r\n  }\r\n\r\n  /** Whether this enum value is immutable. */\r\n  isImmutable: bool = false;\r\n\r\n  /** Gets the associated value node. */\r\n  get valueNode(): Expression | null {\r\n    return (<EnumValueDeclaration>this.declaration).value;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  /** Constructs a new global variable. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or static class. */\r\n    parent: Element,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags,\r\n    /** Declaration reference. Creates a native declaration if omitted. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      ElementKind.GLOBAL,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n  /** Constructs a new function parameter. */\r\n  constructor(\r\n    /** Parameter name. */\r\n    public name: string,\r\n    /** Parameter type. */\r\n    public type: Type,\r\n    /** Parameter initializer, if present. */\r\n    public initializer: Expression | null = null\r\n  ) {}\r\n}\r\n\r\n/** A local variable. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  /** Constructs a new local variable. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\r\n    public index: i32,\r\n    /** Resolved type. */\r\n    type: Type,\r\n    /** Parent function. */\r\n    parent: Function,\r\n    /** Declaration reference. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      ElementKind.LOCAL,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.index = index;\r\n    assert(type != Type.void);\r\n    this.setType(type);\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends DeclaredElement {\r\n\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n  /** Already resolved instances. */\r\n  instances: Map<string,Function> | null = null;\r\n\r\n  /** Clones of this prototype that are bounds to specific classes. */\r\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    /** Simple na,e */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or class (if a method). */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: FunctionDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<FunctionDeclaration>this.declaration).typeParameters;\r\n  }\r\n\r\n  /** Gets the associated signature node. */\r\n  get signatureNode(): SignatureNode {\r\n    return (<FunctionDeclaration>this.declaration).signature;\r\n  }\r\n\r\n  /** Gets the associated body node. */\r\n  get bodyNode(): Statement | null {\r\n    return (<FunctionDeclaration>this.declaration).body;\r\n  }\r\n\r\n  /** Gets the arrow function kind. */\r\n  get arrowKind(): ArrowKind {\r\n    return (<FunctionDeclaration>this.declaration).arrowKind;\r\n  }\r\n\r\n  /** Tests if this prototype is bound to a class. */\r\n  get isBound(): bool {\r\n    var parent = this.parent;\r\n    return parent.kind == ElementKind.CLASS\r\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\r\n  }\r\n\r\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\r\n  toBound(classInstance: Class): FunctionPrototype {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    assert(!this.isBound);\r\n    var boundPrototypes = this.boundPrototypes;\r\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\r\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\r\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\r\n    var bound = new FunctionPrototype(\r\n      this.name,\r\n      classInstance, // !\r\n      <MethodDeclaration>declaration,\r\n      this.decoratorFlags\r\n    );\r\n    bound.flags = this.flags;\r\n    bound.operatorKind = this.operatorKind;\r\n    // NOTE: this.instances holds instances per bound class / unbound\r\n    boundPrototypes.set(classInstance, bound);\r\n    return bound;\r\n  }\r\n\r\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\r\n  getResolvedInstance(instanceKey: string): Function | null {\r\n    var instances = this.instances;\r\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\r\n    return null;\r\n  }\r\n\r\n  /** Sets the resolved instance for the specified instance key. */\r\n  setResolvedInstance(instanceKey: string, instance: Function): void {\r\n    var instances = this.instances;\r\n    if (!instances) this.instances = instances = new Map();\r\n    else assert(!instances.has(instanceKey));\r\n    instances.set(instanceKey, instance);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends TypedElement {\r\n\r\n  /** Function prototype. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  localsByName: Map<string,Local> = new Map();\r\n  /** Array of locals by index. */\r\n  localsByIndex: Local[] = [];\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Default control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] = [];\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n\r\n  /** Counting id of inline operations involving this function. */\r\n  nextInlineId: i32 = 0;\r\n  /** Counting id of anonymous inner functions. */\r\n  nextAnonymousId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\r\n    nameInclTypeParameters: string,\r\n    /** Respective function prototype. */\r\n    prototype: FunctionPrototype,\r\n    /** Concrete signature. */\r\n    signature: Signature, // pre-resolved\r\n    /** Contextual type arguments inherited from its parent class, if any. */\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION,\r\n      nameInclTypeParameters,\r\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\r\n      prototype.program,\r\n      prototype.parent,\r\n      prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    this.type = Type.u32.asFunction(signature);\r\n    if (!prototype.is(CommonFlags.AMBIENT)) {\r\n      let localIndex = 0;\r\n      if (this.is(CommonFlags.INSTANCE)) {\r\n        let local = new Local(\r\n          CommonSymbols.this_,\r\n          localIndex++,\r\n          assert(signature.thisType),\r\n          this\r\n        );\r\n        this.localsByName.set(CommonSymbols.this_, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        let local = new Local(\r\n          parameterName,\r\n          localIndex++,\r\n          parameterType,\r\n          this\r\n        );\r\n        this.localsByName.set(parameterName, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var localName = name !== null\r\n      ? name\r\n      : \"var$\" + localIndex.toString();\r\n    var local = new Local(\r\n      localName,\r\n      localIndex,\r\n      type,\r\n      this,\r\n      declaration || this.program.makeNativeVariableDeclaration(localName)\r\n    );\r\n    if (name) {\r\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\r\n      this.localsByName.set(name, local);\r\n    }\r\n    this.localsByIndex[local.index] = local;\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    var locals = this.localsByName;\r\n    if (locals.has(name)) return locals.get(name);\r\n    return this.parent.lookup(name);\r\n  }\r\n\r\n  // used by flows to keep track of temporary locals\r\n  tempI32s: Local[] | null = null;\r\n  tempI64s: Local[] | null = null;\r\n  tempF32s: Local[] | null = null;\r\n  tempF64s: Local[] | null = null;\r\n  tempV128s: Local[] | null = null;\r\n\r\n  // used by flows to keep track of break labels\r\n  nextBreakId: i32 = 0;\r\n  breakStack: i32[] | null = null;\r\n  breakLabel: string | null = null;\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakLabel = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n        let debugLocation = debugLocations[i];\r\n        module.setDebugLocation(\r\n          ref,\r\n          debugLocation.debugInfoRef,\r\n          debugLocation.source.debugInfoIndex,\r\n          debugLocation.line,\r\n          debugLocation.column\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(\r\n    /** Concrete signature. */\r\n    signature: Signature,\r\n    /** Program reference. */\r\n    program: Program,\r\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION_TARGET,\r\n      __s = \"sig:\" + signature.toSignatureString(),\r\n      __s,\r\n      program,\r\n      program.nativeFile\r\n    );\r\n    this.signature = signature;\r\n    this.flags = CommonFlags.RESOLVED;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return null;\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends DeclaredElement {\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent class. */\r\n    parent: ClassPrototype,\r\n    /** Declaration reference. */\r\n    declaration: FieldDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.FIELD_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type node. */\r\n  get typeNode(): CommonTypeNode | null {\r\n    return (<FieldDeclaration>this.declaration).type;\r\n  }\r\n\r\n  /** Gets the associated initializer node. */\r\n  get initializerNode(): Expression | null {\r\n    return (<FieldDeclaration>this.declaration).initializer;\r\n  }\r\n\r\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\r\n  get parameterIndex(): i32 {\r\n    return (<FieldDeclaration>this.declaration).parameterIndex;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    /** Respective field prototype. */\r\n    prototype: FieldPrototype,\r\n    /** Parent class. */\r\n    parent: Class,\r\n    /** Concrete type. */\r\n    type: Type\r\n  ) {\r\n    super(\r\n      ElementKind.FIELD,\r\n      prototype.name,\r\n      parent,\r\n      <VariableLikeDeclarationStatement>prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    assert(type != Type.void);\r\n    this.setType(type);\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class PropertyPrototype extends DeclaredElement {\r\n\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent class. */\r\n    parent: ClassPrototype,\r\n    /** Declaration of the getter or setter introducing the property. */\r\n    firstDeclaration: FunctionDeclaration\r\n  ) {\r\n    super(\r\n      ElementKind.PROPERTY_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      firstDeclaration\r\n    );\r\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved property. */\r\nexport class Property extends VariableLikeElement {\r\n\r\n  /** Prototype reference. */\r\n  prototype: PropertyPrototype;\r\n  /** Getter instance. */\r\n  getterInstance: Function | null = null;\r\n  /** Setter instance. */\r\n  setterInstance: Function | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    /** Respective property prototype. */\r\n    prototype: PropertyPrototype,\r\n    /** Parent element, usually a static class prototype or class instance. */\r\n    parent: Element\r\n  ) {\r\n    super(\r\n      ElementKind.PROPERTY,\r\n      prototype.name,\r\n      parent,\r\n      prototype.program.makeNativeVariableDeclaration(\r\n        prototype.name,\r\n        prototype.is(CommonFlags.INSTANCE)\r\n          ? CommonFlags.INSTANCE\r\n          : CommonFlags.NONE\r\n      )\r\n    );\r\n    this.prototype = prototype;\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends DeclaredElement {\r\n\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n  /** Already resolved instances. */\r\n  instances: Map<string,Class> | null = null;\r\n\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: ClassDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\r\n    _isInterface: bool = false // FIXME\r\n  ) {\r\n    super(\r\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<ClassDeclaration>this.declaration).typeParameters;\r\n  }\r\n  /** Gets the associated extends node. */\r\n  get extendsNode(): TypeNode | null {\r\n    return (<ClassDeclaration>this.declaration).extendsType;\r\n  }\r\n  /** Gets the associated implements nodes. */\r\n  get implementsNodes(): TypeNode[] | null {\r\n    return (<ClassDeclaration>this.declaration).implementsTypes;\r\n  }\r\n\r\n  /** Tests if this prototype extends the specified. */\r\n  extends(basePtototype: ClassPrototype | null): bool {\r\n    var current: ClassPrototype | null = this;\r\n    do {\r\n      if (current === basePtototype) return true;\r\n    } while (current = current.basePrototype);\r\n    return false;\r\n  }\r\n\r\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\r\n  addInstance(name: string, element: DeclaredElement): bool {\r\n    var originalDeclaration = element.declaration;\r\n    var instanceMembers = this.instanceMembers;\r\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\r\n    else if (instanceMembers.has(name)) {\r\n      let merged = tryMerge(instanceMembers.get(name)!, element);\r\n      if (!merged) {\r\n        this.program.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          element.identifierNode.range, element.identifierNode.text\r\n        );\r\n        return false;\r\n      }\r\n      element = merged;\r\n    }\r\n    instanceMembers.set(name, element);\r\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\r\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\r\n    }\r\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\r\n    return true;\r\n  }\r\n\r\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\r\n  getResolvedInstance(instanceKey: string): Class | null {\r\n    var instances = this.instances;\r\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\r\n    return null;\r\n  }\r\n\r\n  /** Sets the resolved instance for the specified instance key. */\r\n  setResolvedInstance(instanceKey: string, instance: Class): void {\r\n    var instances = this.instances;\r\n    if (!instances) this.instances = instances = new Map();\r\n    else assert(!instances.has(instanceKey));\r\n    instances.set(instanceKey, instance);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends TypedElement {\r\n\r\n  /** Class prototype. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n  /** Function index of the GC hook. */\r\n  gcHookIndex: u32 = <u32>-1;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\r\n    nameInclTypeParameters: string,\r\n    /** The respective class prototype. */\r\n    prototype: ClassPrototype,\r\n    /** Concrete type arguments, if any. */\r\n    typeArguments: Type[] | null = null,\r\n    /** Base class, if derived. */\r\n    base: Class | null = null,\r\n    _isInterface: bool = false // FIXME\r\n  ) {\r\n    super(\r\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\r\n      nameInclTypeParameters,\r\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\r\n      prototype.program,\r\n      prototype.parent,\r\n      prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.setType(this.program.options.usizeType.asClass(this));\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        let contextualTypeArguments = this.contextualTypeArguments;\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\r\n          contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply pre-checked instance-specific contextual type arguments\r\n    var typeParameters = prototype.typeParameterNodes;\r\n    if (typeArguments) {\r\n      let numTypeArguments = typeArguments.length;\r\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      if (numTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let i = 0; i < numTypeArguments; ++i) {\r\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n        }\r\n      }\r\n    } else if (typeParameters && typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\r\n    if (unchecked) {\r\n      switch (kind) {\r\n        case OperatorKind.INDEXED_GET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        case OperatorKind.INDEXED_SET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n\r\n  /** Calculates the memory offset of the specified field. */\r\n  offsetof(fieldName: string): u32 {\r\n    var members = assert(this.members);\r\n    assert(members.has(fieldName));\r\n    var field = <Element>members.get(fieldName);\r\n    assert(field.kind == ElementKind.FIELD);\r\n    return (<Field>field).memoryOffset;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype { // FIXME\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    name: string,\r\n    parent: Element,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      decoratorFlags,\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class { // FIXME\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    nameInclTypeParameters: string,\r\n    prototype: InterfacePrototype,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(\r\n      nameInclTypeParameters,\r\n      prototype,\r\n      typeArguments,\r\n      base,\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\n/** Registers a concrete element with a program. */\r\nfunction registerConcreteElement(program: Program, element: Element): void {\r\n  assert(!program.instancesByName.has(element.internalName));\r\n  program.instancesByName.set(element.internalName, element);\r\n}\r\n\r\n/** Attempts to merge two elements. Returns the merged element on success. */\r\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\r\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\r\n  // suggesting to just merge what seems to be possible for now and revisit later.\r\n  assert(older.program === newer.program);\r\n  assert(!newer.members);\r\n  var merged: DeclaredElement | null = null;\r\n  switch (older.kind) {\r\n    case ElementKind.FUNCTION_PROTOTYPE: {\r\n      switch (newer.kind) {\r\n        case ElementKind.NAMESPACE: {\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n          break;\r\n        }\r\n        case ElementKind.TYPEDEFINITION: {\r\n          if (!older.shadowType) {\r\n            older.shadowType = <TypeDefinition>newer;\r\n            copyMembers(newer, older);\r\n            merged = <DeclaredElement>older;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.CLASS_PROTOTYPE:\r\n    case ElementKind.ENUM: {\r\n      if (newer.kind == ElementKind.NAMESPACE) {\r\n        copyMembers(newer, older);\r\n        merged = <DeclaredElement>older;\r\n        break;\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.NAMESPACE: {\r\n      switch (newer.kind) {\r\n        case ElementKind.ENUM:\r\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\r\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\r\n          copyMembers(older, newer);\r\n          merged = <DeclaredElement>newer;\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n          break;\r\n        }\r\n        case ElementKind.TYPEDEFINITION: {\r\n          if (!older.shadowType) {\r\n            older.shadowType = <TypeDefinition>newer;\r\n            copyMembers(newer, older);\r\n            merged = <DeclaredElement>older;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.GLOBAL: {\r\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\r\n        if (!older.shadowType) {\r\n          older.shadowType = <TypeDefinition>newer;\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.TYPEDEFINITION: {\r\n      switch (newer.kind) {\r\n        case ElementKind.GLOBAL:\r\n        case ElementKind.FUNCTION_PROTOTYPE:\r\n        case ElementKind.NAMESPACE: {\r\n          if (!newer.shadowType) {\r\n            newer.shadowType = <TypeDefinition>older;\r\n            copyMembers(older, newer);\r\n            merged = <DeclaredElement>newer;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  if (merged) {\r\n    if (older.is(CommonFlags.EXPORT) != newer.is(CommonFlags.EXPORT)) {\r\n      older.program.error(\r\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n        merged.identifierNode.range, merged.identifierNode.text\r\n      );\r\n    }\r\n  }\r\n  return merged;\r\n}\r\n\r\n/** Copies the members of `src` to `dest`. */\r\nfunction copyMembers(src: Element, dest: Element): void {\r\n  var srcMembers = src.members;\r\n  if (srcMembers) {\r\n    let destMembers = dest.members;\r\n    if (!destMembers) dest.members = destMembers = new Map();\r\n    for (let [memberName, member] of srcMembers) {\r\n      destMembers.set(memberName, member);\r\n    }\r\n  }\r\n}\r\n\r\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\r\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\r\n  switch (parent.kind) {\r\n    case ElementKind.FILE: {\r\n      if (asGlobal) return name;\r\n      return parent.internalName + PATH_DELIMITER + name;\r\n    }\r\n    case ElementKind.FUNCTION: {\r\n      if (asGlobal) return name;\r\n      assert(!isInstance);\r\n      return parent.internalName + INNER_DELIMITER + name;\r\n    }\r\n    default: {\r\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\r\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type RelooperRef = usize;\r\nexport type RelooperBlockRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32  = _BinaryenTypeInt32(),\r\n  I64  = _BinaryenTypeInt64(),\r\n  F32  = _BinaryenTypeFloat32(),\r\n  F64  = _BinaryenTypeFloat64(),\r\n  V128 = _BinaryenTypeVec128(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId(),\r\n  SIMDExtract = _BinaryenSIMDExtractId(),\r\n  SIMDReplace = _BinaryenSIMDReplaceId(),\r\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\r\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\r\n  SIMDShift = _BinaryenSIMDShiftId(),\r\n  MemoryInit = _BinaryenMemoryInitId(),\r\n  DataDrop = _BinaryenDataDropId(),\r\n  MemoryCopy = _BinaryenMemoryCopyId(),\r\n  MemoryFill = _BinaryenMemoryFillId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/sign-extension-ops\r\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\r\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\r\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\r\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\r\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n\r\n  // see: https://github.com/WebAssembly/simd\r\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\r\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\r\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\r\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\r\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\r\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\r\n  NotVec128 = _BinaryenNotVec128(),\r\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\r\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\r\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\r\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\r\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\r\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\r\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\r\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\r\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\r\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\r\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\r\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\r\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\r\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\r\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\r\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\r\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\r\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\r\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\r\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\r\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\r\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\r\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\r\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\r\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\r\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2()\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64(),\r\n\r\n  // see: https://github.com/WebAssembly/simd\r\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\r\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\r\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\r\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\r\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\r\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\r\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\r\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\r\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\r\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\r\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\r\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\r\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\r\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\r\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\r\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\r\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\r\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\r\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\r\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\r\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\r\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\r\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\r\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\r\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\r\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\r\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\r\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\r\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\r\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\r\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\r\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\r\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\r\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\r\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\r\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\r\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\r\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\r\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\r\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\r\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\r\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\r\n  AndVec128 = _BinaryenAndVec128(),\r\n  OrVec128 = _BinaryenOrVec128(),\r\n  XorVec128 = _BinaryenXorVec128(),\r\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\r\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\r\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\r\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\r\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\r\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\r\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\r\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\r\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\r\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\r\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\r\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\r\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\r\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\r\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\r\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\r\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\r\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\r\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\r\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\r\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\r\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\r\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\r\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\r\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\r\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\r\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\r\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\r\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\r\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\r\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\r\n}\r\n\r\nexport enum HostOp {\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport enum SIMDExtractOp {\r\n  ExtractLaneSVecI8x16 = _BinaryenExtractLaneSVecI8x16(),\r\n  ExtractLaneUVecI8x16 = _BinaryenExtractLaneUVecI8x16(),\r\n  ExtractLaneSVecI16x8 = _BinaryenExtractLaneSVecI16x8(),\r\n  ExtractLaneUVecI16x8 = _BinaryenExtractLaneUVecI16x8(),\r\n  ExtractLaneVecI32x4 = _BinaryenExtractLaneVecI32x4(),\r\n  ExtractLaneVecI64x2 = _BinaryenExtractLaneVecI64x2(),\r\n  ExtractLaneVecF32x4 = _BinaryenExtractLaneVecF32x4(),\r\n  ExtractLaneVecF64x2 = _BinaryenExtractLaneVecF64x2(),\r\n}\r\n\r\nexport enum SIMDReplaceOp {\r\n  ReplaceLaneVecI8x16 = _BinaryenReplaceLaneVecI8x16(),\r\n  ReplaceLaneVecI16x8 = _BinaryenReplaceLaneVecI16x8(),\r\n  ReplaceLaneVecI32x4 = _BinaryenReplaceLaneVecI32x4(),\r\n  ReplaceLaneVecI64x2 = _BinaryenReplaceLaneVecI64x2(),\r\n  ReplaceLaneVecF32x4 = _BinaryenReplaceLaneVecF32x4(),\r\n  ReplaceLaneVecF64x2 = _BinaryenReplaceLaneVecF64x2()\r\n}\r\n\r\nexport enum SIMDShiftOp {\r\n  ShlVecI8x16 = _BinaryenShlVecI8x16(),\r\n  ShrSVecI8x16 = _BinaryenShrSVecI8x16(),\r\n  ShrUVecI8x16 = _BinaryenShrUVecI8x16(),\r\n  ShlVecI16x8 = _BinaryenShlVecI16x8(),\r\n  ShrSVecI16x8 = _BinaryenShrSVecI16x8(),\r\n  ShrUVecI16x8 = _BinaryenShrUVecI16x8(),\r\n  ShlVecI32x4 = _BinaryenShlVecI32x4(),\r\n  ShrSVecI32x4 = _BinaryenShrSVecI32x4(),\r\n  ShrUVecI32x4 = _BinaryenShrUVecI32x4(),\r\n  ShlVecI64x2 = _BinaryenShlVecI64x2(),\r\n  ShrSVecI64x2 = _BinaryenShrSVecI64x2(),\r\n  ShrUVecI64x2 = _BinaryenShrUVecI64x2()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n\r\n  private lit: usize;\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n      return module;\r\n    } finally {\r\n      memory.free(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunctionType(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunctionType(this.ref, cStr);\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createV128(bytes: Uint8Array): ExpressionRef {\r\n    assert(bytes.length == 16);\r\n    var out = this.lit;\r\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\r\n    _BinaryenLiteralVec128(out, out);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenGetGlobal(this.ref, cStr, type);\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0,\r\n    align: Index = bytes // naturally aligned by default\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0,\r\n    align: Index = bytes // naturally aligned by default\r\n  ): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(\r\n    ptr: ExpressionRef,\r\n    wakeCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenSetGlobal(this.ref, cStr, value);\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    var cArr = allocPtrArray(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenBreak(this.ref, cStr, condition, value);\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenLoop(this.ref, cStr, body);\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = this.allocStringCached(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = this.allocStringCached(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(typeName);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // bulk memory\r\n\r\n  createMemoryCopy(\r\n    dest: ExpressionRef,\r\n    source: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\r\n  }\r\n\r\n  createMemoryFill(\r\n    dest: ExpressionRef,\r\n    value: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\r\n  }\r\n\r\n  // simd\r\n\r\n  createSIMDExtract(\r\n    op: SIMDExtractOp,\r\n    vec: ExpressionRef,\r\n    idx: u8\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\r\n  }\r\n\r\n  createSIMDReplace(\r\n    op: SIMDReplaceOp,\r\n    vec: ExpressionRef,\r\n    idx: u8,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\r\n  }\r\n\r\n  createSIMDShuffle(\r\n    vec1: ExpressionRef,\r\n    vec2: ExpressionRef,\r\n    mask: Uint8Array\r\n  ): ExpressionRef {\r\n    assert(mask.length == 16);\r\n    var cArr = allocU8Array(mask);\r\n    try {\r\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createSIMDBitselect(\r\n    vec1: ExpressionRef,\r\n    vec2: ExpressionRef,\r\n    cond: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDBitselect(this.ref, vec1, vec2, cond);\r\n  }\r\n\r\n  createSIMDShift(\r\n    op: SIMDShiftOp,\r\n    vec: ExpressionRef,\r\n    shift: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n  }\r\n\r\n  removeGlobal(\r\n    name: string\r\n  ): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveGlobal(this.ref, cStr);\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunction(this.ref, cStr);\r\n  }\r\n\r\n  private hasTemporaryFunction: bool = false;\r\n\r\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\r\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\r\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeTemporaryFunction(): void {\r\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    _BinaryenRemoveFunction(this.ref, tempName);\r\n    _BinaryenRemoveFunctionType(this.ref, tempName);\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = this.allocStringCached(externalName);\r\n    _BinaryenRemoveExport(this.ref, cStr);\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    shared: bool = false,\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n  }\r\n\r\n  /** Unlimited memory constant. */\r\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null,\r\n    shared: bool = false\r\n  ): void {\r\n    var cStr = this.allocStringCached(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k, shared);\r\n    } finally {\r\n      memory.free(cArr3);\r\n      memory.free(cArr2);\r\n      memory.free(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(\r\n    initial: Index,\r\n    maximum: Index,\r\n    funcs: string[]\r\n  ): void {\r\n    var numNames = funcs.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = this.allocStringCached(funcs[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  getOptimizeLevel(): i32 {\r\n    return _BinaryenGetOptimizeLevel();\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  getShrinkLevel(): i32 {\r\n    return _BinaryenGetShrinkLevel();\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      memory.free(cArr);\r\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\r\n    }\r\n  }\r\n\r\n  private cachedPrecomputeNames: usize = 0;\r\n\r\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\r\n    // remember the previous optimize levels and set to max instead, to be sure\r\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\r\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\r\n    var previousDebugInfo = _BinaryenGetDebugInfo();\r\n    _BinaryenSetOptimizeLevel(4);\r\n    _BinaryenSetShrinkLevel(0);\r\n    _BinaryenSetDebugInfo(false);\r\n\r\n    // wrap the expression in a temp. function and run the precompute pass on it\r\n    var type = _BinaryenExpressionGetType(expr);\r\n    var func = this.addTemporaryFunction(type, null, expr);\r\n    var names = this.cachedPrecomputeNames;\r\n    if (!names) {\r\n      this.cachedPrecomputeNames = names = allocI32Array([ this.allocStringCached(\"precompute\") ]);\r\n    }\r\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\r\n    expr = _BinaryenFunctionGetBody(func);\r\n    this.removeTemporaryFunction();\r\n\r\n    // reset optimize levels to previous\r\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\r\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\r\n    _BinaryenSetDebugInfo(previousDebugInfo);\r\n    return expr;\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.lit; // safe to reuse as long as..\r\n    assert(_BinaryenSizeofLiteral() >= 12);\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) memory.free(cStr);\r\n      if (binaryPtr) memory.free(binaryPtr);\r\n      if (sourceMapPtr) memory.free(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  private cachedStrings: Map<string,usize> = new Map();\r\n\r\n  private allocStringCached(str: string | null): usize {\r\n    if (str == null) return 0;\r\n    var cachedStrings = this.cachedStrings;\r\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\r\n    var ptr = allocString(str);\r\n    cachedStrings.set(str, ptr);\r\n    return ptr;\r\n  }\r\n\r\n  dispose(): void {\r\n    assert(this.ref);\r\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\r\n    this.cachedStrings = new Map();\r\n    memory.free(this.lit);\r\n    memory.free(this.cachedPrecomputeNames);\r\n    this.cachedPrecomputeNames = 0;\r\n    _BinaryenModuleDispose(this.ref);\r\n    this.ref = 0;\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(\r\n    expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n        switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          case NativeType.V128: {\r\n            // TODO\r\n            return 0;\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        return _BinaryenGetLocal(this.ref,\r\n          _BinaryenGetLocalGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GetGlobal: {\r\n        let globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return (\r\n          _BinaryenLoadIsAtomic(expr)\r\n            ? _BinaryenAtomicLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n            : _BinaryenLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenLoadGetAlign(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n        );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\n// expressions\r\n\r\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\r\n  return _BinaryenExpressionGetId(expr);\r\n}\r\n\r\nexport function getExpressionType(expr: ExpressionRef): NativeType {\r\n  return _BinaryenExpressionGetType(expr);\r\n}\r\n\r\nexport function getConstValueI32(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI32(expr);\r\n}\r\n\r\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64Low(expr);\r\n}\r\n\r\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64High(expr);\r\n}\r\n\r\nexport function getConstValueF32(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF32(expr);\r\n}\r\n\r\nexport function getConstValueF64(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF64(expr);\r\n}\r\n\r\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenGetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenSetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSetLocalGetValue(expr);\r\n}\r\n\r\nexport function isTeeLocal(expr: ExpressionRef): bool {\r\n  return _BinaryenSetLocalIsTee(expr);\r\n}\r\n\r\nexport function getGetGlobalName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenGetGlobalGetName(expr));\r\n}\r\n\r\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\r\n  return _BinaryenBinaryGetOp(expr);\r\n}\r\n\r\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetLeft(expr);\r\n}\r\n\r\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetRight(expr);\r\n}\r\n\r\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\r\n  return _BinaryenUnaryGetOp(expr);\r\n}\r\n\r\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenUnaryGetValue(expr);\r\n}\r\n\r\nexport function getLoadBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetBytes(expr);\r\n}\r\n\r\nexport function getLoadOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetOffset(expr);\r\n}\r\n\r\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoadGetPtr(expr);\r\n}\r\n\r\nexport function isLoadSigned(expr: ExpressionRef): bool {\r\n  return _BinaryenLoadIsSigned(expr);\r\n}\r\n\r\nexport function getStoreBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetBytes(expr);\r\n}\r\n\r\nexport function getStoreOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetOffset(expr);\r\n}\r\n\r\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetPtr(expr);\r\n}\r\n\r\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetValue(expr);\r\n}\r\n\r\nexport function getBlockName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBlockGetName(expr));\r\n}\r\n\r\nexport function getBlockChildCount(expr: ExpressionRef): Index {\r\n  return _BinaryenBlockGetNumChildren(expr);\r\n}\r\n\r\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenBlockGetChild(expr, index);\r\n}\r\n\r\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetCondition(expr);\r\n}\r\n\r\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfTrue(expr);\r\n}\r\n\r\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfFalse(expr);\r\n}\r\n\r\nexport function getLoopName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenLoopGetName(expr));\r\n}\r\n\r\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoopGetBody(expr);\r\n}\r\n\r\nexport function getBreakName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBreakGetName(expr));\r\n}\r\n\r\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBreakGetCondition(expr);\r\n}\r\n\r\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfTrue(expr);\r\n}\r\n\r\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfFalse(expr);\r\n}\r\n\r\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetCondition(expr);\r\n}\r\n\r\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenDropGetValue(expr);\r\n}\r\n\r\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenReturnGetValue(expr);\r\n}\r\n\r\nexport function getCallTarget(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenCallGetTarget(expr));\r\n}\r\n\r\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenHostGetOp(expr);\r\n}\r\n\r\nexport function getHostOperandCount(expr: ExpressionRef): Index {\r\n  return _BinaryenHostGetNumOperands(expr);\r\n}\r\n\r\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenHostGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenHostGetNameOperand(expr));\r\n}\r\n\r\n// functions\r\n\r\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\r\n  return _BinaryenFunctionGetBody(func);\r\n}\r\n\r\nexport function getFunctionName(func: FunctionRef): string | null {\r\n  return readString(_BinaryenFunctionGetName(func));\r\n}\r\n\r\nexport function getFunctionParamCount(func: FunctionRef): Index {\r\n  return _BinaryenFunctionGetNumParams(func);\r\n}\r\n\r\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\r\n  return _BinaryenFunctionGetParam(func, index);\r\n}\r\n\r\nexport function getFunctionResultType(func: FunctionRef): NativeType {\r\n  return _BinaryenFunctionGetResult(func);\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate(module.ref);\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    condition: ExpressionRef = 0,\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    indexes: i32[],\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\r\n//     case ExpressionId.GetLocal:\r\n//     case ExpressionId.GetGlobal:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop:\r\n//     case ExpressionId.Unreachable: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = memory.allocate(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = memory.allocate(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocPtrArray(ptrs: usize[] | null): usize {\r\n  return allocI32Array(ptrs); // TODO: WASM64 one day\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n\r\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\r\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\r\n  // not applicable if pushing a value to the stack\r\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\r\n\r\n  switch (_BinaryenExpressionGetId(expr)) {\r\n    case ExpressionId.Unreachable:\r\n    case ExpressionId.Return: return false;\r\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\r\n    case ExpressionId.Block: {\r\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\r\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\r\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  CommonSymbols,\r\n  PATH_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath,\r\n  CharCode\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPENAME,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  CLASS,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  INSTANCEOF,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INDEXSIGNATUREDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Checks if a node represents a constant value. */\r\nexport function nodeIsConstantValue(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.LITERAL:\r\n    case NodeKind.NULL:\r\n    case NodeKind.TRUE:\r\n    case NodeKind.FALSE: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable. */\r\nexport function nodeIsCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.ASSERTION: // if kind=NONNULL\r\n    case NodeKind.CALL:\r\n    case NodeKind.ELEMENTACCESS:\r\n    case NodeKind.PARENTHESIZED:\r\n    case NodeKind.PROPERTYACCESS:\r\n    case NodeKind.SUPER: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable with generic arguments. */\r\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.PROPERTYACCESS: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n\r\n  // types\r\n\r\n  static createTypeName(\r\n    name: IdentifierExpression,\r\n    range: Range\r\n  ): TypeName {\r\n    var typeName = new TypeName();\r\n    typeName.range = range;\r\n    typeName.identifier = name;\r\n    typeName.next = null;\r\n    return typeName;\r\n  }\r\n\r\n  static createSimpleTypeName(\r\n    name: string,\r\n    range: Range\r\n  ): TypeName {\r\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\r\n  }\r\n\r\n  static createType(\r\n    name: TypeName,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name;\r\n    type.typeArguments = typeArguments;\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createSimpleTypeName(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    defaultType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name;\r\n    elem.extendsType = extendsType;\r\n    elem.defaultType = defaultType;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name;\r\n    elem.type = type;\r\n    elem.initializer = initializer;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameters = parameters;\r\n    sig.returnType = returnType;\r\n    sig.explicitThisType = explicitThisType;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    name: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = name;\r\n    stmt.arguments = args;\r\n    stmt.decoratorKind = decoratorNameToKind(name);\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range,\r\n    isQuoted: bool = false\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name; // TODO: extract from range\r\n    expr.symbol = name; // TODO: Symbol.for(name)\r\n    expr.isQuoted = isQuoted;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements;\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode | null,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression;\r\n    expr.toType = toType;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left;\r\n    expr.right = right;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.typeArguments = typeArgs;\r\n    expr.arguments = args;\r\n    return expr;\r\n  }\r\n\r\n  static createClassExpression(\r\n    declaration: ClassDeclaration\r\n  ): ClassExpression {\r\n    var expr = new ClassExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions;\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.elementExpression = element;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createInstanceOfExpression(\r\n    expression: Expression,\r\n    isType: CommonTypeNode,\r\n    range: Range\r\n  ): InstanceOfExpression {\r\n    var expr = new InstanceOfExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.isType = isType;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.typeArguments = typeArgs;\r\n    expr.arguments = args;\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createObjectLiteralExpression(\r\n    names: IdentifierExpression[],\r\n    values: Expression[],\r\n    range: Range\r\n  ): ObjectLiteralExpression {\r\n    var expr = new ObjectLiteralExpression();\r\n    expr.range = range;\r\n    expr.names = names;\r\n    expr.values = values;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.property = property;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition;\r\n    expr.ifThen = ifThen;\r\n    expr.ifElse = ifElse;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements;\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.extendsType = extendsType;\r\n    stmt.implementsTypes = implementsTypes;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement;\r\n    stmt.condition = condition;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.values = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[] | null,\r\n    path: StringLiteralExpression | null,\r\n    isDeclare: bool,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.members = members;\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    stmt.isDeclare = isDeclare;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name;\r\n    stmt.externalName = externalName;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.localName = name;\r\n    if (!externalName) externalName = name;\r\n    elem.exportedName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.ifTrue = ifTrue;\r\n    stmt.ifFalse = ifFalse;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls;\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    foreignName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.foreignName = foreignName;\r\n    if (!name) name = foreignName;\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.extendsType = extendsType;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.type = type;\r\n    stmt.initializer = initializer;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer;\r\n    stmt.condition = condition;\r\n    stmt.incrementor = incrementor;\r\n    stmt.statement = statement;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    arrowKind: ArrowKind,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.signature = signature;\r\n    stmt.body = body;\r\n    stmt.decorators = decorators;\r\n    stmt.arrowKind = arrowKind;\r\n    return stmt;\r\n  }\r\n\r\n  static createIndexSignatureDeclaration(\r\n    keyType: TypeNode,\r\n    valueType: CommonTypeNode,\r\n    range: Range\r\n  ): IndexSignatureDeclaration {\r\n    var elem = new IndexSignatureDeclaration();\r\n    elem.range = range;\r\n    elem.keyType = keyType;\r\n    elem.valueType = valueType;\r\n    return elem;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.signature = signature;\r\n    stmt.body = body;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.cases = cases;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label;\r\n    elem.statements = statements;\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements;\r\n    stmt.catchVariable = catchVariable;\r\n    stmt.catchStatements = catchStatements;\r\n    stmt.finallyStatements = finallyStatements;\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.type = alias;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = declarations;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name;\r\n    elem.type = type;\r\n    elem.initializer = initializer;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.statement = statement;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type name. */\r\nexport class TypeName extends Node {\r\n  kind = NodeKind.TYPENAME;\r\n\r\n  /** Identifier of this part. */\r\n  identifier: IdentifierExpression;\r\n  /** Next part of the type name or `null` if this is the last part. */\r\n  next: TypeName | null;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Type name. */\r\n  name: TypeName;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Default type if omitted, if any. */\r\n  defaultType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameters: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  OPERATOR_BINARY,\r\n  OPERATOR_PREFIX,\r\n  OPERATOR_POSTFIX,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE,\r\n  EXTERNAL,\r\n  BUILTIN,\r\n  LAZY,\r\n  START\r\n}\r\n\r\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\r\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\r\n  // @global, @inline, @operator, @sealed, @unmanaged\r\n  if (name.kind == NodeKind.IDENTIFIER) {\r\n    let nameStr = (<IdentifierExpression>name).text;\r\n    assert(nameStr.length);\r\n    switch (nameStr.charCodeAt(0)) {\r\n      case CharCode.b: {\r\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\r\n        break;\r\n      }\r\n      case CharCode.e: {\r\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\r\n        break;\r\n      }\r\n      case CharCode.g: {\r\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\r\n        break;\r\n      }\r\n      case CharCode.i: {\r\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\r\n        break;\r\n      }\r\n      case CharCode.l: {\r\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\r\n        break;\r\n      }\r\n      case CharCode.o: {\r\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\r\n        break;\r\n      }\r\n      case CharCode.s: {\r\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\r\n        if (nameStr == \"start\") return DecoratorKind.START;\r\n        break;\r\n      }\r\n      case CharCode.u: {\r\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\r\n        break;\r\n      }\r\n    }\r\n  } else if (\r\n    name.kind == NodeKind.PROPERTYACCESS &&\r\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\r\n  ) {\r\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\r\n    assert(nameStr.length);\r\n    let propStr = (<PropertyAccessExpression>name).property.text;\r\n    assert(propStr.length);\r\n    // @operator.binary, @operator.prefix, @operator.postfix\r\n    if (nameStr == \"operator\") {\r\n      switch (propStr.charCodeAt(0)) {\r\n        case CharCode.b: {\r\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\r\n          break;\r\n        }\r\n        case CharCode.p: {\r\n          switch (propStr) {\r\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\r\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return DecoratorKind.CUSTOM;\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n  /** Symbol. */\r\n  symbol: string; // TODO: symbol\r\n  /** Whether quoted or not. */\r\n  isQuoted: bool;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS,\r\n  NONNULL\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode | null;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n\r\n  /** Gets the type arguments range for reporting. */\r\n  get typeArgumentsRange(): Range {\r\n    var typeArguments = this.typeArguments;\r\n    var numTypeArguments: i32;\r\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\r\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\r\n    }\r\n    return this.expression.range;\r\n  }\r\n\r\n  /** Gets the arguments range for reporting. */\r\n  get argumentsRange(): Range {\r\n    var args = this.arguments;\r\n    var numArguments = args.length;\r\n    if (numArguments) {\r\n      return Range.join(args[0].range, args[numArguments - 1].range);\r\n    }\r\n    return this.expression.range;\r\n  }\r\n}\r\n\r\n/** Represents a class expression using the 'class' keyword. */\r\nexport class ClassExpression extends Expression {\r\n  kind = NodeKind.CLASS;\r\n\r\n  /** Inline class declaration. */\r\n  declaration: ClassDeclaration;\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n  symbol = CommonSymbols.constructor;\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an `instanceof` expression. */\r\nexport class InstanceOfExpression extends Expression {\r\n  kind = NodeKind.INSTANCEOF;\r\n\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Type to test for. */\r\n  isType: CommonTypeNode;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n  symbol = CommonSymbols.null_;\r\n}\r\n\r\n/** Represents an object literal expression. */\r\nexport class ObjectLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.OBJECT;\r\n\r\n  /** Field names. */\r\n  names: IdentifierExpression[];\r\n  /** Field values. */\r\n  values: Expression[];\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n  symbol = CommonSymbols.super_;\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n  symbol = CommonSymbols.this_;\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n  symbol = CommonSymbols.true_;\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n  symbol = CommonSymbols.false_;\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Simple path (last part without extension). */\r\n  simplePath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n  /** Re-exported sources. */\r\n  exportPaths: Set<string> | null = null;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    var internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.internalPath = internalPath;\r\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\r\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** Represents an index signature declaration. */\r\nexport class IndexSignatureDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\r\n\r\n  /** Key type. */\r\n  keyType: TypeNode;\r\n  /** Value type. */\r\n  valueType: CommonTypeNode;\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Base class type being extended, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: TypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Local identifier. */\r\n  localName: IdentifierExpression;\r\n  /** Exported identifier. */\r\n  exportedName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members if a set of named exports, or `null` if a file export. */\r\n  members: ExportMember[] | null;\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n  /** Whether this is a declared export. */\r\n  isDeclare: bool;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Indicates the kind of an array function. */\r\nexport const enum ArrowKind {\r\n  /** Not an arrow function. */\r\n  NONE,\r\n  /** Parenthesized parameter list. */\r\n  ARROW_PARENTHESIZED,\r\n  /** Single parameter without parenthesis. */\r\n  ARROW_SINGLE\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n  /** Arrow function kind, if applicable. */\r\n  arrowKind: ArrowKind;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n\r\n  /** Clones this function declaration. */\r\n  clone(): FunctionDeclaration {\r\n    return Node.createFunctionDeclaration(\r\n      this.name,\r\n      this.typeParameters,\r\n      this.signature,\r\n      this.body,\r\n      this.decorators,\r\n      this.flags,\r\n      this.arrowKind,\r\n      this.range\r\n    );\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  foreignName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Finds the first decorator matching the specified kind. */\r\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      if (decorator.decoratorKind == kind) return decorator;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n/** Tests if the specified type node represents an omitted type. */\r\nexport function isTypeOmitted(type: CommonTypeNode): bool {\r\n  if (type.kind == NodeKind.TYPE) {\r\n    let name = (<TypeNode>type).name;\r\n    return !(name.next || name.identifier.text.length);\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget,\r\n  Program,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // vectors\r\n\r\n  /** A 128-bit vector. */\r\n  V128,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9,\r\n  /** Is a vector type. */\r\n  VECTOR = 1 << 10\r\n}\r\n\r\nconst v128_zero = new Uint8Array(16);\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Returns the closest int type representing this type. */\r\n  get intType(): Type {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return Type.i8;\r\n      case TypeKind.I16: return Type.i16;\r\n      case TypeKind.F32:\r\n      case TypeKind.I32: return Type.i32;\r\n      case TypeKind.F64:\r\n      case TypeKind.I64: return Type.i64;\r\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\r\n      case TypeKind.U8: return Type.u8;\r\n      case TypeKind.U16: return Type.u16;\r\n      case TypeKind.U32: return Type.u32;\r\n      case TypeKind.U64: return Type.u64;\r\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\r\n      case TypeKind.BOOL:\r\n      default: return Type.i32;\r\n    }\r\n  }\r\n\r\n  /** Tests if this is a managed type that needs GC hooks. */\r\n  isManaged(program: Program): bool {\r\n    if (program.hasGC) {\r\n      let classReference = this.classReference;\r\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\r\n    return ~0 >>> (targetType.size - size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.nonNullableType = this;\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\r\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\r\n          if (currentClass = this.classReference) {\r\n            if (targetClass = target.classReference) {\r\n              return currentClass.isAssignableTo(targetClass);\r\n            }\r\n          } else if (currentFunction = this.signatureReference) {\r\n            if (targetFunction = target.signatureReference) {\r\n              return currentFunction.isAssignableTo(targetFunction);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (\r\n            !signednessIsRelevant ||\r\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\r\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n          ) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      } else if (this.is(TypeFlags.VECTOR)) {\r\n        if (target.is(TypeFlags.VECTOR)) {\r\n          return this.size == target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\r\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\r\n    else if (target.is(TypeFlags.REFERENCE)) return false;\r\n    if (this.is(TypeFlags.INTEGER)) {\r\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\r\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n      );\r\n    }\r\n    return this.kind == target.kind;\r\n  }\r\n\r\n  /** Determines the common denominator type of two types, if there is any. */\r\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to a string. */\r\n  toString(): string {\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      let classReference = this.classReference;\r\n      if (classReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? classReference.internalName + \" | null\"\r\n          : classReference.internalName;\r\n      }\r\n      let signatureReference = this.signatureReference;\r\n      if (signatureReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? \"(\" + signatureReference.toString() + \") | null\"\r\n          : signatureReference.toString();\r\n      }\r\n      assert(false);\r\n    }\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: return \"usize\";\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      default: assert(false);\r\n      case TypeKind.VOID: return \"void\";\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.V128: return NativeType.V128;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n      case TypeKind.V128: return module.createV128(v128_zero);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      // same naming scheme as Binaryen\r\n      case TypeKind.I8:\r\n      case TypeKind.U8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U16:\r\n      case TypeKind.I32:\r\n      case TypeKind.U32:\r\n      case TypeKind.BOOL: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"j\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"d\";\r\n      case TypeKind.V128: return \"V\";\r\n      case TypeKind.VOID: return \"v\";\r\n      default: assert(false);\r\n    }\r\n    return \"i\";\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 128-bit vector. */\r\n  static readonly v128: Type = new Type(TypeKind.V128,\r\n    TypeFlags.VECTOR   |\r\n    TypeFlags.VALUE, 128\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  asFunctionTarget(program: Program): FunctionTarget {\r\n    var target = this.cachedFunctionTarget;\r\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\r\n    else assert(target.program == program);\r\n    return target;\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getDefaultParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    sb.push(returnType.toSignatureString());\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    return \"FUNCSIG$\" + sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      sb.push(\"this: \");\r\n      assert(!thisType.signatureReference);\r\n      sb.push(thisType.toString());\r\n      index = 1;\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getDefaultParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached default parameter names used where names are unknown.\r\nvar cachedDefaultParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached default parameter name for the specified index. */\r\nexport function getDefaultParameterName(index: i32): string {\r\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\r\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\r\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedDefaultParameterNames[index - 1];\r\n}\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport enum IdentifierHandling {\r\n  DEFAULT,\r\n  PREFER,\r\n  ALWAYS\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  assert(text.length);\r\n  switch (text.charCodeAt(0)) {\r\n    case CharCode.a: {\r\n      switch (text) {\r\n        case \"abstract\": return Token.ABSTRACT;\r\n        case \"as\": return Token.AS;\r\n        case \"async\": return Token.ASYNC;\r\n        case \"await\": return Token.AWAIT;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.b: {\r\n      switch (text) {\r\n        case \"break\": return Token.BREAK;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.c: {\r\n      switch (text) {\r\n        case \"case\": return Token.CASE;\r\n        case \"catch\": return Token.CATCH;\r\n        case \"class\": return Token.CLASS;\r\n        case \"continue\": return Token.CONTINUE;\r\n        case \"const\": return Token.CONST;\r\n        case \"constructor\": return Token.CONSTRUCTOR;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.d: {\r\n      switch (text) {\r\n        case \"debugger\": return Token.DEBUGGER;\r\n        case \"declare\": return Token.DECLARE;\r\n        case \"default\": return Token.DEFAULT;\r\n        case \"delete\": return Token.DELETE;\r\n        case \"do\": return Token.DO;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.e: {\r\n      switch (text) {\r\n        case \"else\": return Token.ELSE;\r\n        case \"enum\": return Token.ENUM;\r\n        case \"export\": return Token.EXPORT;\r\n        case \"extends\": return Token.EXTENDS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.f: {\r\n      switch (text) {\r\n        case \"false\": return Token.FALSE;\r\n        case \"finally\": return Token.FINALLY;\r\n        case \"for\": return Token.FOR;\r\n        case \"from\": return Token.FROM;\r\n        case \"function\": return Token.FUNCTION;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.g: {\r\n      switch (text) {\r\n        case \"get\": return Token.GET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.i: {\r\n      switch (text) {\r\n        case \"if\": return Token.IF;\r\n        case \"implements\": return Token.IMPLEMENTS;\r\n        case \"import\": return Token.IMPORT;\r\n        case \"in\": return Token.IN;\r\n        case \"instanceof\": return Token.INSTANCEOF;\r\n        case \"interface\": return Token.INTERFACE;\r\n        case \"is\": return Token.IS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.k: {\r\n      switch (text) {\r\n        case \"keyof\": return Token.KEYOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.l: {\r\n      switch (text) {\r\n        case \"let\": return Token.LET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.m: {\r\n      switch (text) {\r\n        case \"module\": return Token.MODULE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.n: {\r\n      switch (text) {\r\n        case \"namespace\": return Token.NAMESPACE;\r\n        case \"new\": return Token.NEW;\r\n        case \"null\": return Token.NULL;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.o: {\r\n      switch (text) {\r\n        case \"of\": return Token.OF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.p: {\r\n      switch (text) {\r\n        case \"package\": return Token.PACKAGE;\r\n        case \"private\": return Token.PRIVATE;\r\n        case \"protected\": return Token.PROTECTED;\r\n        case \"public\": return Token.PUBLIC;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.r: {\r\n      switch (text) {\r\n        case \"readonly\": return Token.READONLY;\r\n        case \"return\": return Token.RETURN;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.s: {\r\n      switch (text) {\r\n        case \"set\": return Token.SET;\r\n        case \"static\": return Token.STATIC;\r\n        case \"super\": return Token.SUPER;\r\n        case \"switch\": return Token.SWITCH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.t: {\r\n      switch (text) {\r\n        case \"this\": return Token.THIS;\r\n        case \"throw\": return Token.THROW;\r\n        case \"true\": return Token.TRUE;\r\n        case \"try\": return Token.TRY;\r\n        case \"type\": return Token.TYPE;\r\n        case \"typeof\": return Token.TYPEOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.v: {\r\n      switch (text) {\r\n        case \"var\": return Token.VAR;\r\n        case \"void\": return Token.VOID;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.w: {\r\n      switch (text) {\r\n        case \"while\": return Token.WHILE;\r\n        case \"with\": return Token.WITH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.y: {\r\n      switch (text) {\r\n        case \"yield\": return Token.YIELD;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return Token.INVALID;\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.FOR:\r\n    case Token.GET:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE:\r\n    case Token.VOID: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(identifierHandling);\r\n  }\r\n\r\n  private unsafeNext(\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxTokenLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (!(\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          )) break;\r\n          // otherwise fall-through\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (chr == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (isDecimalDigit(chr)) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              chr == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < this.end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (chr == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (chr == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                chr = text.charCodeAt(this.pos);\r\n                if (chr == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (chr == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken !== Token.INVALID &&\r\n                identifierHandling !== IdentifierHandling.ALWAYS &&\r\n                !(\r\n                  identifierHandling === IdentifierHandling.PREFER &&\r\n                  tokenIsAlsoIdentifier(keywordToken)\r\n                )\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\r\n          if (isLineBreak(text.charCodeAt(pos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\r\n    return this.skip(Token.IDENTIFIER, identifierHandling);\r\n  }\r\n\r\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (!escaped && c == CharCode.SLASH) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (this.pos + 1 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.x:\r\n        case CharCode.X:\r\n        case CharCode.b:\r\n        case CharCode.B:\r\n        case CharCode.o:\r\n        case CharCode.O: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) {\r\n        return false;\r\n      }\r\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\r\n      // does not validate separator placement (this is done in readXYInteger)\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.x:\r\n        case CharCode.X: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.b:\r\n        case CharCode.B: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.o:\r\n        case CharCode.O: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_4 = i64_new(4);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = (value << 4) + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = (value << 4) + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(10 + c - CharCode.A)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = (value << 4) + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(10 + c - CharCode.a)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_10 = i64_new(10);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_3 = i64_new(3);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = (value << 3) + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_shl(value, i64_3),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_1 = i64_new(1);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode._0) {\r\n        // value = (value << 1);\r\n        value = i64_shl(value, i64_1);\r\n      } else if (c == CharCode._1) {\r\n        // value = (value << 1) + 1;\r\n        value = i64_add(\r\n          i64_shl(value, i64_1),\r\n          i64_1\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    // TODO: numeric separators (parseFloat can't handle these)\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.e || c == CharCode.E) {\r\n        if (\r\n          ++this.pos < this.end &&\r\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = (value << 4) + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = (value << 4) + c + (10 - CharCode.A);\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = (value << 4) + c + (10 - CharCode.a);\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        ((value32 - 65536) >>> 10) + 0xD800,\r\n        ((value32 - 65536) & 1023) + 0xDC00\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\r\n * Resolve infrastructure to obtain types and elements.\r\n * @module resolver\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticEmitter,\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Program,\r\n  ElementKind,\r\n  OperatorKind,\r\n  Element,\r\n  Class,\r\n  ClassPrototype,\r\n  Function,\r\n  FunctionPrototype,\r\n  VariableLikeElement,\r\n  Property,\r\n  PropertyPrototype,\r\n  Field,\r\n  FieldPrototype,\r\n  Global,\r\n  TypeDefinition\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  Flow\r\n} from \"./flow\";\r\n\r\nimport {\r\n  SignatureNode,\r\n  ParameterKind,\r\n  CommonTypeNode,\r\n  NodeKind,\r\n  TypeNode,\r\n  TypeName,\r\n  TypeParameterNode,\r\n  Node,\r\n  Range,\r\n  IdentifierExpression,\r\n  CallExpression,\r\n  ElementAccessExpression,\r\n  PropertyAccessExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  AssertionExpression,\r\n  Expression,\r\n  IntegerLiteralExpression,\r\n  UnaryPrefixExpression,\r\n  UnaryPostfixExpression,\r\n  AssertionKind,\r\n  BinaryExpression,\r\n  ThisExpression,\r\n  SuperExpression,\r\n  isTypeOmitted\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n  typesToString,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  CommonSymbols\r\n} from \"./common\";\r\n\r\nimport {\r\n  makeMap,\r\n  isPowerOf2\r\n} from \"./util\";\r\n\r\nimport {\r\n  Token\r\n} from \"./tokenizer\";\r\n\r\n/** Indicates whether errors are reported or not. */\r\nexport enum ReportMode {\r\n  /** Report errors. */\r\n  REPORT,\r\n  /** Swallow errors. */\r\n  SWALLOW\r\n}\r\n\r\n/** Provides tools to resolve types and expressions. */\r\nexport class Resolver extends DiagnosticEmitter {\r\n\r\n  /** The program this resolver belongs to. */\r\n  program: Program;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  currentThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  currentElementExpression : Expression | null = null;\r\n\r\n  /** Constructs the resolver for the specified program. */\r\n  constructor(\r\n    /** The program to construct a resolver for. */\r\n    program: Program\r\n  ) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    /** The type to resolve. */\r\n    node: CommonTypeNode,\r\n    /** Relative context. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n\r\n    // handle signature\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let explicitThisType = (<SignatureNode>node).explicitThisType;\r\n      let thisType: Type | null = null;\r\n      if (explicitThisType) {\r\n        thisType = this.resolveType(\r\n          explicitThisType,\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!thisType) return null;\r\n      }\r\n      let parameterNodes = (<SignatureNode>node).parameters;\r\n      let numParameters = parameterNodes.length;\r\n      let parameterTypes = new Array<Type>(numParameters);\r\n      let parameterNames = new Array<string>(numParameters);\r\n      let requiredParameters = 0;\r\n      let hasRest = false;\r\n      for (let i = 0; i < numParameters; ++i) {\r\n        let parameterNode = parameterNodes[i];\r\n        switch (parameterNode.parameterKind) {\r\n          case ParameterKind.DEFAULT: {\r\n            requiredParameters = i + 1;\r\n            break;\r\n          }\r\n          case ParameterKind.REST: {\r\n            assert(i == numParameters);\r\n            hasRest = true;\r\n            break;\r\n          }\r\n        }\r\n        let parameterTypeNode = parameterNode.type;\r\n        if (isTypeOmitted(parameterTypeNode)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              parameterTypeNode.range\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        let parameterType = this.resolveType(\r\n          parameterTypeNode,\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!parameterType) return null;\r\n        parameterTypes[i] = parameterType;\r\n        parameterNames[i] = parameterNode.name.text;\r\n      }\r\n      let returnTypeNode = (<SignatureNode>node).returnType;\r\n      if (isTypeOmitted(returnTypeNode)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnTypeNode.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let returnType: Type | null;\r\n      if (returnTypeNode) {\r\n        returnType = this.resolveType(\r\n          returnTypeNode,\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Type.void;\r\n      }\r\n      let signature = new Signature(parameterTypes, returnType, thisType);\r\n      signature.parameterNames = parameterNames;\r\n      signature.requiredParameters = requiredParameters;\r\n      signature.hasRest = hasRest;\r\n      return node.isNullable ? signature.type.asNullable() : signature.type;\r\n    }\r\n\r\n    // now dealing with TypeNode\r\n    assert(node.kind == NodeKind.TYPE);\r\n    var typeNode = <TypeNode>node;\r\n    var typeName = typeNode.name;\r\n    var typeArgumentNodes = typeNode.typeArguments;\r\n    var possiblyPlaceholder = !typeName.next;\r\n\r\n    // look up in contextual type arguments if possibly a placeholder\r\n    if (possiblyPlaceholder) {\r\n      if (contextualTypeArguments && contextualTypeArguments.has(typeName.identifier.text)) {\r\n        let type = contextualTypeArguments.get(typeName.identifier.text)!;\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, type.toString()\r\n            );\r\n          }\r\n        }\r\n        if (node.isNullable) {\r\n          if (!type.is(TypeFlags.REFERENCE)) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n                node.range, type.toString()\r\n              );\r\n            }\r\n          }\r\n          return type.asNullable();\r\n        }\r\n        return type;\r\n      }\r\n    }\r\n\r\n    // look up in context\r\n    var element = this.resolveTypeName(typeName, context, reportMode);\r\n    if (!element) return null;\r\n\r\n    // use shadow type if present (i.e. namespace sharing a type)\r\n    if (element.shadowType) {\r\n      element = element.shadowType;\r\n\r\n    } else {\r\n      // handle enums (become i32)\r\n      if (element.kind == ElementKind.ENUM) {\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, element.internalName\r\n            );\r\n          }\r\n        }\r\n        if (node.isNullable) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n              node.range, element.name\r\n            );\r\n          }\r\n        }\r\n        return Type.i32;\r\n      }\r\n\r\n      // handle classes\r\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let instance = this.resolveClassInclTypeArguments(\r\n          <ClassPrototype>element,\r\n          typeArgumentNodes,\r\n          context,\r\n          makeMap<string,Type>(contextualTypeArguments), // don't inherit\r\n          node\r\n        ); // reports\r\n        if (!instance) return null;\r\n        return node.isNullable ? instance.type.asNullable() : instance.type;\r\n      }\r\n    }\r\n\r\n    // handle type definitions\r\n    if (element.kind == ElementKind.TYPEDEFINITION) {\r\n\r\n      // shortcut already resolved (mostly builtins)\r\n      if (element.is(CommonFlags.RESOLVED)) {\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, element.internalName\r\n            );\r\n          }\r\n        }\r\n        let type = (<TypeDefinition>element).type;\r\n        if (node.isNullable) {\r\n          if (!type.is(TypeFlags.REFERENCE)) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n                typeNode.name.range, typeName.identifier.text\r\n              );\r\n            }\r\n          } else {\r\n            return type.asNullable();\r\n          }\r\n        }\r\n        return type;\r\n      }\r\n\r\n      // handle special native type\r\n      if (possiblyPlaceholder && typeName.identifier.text == CommonSymbols.native) {\r\n        if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        let typeArgument = this.resolveType(\r\n          typeArgumentNodes[0],\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!typeArgument) return null;\r\n        switch (typeArgument.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: return Type.i32;\r\n          case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\r\n          case TypeKind.I64: return Type.i64;\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: return Type.u32;\r\n          case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\r\n          case TypeKind.U64: return Type.u64;\r\n          case TypeKind.F32: return Type.f32;\r\n          case TypeKind.F64: return Type.f64;\r\n          case TypeKind.V128: return Type.v128;\r\n          case TypeKind.VOID: return Type.void;\r\n          default: assert(false);\r\n        }\r\n      }\r\n\r\n      // resolve normally\r\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\r\n      let typeArguments: Type[] | null = null;\r\n      if (typeParameterNodes) {\r\n        typeArguments = this.resolveTypeArguments(\r\n          typeParameterNodes,\r\n          typeArgumentNodes,\r\n          context,\r\n          contextualTypeArguments = makeMap(contextualTypeArguments), // inherit\r\n          node,\r\n          reportMode\r\n        );\r\n        if (!typeArguments) return null;\r\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          typeNode.range, typeName.identifier.text\r\n        );\r\n        // recoverable\r\n      }\r\n      return this.resolveType(\r\n        (<TypeDefinition>element).typeNode,\r\n        element,\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, typeName.identifier.text\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a type name to the program element it refers to. */\r\n  resolveTypeName(\r\n    /** The type name to resolve. */\r\n    typeName: TypeName,\r\n    /** Relative context. */\r\n    context: Element,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var element = context.lookup(typeName.identifier.text);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Cannot_find_name_0,\r\n          typeName.range, typeName.identifier.text\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var prev = typeName;\r\n    var next = typeName.next;\r\n    while (next) {\r\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            next.range, next.identifier.text, prev.identifier.text\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      prev = next;\r\n      next = next.next;\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    /** Actual type parameter nodes. */\r\n    typeParameters: TypeParameterNode[],\r\n    /** Type arguments provided. */\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    /** Relative context. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    /** Alternative report node in case of empty type arguments. */\r\n    alternativeReportNode: Node | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type[] | null {\r\n    var minParameterCount = 0;\r\n    var maxParameterCount = 0;\r\n    for (let i = 0; i < typeParameters.length; ++i) {\r\n      if (!typeParameters[i].defaultType) ++minParameterCount;\r\n      ++maxParameterCount;\r\n    }\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        argumentCount\r\n          ? Range.join(\r\n              (<TypeNode[]>typeArgumentNodes)[0].range,\r\n              (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n            )\r\n          : assert(alternativeReportNode).range,\r\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\r\n        argumentCount.toString(10)\r\n      );\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(maxParameterCount);\r\n    for (let i = 0; i < maxParameterCount; ++i) {\r\n      let type = i < argumentCount\r\n        ? this.resolveType( // reports\r\n            (<TypeNode[]>typeArgumentNodes)[i],\r\n            context,\r\n            contextualTypeArguments,\r\n            reportMode\r\n          )\r\n        : this.resolveType( // reports\r\n            assert(typeParameters[i].defaultType),\r\n            context,\r\n            contextualTypeArguments,\r\n            reportMode\r\n          );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the program element it refers to. */\r\n  resolveIdentifier(\r\n    /** The expression to resolve. */\r\n    identifier: IdentifierExpression,\r\n    /** Optional flow to search for scoped locals. */\r\n    flow: Flow | null,\r\n    /** Optional context to search. */\r\n    context: Element | null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var name = identifier.text;\r\n    var element: Element | null;\r\n    if (flow) {\r\n      if (element = flow.lookup(name)) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return element;\r\n      }\r\n    }\r\n    if (context) {\r\n      if (element = context.lookup(name)) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return element;\r\n      }\r\n    }\r\n    if (element = this.program.lookupGlobal(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        identifier.range, name\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a lazily compiled global, i.e. a static class field. */\r\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\r\n    if (global.is(CommonFlags.RESOLVED)) return true;\r\n    var typeNode = global.typeNode;\r\n    if (!typeNode) return false;\r\n    var type = this.resolveType( // reports\r\n      typeNode,\r\n      global.parent,\r\n      null,\r\n      reportMode\r\n    );\r\n    if (!type) return false;\r\n    global.setType(type);\r\n    return true;\r\n  }\r\n\r\n  /** Resolves a property access expression to the program element it refers to. */\r\n  resolvePropertyAccessExpression(\r\n    /** The expression to resolve. */\r\n    propertyAccess: PropertyAccessExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = propertyAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\r\n    if (!target) return null;\r\n    var propertyName = propertyAccess.property.text;\r\n\r\n    // Resolve variable-likes to their class type first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\r\n        let classReference = type.classReference;\r\n        if (!classReference) {\r\n          let typeClasses = this.program.typeClasses;\r\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\r\n            classReference = typeClasses.get(type.kind)!;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\r\n        let getterInstance = this.resolveFunction( // reports\r\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n        if (!getterInstance) return null;\r\n        let classReference = getterInstance.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance\r\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\r\n        let classReference = getterInstance.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: { // property access on element access?\r\n        let elementExpression = this.currentElementExpression;\r\n        if (elementExpression) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementExpression.range, (<Class>target).internalName\r\n            );\r\n            return null;\r\n          }\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (!(target = returnType.classReference)) {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, returnType.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          if (members && members.has(propertyName)) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = null;\r\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        if (members && members.has(propertyName)) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = null;\r\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an element access expression to the program element it refers to. */\r\n  resolveElementAccessExpression(\r\n    /** The expression to resolve. */\r\n    elementAccess: ElementAccessExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = elementAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (target = type.classReference) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n        if (!indexedGet) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementAccess.range, (<Class>target).internalName\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (target = returnType.classReference) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = elementAccess.elementExpression;\r\n            return target;\r\n          }\r\n          return null;\r\n        }\r\n        this.currentThisExpression = targetExpression;\r\n        this.currentElementExpression = elementAccess.elementExpression;\r\n        return target;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        targetExpression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Determines the final type of an integer literal given the specified contextual type. */\r\n  determineIntegerLiteralType(\r\n    /** Integer literal value. */\r\n    intValue: I64,\r\n    /** Current contextual type. */\r\n    contextualType: Type\r\n  ): Type {\r\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\r\n      // compile to contextualType if matching\r\n      switch (contextualType.kind) {\r\n        case TypeKind.I8: {\r\n          if (i64_is_i8(intValue)) return Type.i8;\r\n          break;\r\n        }\r\n        case TypeKind.U8: {\r\n          if (i64_is_u8(intValue)) return Type.u8;\r\n          break;\r\n        }\r\n        case TypeKind.I16: {\r\n          if (i64_is_i16(intValue)) return Type.i16;\r\n          break;\r\n        }\r\n        case TypeKind.U16: {\r\n          if (i64_is_u16(intValue)) return Type.u16;\r\n          break;\r\n        }\r\n        case TypeKind.I32: {\r\n          if (i64_is_i32(intValue)) return Type.i32;\r\n          break;\r\n        }\r\n        case TypeKind.U32: {\r\n          if (i64_is_u32(intValue)) return Type.u32;\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: {\r\n          if (i64_is_bool(intValue)) return Type.bool;\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_i32(intValue)) return Type.isize32;\r\n            break;\r\n          }\r\n          return Type.isize64;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_u32(intValue)) return Type.usize32;\r\n            break;\r\n          }\r\n          return Type.usize64;\r\n        }\r\n        case TypeKind.I64: return Type.i64;\r\n        case TypeKind.U64: return Type.u64;\r\n        case TypeKind.F32: return Type.f32;\r\n        case TypeKind.F64: return Type.f64;\r\n        case TypeKind.VOID: break; // best fitting below\r\n        default: assert(false);\r\n      }\r\n    }\r\n    // otherwise compile to best fitting native type\r\n    if (i64_is_i32(intValue)) return Type.i32;\r\n    if (i64_is_u32(intValue)) return Type.u32;\r\n    return Type.i64;\r\n  }\r\n\r\n  /** Resolves any expression to the program element it refers to. */\r\n  resolveExpression(\r\n    /** The expression to resolve. */\r\n    expression: Expression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) { // simply skip\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        return this.resolveAssertionExpression(\r\n          <AssertionExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        return this.resolveUnaryPrefixExpression(\r\n          <UnaryPrefixExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        return this.resolveUnaryPostfixExpression(\r\n          <UnaryPostfixExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.BINARY: {\r\n        return this.resolveBinaryExpression(\r\n          <BinaryExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.THIS: {\r\n        return this.resolveThisExpression(\r\n          <ThisExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.SUPER: {\r\n        return this.resolveSuperExpression(\r\n          <SuperExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(\r\n          <IdentifierExpression>expression,\r\n          flow, flow.actualFunction, reportMode\r\n        );\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        return this.resolveLiteralExpression(\r\n          <LiteralExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccessExpression(\r\n          <ElementAccessExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        return this.resolveCallExpression(\r\n          <CallExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      // TODO: everything else\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an assertion expression to the program element it refers to. */\r\n  resolveAssertionExpression(\r\n    /** The expression to resolve. */\r\n    expression: AssertionExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (expression.assertionKind == AssertionKind.NONNULL) {\r\n      return this.resolveExpression(\r\n        expression.expression,\r\n        flow,\r\n        contextualType,\r\n        reportMode\r\n      );\r\n    }\r\n    var type = this.resolveType(\r\n      assert(expression.toType), // must be set if not NONNULL\r\n      flow.actualFunction,\r\n      flow.contextualTypeArguments,\r\n      reportMode\r\n    );\r\n    if (!type) return null;\r\n    var element: Element | null = type.classReference;\r\n    if (!element) {\r\n      let signature = type.signatureReference;\r\n      if (!signature) return null;\r\n      element = signature.asFunctionTarget(this.program);\r\n    }\r\n    this.currentThisExpression = null;\r\n    this.currentElementExpression = null;\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an unary prefix expression to the program element it refers to. */\r\n  resolveUnaryPrefixExpression(\r\n    /** The expression to resolve. */\r\n    expression: UnaryPrefixExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var operand = expression.operand;\r\n    // TODO: operator overloads\r\n    switch (expression.operator) {\r\n      case Token.MINUS: {\r\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\r\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\r\n          let type = this.determineIntegerLiteralType(\r\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\r\n            contextualType\r\n          );\r\n          let typeClasses = this.program.typeClasses;\r\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\r\n        }\r\n        return this.resolveExpression(\r\n          operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      case Token.PLUS:\r\n      case Token.PLUS_PLUS:\r\n      case Token.MINUS_MINUS: {\r\n        return this.resolveExpression(\r\n          expression.operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(TypeKind.BOOL) ? typeClasses.get(TypeKind.BOOL)! : null;\r\n      }\r\n      case Token.TILDE: {\r\n        let resolvedOperand = this.resolveExpression(\r\n          expression.operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n        if (!resolvedOperand) return null;\r\n        // TODO\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an unary postfix expression to the program element it refers to. */\r\n  resolveUnaryPostfixExpression(\r\n    /** The expression to resolve. */\r\n    expression: UnaryPostfixExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    // TODO: operator overloads\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS:\r\n      case Token.MINUS_MINUS: {\r\n        return this.resolveExpression(\r\n          expression.operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a binary expression to the program element it refers to. */\r\n  resolveBinaryExpression(\r\n    /** The expression to resolve. */\r\n    expression: BinaryExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    // TODO\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a this expression to the program element it refers to. */\r\n  resolveThisExpression(\r\n    /** The expression to resolve. */\r\n    expression: ThisExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      let thisLocal = flow.lookupLocal(CommonSymbols.this_);\r\n      if (thisLocal) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return thisLocal;\r\n      }\r\n    }\r\n    var parent = flow.actualFunction.parent;\r\n    if (parent) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return parent;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a super expression to the program element it refers to. */\r\n  resolveSuperExpression(\r\n    /** The expression to resolve. */\r\n    expression: SuperExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      let superLocal = flow.lookupLocal(CommonSymbols.super_);\r\n      if (superLocal) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return superLocal;\r\n      }\r\n    }\r\n    var parent: Element | null = flow.actualFunction.parent;\r\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return parent;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a literal expression to the program element it refers to. */\r\n  resolveLiteralExpression(\r\n    /** The expression to resolve. */\r\n    expression: LiteralExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.INTEGER: {\r\n        this.currentThisExpression = expression;\r\n        this.currentElementExpression = null;\r\n        let literalType = this.determineIntegerLiteralType(\r\n          (<IntegerLiteralExpression>expression).value,\r\n          contextualType\r\n        );\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        this.currentThisExpression = expression;\r\n        this.currentElementExpression = null;\r\n        let literalType = contextualType == Type.f32 ? Type.f32 : Type.f64;\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\r\n      }\r\n      case LiteralKind.STRING: {\r\n        this.currentThisExpression = expression;\r\n        this.currentElementExpression = null;\r\n        return this.program.stringInstance;\r\n      }\r\n      // TODO\r\n      // case LiteralKind.ARRAY:\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a call expression to the program element it refers to. */\r\n  resolveCallExpression(\r\n    /** The expression to resolve. */\r\n    expression: CallExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = expression.expression;\r\n    var target = this.resolveExpression( // reports\r\n      targetExpression,\r\n      flow,\r\n      contextualType,\r\n      reportMode\r\n    );\r\n    if (!target) return null;\r\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n      let instance = this.resolveFunctionInclTypeArguments(\r\n        <FunctionPrototype>target,\r\n        expression.typeArguments,\r\n        flow.actualFunction,\r\n        makeMap(flow.contextualTypeArguments), // don't inherit\r\n        expression,\r\n        reportMode\r\n      );\r\n      if (!instance) return null;\r\n      let returnType = instance.signature.returnType;\r\n      let classType = returnType.classReference;\r\n      if (classType) {\r\n        // reuse resolvedThisExpression (might be property access)\r\n        // reuse resolvedElementExpression (might be element access)\r\n        return classType;\r\n      } else {\r\n        let signature = returnType.signatureReference;\r\n        if (signature) {\r\n          let functionTarget = signature.asFunctionTarget(this.program);\r\n          // reuse resolvedThisExpression (might be property access)\r\n          // reuse resolvedElementExpression (might be element access)\r\n          return functionTarget;\r\n        }\r\n      }\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n          targetExpression.range, target.internalName\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a function prototype using the specified concrete type arguments. */\r\n  resolveFunction(\r\n    /** The prototype of the function. */\r\n    prototype: FunctionPrototype,\r\n    /** Concrete type arguments. */\r\n    typeArguments: Type[] | null,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\r\n      ? prototype.parent.parent\r\n      : prototype.parent;\r\n    var classInstance: Class | null = null; // if an instance method\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Instance method prototypes are pre-bound to their concrete class as their parent\r\n    if (prototype.is(CommonFlags.INSTANCE)) {\r\n      assert(actualParent.kind == ElementKind.CLASS);\r\n      classInstance = <Class>actualParent;\r\n\r\n      // check if this exact concrete class and function combination is known already\r\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\r\n      if (resolvedInstance) return resolvedInstance;\r\n\r\n      // inherit class specific type arguments\r\n      let classTypeArguments = classInstance.typeArguments;\r\n      if (classTypeArguments) {\r\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\r\n        let numClassTypeArguments = classTypeParameters.length;\r\n        assert(numClassTypeArguments == classTypeParameters.length);\r\n        for (let i = 0; i < numClassTypeArguments; ++i) {\r\n          let classTypeParameterName = classTypeParameters[i].name.text;\r\n          if (!contextualTypeArguments.has(classTypeParameterName)) {\r\n            contextualTypeArguments.set(\r\n              classTypeParameterName,\r\n              classTypeArguments[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\r\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\r\n      if (resolvedInstance) return resolvedInstance;\r\n    }\r\n\r\n    // override whatever is contextual with actual function type arguments\r\n    var signatureNode = prototype.signatureNode;\r\n    var typeParameterNodes = prototype.typeParameterNodes;\r\n    var numFunctionTypeArguments: i32;\r\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\r\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\r\n          typeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\r\n    }\r\n\r\n    // resolve `this` type if applicable\r\n    var thisType: Type | null = null;\r\n    var explicitThisType = signatureNode.explicitThisType;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        prototype.parent, // relative to function\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!thisType) return null;\r\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\r\n    } else if (classInstance) {\r\n      thisType = classInstance.type;\r\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\r\n    }\r\n\r\n    // resolve parameter types\r\n    var signatureParameters = signatureNode.parameters;\r\n    var numSignatureParameters = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(numSignatureParameters);\r\n    var parameterNames = new Array<string>(numSignatureParameters);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < numSignatureParameters; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = parameterDeclaration.type;\r\n      if (isTypeOmitted(typeNode)) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          typeNode.range\r\n        );\r\n        return null;\r\n      }\r\n      let parameterType = this.resolveType(\r\n        typeNode,\r\n        prototype.parent, // relative to function\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    // resolve return type\r\n    var returnType: Type;\r\n    if (prototype.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = signatureNode.returnType;\r\n      if (isTypeOmitted(typeNode)) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          typeNode.range\r\n        );\r\n        return null;\r\n      }\r\n      let type = this.resolveType(\r\n        typeNode,\r\n        prototype.parent, // relative to function\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var nameInclTypeParameters = prototype.name;\r\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\r\n    var instance = new Function(\r\n      nameInclTypeParameters,\r\n      prototype,\r\n      signature,\r\n      contextualTypeArguments\r\n    );\r\n    prototype.setResolvedInstance(instanceKey, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\r\n  resolveFunctionInclTypeArguments(\r\n    /** The prototype of the function. */\r\n    prototype: FunctionPrototype,\r\n    /** Type arguments provided. */\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    /** Relative context. Type arguments are resolved from here. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type>,\r\n    /** The node to use when reporting intermediate errors. */\r\n    reportNode: Node,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\r\n      ? prototype.parent.parent\r\n      : prototype.parent;\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n\r\n      // If this is an instance method, first apply the class's type arguments\r\n      if (prototype.is(CommonFlags.INSTANCE)) {\r\n        assert(actualParent.kind == ElementKind.CLASS);\r\n        let classTypeArguments = (<Class>actualParent).typeArguments;\r\n        if (classTypeArguments) {\r\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\r\n          let numClassTypeArguments = classTypeArguments.length;\r\n          assert(numClassTypeArguments == typeParameterNodes.length);\r\n          for (let i = 0; i < numClassTypeArguments; ++i) {\r\n            contextualTypeArguments.set(\r\n              typeParameterNodes[i].name.text,\r\n              classTypeArguments[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.typeParameterNodes),\r\n        typeArgumentNodes,\r\n        context,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveFunction(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n\r\n  /** Resolves a class prototype using the specified concrete type arguments. */\r\n  resolveClass(\r\n    /** The prototype of the class. */\r\n    prototype: ClassPrototype,\r\n    /** Concrete type arguments. */\r\n    typeArguments: Type[] | null,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Check if this exact instance has already been resolved\r\n    var instance = prototype.getResolvedInstance(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // Insert contextual type arguments for this operation. Internally, this method is always\r\n    // called with matching type parameter / argument counts.\r\n    if (typeArguments) {\r\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\r\n      let numTypeParameters = typeParameterNodes.length;\r\n      let numTypeArguments = typeArguments.length;\r\n      assert(numTypeArguments == numTypeParameters);\r\n      for (let i = 0; i < numTypeArguments; ++i) {\r\n        contextualTypeArguments.set(typeParameterNodes[i].name.text, typeArguments[i]);\r\n      }\r\n    } else {\r\n      let typeParameterNodes = prototype.typeParameterNodes;\r\n      assert(!(typeParameterNodes && typeParameterNodes.length));\r\n    }\r\n\r\n    // Resolve base class if applicable\r\n    var basePrototype = prototype.basePrototype;\r\n    var baseClass: Class | null = null;\r\n    if (basePrototype) {\r\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\r\n      baseClass = this.resolveClassInclTypeArguments(\r\n        basePrototype,\r\n        extendsNode.typeArguments,\r\n        prototype.parent, // relative to derived class\r\n        makeMap(contextualTypeArguments), // don't inherit\r\n        extendsNode,\r\n        reportMode\r\n      );\r\n      if (!baseClass) return null;\r\n    }\r\n\r\n    // Construct the instance and remember that it has been resolved already\r\n    var nameInclTypeParamters = prototype.name;\r\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\r\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    prototype.setResolvedInstance(instanceKey, instance);\r\n\r\n    // Inherit base class members and set up the initial memory offset for own fields\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      let baseMembers = baseClass.members;\r\n      if (baseMembers) {\r\n        let instanceMembers = instance.members;\r\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\r\n        for (let [baseMemberName, baseMember] of baseMembers) {\r\n          instanceMembers.set(baseMemberName, baseMember);\r\n        }\r\n      }\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n    }\r\n\r\n    // Resolve instance members\r\n    var instanceMemberPrototypes = prototype.instanceMembers;\r\n    if (instanceMemberPrototypes) {\r\n      for (let member of instanceMemberPrototypes.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            let instanceMembers = instance.members;\r\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\r\n            else if (instanceMembers.has(member.name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                (<FieldPrototype>member).identifierNode.range,\r\n                member.name\r\n              );\r\n              break;\r\n            }\r\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\r\n            let fieldType: Type | null = null;\r\n            // TODO: handle duplicate non-private fields specifically?\r\n            if (!fieldTypeNode) {\r\n              if (baseClass) {\r\n                let baseMembers = baseClass.members;\r\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\r\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\r\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\r\n                    assert(baseField.kind == ElementKind.FIELD);\r\n                    fieldType = (<Field>baseField).type;\r\n                  }\r\n                }\r\n              }\r\n              if (!fieldType) {\r\n                if (reportMode == ReportMode.REPORT) {\r\n                  this.error(\r\n                    DiagnosticCode.Type_expected,\r\n                    (<FieldPrototype>member).identifierNode.range.atEnd\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n              fieldType = this.resolveType(\r\n                fieldTypeNode,\r\n                prototype.parent, // relative to class\r\n                instance.contextualTypeArguments,\r\n                reportMode\r\n              );\r\n            }\r\n            if (!fieldType) break; // did report above\r\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\r\n            assert(isPowerOf2(fieldType.byteSize));\r\n            let mask = fieldType.byteSize - 1;\r\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\r\n            fieldInstance.memoryOffset = memoryOffset;\r\n            memoryOffset += fieldType.byteSize;\r\n            instance.add(member.name, fieldInstance); // reports\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\r\n            instance.add(boundPrototype.name, boundPrototype); // reports\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY_PROTOTYPE: {\r\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\r\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\r\n            if (getterPrototype) {\r\n              let getterInstance = this.resolveFunction(\r\n                getterPrototype.toBound(instance),\r\n                null,\r\n                makeMap(instance.contextualTypeArguments),\r\n                reportMode\r\n              );\r\n              if (getterInstance) {\r\n                propertyInstance.getterInstance = getterInstance;\r\n                propertyInstance.setType(getterInstance.signature.returnType);\r\n              }\r\n            }\r\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\r\n            if (setterPrototype) {\r\n              let setterInstance = this.resolveFunction(\r\n                setterPrototype.toBound(instance),\r\n                null,\r\n                makeMap(instance.contextualTypeArguments),\r\n                reportMode\r\n              );\r\n              if (setterInstance) {\r\n                propertyInstance.setterInstance = setterInstance;\r\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\r\n                  assert(setterInstance.signature.parameterTypes.length == 1);\r\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\r\n                }\r\n              }\r\n            }\r\n            instance.add(propertyInstance.name, propertyInstance); // reports\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Finalize memory offset\r\n    instance.currentMemoryOffset = memoryOffset;\r\n\r\n    // Link _own_ constructor if present\r\n    {\r\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\r\n      if (ctorPrototype && ctorPrototype.parent === instance) {\r\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n        let ctorInstance = this.resolveFunction(\r\n          <FunctionPrototype>ctorPrototype,\r\n          null,\r\n          instance.contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\r\n      }\r\n    }\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\r\n        let boundPrototype = overloadPrototype.toBound(instance);\r\n        operatorInstance = this.resolveFunction(\r\n          boundPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      } else {\r\n        operatorInstance = this.resolveFunction(\r\n          overloadPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      overloads.set(kind, operatorInstance);\r\n    }\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a class prototype by first resolving the specified type arguments. */\r\n  resolveClassInclTypeArguments(\r\n    /** The prototype of the class. */\r\n    prototype: ClassPrototype,\r\n    /** Type argument nodes provided. */\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    /** Relative context. Type arguments are resolved from here. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type>,\r\n    /** The node to use when reporting intermediate errors. */\r\n    reportNode: Node,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.typeParameterNodes), // must be present if generic\r\n        typeArgumentNodes,\r\n        context,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveClass(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n}\r\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  compileCall as compileBuiltinCall,\r\n  compileAbort,\r\n  compileIterateRoots,\r\n  ensureGCHook,\r\n  BuiltinSymbols\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  needsExplicitUnreachable\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  LibrarySymbols,\r\n  CommonSymbols,\r\n  INDEX_SUFFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  ConstantValueKind,\r\n  OperatorKind,\r\n  DecoratorFlags,\r\n  PropertyPrototype,\r\n  File,\r\n  mangleInternalName\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  Flow\r\n} from \"./flow\";\r\n\r\nimport {\r\n  Resolver, ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Range,\r\n  DecoratorKind,\r\n  AssertionKind,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FieldDeclaration,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InstanceOfExpression,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ObjectLiteralExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n\r\n  nodeIsConstantValue,\r\n  findDecorator,\r\n  isTypeOmitted\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64,\r\n  makeMap\r\n} from \"./util\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\r\n  sharedMemory: i32 = 0;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: i32 = 0;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n  /** Additional features to activate. */\r\n  features: Feature = Feature.NONE;\r\n\r\n  /** Hinted optimize level. Not applied by the compiler itself. */\r\n  optimizeLevelHint: i32 = 0;\r\n  /** Hinted shrink level. Not applied by the compiler itself. */\r\n  shrinkLevelHint: i32 = 0;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n\r\n  /** Tests if a specific feature is activated. */\r\n  hasFeature(feature: Feature): bool {\r\n    return (this.features & feature) != 0;\r\n  }\r\n}\r\n\r\n/** Indicates specific features to activate. */\r\nexport const enum Feature {\r\n  /** No additional features. */\r\n  NONE = 0,\r\n  /** Sign extension operations. */\r\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\r\n  /** Mutable global imports and exports. */\r\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\r\n  /** Bulk memory operations. */\r\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  /** SIMD types and operations. */\r\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\r\n  /** Threading and atomic operations. */\r\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Indicates the desired wrap mode of a conversion. */\r\nexport const enum WrapMode {\r\n  /** No wrapping. */\r\n  NONE,\r\n  /** Wrap small integer values. */\r\n  WRAP\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Resolver reference. */\r\n  resolver: Resolver;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current control flow. */\r\n  currentFlow: Flow;\r\n  /** Current inline functions stack. */\r\n  currentInlineFunctions: Function[] = [];\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function statements. */\r\n  currentBody: ExpressionRef[];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = [];\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: string[] = [ \"null\" ];\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n  /** Indicates whether the iterateRoots function must be generated. */\r\n  needsIterateRoots: bool = false;\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    this.resolver = program.resolver;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\r\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\r\n      max(options.memoryBase, 8)\r\n    );\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the main start function\r\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature([], Type.void));\r\n    startFunctionInstance.internalName = \"start\";\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.currentFlow = startFunctionInstance.flow;\r\n    this.currentBody = startFunctionBody;\r\n\r\n    // add a mutable heap base dummy\r\n    if (options.isWasm64) {\r\n      module.addGlobal(\r\n        BuiltinSymbols.HEAP_BASE,\r\n        NativeType.I64,\r\n        true,\r\n        module.createI64(0, 0)\r\n      );\r\n    } else {\r\n      module.addGlobal(\r\n        BuiltinSymbols.HEAP_BASE,\r\n        NativeType.I32,\r\n        false,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var files = program.filesByName;\r\n    for (let file of files.values()) {\r\n      if (file.source.isEntry) {\r\n        this.compileFile(file);\r\n        this.compileExports(file);\r\n      }\r\n    }\r\n\r\n    // compile the start function if not empty or called by main\r\n    var explicitStartFunction = program.explicitStartFunction;\r\n    if (startFunctionBody.length || explicitStartFunction) {\r\n      let signature = startFunctionInstance.signature;\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.createBlock(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      if (!explicitStartFunction) module.setStart(funcRef);\r\n    }\r\n\r\n    // update the heap base pointer\r\n    var memoryOffset = this.memoryOffset;\r\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n    this.memoryOffset = memoryOffset;\r\n    module.removeGlobal(BuiltinSymbols.HEAP_BASE);\r\n    if (options.isWasm64) {\r\n      module.addGlobal(\r\n        BuiltinSymbols.HEAP_BASE,\r\n        NativeType.I64,\r\n        false,\r\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n      );\r\n    } else {\r\n      module.addGlobal(\r\n        BuiltinSymbols.HEAP_BASE,\r\n        NativeType.I32,\r\n        false,\r\n        module.createI32(i64_low(memoryOffset))\r\n      );\r\n    }\r\n\r\n    // set up memory\r\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\r\n    module.setMemory(\r\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\r\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\r\n        : 0,\r\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\r\n      this.memorySegments,\r\n      options.target,\r\n      \"memory\",\r\n      isSharedMemory\r\n    );\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\r\n    module.addTableExport(\"0\", \"table\");\r\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.createBlock(null, []));\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\r\n\r\n    // set up module exports\r\n    for (let file of this.program.filesByName.values()) {\r\n      if (file.source.isEntry) this.makeModuleExports(file);\r\n    }\r\n\r\n    // set up gc\r\n    if (this.needsIterateRoots) compileIterateRoots(this);\r\n\r\n    return module;\r\n  }\r\n\r\n  /** Applies the respective module exports for the specified file. */\r\n  private makeModuleExports(file: File): void {\r\n    var members = file.exports;\r\n    if (members) for (let [name, member] of members) this.makeModuleExport(name, member);\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar)  {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.makeModuleExports(exportsStar[i]);\r\n    }\r\n  }\r\n\r\n  /** Applies the respective module export(s) for the specified element. */\r\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\r\n    switch (element.kind) {\r\n\r\n      // traverse instances\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instances = (<FunctionPrototype>element).instances;\r\n        if (instances) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.makeModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        let instances = (<ClassPrototype>element).instances;\r\n        if (instances) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.makeModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getter = (<PropertyPrototype>element).getterPrototype;\r\n        let setter = (<PropertyPrototype>element).setterPrototype;\r\n        if (getter) this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n\r\n      // export concrete elements\r\n      case ElementKind.GLOBAL: {\r\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_export_a_mutable_global,\r\n            (<Global>element).identifierNode.range\r\n          );\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.ENUMVALUE: {\r\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_export_a_mutable_global,\r\n            (<EnumValue>element).identifierNode.range\r\n          );\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION: {\r\n        let instance = <Function>element;\r\n        let signature = instance.signature;\r\n        if (signature.requiredParameters < signature.parameterTypes.length) {\r\n          // utilize trampoline to fill in omitted arguments\r\n          instance = this.ensureTrampoline(instance);\r\n          this.ensureArgcSet();\r\n        }\r\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = (<Property>element).getterInstance;\r\n        if (getter) this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        let setter = (<Property>element).setterInstance;\r\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let module = this.module;\r\n        let type = (<Field>element).type;\r\n        let nativeType = type.toNativeType();\r\n        let offset = (<Field>element).memoryOffset;\r\n        let usizeType = this.options.usizeType;\r\n        let nativeSizeType = this.options.nativeSizeType;\r\n\r\n        // make a getter\r\n        let getterName = prefix + GETTER_PREFIX + name;\r\n        module.addFunction(\r\n          getterName,\r\n          this.ensureFunctionType(null, type, usizeType),\r\n          null,\r\n          module.createLoad(\r\n            type.byteSize,\r\n            type.is(TypeFlags.SIGNED),\r\n            module.createGetLocal(0, nativeSizeType),\r\n            nativeType,\r\n            offset\r\n          )\r\n        );\r\n        module.addFunctionExport(getterName, getterName);\r\n\r\n        // make a setter\r\n        if (!element.is(CommonFlags.READONLY)) {\r\n          let setterName = prefix + SETTER_PREFIX + name;\r\n          module.addFunction(\r\n            setterName,\r\n            this.ensureFunctionType([ type ], Type.void, usizeType),\r\n            null,\r\n            module.createStore(\r\n              type.byteSize,\r\n              module.createGetLocal(0, nativeSizeType),\r\n              module.createGetLocal(1, nativeType),\r\n              nativeType,\r\n              offset\r\n            )\r\n          );\r\n          module.addFunctionExport(setterName, setterName);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // just traverse members below\r\n      case ElementKind.ENUM:\r\n      case ElementKind.CLASS:\r\n      case ElementKind.NAMESPACE:\r\n      case ElementKind.FILE:\r\n      case ElementKind.TYPEDEFINITION: break;\r\n\r\n      default: assert(false); // unexpected module export\r\n    }\r\n\r\n    // traverse members\r\n    var members = element.members;\r\n    if (members) {\r\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\r\n        ? INSTANCE_DELIMITER\r\n        : STATIC_DELIMITER\r\n      );\r\n      if (\r\n        element.kind == ElementKind.NAMESPACE ||\r\n        element.kind == ElementKind.FILE\r\n      ) {\r\n        for (let member of members.values()) {\r\n          if (!member.is(CommonFlags.EXPORT)) continue;\r\n          this.makeModuleExport(member.name, member, subPrefix);\r\n        }\r\n      } else {\r\n        for (let member of members.values()) {\r\n          if (member.is(CommonFlags.PRIVATE)) continue;\r\n          this.makeModuleExport(member.name, member, subPrefix);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // general\r\n\r\n  /** Compiles any element. */\r\n  compileElement(element: Element, compileMembers: bool = true): void {\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        this.compileGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        this.compileEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        if (!element.is(CommonFlags.GENERIC)) {\r\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        if (!element.is(CommonFlags.GENERIC)) {\r\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\r\n        if (getterPrototype) {\r\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\r\n        }\r\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\r\n        if (setterPrototype) {\r\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE:\r\n      case ElementKind.TYPEDEFINITION:\r\n      case ElementKind.ENUMVALUE: break;\r\n      default: assert(false, ElementKind[element.kind]);\r\n    }\r\n    if (compileMembers) this.compileMembers(element);\r\n  }\r\n\r\n  /** Compiles an element's members. */\r\n  compileMembers(element: Element): void {\r\n    var members = element.members;\r\n    if (members) for (let element of members.values()) this.compileElement(element);\r\n  }\r\n\r\n  /** Compiles a file's exports. */\r\n  compileExports(file: File): void {\r\n    var exports = file.exports;\r\n    if (exports) for (let element of exports.values()) this.compileElement(element);\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar) for (let exportStar of exportsStar) this.compileFile(exportStar);\r\n  }\r\n\r\n  // files\r\n\r\n  /** Compiles the file matching the specified path. */\r\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var file: File;\r\n    var filesByName = this.program.filesByName;\r\n    var pathWithIndex: string;\r\n    if (filesByName.has(normalizedPathWithoutExtension)) {\r\n      file = filesByName.get(normalizedPathWithoutExtension)!;\r\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\r\n      file = filesByName.get(pathWithIndex)!;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n      return;\r\n    }\r\n    this.compileFile(file);\r\n  }\r\n\r\n  /** Compiles the specified file. */\r\n  compileFile(file: File): void {\r\n    if (file.is(CommonFlags.COMPILED)) return;\r\n    file.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements within the file's start function\r\n    var startFunction = file.startFunction;\r\n    var previousBody = this.currentBody;\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.currentBody = startFunctionBody;\r\n\r\n    // compile top-level statements\r\n    var previousFlow = this.currentFlow;\r\n    this.currentFlow = startFunction.flow;\r\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\r\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\r\n    }\r\n    this.currentFlow = previousFlow;\r\n    this.currentBody = previousBody;\r\n\r\n    // if top-level statements are present, make the per-file start function and call it in start\r\n    if (startFunctionBody.length) {\r\n      let module = this.module;\r\n      let locals = startFunction.localsByIndex;\r\n      let numLocals = locals.length;\r\n      let varTypes = new Array<NativeType>(numLocals);\r\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\r\n      module.addFunction(\r\n        startFunction.internalName,\r\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\r\n        varTypes,\r\n        startFunctionBody.length > 1\r\n          ? module.createBlock(null, startFunctionBody)\r\n          : startFunctionBody[0]\r\n      );\r\n      previousBody.push(\r\n        module.createCall(startFunction.internalName, null, NativeType.None)\r\n      );\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var initExpr: ExpressionRef = 0;\r\n    var typeNode = global.typeNode;\r\n    var initializerNode = global.initializerNode;\r\n\r\n    if (!global.is(CommonFlags.RESOLVED)) {\r\n\r\n      // resolve now if annotated\r\n      if (typeNode) {\r\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\r\n        if (!resolvedType) return false;\r\n        if (resolvedType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            typeNode.range\r\n          );\r\n          return false;\r\n        }\r\n        global.setType(resolvedType);\r\n\r\n      // infer from initializer if not annotated\r\n      } else if (initializerNode) { // infer type using void/NONE for literal inference\r\n        let previousFlow = this.currentFlow;\r\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = global.file.startFunction.flow;\r\n        }\r\n        initExpr = this.compileExpressionRetainType( // reports\r\n          initializerNode,\r\n          Type.void,\r\n          WrapMode.WRAP\r\n        );\r\n        this.currentFlow = previousFlow;\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          return false;\r\n        }\r\n        global.setType(this.currentType);\r\n\r\n      // must either be annotated or have an initializer\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          global.identifierNode.range.atEnd\r\n        );\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\r\n\r\n    var nativeType = global.type.toNativeType();\r\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // constant global\r\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        mangleImportName(global, global.declaration);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          mangleImportName_moduleName,\r\n          mangleImportName_elementName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          global.declaration.range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and constant\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // evaluate initializer if present\r\n    if (initializerNode) {\r\n      if (!initExpr) {\r\n        let previousFlow = this.currentFlow;\r\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = global.file.startFunction.flow;\r\n        }\r\n        initExpr = this.compileExpression(\r\n          initializerNode,\r\n          global.type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.WRAP\r\n        );\r\n        this.currentFlow = previousFlow;\r\n      }\r\n\r\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n        if (isDeclaredConstant) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              initializerNode.range\r\n            );\r\n            initializeInStart = true;\r\n          }\r\n        } else {\r\n          initializeInStart = true;\r\n        }\r\n      }\r\n\r\n      // explicitly inline if annotated\r\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\r\n        if (!initializeInStart) { // reported above\r\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\r\n          let exprType = getExpressionType(initExpr);\r\n          switch (exprType) {\r\n            case NativeType.I32: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(\r\n                getConstValueI64Low(initExpr),\r\n                getConstValueI64High(initExpr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF32(initExpr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF64(initExpr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false);\r\n              return false;\r\n            }\r\n          }\r\n          global.set(CommonFlags.INLINED); // inline the value from now on\r\n        }\r\n      }\r\n\r\n    // initialize to zero if there's no initializer\r\n    } else {\r\n      initExpr = global.type.toNativeZero(module);\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\r\n        this.error(\r\n          DiagnosticCode.Decorator_0_is_not_valid_here,\r\n          global.identifierNode.range, \"inline\"\r\n        );\r\n      }\r\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\r\n      this.currentBody.push(module.createSetGlobal(internalName, initExpr));\r\n\r\n    } else if (!global.hasDecorator(DecoratorFlags.INLINE)) { // compile normally\r\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n    var previousValueIsMut = false;\r\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueNode = val.valueNode;\r\n        val.set(CommonFlags.COMPILED);\r\n        let previousFlow = this.currentFlow;\r\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = element.file.startFunction.flow;\r\n        }\r\n        let initExpr: ExpressionRef;\r\n        if (valueNode) {\r\n          initExpr = this.compileExpression(\r\n            valueNode,\r\n            Type.i32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            initExpr = module.precomputeExpression(initExpr);\r\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n              if (element.is(CommonFlags.CONST)) {\r\n                this.error(\r\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                  valueNode.range\r\n                );\r\n              }\r\n              initInStart = true;\r\n            }\r\n          }\r\n        } else if (previousValue == null) {\r\n          initExpr = module.createI32(0);\r\n        } else {\r\n          if (previousValueIsMut) {\r\n            this.error(\r\n              DiagnosticCode.Enum_member_must_have_initializer,\r\n              (<EnumValue>member).identifierNode.range.atEnd\r\n            );\r\n          }\r\n          initExpr = module.createBinary(BinaryOp.AddI32,\r\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n            module.createI32(1)\r\n          );\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.error(\r\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                member.declaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n        }\r\n        this.currentFlow = previousFlow;\r\n        if (initInStart) {\r\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\r\n          this.currentBody.push(\r\n            module.createSetGlobal(val.internalName, initExpr)\r\n          );\r\n          previousValueIsMut = true;\r\n        } else {\r\n          if (isInline) {\r\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\r\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\r\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            }\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n          }\r\n          val.isImmutable = true;\r\n          previousValueIsMut = false;\r\n        }\r\n        previousValue = <EnumValue>val;\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> = makeMap(),\r\n    alternativeReportNode: Node | null = null\r\n  ): Function | null {\r\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\r\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      prototype.parent, // relative to itself\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return null;\r\n    if (!this.compileFunction(instance)) return null; // reports\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles the body of a function within the specified flow. */\r\n  private compileFunctionBody(instance: Function): ExpressionRef[] {\r\n    var module = this.module;\r\n    var bodyNode = assert(instance.prototype.bodyNode);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = this.currentFlow;\r\n\r\n    // compile statements\r\n    var stmts: BinaryenExportRef[];\r\n    if (bodyNode.kind == NodeKind.BLOCK) {\r\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true);\r\n    } else {\r\n      // must be an expression statement if not a block\r\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\r\n\r\n      // must be an arrow function\r\n      assert(instance.prototype.arrowKind);\r\n\r\n      // none of the following can be an arrow function\r\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\r\n\r\n      let stmt = this.compileExpression(\r\n        (<ExpressionStatement>bodyNode).expression,\r\n        returnType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      flow.set(FlowFlags.RETURNS);\r\n      if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n      stmts = [ stmt ];\r\n    }\r\n\r\n    // make the main function call `start` implicitly, but only once\r\n    if (instance.prototype == this.program.explicitStartFunction) {\r\n      module.addGlobal(CompilerSymbols.started, NativeType.I32, true, module.createI32(0));\r\n      stmts.unshift(\r\n        module.createIf(\r\n          module.createUnary(\r\n            UnaryOp.EqzI32,\r\n            module.createGetGlobal(CompilerSymbols.started, NativeType.I32)\r\n          ),\r\n          module.createBlock(null, [\r\n            module.createCall(\"start\", null, NativeType.None),\r\n            module.createSetGlobal(CompilerSymbols.started, module.createI32(1))\r\n          ])\r\n        )\r\n      );\r\n    }\r\n\r\n    // make constructors return their instance pointer\r\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n      assert(instance.is(CommonFlags.INSTANCE));\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n\r\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        let thisLocalIndex = flow.is(FlowFlags.INLINE_CONTEXT)\r\n          ? assert(flow.lookupLocal(CommonSymbols.this_)).index\r\n          : 0;\r\n\r\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\r\n        if (!flow.is(FlowFlags.ALLOCATES)) {\r\n          // {\r\n          //   if (!this) this = <ALLOC>\r\n          //   this.a = X\r\n          //   this.b = Y\r\n          // }\r\n          stmts.push(\r\n            module.createIf(\r\n              module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                module.createGetLocal(thisLocalIndex, nativeSizeType)\r\n              ),\r\n              module.createSetLocal(thisLocalIndex,\r\n                this.makeAllocation(<Class>classInstance)\r\n              )\r\n            )\r\n          );\r\n          this.makeFieldInitialization(<Class>classInstance, stmts);\r\n        }\r\n\r\n        // implicitly return `this`\r\n        stmts.push(\r\n          module.createGetLocal(thisLocalIndex, nativeSizeType)\r\n        );\r\n      }\r\n\r\n      // check that super has been called if this is a derived class\r\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\r\n        this.error(\r\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\r\n          instance.prototype.declaration.range\r\n        );\r\n      }\r\n\r\n    // if this is a normal function, make sure that all branches return\r\n    } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        instance.prototype.signatureNode.returnType.range\r\n      );\r\n    }\r\n\r\n    return stmts;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var signature = instance.signature;\r\n    var bodyNode = instance.prototype.bodyNode;\r\n\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var funcRef: FunctionRef;\r\n\r\n    // concrete function\r\n    if (bodyNode) {\r\n\r\n      // must not be ambient\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          instance.identifierNode.range\r\n        );\r\n      }\r\n\r\n      // cannot have an annotated external name\r\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\r\n        let decoratorNodes = instance.decoratorNodes;\r\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          decorator.range\r\n        );\r\n      }\r\n\r\n      // compile body in this function's context\r\n      let previousFlow = this.currentFlow;\r\n      this.currentFlow = instance.flow;\r\n      let stmts = this.compileFunctionBody(instance);\r\n      this.currentFlow = previousFlow;\r\n\r\n      // create the function\r\n      funcRef = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        stmts.length\r\n          ? stmts.length == 1\r\n            ? stmts[0]\r\n            : module.createBlock(null, stmts, instance.signature.returnType.toNativeType())\r\n          : module.createNop()\r\n      );\r\n\r\n    // imported function\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          instance.identifierNode.range\r\n        );\r\n      }\r\n\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\r\n\r\n      // create the import\r\n      funcRef = module.addFunctionImport(\r\n        instance.internalName,\r\n        mangleImportName_moduleName,\r\n        mangleImportName_elementName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    instance.finalize(module, funcRef);\r\n    return true;\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> = makeMap(),\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = this.resolver.resolveClassInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      prototype.parent, // relative to itself\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n    var prototype = instance.prototype;\r\n    var staticMembers = (<ClassPrototype>prototype).members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                (<FunctionPrototype>element).identifierNode\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY_PROTOTYPE: {\r\n            let getter = (<PropertyPrototype>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                getter.identifierNode\r\n              );\r\n            }\r\n            let setter = (<PropertyPrototype>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                setter.identifierNode\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(instance.contextualTypeArguments),\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            element.set(CommonFlags.COMPILED);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterInstance;\r\n            if (getter) this.compileFunction(getter);\r\n            let setter = (<Property>element).setterInstance;\r\n            if (setter) this.compileFunction(setter);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // function table\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func.internalName);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\r\n    switch (statement.kind) {\r\n      case NodeKind.CLASSDECLARATION: {\r\n        let memberStatements = (<ClassDeclaration>statement).members;\r\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\r\n          this.compileTopLevelStatement(memberStatements[i], body);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.ENUMDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\r\n        assert(element.kind == ElementKind.ENUM);\r\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case NodeKind.NAMESPACEDECLARATION: {\r\n        let memberStatements = (<NamespaceDeclaration>statement).members;\r\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\r\n          this.compileTopLevelStatement(memberStatements[i], body);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        let declarations = (<VariableStatement>statement).declarations;\r\n        for (let i = 0, k = declarations.length; i < k; ++i) {\r\n          let element = this.program.getElementByDeclaration(declarations[i]);\r\n          assert(element.kind == ElementKind.GLOBAL);\r\n          if (\r\n            !element.is(CommonFlags.AMBIENT) && // delay imports\r\n            !element.hasDecorator(DecoratorFlags.LAZY)\r\n          ) this.compileGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.FIELDDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\r\n        if (element.kind == ElementKind.GLOBAL) { // static\r\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.EXPORT: {\r\n        if ((<ExportStatement>statement).normalizedPath != null) {\r\n          this.compileFileByPath(\r\n            <string>(<ExportStatement>statement).normalizedPath,\r\n            <StringLiteralExpression>(<ExportStatement>statement).path\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.IMPORT: {\r\n        this.compileFileByPath(\r\n          (<ImportStatement>statement).normalizedPath,\r\n          (<ImportStatement>statement).path\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTIONDECLARATION:\r\n      case NodeKind.METHODDECLARATION:\r\n      case NodeKind.INTERFACEDECLARATION:\r\n      case NodeKind.INDEXSIGNATUREDECLARATION:\r\n      case NodeKind.TYPEDECLARATION: break;\r\n      default: { // otherwise a top-level statement that is part of the start function's body\r\n        let stmt = this.compileStatement(statement);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  compileStatement(statement: Statement, isLastStatementInBody: bool = false): ExpressionRef {\r\n    var module = this.module;\r\n    var stmt: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        stmt = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        stmt = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        stmt = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastStatementInBody);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        stmt = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!stmt) stmt = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // TODO: integrate inner type declaration into flow\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          statement.range\r\n        );\r\n        stmt = module.createUnreachable();\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        stmt = module.createUnreachable();\r\n      }\r\n    }\r\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\r\n    return stmt;\r\n  }\r\n\r\n  compileStatements(statements: Statement[], isBody: bool = false): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    var stmts = new Array<ExpressionRef>(numStatements);\r\n    stmts.length = 0;\r\n    var flow = this.currentFlow;\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\r\n      switch (getExpressionId(stmt)) {\r\n        case ExpressionId.Block: {\r\n          if (!getBlockName(stmt)) {\r\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: stmts.push(stmt);\r\n        case ExpressionId.Nop:\r\n      }\r\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\r\n        break;\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n    var outerFlow = this.currentFlow;\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n\r\n    var stmts = this.compileStatements(statements);\r\n    var stmt = stmts.length == 0\r\n      ? this.module.createNop()\r\n      : stmts.length == 1\r\n        ? stmts[0]\r\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\r\n\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.inherit(innerFlow);\r\n    this.currentFlow = outerFlow;\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFlow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.BREAKS);\r\n    return module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFlow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES);\r\n    return module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n    // TODO: check if condition is always false and if so, omit it (just a block)\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    this.currentFlow = outerFlow;\r\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    outerFlow.inherit(innerFlow);\r\n\r\n    var block: ExpressionRef[] = [\r\n      module.createLoop(continueLabel,\r\n        terminated\r\n          ? body // skip trailing continue if unnecessary\r\n          : module.createBlock(null, [\r\n              body,\r\n              module.createBreak(continueLabel, condExpr)\r\n            ], NativeType.None)\r\n      )\r\n    ];\r\n    if (terminated) block.push(module.createUnreachable());\r\n    return module.createBlock(breakLabel, block);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n    var repeatLabel = \"repeat|\" + label;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initExpr = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : 0;\r\n    var condExpr: ExpressionRef = 0;\r\n    var alwaysTrue = false;\r\n    if (statement.condition) {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n      // check if the condition is always true\r\n      let condPre = module.precomputeExpression(condExpr);\r\n      if (getExpressionId(condPre) == ExpressionId.Const) {\r\n        assert(getExpressionType(condPre) == NativeType.I32);\r\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\r\n        // TODO: could skip compilation if the condition is always false here, but beware that the\r\n        // initializer could still declare new 'var's that are used later on.\r\n      }\r\n      // recompile to original\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    } else {\r\n      // omitted condition is always true\r\n      condExpr = module.createI32(1);\r\n      alwaysTrue = true;\r\n    }\r\n    var incrExpr = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n      : 0;\r\n    var bodyStatement = statement.statement;\r\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\r\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\r\n      : this.compileStatement(bodyStatement);\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    this.currentFlow = outerFlow;\r\n    var usesContinue = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n\r\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\r\n    if (initExpr) breakBlock.push(initExpr);\r\n\r\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\r\n    if (usesContinue) {\r\n      repeatBlock.push(\r\n        module.createBlock(continueLabel, [ // inner 'continue' block\r\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\r\n          bodyExpr\r\n        ], NativeType.None)\r\n      );\r\n    } else { // can omit the 'continue' block\r\n      repeatBlock.push(\r\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\r\n      );\r\n      repeatBlock.push(bodyExpr);\r\n    }\r\n    if (incrExpr) repeatBlock.push(incrExpr);\r\n    repeatBlock.push(\r\n      module.createBreak(repeatLabel)\r\n    );\r\n\r\n    breakBlock.push(\r\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\r\n    );\r\n\r\n    return module.createBlock(breakLabel, breakBlock);\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n    var outerFlow = this.currentFlow;\r\n    var actualFunction = outerFlow.actualFunction;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    // Try to eliminate unnecesssary branches if the condition is constant\r\n    var condExprPrecomp = module.precomputeExpression(condExpr);\r\n    if (\r\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n      getExpressionType(condExprPrecomp) == NativeType.I32\r\n    ) {\r\n      return getConstValueI32(condExprPrecomp)\r\n        ? this.compileStatement(ifTrue)\r\n        : ifFalse\r\n          ? this.compileStatement(ifFalse)\r\n          : module.createNop();\r\n\r\n    // Otherwise recompile to the original and let the optimizer decide\r\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var ifTrueFlow = outerFlow.fork();\r\n    this.currentFlow = ifTrueFlow;\r\n    var ifTrueExpr = this.compileStatement(ifTrue);\r\n    ifTrueFlow.freeScopedLocals();\r\n    this.currentFlow = outerFlow;\r\n\r\n    var ifFalseExpr: ExpressionRef = 0;\r\n    if (ifFalse) {\r\n      let ifFalseFlow = outerFlow.fork();\r\n      this.currentFlow = ifFalseFlow;\r\n      ifFalseExpr = this.compileStatement(ifFalse);\r\n      ifFalseFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\r\n    } else {\r\n      outerFlow.inheritConditional(ifTrueFlow);\r\n    }\r\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement, isLastStatementInBody: bool): ExpressionRef {\r\n    var module = this.module;\r\n    var expr: ExpressionRef = 0;\r\n    var flow = this.currentFlow;\r\n    var returnType = flow.returnType;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    if (statement.value) {\r\n      if (returnType == Type.void) {\r\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          statement.value.range, this.currentType.toString(), returnType.toString()\r\n        );\r\n        this.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      expr = this.compileExpression(\r\n        statement.value,\r\n        returnType,\r\n        ConversionKind.IMPLICIT,\r\n        flow.actualFunction.is(CommonFlags.MODULE_EXPORT)\r\n          ? WrapMode.WRAP\r\n          : WrapMode.NONE\r\n      );\r\n\r\n      // Remember whether returning a properly wrapped value\r\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n\r\n    } else if (returnType != Type.void) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        statement.range, \"void\", returnType.toString()\r\n      );\r\n      expr = module.createUnreachable();\r\n    }\r\n\r\n    // If the last statement anyway, make it the block's return value\r\n    if (isLastStatementInBody) return expr ? expr : module.createNop();\r\n\r\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) return module.createBreak(assert(flow.inlineReturnLabel), 0, expr);\r\n\r\n    return module.createReturn(expr);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n    if (!numCases) {\r\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    }\r\n\r\n    // Everything within a switch uses the same break context\r\n    var outerFlow = this.currentFlow;\r\n    var context = outerFlow.pushBreakLabel();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = outerFlow.getTempLocal(Type.u32, false);\r\n    var tempLocalIndex = tempLocal.index;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    outerFlow.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    var alwaysReturnsWrapped = true;\r\n    var alwaysThrows = true;\r\n    var alwaysAllocates = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n\r\n      // Each switch case initiates a new branch\r\n      let innerFlow = outerFlow.fork();\r\n      this.currentFlow = innerFlow;\r\n      let breakLabel = \"break|\" + context;\r\n      innerFlow.breakLabel = breakLabel;\r\n\r\n      let isLast = i == numCases - 1;\r\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\r\n      stmts[0] = currentBlock;\r\n      let count = 1;\r\n      let terminated = false;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        let stmt = this.compileStatement(statements[j]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          stmts[count++] = stmt;\r\n          if (innerFlow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n            terminated = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      stmts.length = count;\r\n      if (terminated || isLast) {\r\n        if (!innerFlow.is(FlowFlags.RETURNS)) alwaysReturns = false;\r\n        if (!innerFlow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\r\n        if (!innerFlow.is(FlowFlags.THROWS)) alwaysThrows = false;\r\n        if (!innerFlow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      innerFlow.unset(\r\n        FlowFlags.BREAKS |\r\n        FlowFlags.CONDITIONALLY_BREAKS\r\n      );\r\n      innerFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\r\n    }\r\n    outerFlow.popBreakLabel();\r\n\r\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\r\n    if (defaultIndex >= 0) {\r\n      if (alwaysReturns) outerFlow.set(FlowFlags.RETURNS);\r\n      if (alwaysReturnsWrapped) outerFlow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (alwaysThrows) outerFlow.set(FlowFlags.THROWS);\r\n      if (alwaysAllocates) outerFlow.set(FlowFlags.ALLOCATES);\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n    var flow = this.currentFlow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return compileAbort(this, null, statement);\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    // TODO: can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\r\n  compileVariableStatement(statement: VariableStatement): ExpressionRef {\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n    var flow = this.currentFlow;\r\n    var initializers = new Array<ExpressionRef>();\r\n    var resolver = this.resolver;\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let initExpr: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = resolver.resolveType( // reports\r\n          declaration.type,\r\n          flow.actualFunction,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          initExpr = this.compileExpression( // reports\r\n            declaration.initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        initExpr = this.compileExpressionRetainType( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          WrapMode.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      let isInlined = false;\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (initExpr) {\r\n          initExpr = this.module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\r\n            let local = new Local(name, -1, type, flow.parentFunction);\r\n            switch (getExpressionType(initExpr)) {\r\n              case NativeType.I32: {\r\n                local.setConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI32(initExpr),\r\n                    0\r\n                  ),\r\n                  type\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local.setConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI64Low(initExpr),\r\n                    getConstValueI64High(initExpr)\r\n                  ),\r\n                  type\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                return this.module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = flow.scopedLocals;\r\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isInlined = true;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (!isInlined) {\r\n        let local: Local;\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          local = flow.addScopedLocal(name, type, false, declaration.name); // reports if duplicate\r\n        } else {\r\n          if (flow.lookupLocal(name)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, name\r\n            );\r\n            continue;\r\n          }\r\n          local = flow.parentFunction.addLocal(type, name, declaration);\r\n        }\r\n        if (initExpr) {\r\n          initializers.push(\r\n            this.compileAssignmentWithValue(declaration.name, initExpr)\r\n          );\r\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\r\n          }\r\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped(local.index, true); // zero\r\n        }\r\n      }\r\n    }\r\n    return initializers.length   // we can unwrap these here because the\r\n      ? initializers.length == 1 // source didn't tell us exactly what to do\r\n        ? initializers[0]\r\n        : this.module.createBlock(null, initializers, NativeType.None)\r\n      : 0;\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    // Try to eliminate unnecesssary loops if the condition is constant\r\n    var condExprPrecomp = module.precomputeExpression(condExpr);\r\n    if (\r\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n      getExpressionType(condExprPrecomp) == NativeType.I32\r\n    ) {\r\n      if (!getConstValueI32(condExprPrecomp)) return module.createNop();\r\n\r\n    // Otherwise recompile to the original and let the optimizer decide\r\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysTrue = false; // TODO\r\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    this.currentFlow = outerFlow;\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condExpr,\r\n          terminated\r\n            ? body // skip trailing continue if unnecessary\r\n            : module.createBlock(null, [\r\n                body,\r\n                module.createBreak(continueLabel)\r\n              ], NativeType.None)\r\n        )\r\n      )\r\n    ]);\r\n  }\r\n\r\n  // expressions\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    retainType: bool\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !retainType &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        // monkey-patch for converting built-in floats to f32 implicitly\r\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(\r\n          <IdentifierExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n    var currentType = this.currentType;\r\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\r\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\r\n      this.currentType = contextualType;\r\n    } else if (wrapMode == WrapMode.WRAP) {\r\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\r\n    }\r\n\r\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n    return expr;\r\n  }\r\n\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.compileExpression(\r\n      expression,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      wrapMode\r\n    );\r\n  }\r\n\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.module.precomputeExpression(\r\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\r\n    );\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    fromType: Type,\r\n    toType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    assert(conversionKind != ConversionKind.NONE);\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\r\n\r\n    if (!fromType.isAssignableTo(toType)) {\r\n      if (conversionKind == ConversionKind.IMPLICIT) {\r\n        this.error(\r\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n          reportNode.range, fromType.toString(), toType.toString()\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType == Type.bool) {\r\n            expr = module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n            wrapMode = WrapMode.NONE;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType == Type.bool) {\r\n            expr = module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n            wrapMode = WrapMode.NONE;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      // i64 to ...\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32 or smaller\r\n        if (toType == Type.bool) {\r\n          expr = module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n          wrapMode = WrapMode.NONE;\r\n        } else if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n        }\r\n\r\n      // i32 or smaller to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(\r\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\r\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\r\n        );\r\n        wrapMode = WrapMode.NONE;\r\n\r\n      // i32 to i32\r\n      } else {\r\n        // small i32 to ...\r\n        if (fromType.is(TypeFlags.SHORT)) {\r\n          // small i32 to larger i32\r\n          if (fromType.size < toType.size) {\r\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\r\n            wrapMode = WrapMode.NONE;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return wrapMode == WrapMode.WRAP\r\n      ? this.ensureSmallIntegerWrap(expr, toType)\r\n      : expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    switch (expression.assertionKind) {\r\n      case AssertionKind.PREFIX:\r\n      case AssertionKind.AS: {\r\n        let toType = this.resolver.resolveType( // reports\r\n          assert(expression.toType),\r\n          this.currentFlow.actualFunction,\r\n          this.currentFlow.contextualTypeArguments\r\n        );\r\n        if (!toType) return this.module.createUnreachable();\r\n        return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n      }\r\n      case AssertionKind.NONNULL: {\r\n        assert(!expression.toType);\r\n        let expr = this.compileExpressionRetainType(expression.expression, contextualType, WrapMode.NONE);\r\n        this.currentType = this.currentType.nonNullableType;\r\n        return expr;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '==' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.V128: {\r\n            expr = module.createUnary(UnaryOp.AllTrueVecI8x16,\r\n              module.createBinary(BinaryOp.EqVecI8x16, leftExpr, rightExpr)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '!=' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.V128: {\r\n            expr = module.createUnary(UnaryOp.AnyTrueVecI8x16,\r\n              module.createBinary(BinaryOp.NeVecI8x16, leftExpr, rightExpr)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // addition might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // subtraction might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POW);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType.kind == TypeKind.F32) {\r\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.lookupGlobal(LibrarySymbols.Mathf);\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(LibrarySymbols.pow) : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            this.currentType,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE,\r\n            left\r\n          );\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.lookupGlobal(LibrarySymbols.Math);\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(LibrarySymbols.pow) : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.createUnreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\r\n          case TypeKind.I16: // ^\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.REM);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.lookupGlobal(LibrarySymbols.Mathf);\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(LibrarySymbols.mod) : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.lookupGlobal(LibrarySymbols.Math);\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(LibrarySymbols.mod) : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n          }\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            rightExpr,\r\n            expr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            rightExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            )\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\r\n          expr = this.module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            expr,\r\n            rightExpr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            ),\r\n            rightExpr\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    valueExpr: ExpressionRef,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\r\n      argumentExpressions = [];\r\n    } else {\r\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\r\n    }\r\n    return this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg\r\n    );\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    leftExpr: ExpressionRef,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\r\n      argumentExpressions = [ right ];\r\n    } else {\r\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\r\n    }\r\n    var ret = this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg\r\n    );\r\n    return ret;\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var resolver = program.resolver;\r\n    var flow = this.currentFlow;\r\n    var target = resolver.resolveExpression(expression, flow); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var targetType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        targetType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\r\n        if (!setterPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!setterInstance) return this.module.createUnreachable();\r\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n        targetType = setterInstance.signature.parameterTypes[0];\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let setterInstance = (<Property>target).setterInstance;\r\n        if (!setterInstance) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n        targetType = setterInstance.signature.parameterTypes[0];\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (resolver.currentElementExpression) { // indexed access\r\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return this.module.createUnreachable();\r\n          }\r\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\r\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    assert(targetType != Type.void);\r\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    return this.compileAssignmentWithValue(\r\n      expression,\r\n      valueExpr,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileAssignmentWithValue(\r\n    expression: Expression,\r\n    valueWithCorrectType: ExpressionRef,\r\n    tee: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var target = this.resolver.resolveExpression(expression, flow); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let type = (<Local>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\r\n        }\r\n        return tee\r\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\r\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range,\r\n            target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\r\n        if (tee) {\r\n          let nativeType = type.toNativeType();\r\n          let internalName = target.internalName;\r\n          return module.createBlock(null, [ // emulated teeGlobal\r\n            module.createSetGlobal(internalName, valueWithCorrectType),\r\n            module.createGetGlobal(internalName, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let initializerNode = (<Field>target).initializerNode;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            initializerNode\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Field>target).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let thisExpression = assert(this.resolver.currentThisExpression);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        let type = (<Field>target).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        let nativeType = type.toNativeType();\r\n        if (type.kind == TypeKind.BOOL) {\r\n          // make sure bools are wrapped (usually are) when storing as 8 bits\r\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\r\n        }\r\n        if (tee) {\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(\r\n            type,\r\n            !flow.canOverflow(valueWithCorrectType, type)\r\n          );\r\n          let tempLocalIndex = tempLocal.index;\r\n          // TODO: simplify if valueWithCorrectType has no side effects\r\n          // TODO: call __gc_link here if a GC is present\r\n          return module.createBlock(null, [\r\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\r\n            module.createStore(\r\n              type.byteSize,\r\n              thisExpr,\r\n              module.createGetLocal(tempLocalIndex, nativeType),\r\n              nativeType,\r\n              (<Field>target).memoryOffset\r\n            ),\r\n            module.createGetLocal(tempLocalIndex, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          // TODO: call __gc_link here if a GC is present\r\n          return module.createStore(\r\n            type.byteSize,\r\n            thisExpr,\r\n            valueWithCorrectType,\r\n            nativeType,\r\n            (<Field>target).memoryOffset\r\n          );\r\n        }\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\r\n        if (!setterPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!setterInstance) return module.createUnreachable();\r\n        // call just the setter if the return value isn't of interest\r\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\r\n        // otherwise call the setter first, then the getter\r\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\r\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!getterInstance) return module.createUnreachable();\r\n        let returnType = getterInstance.signature.returnType;\r\n        let nativeReturnType = returnType.toNativeType();\r\n        return module.createBlock(null, [\r\n          this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\r\n          this.makeCallDirect(getterInstance) // sets currentType\r\n        ], nativeReturnType);\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let setterInstance = (<Property>target).setterInstance;\r\n        if (!setterInstance) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        // call just the setter if the return value isn't of interest\r\n        if (!tee) {\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\r\n        }\r\n        // otherwise call the setter first, then the getter\r\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\r\n        let returnType = getterInstance.signature.returnType;\r\n        let nativeReturnType = returnType.toNativeType();\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          assert(this.resolver.currentThisExpression),\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        let tempLocal = flow.getAndFreeTempLocal(returnType, false);\r\n        let tempLocalIndex = tempLocal.index;\r\n        return module.createBlock(null, [\r\n          this.makeCallDirect(setterInstance, [ // set and remember the target\r\n            module.createTeeLocal(tempLocalIndex, thisExpr),\r\n            valueWithCorrectType\r\n          ]),\r\n          this.makeCallDirect(getterInstance, [ // get from remembered target\r\n            module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n          ])\r\n        ], nativeReturnType);\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.resolver.currentElementExpression;\r\n        if (elementExpression) {\r\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              expression.range, target.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, target.internalName\r\n            );\r\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n            return module.createUnreachable();\r\n          }\r\n          let targetType = (<Class>target).type;\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          let elementExpr = this.compileExpression(\r\n            elementExpression,\r\n            Type.i32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          if (tee) {\r\n            let tempLocalTarget = flow.getTempLocal(targetType, false);\r\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType, false);\r\n            let returnType = indexedGet.signature.returnType;\r\n            flow.freeTempLocal(tempLocalTarget);\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(indexedSet, [\r\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\r\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(indexedGet, [\r\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n              ])\r\n            ], returnType.toNativeType());\r\n          } else {\r\n            return this.makeCallDirect(indexedSet, [\r\n              thisExpr,\r\n              elementExpr,\r\n              valueWithCorrectType\r\n            ]);\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // handle call to super\r\n    if (expression.expression.kind == NodeKind.SUPER) {\r\n      let flow = this.currentFlow;\r\n      let actualFunction = flow.actualFunction;\r\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n        this.error(\r\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n\r\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let baseClassInstance = assert((<Class>classInstance).base);\r\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n\r\n      // {\r\n      //   this = super(this || <ALLOC>, ...args)\r\n      //   this.a = X\r\n      //   this.b = Y\r\n      // }\r\n      let stmts: ExpressionRef[] = [\r\n        module.createSetLocal(thisLocal.index,\r\n          this.compileCallDirect(\r\n            this.ensureConstructor(baseClassInstance, expression),\r\n            expression.arguments,\r\n            expression,\r\n            module.createIf(\r\n              module.createGetLocal(thisLocal.index, nativeSizeType),\r\n              module.createGetLocal(thisLocal.index, nativeSizeType),\r\n              this.makeAllocation(<Class>classInstance)\r\n            )\r\n          )\r\n        )\r\n      ];\r\n      this.makeFieldInitialization(<Class>classInstance, stmts);\r\n\r\n      // check that super had been called before accessing allocating `this`\r\n      if (flow.isAny(\r\n        FlowFlags.ALLOCATES |\r\n        FlowFlags.CONDITIONALLY_ALLOCATES\r\n      )) {\r\n        this.error(\r\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\r\n      this.currentType = Type.void;\r\n      return module.createBlock(null, stmts);\r\n    }\r\n\r\n    // otherwise resolve normally\r\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          instance = this.resolver.resolveFunctionInclTypeArguments(\r\n            prototype,\r\n            typeArguments,\r\n            flow.actualFunction.parent, // relative to caller\r\n            makeMap<string,Type>(flow.contextualTypeArguments),\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let inferredTypes = new Map<string,Type | null>();\r\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\r\n          let numTypeParameters = typeParameterNodes.length;\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\r\n          }\r\n          // let numInferred = 0;\r\n          let parameterNodes = prototype.signatureNode.parameters;\r\n          let numParameters = parameterNodes.length;\r\n          let argumentNodes = expression.arguments;\r\n          let numArguments = argumentNodes.length;\r\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\r\n          for (let i = 0; i < numParameters; ++i) {\r\n            let typeNode = parameterNodes[i].type;\r\n            let templateName = typeNode.kind == NodeKind.TYPE && !(<TypeNode>typeNode).name.next\r\n              ? (<TypeNode>typeNode).name.identifier.text\r\n              : null;\r\n            let argumentExpression = i < numArguments\r\n              ? argumentNodes[i]\r\n              : parameterNodes[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameters.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            if (templateName !== null && inferredTypes.has(templateName)) {\r\n              let inferredType = inferredTypes.get(templateName);\r\n              if (inferredType) {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\r\n                let commonType: Type | null;\r\n                if (!(commonType = Type.commonDenominator(inferredType, this.currentType, true))) {\r\n                  if (!(commonType = Type.commonDenominator(inferredType, this.currentType, false))) {\r\n                    this.error(\r\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\r\n                    );\r\n                    return module.createUnreachable();\r\n                  }\r\n                }\r\n                inferredType = commonType;\r\n              } else {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\r\n                inferredType = this.currentType;\r\n                // ++numInferred;\r\n              }\r\n              inferredTypes.set(templateName, inferredType);\r\n            } else {\r\n              let concreteType = this.resolver.resolveType(\r\n                parameterNodes[i].type,\r\n                flow.actualFunction,\r\n                flow.contextualTypeArguments\r\n              );\r\n              if (!concreteType) return module.createUnreachable();\r\n              argumentExprs[i] = this.compileExpression(\r\n                argumentExpression,\r\n                concreteType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              );\r\n            }\r\n          }\r\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\r\n            resolvedTypeArguments[i] = inferredType;\r\n          }\r\n          instance = this.resolver.resolveFunction(\r\n            prototype,\r\n            resolvedTypeArguments,\r\n            makeMap<string,Type>(flow.contextualTypeArguments)\r\n          );\r\n          if (!instance) return this.module.createUnreachable();\r\n          return this.makeCallDirect(instance, argumentExprs);\r\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\r\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\r\n          // so inlining can be performed in `makeCallDirect` instead?\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = this.resolver.resolveFunction(prototype, null);\r\n        }\r\n        if (!instance) return this.module.createUnreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          if ((<Local>target).is(CommonFlags.INLINED)) {\r\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\r\n          } else {\r\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\r\n          }\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(\r\n          expression.expression,\r\n          (<FunctionTarget>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        break;\r\n      }\r\n\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\r\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\r\n        if (!getterInstance) return module.createUnreachable();\r\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\r\n        signature = this.currentType.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, this.currentType.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let getterInstance = assert((<Property>target).getterInstance);\r\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\r\n          this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          )\r\n        );\r\n        signature = this.currentType.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, this.currentType.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        break;\r\n      }\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var typeArguments: Type[] | null = null;\r\n\r\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\r\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\r\n    var typeParameterNodes = prototype.typeParameterNodes;\r\n    var typeArgumentNodes = expression.typeArguments;\r\n    if (expression.typeArguments) {\r\n      if (!prototype.is(CommonFlags.GENERIC)) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          expression.range, prototype.internalName\r\n        );\r\n      }\r\n      typeArguments = this.resolver.resolveTypeArguments(\r\n        assert(typeParameterNodes),\r\n        typeArgumentNodes,\r\n        this.currentFlow.actualFunction.parent,\r\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n\r\n    // now compile the builtin, which usually returns a block of code that replaces the call.\r\n    var expr = compileBuiltinCall(\r\n      this,\r\n      prototype,\r\n      typeArguments,\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    // Inline if explicitly requested\r\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      if (this.currentInlineFunctions.includes(instance)) {\r\n        this.warning(\r\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\r\n          reportNode.range, instance.internalName\r\n        );\r\n      } else {\r\n        this.currentInlineFunctions.push(instance);\r\n        let expr = this.compileCallInlinePrechecked(instance, argumentExpressions, thisArg);\r\n        this.currentInlineFunctions.pop();\r\n        return expr;\r\n      }\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallDirect(instance, operands);\r\n  }\r\n\r\n  // Depends on being pre-checked in compileCallDirect\r\n  private compileCallInlinePrechecked(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // Create a new inline flow and use it to compile the function as a block\r\n    var previousFlow = this.currentFlow;\r\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\r\n\r\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\r\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\r\n    var body = [];\r\n\r\n    if (thisArg) {\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let thisType = assert(instance.signature.thisType);\r\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, false);\r\n      body.push(\r\n        module.createSetLocal(thisLocal.index, thisArg)\r\n      );\r\n      let baseInstance = (<Class>classInstance).base;\r\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\r\n    }\r\n\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i) {\r\n      let paramExpr = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(\r\n        signature.getParameterName(i),\r\n        parameterTypes[i],\r\n        !previousFlow.canOverflow(paramExpr, parameterTypes[i])\r\n      );\r\n      body.push(\r\n        module.createSetLocal(argumentLocal.index, paramExpr)\r\n      );\r\n    }\r\n\r\n    // Compile optional parameter initializers in the scope of the inlined flow\r\n    this.currentFlow = flow;\r\n    var numParameters = signature.parameterTypes.length;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let initExpr = this.compileExpression(\r\n        assert(instance.prototype.signatureNode.parameters[i].initializer),\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.WRAP\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(\r\n        signature.getParameterName(i),\r\n        parameterTypes[i],\r\n        !flow.canOverflow(initExpr, parameterTypes[i])\r\n      );\r\n      body.push(\r\n        module.createSetLocal(argumentLocal.index, initExpr)\r\n      );\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    {\r\n      let stmts = this.compileFunctionBody(instance);\r\n      for (let i = 0, k = stmts.length; i < k; ++i) body.push(stmts[i]);\r\n    }\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    flow.freeScopedLocals();\r\n    var returnType = flow.returnType;\r\n    this.currentFlow = previousFlow;\r\n    this.currentType = returnType;\r\n\r\n    // Create an outer block that we can break to when returning a value out of order\r\n    return module.createBlock(flow.inlineReturnLabel, body, returnType.toNativeType());\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.signatureNode.parameters;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampoline = new Function(\r\n      original.name + \"|trampoline\",\r\n      original.prototype,\r\n      trampolineSignature,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFlow = this.currentFlow;\r\n    this.currentFlow = trampoline.flow;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"outOfRange\", [\r\n        module.createSwitch(names, \"outOfRange\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.createBinary(\r\n                BinaryOp.SubI32,\r\n                module.createGetGlobal(CompilerSymbols.argc, NativeType.I32),\r\n                module.createI32(minArguments)\r\n              )\r\n            : module.createGetGlobal(CompilerSymbols.argc, NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      let declaration = originalParameterDeclarations[minArguments + i];\r\n      let initializer = declaration.initializer;\r\n      let initExpr: ExpressionRef;\r\n      if (initializer) {\r\n        initExpr = module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP\r\n          )\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\r\n          declaration.range\r\n        );\r\n        initExpr = module.createUnreachable();\r\n      }\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        initExpr,\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFlow = previousFlow;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var funcRef = module.addFunction(\r\n      trampoline.internalName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        trampolineSignature.returnType,\r\n        trampolineSignature.thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        CompilerSymbols.argc,\r\n        NativeType.I32,\r\n        true,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n    return CompilerSymbols.argc;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    var internalName = CompilerSymbols.setargc;\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(internalName,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.createSetGlobal(this.ensureArgcVar(),\r\n          module.createGetLocal(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(internalName, \"_setargc\");\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      let parameterNodes = instance.prototype.signatureNode.parameters;\r\n      assert(parameterNodes.length == parameterTypes.length);\r\n      let allOptionalsAreConstant = true;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        let initializer = parameterNodes[i].initializer;\r\n        if (!(initializer && nodeIsConstantValue(initializer.kind))) {\r\n          allOptionalsAreConstant = false;\r\n          break;\r\n        }\r\n      }\r\n      if (allOptionalsAreConstant) { // inline into the call\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(\r\n            this.compileExpression(\r\n              <Expression>parameterNodes[i].initializer,\r\n              parameterTypes[i],\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            )\r\n          );\r\n        }\r\n      } else { // otherwise fill up with zeroes and call the trampoline\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(parameterTypes[i].toNativeZero(module));\r\n        }\r\n        if (!isCallImport) {\r\n          let original = instance;\r\n          instance = this.ensureTrampoline(instance);\r\n          if (!this.compileFunction(instance)) return module.createUnreachable();\r\n          instance.flow.flags = original.flow.flags;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          this.currentType = returnType;\r\n          return module.createBlock(null, [\r\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\r\n            module.createCall(instance.internalName, operands, nativeReturnType)\r\n          ], nativeReturnType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // otherwise just call through\r\n    this.currentType = returnType;\r\n    return module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    this.currentType = returnType;\r\n    return module.createBlock(null, [\r\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\r\n        module.createI32(numArguments)\r\n      ),\r\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\r\n    ], returnType.toNativeType()); // not necessarily wrapped\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(\r\n        expressions[i],\r\n        Type.void, // drop all\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(\r\n      expressions[numExpressions],\r\n      contextualType, // except last\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE\r\n    );\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var target = this.resolver.resolveElementAccessExpression(\r\n      expression,\r\n      this.currentFlow,\r\n      contextualType\r\n    ); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS: {\r\n        let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.expression.range, (<Class>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let thisArg = this.compileExpression(\r\n          expression.expression,\r\n          (<Class>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        return this.compileCallDirect(indexedGet, [\r\n          expression.elementExpression\r\n        ], expression, thisArg);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileFunctionExpression(\r\n    expression: FunctionExpression,\r\n    contextualSignature: Signature | null\r\n  ): ExpressionRef {\r\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\r\n    assert(!declaration.typeParameters); // function expression cannot be generic\r\n    var flow = this.currentFlow;\r\n    var actualFunction = flow.actualFunction;\r\n    var prototype = new FunctionPrototype(\r\n      declaration.name.text.length\r\n        ? declaration.name.text\r\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\r\n      actualFunction,\r\n      declaration,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var instance: Function | null;\r\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\r\n\r\n    // compile according to context. this differs from a normal function in that omitted parameter\r\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\r\n    if (contextualSignature) {\r\n      let signatureNode = prototype.signatureNode;\r\n      let parameterNodes = signatureNode.parameters;\r\n      let numPresentParameters = parameterNodes.length;\r\n\r\n      // must not require more than the maximum number of parameters\r\n      let parameterTypes = contextualSignature.parameterTypes;\r\n      let numParameters = parameterTypes.length;\r\n      if (numPresentParameters > numParameters) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          expression.range, numParameters.toString(), numPresentParameters.toString()\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n\r\n      // check non-omitted parameter types\r\n      let parameterNames = new Array<string>(numPresentParameters);\r\n      for (let i = 0; i < numPresentParameters; ++i) {\r\n        let parameterNode = parameterNodes[i];\r\n        parameterNames[i] = parameterNode.name.text; // use actual name\r\n        if (!isTypeOmitted(parameterNode.type)) {\r\n          let resolvedType = this.resolver.resolveType(\r\n            parameterNode.type,\r\n            actualFunction.parent,\r\n            contextualTypeArguments\r\n          );\r\n          if (!resolvedType) return this.module.createUnreachable();\r\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\r\n            );\r\n            return this.module.createUnreachable();\r\n          }\r\n        }\r\n        // any unused parameters are inherited but ignored\r\n      }\r\n\r\n      // check non-omitted return type\r\n      let returnType = contextualSignature.returnType;\r\n      if (!isTypeOmitted(signatureNode.returnType)) {\r\n        let resolvedType = this.resolver.resolveType(\r\n          signatureNode.returnType,\r\n          actualFunction.parent,\r\n          contextualTypeArguments\r\n        );\r\n        if (!resolvedType) return this.module.createUnreachable();\r\n        if (\r\n          returnType == Type.void\r\n            ? resolvedType != Type.void\r\n            : !resolvedType.isStrictlyAssignableTo(returnType)\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n      }\r\n\r\n      // check explicit this type\r\n      let thisType = contextualSignature.thisType;\r\n      let thisTypeNode = signatureNode.explicitThisType;\r\n      if (thisTypeNode) {\r\n        if (!thisType) {\r\n          this.error(\r\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n            thisTypeNode.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let resolvedType = this.resolver.resolveType(\r\n          thisTypeNode,\r\n          actualFunction.parent,\r\n          contextualTypeArguments\r\n        );\r\n        if (!resolvedType) return this.module.createUnreachable();\r\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n      }\r\n\r\n      let signature = new Signature(parameterTypes, returnType, thisType);\r\n      signature.requiredParameters = numParameters; // !\r\n      signature.parameterNames = parameterNames;\r\n      instance = new Function(\r\n        prototype.name,\r\n        prototype,\r\n        signature,\r\n        contextualTypeArguments\r\n      );\r\n      if (!this.compileFunction(instance)) return this.module.createUnreachable();\r\n      this.currentType = contextualSignature.type;\r\n\r\n    // otherwise compile like a normal function\r\n    } else {\r\n      instance = this.compileFunctionUsingTypeArguments(\r\n        prototype,\r\n        [],\r\n        contextualTypeArguments\r\n      );\r\n      if (!instance) return this.module.createUnreachable();\r\n      this.currentType = instance.signature.type;\r\n    }\r\n\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\r\n  private maybeCompileEnclosingSource(expression: Expression): void {\r\n    var internalPath = expression.range.source.internalPath;\r\n    var filesByName = this.program.filesByName;\r\n    assert(filesByName.has(internalPath));\r\n    var enclosingFile = filesByName.get(internalPath)!;\r\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\r\n      this.compileFileByPath(internalPath, expression);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var actualFunction = flow.actualFunction;\r\n\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // {\r\n              //   if (!this) this = <ALLOC>\r\n              //   this.a = X\r\n              //   this.b = Y\r\n              //   return this\r\n              // }\r\n              let stmts: ExpressionRef[] = [\r\n                module.createIf(\r\n                  module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                    module.createGetLocal(thisLocal.index, nativeSizeType)\r\n                  ),\r\n                  module.createSetLocal(thisLocal.index,\r\n                    this.makeAllocation(<Class>classInstance)\r\n                  )\r\n                )\r\n              ];\r\n              this.makeFieldInitialization(<Class>classInstance, stmts);\r\n              stmts.push(\r\n                module.createGetLocal(thisLocal.index, nativeSizeType)\r\n              );\r\n              this.currentType = thisLocal.type;\r\n              return module.createBlock(null, stmts, nativeSizeType);\r\n            }\r\n          }\r\n          // if not a constructor, `this` type can differ\r\n          let thisType = assert(actualFunction.signature.thisType);\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(thisLocal.index, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let flow = this.currentFlow;\r\n        let actualFunction = flow.actualFunction;\r\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\r\n            // TS1034 in the parser effectively limits this to property accesses\r\n            this.error(\r\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\r\n              expression.range\r\n            );\r\n          }\r\n        }\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let baseClassInstance = (<Class>classInstance).base;\r\n          if (baseClassInstance) {\r\n            let superType = baseClassInstance.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    this.maybeCompileEnclosingSource(expression);\r\n\r\n    // otherwise resolve\r\n    var target = this.resolver.resolveIdentifier( // reports\r\n      expression,\r\n      flow,\r\n      this.currentEnum || actualFunction\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let localType = (<Local>target).type;\r\n        assert(localType != Type.void);\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\r\n        }\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        this.currentType = localType;\r\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\r\n          return this.module.createI32(i64_low((<EnumValue>target).constantIntegerValue));\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = this.resolver.resolveFunction(\r\n          <FunctionPrototype>target,\r\n          null,\r\n          makeMap<string,Type>(flow.contextualTypeArguments)\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.createI32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileInstanceOfExpression(\r\n    expression: InstanceOfExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\r\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\r\n    // possible in AS anyway.\r\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\r\n    var actualType = this.currentType;\r\n    var expectedType = this.resolver.resolveType(\r\n      expression.isType,\r\n      this.currentFlow.actualFunction\r\n    );\r\n    this.currentType = Type.bool;\r\n    if (!expectedType) return module.createUnreachable();\r\n\r\n    // instanceof <basicType> must be exact\r\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\r\n      return module.createI32(actualType == expectedType ? 1 : 0);\r\n    }\r\n    // <nullable> instanceof <nonNullable> must be != 0\r\n    if (\r\n      actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE) &&\r\n      actualType.nonNullableType.isAssignableTo(expectedType)\r\n    ) {\r\n      return module.createBinary(\r\n        actualType.is(TypeFlags.LONG)\r\n          ? BinaryOp.NeI64\r\n          : BinaryOp.NeI32,\r\n        expr,\r\n        actualType.toNativeZero(module)\r\n      );\r\n    }\r\n    return module.createI32(actualType.isAssignableTo(expectedType) ? 1 : 0);\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    implicitNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitNegate);\r\n        let classType = contextualType.classReference;\r\n        if (\r\n          classType &&\r\n          classType.prototype == this.program.arrayPrototype\r\n        ) {\r\n          return this.compileArrayLiteral(\r\n            assert(classType.typeArguments)[0],\r\n            (<ArrayLiteralExpression>expression).elementExpressions,\r\n            false, // TODO: isConst?\r\n            expression\r\n          );\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\r\n        this.currentType = type;\r\n        switch (type.kind) {\r\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\r\n          case TypeKind.I64: return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\r\n          case TypeKind.U64: return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.F32: return module.createF32(i64_to_f32(intValue));\r\n          case TypeKind.F64: return module.createF64(i64_to_f64(intValue));\r\n          default: return module.createI32(i64_low(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitNegate);\r\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\r\n      }\r\n      case LiteralKind.OBJECT: {\r\n        assert(!implicitNegate);\r\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\r\n      }\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\r\n  ensureStaticString(stringValue: string): ExpressionRef {\r\n    var program = this.program;\r\n    var hasGC = program.hasGC;\r\n    var gcHeaderSize = program.gcHeaderSize;\r\n\r\n    var stringInstance = assert(program.stringInstance);\r\n    var stringSegment: MemorySegment;\r\n\r\n    // if the string already exists, reuse it\r\n    var segments = this.stringSegments;\r\n    if (segments.has(stringValue)) {\r\n      stringSegment = <MemorySegment>segments.get(stringValue);\r\n\r\n    // otherwise create it\r\n    } else {\r\n      let length = stringValue.length;\r\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\r\n      let totalSize = headerSize + length * 2;\r\n\r\n      let buf: Uint8Array;\r\n      let pos: u32;\r\n\r\n      if (hasGC) {\r\n        buf = new Uint8Array(gcHeaderSize + totalSize);\r\n        pos = gcHeaderSize;\r\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\r\n      } else {\r\n        buf = new Uint8Array(totalSize);\r\n        pos = 0;\r\n      }\r\n      writeI32(length, buf, pos + stringInstance.offsetof(LibrarySymbols.length));\r\n      pos += headerSize;\r\n      for (let i = 0; i < length; ++i) {\r\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\r\n      }\r\n      stringSegment = this.addMemorySegment(buf);\r\n      segments.set(stringValue, stringSegment);\r\n    }\r\n    var stringOffset = stringSegment.offset;\r\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\r\n\r\n    this.currentType = stringInstance.type;\r\n    if (this.options.isWasm64) {\r\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    } else {\r\n      assert(i64_is_u32(stringOffset));\r\n      return this.module.createI32(i64_low(stringOffset));\r\n    }\r\n  }\r\n\r\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\r\n    return this.ensureStaticString(expression.value);\r\n  }\r\n\r\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\r\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\r\n    var program = this.program;\r\n    var hasGC = program.hasGC;\r\n    var gcHeaderSize = program.gcHeaderSize;\r\n\r\n    var length = values.length;\r\n    var byteSize = elementType.byteSize;\r\n    var byteLength = length * byteSize;\r\n    var usizeTypeSize = this.options.usizeType.byteSize;\r\n\r\n    var buf: Uint8Array;\r\n    var pos: u32;\r\n\r\n    // create the backing ArrayBuffer segment\r\n    var bufferInstance = assert(program.arrayBufferInstance);\r\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\r\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\r\n    if (hasGC) {\r\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\r\n      pos = gcHeaderSize;\r\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\r\n    } else {\r\n      buf = new Uint8Array(bufferTotalSize);\r\n      pos = 0;\r\n    }\r\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(LibrarySymbols.byteLength));\r\n    pos += bufferHeaderSize;\r\n    var nativeType = elementType.toNativeType();\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        switch (byteSize) {\r\n          case 1: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI8(getConstValueI32(value), buf, pos);\r\n              pos += 1;\r\n            }\r\n            break;\r\n          }\r\n          case 2: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI16(getConstValueI32(value), buf, pos);\r\n              pos += 2;\r\n            }\r\n            break;\r\n          }\r\n          case 4: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI32(getConstValueI32(value), buf, pos);\r\n              pos += 4;\r\n            }\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF32(getConstValueF32(value), buf, pos);\r\n          pos += 4;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF64(getConstValueF64(value), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    var bufferSegment = this.addMemorySegment(buf);\r\n    var bufferOffset = bufferSegment.offset;\r\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\r\n\r\n    // create the Array segment and return a pointer to it\r\n    var arrayPrototype = assert(program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(\r\n      arrayPrototype,\r\n      [ elementType ],\r\n      makeMap<string,Type>()\r\n    ));\r\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\r\n    if (hasGC) {\r\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\r\n      pos = gcHeaderSize;\r\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\r\n    } else {\r\n      buf = new Uint8Array(arrayHeaderSize);\r\n      pos = 0;\r\n    }\r\n    var arraySegment = this.addMemorySegment(buf);\r\n    var arrayOffset = arraySegment.offset;\r\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\r\n    this.currentType = arrayInstance.type;\r\n    var buffer_offset = pos + arrayInstance.offsetof(\"buffer_\");\r\n    var length_offset = pos + arrayInstance.offsetof(\"length_\");\r\n    if (usizeTypeSize == 8) {\r\n      writeI64(bufferOffset, buf, buffer_offset);\r\n      writeI32(length, buf, length_offset);\r\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\r\n    } else {\r\n      assert(i64_is_u32(bufferOffset));\r\n      writeI32(i64_low(bufferOffset), buf, buffer_offset);\r\n      writeI32(length, buf, length_offset);\r\n      assert(i64_is_u32(arrayOffset));\r\n      return this.module.createI32(i64_low(arrayOffset));\r\n    }\r\n  }\r\n\r\n  compileArrayLiteral(\r\n    elementType: Type,\r\n    expressions: (Expression | null)[],\r\n    isConst: bool,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // find out whether all elements are constant (array is static)\r\n    var length = expressions.length;\r\n    var compiledValues = new Array<ExpressionRef>(length);\r\n    var constantValues = new Array<ExpressionRef>(length);\r\n    var nativeElementType = elementType.toNativeType();\r\n    var isStatic = true;\r\n    for (let i = 0; i < length; ++i) {\r\n      let expression = expressions[i];\r\n      let expr = expression\r\n        ? this.compileExpression(<Expression>expression, elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n        : elementType.toNativeZero(module);\r\n      compiledValues[i] = expr;\r\n      if (isStatic) {\r\n        expr = module.precomputeExpression(expr);\r\n        if (getExpressionId(expr) == ExpressionId.Const) {\r\n          assert(getExpressionType(expr) == nativeElementType);\r\n          constantValues[i] = expr;\r\n        } else {\r\n          if (isConst) {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              reportNode.range\r\n            );\r\n          }\r\n          isStatic = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    // make a static array if possible\r\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\r\n\r\n    // otherwise obtain the array type\r\n    var arrayPrototype = assert(this.program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(\r\n      <ClassPrototype>arrayPrototype,\r\n      [ elementType ],\r\n      makeMap<string,Type>()\r\n    ));\r\n    var arrayType = arrayInstance.type;\r\n\r\n    // and compile an explicit instantiation\r\n    this.currentType = arrayType;\r\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\r\n    if (!setter) {\r\n      this.error(\r\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n        reportNode.range, arrayInstance.internalName\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var nativeArrayType = arrayType.toNativeType();\r\n    var flow = this.currentFlow;\r\n    var tempLocal = flow.parentFunction.addLocal(arrayType); // can't reuse a temp (used in compiledValues)\r\n    var stmts = new Array<ExpressionRef>(2 + length);\r\n    var index = 0;\r\n    stmts[index++] = module.createSetLocal(tempLocal.index,\r\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\r\n        module.createI32(0), // this\r\n        module.createI32(length)\r\n      ])\r\n    );\r\n    for (let i = 0; i < length; ++i) {\r\n      stmts[index++] = this.makeCallDirect(setter, [\r\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\r\n        module.createI32(i),\r\n        compiledValues[i]\r\n      ]);\r\n    }\r\n    assert(index + 1 == stmts.length);\r\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\r\n    flow.freeTempLocal(tempLocal); // but can be reused now\r\n    this.currentType = arrayType;\r\n    return module.createBlock(null, stmts, nativeArrayType);\r\n  }\r\n\r\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // contextual type must be a class\r\n    var classReference = contextualType.classReference;\r\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, \"<object>\", contextualType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // if present, check that the constructor is compatible with object literals\r\n    var ctor = classReference.constructorInstance;\r\n    if (ctor) {\r\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\r\n      // object literal and use them to call the ctor while not generating a store.\r\n      if (ctor.signature.requiredParameters) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PRIVATE)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PROTECTED)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // check and compile field values\r\n    var names = expression.names;\r\n    var numNames = names.length;\r\n    var values = expression.values;\r\n    var members = classReference.members;\r\n    var hasErrors = false;\r\n    var exprs = new Array<ExpressionRef>(numNames + 2);\r\n    var flow = this.currentFlow;\r\n    var tempLocal = flow.getTempLocal(this.options.usizeType);\r\n    assert(numNames == values.length);\r\n    for (let i = 0, k = numNames; i < k; ++i) {\r\n      let member = members ? members.get(names[i].text) : null;\r\n      if (!member || member.kind != ElementKind.FIELD) {\r\n        this.error(\r\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n          names[i].range, names[i].text, classReference.toString()\r\n        );\r\n        hasErrors = true;\r\n        continue;\r\n      }\r\n      let type = (<Field>member).type;\r\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\r\n        type.byteSize,\r\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\r\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\r\n        type.toNativeType(),\r\n        (<Field>member).memoryOffset\r\n      );\r\n    }\r\n    this.currentType = classReference.type.nonNullableType;\r\n    if (hasErrors) return module.createUnreachable();\r\n\r\n    // allocate a new instance first and assign 'this' to the temp. local\r\n    exprs[0] = module.createSetLocal(\r\n      tempLocal.index,\r\n      this.makeAllocation(classReference)\r\n    );\r\n\r\n    // once all field values have been set, return 'this'\r\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\r\n\r\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.resolver.resolveExpression( // reports\r\n      expression.expression,\r\n      flow\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance: Class | null = null;\r\n    var typeArguments = expression.typeArguments;\r\n    var classReference: Class | null;\r\n    if (\r\n      !typeArguments &&\r\n      (classReference = contextualType.classReference) !== null &&\r\n      classReference.is(CommonFlags.GENERIC)\r\n    ) {\r\n      classInstance = this.resolver.resolveClass(\r\n        classPrototype,\r\n        classReference.typeArguments,\r\n        makeMap<string,Type>(flow.contextualTypeArguments)\r\n      );\r\n    } else {\r\n      classInstance = this.resolver.resolveClassInclTypeArguments(\r\n        classPrototype,\r\n        typeArguments,\r\n        flow.actualFunction.parent, // relative to caller\r\n        makeMap<string,Type>(flow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n    if (!classInstance) return module.createUnreachable();\r\n    return this.compileInstantiate(classInstance, expression.arguments, expression);\r\n  }\r\n\r\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\r\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\r\n    var instance = classInstance.constructorInstance;\r\n    if (instance) {\r\n      // do not attempt to compile it if inlined anyway\r\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\r\n      return instance;\r\n    }\r\n\r\n    // clone base constructor if a derived class\r\n    var baseClass = classInstance.base;\r\n    if (baseClass) {\r\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\r\n      instance = new Function(\r\n        CommonSymbols.constructor,\r\n        new FunctionPrototype(\r\n          CommonSymbols.constructor,\r\n          classInstance,\r\n          // declaration is important, i.e. to access optional parameter initializers\r\n          (<FunctionDeclaration>baseCtor.declaration).clone()\r\n        ),\r\n        baseCtor.signature,\r\n        null\r\n      );\r\n\r\n    // otherwise make a default constructor\r\n    } else {\r\n      instance = new Function(\r\n        CommonSymbols.constructor,\r\n        new FunctionPrototype(\r\n          CommonSymbols.constructor,\r\n          classInstance,\r\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\r\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\r\n          )\r\n        ),\r\n        new Signature(null, classInstance.type, classInstance.type),\r\n        null\r\n      );\r\n    }\r\n\r\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\r\n    instance.set(CommonFlags.COMPILED);\r\n    instance.prototype.setResolvedInstance(\"\", instance);\r\n    classInstance.constructorInstance = instance;\r\n    var previousFlow = this.currentFlow;\r\n    this.currentFlow = instance.flow;\r\n\r\n    // generate body\r\n    var signature = instance.signature;\r\n    var module = this.module;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var stmts = new Array<ExpressionRef>();\r\n\r\n    // {\r\n    //   if (!this) this = <ALLOC>\r\n    //   IF_DERIVED: this = super(this, ...args)\r\n    //   this.a = X\r\n    //   this.b = Y\r\n    //   return this\r\n    // }\r\n    stmts.push(\r\n      module.createIf(\r\n        module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n          module.createGetLocal(0, nativeSizeType)\r\n        ),\r\n        module.createSetLocal(0,\r\n          this.makeAllocation(classInstance)\r\n        )\r\n      )\r\n    );\r\n    if (baseClass) {\r\n      let parameterTypes = signature.parameterTypes;\r\n      let numParameters = parameterTypes.length;\r\n      let operands = new Array<ExpressionRef>(1 + numParameters);\r\n      operands[0] = module.createGetLocal(0, nativeSizeType);\r\n      for (let i = 0; i < numParameters; ++i) {\r\n        operands[i + 1] = module.createGetLocal(i + 1, parameterTypes[i].toNativeType());\r\n      }\r\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\r\n      stmts.push(\r\n        module.createSetLocal(0,\r\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands)\r\n        )\r\n      );\r\n    }\r\n    this.makeFieldInitialization(classInstance, stmts);\r\n    stmts.push(\r\n      module.createGetLocal(0, nativeSizeType)\r\n    );\r\n\r\n    // make the function\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var locals = instance.localsByIndex;\r\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\r\n    var numOperands = 1 + signature.parameterTypes.length;\r\n    var numLocals = locals.length;\r\n    if (numLocals > numOperands) {\r\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\r\n    }\r\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes,\r\n      stmts.length == 1\r\n        ? stmts[0]\r\n        : module.createBlock(null, stmts, nativeSizeType)\r\n    );\r\n    instance.finalize(module, funcRef);\r\n    this.currentFlow = previousFlow;\r\n    return instance;\r\n  }\r\n\r\n  compileInstantiate(classInstance: Class, argumentExpressions: Expression[], reportNode: Node): ExpressionRef {\r\n    var ctor = this.ensureConstructor(classInstance, reportNode);\r\n    var expr = this.compileCallDirect(\r\n      ctor,\r\n      argumentExpressions,\r\n      reportNode,\r\n      this.options.usizeType.toNativeZero(this.module)\r\n    );\r\n    this.currentType = classInstance.type;\r\n    return expr;\r\n  }\r\n\r\n  compileParenthesizedExpression(\r\n    expression: ParenthesizedExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(\r\n      expression.expression,\r\n      contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    this.maybeCompileEnclosingSource(propertyAccess);\r\n\r\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static field\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>theEnum)) {\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\r\n          return module.createI32(i64_low((<EnumValue>target).constantIntegerValue));\r\n        }\r\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          assert(this.resolver.currentThisExpression),\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        this.currentType = (<Field>target).type;\r\n        return module.createLoad(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\r\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\r\n        if (getterPrototype) {\r\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\r\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let getterInstance = assert((<Property>target).getterInstance);\r\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\r\n          this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          )\r\n        );\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.error(\r\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\r\n          propertyAccess.range, (<FunctionPrototype>target).name\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  private compileGetter(target: PropertyPrototype, reportNode: Node): ExpressionRef {\r\n    var prototype = target.getterPrototype;\r\n    if (prototype) {\r\n      let instance = this.resolver.resolveFunction(prototype, null);\r\n      if (!instance) return this.module.createUnreachable();\r\n      let signature = instance.signature;\r\n      if (!this.checkCallSignature( // reports\r\n        signature,\r\n        0,\r\n        instance.is(CommonFlags.INSTANCE),\r\n        reportNode\r\n      )) {\r\n        return this.module.createUnreachable();\r\n      }\r\n      if (instance.is(CommonFlags.INSTANCE)) {\r\n        let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n        let thisExpression = assert(this.resolver.currentThisExpression); //!!!\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        this.currentType = signature.returnType;\r\n        return this.compileCallDirect(instance, [], reportNode, thisExpr);\r\n      } else {\r\n        this.currentType = signature.returnType;\r\n        return this.compileCallDirect(instance, [], reportNode, 0);\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n        reportNode.range, (<PropertyPrototype>target).name, (<PropertyPrototype>target).parent.toString()\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    // Try to eliminate unnecesssary branches if the condition is constant\r\n    var condExprPrecomp = this.module.precomputeExpression(condExpr);\r\n    if (\r\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n      getExpressionType(condExprPrecomp) == NativeType.I32\r\n    ) {\r\n      return getConstValueI32(condExprPrecomp)\r\n        ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\r\n        : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n\r\n    // Otherwise recompile to the original and let the optimizer decide\r\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    }\r\n\r\n    var ifThenFlow = outerFlow.fork();\r\n    this.currentFlow = ifThenFlow;\r\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\r\n    var ifThenType = this.currentType;\r\n    ifThenFlow.freeScopedLocals();\r\n\r\n    var ifElseFlow = outerFlow.fork();\r\n    this.currentFlow = ifElseFlow;\r\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n    var ifElseType = this.currentType;\r\n    ifElseFlow.freeScopedLocals();\r\n    this.currentFlow = outerFlow;\r\n\r\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\r\n\r\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, ifThenType.toString(), ifElseType.toString()\r\n      );\r\n      this.currentType = contextualType;\r\n      return this.module.createUnreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(\r\n      ifThenExpr,\r\n      ifThenType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifThen\r\n    );\r\n    ifElseExpr = this.convertExpression(\r\n      ifElseExpr,\r\n      ifElseType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifElse\r\n    );\r\n    this.currentType = commonType;\r\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n\r\n    // shortcut if compiling the getter already failed\r\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\r\n\r\n    var currentType = this.currentType;\r\n\r\n    // if the value isn't dropped, a temp. local is required to remember the original value\r\n    var tempLocal: Local | null = null;\r\n    if (contextualType != Type.void) {\r\n      tempLocal = flow.getTempLocal(currentType, false);\r\n      getValue = module.createTeeLocal(\r\n        tempLocal.index,\r\n        getValue\r\n      );\r\n    }\r\n\r\n    var calcValue: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddI32,\r\n              getValue,\r\n              module.createI32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\r\n                if (overload) {\r\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            calcValue = module.createBinary(\r\n              options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              getValue,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddI64,\r\n              getValue,\r\n              module.createI64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddF32,\r\n              getValue,\r\n              module.createF32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddF64,\r\n              getValue,\r\n              module.createF64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubI32,\r\n              getValue,\r\n              module.createI32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\r\n                if (overload) {\r\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            calcValue = module.createBinary(\r\n              options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              getValue,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubI64,\r\n              getValue,\r\n              module.createI64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubF32,\r\n              getValue,\r\n              module.createF32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubF64,\r\n              getValue,\r\n              module.createF64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // simplify if dropped anyway\r\n    if (!tempLocal) {\r\n      this.currentType = Type.void;\r\n      return this.compileAssignmentWithValue(expression.operand,\r\n        calcValue,\r\n        false\r\n      );\r\n    }\r\n\r\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\r\n    var setValue = this.compileAssignmentWithValue(expression.operand,\r\n      calcValue, // also tees getValue to tempLocal\r\n      false\r\n    );\r\n\r\n    this.currentType = tempLocal.type;\r\n    flow.freeTempLocal(tempLocal);\r\n    var nativeType = tempLocal.type.toNativeType();\r\n\r\n    return module.createBlock(null, [\r\n      setValue,\r\n      module.createGetLocal(tempLocal.index, nativeType)\r\n    ], nativeType); // result of 'x++' / 'x--' might overflow\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        // nop\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          // compileExpression normally does this:\r\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n          break;\r\n        }\r\n\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              this.currentType.toNativeZero(module),\r\n              expr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createUnary(UnaryOp.NegF32, expr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createUnary(UnaryOp.NegF64, expr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          // allow '!' for references even without an overload\r\n        }\r\n\r\n        expr = this.makeIsFalseish(expr, this.currentType);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        } else {\r\n          expr = this.convertExpression(\r\n            expr,\r\n            this.currentType, this.currentType.intType,\r\n            ConversionKind.IMPLICIT, WrapMode.NONE,\r\n            expression.operand\r\n          );\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              this.currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\r\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    switch (type.kind) {\r\n      case TypeKind.I8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(24)\r\n                ),\r\n                module.createI32(24)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.I16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(16)\r\n                ),\r\n                module.createI32(16)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xffff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.BOOL: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          // bool is special in that it compares to 0 instead of masking with 0x1\r\n          expr = module.createBinary(BinaryOp.NeI32,\r\n            expr,\r\n            module.createI32(0)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\r\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return module.createUnary(UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createUnary(UnaryOp.EqzI64, expr);\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\r\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return expr;\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return type.size == 64\r\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n          : expr;\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\r\n  makeAllocation(classInstance: Class): ExpressionRef {\r\n    var program = this.program;\r\n    assert(classInstance.program == program);\r\n    var module = this.module;\r\n    var options = this.options;\r\n\r\n    // __gc_allocate(size, markFn)\r\n    if (program.hasGC && classInstance.type.isManaged(program)) {\r\n      let allocateInstance = assert(program.gcAllocateInstance);\r\n      if (!this.compileFunction(allocateInstance)) return module.createUnreachable();\r\n      this.currentType = classInstance.type;\r\n      return module.createCall(\r\n        allocateInstance.internalName, [\r\n          options.isWasm64\r\n            ? module.createI64(classInstance.currentMemoryOffset)\r\n            : module.createI32(classInstance.currentMemoryOffset),\r\n          module.createI32(\r\n            ensureGCHook(this, classInstance)\r\n          )\r\n        ],\r\n        options.nativeSizeType\r\n      );\r\n\r\n    // memory.allocate(size)\r\n    } else {\r\n      let allocateInstance = program.memoryAllocateInstance;\r\n      if (!allocateInstance || !this.compileFunction(allocateInstance)) return module.createUnreachable();\r\n      this.currentType = classInstance.type;\r\n      return module.createCall(\r\n        allocateInstance.internalName, [\r\n          options.isWasm64\r\n            ? module.createI64(classInstance.currentMemoryOffset)\r\n            : module.createI32(classInstance.currentMemoryOffset)\r\n        ],\r\n        options.nativeSizeType\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Makes the initializers for a class's fields. */\r\n  makeFieldInitialization(classInstance: Class, stmts: ExpressionRef[] = []): ExpressionRef[] {\r\n    var members = classInstance.members;\r\n    if (!members) return [];\r\n\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\r\n    var thisLocalIndex = isInline\r\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\r\n      : 0;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n\r\n    for (let member of members.values()) {\r\n      if (\r\n        member.kind != ElementKind.FIELD || // not a field\r\n        member.parent != classInstance      // inherited field\r\n      ) continue;\r\n\r\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\r\n      let fieldType = field.type;\r\n      let nativeFieldType = fieldType.toNativeType();\r\n      let initializerNode = field.prototype.initializerNode;\r\n      if (initializerNode) { // use initializer\r\n        stmts.push(\r\n          module.createStore(fieldType.byteSize,\r\n            module.createGetLocal(thisLocalIndex, nativeSizeType),\r\n            this.compileExpression( // reports\r\n              initializerNode,\r\n              fieldType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            ),\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          )\r\n        );\r\n      } else {\r\n        let parameterIndex = field.prototype.parameterIndex;\r\n        stmts.push(\r\n          module.createStore(fieldType.byteSize,\r\n            module.createGetLocal(thisLocalIndex, nativeSizeType),\r\n            parameterIndex >= 0 // initialized via parameter (here: a local)\r\n              ? module.createGetLocal(\r\n                  isInline\r\n                    ? assert(flow.lookupLocal(field.name)).index\r\n                    : 1 + parameterIndex, // this is local 0\r\n                  nativeFieldType\r\n                )\r\n              : fieldType.toNativeZero(module),\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          )\r\n        );\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\r\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\r\n    var parentFunction = this.currentFlow.parentFunction;\r\n    var source = range.source;\r\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n    range.debugInfoRef = expr;\r\n    parentFunction.debugLocations.push(range);\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleImportName(\r\n  element: Element,\r\n  declaration: DeclarationStatement\r\n): void {\r\n  // by default, use the file name as the module name\r\n  mangleImportName_moduleName = declaration.range.source.simplePath;\r\n  // and the internal name of the element within that file as the element name\r\n  mangleImportName_elementName = mangleInternalName(\r\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\r\n  );\r\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\r\n\r\n  var program = element.program;\r\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\r\n  var args = decorator.arguments;\r\n  if (args && args.length) {\r\n    let arg = args[0];\r\n    // if one argument is given, override just the element name\r\n    // if two arguments are given, override both module and element name\r\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n      if (args.length >= 2) {\r\n        arg = args[1];\r\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n          mangleImportName_moduleName = mangleImportName_elementName;\r\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n          if (args.length > 2) {\r\n            program.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"2\", args.length.toString()\r\n            );\r\n          }\r\n        } else {\r\n          program.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            arg.range\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      program.error(\r\n        DiagnosticCode.String_literal_expected,\r\n        arg.range\r\n      );\r\n    }\r\n  } else {\r\n    program.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      decorator.range, \"1\", \"0\"\r\n    );\r\n  }\r\n}\r\n\r\nvar mangleImportName_moduleName: string;\r\nvar mangleImportName_elementName: string;\r\n\r\n/** Special compiler symbols. */\r\nnamespace CompilerSymbols {\r\n  /** Module started global. Used if an explicit start function is present. */\r\n  export const started = \"~lib/started\";\r\n  /** Argument count global. Used to call trampolines for varargs functions. */\r\n  export const argc = \"~lib/argc\";\r\n  /** Argument count setter. Exported for use by host calls. */\r\n  export const setargc = \"~lib/setargc\";\r\n}\r\n","/**\r\n * Generated from diagnosticsMessages.json. Do not edit.\r\n * @module diagnostics\r\n *//***/\r\n\r\n/* tslint:disable:max-line-length */\r\n\r\n/** Enum of available diagnostic codes. */\r\nexport enum DiagnosticCode {\r\n  Operation_not_supported = 100,\r\n  Operation_is_unsafe = 101,\r\n  User_defined_0 = 102,\r\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\r\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\r\n  Type_0_cannot_be_changed_to_type_1 = 202,\r\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\r\n  Basic_type_0_cannot_be_nullable = 204,\r\n  Cannot_export_a_mutable_global = 205,\r\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\r\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\r\n  Unmanaged_classes_cannot_implement_interfaces = 208,\r\n  Invalid_regular_expression_flags = 209,\r\n  Implementation_0_must_match_the_signature_1 = 210,\r\n  Class_0_is_sealed_and_cannot_be_extended = 211,\r\n  Decorator_0_is_not_valid_here = 212,\r\n  Duplicate_decorator = 213,\r\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\r\n  Optional_parameter_must_have_an_initializer = 215,\r\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\r\n  Function_0_cannot_be_inlined_into_itself = 217,\r\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\r\n  Optional_properties_are_not_supported = 219,\r\n  Expression_must_be_a_compile_time_constant = 220,\r\n  Module_cannot_have_multiple_start_functions = 221,\r\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\r\n  _0_must_be_a_power_of_two = 223,\r\n  Unterminated_string_literal = 1002,\r\n  Identifier_expected = 1003,\r\n  _0_expected = 1005,\r\n  A_file_cannot_have_a_reference_to_itself = 1006,\r\n  Trailing_comma_not_allowed = 1009,\r\n  Unexpected_token = 1012,\r\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\r\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\r\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\r\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\r\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\r\n  _0_modifier_cannot_be_used_here = 1042,\r\n  A_rest_parameter_cannot_be_optional = 1047,\r\n  A_rest_parameter_cannot_have_an_initializer = 1048,\r\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\r\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\r\n  A_get_accessor_cannot_have_parameters = 1054,\r\n  Enum_member_must_have_initializer = 1061,\r\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\r\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\r\n  An_accessor_cannot_have_type_parameters = 1094,\r\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\r\n  Type_parameter_list_cannot_be_empty = 1098,\r\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\r\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\r\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\r\n  Expression_expected = 1109,\r\n  Type_expected = 1110,\r\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\r\n  Duplicate_label_0 = 1114,\r\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\r\n  Digit_expected = 1124,\r\n  Hexadecimal_digit_expected = 1125,\r\n  Unexpected_end_of_text = 1126,\r\n  Invalid_character = 1127,\r\n  _case_or_default_expected = 1130,\r\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\r\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\r\n  Type_argument_expected = 1140,\r\n  String_literal_expected = 1141,\r\n  Line_break_not_permitted_here = 1142,\r\n  Declaration_expected = 1146,\r\n  _const_declarations_must_be_initialized = 1155,\r\n  Unterminated_regular_expression_literal = 1161,\r\n  Interface_declaration_cannot_have_implements_clause = 1176,\r\n  Binary_digit_expected = 1177,\r\n  Octal_digit_expected = 1178,\r\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\r\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\r\n  Unterminated_Unicode_escape_sequence = 1199,\r\n  Decorators_are_not_valid_here = 1206,\r\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\r\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\r\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\r\n  A_class_may_only_extend_another_class = 1311,\r\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\r\n  Duplicate_identifier_0 = 2300,\r\n  Cannot_find_name_0 = 2304,\r\n  Module_0_has_no_exported_member_1 = 2305,\r\n  Generic_type_0_requires_1_type_argument_s = 2314,\r\n  Type_0_is_not_generic = 2315,\r\n  Type_0_is_not_assignable_to_type_1 = 2322,\r\n  Index_signature_is_missing_in_type_0 = 2329,\r\n  _this_cannot_be_referenced_in_current_location = 2332,\r\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\r\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\r\n  Property_0_does_not_exist_on_type_1 = 2339,\r\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\r\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\r\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\r\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\r\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\r\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\r\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\r\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\r\n  _get_and_set_accessor_must_have_the_same_type = 2380,\r\n  Constructor_implementation_is_missing = 2390,\r\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\r\n  Multiple_constructor_implementations_are_not_allowed = 2392,\r\n  Duplicate_function_implementation = 2393,\r\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\r\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\r\n  Type_0_has_no_property_1 = 2460,\r\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\r\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\r\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\r\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\r\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\r\n  Index_signature_in_type_0_only_permits_reading = 2542,\r\n  Expected_0_arguments_but_got_1 = 2554,\r\n  Expected_at_least_0_arguments_but_got_1 = 2555,\r\n  Expected_0_type_arguments_but_got_1 = 2558,\r\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\r\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\r\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\r\n  Namespace_0_has_no_exported_member_1 = 2694,\r\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\r\n  Duplicate_property_0 = 2718,\r\n  File_0_not_found = 6054,\r\n  Numeric_separators_are_not_allowed_here = 6188,\r\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\r\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\r\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\r\n}\r\n\r\n/** Translates a diagnostic code to its respective string. */\r\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\r\n  switch (code) {\r\n    case 100: return \"Operation not supported.\";\r\n    case 101: return \"Operation is unsafe.\";\r\n    case 102: return \"User-defined: {0}\";\r\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\r\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\r\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\r\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\r\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\r\n    case 205: return \"Cannot export a mutable global.\";\r\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\r\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\r\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\r\n    case 209: return \"Invalid regular expression flags.\";\r\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\r\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\r\n    case 212: return \"Decorator '{0}' is not valid here.\";\r\n    case 213: return \"Duplicate decorator.\";\r\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\r\n    case 215: return \"Optional parameter must have an initializer.\";\r\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\r\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\r\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\r\n    case 219: return \"Optional properties are not supported.\";\r\n    case 220: return \"Expression must be a compile-time constant.\";\r\n    case 221: return \"Module cannot have multiple start functions.\";\r\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\r\n    case 223: return \"'{0}' must be a power of two.\";\r\n    case 1002: return \"Unterminated string literal.\";\r\n    case 1003: return \"Identifier expected.\";\r\n    case 1005: return \"'{0}' expected.\";\r\n    case 1006: return \"A file cannot have a reference to itself.\";\r\n    case 1009: return \"Trailing comma not allowed.\";\r\n    case 1012: return \"Unexpected token.\";\r\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\r\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\r\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\r\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\r\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\r\n    case 1042: return \"'{0}' modifier cannot be used here.\";\r\n    case 1047: return \"A rest parameter cannot be optional.\";\r\n    case 1048: return \"A rest parameter cannot have an initializer.\";\r\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\r\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\r\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\r\n    case 1061: return \"Enum member must have initializer.\";\r\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\r\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\r\n    case 1094: return \"An accessor cannot have type parameters.\";\r\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\r\n    case 1098: return \"Type parameter list cannot be empty.\";\r\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\r\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\r\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\r\n    case 1109: return \"Expression expected.\";\r\n    case 1110: return \"Type expected.\";\r\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\r\n    case 1114: return \"Duplicate label '{0}'.\";\r\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\r\n    case 1124: return \"Digit expected.\";\r\n    case 1125: return \"Hexadecimal digit expected.\";\r\n    case 1126: return \"Unexpected end of text.\";\r\n    case 1127: return \"Invalid character.\";\r\n    case 1130: return \"'case' or 'default' expected.\";\r\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\r\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\r\n    case 1140: return \"Type argument expected.\";\r\n    case 1141: return \"String literal expected.\";\r\n    case 1142: return \"Line break not permitted here.\";\r\n    case 1146: return \"Declaration expected.\";\r\n    case 1155: return \"'const' declarations must be initialized.\";\r\n    case 1161: return \"Unterminated regular expression literal.\";\r\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\r\n    case 1177: return \"Binary digit expected.\";\r\n    case 1178: return \"Octal digit expected.\";\r\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\r\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\r\n    case 1199: return \"Unterminated Unicode escape sequence.\";\r\n    case 1206: return \"Decorators are not valid here.\";\r\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\r\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\r\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\r\n    case 1311: return \"A class may only extend another class.\";\r\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\r\n    case 2300: return \"Duplicate identifier '{0}'.\";\r\n    case 2304: return \"Cannot find name '{0}'.\";\r\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\r\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\r\n    case 2315: return \"Type '{0}' is not generic.\";\r\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\r\n    case 2329: return \"Index signature is missing in type '{0}'.\";\r\n    case 2332: return \"'this' cannot be referenced in current location.\";\r\n    case 2335: return \"'super' can only be referenced in a derived class.\";\r\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\r\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\r\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\r\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\r\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\r\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\r\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\r\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\r\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\r\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\r\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\r\n    case 2390: return \"Constructor implementation is missing.\";\r\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\r\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\r\n    case 2393: return \"Duplicate function implementation.\";\r\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\r\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\r\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\r\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\r\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\r\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\r\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\r\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\r\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\r\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\r\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\r\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\r\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\r\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\r\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\r\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\r\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\r\n    case 2718: return \"Duplicate property '{0}'.\";\r\n    case 6054: return \"File '{0}' not found.\";\r\n    case 6188: return \"Numeric separators are not allowed here.\";\r\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\r\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\r\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\r\n    default: return \"\";\r\n  }\r\n}\r\n","/**\r\n * A control flow analyzer.\r\n * @module flow\r\n *//***/\r\n\r\nimport {\r\n  Type,\r\n  TypeFlags,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  Local,\r\n  Function,\r\n  Element,\r\n  ElementKind,\r\n  Global\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionId,\r\n  ExpressionRef,\r\n\r\n  getExpressionId,\r\n  getGetLocalIndex,\r\n  isTeeLocal,\r\n  getSetLocalValue,\r\n  getGetGlobalName,\r\n  getBinaryOp,\r\n  BinaryOp,\r\n  getBinaryLeft,\r\n  getConstValueI32,\r\n  getBinaryRight,\r\n  getUnaryOp,\r\n  UnaryOp,\r\n  getExpressionType,\r\n  getConstValueI64Low,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getLoadBytes,\r\n  isLoadSigned,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getCallTarget\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node\r\n} from \"./ast\";\r\n\r\nimport {\r\n  bitsetIs,\r\n  bitsetSet\r\n} from \"./util\";\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  // categorical\r\n\r\n  /** This flow returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This flow returns a wrapped value. */\r\n  RETURNS_WRAPPED = 1 << 1,\r\n  /** This flow throws. */\r\n  THROWS = 1 << 2,\r\n  /** This flow breaks. */\r\n  BREAKS = 1 << 3,\r\n  /** This flow continues. */\r\n  CONTINUES = 1 << 4,\r\n  /** This flow allocates. Constructors only. */\r\n  ALLOCATES = 1 << 5,\r\n  /** This flow calls super. Constructors only. */\r\n  CALLS_SUPER = 1 << 6,\r\n\r\n  // conditional\r\n\r\n  /** This flow conditionally returns in a child flow. */\r\n  CONDITIONALLY_RETURNS = 1 << 7,\r\n  /** This flow conditionally throws in a child flow. */\r\n  CONDITIONALLY_THROWS = 1 << 8,\r\n  /** This flow conditionally breaks in a child flow. */\r\n  CONDITIONALLY_BREAKS = 1 << 9,\r\n  /** This flow conditionally continues in a child flow. */\r\n  CONDITIONALLY_CONTINUES = 1 << 10,\r\n  /** This flow conditionally allocates in a child flow. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 11,\r\n\r\n  // special\r\n\r\n  /** This is an inlining flow. */\r\n  INLINE_CONTEXT = 1 << 12,\r\n  /** This is a flow with explicitly disabled bounds checking. */\r\n  UNCHECKED_CONTEXT = 1 << 13,\r\n\r\n  // masks\r\n\r\n  /** Any terminating flag. */\r\n  ANY_TERMINATING = FlowFlags.RETURNS\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = FlowFlags.RETURNS\r\n                  | FlowFlags.RETURNS_WRAPPED\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES\r\n                  | FlowFlags.ALLOCATES\r\n                  | FlowFlags.CALLS_SUPER,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\r\n                  | FlowFlags.CONDITIONALLY_THROWS\r\n                  | FlowFlags.CONDITIONALLY_BREAKS\r\n                  | FlowFlags.CONDITIONALLY_CONTINUES\r\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  parentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Local variable wrap states for the first 64 locals. */\r\n  wrappedLocals: I64;\r\n  /** Local variable wrap states for locals with index >= 64. */\r\n  wrappedLocalsExt: I64[] | null;\r\n  /** Function being inlined, when inlining. */\r\n  inlineFunction: Function | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  inlineReturnLabel: string | null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(parentFunction: Function): Flow {\r\n    var flow = new Flow();\r\n    flow.parent = null;\r\n    flow.flags = FlowFlags.NONE;\r\n    flow.parentFunction = parentFunction;\r\n    flow.continueLabel = null;\r\n    flow.breakLabel = null;\r\n    flow.returnType = parentFunction.signature.returnType;\r\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\r\n    flow.wrappedLocals = i64_new(0);\r\n    flow.wrappedLocalsExt = null;\r\n    flow.inlineFunction = null;\r\n    flow.inlineReturnLabel = null;\r\n    return flow;\r\n  }\r\n\r\n  /** Creates an inline flow within `currentFunction`. */\r\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\r\n    var flow = Flow.create(parentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.inlineFunction = inlineFunction;\r\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\r\n    flow.returnType = inlineFunction.signature.returnType;\r\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\r\n    return flow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\r\n  get actualFunction(): Function {\r\n    return this.inlineFunction || this.parentFunction;\r\n  }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this flow has one of the specified flags. */\r\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Forks this flow to a child flow. */\r\n  fork(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.parentFunction = this.parentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    branch.wrappedLocals = this.wrappedLocals;\r\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\r\n    branch.inlineFunction = this.inlineFunction;\r\n    branch.inlineReturnLabel = this.inlineReturnLabel;\r\n    return branch;\r\n  }\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type, wrapped: bool = false): Local {\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\r\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\r\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\r\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\r\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps && temps.length) {\r\n      local = temps.pop();\r\n      local.type = type;\r\n      local.flags = CommonFlags.NONE;\r\n    } else {\r\n      local = parentFunction.addLocal(type);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) this.setLocalWrapped(local.index, wrapped);\r\n    return local;\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\r\n        break;\r\n      }\r\n      case NativeType.V128: {\r\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\r\n        break;\r\n      }\r\n      case NativeType.V128: {\r\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps.length) {\r\n      local = temps[temps.length - 1];\r\n      local.type = type;\r\n    } else {\r\n      local = parentFunction.addLocal(type);\r\n      temps.push(local);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) this.setLocalWrapped(local.index, wrapped);\r\n    return local;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(name: string, type: Type, wrapped: bool, reportNode: Node | null = null): Local {\r\n    var scopedLocal = this.getTempLocal(type, false);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (reportNode) {\r\n          this.parentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            reportNode.range\r\n          );\r\n        }\r\n        return existingLocal;\r\n      }\r\n    }\r\n    scopedLocal.set(CommonFlags.SCOPED);\r\n    this.scopedLocals.set(name, scopedLocal);\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.setLocalWrapped(scopedLocal.index, wrapped);\r\n    }\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\r\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (reportNode) {\r\n          this.parentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            reportNode.range\r\n          );\r\n        }\r\n        return existingLocal;\r\n      }\r\n    }\r\n    assert(index < this.parentFunction.localsByIndex.length);\r\n    var scopedAlias = new Local(\r\n      name,\r\n      index,\r\n      type,\r\n      this.parentFunction\r\n    );\r\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\r\n    this.scopedLocals.set(name, scopedAlias);\r\n    return scopedAlias;\r\n  }\r\n\r\n  /** Frees this flow's scoped variables and returns its parent flow. */\r\n  freeScopedLocals(): void {\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          this.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n  }\r\n\r\n  /** Looks up the local of the specified name in the current scope. */\r\n  lookupLocal(name: string): Local | null {\r\n    var current: Flow | null = this;\r\n    var scope: Map<String,Local> | null;\r\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\r\n    while (current = current.parent);\r\n    return this.parentFunction.localsByName.get(name);\r\n  }\r\n\r\n  /** Looks up the element with the specified name relative to the scope of this flow. */\r\n  lookup(name: string): Element | null {\r\n    var element = this.lookupLocal(name);\r\n    if (element) return element;\r\n    return this.actualFunction.lookup(name);\r\n  }\r\n\r\n  /** Tests if the value of the local at the specified index is considered wrapped. */\r\n  isLocalWrapped(index: i32): bool {\r\n    if (index < 0) return true; // inlined constant\r\n    if (index < 64) return bitsetIs(this.wrappedLocals, index);\r\n    var ext = this.wrappedLocalsExt;\r\n    var i = ((index - 64) / 64) | 0;\r\n    if (!(ext && i < ext.length)) return false;\r\n    return bitsetIs(ext[i], index - (i + 1) * 64);\r\n  }\r\n\r\n  /** Sets if the value of the local at the specified index is considered wrapped. */\r\n  setLocalWrapped(index: i32, wrapped: bool): void {\r\n    if (index < 0) return; // inlined constant\r\n    if (index < 64) {\r\n      this.wrappedLocals = bitsetSet(this.wrappedLocals, index, wrapped);\r\n      return;\r\n    }\r\n    var ext = this.wrappedLocalsExt;\r\n    var i = ((index - 64) / 64) | 0;\r\n    if (!ext) {\r\n      this.wrappedLocalsExt = ext = new Array(i + 1);\r\n      for (let j = 0; j <= i; ++j) ext[j] = i64_new(0);\r\n    } else {\r\n      while (ext.length <= i) ext.push(i64_new(0));\r\n    }\r\n    ext[i] = bitsetSet(ext[i], index - (i + 1) * 64, wrapped);\r\n  }\r\n\r\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\r\n  pushBreakLabel(): string {\r\n    var parentFunction = this.parentFunction;\r\n    var id = parentFunction.nextBreakId++;\r\n    var stack = parentFunction.breakStack;\r\n    if (!stack) parentFunction.breakStack = [ id ];\r\n    else stack.push(id);\r\n    return parentFunction.breakLabel = id.toString(10);\r\n  }\r\n\r\n  /** Pops the most recent break label from the stack. */\r\n  popBreakLabel(): void {\r\n    var parentFunction = this.parentFunction;\r\n    var stack = assert(parentFunction.breakStack);\r\n    var length = assert(stack.length);\r\n    stack.pop();\r\n    if (length > 1) {\r\n      parentFunction.breakLabel = stack[length - 2].toString(10);\r\n    } else {\r\n      parentFunction.breakLabel = null;\r\n      parentFunction.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\r\n  inherit(other: Flow): void {\r\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\r\n    this.wrappedLocals = other.wrappedLocals;\r\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\r\n  }\r\n\r\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\r\n  inheritConditional(other: Flow): void {\r\n    if (other.is(FlowFlags.RETURNS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (other.is(FlowFlags.THROWS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (other.is(FlowFlags.ALLOCATES)) {\r\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n  }\r\n\r\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\r\n  inheritMutual(left: Flow, right: Flow): void {\r\n    // categorical flags set in both arms\r\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\r\n\r\n    // conditional flags set in at least one arm\r\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\r\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\r\n\r\n    // locals wrapped in both arms\r\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\r\n    var leftExt = left.wrappedLocalsExt;\r\n    var rightExt = right.wrappedLocalsExt;\r\n    if (leftExt != null && rightExt != null) {\r\n      let thisExt = this.wrappedLocalsExt;\r\n      let minLength = min(leftExt.length, rightExt.length);\r\n      if (minLength) {\r\n        if (!thisExt) thisExt = new Array(minLength);\r\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\r\n        for (let i = 0; i < minLength; ++i) {\r\n          thisExt[i] = i64_and(\r\n            leftExt[i],\r\n            rightExt[i]\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\r\n   * expression might already have overflown and returns `false` only if the operation neglects\r\n   * any possible combination of garbage bits being present.\r\n   */\r\n  canOverflow(expr: ExpressionRef, type: Type): bool {\r\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\r\n    // opportunities here, obviously.\r\n    assert(type != Type.void);\r\n\r\n    // types other than i8, u8, i16, u16 and bool do not overflow\r\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\r\n\r\n    var operand: ExpressionRef;\r\n    switch (getExpressionId(expr)) {\r\n\r\n      // overflows if the local isn't wrapped or the conversion does\r\n      case ExpressionId.GetLocal: {\r\n        let local = this.parentFunction.localsByIndex[getGetLocalIndex(expr)];\r\n        return !this.isLocalWrapped(local.index)\r\n            || canConversionOverflow(local.type, type);\r\n      }\r\n\r\n      // overflows if the value does\r\n      case ExpressionId.SetLocal: { // tee\r\n        assert(isTeeLocal(expr));\r\n        return this.canOverflow(getSetLocalValue(expr), type);\r\n      }\r\n\r\n      // overflows if the conversion does (globals are wrapped on set)\r\n      case ExpressionId.GetGlobal: {\r\n        // TODO: this is inefficient because it has to read a string\r\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGetGlobalName(expr))));\r\n        assert(global.kind == ElementKind.GLOBAL);\r\n        return canConversionOverflow(assert((<Global>global).type), type);\r\n      }\r\n\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64:\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64:\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtU32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtU64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64:\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeU32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeU64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64:\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtU32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtU64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64:\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeU32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeU64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: return false;\r\n\r\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\r\n          case BinaryOp.MulI32: {\r\n            return !(\r\n              (\r\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryRight(expr), type)\r\n                  )\r\n                )\r\n              ) || (\r\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryLeft(expr), type)\r\n                  )\r\n                )\r\n              )\r\n            );\r\n          }\r\n\r\n          // result won't overflow if one side is a constant less than this type's mask or one side\r\n          // is wrapped\r\n          case BinaryOp.AndI32: {\r\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\r\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\r\n            return !(\r\n              (\r\n                (\r\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              ) || (\r\n                (\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              )\r\n            );\r\n          }\r\n\r\n          // overflows if the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShlI32: {\r\n            let shift = 32 - type.size;\r\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\r\n                || getConstValueI32(operand) < shift;\r\n          }\r\n\r\n          // overflows if the value does and the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShrI32: {\r\n            let shift = 32 - type.size;\r\n            return this.canOverflow(getBinaryLeft(expr), type) && (\r\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\r\n              getConstValueI32(operand) < shift\r\n            );\r\n          }\r\n\r\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\r\n          // wrapped, it can't overflow.\r\n          case BinaryOp.ShrU32: {\r\n            let shift = 32 - type.size;\r\n            return type.is(TypeFlags.SIGNED)\r\n              ? !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) > shift // must clear MSB\r\n                )\r\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) >= shift // can leave MSB\r\n                );\r\n          }\r\n\r\n          // overflows if any side does\r\n          case BinaryOp.DivU32:\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemU32: {\r\n            return this.canOverflow(getBinaryLeft(expr), type)\r\n                || this.canOverflow(getBinaryRight(expr), type);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: return false;\r\n\r\n          // overflow if the maximum result (32) cannot be represented in the target type\r\n          case UnaryOp.ClzI32:\r\n          case UnaryOp.CtzI32:\r\n          case UnaryOp.PopcntI32: return type.size < 7;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the value cannot be represented in the target type\r\n      case ExpressionId.Const: {\r\n        let value: i32 = 0;\r\n        switch (getExpressionType(expr)) {\r\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\r\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\r\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\r\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\r\n          default: assert(false);\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\r\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\r\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\r\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\r\n          case TypeKind.BOOL: return (value & ~1) != 0;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the conversion does\r\n      case ExpressionId.Load: {\r\n        let fromType: Type;\r\n        switch (getLoadBytes(expr)) {\r\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\r\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\r\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\r\n        }\r\n        return canConversionOverflow(fromType, type);\r\n      }\r\n\r\n      // overflows if the result does, which is either\r\n      // - the last expression of the block, by contract, if the block doesn't have a label\r\n      // - the last expression or the value of an inner br if the block has a label (TODO)\r\n      case ExpressionId.Block: {\r\n        if (!getBlockName(expr)) {\r\n          let size = assert(getBlockChildCount(expr));\r\n          let last = getBlockChild(expr, size - 1);\r\n          return this.canOverflow(last, type);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.If: {\r\n        return this.canOverflow(getIfTrue(expr), type)\r\n            || this.canOverflow(assert(getIfFalse(expr)), type);\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.Select: {\r\n        return this.canOverflow(getSelectThen(expr), type)\r\n            || this.canOverflow(getSelectElse(expr), type);\r\n      }\r\n\r\n      // overflows if the call does not return a wrapped value or the conversion does\r\n      case ExpressionId.Call: {\r\n        let program = this.parentFunction.program;\r\n        let instance = assert(program.instancesByName.get(assert(getCallTarget(expr))));\r\n        assert(instance.kind == ElementKind.FUNCTION);\r\n        let returnType = (<Function>instance).signature.returnType;\r\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\r\n            || canConversionOverflow(returnType, type);\r\n      }\r\n\r\n      // doesn't technically overflow\r\n      case ExpressionId.Unreachable: return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\n/** Tests if a conversion from one type to another can technically overflow. */\r\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\r\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\r\n      || fromType.size > toType.size\r\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  getFunctionName,\r\n  getFunctionBody,\r\n  getFunctionParamCount,\r\n  getFunctionParamType,\r\n  getFunctionResultType,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfCondition,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getLoopName,\r\n  getLoopBody,\r\n  getBreakName,\r\n  getBreakCondition,\r\n  getGetLocalIndex,\r\n  getSetLocalIndex,\r\n  getSetLocalValue,\r\n  getLoadOffset,\r\n  getLoadPtr,\r\n  getStoreOffset,\r\n  getStorePtr,\r\n  getStoreValue,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getUnaryOp,\r\n  getUnaryValue,\r\n  getBinaryOp,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getSelectCondition,\r\n  getDropValue,\r\n  getReturnValue,\r\n  getHostOp,\r\n  getHostOperand\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\r\n    var body = getFunctionBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(getFunctionResultType(func)));\r\n    this.push(\" \");\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = getExpressionId(expr);\r\n    var type = getExpressionType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = getBlockName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = getBlockChildCount(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(getBlockChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          if (nested = getIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(getIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = getLoopName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(getLoopBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = getBreakCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = getBreakName(expr)) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getGetLocalIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.SetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getSetLocalIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(getSetLocalValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GetGlobal:\r\n      case ExpressionId.SetGlobal: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getLoadOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getLoadPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getStoreOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getStorePtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getStoreValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(getConstValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(getConstValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(getConstValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(getSelectThen(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectElse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(getDropValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = getReturnValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (getHostOp(expr)) {\r\n          case HostOp.CurrentMemory: {\r\n            this.push(\"memory.size()\");\r\n            return;\r\n          }\r\n          case HostOp.GrowMemory: {\r\n            this.push(\"memory.grow(\");\r\n            this.decompileExpression(getHostOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.V128: return \"v128\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property,\r\n  PropertyPrototype\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  includePrivate: bool;\r\n  /** Elements still to do. */\r\n  todo: Element[] = [];\r\n  /** Already seen elements. */\r\n  seen: Set<Element> = new Set();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all elements and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let file of this.program.filesByName.values()) {\r\n      let members = file.members;\r\n      if (!members) continue;\r\n      for (let member of members.values()) {\r\n        // FIXME: doesn't honor the actual externally visible name\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var todo = this.todo;\r\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(<FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(<ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        this.visitPropertyInstances(<PropertyPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterInstance;\r\n        if (getter) this.visitFunction(getter);\r\n        let setter = prop.setterInstance;\r\n        if (setter) this.visitFunction(setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(element);\r\n        break;\r\n      }\r\n      case ElementKind.TYPEDEFINITION: break;\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(element: FunctionPrototype): void {\r\n    var instances = element.instances;\r\n    if (instances) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(element: ClassPrototype): void {\r\n    var instances = element.instances;\r\n    if (instances) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitPropertyInstances(element: PropertyPrototype): void {\r\n    // var instances = element.instances;\r\n    // if (instances) {\r\n    //   for (let instance of instances.values()) {\r\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\r\n    //   }\r\n    // }\r\n    assert(false);\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitField(element: Field): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.name);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\r\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.name);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.name);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.name);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else sb.push(\"static \");\r\n    } else {\r\n      if (isConst) sb.push(\"const \");\r\n      else sb.push(\"var \");\r\n    }\r\n    sb.push(element.name);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\r\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(element.identifierNode.text); // 'get:funcName' internally\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n      sb.push(\";\\n\");\r\n      return;\r\n    } else {\r\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\r\n      sb.push(element.name);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.name);\r\n    var base = element.base;\r\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.name); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.parent.members; // static\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var ctor = element.constructorInstance;\r\n    if (ctor) this.visitFunction(ctor);\r\n    members = element.members; // instance\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(element.name);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.name);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    sb.push(\"export default ASModule;\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          let instances = (<FunctionPrototype>member).instances;\r\n          if (instances) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instances = (<ClassPrototype>member).instances;\r\n          if (instances) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler,\r\n  IdentifierHandling\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n  ArrowKind,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  ClassExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  IndexSignatureDeclaration,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath,\r\n  nodeIsCallable,\r\n  nodeIsGenericCallable\r\n} from \"./ast\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Source file names to be requested next. */\r\n  backlog: string[] = new Array();\r\n  /** Source file names already seen, that is processed or backlogged. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Source file names already completely processed. */\r\n  donelog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n\r\n    // check if already processed\r\n    if (this.donelog.has(internalPath)) return;\r\n    this.donelog.add(internalPath); // do not parse again\r\n    this.seenlog.add(internalPath); // do not request again\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    var program = this.program;\r\n    program.sources.push(source);\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn, null);\r\n      if (statement) statements.push(statement);\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: NamespaceDeclaration | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [decorator];\r\n      else decorators.push(decorator);\r\n    }\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (tn.skip(Token.DEFAULT)) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          tn.range()\r\n        );\r\n      }\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        }\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (!tn.skip(Token.CLASS)) {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n          break;\r\n        } else {\r\n          tn.discard(state);\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    this.donelog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'void'\r\n    } else if (token == Token.VOID) {\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\r\n      let current = first;\r\n      let parameters: TypeNode[] | null = null;\r\n      let nullable = false;\r\n\r\n      // Identifier ('.' Identifier)+\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\r\n          current.next = next;\r\n          current = next;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range(tn.pos)\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          if (!parameters) parameters = [<TypeNode>parameter];\r\n          else parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      while (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skipIdentifier()) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        if (isSignature) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skipIdentifier()) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n    if (tn.skip(Token.EXCLAMATION)) {\r\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n    }\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    var range = Range.join(identifier.range, tn.range());\r\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\r\n      this.error(\r\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n        range);\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      range\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n      if (!member) return null;\r\n      members.push(<EnumValueDeclaration>member);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEBRACE)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    var seenOptional = false;\r\n    while (!tn.skip(Token.GREATERTHAN)) {\r\n      let typeParameter = this.parseTypeParameter(tn);\r\n      if (!typeParameter) return null;\r\n      if (typeParameter.defaultType !== null) {\r\n        seenOptional = true;\r\n      } else if (seenOptional) {\r\n        this.error(\r\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\r\n          typeParameter.range\r\n        );\r\n        typeParameter.defaultType = null;\r\n      }\r\n      if (!typeParameters) typeParameters = [ typeParameter ];\r\n      else typeParameters.push(typeParameter);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.GREATERTHAN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    if (!(typeParameters && typeParameters.length)) {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)? ('=' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      let defaultType: TypeNode | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        defaultType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        defaultType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseParametersThis: TypeNode | null = null;\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n    var thisType: CommonTypeNode | null = null;\r\n\r\n    // check if there is a leading `this` parameter\r\n    this.parseParametersThis = null;\r\n    if (tn.skip(Token.THIS)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        thisType = this.parseType(tn); // reports\r\n        if (!thisType) return null;\r\n        if (thisType.kind == NodeKind.TYPE) {\r\n          this.parseParametersThis = <TypeNode>thisType;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            thisType.range\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n        return null;\r\n      }\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          return parameters;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let param = this.parseParameter(tn, isConstructor); // reports\r\n      if (!param) return null;\r\n      if (seenRest && !reportedRest) {\r\n        this.error(\r\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n          seenRest.name.range\r\n        );\r\n        reportedRest = true;\r\n      }\r\n      switch (param.parameterKind) {\r\n        default: {\r\n          if (seenOptional) {\r\n            this.error(\r\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n              param.name.range\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ParameterKind.OPTIONAL: {\r\n          seenOptional = true;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          seenRest = param;\r\n          break;\r\n        }\r\n      }\r\n      parameters.push(param);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (isConstructor) {\r\n      if (tn.skip(Token.PUBLIC)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PUBLIC;\r\n      } else if (tn.skip(Token.PROTECTED)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PROTECTED;\r\n      } else if (tn.skip(Token.PRIVATE)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PRIVATE;\r\n      }\r\n      if (tn.peek() == Token.READONLY) {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek() != Token.COLON) { // modifier\r\n          tn.discard(state);\r\n          if (!startRange) startRange = tn.range();\r\n          accessFlags |= CommonFlags.READONLY;\r\n        } else { // identifier\r\n          tn.reset(state);\r\n        }\r\n      }\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skipIdentifier()) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n    var thisType = this.parseParametersThis;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      ArrowKind.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var arrowKind = ArrowKind.NONE;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skipIdentifier()) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    arrowKind: ArrowKind,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n    }\r\n\r\n    if (arrowKind) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null, // TODO?\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (arrowKind) {\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        body = this.parseBlockStatement(tn, false);\r\n      } else {\r\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\r\n      }\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      CommonFlags.NONE,\r\n      arrowKind,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: TypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [<TypeNode>type];\r\n          else implementsTypes.push(<TypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (member) members.push(<DeclarationStatement>member);\r\n        else {\r\n          this.skipStatement(tn);\r\n          if (tn.skip(Token.ENDOFFILE)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return declaration;\r\n  }\r\n\r\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\r\n\r\n    // at 'class': Identifier? '{' ... '}'\r\n\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n\r\n    if (tn.skipIdentifier()) {\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    } else {\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration = Node.createClassDeclaration(\r\n      name,\r\n      [],\r\n      null,\r\n      null,\r\n      members,\r\n      null,\r\n      CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (member) members.push(<DeclarationStatement>member);\r\n        else {\r\n          this.skipStatement(tn);\r\n          if (tn.skip(Token.ENDOFFILE)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return Node.createClassExpression(declaration);\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\r\n\r\n    var decorators: DecoratorNode[] | null = null;\r\n    if (tn.skip(Token.AT)) {\r\n      do {\r\n        let decorator = this.parseDecorator(tn);\r\n        if (!decorator) break;\r\n        if (!decorators) decorators = [<DecoratorNode>decorator];\r\n        else decorators.push(<DecoratorNode>decorator);\r\n      } while (tn.skip(Token.AT));\r\n      if (decorators && isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n        );\r\n      }\r\n    }\r\n\r\n    // inherit ambient status\r\n    var flags = parent.flags & CommonFlags.AMBIENT;\r\n\r\n    // implemented methods are virtual\r\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\r\n\r\n    var accessStart = 0;\r\n    var accessEnd = 0;\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"public\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PUBLIC;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"private\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PRIVATE;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"protected\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PROTECTED;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    }\r\n\r\n    var staticStart = 0;\r\n    var staticEnd = 0;\r\n    var abstractStart = 0;\r\n    var abstractEnd = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"static\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      flags |= CommonFlags.INSTANCE;\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        if (isInterface) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(), \"abstract\"\r\n          );\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (!isInterface) {\r\n      if (tn.skip(Token.GET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.GET;\r\n          isGetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.SET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.SET;\r\n          isSetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n        flags |= CommonFlags.CONSTRUCTOR;\r\n        isConstructor = true;\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    var name: IdentifierExpression;\r\n    if (isConstructor) {\r\n      name = Node.createConstructorExpression(tn.range());\r\n    } else {\r\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\r\n        // TODO: also handle symbols, which might have some of these modifiers\r\n        if (flags & CommonFlags.PUBLIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"public\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PROTECTED) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PRIVATE) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\r\n        if (!retIndex) return null;\r\n        tn.skip(Token.SEMICOLON);\r\n        return retIndex;\r\n      }\r\n      if (!tn.skipIdentifier()) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      let thisType = this.parseParametersThis;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        thisType,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\r\n            tn.range(), name.text\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.QUESTION)) {\r\n        this.error(\r\n          DiagnosticCode.Optional_properties_are_not_supported,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      if (tn.skip(Token.EXCLAMATION)) {\r\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let range = tn.range(startPos, tn.pos);\r\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\r\n        this.error(\r\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n          range\r\n        );\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        range\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\r\n\r\n    // at: '[': 'key' ':' Type ']' ':' Type\r\n\r\n    if (decorators && decorators.length) {\r\n      this.error(\r\n        DiagnosticCode.Decorators_are_not_valid_here,\r\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n      ); // recoverable\r\n    }\r\n\r\n    var start = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let id = tn.readIdentifier();\r\n      if (id == \"key\") {\r\n        if (tn.skip(Token.COLON)) {\r\n          let keyType = this.parseType(tn);\r\n          if (!keyType) return null;\r\n          if (keyType.kind != NodeKind.TYPE) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              tn.range()\r\n            );\r\n            return null;\r\n          }\r\n          if (tn.skip(Token.CLOSEBRACKET)) {\r\n            if (tn.skip(Token.COLON)) {\r\n              let valueType = this.parseType(tn);\r\n              if (!valueType) return null;\r\n              return Node.createIndexSignatureDeclaration(<TypeNode>keyType, valueType, tn.range(start, tn.pos));\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \":\"\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \":\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"key\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let ns = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, ns);\r\n          if (member) members.push(member);\r\n          else {\r\n            this.skipStatement(tn);\r\n            if (tn.skip(Token.ENDOFFILE)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ns;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    isDeclare: bool\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    var path: StringLiteralExpression | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseExportMember(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\r\n          let internalPath = assert(ret.internalPath);\r\n          let source = tn.source;\r\n          if (!source.exportPaths) source.exportPaths = new Set();\r\n          source.exportPaths.add(internalPath);\r\n          if (!this.seenlog.has(internalPath)) {\r\n            this.backlog.push(internalPath);\r\n            this.seenlog.add(internalPath);\r\n          }\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"from\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseImportDeclaration(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skipIdentifier()) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        if (tn.token == Token.ENDOFFILE) return null;\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skipIdentifier()) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(IdentifierHandling.PREFER);\r\n    var startPos = tn.tokenPos;\r\n    var precedence = determinePrecedenceStart(token);\r\n    if (precedence != Precedence.NONE) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, precedence);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var expr: Expression | null = null;\r\n    switch (token) {\r\n\r\n      case Token.NULL: return Node.createNullExpression(tn.range());\r\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\r\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            ArrowKind.ARROW_PARENTHESIZED\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(IdentifierHandling.PREFER)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (\r\n                    !tn.skip(Token.COLON) &&\r\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\r\n                  ) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // optional parameter or parenthesized\r\n                case Token.QUESTION: {\r\n                  if (\r\n                    tn.skip(Token.COLON) ||   // optional parameter with type\r\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\r\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\r\n                  ) {\r\n                    tn.reset(state);\r\n                    return this.parseFunctionExpression(tn);\r\n                  }\r\n                  again = false; // parenthesized\r\n                  break;\r\n                  }\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        while (!tn.skip(Token.CLOSEBRACKET)) {\r\n          if (tn.peek() == Token.COMMA) {\r\n            expr = null; // omitted\r\n          } else {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n          }\r\n          elementExpressions.push(expr);\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACKET)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"]\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // ObjectLiteralExpression\r\n      case Token.OPENBRACE: {\r\n        let startPos = tn.tokenPos;\r\n        let names = new Array<IdentifierExpression>();\r\n        let values = new Array<Expression>();\r\n        let name: IdentifierExpression;\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          if (!tn.skipIdentifier()) {\r\n            if (!tn.skip(Token.STRINGLITERAL)) {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                tn.range(),\r\n              );\r\n              return null;\r\n            }\r\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\r\n            name.isQuoted = true;\r\n          } else {\r\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          }\r\n          names.push(name);\r\n          if (tn.skip(Token.COLON)) {\r\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!value) return null;\r\n            values.push(value);\r\n          } else if (!name.isQuoted) {\r\n            values.push(name);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACE)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [\r\n              Node.createParameter(\r\n                identifier,\r\n                Node.createOmittedType(identifier.range.atEnd),\r\n                null,\r\n                ParameterKind.DEFAULT,\r\n                identifier.range\r\n              )\r\n            ],\r\n            ArrowKind.ARROW_SINGLE,\r\n            startPos\r\n          );\r\n        }\r\n        return identifier;\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\r\n          this.error(\r\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\r\n            tn.range()\r\n          );\r\n        }\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      case Token.CLASS: {\r\n        return this.parseClassExpression(tn);\r\n      }\r\n      default: {\r\n        if (token == Token.ENDOFFILE) {\r\n          this.error(\r\n            DiagnosticCode.Unexpected_end_of_text,\r\n            tn.range(startPos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Expression_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments: CommonTypeNode[] | null = null;\r\n    do {\r\n      if (tn.peek() === Token.GREATERTHAN) {\r\n        break;\r\n      }\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      if (!typeArguments) typeArguments = [ type ];\r\n      else typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!expr) return null;\r\n      args.push(expr);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = Precedence.COMMA\r\n  ): Expression | null {\r\n    assert(precedence != Precedence.NONE);\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\r\n\r\n    var startPos = expr.range.start;\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn); // reports\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        case Token.EXCLAMATION: {\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.NONNULL,\r\n            expr,\r\n            null,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // InstanceOfExpression\r\n        case Token.INSTANCEOF: {\r\n          let isType = this.parseType(tn); // reports\r\n          if (!isType) return null;\r\n          expr = Node.createInstanceOfExpression(\r\n            expr,\r\n            isType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn); // reports\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\r\n            ? Precedence.COMMA + 1\r\n            : Precedence.COMMA\r\n          );\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (tn.skipIdentifier()) {\r\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            } else {\r\n              next = this.parseExpression(tn,\r\n                isRightAssociative(token)\r\n                  ? nextPrecedence\r\n                  : nextPrecedence + 1\r\n              );\r\n              if (!next) return null;\r\n            }\r\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\r\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\r\n              if (!expr) return null;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            next = this.parseExpression(tn,\r\n              isRightAssociative(token)\r\n                ? nextPrecedence\r\n                : nextPrecedence + 1\r\n            );\r\n            if (!next) return null;\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  private joinPropertyCall(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    expr: Expression,\r\n    call: CallExpression\r\n  ): Expression | null {\r\n    var callee = call.expression;\r\n    switch (callee.kind) {\r\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\r\n        call.expression = Node.createPropertyAccessExpression(\r\n          expr,\r\n          <IdentifierExpression>callee,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.CALL: { // join call target und wrap the original call around it\r\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\r\n        if (!inner) return null;\r\n        call.expression = inner;\r\n        call.range = tn.range(startPos, tn.pos);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          call.range\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return call;\r\n  }\r\n\r\n  private maybeParseCallExpression(\r\n    tn: Tokenizer,\r\n    expr: Expression\r\n  ): Expression {\r\n    if (nodeIsCallable(expr.kind)) {\r\n      let typeArguments: CommonTypeNode[] | null = null;\r\n      while (\r\n        tn.skip(Token.OPENPAREN)\r\n        ||\r\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\r\n      ) {\r\n        let args = this.parseArguments(tn);\r\n        if (!args) break;\r\n        expr = Node.createCallExpression( // is again callable\r\n          expr,\r\n          typeArguments,\r\n          args,\r\n          tn.range(expr.range.start, tn.pos)\r\n        );\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.SEMICOLON      // end of the statement for sure\r\n      ) {\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          this.skipBlock(tn);\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipBlock(tn: Tokenizer): void {\r\n    // at '{': ... '}'\r\n    var depth = 1;\r\n    var again = true;\r\n    do {\r\n      switch (tn.next()) {\r\n        case Token.ENDOFFILE: {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          again = false;\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          ++depth;\r\n          break;\r\n        }\r\n        case Token.CLOSEBRACE: {\r\n          --depth;\r\n          if (!depth) again = false;\r\n          break;\r\n        }\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (again);\r\n  }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  NONE,\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET:\r\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\n/// <reference path=\"./node.d.ts\" />\r\n\r\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\r\nimport \"../../../std/portable/index\";\r\nimport \"./float\";\r\nimport \"./i64\";\r\n\r\nimport { Module } from \"../../module\";\r\n\r\nModule.prototype.toText = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitStackIR();\r\n};\r\n\r\nModule.prototype.toAsmjs = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitAsmjs();\r\n};\r\n","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\nglobal.binaryen = binaryen;\r\n\r\nfor (var key in binaryen) {\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\r\n}\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.__memory_allocate = binaryen._malloc;\r\nglobal.__memory_free = binaryen._free;\r\nglobal.__memory_copy = binaryen._memmove;\r\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\r\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__19__;","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nglobalScope.ASC_TARGET = 0; // JS\r\nglobalScope.ASC_NO_ASSERT = false;\r\nglobalScope.ASC_MEMORY_BASE = 0;\r\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\r\nglobalScope.ASC_SHRINK_LEVEL = 0;\r\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\r\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\r\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\r\nglobalScope.ASC_FEATURE_SIMD = false;\r\nglobalScope.ASC_FEATURE_THREADS = false;\r\n\r\nvar F64 = new Float64Array(1);\r\nvar U64 = new Uint32Array(F64.buffer);\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value:  127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value:  32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value:   0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value:     0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value:          0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: false, writable: false },\r\n  \"MAX_VALUE\": { value: true,  writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\r\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\r\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isNullable\"] = function isNullable(arg) {\r\n  return true;\r\n}\r\n\r\nglobalScope[\"isReference\"] = function isReference(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isFunction\"] = function isFunction(arg) {\r\n  return typeof arg === \"function\";\r\n}\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\r\n  return expr\r\n    && typeof expr === 'object'\r\n    && typeof expr.length === 'number'\r\n    && expr.length >= 0\r\n    && Math.trunc(expr.length) === expr.length;\r\n}\r\n\r\nglobalScope[\"isDefined\"] = function isDefined(expr) {\r\n  return typeof expr !== \"undefined\";\r\n}\r\n\r\nglobalScope[\"isConstant\"] = function isConstant(expr) {\r\n  return false;\r\n};\r\n\r\nglobalScope[\"unchecked\"] = function unchecked(expr) {\r\n  return expr;\r\n};\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nglobalScope[\"JSMath\"] = Math;\r\n\r\nObject.defineProperties(globalScope[\"JSMath\"], {\r\n  sincos_sin: { value: 0.0, writable: true },\r\n  sincos_cos: { value: 0.0, writable: true },\r\n  signbit: {\r\n    value: function signbit(x) {\r\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\r\n    }\r\n  },\r\n  sincos: {\r\n    value: function sincos(x) {\r\n      this.sincos_sin = Math.sin(x);\r\n      this.sincos_cos = Math.cos(x);\r\n    }\r\n  }\r\n});\r\n\r\nglobalScope[\"memory\"] = (() => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n  return {\r\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\r\n      if (!(size >>>= 0)) return 0;\r\n      if (HEAP_OFFSET + size > HEAP.length) {\r\n        var oldHeap = HEAP;\r\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n        HEAP.set(oldHeap);\r\n      }\r\n      var ptr = HEAP_OFFSET;\r\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n      return ptr;\r\n    },\r\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\r\n      HEAP.fill(value, dest, dest + size);\r\n    },\r\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\r\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\r\n      HEAP.copyWithin(dest, src, src + size);\r\n    },\r\n    reset: globalScope[\"__memory_reset\"] || function reset() {\r\n      HEAP = new Uint8Array(0);\r\n      HEAP_OFFSET = 0;\r\n    }\r\n  };\r\n})();\r\n\r\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\r\n  HEAP[(ptr | 0) + (offset | 0)] = value;\r\n};\r\n\r\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\r\n  return HEAP[(ptr | 0) + (offset | 0)];\r\n};\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_zero = Long.ZERO;\r\n\r\nglobal.i64_one = Long.ONE;\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_eq = function(left, right) {\r\n  return left.eq(right);\r\n};\r\n\r\nglobal.i64_ne = function(left, right) {\r\n  return left.ne(right);\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\n import {\r\n  Compiler,\r\n  ConversionKind,\r\n  WrapMode,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression,\r\n  CallExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  AtomicRMWOp,\r\n  SIMDExtractOp,\r\n  SIMDReplaceOp,\r\n  SIMDShiftOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI64High,\r\n  getConstValueI64Low,\r\n  getConstValueI32,\r\n  getConstValueF32,\r\n  getConstValueF64\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  OperatorKind,\r\n  FunctionPrototype,\r\n  Class,\r\n  Field,\r\n  Global,\r\n  DecoratorFlags,\r\n  ClassPrototype\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags\r\n} from \"./flow\";\r\n\r\nimport {\r\n  ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeF32,\r\n  writeF64,\r\n  isPowerOf2\r\n} from \"./util\";\r\n\r\n/** Symbols of various compiler built-ins. */\r\nexport namespace BuiltinSymbols {\r\n  // std/builtins.ts\r\n  export const isInteger = \"~lib/builtins/isInteger\";\r\n  export const isFloat = \"~lib/builtins/isFloat\";\r\n  export const isSigned = \"~lib/builtins/isSigned\";\r\n  export const isReference = \"~lib/builtins/isReference\";\r\n  export const isString = \"~lib/builtins/isString\";\r\n  export const isArray = \"~lib/builtins/isArray\";\r\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\r\n  export const isFunction = \"~lib/builtins/isFunction\";\r\n  export const isNullable = \"~lib/builtins/isNullable\";\r\n  export const isDefined = \"~lib/builtins/isDefined\";\r\n  export const isConstant = \"~lib/builtins/isConstant\";\r\n  export const isManaged = \"~lib/builtins/isManaged\";\r\n\r\n  export const clz = \"~lib/builtins/clz\";\r\n  export const ctz = \"~lib/builtins/ctz\";\r\n  export const popcnt = \"~lib/builtins/popcnt\";\r\n  export const rotl = \"~lib/builtins/rotl\";\r\n  export const rotr = \"~lib/builtins/rotr\";\r\n  export const abs = \"~lib/builtins/abs\";\r\n  export const max = \"~lib/builtins/max\";\r\n  export const min = \"~lib/builtins/min\";\r\n  export const ceil = \"~lib/builtins/ceil\";\r\n  export const floor = \"~lib/builtins/floor\";\r\n  export const copysign = \"~lib/builtins/copysign\";\r\n  export const nearest = \"~lib/builtins/nearest\";\r\n  export const reinterpret = \"~lib/builtins/reinterpret\";\r\n  export const sqrt = \"~lib/builtins/sqrt\";\r\n  export const trunc = \"~lib/builtins/trunc\";\r\n  export const load = \"~lib/builtins/load\";\r\n  export const store = \"~lib/builtins/store\";\r\n  export const atomic_load = \"~lib/builtins/atomic.load\";\r\n  export const atomic_store = \"~lib/builtins/atomic.store\";\r\n  export const atomic_add = \"~lib/builtins/atomic.add\";\r\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\r\n  export const atomic_and = \"~lib/builtins/atomic.and\";\r\n  export const atomic_or = \"~lib/builtins/atomic.or\";\r\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\r\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\r\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\r\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\r\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\r\n\r\n  export const sizeof = \"~lib/builtins/sizeof\";\r\n  export const alignof = \"~lib/builtins/alignof\";\r\n  export const offsetof = \"~lib/builtins/offsetof\";\r\n  export const select = \"~lib/builtins/select\";\r\n  export const unreachable = \"~lib/builtins/unreachable\";\r\n  export const changetype = \"~lib/builtins/changetype\";\r\n  export const assert = \"~lib/builtins/assert\";\r\n  export const unchecked = \"~lib/builtins/unchecked\";\r\n  export const call_indirect = \"~lib/builtins/call_indirect\";\r\n  export const instantiate = \"~lib/builtins/instantiate\";\r\n\r\n  export const i8 = \"~lib/builtins/i8\";\r\n  export const i16 = \"~lib/builtins/i16\";\r\n  export const i32 = \"~lib/builtins/i32\";\r\n  export const i64 = \"~lib/builtins/i64\";\r\n  export const isize = \"~lib/builtins/isize\";\r\n  export const u8 = \"~lib/builtins/u8\";\r\n  export const u16 = \"~lib/builtins/u16\";\r\n  export const u32 = \"~lib/builtins/u32\";\r\n  export const u64 = \"~lib/builtins/u64\";\r\n  export const usize = \"~lib/builtins/usize\";\r\n  export const bool = \"~lib/builtins/bool\";\r\n  export const f32 = \"~lib/builtins/f32\";\r\n  export const f64 = \"~lib/builtins/f64\";\r\n  export const v128 = \"~lib/builtins/v128\";\r\n  export const void_ = \"~lib/builtins/void\";\r\n\r\n  export const i32_clz = \"~lib/builtins/i32.clz\";\r\n  export const i64_clz = \"~lib/builtins/i64.clz\";\r\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\r\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\r\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\r\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\r\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\r\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\r\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\r\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\r\n\r\n  export const f32_abs = \"~lib/builtins/f32.abs\";\r\n  export const f64_abs = \"~lib/builtins/f64.abs\";\r\n  export const f32_max = \"~lib/builtins/f32.max\";\r\n  export const f64_max = \"~lib/builtins/f64.max\";\r\n  export const f32_min = \"~lib/builtins/f32.min\";\r\n  export const f64_min = \"~lib/builtins/f64.min\";\r\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\r\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\r\n  export const f32_floor = \"~lib/builtins/f32.floor\";\r\n  export const f64_floor = \"~lib/builtins/f64.floor\";\r\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\r\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\r\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\r\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\r\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\r\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\r\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\r\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\r\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\r\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\r\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\r\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\r\n\r\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\r\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\r\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\r\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\r\n  export const i32_load = \"~lib/builtins/i32.load\";\r\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\r\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\r\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\r\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\r\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\r\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\r\n  export const i64_load = \"~lib/builtins/i64.load\";\r\n  export const f32_load = \"~lib/builtins/f32.load\";\r\n  export const f64_load = \"~lib/builtins/f64.load\";\r\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\r\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\r\n  export const i32_store = \"~lib/builtins/i32.store\";\r\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\r\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\r\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\r\n  export const i64_store = \"~lib/builtins/i64.store\";\r\n  export const f32_store = \"~lib/builtins/f32.store\";\r\n  export const f64_store = \"~lib/builtins/f64.store\";\r\n\r\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\r\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\r\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\r\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\r\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\r\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\r\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\r\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\r\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\r\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\r\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\r\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\r\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\r\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\r\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\r\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\r\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\r\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\r\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\r\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\r\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\r\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\r\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\r\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\r\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\r\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\r\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\r\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\r\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\r\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\r\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\r\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\r\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\r\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\r\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\r\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\r\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\r\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\r\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\r\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\r\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\r\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\r\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\r\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\r\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\r\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\r\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\r\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\r\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\r\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\r\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\r\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\r\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\r\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\r\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\r\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\r\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\r\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\r\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\r\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\r\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\r\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\r\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\r\n  export const i32_wait = \"~lib/builtins/i32.wait\";\r\n  export const i64_wait = \"~lib/builtins/i64.wait\";\r\n  export const i32_notify = \"~lib/builtins/i32.notify\";\r\n  export const i64_notify = \"~lib/builtins/i64.notify\";\r\n\r\n  export const v128_splat = \"~lib/builtins/v128.splat\";\r\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\r\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\r\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\r\n  export const v128_load = \"~lib/builtins/v128.load\";\r\n  export const v128_store = \"~lib/builtins/v128.store\";\r\n  export const v128_add = \"~lib/builtins/v128.add\";\r\n  export const v128_sub = \"~lib/builtins/v128.sub\";\r\n  export const v128_mul = \"~lib/builtins/v128.mul\";\r\n  export const v128_div = \"~lib/builtins/v128.div\";\r\n  export const v128_neg = \"~lib/builtins/v128.neg\";\r\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\r\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\r\n  export const v128_shl = \"~lib/builtins/v128.shl\";\r\n  export const v128_shr = \"~lib/builtins/v128.shr\";\r\n  export const v128_and = \"~lib/builtins/v128.and\";\r\n  export const v128_or = \"~lib/builtins/v128.or\";\r\n  export const v128_xor = \"~lib/builtins/v128.xor\";\r\n  export const v128_not = \"~lib/builtins/v128.not\";\r\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\r\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\r\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\r\n  export const v128_min = \"~lib/builtins/v128.min\";\r\n  export const v128_max = \"~lib/builtins/v128.max\";\r\n  export const v128_abs = \"~lib/builtins/v128.abs\";\r\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\r\n  export const v128_eq = \"~lib/builtins/v128.eq\";\r\n  export const v128_ne = \"~lib/builtins/v128.ne\";\r\n  export const v128_lt = \"~lib/builtins/v128.lt\";\r\n  export const v128_le = \"~lib/builtins/v128.le\";\r\n  export const v128_gt = \"~lib/builtins/v128.gt\";\r\n  export const v128_ge = \"~lib/builtins/v128.ge\";\r\n  export const v128_convert = \"~lib/builtins/v128.convert\";\r\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\r\n\r\n  export const i8x16 = \"~lib/builtins/i8x16\";\r\n  export const i16x8 = \"~lib/builtins/i16x8\";\r\n  export const i32x4 = \"~lib/builtins/i32x4\";\r\n  export const i64x2 = \"~lib/builtins/i64x2\";\r\n  export const f32x4 = \"~lib/builtins/f32x4\";\r\n  export const f64x2 = \"~lib/builtins/f64x2\";\r\n\r\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\r\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\r\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\r\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\r\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\r\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\r\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\r\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\r\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\r\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\r\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\r\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\r\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\r\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\r\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\r\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\r\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\r\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\r\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\r\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\r\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\r\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\r\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\r\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\r\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\r\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\r\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\r\n\r\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\r\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\r\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\r\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\r\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\r\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\r\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\r\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\r\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\r\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\r\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\r\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\r\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\r\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\r\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\r\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\r\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\r\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\r\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\r\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\r\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\r\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\r\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\r\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\r\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\r\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\r\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\r\n\r\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\r\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\r\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\r\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\r\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\r\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\r\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\r\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\r\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\r\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\r\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\r\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\r\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\r\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\r\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\r\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\r\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\r\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\r\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\r\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\r\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\r\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\r\n  export const i32x4_trunc_s_f32x4_sat = \"~lib/builtins/i32x4.trunc_s_f32x4_sat\";\r\n  export const i32x4_trunc_u_f32x4_sat = \"~lib/builtins/i32x4.trunc_u_f32x4_sat\";\r\n\r\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\r\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\r\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\r\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\r\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\r\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\r\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\r\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\r\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\r\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\r\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\r\n  export const i64x2_trunc_s_f64x2_sat = \"~lib/builtins/i64x2.trunc_s_f64x2_sat\";\r\n  export const i64x2_trunc_u_f64x2_sat = \"~lib/builtins/i64x2.trunc_u_f64x2_sat\";\r\n\r\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\r\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\r\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\r\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\r\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\r\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\r\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\r\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\r\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\r\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\r\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\r\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\r\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\r\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\r\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\r\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\r\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\r\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\r\n  export const f32x4_convert_s_i32x4 = \"~lib/builtins/f32x4.convert_s_i32x4\";\r\n  export const f32x4_convert_u_i32x4 = \"~lib/builtins/f32x4.convert_u_i32x4\";\r\n\r\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\r\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\r\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\r\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\r\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\r\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\r\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\r\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\r\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\r\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\r\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\r\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\r\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\r\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\r\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\r\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\r\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\r\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\r\n  export const f64x2_convert_s_i64x2 = \"~lib/builtins/f64x2.convert_s_i64x2\";\r\n  export const f64x2_convert_u_i64x2 = \"~lib/builtins/f64x2.convert_u_i64x2\";\r\n\r\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\r\n\r\n  // std/diagnostics.ts\r\n  export const ERROR = \"~lib/diagnostics/ERROR\";\r\n  export const WARNING = \"~lib/diagnostics/WARNING\";\r\n  export const INFO = \"~lib/diagnostics/INFO\";\r\n  // std/memory.ts\r\n  export const HEAP_BASE = \"~lib/memory/HEAP_BASE\";\r\n  export const memory_size = \"~lib/memory/memory.size\";\r\n  export const memory_grow = \"~lib/memory/memory.grow\";\r\n  export const memory_copy = \"~lib/memory/memory.copy\";\r\n  export const memory_fill = \"~lib/memory/memory.fill\";\r\n  // std/gc.ts\r\n  export const iterateRoots = \"~lib/gc/iterateRoots\";\r\n}\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  /* Compiler reference. */\r\n  compiler: Compiler,\r\n  /** Respective function prototype. */\r\n  prototype: FunctionPrototype,\r\n  /** Pre-resolved type arguments. */\r\n  typeArguments: Type[] | null,\r\n  /** Operand expressions. */\r\n  operands: Expression[],\r\n  /** Contextual type. */\r\n  contextualType: Type,\r\n  /** Respective call expression. */\r\n  reportNode: CallExpression,\r\n  /** Indicates that contextual type is ASM type. */\r\n  isAsm: bool = false\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  // NOTE that consolidation of individual instructions into a single case isn't exactly scientific\r\n  // below, but rather done to make this file easier to work with. If there was a general rule it'd\r\n  // most likely be \"three or more instructions that only differ in their actual opcode\".\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // === Static type evaluation =================================================================\r\n\r\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.SIGNED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\r\n      }\r\n      return module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classReference = type.classReference;\r\n      if (!classReference) return module.createI32(0);\r\n      let classPrototype = classReference.prototype;\r\n      return module.createI32(\r\n        (<ClassPrototype>classPrototype).extends(compiler.program.arrayPrototype)\r\n          ? 1\r\n          : 0\r\n      );\r\n    }\r\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classReference = type.classReference;\r\n      if (!classReference) return module.createI32(0);\r\n      return module.createI32(\r\n        classReference.lookupInSelf(\"length\") && (\r\n          classReference.lookupOverload(OperatorKind.INDEXED_GET) ||\r\n          classReference.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET)\r\n        ) ? 1 : 0\r\n      );\r\n    }\r\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return module.createI32(type.signatureReference ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return module.createI32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let element = compiler.resolver.resolveExpression(\r\n        operands[0],\r\n        compiler.currentFlow,\r\n        Type.void,\r\n        ReportMode.SWALLOW\r\n      );\r\n      return module.createI32(element ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      compiler.currentType = Type.bool;\r\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\r\n      if (!compiler.program.hasGC) {\r\n        compiler.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let expr: ExpressionRef;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          expr = module.createI32(byteSize);\r\n        } else {\r\n          expr = module.createI64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          expr = module.createI64(byteSize, 0);\r\n        } else {\r\n          expr = module.createI32(byteSize);\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      assert(isPowerOf2(byteSize));\r\n      let alignLog2 = ctz<i32>(byteSize);\r\n      let expr: ExpressionRef;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          expr = module.createI32(alignLog2);\r\n        } else {\r\n          expr = module.createI64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          expr = module.createI64(alignLog2, 0);\r\n        } else {\r\n          expr = module.createI32(alignLog2);\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let classType = typeArguments![0].classReference;\r\n      if (!classType) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.createI32(offset);\r\n        } else {\r\n          return module.createI64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.createI64(offset);\r\n        } else {\r\n          return module.createI32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // === Math ===================================================================================\r\n\r\n    case BuiltinSymbols.clz: // any_bitcount<T?>(value: T) -> T\r\n    case BuiltinSymbols.ctz:\r\n    case BuiltinSymbols.popcnt: {\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.clz: {\r\n          switch (type.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.ClzI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.ClzI64\r\n                : UnaryOp.ClzI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.ClzI64; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.ctz: {\r\n          switch (type.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.CtzI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.CtzI64\r\n                : UnaryOp.CtzI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.CtzI64; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.popcnt: {\r\n          switch (compiler.currentType.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.PopcntI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.PopcntI64\r\n                : UnaryOp.PopcntI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.PopcntI64; break; }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      return module.createUnary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          expr = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            type\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          expr = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.ISIZE: {\r\n          expr = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0, arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          expr = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr; // possibly overflows\r\n    }\r\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          expr = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            type\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          expr = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.ISIZE: {\r\n          expr = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0, arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          expr = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr; // possibly overflowws\r\n    }\r\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFlow;\r\n\r\n          // possibly overflows, e.g. abs<i8>(-128) == 128\r\n          let tempLocal1 = flow.getTempLocal(Type.i32, false);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32, false).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 31)) ^ (x >> 31)\r\n          expr = module.createBinary(BinaryOp.XorI32,\r\n            module.createBinary(BinaryOp.AddI32,\r\n              module.createTeeLocal(\r\n                tempLocalIndex2,\r\n                module.createBinary(BinaryOp.ShrI32,\r\n                  module.createTeeLocal(tempLocalIndex1, arg0),\r\n                  module.createI32(31)\r\n                )\r\n              ),\r\n              module.createGetLocal(tempLocalIndex1, NativeType.I32)\r\n            ),\r\n            module.createGetLocal(tempLocalIndex2, NativeType.I32)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let options = compiler.options;\r\n          let flow = compiler.currentFlow;\r\n          let wasm64 = options.isWasm64;\r\n\r\n          let tempLocal1 = flow.getTempLocal(options.usizeType, false);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType, false).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          expr = module.createBinary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\r\n            module.createBinary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\r\n              module.createTeeLocal(\r\n                tempLocalIndex2,\r\n                module.createBinary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\r\n                  module.createTeeLocal(tempLocalIndex1, arg0),\r\n                  wasm64 ? module.createI64(63) : module.createI32(31)\r\n                )\r\n              ),\r\n              module.createGetLocal(tempLocalIndex1, options.nativeSizeType)\r\n            ),\r\n            module.createGetLocal(tempLocalIndex2, options.nativeSizeType)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let flow = compiler.currentFlow;\r\n\r\n          let tempLocal1 = flow.getTempLocal(Type.i64, false);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64, false).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 63)) ^ (x >> 63)\r\n          expr = module.createBinary(BinaryOp.XorI64,\r\n            module.createBinary(BinaryOp.AddI64,\r\n              module.createTeeLocal(\r\n                tempLocalIndex2,\r\n                module.createBinary(BinaryOp.ShrI64,\r\n                  module.createTeeLocal(tempLocalIndex1, arg0),\r\n                  module.createI64(63)\r\n                )\r\n              ),\r\n              module.createGetLocal(tempLocalIndex1, NativeType.I64)\r\n            ),\r\n            module.createGetLocal(tempLocalIndex2, NativeType.I64)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          expr = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: { op = BinaryOp.GtI32; break; }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\r\n        case TypeKind.I64: { op = BinaryOp.GtI64; break; }\r\n        case TypeKind.U64: { op = BinaryOp.GtU64; break; }\r\n        case TypeKind.ISIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.GtI64\r\n            : BinaryOp.GtI32;\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.GtU64\r\n            : BinaryOp.GtU32;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          return module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n        }\r\n        case TypeKind.F64: {\r\n          return module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      let flow = compiler.currentFlow;\r\n      let nativeType = type.toNativeType();\r\n      let tempLocal0 = flow.getTempLocal(type, true);\r\n      let tempLocal1 = flow.getAndFreeTempLocal(type, true);\r\n      flow.freeTempLocal(tempLocal0);\r\n      return module.createSelect(\r\n        module.createTeeLocal(tempLocal0.index, arg0),\r\n        module.createTeeLocal(tempLocal1.index, arg1),\r\n        module.createBinary(op,\r\n          module.createGetLocal(tempLocal0.index, nativeType),\r\n          module.createGetLocal(tempLocal1.index, nativeType)\r\n        )\r\n      );\r\n    }\r\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: { op = BinaryOp.LtI32; break; }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\r\n        case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\r\n        case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\r\n        case TypeKind.ISIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.LtI64\r\n            : BinaryOp.LtI32;\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.LtU64\r\n            : BinaryOp.LtU32;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          return module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n        }\r\n        case TypeKind.F64: {\r\n          return module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      let flow = compiler.currentFlow;\r\n      let nativeType = type.toNativeType();\r\n      let tempLocal0 = flow.getTempLocal(type, true);\r\n      let tempLocal1 = flow.getAndFreeTempLocal(type, true);\r\n      flow.freeTempLocal(tempLocal0);\r\n      return module.createSelect(\r\n        module.createTeeLocal(tempLocal0.index, arg0),\r\n        module.createTeeLocal(tempLocal1.index, arg1),\r\n        module.createBinary(op,\r\n          module.createGetLocal(tempLocal0.index, nativeType),\r\n          module.createGetLocal(tempLocal1.index, nativeType)\r\n        )\r\n      );\r\n    }\r\n    case BuiltinSymbols.ceil: // any_rounding<T?>(value: T) -> T\r\n    case BuiltinSymbols.floor: {\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\r\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: return arg0; // considered rounded\r\n        case TypeKind.F32: {\r\n          op = prototype.internalName == BuiltinSymbols.ceil\r\n            ? UnaryOp.CeilF32\r\n            : UnaryOp.FloorF32;\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          op = prototype.internalName == BuiltinSymbols.ceil\r\n            ? UnaryOp.CeilF64\r\n            : UnaryOp.FloorF64;\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      return module.createUnary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\r\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        // TODO: does an integer version make sense?\r\n        case TypeKind.F32: { op = BinaryOp.CopysignF32; break; }\r\n        case TypeKind.F64: { op = BinaryOp.CopysignF64; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      return module.createBinary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\r\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          expr = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.currentType = type;\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          expr = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          expr = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          let arg0 = compiler.compileExpression(\r\n            operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          expr = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          expr = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          expr = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = type;\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\r\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.currentType = type;\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          expr = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\r\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          expr = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n\r\n    // === Memory access ==========================================================================\r\n\r\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      let outType = (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > type.size\r\n      ) ? contextualType : type;\r\n      let arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let numOperands = operands.length;\r\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = outType;\r\n        return module.createUnreachable();\r\n      }\r\n      let immAlign: i32;\r\n      let naturalAlign = type.byteSize;\r\n      if (numOperands == 3) {\r\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\r\n        if (immAlign < 0) {\r\n          compiler.currentType = outType;\r\n          return module.createUnreachable();\r\n        }\r\n        if (immAlign > naturalAlign) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\r\n          );\r\n          compiler.currentType = outType;\r\n          return module.createUnreachable();\r\n        }\r\n        if (!isPowerOf2(immAlign)) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_power_of_two,\r\n            operands[2].range, \"Alignment\"\r\n          );\r\n          compiler.currentType = outType;\r\n          return module.createUnreachable();\r\n        }\r\n      } else {\r\n        immAlign = naturalAlign;\r\n      }\r\n      compiler.currentType = outType;\r\n      return module.createLoad(\r\n        type.byteSize,\r\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        outType.toNativeType(),\r\n        immOffset,\r\n        immAlign\r\n      );\r\n    }\r\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(\r\n            operands[1],\r\n            contextualType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n              : ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size          // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          inType, type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      let immAlign: i32;\r\n      let naturalAlign = type.byteSize;\r\n      if (operands.length == 4) {\r\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\r\n        if (immAlign < 0) {\r\n          compiler.currentType = Type.void;\r\n          return module.createUnreachable();\r\n        }\r\n        if (immAlign > naturalAlign) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\r\n          );\r\n          compiler.currentType = Type.void;\r\n          return module.createUnreachable();\r\n        }\r\n        if (!isPowerOf2(immAlign)) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_power_of_two,\r\n            operands[3].range, \"Alignment\"\r\n          );\r\n          compiler.currentType = Type.void;\r\n          return module.createUnreachable();\r\n        }\r\n      } else {\r\n        immAlign = naturalAlign;\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\r\n    }\r\n\r\n    // === Atomics ================================================================================\r\n\r\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      let outType = (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > type.size\r\n      ) ? contextualType : type;\r\n      if (!type.is(TypeFlags.INTEGER)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = outType;\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = outType;\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = outType;\r\n      return module.createAtomicLoad(\r\n        type.byteSize,\r\n        arg0,\r\n        outType.toNativeType(),\r\n        immOffset\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(\r\n            operands[1],\r\n            contextualType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n              : ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size          // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          inType, type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createAtomicStore(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\r\n    }\r\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\r\n    case BuiltinSymbols.atomic_sub:\r\n    case BuiltinSymbols.atomic_and:\r\n    case BuiltinSymbols.atomic_or:\r\n    case BuiltinSymbols.atomic_xor:\r\n    case BuiltinSymbols.atomic_xchg: {\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(\r\n            operands[1],\r\n            contextualType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n              : ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size       // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          inType, type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = inType;\r\n        return module.createUnreachable();\r\n      }\r\n      let op: AtomicRMWOp;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\r\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\r\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\r\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\r\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\r\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\r\n      }\r\n      compiler.currentType = inType;\r\n      return module.createAtomicRMW(\r\n        op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType()\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize): T\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(\r\n            operands[1],\r\n            contextualType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n              : ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n      let inType = compiler.currentType;\r\n      let arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        inType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size       // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          inType, type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        arg2 = compiler.convertExpression(\r\n          arg2,\r\n          inType, type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[2]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = inType;\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = inType;\r\n      return module.createAtomicCmpxchg(\r\n        type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType()\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64): i32;\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        type,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        Type.i64,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.i32;\r\n      return module.createAtomicWait(arg0, arg1, arg2, type.toNativeType());\r\n    }\r\n    case BuiltinSymbols.atomic_notify: { // notify<T!>(ptr: usize, count: i32): i32;\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        type,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.i32;\r\n      return module.createAtomicWake(arg0, arg1);\r\n    }\r\n\r\n    // === Control flow ===========================================================================\r\n\r\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\r\n        : compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      let type = compiler.currentType;\r\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let arg2 = compiler.makeIsTrueish(\r\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\r\n        compiler.currentType // ^\r\n      );\r\n      compiler.currentType = type;\r\n      return module.createSelect(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.typeArgumentsRange, prototype.internalName\r\n        );\r\n      }\r\n      checkArgsRequired(operands, 0, reportNode, compiler);\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // === Memory =================================================================================\r\n\r\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      return module.createHost(HostOp.CurrentMemory);\r\n    }\r\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      return module.createHost(HostOp.GrowMemory, null, [\r\n        compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n      ]);\r\n    }\r\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.createUnreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      let arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      return module.createMemoryCopy(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.createUnreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      let arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        Type.u8,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      return module.createMemoryFill(arg0, arg1, arg2);\r\n    }\r\n\r\n    // === Helpers ================================================================================\r\n\r\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let toType = typeArguments![0];\r\n      let arg0 = compiler.compileExpressionRetainType(\r\n        operands[0],\r\n        toType,\r\n        WrapMode.NONE\r\n      );\r\n      let fromType = compiler.currentType;\r\n      compiler.currentType = toType;\r\n      if (fromType.size != toType.size) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      return arg0;\r\n    }\r\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\r\n      ) {\r\n        if (typeArguments) {\r\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\r\n          compiler.currentType = typeArguments[0].nonNullableType;\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\r\n        : compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // return ifTrueish if assertions are disabled\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) { // simplify if dropped anyway\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      // otherwise call abort if the assertion is false-ish\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n      compiler.currentType = type.nonNullableType;\r\n      let expr: ExpressionRef;\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        compiler.currentType = Type.void;\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32, arg0),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64, arg0),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            expr = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            expr = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.typeArgumentsRange\r\n            );\r\n            expr = abort;\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        compiler.currentType = type.nonNullableType;\r\n        switch (compiler.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(type, true /* arg0 is wrapped */);\r\n            expr = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64, false);\r\n            expr = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n            expr = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32, false);\r\n            expr = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64, false);\r\n            expr = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.typeArgumentsRange\r\n            );\r\n            expr = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let flow = compiler.currentFlow;\r\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\r\n      let expr = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\r\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\r\n      let arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\r\n      let arg0Type = compiler.currentType;\r\n      if (!(\r\n        arg0Type == Type.u32 ||                                      // either plain index\r\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\r\n      )) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let numOperands = operands.length - 1;\r\n      let operandExprs = new Array<ExpressionRef>(numOperands);\r\n      let nativeReturnType = returnType.toNativeType();\r\n      let parameterTypes = new Array<Type>(numOperands);\r\n      let nativeParamTypes = new Array<NativeType>(numOperands);\r\n      for (let i = 0; i < numOperands; ++i) {\r\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\r\n        let operandType = compiler.currentType;\r\n        parameterTypes[i] = operandType;\r\n        nativeParamTypes[i] = operandType.toNativeType();\r\n      }\r\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\r\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\r\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\r\n      compiler.currentType = returnType;\r\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\r\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\r\n      return module.createCallIndirect(arg0, operandExprs, typeName);\r\n    }\r\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\r\n      ) return module.createUnreachable();\r\n      let classInstance = typeArguments![0].classReference;\r\n      if (!classInstance) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = classInstance.type;\r\n      return compiler.compileInstantiate(classInstance, operands, reportNode);\r\n    }\r\n\r\n    // === User-defined diagnostics ===============================================================\r\n\r\n    case BuiltinSymbols.ERROR: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.error(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    case BuiltinSymbols.WARNING: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.warning(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createNop();\r\n    }\r\n    case BuiltinSymbols.INFO: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.info(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createNop();\r\n    }\r\n\r\n    // === Portable type conversions ==============================================================\r\n\r\n    case BuiltinSymbols.i8: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i8, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n    }\r\n    case BuiltinSymbols.i16: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i16, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n    }\r\n    case BuiltinSymbols.i32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i32, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n    }\r\n    case BuiltinSymbols.i64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i64, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n    }\r\n    case BuiltinSymbols.isize: {\r\n      let isizeType = compiler.options.isizeType;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = isizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], isizeType, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n    }\r\n    case BuiltinSymbols.u8: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u8, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n    }\r\n    case BuiltinSymbols.u16: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u16, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n    }\r\n    case BuiltinSymbols.u32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u32, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n    }\r\n    case BuiltinSymbols.u64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u64, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n    }\r\n    case BuiltinSymbols.usize: {\r\n      let usizeType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], usizeType, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n    }\r\n    case BuiltinSymbols.bool: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.bool, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n    }\r\n    case BuiltinSymbols.f32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f32, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n    }\r\n    case BuiltinSymbols.f64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f64, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n    }\r\n\r\n    // === SIMD ===================================================================================\r\n\r\n    case BuiltinSymbols.v128: // alias for now\r\n    case BuiltinSymbols.i8x16: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 16, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 16; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = module.precomputeExpression(\r\n            compiler.compileExpression(value, Type.i8, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          );\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.createUnreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI8(getConstValueI32(expr), bytes, i);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createV128(bytes);\r\n    }\r\n    case BuiltinSymbols.i16x8: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 8, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 8; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = module.precomputeExpression(\r\n            compiler.compileExpression(value, Type.i16, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          );\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.createUnreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI16(getConstValueI32(expr), bytes, i << 1);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createV128(bytes);\r\n    }\r\n    case BuiltinSymbols.i32x4: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 4, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 4; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = module.precomputeExpression(\r\n            compiler.compileExpression(value, Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          );\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.createUnreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI32(getConstValueI32(expr), bytes, i << 2);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createV128(bytes);\r\n    }\r\n    case BuiltinSymbols.i64x2: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 2; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = module.precomputeExpression(\r\n            compiler.compileExpression(value, Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          );\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.createUnreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I64);\r\n          let off = i << 3;\r\n          writeI32(getConstValueI64Low(expr), bytes, off);\r\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createV128(bytes);\r\n    }\r\n    case BuiltinSymbols.f32x4: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 4, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 4; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = module.precomputeExpression(\r\n            compiler.compileExpression(value, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          );\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.createUnreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.F32);\r\n          writeF32(getConstValueF32(expr), bytes, i << 2);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createV128(bytes);\r\n    }\r\n    case BuiltinSymbols.f64x2: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 2; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = module.precomputeExpression(\r\n            compiler.compileExpression(value, Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          );\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.createUnreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.F64);\r\n          writeF64(getConstValueF64(expr), bytes, i << 3);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createV128(bytes);\r\n    }\r\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = UnaryOp.SplatVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = UnaryOp.SplatVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = UnaryOp.SplatVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = UnaryOp.SplatVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? UnaryOp.SplatVecI64x2\r\n            : UnaryOp.SplatVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = UnaryOp.SplatVecF32x4; break; }\r\n        case TypeKind.F64: { op = UnaryOp.SplatVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createUnary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = type;\r\n        return module.createUnreachable();\r\n      }\r\n      let op: SIMDExtractOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneSVecI8x16; break; }\r\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneUVecI8x16; break; }\r\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneSVecI16x8; break; }\r\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneUVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? SIMDExtractOp.ExtractLaneVecI64x2\r\n            : SIMDExtractOp.ExtractLaneVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneVecF32x4; break; }\r\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = type;\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let arg1 = module.precomputeExpression(\r\n        compiler.compileExpression(operands[1], Type.u8, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n      );\r\n      compiler.currentType = type;\r\n      if (getExpressionId(arg1) != ExpressionId.Const) {\r\n        compiler.error(\r\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n          operands[1].range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      assert(getExpressionType(arg1) == NativeType.I32);\r\n      let maxIdx = (16 / type.byteSize) - 1;\r\n      let idx = getConstValueI32(arg1);\r\n      if (idx < 0 || idx > maxIdx) {\r\n        compiler.error(\r\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      return module.createSIMDExtract(op, arg0, idx);\r\n    }\r\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let op: SIMDReplaceOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? SIMDReplaceOp.ReplaceLaneVecI64x2\r\n            : SIMDReplaceOp.ReplaceLaneVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneVecF32x4; break; }\r\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let arg1 = module.precomputeExpression(\r\n        compiler.compileExpression(operands[1], Type.u8, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n      );\r\n      if (getExpressionId(arg1) != ExpressionId.Const) {\r\n        compiler.error(\r\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n          operands[1].range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      assert(getExpressionType(arg1) == NativeType.I32);\r\n      let maxIdx = (16 / type.byteSize) - 1;\r\n      let idx = getConstValueI32(arg1);\r\n      if (idx < 0 || idx > maxIdx) {\r\n        compiler.error(\r\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg2 = compiler.compileExpression(operands[2], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createSIMDReplace(op, arg0, idx, arg2);\r\n    }\r\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let laneWidth = type.byteSize;\r\n      let laneCount = 16 / laneWidth;\r\n      assert(isInteger(laneCount) && isPowerOf2(laneCount));\r\n      if (\r\n        checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.F32:\r\n        case TypeKind.F64: break;\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let mask = new Uint8Array(16);\r\n      let maxIdx = (laneCount << 1) - 1;\r\n      for (let i = 0; i < laneCount; ++i) {\r\n        let operand = operands[2 + i];\r\n        let argN = module.precomputeExpression(\r\n          compiler.compileExpression(operand, Type.u8, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n        );\r\n        if (getExpressionId(argN) != ExpressionId.Const) {\r\n          compiler.error(\r\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n            operand.range\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.createUnreachable();\r\n        }\r\n        assert(getExpressionType(argN) == NativeType.I32);\r\n        let idx = getConstValueI32(argN);\r\n        if (idx < 0 || idx > maxIdx) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (laneWidth) {\r\n          case 1: {\r\n            writeI8(idx, mask, i);\r\n            break;\r\n          }\r\n          case 2: {\r\n            let off8 = i << 1;\r\n            let idx8 = idx << 1;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            break;\r\n          }\r\n          case 4: {\r\n            let off8 = i << 2;\r\n            let idx8 = idx << 2;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            writeI8(idx8 + 2, mask, off8 + 2);\r\n            writeI8(idx8 + 3, mask, off8 + 3);\r\n            break;\r\n          }\r\n          case 8: {\r\n            let off8 = i << 3;\r\n            let idx8 = idx << 3;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            writeI8(idx8 + 2, mask, off8 + 2);\r\n            writeI8(idx8 + 3, mask, off8 + 3);\r\n            writeI8(idx8 + 4, mask, off8 + 4);\r\n            writeI8(idx8 + 5, mask, off8 + 5);\r\n            writeI8(idx8 + 6, mask, off8 + 6);\r\n            writeI8(idx8 + 7, mask, off8 + 7);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createSIMDShuffle(arg0, arg1, mask);\r\n    }\r\n    case BuiltinSymbols.v128_add: // any_binary<T!>(a: v128, b: v128) -> v128\r\n    case BuiltinSymbols.v128_sub:\r\n    case BuiltinSymbols.v128_mul:\r\n    case BuiltinSymbols.v128_div:\r\n    case BuiltinSymbols.v128_add_saturate:\r\n    case BuiltinSymbols.v128_sub_saturate:\r\n    case BuiltinSymbols.v128_min:\r\n    case BuiltinSymbols.v128_max:\r\n    case BuiltinSymbols.v128_eq:\r\n    case BuiltinSymbols.v128_ne:\r\n    case BuiltinSymbols.v128_lt:\r\n    case BuiltinSymbols.v128_le:\r\n    case BuiltinSymbols.v128_gt:\r\n    case BuiltinSymbols.v128_ge: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let op: BinaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_add: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.AddVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.AddVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.AddVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = BinaryOp.AddVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? BinaryOp.AddVecI64x2\r\n                : BinaryOp.AddVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = BinaryOp.AddVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.AddVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sub: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.SubVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.SubVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.SubVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = BinaryOp.SubVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? BinaryOp.SubVecI64x2\r\n                : BinaryOp.SubVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = BinaryOp.SubVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.SubVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_mul: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.MulVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.MulVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.MulVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.MulVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MulVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.MulVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_div: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.DivVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.DivVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_add_saturate: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.AddSatSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.AddSatUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.AddSatSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.AddSatUVecI16x8; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sub_saturate: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.SubSatSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.SubSatUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.SubSatSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.SubSatUVecI16x8; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_min: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.MinVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MinVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_max: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.MaxVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MaxVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_eq: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.EqVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.EqVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.EqVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.EqVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.EqVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.EqVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_ne: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.NeVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.NeVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.NeVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.NeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.NeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.NeVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_lt: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.LtSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.LtUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.LtSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.LtUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.LtSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.LtUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.LtVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.LtVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.LtSVecI32x4\r\n                  : BinaryOp.LtUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_le: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.LeSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.LeUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.LeSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.LeUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.LeSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.LeUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.LeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.LeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.LeSVecI32x4\r\n                  : BinaryOp.LeUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_gt: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.GtSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.GtUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.GtSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.GtUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.GtSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.GtUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.GtVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.GtVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.GtSVecI32x4\r\n                  : BinaryOp.GtUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_ge: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.GeSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.GeUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.GeSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.GeUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.GeSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.GeUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.GeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.GeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.GeSVecI32x4\r\n                  : BinaryOp.GeUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createBinary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_neg: // any_unary<T!>(a: v128) -> v128\r\n    case BuiltinSymbols.v128_abs:\r\n    case BuiltinSymbols.v128_sqrt:\r\n    case BuiltinSymbols.v128_convert:\r\n    case BuiltinSymbols.v128_trunc: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_neg: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.NegVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.NegVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.NegVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.NegVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.NegVecI64x2\r\n                : UnaryOp.NegVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = UnaryOp.NegVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.NegVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_abs: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = UnaryOp.AbsVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.AbsVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sqrt: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = UnaryOp.SqrtVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.SqrtVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_convert: {\r\n          switch (type.kind) {\r\n            case TypeKind.I32: { op = UnaryOp.ConvertSVecI32x4ToVecF32x4; break; }\r\n            case TypeKind.U32: { op = UnaryOp.ConvertUVecI32x4ToVecF32x4; break; }\r\n            case TypeKind.I64: { op = UnaryOp.ConvertSVecI64x2ToVecF64x2; break; }\r\n            case TypeKind.U64: { op = UnaryOp.ConvertUVecI64x2ToVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_trunc: {\r\n          switch (type.kind) {\r\n            case TypeKind.I32: { op = UnaryOp.TruncSatSVecF32x4ToVecI32x4; break; }\r\n            case TypeKind.U32: { op = UnaryOp.TruncSatUVecF32x4ToVecI32x4; break; }\r\n            case TypeKind.I64: { op = UnaryOp.TruncSatSVecF64x2ToVecI64x2; break; }\r\n            case TypeKind.U64: { op = UnaryOp.TruncSatUVecF64x2ToVecI64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createUnary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_shl: // any_shift<T!>(a: v128, b: i32) -> v128\r\n    case BuiltinSymbols.v128_shr: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let op: SIMDShiftOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_shl: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = SIMDShiftOp.ShlVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = SIMDShiftOp.ShlVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = SIMDShiftOp.ShlVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = SIMDShiftOp.ShlVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShlVecI64x2\r\n                : SIMDShiftOp.ShlVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_shr: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = SIMDShiftOp.ShrSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = SIMDShiftOp.ShrUVecI8x16; break; }\r\n            case TypeKind.I16: { op = SIMDShiftOp.ShrSVecI16x8; break; }\r\n            case TypeKind.U16: { op = SIMDShiftOp.ShrUVecI16x8; break; }\r\n            case TypeKind.I32: { op = SIMDShiftOp.ShrSVecI32x4; break; }\r\n            case TypeKind.U32: { op = SIMDShiftOp.ShrUVecI32x4; break; }\r\n            case TypeKind.I64: { op = SIMDShiftOp.ShrSVecI64x2; break; }\r\n            case TypeKind.U64: { op = SIMDShiftOp.ShrUVecI64x2; break; }\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShrSVecI64x2\r\n                : SIMDShiftOp.ShrSVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShrUVecI64x2\r\n                : SIMDShiftOp.ShrUVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createSIMDShift(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_and: // any_bitwise_binary(a: v128, b: v128) -> v128\r\n    case BuiltinSymbols.v128_or:\r\n    case BuiltinSymbols.v128_xor: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let op: BinaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.v128_and: { op = BinaryOp.AndVec128; break; }\r\n        case BuiltinSymbols.v128_or:  { op = BinaryOp.OrVec128; break; }\r\n        case BuiltinSymbols.v128_xor: { op = BinaryOp.XorVec128; break; }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      return module.createBinary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_not: { // any_bitwise_unary(a: v128) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      return module.createUnary(UnaryOp.NotVec128, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      return module.createSIMDBitselect(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.v128_any_true: // any_test<T!>(a: v128) -> bool\r\n    case BuiltinSymbols.v128_all_true: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.v128_any_true: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.AnyTrueVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.AnyTrueVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.AnyTrueVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.AnyTrueVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.AnyTrueVecI64x2\r\n                : UnaryOp.AnyTrueVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_all_true: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.AllTrueVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.AllTrueVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.AllTrueVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.AllTrueVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.AllTrueVecI64x2\r\n                : UnaryOp.AllTrueVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.bool;\r\n      return module.createUnary(op, arg0);\r\n    }\r\n\r\n    // === GC integration =========================================================================\r\n\r\n    case BuiltinSymbols.iterateRoots: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\r\n      let type = compiler.currentType;\r\n      let signatureReference = type.signatureReference;\r\n      if (\r\n        !type.is(TypeFlags.REFERENCE) ||\r\n        !signatureReference ||\r\n        signatureReference.parameterTypes.length != 1 ||\r\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\r\n       ) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      // just emit a call even if the function doesn't yet exist\r\n      compiler.needsIterateRoots = true;\r\n      compiler.currentType = Type.void;\r\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\r\n    }\r\n  }\r\n\r\n  // try to defer inline asm to a concrete built-in\r\n  {\r\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\r\n    if (expr) {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.typeArgumentsRange, prototype.internalName\r\n        );\r\n      }\r\n      return expr;\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Cannot_find_name_0,\r\n    reportNode.expression.range, prototype.internalName\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\n/** Tries to defer an inline-assembler-like call to a built-in function. */\r\nfunction tryDeferASM(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  operands: Expression[],\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  /* tslint:disable:max-line-length */\r\n  switch (prototype.internalName) {\r\n\r\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\r\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\r\n    //   and, or, xor, shl, shr_u, shr_s\r\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\r\n\r\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\r\n  }\r\n  if (compiler.options.hasFeature(Feature.THREADS)) {\r\n    switch (prototype.internalName) {\r\n\r\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_notify: return deferASM(BuiltinSymbols.atomic_notify, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_notify: return deferASM(BuiltinSymbols.atomic_notify, compiler, Type.i64, operands, Type.i32, reportNode);\r\n    }\r\n  }\r\n  if (compiler.options.hasFeature(Feature.SIMD)) {\r\n    switch (prototype.internalName) {\r\n\r\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.void, reportNode);\r\n\r\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\r\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\r\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\r\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\r\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_trunc_s_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_trunc_u_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u32, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64x2_trunc_s_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_trunc_u_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u64, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\r\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_convert_s_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_convert_u_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\r\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_convert_s_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_convert_u_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    }\r\n  }\r\n  /* tslint:enable:max-line-length */\r\n  return 0;\r\n}\r\n\r\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\r\nfunction deferASM(\r\n  name: string,\r\n  compiler: Compiler,\r\n  typeArgument: Type,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  assert(compiler.program.elementsByName.has(name));\r\n  var prototype = compiler.program.elementsByName.get(name)!;\r\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n  return compileCall(\r\n    compiler,\r\n    <FunctionPrototype>prototype,\r\n    [ typeArgument ],\r\n    operands,\r\n    contextualType,\r\n    reportNode,\r\n    /* isAsm */ true\r\n  );\r\n}\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringInstance = compiler.program.stringInstance;\r\n  if (!stringInstance) return module.createUnreachable();\r\n\r\n  var abortInstance = program.abortInstance;\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringInstance.type, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    : stringInstance.type.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCall(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n\r\n/** Compiles the iterateRoots function if required. */\r\nexport function compileIterateRoots(compiler: Compiler): void {\r\n  var module = compiler.module;\r\n  var exprs = new Array<ExpressionRef>();\r\n  var typeName = Signature.makeSignatureString([ Type.i32 ], Type.void);\r\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\r\n\r\n  for (let element of compiler.program.elementsByName.values()) {\r\n    if (element.kind != ElementKind.GLOBAL) continue;\r\n    let global = <Global>element;\r\n    let classReference = global.type.classReference;\r\n    if (\r\n      global.is(CommonFlags.COMPILED) &&\r\n      classReference !== null &&\r\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\r\n    ) {\r\n      if (global.is(CommonFlags.INLINED)) {\r\n        let value = global.constantIntegerValue;\r\n        exprs.push(\r\n          module.createCallIndirect(\r\n            module.createGetLocal(0, NativeType.I32),\r\n            [\r\n              compiler.options.isWasm64\r\n                ? module.createI64(i64_low(value), i64_high(value))\r\n                : module.createI32(i64_low(value))\r\n            ],\r\n            typeName\r\n          )\r\n        );\r\n      } else {\r\n        exprs.push(\r\n          module.createCallIndirect(\r\n            module.createGetLocal(0, NativeType.I32),\r\n            [\r\n              module.createGetGlobal(\r\n                global.internalName,\r\n                compiler.options.nativeSizeType\r\n              )\r\n            ],\r\n            typeName\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n  module.addFunction(\"~iterateRoots\", typeRef, [],\r\n    exprs.length\r\n      ? module.createBlock(null, exprs)\r\n      : module.createNop()\r\n  );\r\n}\r\n\r\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\r\nexport function ensureGCHook(\r\n  compiler: Compiler,\r\n  classInstance: Class\r\n): u32 {\r\n  var program = compiler.program;\r\n  assert(classInstance.type.isManaged(program));\r\n\r\n  // check if the GC hook has already been created\r\n  {\r\n    let existingIndex = classInstance.gcHookIndex;\r\n    if (existingIndex != <u32>-1) return existingIndex;\r\n  }\r\n\r\n  // check if the class implements a custom GC function (only valid for library elements)\r\n  var members = classInstance.members;\r\n  if (classInstance.isDeclaredInLibrary) {\r\n    if (members !== null && members.has(\"__gc\")) {\r\n      let gcPrototype = assert(members.get(\"__gc\"));\r\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\r\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\r\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\r\n      assert(gcInstance.signature.parameterTypes.length == 0);\r\n      assert(gcInstance.signature.returnType == Type.void);\r\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\r\n      assert(compiler.compileFunction(gcInstance));\r\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\r\n      classInstance.gcHookIndex = index;\r\n      return index;\r\n    }\r\n  }\r\n\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n  var nativeSizeType = options.nativeSizeType;\r\n  var nativeSizeSize = options.usizeType.byteSize;\r\n  var body = new Array<ExpressionRef>();\r\n\r\n  // nothing to mark if 'this' is null\r\n  body.push(\r\n    module.createIf(\r\n      module.createUnary(\r\n        options.isWasm64\r\n          ? UnaryOp.EqzI64\r\n          : UnaryOp.EqzI32,\r\n        module.createGetLocal(0, nativeSizeType)\r\n      ),\r\n      module.createReturn()\r\n    )\r\n  );\r\n\r\n  // remember the function index so we don't recurse infinitely\r\n  var functionTable = compiler.functionTable;\r\n  var gcHookIndex = functionTable.length;\r\n  functionTable.push(\"<placeholder>\");\r\n  classInstance.gcHookIndex = gcHookIndex;\r\n\r\n  // if the class extends a base class, call its hook first (calls mark)\r\n  var baseInstance = classInstance.base;\r\n  if (baseInstance) {\r\n    assert(baseInstance.type.isManaged(program));\r\n    body.push(\r\n      module.createCallIndirect(\r\n        module.createI32(\r\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\r\n        ),\r\n        [\r\n          module.createGetLocal(0, nativeSizeType)\r\n        ],\r\n        \"FUNCSIG$\" + (nativeSizeType == NativeType.I64 ? \"vj\" : \"vi\")\r\n      )\r\n    );\r\n\r\n  // if this class is the top-most base class, mark the instance\r\n  } else {\r\n    body.push(\r\n      module.createCall(assert(program.gcMarkInstance).internalName, [\r\n        module.createGetLocal(0, nativeSizeType)\r\n      ], NativeType.None)\r\n    );\r\n  }\r\n\r\n  // mark instances assigned to own fields that are again references\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      if (member.kind == ElementKind.FIELD) {\r\n        if ((<Field>member).parent === classInstance) {\r\n          let type = (<Field>member).type;\r\n          if (type.isManaged(program)) {\r\n            let offset = (<Field>member).memoryOffset;\r\n            assert(offset >= 0);\r\n            body.push(\r\n              module.createCall(assert(program.gcMarkInstance).internalName, [\r\n                module.createLoad(\r\n                  nativeSizeSize,\r\n                  false,\r\n                  module.createGetLocal(0, nativeSizeType),\r\n                  nativeSizeType,\r\n                  offset\r\n                )\r\n              ], NativeType.None)\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // add the function to the module and return its table index\r\n  var funcName = classInstance.internalName + \"~gc\";\r\n  module.addFunction(\r\n    funcName,\r\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\r\n    null,\r\n    module.createBlock(null, body)\r\n  );\r\n  functionTable[gcHookIndex] = funcName;\r\n  return gcHookIndex;\r\n}\r\n\r\n// Helpers\r\n\r\n/** Evaluates the constant type of a type argument *or* expression. */\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: CallExpression\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments) {\r\n      if (typeArguments.length == 1) {\r\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        if (typeArguments.length) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return null;\r\n        }\r\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n    } else {\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\n/** Evaluates a compile-time constant immediate offset argument.*/\r\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I64 ||\r\n      getConstValueI64High(expr) != 0 ||\r\n      (value = getConstValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I32 ||\r\n      (value = getConstValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n/** Checks a call with a single required type argument. Returns `1` on error. */\r\nfunction checkTypeRequired(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler,\r\n  setCurrentTypeOnError: bool = false\r\n): i32 {\r\n  if (typeArguments) {\r\n    let numTypeArguments = typeArguments.length;\r\n    if (numTypeArguments == 1) return 0;\r\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\r\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\r\n    );\r\n  } else {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", \"0\"\r\n    );\r\n  }\r\n  return 1;\r\n}\r\n\r\n/** Checks a call with a single optional type argument. Returns `1` on error. */\r\nfunction checkTypeOptional(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler,\r\n  setCurrentTypeOnError: bool = false\r\n): i32 {\r\n  if (typeArguments) {\r\n    let numTypeArguments = typeArguments.length;\r\n    if (numTypeArguments == 1) return 0;\r\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\r\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that is not generic. Returns `1` on error. */\r\nfunction checkTypeAbsent(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  prototype: FunctionPrototype\r\n): i32 {\r\n  if (typeArguments) {\r\n    prototype.program.error(\r\n      DiagnosticCode.Type_0_is_not_generic,\r\n      reportNode.typeArgumentsRange, prototype.internalName\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\r\nfunction checkArgsRequired(\r\n  operands: Expression[],\r\n  expected: i32,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler\r\n): i32 {\r\n  if (operands.length != expected) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_arguments_but_got_1,\r\n      reportNode.range, expected.toString(), operands.length.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\r\nfunction checkArgsOptional(\r\n  operands: Expression[],\r\n  expectedMinimum: i32,\r\n  expectedMaximum: i32,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler\r\n): i32 {\r\n  var numOperands = operands.length;\r\n  if (numOperands < expectedMinimum) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\r\n    );\r\n    return 1;\r\n  } else if (numOperands > expectedMaximum) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_arguments_but_got_1,\r\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n","/** @module util *//***/\r\n\r\n/** Tests if the bit at the specified index is set within a 64-bit map. */\r\nexport function bitsetIs(map: I64, index: i32): bool {\r\n  assert(index >= 0 && index < 64);\r\n  return i64_ne(\r\n    i64_and(\r\n      map,\r\n      i64_shl(\r\n        i64_one,\r\n        i64_new(index)\r\n      )\r\n    ),\r\n    i64_zero\r\n  );\r\n}\r\n\r\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\r\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\r\n  assert(index >= 0 && index < 64);\r\n  return isSet\r\n    ? i64_or(\r\n        map,\r\n        i64_shl(\r\n          i64_one,\r\n          i64_new(index)\r\n        )\r\n      )\r\n    : i64_and(\r\n        map,\r\n        i64_not(\r\n          i64_shl(\r\n            i64_one,\r\n            i64_new(index)\r\n          )\r\n        )\r\n      );\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode.A && c <= CharCode.Z\r\n      || c == CharCode._\r\n      || c == CharCode.DOLLAR\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode._\r\n      || c == CharCode.DOLLAR\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n  var midVal: u16;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + ((hi - lo) >> 1);\r\n    mid -= (mid & 1);\r\n    midVal = map[mid];\r\n    if (midVal <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < midVal) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\r\n  if (original) {\r\n    let cloned = new Array<V>(original.length);\r\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\r\n    return cloned;\r\n  }\r\n  return new Array<V>();\r\n}\r\n\r\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\r\n  if (original) {\r\n    let cloned = new Set<V>();\r\n    for (let v of original) cloned.add(v);\r\n    return cloned;\r\n  }\r\n  return new Set<V>();\r\n}\r\n\r\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\r\n  var cloned = new Map<K,V>();\r\n  if (original) {\r\n    for (let [k, v] of original) cloned.set(k, v);\r\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\r\n  } else if (overrides) {\r\n    for (let [k, v] of overrides) cloned.set(k, v);\r\n  }\r\n  return cloned;\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nimport {\r\n  PATH_DELIMITER\r\n} from \"../common\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + PATH_DELIMITER + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  if (pos <= 1) {\r\n    if (pos == 0) return \".\";\r\n    if (normalizedPath.charCodeAt(0) == separator) {\r\n      return normalizedPath;\r\n    }\r\n  }\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\n/** Reads an 8-bit integer from the specified buffer. */\r\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset];\r\n}\r\n\r\n/** Writes an 8-bit integer to the specified buffer. */\r\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset] = value;\r\n}\r\n\r\n/** Reads a 16-bit integer from the specified buffer. */\r\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8;\r\n}\r\n\r\n/** Writes a 16-bit integer to the specified buffer. */\r\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n}\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  IDLBuilder,\r\n  TSDBuilder\r\n} from \"./definitions\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `sharedMemory` option. */\r\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\r\n  options.sharedMemory = sharedMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Sign extension operations. */\r\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\r\n/** Mutable global imports and exports. */\r\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\r\n/** Bulk memory operations. */\r\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\r\n/** SIMD types and operations. */\r\nexport const FEATURE_SIMD = Feature.SIMD;\r\n/** Threading and atomic operations. */\r\nexport const FEATURE_THREADS = Feature.THREADS;\r\n\r\n/** Enables a specific feature. */\r\nexport function enableFeature(options: Options, feature: Feature): void {\r\n  options.features |= feature;\r\n}\r\n\r\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\r\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\r\n  options.optimizeLevelHint = optimizeLevel;\r\n  options.shrinkLevelHint = shrinkLevel;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX } from \"./common\";\r\n\r\n// Full API\r\nexport * from \"./ast\";\r\n// export * from \"./binary\";\r\nexport * from \"./common\";\r\nexport * from \"./compiler\";\r\nexport * from \"./decompiler\";\r\nexport * from \"./definitions\";\r\nexport * from \"./diagnosticMessages.generated\";\r\nexport * from \"./diagnostics\";\r\nexport * from \"./flow\";\r\nexport * from \"./module\";\r\nexport * from \"./parser\";\r\nexport * from \"./program\";\r\nexport * from \"./resolver\";\r\nexport * from \"./tokenizer\";\r\nexport * from \"./types\";\r\nexport * from \"./util\";\r\n"],"sourceRoot":""}