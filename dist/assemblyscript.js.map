{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","abort","pow","mod","alloc","realloc","free","retain","release","retainRelease","skippedRelease","collect","typeinfo","instanceof_","visit","allocArray","feature_1","Feature","target_1","Target","typeinfo_1","Typeinfo","TypeinfoFlags","__export","isPowerOf2","x","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","OperatorKind","common_1","diagnostics_1","types_1","ast_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","decoratorKind","arg","DecoratorKind","OPERATOR","OPERATOR_BINARY","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","_super","_this","sources","diagnosticsOffset","explicitStartFunction","filesByName","elementsByName","elementsByDeclaration","instancesByName","typeClasses","managedClasses","nextClassId","nativeDummySignature","nativeSource","Source","SourceKind","LIBRARY","nativeFile","File","set","internalName","resolver","Resolver","__extends","writeRuntimeHeader","buffer","offset","classInstance","payloadSize","writeI32","id","makeNativeVariableDeclaration","flags","NONE","Node","createVariableDeclaration","createIdentifierExpression","makeNativeTypeDeclaration","identifier","createTypeDeclaration","createOmittedType","makeNativeFunctionDeclaration","createFunctionDeclaration","createSignature","createType","createSimpleTypeName","makeNativeNamespaceDeclaration","createNamespaceDeclaration","makeNativeFunction","signature","parent","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","declaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","EXPORT","GENERIC","BUILTIN","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","k","file","statements","j","statement","kind","NodeKind","initializeExports","IMPORT","initializeImports","VARIABLE","initializeVariables","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","FUNCTIONDECLARATION","initializeFunction","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","next","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","element","lookupForeign","Module_0_has_no_exported_member_1","localName","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","registerNativeTypeClass","thisPrototype","extendsNode","baseElement","resolveTypeName","CLASS_PROTOTYPE","basePrototype","hasDecorator","SEALED","Class_0_is_sealed_and_cannot_be_extended","identifierNode","UNMANAGED","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Range","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","alias","firstChar","parseI32","Error","arrayBufferViewInstance","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","requireFunction","allocInstance","reallocInstance","freeInstance","retainInstance","releaseInstance","retainReleaseInstance","skippedReleaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","_l","values","_m","isEntry","_o","_p","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FUNCTION","FIELD","CLASS","members","_e","_f","type","setType","typeKind","className","classElement","is","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","elements","requireGlobal","foreignName","lookupExport","fileQueuedExports","checkDecorators","decorators","acceptedFlags","decorator","flag","decoratorKindToFlag","decoratorNameToKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","GLOBAL","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","extendsType","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeProperty","initializeMethod","INDEXSIGNATUREDECLARATION","STATIC","INTERFACE_PROTOTYPE","READONLY","INLINE","LAZY","UNSAFE","ABSTRACT","FieldPrototype","addInstance","isStatic","CONSTRUCTOR","checkOperatorOverloads","classPrototype","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","internalPath","queued","endsWith","path","exportedName","Export_declaration_conflicts_with_exported_declaration_of_0","declarations","initializeImport","namespaceName","validDecorators","AMBIENT","EXTERNAL","INSTANCE","FILE","START","Module_cannot_have_multiple_start_functions","findDecorator","InterfacePrototype","original","Namespace","copyMembers","DECLARE","Element","program","shadowType","current","unset","originalDeclaration","actual","isBound","TypedElement","apply","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","typeParameters","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","initializer","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Parameter","Local","index","LOCAL","instances","boundPrototypes","body","arrowKind","toBound","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","parameterIndex","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","AcyclicState","_isInterface","constructorPrototype","extends","basePtototype","Class","typeArguments","base","INTERFACE","currentMemoryOffset","constructorInstance","_id","_acyclic","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","numTypeArguments","isBuiltinArray","lengthField","lookupOverload","isAssignableTo","target","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","writeField","baseOffset","writeI8","writeI16","writeF32","writeF64","getTypeArgumentsTo","extendedPrototype","acyclic","hasCycle","cyclesTo","other","except","classReference","Interface","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createV128","bytes","store","_BinaryenLiteralVec128","createUnary","op","expr","_BinaryenUnary","createBinary","left","right","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenLocalGet","createTeeLocal","_BinaryenLocalTee","createGetGlobal","_BinaryenGlobalGet","createLoad","signed","ptr","align","_BinaryenLoad","createStore","None","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicNotify","notifyCount","_BinaryenAtomicNotify","createSetLocal","_BinaryenLocalSet","createSetGlobal","_BinaryenGlobalSet","createBlock","label","children","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","expression","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","returnType","_BinaryenCall","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","createMemoryCopy","size","_BinaryenMemoryCopy","createMemoryFill","_BinaryenMemoryFill","createSIMDExtract","vec","idx","_BinaryenSIMDExtract","createSIMDReplace","_BinaryenSIMDReplace","createSIMDShuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","createSIMDBitselect","cond","_BinaryenSIMDBitselect","createSIMDShift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","externalName","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","getFeatures","_BinaryenModuleGetFeatures","setFeatures","featureFlags","_BinaryenModuleSetFeatures","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getGetLocalIndex","getSetLocalIndex","_BinaryenLocalSetGetIndex","getSetLocalValue","_BinaryenLocalSetGetValue","isTeeLocal","_BinaryenLocalSetIsTee","getGetGlobalName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","getCallTarget","_BinaryenCallGetTarget","getCallOperandCount","_BinaryenCallGetNumOperands","getCallOperand","_BinaryenCallGetOperand","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Return","Break","Block","numChildren","traverse","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDBitselect","_BinaryenSIMDBitselectGetLeft","_BinaryenSIMDBitselectGetRight","_BinaryenSIMDBitselectGetCond","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Select","Drop","Host","Nop","tokenizer_1","Token","nodeIsConstantValue","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","createTypeName","TypeName","isNullable","TypeNode","createTypeParameter","defaultType","elem","TypeParameterNode","createParameter","ParameterNode","parameterKind","parameters","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","createComment","node","CommentNode","commentKind","isQuoted","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","toType","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","createVariableStatement","VariableStatement","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","TYPENAME","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","SIGNATURE","nameStr","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","BINARY","numArguments","COMMA","FLOAT","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","SOURCE","tokenizer","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","DeclarationStatement","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FOR","ArrowKind","clone","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","isTypeOmitted","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","clz","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","builtins_1","currentThisExpression","currentElementExpression","resolveType","context","reportMode","REPORT","parameterNodes","parameterNode","REST","parameterTypeNode","Type_expected","returnTypeNode","typeNode","typeArgumentNodes","possiblyPlaceholder","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","type_1","Expected_0_type_arguments_but_got_1","typeArgument","resolveTypeArguments","Cannot_find_name_0","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveIdentifier","ensureResolvedLazyGlobal","resolvePropertyAccessExpression","propertyAccess","contextualType","targetExpression","resolveExpression","propertyName","indexedGet","Index_signature_is_missing_in_type_0","arrayType","resolvedType","resolveElementAccessExpression","elementAccess","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","actualFunction","resolveLiteralExpression","resolveCallExpression","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","BuiltinSymbols","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","Options","importMemory","sharedMemory","importTable","features","feature","ContextualFlags","RuntimeFeatures","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","Atomics","MutableGloabls","SIMD128","BulkMemory","SignExt","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","HEAP_BASE","RTTI_BASE","files","compileFile","compileExports","hasExplicitStart","funcRef","ensureFunctionType","compileVisitGlobals","compileVisitMembers","compileRTTI","i64_align","isSharedMemory","i64_shr_u","ensureModuleExports","members_1","members_1_1","ensureModuleExport","prefix","instanceName","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeRetainRelease","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","initializerNode","compileExpression","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","Compiling_constant_with_non_constant_initializer_as_mutable","decoratorNodes","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","makeGlobalAssignment","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","canOverflow","nonNull","isNonnull","temp","getAndFreeTempLocal","started","unshift","EqzI32","thisLocalIndex","EqzI64","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","setLocalFlag","LocalFlags","RETAINED","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureStaticString","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","ensureStaticArrayBuffer","elementType","byteLength","bufferInstance","buf","writeI64","ensureStaticArrayHeader","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","contextualFlags","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","inherit","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","continueLabel","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","pushBreakLabel","condExpr","makeIsTrueish","terminated","popBreakLabel","block","repeatLabel","alwaysTrue","compileExpressionRetainType","inheritNonnullIfTrue","incrExpr","bodyStatement","usesContinue","inheritConditional","breakBlock","repeatBlock","ifTrueStmts","ifTrueFlow","ifFalseFlow","inheritNonnullIfFalse","ifFalseStmts","inheritMutual","valueExpression","contextualFlags_1","isAnyLocalFlag","ANY_RETAINED","unsetLocalFlag","inlineReturnLabel","numCases","tempLocal","getTempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","EqI32","freeTempLocal","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isInlined","parentFunction","scopedLocals","_const_declarations_must_be_initialized","addScopedLocal","WRAPPED","CONDITIONALLY_RETAINED","compileInlineConstant","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","fromType","explicit","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","NeF32","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","NeF64","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","NeI64","WrapI64","ExtendI32","ExtendU32","PREFIX","Expression_is_never_null","tempIndex","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","LtI32","LtI64","LtU32","LtU64","LtF32","LtF64","GtI32","GtI64","GtU32","GtU64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","EqF32","EqF64","AllTrueVecI8x16","EqVecI8x16","NeI32","AnyTrueVecI8x16","NeVecI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI32","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","intType","ShlI32","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI32","ShrI64","ShrU32","ShrU64","AndI32","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","makeAssignment","compileUnaryOverload","thisExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr_1","thisExpr","elementExpr","tempLocalTarget","tempLocalElement","makeSkippedRelease","nativeFieldType","nativeThisType","tempThis","tempValue","flow_2","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","argumentExpressions","thisArg","inlineCanAlias","compileCallInlinePrechecked","pop","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","compileCallInline","canAlias","immediatelyDropped","temps","blockLocalsBeforeInlining","unblockLocals","makeCallInlinePrechecked","createInline","addScopedAlias","baseInstance","paramExpr","paramType","argumentLocal","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","oldExpr","newExpr","getAutoreleaseLocal","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","SCOPED","lengthBefore","skipAutorelease","TODO_Cannot_inline_inferred_calls_and_specific_internals_yet","numOperands","isCallImport","allOptionalsAreConstant","expr_1","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","flow_3","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","isLocalFlag","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","isConst","tempDataStart","allValuesAreConstant","nativeElementType","bufferAddress","arraySegment","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseCtor","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","makeInstanceOfClass","idTemp","idExpr","conditions","Auto","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","fieldFlags","localFlags","inlineFunction","branch","slice","wrapped","nonnull","scopedLocal","existingLocal","scopedAlias","scope","defaultIfInlined","stack","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","canConversionOverflow","global_1","ClzI32","CtzI32","PopcntI32","MIN_VALUE","last","levels","compiler_1","compiler","isAsm","directize","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","SWALLOW","isConstant","sizeof","checkTypeRequired","alignof","ctz","checkArgsOptional","typeArgumentsRange","Type_0_has_no_property_1","popcnt","checkTypeOptional","ClzI64","CtzI64","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","AbsF32","AbsF64","MaxF32","MaxF64","tempLocal0","min","MinF32","MinF64","floor","CeilF32","FloorF32","CeilF64","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","Add","Sub","And","Or","Xor","Xchg","atomic_cmpxchg","atomic_wait","atomic_notify","select","unreachable","memory_size","MemorySize","memory_grow","MemoryGrow","memory_copy","memory_fill","alreadyUnchecked","call_direct","call_indirect","arg0Type","operandExprs","nativeParamTypes","operandType","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatVecI8x16","SplatVecI16x8","SplatVecI32x4","SplatVecI64x2","SplatVecF32x4","SplatVecF64x2","v128_extract_lane","ExtractLaneSVecI8x16","ExtractLaneUVecI8x16","ExtractLaneSVecI16x8","ExtractLaneUVecI16x8","ExtractLaneVecI32x4","ExtractLaneVecI64x2","ExtractLaneVecF32x4","ExtractLaneVecF64x2","maxIdx","v128_replace_lane","ReplaceLaneVecI8x16","ReplaceLaneVecI16x8","ReplaceLaneVecI32x4","ReplaceLaneVecI64x2","ReplaceLaneVecF32x4","ReplaceLaneVecF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","v128_sub","v128_mul","v128_div","v128_add_saturate","v128_sub_saturate","v128_min","v128_max","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","AddVecI8x16","AddVecI16x8","AddVecI32x4","AddVecI64x2","AddVecF32x4","AddVecF64x2","SubVecI8x16","SubVecI16x8","SubVecI32x4","SubVecI64x2","SubVecF32x4","SubVecF64x2","MulVecI8x16","MulVecI16x8","MulVecI32x4","MulVecF32x4","MulVecF64x2","DivVecF32x4","DivVecF64x2","AddSatSVecI8x16","AddSatUVecI8x16","AddSatSVecI16x8","AddSatUVecI16x8","SubSatSVecI8x16","SubSatUVecI8x16","SubSatSVecI16x8","SubSatUVecI16x8","MinVecF32x4","MinVecF64x2","MaxVecF32x4","MaxVecF64x2","EqVecI16x8","EqVecI32x4","EqVecF32x4","EqVecF64x2","NeVecI16x8","NeVecI32x4","NeVecF32x4","NeVecF64x2","LtSVecI8x16","LtUVecI8x16","LtSVecI16x8","LtUVecI16x8","LtSVecI32x4","LtUVecI32x4","LtVecF32x4","LtVecF64x2","LeSVecI8x16","LeUVecI8x16","LeSVecI16x8","LeUVecI16x8","LeSVecI32x4","LeUVecI32x4","LeVecF32x4","LeVecF64x2","GtSVecI8x16","GtUVecI8x16","GtSVecI16x8","GtUVecI16x8","GtSVecI32x4","GtUVecI32x4","GtVecF32x4","GtVecF64x2","GeSVecI8x16","GeUVecI8x16","GeSVecI16x8","GeUVecI16x8","GeSVecI32x4","GeUVecI32x4","GeVecF32x4","GeVecF64x2","v128_neg","v128_abs","v128_sqrt","v128_convert","v128_trunc","NegVecI8x16","NegVecI16x8","NegVecI32x4","NegVecI64x2","NegVecF32x4","NegVecF64x2","AbsVecF32x4","AbsVecF64x2","SqrtVecF32x4","SqrtVecF64x2","ConvertSVecI32x4ToVecF32x4","ConvertUVecI32x4ToVecF32x4","ConvertSVecI64x2ToVecF64x2","ConvertUVecI64x2ToVecF64x2","TruncSatSVecF32x4ToVecI32x4","TruncSatUVecF32x4ToVecI32x4","TruncSatSVecF64x2ToVecI64x2","TruncSatUVecF64x2ToVecI64x2","v128_shl","v128_shr","ShlVecI8x16","ShlVecI16x8","ShlVecI32x4","ShlVecI64x2","ShrSVecI8x16","ShrUVecI8x16","ShrSVecI16x8","ShrUVecI16x8","ShrSVecI32x4","ShrUVecI32x4","ShrSVecI64x2","ShrUVecI64x2","v128_and","v128_or","v128_xor","AndVec128","OrVec128","XorVec128","v128_not","NotVec128","v128_bitselect","v128_any_true","v128_all_true","AnyTrueVecI16x8","AnyTrueVecI32x4","AnyTrueVecI64x2","AllTrueVecI16x8","AllTrueVecI32x4","AllTrueVecI64x2","idof","visit_globals","visit_members","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_s_f32x4_sat","i32x4_trunc_u_f32x4_sat","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_s_f64x2_sat","i64x2_trunc_u_f64x2_sat","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_s_i32x4","f32x4_convert_u_i32x4","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_s_i64x2","f64x2_convert_u_i64x2","v8x16_shuffle","tryDeferASM","messageArg","filenameArg","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","Int8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Int64Array","Uint64Array","Uint8ClampedArray","Float32Array","Float64Array","capabilities","nativeSizeSize","ftype","blocks","outer","lastId","managedClasses_1","managedClasses_1_1","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","callExpr","fieldOffset","managedClasses_2","managedClasses_2_1","data","managedClasses_3","managedClasses_3_1","isAcyclic","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","i64_to_string","ExportsWalker","includePrivate","todo","seen","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","isInterface","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","round","y","sign","isTrueish","radix","parseInt","undefined","fromCodePoint","Number","capacity","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","__decorate","unmanaged","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","bitsetIs","map","bitsetSet","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64"],"mappings":"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,GArKjC,IAAMqgH,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,M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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\r\n * Common constants.\r\n * @module common\r\n *//***/\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\r\n  DEFINITE_ASSIGNMENT = 1 << 13,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 14,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 15,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 16,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 17,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 18,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 19,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 20,\r\n\r\n  // Compilation states\r\n\r\n  /** Is resolved. */\r\n  RESOLVED = 1 << 21,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 22,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 23,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 24,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 25,\r\n  /** Is a virtual method. */\r\n  VIRTUAL = 1 << 26,\r\n  /** Is the main function. */\r\n  MAIN = 1 << 27,\r\n\r\n  // Other\r\n\r\n  /** Is quoted. */\r\n  QUOTED = 1 << 28\r\n}\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n/** Path index suffix. */\r\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\r\n\r\n/** Common compiler symbols. */\r\nexport namespace CommonSymbols {\r\n  // special\r\n  export const EMPTY = \"\";\r\n  // types\r\n  export const i8 = \"i8\";\r\n  export const i16 = \"i16\";\r\n  export const i32 = \"i32\";\r\n  export const i64 = \"i64\";\r\n  export const isize = \"isize\";\r\n  export const u8 = \"u8\";\r\n  export const u16 = \"u16\";\r\n  export const u32 = \"u32\";\r\n  export const u64 = \"u64\";\r\n  export const usize = \"usize\";\r\n  export const bool = \"bool\";\r\n  export const f32 = \"f32\";\r\n  export const f64 = \"f64\";\r\n  export const v128 = \"v128\";\r\n  export const i8x16 = \"i8x16\";\r\n  export const u8x16 = \"u8x16\";\r\n  export const i16x8 = \"i16x8\";\r\n  export const u16x8 = \"u16x8\";\r\n  export const i32x4 = \"i32x4\";\r\n  export const u32x4 = \"u32x4\";\r\n  export const i64x2 = \"i64x2\";\r\n  export const u64x2 = \"u64x2\";\r\n  export const f32x4 = \"f32x4\";\r\n  export const f64x2 = \"f64x2\";\r\n  export const void_ = \"void\";\r\n  export const number = \"number\";\r\n  export const boolean = \"boolean\";\r\n  export const string = \"string\";\r\n  export const native = \"native\";\r\n  // aliases\r\n  export const null_ = \"null\";\r\n  export const true_ = \"true\";\r\n  export const false_ = \"false\";\r\n  // objects\r\n  export const this_ = \"this\";\r\n  export const super_ = \"super\";\r\n  export const constructor = \"constructor\";\r\n  // constants\r\n  export const ASC_TARGET = \"ASC_TARGET\";\r\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\r\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\r\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\r\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\r\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\r\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\r\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\r\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\r\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\r\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\r\n  // classes\r\n  export const I8 = \"I8\";\r\n  export const I16 = \"I16\";\r\n  export const I32 = \"I32\";\r\n  export const I64 = \"I64\";\r\n  export const Isize = \"Isize\";\r\n  export const U8 = \"U8\";\r\n  export const U16 = \"U16\";\r\n  export const U32 = \"U32\";\r\n  export const U64 = \"U64\";\r\n  export const Usize = \"Usize\";\r\n  export const Bool = \"Bool\";\r\n  export const F32 = \"F32\";\r\n  export const F64 = \"F64\";\r\n  export const V128 = \"V128\";\r\n  export const String = \"String\";\r\n  export const Array = \"Array\";\r\n  export const FixedArray = \"FixedArray\";\r\n  export const Set = \"Set\";\r\n  export const Map = \"Map\";\r\n  export const ArrayBufferView = \"ArrayBufferView\";\r\n  export const ArrayBuffer = \"ArrayBuffer\";\r\n  export const Math = \"Math\";\r\n  export const Mathf = \"Mathf\";\r\n  // runtime\r\n  export const abort = \"abort\";\r\n  export const pow = \"pow\";\r\n  export const mod = \"mod\";\r\n  export const alloc = \"__alloc\";\r\n  export const realloc = \"__realloc\";\r\n  export const free = \"__free\";\r\n  export const retain = \"__retain\";\r\n  export const release = \"__release\";\r\n  export const retainRelease = \"__retainRelease\";\r\n  export const skippedRelease = \"__skippedRelease\";\r\n  export const collect = \"__collect\";\r\n  export const typeinfo = \"__typeinfo\";\r\n  export const instanceof_ = \"__instanceof\";\r\n  export const visit = \"__visit\";\r\n  export const allocArray = \"__allocArray\";\r\n}\r\n\r\n// shared\r\nexport { Feature } from \"../std/assembly/shared/feature\";\r\nexport { Target } from \"../std/assembly/shared/target\";\r\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./bitset\";\r\nexport * from \"./charcode\";\r\nexport * from \"./collections\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n\r\n/** Tests if `x` is a power of two. */\r\nexport function isPowerOf2(x: i32): bool {\r\n  return x != 0 && (x & (x - 1)) == 0;\r\n}\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak, CharCode\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n  /** Related range, if any. */\r\n  relatedRange: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Adds a related source range to this message. */\r\n  withRelatedRange(range: Range): this {\r\n    this.relatedRange = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(range, useColors));\r\n    }\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n\r\n    let relatedRange = message.relatedRange;\r\n    if (relatedRange) {\r\n      if (showContext) {\r\n        sb.push(\"\\n\");\r\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\r\n      }\r\n      sb.push(\"\\n\");\r\n      sb.push(\" in \");\r\n      sb.push(range.source.normalizedPath);\r\n      sb.push(\"(\");\r\n      sb.push(range.line.toString(10));\r\n      sb.push(\",\");\r\n      sb.push(range.column.toString(10));\r\n      sb.push(\")\");\r\n    }\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) {\r\n      if (isLineBreak(text.charCodeAt(start))) {\r\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\r\n        break;\r\n      }\r\n      sb.push(\"~\");\r\n    }\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    relatedRange: Range | null,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    if (relatedRange) message.relatedRange = relatedRange;\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message with a related range. */\r\n  infoRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message with a related range. */\r\n  warningRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message with a related range. */\r\n  errorRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  INNER_DELIMITER,\r\n  LIBRARY_SUBST,\r\n  INDEX_SUFFIX,\r\n  CommonSymbols,\r\n  Feature,\r\n  Target\r\n} from \"./common\";\r\n\r\nimport {\r\n  Options\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  Range,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n  SignatureNode,\r\n  TypeParameterNode,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  ArrowKind,\r\n\r\n  Expression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  decoratorNameToKind,\r\n  findDecorator\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  FunctionRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  CharCode,\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeF32,\r\n  writeF64\r\n} from \"./util\";\r\n\r\nimport {\r\n  Resolver\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Flow\r\n} from \"./flow\";\r\n\r\nimport {\r\n  BuiltinSymbols\r\n} from \"./builtins\";\r\n\r\n/** Represents a yet unresolved `import`. */\r\nclass QueuedImport {\r\n  constructor(\r\n    /** File being imported into. */\r\n    public localFile: File,\r\n    /** Identifier within the local file. */\r\n    public localIdentifier: IdentifierExpression,\r\n    /** Identifier within the other file. Is an `import *` if not set. */\r\n    public foreignIdentifier: IdentifierExpression | null,\r\n    /** Path to the other file. */\r\n    public foreignPath: string,\r\n    /** Alternative path to the other file. */\r\n    public foreignPathAlt: string\r\n  ) {}\r\n}\r\n\r\n/** Represents a yet unresolved `export`. */\r\nclass QueuedExport {\r\n  constructor(\r\n    /** Identifier within the local file. */\r\n    public localIdentifier: IdentifierExpression,\r\n    /** Identifier within the other file. */\r\n    public foreignIdentifier: IdentifierExpression,\r\n    /** Path to the other file if a re-export. */\r\n    public foreignPath: string | null,\r\n    /** Alternative path to the other file if a re-export. */\r\n    public foreignPathAlt: string | null\r\n  ) {}\r\n}\r\n\r\n/** Represents a yet unresolved `export *`. */\r\nclass QueuedExportStar {\r\n  // stored in a map with localFile as the key\r\n  constructor(\r\n    /** Path to the other file. */\r\n    public foreignPath: string,\r\n    /** Alternative path to the other file. */\r\n    public foreignPathAlt: string,\r\n    /** Reference to the path literal for reporting. */\r\n    public pathLiteral: StringLiteralExpression\r\n  ) {}\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n\r\n  // indexed access\r\n  INDEXED_GET,            // a[]\r\n  INDEXED_SET,            // a[]=b\r\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\r\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\r\n\r\n  // binary\r\n  ADD,                    // a + b\r\n  SUB,                    // a - b\r\n  MUL,                    // a * b\r\n  DIV,                    // a / b\r\n  REM,                    // a % b\r\n  POW,                    // a ** b\r\n  BITWISE_AND,            // a & b\r\n  BITWISE_OR,             // a | b\r\n  BITWISE_XOR,            // a ^ b\r\n  BITWISE_SHL,            // a << b\r\n  BITWISE_SHR,            // a >> b\r\n  BITWISE_SHR_U,          // a >>> b\r\n  EQ,                     // a == b\r\n  NE,                     // a != b\r\n  GT,                     // a > b\r\n  GE,                     // a >= b\r\n  LT,                     // a < b\r\n  LE,                     // a <= b\r\n\r\n  // unary prefix\r\n  PLUS,                   // +a\r\n  MINUS,                  // -a\r\n  NOT,                    // !a\r\n  BITWISE_NOT,            // ~a\r\n  PREFIX_INC,             // ++a\r\n  PREFIX_DEC,             // --a\r\n\r\n  // unary postfix\r\n  POSTFIX_INC,            // a++\r\n  POSTFIX_DEC             // a--\r\n\r\n  // not overridable:\r\n  // IDENTITY             // a === b\r\n  // LOGICAL_AND          // a && b\r\n  // LOGICAL_OR           // a || b\r\n}\r\n\r\n/** Returns the operator kind represented by the specified decorator and string argument. */\r\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\r\n  assert(arg.length);\r\n  switch (decoratorKind) {\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.OPENBRACKET: {\r\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\r\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\r\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.ADD;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.SUB;\r\n          break;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          if (arg == \"*\") return OperatorKind.MUL;\r\n          if (arg == \"**\") return OperatorKind.POW;\r\n          break;\r\n        }\r\n        case CharCode.SLASH: {\r\n          if (arg == \"/\") return OperatorKind.DIV;\r\n          break;\r\n        }\r\n        case CharCode.PERCENT: {\r\n          if (arg == \"%\") return OperatorKind.REM;\r\n          break;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\r\n          break;\r\n        }\r\n        case CharCode.BAR: {\r\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\r\n          break;\r\n        }\r\n        case CharCode.CARET: {\r\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\r\n          break;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          if (arg == \"==\") return OperatorKind.EQ;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!=\") return OperatorKind.NE;\r\n          break;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          if (arg == \">\") return OperatorKind.GT;\r\n          if (arg == \">=\") return OperatorKind.GE;\r\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\r\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\r\n          break;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          if (arg == \"<\") return OperatorKind.LT;\r\n          if (arg == \"<=\") return OperatorKind.LE;\r\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_PREFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.PLUS;\r\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.MINUS;\r\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!\") return OperatorKind.NOT;\r\n          break;\r\n        }\r\n        case CharCode.TILDE: {\r\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_POSTFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return OperatorKind.INVALID;\r\n}\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Resolver instance. */\r\n  resolver: Resolver;\r\n  /** Array of sources. */\r\n  sources: Source[] = [];\r\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Special native code source. */\r\n  nativeSource: Source;\r\n  /** Special native code file. */\r\n  nativeFile: File;\r\n  /** Explicitly annotated start function. */\r\n  explicitStartFunction: FunctionPrototype | null = null;\r\n\r\n  // lookup maps\r\n\r\n  /** Files by unique internal name. */\r\n  filesByName: Map<string,File> = new Map();\r\n  /** Elements by unique internal name in element space. */\r\n  elementsByName: Map<string,Element> = new Map();\r\n  /** Elements by declaration. */\r\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\r\n  /** Element instances by unique internal name. */\r\n  instancesByName: Map<string,Element> = new Map();\r\n  /** Classes backing basic types like `i32`. */\r\n  typeClasses: Map<TypeKind,Class> = new Map();\r\n  /** Managed classes contained in the program, by id. */\r\n  managedClasses: Map<i32,Class> = new Map();\r\n\r\n  // standard references\r\n\r\n  /** ArrayBufferView reference. */\r\n  arrayBufferViewInstance: Class;\r\n  /** ArrayBuffer instance reference. */\r\n  arrayBufferInstance: Class;\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype;\r\n  /** Set prototype reference. */\r\n  setPrototype: ClassPrototype;\r\n  /** Map prototype reference. */\r\n  mapPrototype: ClassPrototype;\r\n  /** Fixed array prototype reference. */\r\n  fixedArrayPrototype: ClassPrototype;\r\n  /** String instance reference. */\r\n  stringInstance: Class;\r\n  /** Abort function reference, if present. */\r\n  abortInstance: Function;\r\n\r\n  // runtime references\r\n\r\n  /** RT `__alloc(size: usize, id: u32): usize` */\r\n  allocInstance: Function;\r\n  /** RT `__realloc(ref: usize, newSize: usize): usize` */\r\n  reallocInstance: Function;\r\n  /** RT `__free(ref: usize): void` */\r\n  freeInstance: Function;\r\n  /** RT `__retain(ref: usize): usize` */\r\n  retainInstance: Function;\r\n  /** RT `__release(ref: usize): void` */\r\n  releaseInstance: Function;\r\n  /** RT `__retainRelease(newRef: usize, oldRef: usize): usize` */\r\n  retainReleaseInstance: Function;\r\n  /** RT `__skippedRelease(newRef: usize, oldRef: usize): usize` */\r\n  skippedReleaseInstance: Function;\r\n  /** RT `__collect(): void` */\r\n  collectInstance: Function;\r\n  /** RT `__visit(ref: usize, cookie: u32): void` */\r\n  visitInstance: Function;\r\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\r\n  typeinfoInstance: Function;\r\n  /** RT `__instanceof(ref: usize, superId: u32): bool` */\r\n  instanceofInstance: Function;\r\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\r\n  allocArrayInstance: Function;\r\n\r\n  /** Next class id. */\r\n  nextClassId: u32 = 0;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(\r\n    /** Shared array of diagnostic messages (emitted so far). */\r\n    diagnostics: DiagnosticMessage[] | null = null\r\n  ) {\r\n    super(diagnostics);\r\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY);\r\n    this.nativeSource = nativeSource;\r\n    var nativeFile = new File(this, nativeSource);\r\n    this.nativeFile = nativeFile;\r\n    this.filesByName.set(nativeFile.internalName, nativeFile);\r\n    this.resolver = new Resolver(this);\r\n  }\r\n\r\n  /** Writes a common runtime header to the specified buffer. */\r\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\r\n    // BLOCK {\r\n    //   mmInfo: usize // WASM64 TODO\r\n    //   gcInfo: u32\r\n    //   rtId: u32\r\n    //   rtSize: u32\r\n    // }\r\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\r\n    writeI32(payloadSize, buffer, offset);\r\n    writeI32(1, buffer, offset + 4); // RC=1\r\n    writeI32(classInstance.id, buffer, offset + 8);\r\n    writeI32(payloadSize, buffer, offset + 12);\r\n  }\r\n\r\n  /** Gets the size of a runtime header. */\r\n  get runtimeHeaderSize(): i32 {\r\n    return 16;\r\n  }\r\n\r\n  /** Creates a native variable declaration. */\r\n  makeNativeVariableDeclaration(\r\n    /** The simple name of the variable */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `CONST`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): VariableDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createVariableDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      null, null, null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native type declaration. */\r\n  makeNativeTypeDeclaration(\r\n    /** The simple name of the type. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): TypeDeclaration {\r\n    var range = this.nativeSource.range;\r\n    var identifier = Node.createIdentifierExpression(name, range);\r\n    return Node.createTypeDeclaration(\r\n      identifier,\r\n      null,\r\n      Node.createOmittedType(range),\r\n      null, flags, range\r\n    );\r\n  }\r\n\r\n  // a dummy signature for programmatically generated native functions\r\n  private nativeDummySignature: SignatureNode | null = null;\r\n\r\n  /** Creates a native function declaration. */\r\n  makeNativeFunctionDeclaration(\r\n    /** The simple name of the function. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): FunctionDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createFunctionDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      null,\r\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createSignature([],\r\n        Node.createType( // ^ AST signature doesn't really matter, is overridden anyway\r\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\r\n          null, false, range\r\n        ),\r\n        null, false, range)\r\n      ),\r\n      null, null, flags, ArrowKind.NONE, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native namespace declaration. */\r\n  makeNativeNamespaceDeclaration(\r\n    /** The simple name of the namespace. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): NamespaceDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createNamespaceDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      [], null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native function. */\r\n  makeNativeFunction(\r\n    /** The simple name of the function. */\r\n    name: string,\r\n    /** Concrete function signature. */\r\n    signature: Signature,\r\n    /** Parent element, usually a file, class or namespace. */\r\n    parent: Element = this.nativeFile,\r\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\r\n    flags: CommonFlags = CommonFlags.NONE,\r\n    /** Decorator flags representing built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ): Function {\r\n    return new Function(\r\n      name,\r\n      new FunctionPrototype(\r\n        name,\r\n        parent,\r\n        this.makeNativeFunctionDeclaration(name, flags),\r\n        decoratorFlags\r\n      ),\r\n      signature\r\n    );\r\n  }\r\n\r\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\r\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\r\n    var elementsByDeclaration = this.elementsByDeclaration;\r\n    assert(elementsByDeclaration.has(declaration));\r\n    return elementsByDeclaration.get(declaration)!;\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n\r\n    // register native types\r\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\r\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\r\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\r\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\r\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\r\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\r\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\r\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\r\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\r\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\r\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\r\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\r\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\r\n    this.registerNativeType(CommonSymbols.void_, Type.void);\r\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\r\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\r\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\r\n      CommonSymbols.native,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\r\n      DecoratorFlags.BUILTIN\r\n    ));\r\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\r\n\r\n    // register compiler hints\r\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\r\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\r\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\r\n      i64_new(options.noAssert ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\r\n      i64_new(options.memoryBase, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\r\n      i64_new(options.optimizeLevelHint, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\r\n      i64_new(options.shrinkLevelHint, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\r\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\r\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\r\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\r\n\r\n    // remember deferred elements\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\r\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // initialize relevant declaration-like statements of the entire program\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let file = new File(this, source);\r\n      this.filesByName.set(file.internalName, file);\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports * should be linkable now that all files have been processed\r\n    for (let [file, exportsStar] of queuedExportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        let exportStar = exportsStar[i];\r\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\r\n        if (!foreignFile) {\r\n          this.error(\r\n            DiagnosticCode.File_0_not_found,\r\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\r\n          );\r\n          continue;\r\n        }\r\n        file.ensureExportStar(foreignFile);\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\r\n      let queuedImport = queuedImports[i];\r\n      let foreignIdentifier = queuedImport.foreignIdentifier;\r\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\r\n        let element = this.lookupForeign(\r\n          foreignIdentifier.text,\r\n          queuedImport.foreignPath,\r\n          queuedImport.foreignPathAlt,\r\n          queuedExports\r\n        );\r\n        if (element) {\r\n          queuedImport.localFile.add(\r\n            queuedImport.localIdentifier.text,\r\n            element,\r\n            true // isImport\r\n          );\r\n        } else {\r\n          // FIXME: file not found is not reported if this happens?\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\r\n          );\r\n        }\r\n      } else { // i.e. import * as bar from \"./bar\"\r\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\r\n        if (foreignFile) {\r\n          let localFile = queuedImport.localFile;\r\n          let localName = queuedImport.localIdentifier.text;\r\n          localFile.add(\r\n            localName,\r\n            foreignFile.asImportedNamespace(\r\n              localName,\r\n              localFile\r\n            ),\r\n            true // isImport\r\n          );\r\n        } else {\r\n          assert(false); // already reported by the parser not finding the file\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [file, exports] of queuedExports) {\r\n      for (let [exportName, queuedExport] of exports) {\r\n        let localName = queuedExport.localIdentifier.text;\r\n        let foreignPath = queuedExport.foreignPath;\r\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\r\n          let element = this.lookupForeign(\r\n            localName,\r\n            foreignPath,\r\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\r\n            queuedExports\r\n          );\r\n          if (element) {\r\n            file.ensureExport(exportName, element);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.localIdentifier.range,\r\n              foreignPath, localName\r\n            );\r\n          }\r\n        } else { // i.e. export { foo [as bar] }\r\n          let element = file.lookupInSelf(localName);\r\n          if (element) {\r\n            file.ensureExport(exportName, element);\r\n          } else {\r\n            let globalElement = this.lookupGlobal(localName);\r\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\r\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Module_0_has_no_exported_member_1,\r\n                queuedExport.foreignIdentifier.range,\r\n                file.internalName, queuedExport.foreignIdentifier.text\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // register ArrayBuffer (id=0) and String (id=1)\r\n    assert(this.nextClassId == 0);\r\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\r\n    assert(this.arrayBufferInstance.id == 0);\r\n    this.stringInstance = this.requireClass(CommonSymbols.String);\r\n    assert(this.stringInstance.id == 1);\r\n\r\n    // register classes backing basic types\r\n    this.registerNativeTypeClass(TypeKind.I8, CommonSymbols.I8);\r\n    this.registerNativeTypeClass(TypeKind.I16, CommonSymbols.I16);\r\n    this.registerNativeTypeClass(TypeKind.I32, CommonSymbols.I32);\r\n    this.registerNativeTypeClass(TypeKind.I64, CommonSymbols.I64);\r\n    this.registerNativeTypeClass(TypeKind.ISIZE, CommonSymbols.Isize);\r\n    this.registerNativeTypeClass(TypeKind.U8, CommonSymbols.U8);\r\n    this.registerNativeTypeClass(TypeKind.U16, CommonSymbols.U16);\r\n    this.registerNativeTypeClass(TypeKind.U32, CommonSymbols.U32);\r\n    this.registerNativeTypeClass(TypeKind.U64, CommonSymbols.U64);\r\n    this.registerNativeTypeClass(TypeKind.USIZE, CommonSymbols.Usize);\r\n    this.registerNativeTypeClass(TypeKind.BOOL, CommonSymbols.Bool);\r\n    this.registerNativeTypeClass(TypeKind.F32, CommonSymbols.F32);\r\n    this.registerNativeTypeClass(TypeKind.F64, CommonSymbols.F64);\r\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, CommonSymbols.V128);\r\n\r\n    // resolve base prototypes of derived classes\r\n    var resolver = this.resolver;\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let thisPrototype = queuedExtends[i];\r\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\r\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\r\n          this.error(\r\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\r\n          );\r\n        }\r\n        if (\r\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\r\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\r\n          );\r\n        }\r\n        thisPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          extendsNode.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    {\r\n      let globalAliases = options.globalAliases;\r\n      if (globalAliases) {\r\n        for (let [alias, name] of globalAliases) {\r\n          if (!name.length) continue; // explicitly disabled\r\n          let firstChar = name.charCodeAt(0);\r\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\r\n            this.registerConstantInteger(alias, Type.i32, i64_new(parseI32(name, 10)));\r\n          } else {\r\n            let elementsByName = this.elementsByName;\r\n            let element = elementsByName.get(name);\r\n            if (element) {\r\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\r\n              elementsByName.set(alias, element);\r\n            }\r\n            else throw new Error(\"no such global element: \" + name);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // register stdlib components\r\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\r\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\r\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\r\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\r\n    this.abortInstance = this.requireFunction(CommonSymbols.abort);\r\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\r\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\r\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\r\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\r\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\r\n    this.retainReleaseInstance = this.requireFunction(CommonSymbols.retainRelease);\r\n    this.skippedReleaseInstance = this.requireFunction(CommonSymbols.skippedRelease);\r\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\r\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\r\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\r\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\r\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\r\n\r\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\r\n    for (let file of this.filesByName.values()) {\r\n      let exports = file.exports;\r\n      if (!(file.source.isEntry && exports)) continue;\r\n      for (let element of exports.values()) this.markModuleExport(element);\r\n    }\r\n  }\r\n\r\n  /** Requires that a global library element of the specified kind is present and returns it. */\r\n  private require(name: string, kind: ElementKind): Element {\r\n    var element = this.lookupGlobal(name);\r\n    if (!element) throw new Error(\"missing \" + name);\r\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\r\n    return element;\r\n  }\r\n\r\n  /** Requires that a non-generic global class is present and returns it. */\r\n  private requireClass(name: string): Class {\r\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\r\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\r\n    if (!resolved) throw new Error(\"invalid \" + name);\r\n    return resolved;\r\n  }\r\n\r\n  /** Requires that a non-generic global function is present and returns it. */\r\n  private requireFunction(name: string): Function {\r\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\r\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n    if (!resolved) throw new Error(\"invalid \" + name);\r\n    return resolved;\r\n  }\r\n\r\n  /** Marks an element and its children as a module export. */\r\n  private markModuleExport(element: Element): void {\r\n    element.set(CommonFlags.MODULE_EXPORT);\r\n    switch (element.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\r\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\r\n        if (getterPrototype) this.markModuleExport(getterPrototype);\r\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\r\n        if (setterPrototype) this.markModuleExport(setterPrototype);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY:\r\n      case ElementKind.FUNCTION:\r\n      case ElementKind.FIELD:\r\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\r\n    }\r\n    {\r\n      let members = element.members;\r\n      if (members) for (let member of members.values()) this.markModuleExport(member);\r\n    }\r\n  }\r\n\r\n  /** Registers a native type with the program. */\r\n  private registerNativeType(name: string, type: Type): void {\r\n    var element = new TypeDefinition(\r\n      name,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\r\n      DecoratorFlags.BUILTIN\r\n    );\r\n    element.setType(type);\r\n    this.nativeFile.add(name, element);\r\n  }\r\n\r\n  /** Registers the backing class of a native type. */\r\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\r\n    assert(!this.typeClasses.has(typeKind));\r\n    var element = this.lookupGlobal(className);\r\n    if (element) {\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\r\n      if (classElement) this.typeClasses.set(typeKind, classElement);\r\n    }\r\n  }\r\n\r\n  /** Registers a constant integer value within the global scope. */\r\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\r\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\r\n    var global = new Global(\r\n      name,\r\n      this.nativeFile,\r\n      DecoratorFlags.NONE,\r\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\r\n    );\r\n    global.setConstantIntegerValue(value, type);\r\n    this.nativeFile.add(name, global);\r\n  }\r\n\r\n  /** Registers a constant float value within the global scope. */\r\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\r\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\r\n    var global = new Global(\r\n      name,\r\n      this.nativeFile,\r\n      DecoratorFlags.NONE,\r\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\r\n    );\r\n    global.setConstantFloatValue(value, type);\r\n    this.nativeFile.add(name, global);\r\n  }\r\n\r\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\r\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\r\n    var elementsByName = this.elementsByName;\r\n    if (elementsByName.has(name)) {\r\n      let actual = elementsByName.get(name)!;\r\n      // NOTE: this is effectively only performed when merging native types with\r\n      // their respective namespaces in std/builtins, but can also trigger when a\r\n      // user has multiple global elements of the same name in different files,\r\n      // which might result in unexpected shared symbols accross files. considering\r\n      // this a wonky feature for now that we might want to revisit later.\r\n      if (actual !== element) {\r\n        let merged = tryMerge(elementsByName.get(name)!, element);\r\n        if (!merged) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            element.identifierNode.range, name\r\n          );\r\n          return element;\r\n        }\r\n        element = merged;\r\n      }\r\n    }\r\n    elementsByName.set(name, element);\r\n    return element;\r\n  }\r\n\r\n  /** Looks up the element of the specified name in the global scope. */\r\n  lookupGlobal(name: string): Element | null {\r\n    var elements = this.elementsByName;\r\n    if (elements.has(name)) return elements.get(name);\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\r\n  requireGlobal(name: string): Element {\r\n    var elements = this.elementsByName;\r\n    if (elements.has(name)) return elements.get(name)!;\r\n    throw new Error(\"missing global\");\r\n  }\r\n\r\n  /** Tries to locate a foreign file given its normalized path. */\r\n  private lookupForeignFile(\r\n    /** Normalized path to the other file. */\r\n    foreignPath: string,\r\n    /** Alternative normalized path to the other file. */\r\n    foreignPathAlt: string\r\n  ): File | null {\r\n    var filesByName = this.filesByName;\r\n    return filesByName.has(foreignPath)\r\n         ? filesByName.get(foreignPath)!\r\n         : filesByName.has(foreignPathAlt)\r\n         ? filesByName.get(foreignPathAlt)!\r\n         : null;\r\n  }\r\n\r\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\r\n  private lookupForeign(\r\n    /** Identifier within the other file. */\r\n    foreignName: string,\r\n    /** Normalized path to the other file. */\r\n    foreignPath: string,\r\n    /** Alternative normalized path to the other file. */\r\n    foreignPathAlt: string,\r\n    /** So far queued exports. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): DeclaredElement | null {\r\n    do {\r\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\r\n      if (!foreignFile) return null; // no such file\r\n\r\n      // search already resolved exports\r\n      let element = foreignFile.lookupExport(foreignName);\r\n      if (element) return element;\r\n\r\n      // otherwise traverse queued exports\r\n      if (queuedExports.has(foreignFile)) {\r\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\r\n        if (fileQueuedExports.has(foreignName)) {\r\n          let queuedExport = fileQueuedExports.get(foreignName)!;\r\n          if (queuedExport.foreignPath) { // imported from another file\r\n            foreignName = queuedExport.localIdentifier.text;\r\n            foreignPath = queuedExport.foreignPath;\r\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\r\n            continue;\r\n          } else { // local element of this file\r\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\r\n            if (element) return element;\r\n          }\r\n        }\r\n      }\r\n      break;\r\n    } while (true);\r\n    return null;\r\n  }\r\n\r\n  /** Validates that only supported decorators are present. */\r\n  private checkDecorators(\r\n    /** Decorators present on an element. */\r\n    decorators: DecoratorNode[] | null,\r\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\r\n    acceptedFlags: DecoratorFlags\r\n  ): DecoratorFlags {\r\n    var flags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        let kind = decoratorNameToKind(decorator.name);\r\n        let flag = decoratorKindToFlag(kind);\r\n        if (flag) {\r\n          if (flag == DecoratorFlags.BUILTIN) {\r\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\r\n              this.error(\r\n                DiagnosticCode.Decorator_0_is_not_valid_here,\r\n                decorator.range, decorator.name.range.toString()\r\n              );\r\n            } else {\r\n              flags |= flag;\r\n            }\r\n          } else if (!(acceptedFlags & flag)) {\r\n            this.error(\r\n              DiagnosticCode.Decorator_0_is_not_valid_here,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          } else if (flags & flag) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_decorator,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          } else {\r\n            flags |= flag;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return flags;\r\n  }\r\n\r\n  /** Initializes a class declaration. */\r\n  private initializeClass(\r\n    /** The declaration to initialize. */\r\n    declaration: ClassDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: ClassPrototype[],\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new ClassPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL |\r\n        DecoratorFlags.SEALED |\r\n        DecoratorFlags.UNMANAGED\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      // cannot implement interfaces when unmanaged\r\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n      } else if (numImplementsTypes) {\r\n        // remember classes that implement interfaces\r\n        for (let i = 0; i < numImplementsTypes; ++i) {\r\n          this.warning( // TODO: not yet supported\r\n            DiagnosticCode.Operation_not_supported,\r\n            implementsTypes[i].range\r\n          );\r\n        }\r\n        queuedImplements.push(element);\r\n      }\r\n    }\r\n    // remember classes that extend another class\r\n    if (declaration.extendsType) queuedExtends.push(element);\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\r\n        default: assert(false); // class member expected\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Initializes a field of a class or interface. */\r\n  private initializeField(\r\n    /** The declaration to initialize. */\r\n    declaration: FieldDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var element: DeclaredElement;\r\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\r\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\r\n      element = new Global(\r\n        name,\r\n        parent,\r\n        this.checkDecorators(decorators,\r\n          (declaration.is(CommonFlags.READONLY)\r\n            ? DecoratorFlags.INLINE\r\n            : DecoratorFlags.NONE\r\n          ) | DecoratorFlags.LAZY | DecoratorFlags.UNSAFE\r\n        ),\r\n        declaration\r\n      );\r\n      if (!parent.add(name, element)) return;\r\n    } else { // actual instance field\r\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\r\n      element = new FieldPrototype(\r\n        name,\r\n        parent,\r\n        declaration,\r\n        this.checkDecorators(decorators, DecoratorFlags.UNSAFE)\r\n      );\r\n      if (!parent.addInstance(name, element)) return;\r\n    }\r\n  }\r\n\r\n  /** Initializes a method of a class or interface. */\r\n  private initializeMethod(\r\n    /** The declaration to initialize. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var isStatic = declaration.is(CommonFlags.STATIC);\r\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\r\n    if (!declaration.is(CommonFlags.GENERIC)) {\r\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\r\n                    |  DecoratorFlags.OPERATOR_PREFIX\r\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\r\n    }\r\n    var element = new FunctionPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, acceptedFlags)\r\n    );\r\n    if (isStatic) { // global function\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n      if (!parent.add(name, element)) return;\r\n    } else { // actual instance method\r\n      if (!parent.addInstance(name, element)) return;\r\n    }\r\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\r\n  }\r\n\r\n  /** Checks that operator overloads are generally valid, if present. */\r\n  private checkOperatorOverloads(\r\n    /** Decorators to check. */\r\n    decorators: DecoratorNode[] | null,\r\n    /** Decorated method. */\r\n    prototype: FunctionPrototype,\r\n    /** Parent class. */\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        switch (decorator.decoratorKind) {\r\n          case DecoratorKind.OPERATOR:\r\n          case DecoratorKind.OPERATOR_BINARY:\r\n          case DecoratorKind.OPERATOR_PREFIX:\r\n          case DecoratorKind.OPERATOR_POSTFIX: {\r\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n            if (numArgs == 1) {\r\n              let firstArg = (<Expression[]>decorator.arguments)[0];\r\n              if (\r\n                firstArg.kind == NodeKind.LITERAL &&\r\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n              ) {\r\n                let kind = operatorKindFromDecorator(\r\n                  decorator.decoratorKind,\r\n                  (<StringLiteralExpression>firstArg).value\r\n                );\r\n                if (kind == OperatorKind.INVALID) {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  let overloads = classPrototype.overloadPrototypes;\r\n                  if (overloads.has(kind)) {\r\n                    this.error(\r\n                      DiagnosticCode.Duplicate_function_implementation,\r\n                      firstArg.range\r\n                    );\r\n                  } else {\r\n                    prototype.operatorKind = kind;\r\n                    overloads.set(kind, prototype);\r\n                  }\r\n                }\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.String_literal_expected,\r\n                  firstArg.range\r\n                );\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                decorator.range, \"1\", numArgs.toString(10)\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\r\n  private ensureProperty(\r\n    /** The declaration of the getter or setter introducing the property. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): PropertyPrototype | null {\r\n    var name = declaration.name.text;\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let parentMembers = parent.members;\r\n      if (parentMembers && parentMembers.has(name)) {\r\n        let element = <Element>parentMembers.get(name)!;\r\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\r\n      } else {\r\n        let element = new PropertyPrototype(name, parent, declaration);\r\n        if (!parent.add(name, element)) return null;\r\n        return element;\r\n      }\r\n    } else {\r\n      let parentMembers = parent.instanceMembers;\r\n      if (parentMembers && parentMembers.has(name)) {\r\n        let element = <Element>parentMembers.get(name);\r\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\r\n      } else {\r\n        let element = new PropertyPrototype(name, parent, declaration);\r\n        if (!parent.addInstance(name, element)) return null;\r\n        return element;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Duplicate_property_0,\r\n      declaration.name.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Initializes a property of a class. */\r\n  private initializeProperty(\r\n    /** The declaration of the getter or setter. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var property = this.ensureProperty(declaration, parent);\r\n    if (!property) return;\r\n    var name = declaration.name.text;\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    if (isGetter) {\r\n      if (property.getterPrototype) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_property_0,\r\n          declaration.name.range, name\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      if (property.setterPrototype) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_property_0,\r\n          declaration.name.range, name\r\n        );\r\n        return;\r\n      }\r\n    }\r\n    var element = new FunctionPrototype(\r\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\r\n      property,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\r\n      )\r\n    );\r\n    if (isGetter) {\r\n      property.getterPrototype = element;\r\n    } else {\r\n      property.setterPrototype = element;\r\n    }\r\n  }\r\n\r\n  /** Initializes an enum. */\r\n  private initializeEnum(\r\n    /** The declaration to initialize. */\r\n    declaration: EnumDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new Enum(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL |\r\n        DecoratorFlags.INLINE |\r\n        DecoratorFlags.LAZY\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n  }\r\n\r\n  /** Initializes an enum value. */\r\n  private initializeEnumValue(\r\n    /** The declaration to initialize. */\r\n    declaration: EnumValueDeclaration,\r\n    /** Parent enum. */\r\n    parent: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new EnumValue(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.NONE\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n  }\r\n\r\n  /** Initializes an `export` statement. */\r\n  private initializeExports(\r\n    /** The statement to initialize. */\r\n    statement: ExportStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>,\r\n    /** So far queued `export *`s. */\r\n    queuedExportsStar: Map<File,QueuedExportStar[]>\r\n  ): void {\r\n    var members = statement.members;\r\n    if (members) { // export { foo, bar } [from \"./baz\"]\r\n      for (let i = 0, k = members.length; i < k; ++i) {\r\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\r\n      }\r\n    } else { // export * from \"./baz\"\r\n      let queued: QueuedExportStar[];\r\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\r\n      else queuedExportsStar.set(parent, queued = []);\r\n      let foreignPath = assert(statement.internalPath); // must be set for export *\r\n      queued.push(new QueuedExportStar(\r\n        foreignPath,\r\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n          : foreignPath + INDEX_SUFFIX,\r\n        assert(statement.path)\r\n      ));\r\n    }\r\n  }\r\n\r\n  /** Initializes a single `export` member. Does not handle `export *`. */\r\n  private initializeExport(\r\n    /** The member to initialize. */\r\n    member: ExportMember,\r\n    /** Local file. */\r\n    localFile: File,\r\n    /** Path to the other file, if present. */\r\n    foreignPath: string | null,\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var localName = member.localName.text;\r\n    var foreignName = member.exportedName.text;\r\n\r\n    // check for duplicates\r\n    var element = localFile.lookupExport(foreignName);\r\n    if (element) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.exportedName.range, foreignName\r\n      );\r\n      return;\r\n    }\r\n    // local element, i.e. export { foo [as bar] }\r\n    if (foreignPath === null) {\r\n\r\n      // resolve right away if the local element already exists\r\n      if (element = localFile.lookupInSelf(localName)) {\r\n        localFile.ensureExport(foreignName, element);\r\n\r\n      // otherwise queue it\r\n      } else {\r\n        let queued: Map<string,QueuedExport>;\r\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\r\n        else queuedExports.set(localFile, queued = new Map());\r\n        queued.set(foreignName, new QueuedExport(\r\n          member.localName,\r\n          member.exportedName,\r\n          null, null\r\n        ));\r\n      }\r\n\r\n    // foreign element, i.e. export { foo } from \"./bar\"\r\n    } else {\r\n      let queued: Map<string,QueuedExport>;\r\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\r\n      else queuedExports.set(localFile, queued = new Map());\r\n      queued.set(foreignName, new QueuedExport(\r\n        member.localName,\r\n        member.exportedName,\r\n        foreignPath,\r\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n          : foreignPath + INDEX_SUFFIX\r\n      ));\r\n    }\r\n  }\r\n\r\n  /** Initializes an `import` statement. */\r\n  private initializeImports(\r\n    /** The statement to initialize. */\r\n    statement: ImportStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `import`s. */\r\n    queuedImports: QueuedImport[],\r\n    /** SO far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          parent,\r\n          statement.internalPath,\r\n          queuedImports,\r\n          queuedExports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\r\n      queuedImports.push(new QueuedImport(\r\n        parent,\r\n        statement.namespaceName,\r\n        null, // indicates import *\r\n        statement.internalPath,\r\n        statement.internalPath + INDEX_SUFFIX\r\n      ));\r\n    } else {\r\n      // import \"./foo\"\r\n    }\r\n  }\r\n\r\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\r\n  private initializeImport( // { foo [as bar] }\r\n    /** The declaration to initialize. */\r\n    declaration: ImportDeclaration,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** Path to the other file. */\r\n    foreignPath: string,\r\n    /** So far queued `import`s. */\r\n    queuedImports: QueuedImport[],\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n      : foreignPath + INDEX_SUFFIX;\r\n\r\n    // resolve right away if the element exists\r\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\r\n    if (element) {\r\n      parent.add(declaration.name.text, element, true);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    queuedImports.push(new QueuedImport(\r\n      parent,\r\n      declaration.name,\r\n      declaration.foreignName,\r\n      foreignPath,\r\n      foreignPathAlt\r\n    ));\r\n  }\r\n\r\n  /** Initializes a function. Does not handle methods. */\r\n  private initializeFunction(\r\n    /** The declaration to initialize. */\r\n    declaration: FunctionDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\r\n    if (declaration.is(CommonFlags.AMBIENT)) {\r\n      validDecorators |= DecoratorFlags.EXTERNAL;\r\n    } else {\r\n      validDecorators |= DecoratorFlags.INLINE;\r\n    }\r\n    if (!declaration.is(CommonFlags.INSTANCE)) {\r\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\r\n        validDecorators |= DecoratorFlags.GLOBAL;\r\n      }\r\n    }\r\n    if (!declaration.is(CommonFlags.GENERIC)) {\r\n      if (parent.kind == ElementKind.FILE && (<File>parent).source.isEntry) {\r\n        validDecorators |= DecoratorFlags.START;\r\n      }\r\n    }\r\n    var element = new FunctionPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, validDecorators)\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n    if (element.hasDecorator(DecoratorFlags.START)) {\r\n      if (this.explicitStartFunction) {\r\n        this.error(\r\n          DiagnosticCode.Module_cannot_have_multiple_start_functions,\r\n          assert(findDecorator(DecoratorKind.START, declaration.decorators)).range\r\n        );\r\n      } else this.explicitStartFunction = element;\r\n    }\r\n  }\r\n\r\n  /** Initializes an interface. */\r\n  private initializeInterface(\r\n    /** The declaration to initialize. */\r\n    declaration: InterfaceDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new InterfacePrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\r\n          }\r\n          break;\r\n        }\r\n        default: assert(false); // interface member expected\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Initializes a namespace. */\r\n  private initializeNamespace(\r\n    /** The declaration to initialize. */\r\n    declaration: NamespaceDeclaration,\r\n    /** Parent element, usually a file or another namespace. */\r\n    parent: Element,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: ClassPrototype[],\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var original = new Namespace(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\r\n    );\r\n    if (!parent.add(name, original)) return;\r\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>member, original);\r\n          break;\r\n        }\r\n        default: assert(false); // namespace member expected\r\n      }\r\n    }\r\n    if (original != element) copyMembers(original, element); // retain original parent\r\n  }\r\n\r\n  /** Initializes a `type` definition. */\r\n  private initializeTypeDefinition(\r\n    /** The declaration to initialize. */\r\n    declaration: TypeDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new TypeDefinition(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\r\n    );\r\n    parent.add(name, element); // reports\r\n  }\r\n\r\n  /** Initializes a variable statement. */\r\n  private initializeVariables(\r\n    /** The statement to initialize. */\r\n    statement: VariableStatement,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\r\n      if (declaration.is(CommonFlags.DECLARE)) {\r\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\r\n      }\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        acceptedFlags |= DecoratorFlags.INLINE;\r\n      }\r\n      let element = new Global(\r\n        name,\r\n        parent,\r\n        this.checkDecorators(declaration.decorators, acceptedFlags),\r\n        declaration\r\n      );\r\n      if (!parent.add(name, element)) continue; // reports\r\n    }\r\n  }\r\n\r\n  /** Determines the element type of a built-in array. */\r\n  // determineBuiltinArrayType(target: Class): Type | null {\r\n  //   switch (target.internalName) {\r\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\r\n  //     case BuiltinSymbols.Uint8ClampedArray:\r\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\r\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\r\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\r\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\r\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\r\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\r\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\r\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\r\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\r\n  //   }\r\n  //   var current: Class | null = target;\r\n  //   var arrayPrototype = this.arrayPrototype;\r\n  //   do {\r\n  //     if (current.prototype == arrayPrototype) { // Array<T>\r\n  //       let typeArguments = assert(current.typeArguments);\r\n  //       assert(typeArguments.length == 1);\r\n  //       return typeArguments[0];\r\n  //     }\r\n  //   } while (current = current.base);\r\n  //   return null;\r\n  // }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link PropertyPrototype}.  */\r\n  PROPERTY_PROTOTYPE,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE,\r\n  /** A {@link File}. */\r\n  FILE,\r\n  /** A {@link TypeDefinition}.  */\r\n  TYPEDEFINITION,\r\n}\r\n\r\n/** Indicates built-in decorators that are present. */\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is a binary operator overload. */\r\n  OPERATOR_BINARY = 1 << 1,\r\n  /** Is a unary prefix operator overload. */\r\n  OPERATOR_PREFIX = 1 << 2,\r\n  /** Is a unary postfix operator overload. */\r\n  OPERATOR_POSTFIX = 1 << 3,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 4,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 5,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 6,\r\n  /** Is using a different external name. */\r\n  EXTERNAL = 1 << 7,\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 8,\r\n  /** Is compiled lazily. */\r\n  LAZY = 1 << 9,\r\n  /** Is the explicit start function. */\r\n  START = 1 << 10,\r\n  /** Is considered unsafe code. */\r\n  UNSAFE = 1 << 11\r\n}\r\n\r\n/** Translates a decorator kind to the respective decorator flag. */\r\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\r\n  switch (kind) {\r\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\r\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\r\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\r\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\r\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\r\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\r\n    case DecoratorKind.START: return DecoratorFlags.START;\r\n    case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\r\n    default: return DecoratorFlags.NONE;\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Parent element. */\r\n  parent: Element;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Member elements. */\r\n  members: Map<string,DeclaredElement> | null = null;\r\n  /** Shadowing type in type space, if any. */\r\n  shadowType: TypeDefinition | null = null;\r\n\r\n  /** Constructs a new program element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    public kind: ElementKind,\r\n    /** Simple name. */\r\n    public name: string,\r\n    /** Internal name referring to this element. */\r\n    public internalName: string,\r\n    /** Containing {@link Program}. */\r\n    public program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null\r\n  ) {\r\n    this.program = program;\r\n    this.name = name;\r\n    this.internalName = internalName;\r\n    if (parent) {\r\n      this.parent = parent;\r\n    } else {\r\n      assert(this.kind == ElementKind.FILE);\r\n      this.parent = this; // special case to keep this.parent non-nullable\r\n    }\r\n  }\r\n\r\n  /** Gets the enclosing file. */\r\n  get file(): File {\r\n    var current: Element = this;\r\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\r\n    while (true);\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Unsets the specific flag or flags. */\r\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n\r\n  /** Looks up the element with the specified name within this element. */\r\n  lookupInSelf(name: string): DeclaredElement | null {\r\n    var members = this.members;\r\n    if (members && members.has(name)) return members.get(name)!;\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the element with the specified name relative to this element, like in JS. */\r\n  abstract lookup(name: string): Element | null;\r\n\r\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\r\n  add(name: string, element: DeclaredElement): bool {\r\n    var originalDeclaration = element.declaration;\r\n    var members = this.members;\r\n    if (!members) this.members = members = new Map();\r\n    else if (members.has(name)) {\r\n      let actual = members.get(name)!;\r\n      if (actual.parent !== this) {\r\n        // override non-own element\r\n      } else {\r\n        let merged = tryMerge(actual, element);\r\n        if (merged) {\r\n          element = merged; // use merged element\r\n        } else {\r\n          this.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            element.identifierNode.range, element.identifierNode.text\r\n          );\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    members.set(name, element);\r\n    var program = this.program;\r\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\r\n      // prefer unbound prototypes in global lookup maps\r\n      program.elementsByName.set(element.internalName, element);\r\n      program.elementsByDeclaration.set(originalDeclaration, element);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** Returns a string representation of this element. */\r\n  toString(): string {\r\n    return ElementKind[this.kind] + \":\" + this.internalName;\r\n  }\r\n}\r\n\r\n/** Base class of elements with an associated declaration statement. */\r\nexport abstract class DeclaredElement extends Element {\r\n\r\n  /** Constructs a new declared program element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Internal name referring to this element. */\r\n    internalName: string,\r\n    /** Containing {@link Program}. */\r\n    program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null,\r\n    /** Declaration reference. */\r\n    public declaration: DeclarationStatement\r\n  ) {\r\n    super(kind, name, internalName, program, parent);\r\n    // It is necessary to have access to identifiers of all members and exports\r\n    // for reporting purposes and this is the lowest common denominator. Comes\r\n    // at the expense of not having more specific type information in derived\r\n    // classes, though. Instead, derived classes implement getters for other\r\n    // important AST nodes directly through manual casting, allowing the resolver\r\n    // etc. to not worry about actual declarations.\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags; // inherit\r\n  }\r\n\r\n  /** Tests if this element is a library element. */\r\n  get isDeclaredInLibrary(): bool {\r\n    return this.declaration.range.source.isLibrary;\r\n  }\r\n\r\n  /** Gets the associated identifier node. */\r\n  get identifierNode(): IdentifierExpression {\r\n    return this.declaration.name;\r\n  }\r\n\r\n  /** Gets the assiciated decorator nodes. */\r\n  get decoratorNodes(): DecoratorNode[] | null {\r\n    return this.declaration.decorators;\r\n  }\r\n}\r\n\r\n/** Base class of elements that can be resolved to a concrete type. */\r\nexport abstract class TypedElement extends DeclaredElement {\r\n\r\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\r\n  type: Type = Type.void;\r\n\r\n  /** Sets the resolved type of this element. */\r\n  setType(type: Type): void {\r\n    assert(!this.is(CommonFlags.RESOLVED));\r\n    this.type = type;\r\n    this.set(CommonFlags.RESOLVED);\r\n  }\r\n}\r\n\r\n/** A file representing the implicit top-level namespace of a source. */\r\nexport class File extends Element {\r\n\r\n  /** File exports. */\r\n  exports: Map<string,DeclaredElement> | null = null;\r\n  /** File re-exports. */\r\n  exportsStar: File[] | null = null;\r\n  /** Top-level start function of this file. */\r\n  startFunction: Function;\r\n\r\n  /** Constructs a new file. */\r\n  constructor(\r\n    /** Program this file belongs to. */\r\n    program: Program,\r\n    /** Source of this file. */\r\n    public source: Source\r\n  ) {\r\n    super(\r\n      ElementKind.FILE,\r\n      source.normalizedPath,\r\n      source.internalPath,\r\n      program,\r\n      null // special case for files\r\n    );\r\n    this.source = source;\r\n    assert(!program.filesByName.has(this.internalName));\r\n    program.filesByName.set(this.internalName, this);\r\n    var startFunction = this.program.makeNativeFunction(\r\n      \"start:\" + this.internalName,\r\n      new Signature(null, Type.void),\r\n      this\r\n    );\r\n    startFunction.internalName = startFunction.name;\r\n    this.startFunction = startFunction;\r\n  }\r\n\r\n  /* @override */\r\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\r\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\r\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\r\n    }\r\n    if (!super.add(name, element)) return false;\r\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\r\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\r\n      this.ensureExport(\r\n        element.name,\r\n        element\r\n      );\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /* @override */\r\n  lookupInSelf(name: string): DeclaredElement | null {\r\n    var element = super.lookupInSelf(name);\r\n    if (element) return element;\r\n    var exportsStar = this.exportsStar;\r\n    if (exportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    var element = this.lookupInSelf(name);\r\n    if (element) return element;\r\n    return this.program.lookupGlobal(name);\r\n  }\r\n\r\n  /** Ensures that an element is an export of this file. */\r\n  ensureExport(name: string, element: DeclaredElement): void {\r\n    var exports = this.exports;\r\n    if (!exports) this.exports = exports = new Map();\r\n    exports.set(name, element);\r\n    if (this.source.isLibrary) this.program.ensureGlobal(name, element);\r\n  }\r\n\r\n  /** Ensures that another file is a re-export of this file. */\r\n  ensureExportStar(file: File): void {\r\n    var exportsStar = this.exportsStar;\r\n    if (!exportsStar) this.exportsStar = exportsStar = [];\r\n    else if (exportsStar.includes(file)) return;\r\n    exportsStar.push(file);\r\n  }\r\n\r\n  /** Looks up the export of the specified name. */\r\n  lookupExport(name: string): DeclaredElement | null {\r\n    var exports = this.exports;\r\n    if (exports && exports.has(name)) return exports.get(name)!;\r\n    var exportsStar = this.exportsStar;\r\n    if (exportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        let element = exportsStar[i].lookupExport(name);\r\n        if (element) return element;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Creates an imported namespace from this file. */\r\n  asImportedNamespace(name: string, parent: Element): Namespace {\r\n    var ns = new Namespace(\r\n      name,\r\n      parent,\r\n      this.program.makeNativeNamespaceDeclaration(name)\r\n    );\r\n    var exports = this.exports;\r\n    if (exports) {\r\n      for (let [memberName, member] of exports) {\r\n        ns.add(memberName, member);\r\n      }\r\n    }\r\n    return ns;\r\n  }\r\n}\r\n\r\n/** A type definition. */\r\nexport class TypeDefinition extends TypedElement {\r\n\r\n  /** Constructs a new type definition. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: TypeDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.TYPEDEFINITION,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<TypeDeclaration>this.declaration).typeParameters;\r\n  }\r\n\r\n  /** Gets the associated type node. */\r\n  get typeNode(): CommonTypeNode {\r\n    return (<TypeDeclaration>this.declaration).type;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A namespace that differs from a file in being user-declared with a name. */\r\nexport class Namespace extends DeclaredElement {\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or another namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: NamespaceDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.NAMESPACE,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.lookupInSelf(name)\r\n        || this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends TypedElement {\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: EnumDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.ENUM,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.setType(Type.i32);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.lookupInSelf(name)\r\n        || this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** Indicates the kind of an inlined constant value. */\r\nexport const enum ConstantValueKind {\r\n  /** No constant value. */\r\n  NONE,\r\n  /** Constant integer value. */\r\n  INTEGER,\r\n  /** Constant float value. */\r\n  FLOAT\r\n}\r\n\r\n/** Base class of all variable-like program elements. */\r\nexport abstract class VariableLikeElement extends TypedElement {\r\n\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  /** Constructs a new variable-like element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or class. */\r\n    parent: Element,\r\n    /** Declaration reference. Creates a native declaration if omitted. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      kind,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.flags = declaration.flags;\r\n  }\r\n\r\n  /** Gets the associated type node.s */\r\n  get typeNode(): CommonTypeNode | null {\r\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\r\n  }\r\n\r\n  /** Gets the associated initializer node. */\r\n  get initializerNode(): Expression | null {\r\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\r\n  }\r\n\r\n  /** Applies a constant integer value to this element. */\r\n  setConstantIntegerValue(value: I64, type: Type): void {\r\n    assert(type.is(TypeFlags.INTEGER));\r\n    this.type = type;\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\r\n  }\r\n\r\n  /** Applies a constant float value to this element. */\r\n  setConstantFloatValue(value: f64, type: Type): void {\r\n    assert(type.is(TypeFlags.FLOAT));\r\n    this.type = type;\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\r\n  }\r\n\r\n  /** @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends VariableLikeElement {\r\n\r\n  /** Constructs a new enum value. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent enum. */\r\n    parent: Enum,\r\n    /** Declaration reference. */\r\n    declaration: EnumValueDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.ENUMVALUE,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.setType(Type.i32);\r\n  }\r\n\r\n  /** Whether this enum value is immutable. */\r\n  isImmutable: bool = false;\r\n\r\n  /** Gets the associated value node. */\r\n  get valueNode(): Expression | null {\r\n    return (<EnumValueDeclaration>this.declaration).value;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  /** Constructs a new global variable. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or static class. */\r\n    parent: Element,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags,\r\n    /** Declaration reference. Creates a native declaration if omitted. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      ElementKind.GLOBAL,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n  /** Constructs a new function parameter. */\r\n  constructor(\r\n    /** Parameter name. */\r\n    public name: string,\r\n    /** Parameter type. */\r\n    public type: Type,\r\n    /** Parameter initializer, if present. */\r\n    public initializer: Expression | null = null\r\n  ) {}\r\n}\r\n\r\n/** A local variable. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  /** Constructs a new local variable. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\r\n    public index: i32,\r\n    /** Resolved type. */\r\n    type: Type,\r\n    /** Parent function. */\r\n    parent: Function,\r\n    /** Declaration reference. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      ElementKind.LOCAL,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.index = index;\r\n    assert(type != Type.void);\r\n    this.setType(type);\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends DeclaredElement {\r\n\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n  /** Already resolved instances. */\r\n  instances: Map<string,Function> | null = null;\r\n\r\n  /** Clones of this prototype that are bounds to specific classes. */\r\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    /** Simple name */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or class (if a method). */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: FunctionDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<FunctionDeclaration>this.declaration).typeParameters;\r\n  }\r\n\r\n  /** Gets the associated signature node. */\r\n  get signatureNode(): SignatureNode {\r\n    return (<FunctionDeclaration>this.declaration).signature;\r\n  }\r\n\r\n  /** Gets the associated body node. */\r\n  get bodyNode(): Statement | null {\r\n    return (<FunctionDeclaration>this.declaration).body;\r\n  }\r\n\r\n  /** Gets the arrow function kind. */\r\n  get arrowKind(): ArrowKind {\r\n    return (<FunctionDeclaration>this.declaration).arrowKind;\r\n  }\r\n\r\n  /** Tests if this prototype is bound to a class. */\r\n  get isBound(): bool {\r\n    var parent = this.parent;\r\n    return parent.kind == ElementKind.CLASS\r\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\r\n  }\r\n\r\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\r\n  toBound(classInstance: Class): FunctionPrototype {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    assert(!this.isBound);\r\n    var boundPrototypes = this.boundPrototypes;\r\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\r\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\r\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\r\n    var bound = new FunctionPrototype(\r\n      this.name,\r\n      classInstance, // !\r\n      <MethodDeclaration>declaration,\r\n      this.decoratorFlags\r\n    );\r\n    bound.flags = this.flags;\r\n    bound.operatorKind = this.operatorKind;\r\n    // NOTE: this.instances holds instances per bound class / unbound\r\n    boundPrototypes.set(classInstance, bound);\r\n    return bound;\r\n  }\r\n\r\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\r\n  getResolvedInstance(instanceKey: string): Function | null {\r\n    var instances = this.instances;\r\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\r\n    return null;\r\n  }\r\n\r\n  /** Sets the resolved instance for the specified instance key. */\r\n  setResolvedInstance(instanceKey: string, instance: Function): void {\r\n    var instances = this.instances;\r\n    if (!instances) this.instances = instances = new Map();\r\n    else assert(!instances.has(instanceKey));\r\n    instances.set(instanceKey, instance);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends TypedElement {\r\n\r\n  /** Function prototype. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  localsByName: Map<string,Local> = new Map();\r\n  /** Array of locals by index. */\r\n  localsByIndex: Local[] = [];\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Default control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] = [];\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n\r\n  /** Counting id of inline operations involving this function. */\r\n  nextInlineId: i32 = 0;\r\n  /** Counting id of anonymous inner functions. */\r\n  nextAnonymousId: i32 = 0;\r\n  /** Counting id of autorelease variables. */\r\n  nextAutoreleaseId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\r\n    nameInclTypeParameters: string,\r\n    /** Respective function prototype. */\r\n    prototype: FunctionPrototype,\r\n    /** Concrete signature. */\r\n    signature: Signature, // pre-resolved\r\n    /** Contextual type arguments inherited from its parent class, if any. */\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION,\r\n      nameInclTypeParameters,\r\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\r\n      prototype.program,\r\n      prototype.parent,\r\n      prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    this.type = Type.u32.asFunction(signature);\r\n    if (!prototype.is(CommonFlags.AMBIENT)) {\r\n      let localIndex = 0;\r\n      if (this.is(CommonFlags.INSTANCE)) {\r\n        let local = new Local(\r\n          CommonSymbols.this_,\r\n          localIndex++,\r\n          assert(signature.thisType),\r\n          this\r\n        );\r\n        this.localsByName.set(CommonSymbols.this_, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        let local = new Local(\r\n          parameterName,\r\n          localIndex++,\r\n          parameterType,\r\n          this\r\n        );\r\n        this.localsByName.set(parameterName, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var localName = name !== null\r\n      ? name\r\n      : \"var$\" + localIndex.toString();\r\n    var local = new Local(\r\n      localName,\r\n      localIndex,\r\n      type,\r\n      this,\r\n      declaration || this.program.makeNativeVariableDeclaration(localName)\r\n    );\r\n    if (name) {\r\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\r\n      this.localsByName.set(name, local);\r\n    }\r\n    this.localsByIndex[local.index] = local;\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    var locals = this.localsByName;\r\n    if (locals.has(name)) return locals.get(name);\r\n    return this.parent.lookup(name);\r\n  }\r\n\r\n  // used by flows to keep track of temporary locals\r\n  tempI32s: Local[] | null = null;\r\n  tempI64s: Local[] | null = null;\r\n  tempF32s: Local[] | null = null;\r\n  tempF64s: Local[] | null = null;\r\n  tempV128s: Local[] | null = null;\r\n\r\n  // used by flows to keep track of break labels\r\n  nextBreakId: i32 = 0;\r\n  breakStack: i32[] | null = null;\r\n  breakLabel: string | null = null;\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakLabel = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n        let debugLocation = debugLocations[i];\r\n        module.setDebugLocation(\r\n          ref,\r\n          debugLocation.debugInfoRef,\r\n          debugLocation.source.debugInfoIndex,\r\n          debugLocation.line,\r\n          debugLocation.column\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(\r\n    /** Concrete signature. */\r\n    signature: Signature,\r\n    /** Program reference. */\r\n    program: Program,\r\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION_TARGET,\r\n      __s = \"sig:\" + signature.toSignatureString(),\r\n      __s,\r\n      program,\r\n      program.nativeFile\r\n    );\r\n    this.signature = signature;\r\n    this.flags = CommonFlags.RESOLVED;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return null;\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends DeclaredElement {\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent class. */\r\n    parent: ClassPrototype,\r\n    /** Declaration reference. */\r\n    declaration: FieldDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.FIELD_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type node. */\r\n  get typeNode(): CommonTypeNode | null {\r\n    return (<FieldDeclaration>this.declaration).type;\r\n  }\r\n\r\n  /** Gets the associated initializer node. */\r\n  get initializerNode(): Expression | null {\r\n    return (<FieldDeclaration>this.declaration).initializer;\r\n  }\r\n\r\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\r\n  get parameterIndex(): i32 {\r\n    return (<FieldDeclaration>this.declaration).parameterIndex;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    /** Respective field prototype. */\r\n    prototype: FieldPrototype,\r\n    /** Parent class. */\r\n    parent: Class,\r\n    /** Concrete type. */\r\n    type: Type\r\n  ) {\r\n    super(\r\n      ElementKind.FIELD,\r\n      prototype.name,\r\n      parent,\r\n      <VariableLikeDeclarationStatement>prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    assert(type != Type.void);\r\n    this.setType(type);\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class PropertyPrototype extends DeclaredElement {\r\n\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent class. */\r\n    parent: ClassPrototype,\r\n    /** Declaration of the getter or setter introducing the property. */\r\n    firstDeclaration: FunctionDeclaration\r\n  ) {\r\n    super(\r\n      ElementKind.PROPERTY_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      firstDeclaration\r\n    );\r\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved property. */\r\nexport class Property extends VariableLikeElement {\r\n\r\n  /** Prototype reference. */\r\n  prototype: PropertyPrototype;\r\n  /** Getter instance. */\r\n  getterInstance: Function | null = null;\r\n  /** Setter instance. */\r\n  setterInstance: Function | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    /** Respective property prototype. */\r\n    prototype: PropertyPrototype,\r\n    /** Parent element, usually a static class prototype or class instance. */\r\n    parent: Element\r\n  ) {\r\n    super(\r\n      ElementKind.PROPERTY,\r\n      prototype.name,\r\n      parent,\r\n      prototype.program.makeNativeVariableDeclaration(\r\n        prototype.name,\r\n        prototype.is(CommonFlags.INSTANCE)\r\n          ? CommonFlags.INSTANCE\r\n          : CommonFlags.NONE\r\n      )\r\n    );\r\n    this.prototype = prototype;\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends DeclaredElement {\r\n\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n  /** Already resolved instances. */\r\n  instances: Map<string,Class> | null = null;\r\n\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: ClassDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\r\n    _isInterface: bool = false // FIXME\r\n  ) {\r\n    super(\r\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<ClassDeclaration>this.declaration).typeParameters;\r\n  }\r\n  /** Gets the associated extends node. */\r\n  get extendsNode(): TypeNode | null {\r\n    return (<ClassDeclaration>this.declaration).extendsType;\r\n  }\r\n  /** Gets the associated implements nodes. */\r\n  get implementsNodes(): TypeNode[] | null {\r\n    return (<ClassDeclaration>this.declaration).implementsTypes;\r\n  }\r\n\r\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\r\n  get isBuiltinArray(): bool {\r\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\r\n    return arrayBufferViewInstance !== null\r\n        && this.extends(arrayBufferViewInstance.prototype);\r\n  }\r\n\r\n  /** Tests if this prototype extends the specified. */\r\n  extends(basePtototype: ClassPrototype | null): bool {\r\n    var current: ClassPrototype | null = this;\r\n    do if (current === basePtototype) return true;\r\n    while (current = current.basePrototype);\r\n    return false;\r\n  }\r\n\r\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\r\n  addInstance(name: string, element: DeclaredElement): bool {\r\n    var originalDeclaration = element.declaration;\r\n    var instanceMembers = this.instanceMembers;\r\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\r\n    else if (instanceMembers.has(name)) {\r\n      let merged = tryMerge(instanceMembers.get(name)!, element);\r\n      if (!merged) {\r\n        this.program.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          element.identifierNode.range, element.identifierNode.text\r\n        );\r\n        return false;\r\n      }\r\n      element = merged;\r\n    }\r\n    instanceMembers.set(name, element);\r\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\r\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\r\n    }\r\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\r\n    return true;\r\n  }\r\n\r\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\r\n  getResolvedInstance(instanceKey: string): Class | null {\r\n    var instances = this.instances;\r\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\r\n    return null;\r\n  }\r\n\r\n  /** Sets the resolved instance for the specified instance key. */\r\n  setResolvedInstance(instanceKey: string, instance: Class): void {\r\n    var instances = this.instances;\r\n    if (!instances) this.instances = instances = new Map();\r\n    else assert(!instances.has(instanceKey));\r\n    instances.set(instanceKey, instance);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\nconst enum AcyclicState {\r\n  UNKNOWN,\r\n  ACYCLIC,\r\n  NOT_ACYCLIC\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends TypedElement {\r\n\r\n  /** Class prototype. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n  /** Unique class id. */\r\n  private _id: u32 = 0;\r\n  /** Remembers acyclic state. */\r\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\r\n\r\n  /** Gets the unique runtime id of this class. */\r\n  get id(): u32 {\r\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\r\n  }\r\n\r\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\r\n  get isBuiltinArray(): bool {\r\n    return this.prototype.isBuiltinArray;\r\n  }\r\n\r\n  /** Tests if this class is array-like. */\r\n  get isArrayLike(): bool {\r\n    if (this.isBuiltinArray) return true;\r\n    var lengthField = this.lookupInSelf(\"length\");\r\n    return lengthField !== null && (\r\n      lengthField.kind == ElementKind.FIELD ||\r\n      (\r\n        lengthField.kind == ElementKind.PROPERTY &&\r\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\r\n      )\r\n    ) && (\r\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\r\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\r\n    );\r\n  }\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\r\n    nameInclTypeParameters: string,\r\n    /** The respective class prototype. */\r\n    prototype: ClassPrototype,\r\n    /** Concrete type arguments, if any. */\r\n    typeArguments: Type[] | null = null,\r\n    /** Base class, if derived. */\r\n    base: Class | null = null,\r\n    _isInterface: bool = false // FIXME\r\n  ) {\r\n    super(\r\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\r\n      nameInclTypeParameters,\r\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\r\n      prototype.program,\r\n      prototype.parent,\r\n      prototype.declaration\r\n    );\r\n    var program = this.program;\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.setType(program.options.usizeType.asClass(this));\r\n    this.base = base;\r\n\r\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n      let id = program.nextClassId++;\r\n      this._id = id;\r\n      program.managedClasses.set(id, this);\r\n    }\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        let contextualTypeArguments = this.contextualTypeArguments;\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\r\n          contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply pre-checked instance-specific contextual type arguments\r\n    var typeParameters = prototype.typeParameterNodes;\r\n    if (typeArguments) {\r\n      let numTypeArguments = typeArguments.length;\r\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      if (numTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let i = 0; i < numTypeArguments; ++i) {\r\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n        }\r\n      }\r\n    } else if (typeParameters && typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n    registerConcreteElement(program, this);\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\r\n    if (unchecked) {\r\n      switch (kind) {\r\n        case OperatorKind.INDEXED_GET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        case OperatorKind.INDEXED_SET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n\r\n  /** Calculates the memory offset of the specified field. */\r\n  offsetof(fieldName: string): u32 {\r\n    var members = assert(this.members);\r\n    assert(members.has(fieldName));\r\n    var field = <Element>members.get(fieldName);\r\n    assert(field.kind == ElementKind.FIELD);\r\n    return (<Field>field).memoryOffset;\r\n  }\r\n\r\n  /** Writes a field value to a buffer and returns the number of bytes written. */\r\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\r\n    var field = this.lookupInSelf(name);\r\n    if (field && field.kind == ElementKind.FIELD) {\r\n      let offset = baseOffset + (<Field>field).memoryOffset;\r\n      switch ((<Field>field).type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8: {\r\n          writeI8(i32(value), buffer, offset);\r\n          return 1;\r\n        }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: {\r\n          writeI16(i32(value), buffer, offset);\r\n          return 2;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          writeI32(i32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          assert(!this.program.options.isWasm64); // TODO\r\n          writeI32(i32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.F32: {\r\n          writeF32(f32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.F64: {\r\n          writeF64(f64(value), buffer, offset);\r\n          return 8;\r\n        }\r\n      }\r\n    }\r\n    assert(false);\r\n    return 0;\r\n  }\r\n\r\n  /** Tests if this class extends the specified prototype. */\r\n  extends(prototype: ClassPrototype): bool {\r\n    return this.prototype.extends(prototype);\r\n  }\r\n\r\n  /** Gets the concrete type arguments to the specified extendend prototype. */\r\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\r\n    var current: Class | null = this;\r\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\r\n    while (current = current.base);\r\n    return null;\r\n  }\r\n\r\n  /** Tests if this class is inherently acyclic. */\r\n  get isAcyclic(): bool {\r\n    var acyclic = this._acyclic;\r\n    if (acyclic == AcyclicState.UNKNOWN) {\r\n      let hasCycle = this.cyclesTo(this);\r\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\r\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\r\n    }\r\n    return acyclic == AcyclicState.ACYCLIC;\r\n  }\r\n\r\n  /** Tests if this class potentially forms a reference cycle to another one. */\r\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\r\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\r\n    //\r\n    // - scalars\r\n    // - references to classes that are both acyclic and final (here: Java); and\r\n    // - arrays (in our case: also sets, maps) of either of the above\r\n    //\r\n    // Our implementation, however, treats all objects that do not reference themselves directly\r\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\r\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\r\n\r\n    if (except.has(this)) return false;\r\n    except.add(this); // don't recurse indefinitely\r\n\r\n    // Find out if any field references 'other' directly or indirectly\r\n    var current: Class | null;\r\n    var members = this.members;\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        if (\r\n          member.kind == ElementKind.FIELD &&\r\n          (current = (<Field>member).type.classReference) !== null &&\r\n          (\r\n            current === other ||\r\n            current.cyclesTo(other, except)\r\n          )\r\n        ) return true;\r\n      }\r\n    }\r\n\r\n    // Do the same for non-field data\r\n    var basePrototype: ClassPrototype | null;\r\n\r\n    // Array<T->other?>\r\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 1);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n\r\n    // Set<K->other?>\r\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 1);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n\r\n    // Map<K->other?,V->other?>\r\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 2);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n      if (\r\n        (current = typeArguments[1].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype { // FIXME\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    name: string,\r\n    parent: Element,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      decoratorFlags,\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class { // FIXME\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    nameInclTypeParameters: string,\r\n    prototype: InterfacePrototype,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(\r\n      nameInclTypeParameters,\r\n      prototype,\r\n      typeArguments,\r\n      base,\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\n/** Registers a concrete element with a program. */\r\nfunction registerConcreteElement(program: Program, element: Element): void {\r\n  assert(!program.instancesByName.has(element.internalName));\r\n  program.instancesByName.set(element.internalName, element);\r\n}\r\n\r\n/** Attempts to merge two elements. Returns the merged element on success. */\r\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\r\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\r\n  // suggesting to just merge what seems to be possible for now and revisit later.\r\n  assert(older.program === newer.program);\r\n  assert(!newer.members);\r\n  var merged: DeclaredElement | null = null;\r\n  switch (older.kind) {\r\n    case ElementKind.FUNCTION_PROTOTYPE: {\r\n      switch (newer.kind) {\r\n        case ElementKind.NAMESPACE: {\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n          break;\r\n        }\r\n        case ElementKind.TYPEDEFINITION: {\r\n          if (!older.shadowType) {\r\n            older.shadowType = <TypeDefinition>newer;\r\n            copyMembers(newer, older);\r\n            merged = <DeclaredElement>older;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.CLASS_PROTOTYPE:\r\n    case ElementKind.ENUM: {\r\n      if (newer.kind == ElementKind.NAMESPACE) {\r\n        copyMembers(newer, older);\r\n        merged = <DeclaredElement>older;\r\n        break;\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.NAMESPACE: {\r\n      switch (newer.kind) {\r\n        case ElementKind.ENUM:\r\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\r\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\r\n          copyMembers(older, newer);\r\n          merged = <DeclaredElement>newer;\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n          break;\r\n        }\r\n        case ElementKind.TYPEDEFINITION: {\r\n          if (!older.shadowType) {\r\n            older.shadowType = <TypeDefinition>newer;\r\n            copyMembers(newer, older);\r\n            merged = <DeclaredElement>older;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.GLOBAL: {\r\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\r\n        if (!older.shadowType) {\r\n          older.shadowType = <TypeDefinition>newer;\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.TYPEDEFINITION: {\r\n      switch (newer.kind) {\r\n        case ElementKind.GLOBAL:\r\n        case ElementKind.FUNCTION_PROTOTYPE:\r\n        case ElementKind.NAMESPACE: {\r\n          if (!newer.shadowType) {\r\n            newer.shadowType = <TypeDefinition>older;\r\n            copyMembers(older, newer);\r\n            merged = <DeclaredElement>newer;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  if (merged) {\r\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\r\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\r\n    if (olderIsExport != newerIsExport) {\r\n      older.program.error(\r\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n        merged.identifierNode.range, merged.identifierNode.text\r\n      );\r\n    }\r\n  }\r\n  return merged;\r\n}\r\n\r\n/** Copies the members of `src` to `dest`. */\r\nfunction copyMembers(src: Element, dest: Element): void {\r\n  var srcMembers = src.members;\r\n  if (srcMembers) {\r\n    let destMembers = dest.members;\r\n    if (!destMembers) dest.members = destMembers = new Map();\r\n    for (let [memberName, member] of srcMembers) {\r\n      destMembers.set(memberName, member);\r\n    }\r\n  }\r\n}\r\n\r\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\r\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\r\n  switch (parent.kind) {\r\n    case ElementKind.FILE: {\r\n      if (asGlobal) return name;\r\n      return parent.internalName + PATH_DELIMITER + name;\r\n    }\r\n    case ElementKind.FUNCTION: {\r\n      if (asGlobal) return name;\r\n      assert(!isInstance);\r\n      return parent.internalName + INNER_DELIMITER + name;\r\n    }\r\n    default: {\r\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\r\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport { Target } from \"./common\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type RelooperRef = usize;\r\nexport type RelooperBlockRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32  = _BinaryenTypeInt32(),\r\n  I64  = _BinaryenTypeInt64(),\r\n  F32  = _BinaryenTypeFloat32(),\r\n  F64  = _BinaryenTypeFloat64(),\r\n  V128 = _BinaryenTypeVec128(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum FeatureFlags {\r\n  Atomics = _BinaryenFeatureAtomics(),\r\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\r\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\r\n  SIMD128 = _BinaryenFeatureSIMD128(),\r\n  BulkMemory = _BinaryenFeatureBulkMemory(),\r\n  SignExt = _BinaryenFeatureSignExt(),\r\n  ExceptionHandling = _BinaryenFeatureExceptionHandling()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  LocalGet = _BinaryenLocalGetId(),\r\n  LocalSet = _BinaryenLocalSetId(),\r\n  GlobalGet = _BinaryenGlobalGetId(),\r\n  GlobalSet = _BinaryenGlobalSetId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicNotify = _BinaryenAtomicNotifyId(),\r\n  SIMDExtract = _BinaryenSIMDExtractId(),\r\n  SIMDReplace = _BinaryenSIMDReplaceId(),\r\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\r\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\r\n  SIMDShift = _BinaryenSIMDShiftId(),\r\n  MemoryInit = _BinaryenMemoryInitId(),\r\n  DataDrop = _BinaryenDataDropId(),\r\n  MemoryCopy = _BinaryenMemoryCopyId(),\r\n  MemoryFill = _BinaryenMemoryFillId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/sign-extension-ops\r\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\r\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\r\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\r\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\r\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n\r\n  // see: https://github.com/WebAssembly/simd\r\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\r\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\r\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\r\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\r\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\r\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\r\n  NotVec128 = _BinaryenNotVec128(),\r\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\r\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\r\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\r\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\r\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\r\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\r\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\r\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\r\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\r\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\r\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\r\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\r\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\r\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\r\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\r\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\r\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\r\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\r\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\r\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\r\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\r\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\r\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\r\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\r\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\r\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2()\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64(),\r\n\r\n  // see: https://github.com/WebAssembly/simd\r\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\r\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\r\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\r\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\r\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\r\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\r\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\r\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\r\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\r\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\r\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\r\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\r\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\r\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\r\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\r\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\r\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\r\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\r\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\r\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\r\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\r\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\r\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\r\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\r\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\r\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\r\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\r\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\r\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\r\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\r\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\r\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\r\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\r\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\r\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\r\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\r\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\r\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\r\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\r\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\r\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\r\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\r\n  AndVec128 = _BinaryenAndVec128(),\r\n  OrVec128 = _BinaryenOrVec128(),\r\n  XorVec128 = _BinaryenXorVec128(),\r\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\r\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\r\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\r\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\r\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\r\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\r\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\r\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\r\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\r\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\r\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\r\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\r\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\r\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\r\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\r\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\r\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\r\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\r\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\r\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\r\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\r\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\r\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\r\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\r\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\r\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\r\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\r\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\r\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\r\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\r\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\r\n}\r\n\r\nexport enum HostOp {\r\n  MemorySize = _BinaryenMemorySize(),\r\n  MemoryGrow = _BinaryenMemoryGrow(),\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport enum SIMDExtractOp {\r\n  ExtractLaneSVecI8x16 = _BinaryenExtractLaneSVecI8x16(),\r\n  ExtractLaneUVecI8x16 = _BinaryenExtractLaneUVecI8x16(),\r\n  ExtractLaneSVecI16x8 = _BinaryenExtractLaneSVecI16x8(),\r\n  ExtractLaneUVecI16x8 = _BinaryenExtractLaneUVecI16x8(),\r\n  ExtractLaneVecI32x4 = _BinaryenExtractLaneVecI32x4(),\r\n  ExtractLaneVecI64x2 = _BinaryenExtractLaneVecI64x2(),\r\n  ExtractLaneVecF32x4 = _BinaryenExtractLaneVecF32x4(),\r\n  ExtractLaneVecF64x2 = _BinaryenExtractLaneVecF64x2(),\r\n}\r\n\r\nexport enum SIMDReplaceOp {\r\n  ReplaceLaneVecI8x16 = _BinaryenReplaceLaneVecI8x16(),\r\n  ReplaceLaneVecI16x8 = _BinaryenReplaceLaneVecI16x8(),\r\n  ReplaceLaneVecI32x4 = _BinaryenReplaceLaneVecI32x4(),\r\n  ReplaceLaneVecI64x2 = _BinaryenReplaceLaneVecI64x2(),\r\n  ReplaceLaneVecF32x4 = _BinaryenReplaceLaneVecF32x4(),\r\n  ReplaceLaneVecF64x2 = _BinaryenReplaceLaneVecF64x2()\r\n}\r\n\r\nexport enum SIMDShiftOp {\r\n  ShlVecI8x16 = _BinaryenShlVecI8x16(),\r\n  ShrSVecI8x16 = _BinaryenShrSVecI8x16(),\r\n  ShrUVecI8x16 = _BinaryenShrUVecI8x16(),\r\n  ShlVecI16x8 = _BinaryenShlVecI16x8(),\r\n  ShrSVecI16x8 = _BinaryenShrSVecI16x8(),\r\n  ShrUVecI16x8 = _BinaryenShrUVecI16x8(),\r\n  ShlVecI32x4 = _BinaryenShlVecI32x4(),\r\n  ShrSVecI32x4 = _BinaryenShrSVecI32x4(),\r\n  ShrUVecI32x4 = _BinaryenShrUVecI32x4(),\r\n  ShlVecI64x2 = _BinaryenShlVecI64x2(),\r\n  ShrSVecI64x2 = _BinaryenShrSVecI64x2(),\r\n  ShrUVecI64x2 = _BinaryenShrUVecI64x2()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n\r\n  private lit: usize;\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n      return module;\r\n    } finally {\r\n      memory.free(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunctionType(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunctionType(this.ref, cStr);\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createV128(bytes: Uint8Array): ExpressionRef {\r\n    assert(bytes.length == 16);\r\n    var out = this.lit;\r\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\r\n    _BinaryenLiteralVec128(out, out);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalGet(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalTee(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenGlobalGet(this.ref, cStr, type);\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0,\r\n    align: Index = bytes // naturally aligned by default\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0,\r\n    align: Index = bytes // naturally aligned by default\r\n  ): ExpressionRef {\r\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\r\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicNotify(\r\n    ptr: ExpressionRef,\r\n    notifyCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalSet(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenGlobalSet(this.ref, cStr, value);\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    var cArr = allocPtrArray(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenBreak(this.ref, cStr, condition, value);\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenLoop(this.ref, cStr, body);\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = this.allocStringCached(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = this.allocStringCached(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(typeName);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // bulk memory\r\n\r\n  createMemoryCopy(\r\n    dest: ExpressionRef,\r\n    source: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\r\n  }\r\n\r\n  createMemoryFill(\r\n    dest: ExpressionRef,\r\n    value: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\r\n  }\r\n\r\n  // simd\r\n\r\n  createSIMDExtract(\r\n    op: SIMDExtractOp,\r\n    vec: ExpressionRef,\r\n    idx: u8\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\r\n  }\r\n\r\n  createSIMDReplace(\r\n    op: SIMDReplaceOp,\r\n    vec: ExpressionRef,\r\n    idx: u8,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\r\n  }\r\n\r\n  createSIMDShuffle(\r\n    vec1: ExpressionRef,\r\n    vec2: ExpressionRef,\r\n    mask: Uint8Array\r\n  ): ExpressionRef {\r\n    assert(mask.length == 16);\r\n    var cArr = allocU8Array(mask);\r\n    try {\r\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createSIMDBitselect(\r\n    vec1: ExpressionRef,\r\n    vec2: ExpressionRef,\r\n    cond: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDBitselect(this.ref, vec1, vec2, cond);\r\n  }\r\n\r\n  createSIMDShift(\r\n    op: SIMDShiftOp,\r\n    vec: ExpressionRef,\r\n    shift: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n  }\r\n\r\n  removeGlobal(\r\n    name: string\r\n  ): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveGlobal(this.ref, cStr);\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunction(this.ref, cStr);\r\n  }\r\n\r\n  private hasTemporaryFunction: bool = false;\r\n\r\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\r\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\r\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeTemporaryFunction(): void {\r\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    _BinaryenRemoveFunction(this.ref, tempName);\r\n    _BinaryenRemoveFunctionType(this.ref, tempName);\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = this.allocStringCached(externalName);\r\n    _BinaryenRemoveExport(this.ref, cStr);\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    shared: bool = false,\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n  }\r\n\r\n  /** Unlimited memory constant. */\r\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null,\r\n    shared: bool = false\r\n  ): void {\r\n    var cStr = this.allocStringCached(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var psvs = new Array<i8>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      psvs[i] = 0; // no passive segments currently\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocU8Array(psvs);\r\n    var cArr3 = allocI32Array(offs);\r\n    var cArr4 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\r\n    } finally {\r\n      memory.free(cArr4);\r\n      memory.free(cArr3);\r\n      memory.free(cArr2);\r\n      memory.free(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(\r\n    initial: Index,\r\n    maximum: Index,\r\n    funcs: string[]\r\n  ): void {\r\n    var numNames = funcs.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = this.allocStringCached(funcs[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  getOptimizeLevel(): i32 {\r\n    return _BinaryenGetOptimizeLevel();\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  getShrinkLevel(): i32 {\r\n    return _BinaryenGetShrinkLevel();\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  getFeatures(): BinaryenFeatureFlags {\r\n    return _BinaryenModuleGetFeatures(this.ref);\r\n  }\r\n\r\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\r\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      memory.free(cArr);\r\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\r\n    }\r\n  }\r\n\r\n  private cachedPrecomputeNames: usize = 0;\r\n\r\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\r\n    // remember the previous optimize levels and set to max instead, to be sure\r\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\r\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\r\n    var previousDebugInfo = _BinaryenGetDebugInfo();\r\n    _BinaryenSetOptimizeLevel(4);\r\n    _BinaryenSetShrinkLevel(0);\r\n    _BinaryenSetDebugInfo(false);\r\n\r\n    // wrap the expression in a temp. function and run the precompute pass on it\r\n    var type = _BinaryenExpressionGetType(expr);\r\n    var func = this.addTemporaryFunction(type, null, expr);\r\n    var names = this.cachedPrecomputeNames;\r\n    if (!names) {\r\n      this.cachedPrecomputeNames = names = allocI32Array([ this.allocStringCached(\"precompute\") ]);\r\n    }\r\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\r\n    expr = _BinaryenFunctionGetBody(func);\r\n    this.removeTemporaryFunction();\r\n\r\n    // reset optimize levels to previous\r\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\r\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\r\n    _BinaryenSetDebugInfo(previousDebugInfo);\r\n    return expr;\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.lit; // safe to reuse as long as..\r\n    assert(_BinaryenSizeofLiteral() >= 12);\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) memory.free(cStr);\r\n      if (binaryPtr) memory.free(binaryPtr);\r\n      if (sourceMapPtr) memory.free(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  private cachedStrings: Map<string,usize> = new Map();\r\n\r\n  private allocStringCached(str: string | null): usize {\r\n    if (str == null) return 0;\r\n    var cachedStrings = this.cachedStrings;\r\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\r\n    var ptr = allocString(str);\r\n    cachedStrings.set(str, ptr);\r\n    return ptr;\r\n  }\r\n\r\n  dispose(): void {\r\n    assert(this.ref);\r\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\r\n    this.cachedStrings = new Map();\r\n    memory.free(this.lit);\r\n    memory.free(this.cachedPrecomputeNames);\r\n    this.cachedPrecomputeNames = 0;\r\n    _BinaryenModuleDispose(this.ref);\r\n    this.ref = 0;\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(\r\n    expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n        switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          case NativeType.V128: {\r\n            // TODO\r\n            return 0;\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        return _BinaryenLocalGet(this.ref,\r\n          _BinaryenLocalGetGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GlobalGet: {\r\n        let globalName = _BinaryenGlobalGetGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return (\r\n          _BinaryenLoadIsAtomic(expr)\r\n            ? _BinaryenAtomicLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n            : _BinaryenLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenLoadGetAlign(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n        );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\n// expressions\r\n\r\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\r\n  return _BinaryenExpressionGetId(expr);\r\n}\r\n\r\nexport function getExpressionType(expr: ExpressionRef): NativeType {\r\n  return _BinaryenExpressionGetType(expr);\r\n}\r\n\r\nexport function getConstValueI32(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI32(expr);\r\n}\r\n\r\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64Low(expr);\r\n}\r\n\r\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64High(expr);\r\n}\r\n\r\nexport function getConstValueF32(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF32(expr);\r\n}\r\n\r\nexport function getConstValueF64(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF64(expr);\r\n}\r\n\r\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenLocalGetGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenLocalSetGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLocalSetGetValue(expr);\r\n}\r\n\r\nexport function isTeeLocal(expr: ExpressionRef): bool {\r\n  return _BinaryenLocalSetIsTee(expr);\r\n}\r\n\r\nexport function getGetGlobalName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenGlobalGetGetName(expr));\r\n}\r\n\r\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\r\n  return _BinaryenBinaryGetOp(expr);\r\n}\r\n\r\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetLeft(expr);\r\n}\r\n\r\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetRight(expr);\r\n}\r\n\r\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\r\n  return _BinaryenUnaryGetOp(expr);\r\n}\r\n\r\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenUnaryGetValue(expr);\r\n}\r\n\r\nexport function getLoadBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetBytes(expr);\r\n}\r\n\r\nexport function getLoadOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetOffset(expr);\r\n}\r\n\r\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoadGetPtr(expr);\r\n}\r\n\r\nexport function isLoadSigned(expr: ExpressionRef): bool {\r\n  return _BinaryenLoadIsSigned(expr);\r\n}\r\n\r\nexport function getStoreBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetBytes(expr);\r\n}\r\n\r\nexport function getStoreOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetOffset(expr);\r\n}\r\n\r\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetPtr(expr);\r\n}\r\n\r\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetValue(expr);\r\n}\r\n\r\nexport function getBlockName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBlockGetName(expr));\r\n}\r\n\r\nexport function getBlockChildCount(expr: ExpressionRef): Index {\r\n  return _BinaryenBlockGetNumChildren(expr);\r\n}\r\n\r\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenBlockGetChild(expr, index);\r\n}\r\n\r\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetCondition(expr);\r\n}\r\n\r\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfTrue(expr);\r\n}\r\n\r\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfFalse(expr);\r\n}\r\n\r\nexport function getLoopName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenLoopGetName(expr));\r\n}\r\n\r\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoopGetBody(expr);\r\n}\r\n\r\nexport function getBreakName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBreakGetName(expr));\r\n}\r\n\r\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBreakGetCondition(expr);\r\n}\r\n\r\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfTrue(expr);\r\n}\r\n\r\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfFalse(expr);\r\n}\r\n\r\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetCondition(expr);\r\n}\r\n\r\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenDropGetValue(expr);\r\n}\r\n\r\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenReturnGetValue(expr);\r\n}\r\n\r\nexport function getCallTarget(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenCallGetTarget(expr));\r\n}\r\n\r\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\r\n  return _BinaryenCallGetNumOperands(expr);\r\n}\r\n\r\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenCallGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenHostGetOp(expr);\r\n}\r\n\r\nexport function getHostOperandCount(expr: ExpressionRef): Index {\r\n  return _BinaryenHostGetNumOperands(expr);\r\n}\r\n\r\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenHostGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenHostGetNameOperand(expr));\r\n}\r\n\r\n// functions\r\n\r\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\r\n  return _BinaryenFunctionGetBody(func);\r\n}\r\n\r\nexport function getFunctionName(func: FunctionRef): string | null {\r\n  return readString(_BinaryenFunctionGetName(func));\r\n}\r\n\r\nexport function getFunctionParamCount(func: FunctionRef): Index {\r\n  return _BinaryenFunctionGetNumParams(func);\r\n}\r\n\r\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\r\n  return _BinaryenFunctionGetParam(func, index);\r\n}\r\n\r\nexport function getFunctionResultType(func: FunctionRef): NativeType {\r\n  return _BinaryenFunctionGetResult(func);\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate(module.ref);\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    condition: ExpressionRef = 0,\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    indexes: i32[],\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\r\n//     case ExpressionId.GetLocal:\r\n//     case ExpressionId.GetGlobal:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop:\r\n//     case ExpressionId.Unreachable: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = memory.allocate(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = memory.allocate(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocPtrArray(ptrs: usize[] | null): usize {\r\n  return allocI32Array(ptrs); // TODO: WASM64 one day\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n\r\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\r\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\r\n  // not applicable if pushing a value to the stack\r\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\r\n\r\n  switch (_BinaryenExpressionGetId(expr)) {\r\n    case ExpressionId.Unreachable:\r\n    case ExpressionId.Return: return false;\r\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\r\n    case ExpressionId.Block: {\r\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\r\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\r\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/** Traverses all expression members of an expression, calling the given visitor. */\r\nexport function traverse(expr: ExpressionRef, visit: (expr: ExpressionRef) => bool): bool {\r\n  switch (getExpressionId(expr)) {\r\n    case ExpressionId.Block: {\r\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\r\n        if (!visit(_BinaryenBlockGetChild(expr, i))) return false;\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.If: {\r\n      if (!visit(_BinaryenIfGetCondition(expr))) return false;\r\n      if (!visit(_BinaryenIfGetIfTrue(expr))) return false;\r\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\r\n      if (ifFalse) if (!visit(ifFalse)) return false;\r\n      break;\r\n    }\r\n    case ExpressionId.Loop: {\r\n      if (!visit(_BinaryenLoopGetBody(expr))) return false;\r\n      break;\r\n    }\r\n    case ExpressionId.Break: {\r\n      let condition = _BinaryenBreakGetCondition(expr);\r\n      if (condition) if (!visit(condition)) return false;\r\n      break;\r\n    }\r\n    case ExpressionId.Switch: {\r\n      if (!visit(_BinaryenSwitchGetCondition(expr))) return false;\r\n      break;\r\n    }\r\n    case ExpressionId.Call: {\r\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\r\n        if (!visit(_BinaryenCallGetOperand(expr, i))) return false;\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.CallIndirect: {\r\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\r\n        if (!visit(_BinaryenCallIndirectGetOperand(expr, i))) return false;\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.LocalGet: {\r\n      break;\r\n    }\r\n    case ExpressionId.LocalSet: {\r\n      if (!visit(_BinaryenLocalSetGetValue(expr))) return false;\r\n      break;\r\n    }\r\n    case ExpressionId.GlobalGet: {\r\n      break;\r\n    }\r\n    case ExpressionId.GlobalSet: {\r\n      if (!visit(_BinaryenGlobalSetGetValue(expr))) return false;\r\n      break;\r\n    }\r\n    case ExpressionId.Load: {\r\n      if (!visit(_BinaryenLoadGetPtr(expr))) return false;\r\n      break;\r\n    }\r\n    case ExpressionId.Store: {\r\n      if (!visit(_BinaryenStoreGetPtr(expr))) return false;\r\n      if (!visit(_BinaryenStoreGetValue(expr))) return false;\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicRMW: {\r\n      if (!visit(_BinaryenAtomicRMWGetPtr(expr))) return false;\r\n      if (!visit(_BinaryenAtomicRMWGetValue(expr))) return false;\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicCmpxchg: {\r\n      if (!visit(_BinaryenAtomicCmpxchgGetPtr(expr))) return false;\r\n      if (!visit(_BinaryenAtomicCmpxchgGetExpected(expr))) return false;\r\n      if (!visit(_BinaryenAtomicCmpxchgGetReplacement(expr))) return false;\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicWait: {\r\n      if (!visit(_BinaryenAtomicWaitGetPtr(expr))) return false;\r\n      if (!visit(_BinaryenAtomicWaitGetExpected(expr))) return false;\r\n      if (!visit(_BinaryenAtomicWaitGetTimeout(expr))) return false;\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicNotify: {\r\n      if (!visit(_BinaryenAtomicNotifyGetPtr(expr))) return false;\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDExtract: {\r\n      if (!visit(_BinaryenSIMDExtractGetVec(expr))) return false;\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDReplace: {\r\n      if (!visit(_BinaryenSIMDReplaceGetVec(expr))) return false;\r\n      if (!visit(_BinaryenSIMDReplaceGetValue(expr))) return false;\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDShuffle: {\r\n      if (!visit(_BinaryenSIMDShuffleGetLeft(expr))) return false;\r\n      if (!visit(_BinaryenSIMDShuffleGetRight(expr))) return false;\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDBitselect: {\r\n      if (!visit(_BinaryenSIMDBitselectGetLeft(expr))) return false;\r\n      if (!visit(_BinaryenSIMDBitselectGetRight(expr))) return false;\r\n      if (!visit(_BinaryenSIMDBitselectGetCond(expr))) return false;\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDShift: {\r\n      if (!visit(_BinaryenSIMDShiftGetVec(expr))) return false;\r\n      if (!visit(_BinaryenSIMDShiftGetShift(expr))) return false;\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryInit: {\r\n      if (!visit(_BinaryenMemoryInitGetDest(expr))) return false;\r\n      if (!visit(_BinaryenMemoryInitGetOffset(expr))) return false;\r\n      if (!visit(_BinaryenMemoryInitGetSize(expr))) return false;\r\n      break;\r\n    }\r\n    case ExpressionId.DataDrop: {\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryCopy: {\r\n      if (!visit(_BinaryenMemoryCopyGetDest(expr))) return false;\r\n      if (!visit(_BinaryenMemoryCopyGetSource(expr))) return false;\r\n      if (!visit(_BinaryenMemoryCopyGetSize(expr))) return false;\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryFill: {\r\n      if (!visit(_BinaryenMemoryFillGetDest(expr))) return false;\r\n      if (!visit(_BinaryenMemoryFillGetValue(expr))) return false;\r\n      if (!visit(_BinaryenMemoryFillGetSize(expr))) return false;\r\n      break;\r\n    }\r\n    case ExpressionId.Const: {\r\n      break;\r\n    }\r\n    case ExpressionId.Unary: {\r\n      if (!visit(_BinaryenUnaryGetValue(expr))) return false;\r\n      break;\r\n    }\r\n    case ExpressionId.Binary: {\r\n      if (!visit(_BinaryenBinaryGetLeft(expr))) return false;\r\n      if (!visit(_BinaryenBinaryGetRight(expr))) return false;\r\n      break;\r\n    }\r\n    case ExpressionId.Select: {\r\n      if (!visit(_BinaryenSelectGetIfTrue(expr))) return false;\r\n      if (!visit(_BinaryenSelectGetIfFalse(expr))) return false;\r\n      if (!visit(_BinaryenSelectGetCondition(expr))) return false;\r\n      break;\r\n    }\r\n    case ExpressionId.Drop: {\r\n      if (!visit(_BinaryenDropGetValue(expr))) return false;\r\n      break;\r\n    }\r\n    case ExpressionId.Return: {\r\n      if (!visit(_BinaryenReturnGetValue(expr))) return false;\r\n      break;\r\n    }\r\n    case ExpressionId.Host: {\r\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\r\n        if (!visit(_BinaryenHostGetOperand(expr, i))) return false;\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.Nop: {\r\n      break;\r\n    }\r\n    case ExpressionId.Unreachable: {\r\n      break;\r\n    }\r\n    default: assert(false);\r\n  }\r\n  return true;\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  CommonSymbols,\r\n  PATH_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath,\r\n  CharCode\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPENAME,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  CLASS,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  INSTANCEOF,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INDEXSIGNATUREDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Checks if a node represents a constant value. */\r\nexport function nodeIsConstantValue(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.LITERAL:\r\n    case NodeKind.NULL:\r\n    case NodeKind.TRUE:\r\n    case NodeKind.FALSE: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable. */\r\nexport function nodeIsCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.ASSERTION: // if kind=NONNULL\r\n    case NodeKind.CALL:\r\n    case NodeKind.ELEMENTACCESS:\r\n    case NodeKind.PARENTHESIZED:\r\n    case NodeKind.PROPERTYACCESS:\r\n    case NodeKind.SUPER: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable with generic arguments. */\r\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.PROPERTYACCESS: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n\r\n  // types\r\n\r\n  static createTypeName(\r\n    name: IdentifierExpression,\r\n    range: Range\r\n  ): TypeName {\r\n    var typeName = new TypeName();\r\n    typeName.range = range;\r\n    typeName.identifier = name;\r\n    typeName.next = null;\r\n    return typeName;\r\n  }\r\n\r\n  static createSimpleTypeName(\r\n    name: string,\r\n    range: Range\r\n  ): TypeName {\r\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\r\n  }\r\n\r\n  static createType(\r\n    name: TypeName,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name;\r\n    type.typeArguments = typeArguments;\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createSimpleTypeName(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    defaultType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name;\r\n    elem.extendsType = extendsType;\r\n    elem.defaultType = defaultType;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name;\r\n    elem.type = type;\r\n    elem.initializer = initializer;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameters = parameters;\r\n    sig.returnType = returnType;\r\n    sig.explicitThisType = explicitThisType;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    name: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = name;\r\n    stmt.arguments = args;\r\n    stmt.decoratorKind = decoratorNameToKind(name);\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range,\r\n    isQuoted: bool = false\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name; // TODO: extract from range\r\n    expr.symbol = name; // TODO: Symbol.for(name)\r\n    expr.isQuoted = isQuoted;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements;\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode | null,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression;\r\n    expr.toType = toType;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left;\r\n    expr.right = right;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.typeArguments = typeArgs;\r\n    expr.arguments = args;\r\n    return expr;\r\n  }\r\n\r\n  static createClassExpression(\r\n    declaration: ClassDeclaration\r\n  ): ClassExpression {\r\n    var expr = new ClassExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions;\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.elementExpression = element;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createInstanceOfExpression(\r\n    expression: Expression,\r\n    isType: CommonTypeNode,\r\n    range: Range\r\n  ): InstanceOfExpression {\r\n    var expr = new InstanceOfExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.isType = isType;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.typeArguments = typeArgs;\r\n    expr.arguments = args;\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createObjectLiteralExpression(\r\n    names: IdentifierExpression[],\r\n    values: Expression[],\r\n    range: Range\r\n  ): ObjectLiteralExpression {\r\n    var expr = new ObjectLiteralExpression();\r\n    expr.range = range;\r\n    expr.names = names;\r\n    expr.values = values;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.property = property;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition;\r\n    expr.ifThen = ifThen;\r\n    expr.ifElse = ifElse;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements;\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.extendsType = extendsType;\r\n    stmt.implementsTypes = implementsTypes;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement;\r\n    stmt.condition = condition;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.values = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[] | null,\r\n    path: StringLiteralExpression | null,\r\n    isDeclare: bool,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.members = members;\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n          normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n        }\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    stmt.isDeclare = isDeclare;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name;\r\n    stmt.externalName = externalName;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.localName = name;\r\n    if (!externalName) externalName = name;\r\n    elem.exportedName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.ifTrue = ifTrue;\r\n    stmt.ifFalse = ifFalse;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls;\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) {\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else {\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    foreignName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.foreignName = foreignName;\r\n    if (!name) name = foreignName;\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.extendsType = extendsType;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.type = type;\r\n    stmt.initializer = initializer;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer;\r\n    stmt.condition = condition;\r\n    stmt.incrementor = incrementor;\r\n    stmt.statement = statement;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    arrowKind: ArrowKind,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.signature = signature;\r\n    stmt.body = body;\r\n    stmt.decorators = decorators;\r\n    stmt.arrowKind = arrowKind;\r\n    return stmt;\r\n  }\r\n\r\n  static createIndexSignatureDeclaration(\r\n    keyType: TypeNode,\r\n    valueType: CommonTypeNode,\r\n    range: Range\r\n  ): IndexSignatureDeclaration {\r\n    var elem = new IndexSignatureDeclaration();\r\n    elem.range = range;\r\n    elem.keyType = keyType;\r\n    elem.valueType = valueType;\r\n    return elem;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.signature = signature;\r\n    stmt.body = body;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.cases = cases;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label;\r\n    elem.statements = statements;\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements;\r\n    stmt.catchVariable = catchVariable;\r\n    stmt.catchStatements = catchStatements;\r\n    stmt.finallyStatements = finallyStatements;\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.type = alias;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = declarations;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name;\r\n    elem.type = type;\r\n    elem.initializer = initializer;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.statement = statement;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type name. */\r\nexport class TypeName extends Node {\r\n  kind = NodeKind.TYPENAME;\r\n\r\n  /** Identifier of this part. */\r\n  identifier: IdentifierExpression;\r\n  /** Next part of the type name or `null` if this is the last part. */\r\n  next: TypeName | null;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Type name. */\r\n  name: TypeName;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Default type if omitted, if any. */\r\n  defaultType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameters: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  OPERATOR_BINARY,\r\n  OPERATOR_PREFIX,\r\n  OPERATOR_POSTFIX,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE,\r\n  EXTERNAL,\r\n  BUILTIN,\r\n  LAZY,\r\n  START,\r\n  UNSAFE\r\n}\r\n\r\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\r\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\r\n  // @global, @inline, @operator, @sealed, @unmanaged\r\n  if (name.kind == NodeKind.IDENTIFIER) {\r\n    let nameStr = (<IdentifierExpression>name).text;\r\n    assert(nameStr.length);\r\n    switch (nameStr.charCodeAt(0)) {\r\n      case CharCode.b: {\r\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\r\n        break;\r\n      }\r\n      case CharCode.e: {\r\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\r\n        break;\r\n      }\r\n      case CharCode.g: {\r\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\r\n        break;\r\n      }\r\n      case CharCode.i: {\r\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\r\n        break;\r\n      }\r\n      case CharCode.l: {\r\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\r\n        break;\r\n      }\r\n      case CharCode.o: {\r\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\r\n        break;\r\n      }\r\n      case CharCode.s: {\r\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\r\n        if (nameStr == \"start\") return DecoratorKind.START;\r\n        break;\r\n      }\r\n      case CharCode.u: {\r\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\r\n        if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\r\n        break;\r\n      }\r\n    }\r\n  } else if (\r\n    name.kind == NodeKind.PROPERTYACCESS &&\r\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\r\n  ) {\r\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\r\n    assert(nameStr.length);\r\n    let propStr = (<PropertyAccessExpression>name).property.text;\r\n    assert(propStr.length);\r\n    // @operator.binary, @operator.prefix, @operator.postfix\r\n    if (nameStr == \"operator\") {\r\n      switch (propStr.charCodeAt(0)) {\r\n        case CharCode.b: {\r\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\r\n          break;\r\n        }\r\n        case CharCode.p: {\r\n          switch (propStr) {\r\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\r\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return DecoratorKind.CUSTOM;\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n  /** Symbol. */\r\n  symbol: string; // TODO: symbol\r\n  /** Whether quoted or not. */\r\n  isQuoted: bool;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS,\r\n  NONNULL\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode | null;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n\r\n  /** Gets the type arguments range for reporting. */\r\n  get typeArgumentsRange(): Range {\r\n    var typeArguments = this.typeArguments;\r\n    var numTypeArguments: i32;\r\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\r\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\r\n    }\r\n    return this.expression.range;\r\n  }\r\n\r\n  /** Gets the arguments range for reporting. */\r\n  get argumentsRange(): Range {\r\n    var args = this.arguments;\r\n    var numArguments = args.length;\r\n    if (numArguments) {\r\n      return Range.join(args[0].range, args[numArguments - 1].range);\r\n    }\r\n    return this.expression.range;\r\n  }\r\n}\r\n\r\n/** Represents a class expression using the 'class' keyword. */\r\nexport class ClassExpression extends Expression {\r\n  kind = NodeKind.CLASS;\r\n\r\n  /** Inline class declaration. */\r\n  declaration: ClassDeclaration;\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n  symbol = CommonSymbols.constructor;\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an `instanceof` expression. */\r\nexport class InstanceOfExpression extends Expression {\r\n  kind = NodeKind.INSTANCEOF;\r\n\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Type to test for. */\r\n  isType: CommonTypeNode;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n  symbol = CommonSymbols.null_;\r\n}\r\n\r\n/** Represents an object literal expression. */\r\nexport class ObjectLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.OBJECT;\r\n\r\n  /** Field names. */\r\n  names: IdentifierExpression[];\r\n  /** Field values. */\r\n  values: Expression[];\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n  symbol = CommonSymbols.super_;\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n  symbol = CommonSymbols.this_;\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n  symbol = CommonSymbols.true_;\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n  symbol = CommonSymbols.false_;\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Simple path (last part without extension). */\r\n  simplePath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n  /** Re-exported sources. */\r\n  exportPaths: Set<string> | null = null;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    var internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.internalPath = internalPath;\r\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\r\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** Represents an index signature declaration. */\r\nexport class IndexSignatureDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\r\n\r\n  /** Key type. */\r\n  keyType: TypeNode;\r\n  /** Value type. */\r\n  valueType: CommonTypeNode;\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Base class type being extended, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: TypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Local identifier. */\r\n  localName: IdentifierExpression;\r\n  /** Exported identifier. */\r\n  exportedName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members if a set of named exports, or `null` if a file export. */\r\n  members: ExportMember[] | null;\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n  /** Whether this is a declared export. */\r\n  isDeclare: bool;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Indicates the kind of an array function. */\r\nexport const enum ArrowKind {\r\n  /** Not an arrow function. */\r\n  NONE,\r\n  /** Parenthesized parameter list. */\r\n  ARROW_PARENTHESIZED,\r\n  /** Single parameter without parenthesis. */\r\n  ARROW_SINGLE\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n  /** Arrow function kind, if applicable. */\r\n  arrowKind: ArrowKind;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n\r\n  /** Clones this function declaration. */\r\n  clone(): FunctionDeclaration {\r\n    return Node.createFunctionDeclaration(\r\n      this.name,\r\n      this.typeParameters,\r\n      this.signature,\r\n      this.body,\r\n      this.decorators,\r\n      this.flags,\r\n      this.arrowKind,\r\n      this.range\r\n    );\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  foreignName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Finds the first decorator matching the specified kind. */\r\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      if (decorator.decoratorKind == kind) return decorator;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n/** Tests if the specified type node represents an omitted type. */\r\nexport function isTypeOmitted(type: CommonTypeNode): bool {\r\n  if (type.kind == NodeKind.TYPE) {\r\n    let name = (<TypeNode>type).name;\r\n    return !(name.next || name.identifier.text.length);\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget,\r\n  Program,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // vectors\r\n\r\n  /** A 128-bit vector. */\r\n  V128,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9,\r\n  /** Is a vector type. */\r\n  VECTOR = 1 << 10\r\n}\r\n\r\nconst v128_zero = new Uint8Array(16);\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Returns the closest int type representing this type. */\r\n  get intType(): Type {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return Type.i8;\r\n      case TypeKind.I16: return Type.i16;\r\n      case TypeKind.F32:\r\n      case TypeKind.I32: return Type.i32;\r\n      case TypeKind.F64:\r\n      case TypeKind.I64: return Type.i64;\r\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\r\n      case TypeKind.U8: return Type.u8;\r\n      case TypeKind.U16: return Type.u16;\r\n      case TypeKind.U32: return Type.u32;\r\n      case TypeKind.U64: return Type.u64;\r\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\r\n      case TypeKind.BOOL:\r\n      default: return Type.i32;\r\n    }\r\n  }\r\n\r\n  /** Gets this type's logarithmic alignment in memory. */\r\n  get alignLog2(): i32 {\r\n    return 31 - clz<i32>(this.byteSize);\r\n  }\r\n\r\n  /** Tests if this is a managed type that needs GC hooks. */\r\n  get isManaged(): bool {\r\n    var classReference = this.classReference;\r\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n  }\r\n\r\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\r\n  get isUnmanaged(): bool {\r\n    var classReference = this.classReference;\r\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\r\n    return ~0 >>> (targetType.size - size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.nonNullableType = this;\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\r\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\r\n          if (currentClass = this.classReference) {\r\n            if (targetClass = target.classReference) {\r\n              return currentClass.isAssignableTo(targetClass);\r\n            }\r\n          } else if (currentFunction = this.signatureReference) {\r\n            if (targetFunction = target.signatureReference) {\r\n              return currentFunction.isAssignableTo(targetFunction);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (\r\n            !signednessIsRelevant ||\r\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\r\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n          ) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      } else if (this.is(TypeFlags.VECTOR)) {\r\n        if (target.is(TypeFlags.VECTOR)) {\r\n          return this.size == target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\r\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\r\n    else if (target.is(TypeFlags.REFERENCE)) return false;\r\n    if (this.is(TypeFlags.INTEGER)) {\r\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\r\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n      );\r\n    }\r\n    return this.kind == target.kind;\r\n  }\r\n\r\n  /** Determines the common denominator type of two types, if there is any. */\r\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to a string. */\r\n  toString(): string {\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      let classReference = this.classReference;\r\n      if (classReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? classReference.internalName + \" | null\"\r\n          : classReference.internalName;\r\n      }\r\n      let signatureReference = this.signatureReference;\r\n      if (signatureReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? \"(\" + signatureReference.toString() + \") | null\"\r\n          : signatureReference.toString();\r\n      }\r\n      assert(false);\r\n    }\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: return \"usize\";\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      default: assert(false);\r\n      case TypeKind.VOID: return \"void\";\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.V128: return NativeType.V128;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n      case TypeKind.V128: return module.createV128(v128_zero);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      // same naming scheme as Binaryen\r\n      case TypeKind.I8:\r\n      case TypeKind.U8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U16:\r\n      case TypeKind.I32:\r\n      case TypeKind.U32:\r\n      case TypeKind.BOOL: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"j\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"d\";\r\n      case TypeKind.V128: return \"V\";\r\n      case TypeKind.VOID: return \"v\";\r\n      default: assert(false);\r\n    }\r\n    return \"i\";\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 128-bit vector. */\r\n  static readonly v128: Type = new Type(TypeKind.V128,\r\n    TypeFlags.VECTOR   |\r\n    TypeFlags.VALUE, 128\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  asFunctionTarget(program: Program): FunctionTarget {\r\n    var target = this.cachedFunctionTarget;\r\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\r\n    else assert(target.program == program);\r\n    return target;\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getDefaultParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    sb.push(returnType.toSignatureString());\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    return \"FUNCSIG$\" + sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      sb.push(\"this: \");\r\n      assert(!thisType.signatureReference);\r\n      sb.push(thisType.toString());\r\n      index = 1;\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getDefaultParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached default parameter names used where names are unknown.\r\nvar cachedDefaultParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached default parameter name for the specified index. */\r\nexport function getDefaultParameterName(index: i32): string {\r\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\r\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\r\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedDefaultParameterNames[index - 1];\r\n}\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport enum IdentifierHandling {\r\n  DEFAULT,\r\n  PREFER,\r\n  ALWAYS\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  assert(text.length);\r\n  switch (text.charCodeAt(0)) {\r\n    case CharCode.a: {\r\n      switch (text) {\r\n        case \"abstract\": return Token.ABSTRACT;\r\n        case \"as\": return Token.AS;\r\n        case \"async\": return Token.ASYNC;\r\n        case \"await\": return Token.AWAIT;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.b: {\r\n      switch (text) {\r\n        case \"break\": return Token.BREAK;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.c: {\r\n      switch (text) {\r\n        case \"case\": return Token.CASE;\r\n        case \"catch\": return Token.CATCH;\r\n        case \"class\": return Token.CLASS;\r\n        case \"continue\": return Token.CONTINUE;\r\n        case \"const\": return Token.CONST;\r\n        case \"constructor\": return Token.CONSTRUCTOR;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.d: {\r\n      switch (text) {\r\n        case \"debugger\": return Token.DEBUGGER;\r\n        case \"declare\": return Token.DECLARE;\r\n        case \"default\": return Token.DEFAULT;\r\n        case \"delete\": return Token.DELETE;\r\n        case \"do\": return Token.DO;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.e: {\r\n      switch (text) {\r\n        case \"else\": return Token.ELSE;\r\n        case \"enum\": return Token.ENUM;\r\n        case \"export\": return Token.EXPORT;\r\n        case \"extends\": return Token.EXTENDS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.f: {\r\n      switch (text) {\r\n        case \"false\": return Token.FALSE;\r\n        case \"finally\": return Token.FINALLY;\r\n        case \"for\": return Token.FOR;\r\n        case \"from\": return Token.FROM;\r\n        case \"function\": return Token.FUNCTION;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.g: {\r\n      switch (text) {\r\n        case \"get\": return Token.GET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.i: {\r\n      switch (text) {\r\n        case \"if\": return Token.IF;\r\n        case \"implements\": return Token.IMPLEMENTS;\r\n        case \"import\": return Token.IMPORT;\r\n        case \"in\": return Token.IN;\r\n        case \"instanceof\": return Token.INSTANCEOF;\r\n        case \"interface\": return Token.INTERFACE;\r\n        case \"is\": return Token.IS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.k: {\r\n      switch (text) {\r\n        case \"keyof\": return Token.KEYOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.l: {\r\n      switch (text) {\r\n        case \"let\": return Token.LET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.m: {\r\n      switch (text) {\r\n        case \"module\": return Token.MODULE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.n: {\r\n      switch (text) {\r\n        case \"namespace\": return Token.NAMESPACE;\r\n        case \"new\": return Token.NEW;\r\n        case \"null\": return Token.NULL;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.o: {\r\n      switch (text) {\r\n        case \"of\": return Token.OF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.p: {\r\n      switch (text) {\r\n        case \"package\": return Token.PACKAGE;\r\n        case \"private\": return Token.PRIVATE;\r\n        case \"protected\": return Token.PROTECTED;\r\n        case \"public\": return Token.PUBLIC;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.r: {\r\n      switch (text) {\r\n        case \"readonly\": return Token.READONLY;\r\n        case \"return\": return Token.RETURN;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.s: {\r\n      switch (text) {\r\n        case \"set\": return Token.SET;\r\n        case \"static\": return Token.STATIC;\r\n        case \"super\": return Token.SUPER;\r\n        case \"switch\": return Token.SWITCH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.t: {\r\n      switch (text) {\r\n        case \"this\": return Token.THIS;\r\n        case \"throw\": return Token.THROW;\r\n        case \"true\": return Token.TRUE;\r\n        case \"try\": return Token.TRY;\r\n        case \"type\": return Token.TYPE;\r\n        case \"typeof\": return Token.TYPEOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.v: {\r\n      switch (text) {\r\n        case \"var\": return Token.VAR;\r\n        case \"void\": return Token.VOID;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.w: {\r\n      switch (text) {\r\n        case \"while\": return Token.WHILE;\r\n        case \"with\": return Token.WITH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.y: {\r\n      switch (text) {\r\n        case \"yield\": return Token.YIELD;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return Token.INVALID;\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.FOR:\r\n    case Token.GET:\r\n    case Token.INSTANCEOF:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE:\r\n    case Token.VOID: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(identifierHandling);\r\n  }\r\n\r\n  private unsafeNext(\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxTokenLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (!(\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          )) break;\r\n          // otherwise fall-through\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (chr == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (isDecimalDigit(chr)) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              chr == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < this.end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (chr == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (chr == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                chr = text.charCodeAt(this.pos);\r\n                if (chr == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (chr == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken !== Token.INVALID &&\r\n                identifierHandling !== IdentifierHandling.ALWAYS &&\r\n                !(\r\n                  identifierHandling === IdentifierHandling.PREFER &&\r\n                  tokenIsAlsoIdentifier(keywordToken)\r\n                )\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\r\n          if (isLineBreak(text.charCodeAt(pos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\r\n    return this.skip(Token.IDENTIFIER, identifierHandling);\r\n  }\r\n\r\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (!escaped && c == CharCode.SLASH) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (this.pos + 1 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.x:\r\n        case CharCode.X:\r\n        case CharCode.b:\r\n        case CharCode.B:\r\n        case CharCode.o:\r\n        case CharCode.O: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) {\r\n        return false;\r\n      }\r\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\r\n      // does not validate separator placement (this is done in readXYInteger)\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.x:\r\n        case CharCode.X: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.b:\r\n        case CharCode.B: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.o:\r\n        case CharCode.O: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_4 = i64_new(4);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = (value << 4) + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = (value << 4) + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(10 + c - CharCode.A)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = (value << 4) + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(10 + c - CharCode.a)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_10 = i64_new(10);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_3 = i64_new(3);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = (value << 3) + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_shl(value, i64_3),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_1 = i64_new(1);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode._0) {\r\n        // value = (value << 1);\r\n        value = i64_shl(value, i64_1);\r\n      } else if (c == CharCode._1) {\r\n        // value = (value << 1) + 1;\r\n        value = i64_add(\r\n          i64_shl(value, i64_1),\r\n          i64_1\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    // TODO: numeric separators (parseFloat can't handle these)\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.e || c == CharCode.E) {\r\n        if (\r\n          ++this.pos < this.end &&\r\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = (value << 4) + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = (value << 4) + c + (10 - CharCode.A);\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = (value << 4) + c + (10 - CharCode.a);\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        ((value32 - 65536) >>> 10) + 0xD800,\r\n        ((value32 - 65536) & 1023) + 0xDC00\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\r\n * Resolve infrastructure to obtain types and elements.\r\n * @module resolver\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticEmitter,\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Program,\r\n  ElementKind,\r\n  OperatorKind,\r\n  Element,\r\n  Class,\r\n  ClassPrototype,\r\n  Function,\r\n  FunctionPrototype,\r\n  VariableLikeElement,\r\n  Property,\r\n  PropertyPrototype,\r\n  Field,\r\n  FieldPrototype,\r\n  Global,\r\n  TypeDefinition\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  Flow\r\n} from \"./flow\";\r\n\r\nimport {\r\n  SignatureNode,\r\n  ParameterKind,\r\n  CommonTypeNode,\r\n  NodeKind,\r\n  TypeNode,\r\n  TypeName,\r\n  TypeParameterNode,\r\n  Node,\r\n  Range,\r\n  IdentifierExpression,\r\n  CallExpression,\r\n  ElementAccessExpression,\r\n  PropertyAccessExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  AssertionExpression,\r\n  Expression,\r\n  IntegerLiteralExpression,\r\n  UnaryPrefixExpression,\r\n  UnaryPostfixExpression,\r\n  AssertionKind,\r\n  BinaryExpression,\r\n  ThisExpression,\r\n  SuperExpression,\r\n  isTypeOmitted\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n  typesToString,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  CommonSymbols\r\n} from \"./common\";\r\n\r\nimport {\r\n  makeMap,\r\n  isPowerOf2\r\n} from \"./util\";\r\n\r\nimport {\r\n  Token\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  BuiltinSymbols\r\n} from \"./builtins\";\r\n\r\n/** Indicates whether errors are reported or not. */\r\nexport enum ReportMode {\r\n  /** Report errors. */\r\n  REPORT,\r\n  /** Swallow errors. */\r\n  SWALLOW\r\n}\r\n\r\n/** Provides tools to resolve types and expressions. */\r\nexport class Resolver extends DiagnosticEmitter {\r\n\r\n  /** The program this resolver belongs to. */\r\n  program: Program;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  currentThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  currentElementExpression : Expression | null = null;\r\n\r\n  /** Constructs the resolver for the specified program. */\r\n  constructor(\r\n    /** The program to construct a resolver for. */\r\n    program: Program\r\n  ) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    /** The type to resolve. */\r\n    node: CommonTypeNode,\r\n    /** Relative context. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n\r\n    // handle signature\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let explicitThisType = (<SignatureNode>node).explicitThisType;\r\n      let thisType: Type | null = null;\r\n      if (explicitThisType) {\r\n        thisType = this.resolveType(\r\n          explicitThisType,\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!thisType) return null;\r\n      }\r\n      let parameterNodes = (<SignatureNode>node).parameters;\r\n      let numParameters = parameterNodes.length;\r\n      let parameterTypes = new Array<Type>(numParameters);\r\n      let parameterNames = new Array<string>(numParameters);\r\n      let requiredParameters = 0;\r\n      let hasRest = false;\r\n      for (let i = 0; i < numParameters; ++i) {\r\n        let parameterNode = parameterNodes[i];\r\n        switch (parameterNode.parameterKind) {\r\n          case ParameterKind.DEFAULT: {\r\n            requiredParameters = i + 1;\r\n            break;\r\n          }\r\n          case ParameterKind.REST: {\r\n            assert(i == numParameters);\r\n            hasRest = true;\r\n            break;\r\n          }\r\n        }\r\n        let parameterTypeNode = parameterNode.type;\r\n        if (isTypeOmitted(parameterTypeNode)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              parameterTypeNode.range\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        let parameterType = this.resolveType(\r\n          parameterTypeNode,\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!parameterType) return null;\r\n        parameterTypes[i] = parameterType;\r\n        parameterNames[i] = parameterNode.name.text;\r\n      }\r\n      let returnTypeNode = (<SignatureNode>node).returnType;\r\n      if (isTypeOmitted(returnTypeNode)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnTypeNode.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let returnType: Type | null;\r\n      if (returnTypeNode) {\r\n        returnType = this.resolveType(\r\n          returnTypeNode,\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Type.void;\r\n      }\r\n      let signature = new Signature(parameterTypes, returnType, thisType);\r\n      signature.parameterNames = parameterNames;\r\n      signature.requiredParameters = requiredParameters;\r\n      signature.hasRest = hasRest;\r\n      return node.isNullable ? signature.type.asNullable() : signature.type;\r\n    }\r\n\r\n    // now dealing with TypeNode\r\n    assert(node.kind == NodeKind.TYPE);\r\n    var typeNode = <TypeNode>node;\r\n    var typeName = typeNode.name;\r\n    var typeArgumentNodes = typeNode.typeArguments;\r\n    var possiblyPlaceholder = !typeName.next;\r\n\r\n    // look up in contextual type arguments if possibly a placeholder\r\n    if (possiblyPlaceholder) {\r\n      if (contextualTypeArguments && contextualTypeArguments.has(typeName.identifier.text)) {\r\n        let type = contextualTypeArguments.get(typeName.identifier.text)!;\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, type.toString()\r\n            );\r\n          }\r\n        }\r\n        if (node.isNullable) {\r\n          if (!type.is(TypeFlags.REFERENCE)) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n                node.range, type.toString()\r\n              );\r\n            }\r\n          }\r\n          return type.asNullable();\r\n        }\r\n        return type;\r\n      }\r\n    }\r\n\r\n    // look up in context\r\n    var element = this.resolveTypeName(typeName, context, reportMode);\r\n    if (!element) return null;\r\n\r\n    // use shadow type if present (i.e. namespace sharing a type)\r\n    if (element.shadowType) {\r\n      element = element.shadowType;\r\n\r\n    } else {\r\n      // handle enums (become i32)\r\n      if (element.kind == ElementKind.ENUM) {\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, element.internalName\r\n            );\r\n          }\r\n        }\r\n        if (node.isNullable) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n              node.range, element.name\r\n            );\r\n          }\r\n        }\r\n        return Type.i32;\r\n      }\r\n\r\n      // handle classes\r\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let instance = this.resolveClassInclTypeArguments(\r\n          <ClassPrototype>element,\r\n          typeArgumentNodes,\r\n          context,\r\n          makeMap<string,Type>(contextualTypeArguments), // don't inherit\r\n          node\r\n        ); // reports\r\n        if (!instance) return null;\r\n        return node.isNullable ? instance.type.asNullable() : instance.type;\r\n      }\r\n    }\r\n\r\n    // handle type definitions\r\n    if (element.kind == ElementKind.TYPEDEFINITION) {\r\n\r\n      // shortcut already resolved (mostly builtins)\r\n      if (element.is(CommonFlags.RESOLVED)) {\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, element.internalName\r\n            );\r\n          }\r\n        }\r\n        let type = (<TypeDefinition>element).type;\r\n        if (node.isNullable) {\r\n          if (!type.is(TypeFlags.REFERENCE)) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n                typeNode.name.range, typeName.identifier.text\r\n              );\r\n            }\r\n          } else {\r\n            return type.asNullable();\r\n          }\r\n        }\r\n        return type;\r\n      }\r\n\r\n      // handle special native type\r\n      if (possiblyPlaceholder && typeName.identifier.text == CommonSymbols.native) {\r\n        if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        let typeArgument = this.resolveType(\r\n          typeArgumentNodes[0],\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!typeArgument) return null;\r\n        switch (typeArgument.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: return Type.i32;\r\n          case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\r\n          case TypeKind.I64: return Type.i64;\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: return Type.u32;\r\n          case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\r\n          case TypeKind.U64: return Type.u64;\r\n          case TypeKind.F32: return Type.f32;\r\n          case TypeKind.F64: return Type.f64;\r\n          case TypeKind.V128: return Type.v128;\r\n          case TypeKind.VOID: return Type.void;\r\n          default: assert(false);\r\n        }\r\n      }\r\n\r\n      // resolve normally\r\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\r\n      let typeArguments: Type[] | null = null;\r\n      if (typeParameterNodes) {\r\n        typeArguments = this.resolveTypeArguments(\r\n          typeParameterNodes,\r\n          typeArgumentNodes,\r\n          context,\r\n          contextualTypeArguments = makeMap(contextualTypeArguments), // inherit\r\n          node,\r\n          reportMode\r\n        );\r\n        if (!typeArguments) return null;\r\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          typeNode.range, typeName.identifier.text\r\n        );\r\n        // recoverable\r\n      }\r\n      let type = this.resolveType(\r\n        (<TypeDefinition>element).typeNode,\r\n        element,\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!type) return null;\r\n      if (node.isNullable) {\r\n        if (!type.is(TypeFlags.REFERENCE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n              typeNode.name.range, typeName.identifier.text\r\n            );\r\n          }\r\n        } else {\r\n          return type.asNullable();\r\n        }\r\n      }\r\n      return type;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, typeName.identifier.text\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a type name to the program element it refers to. */\r\n  resolveTypeName(\r\n    /** The type name to resolve. */\r\n    typeName: TypeName,\r\n    /** Relative context. */\r\n    context: Element,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var element = context.lookup(typeName.identifier.text);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Cannot_find_name_0,\r\n          typeName.range, typeName.identifier.text\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var prev = typeName;\r\n    var next = typeName.next;\r\n    while (next) {\r\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            next.range, next.identifier.text, prev.identifier.text\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      prev = next;\r\n      next = next.next;\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    /** Actual type parameter nodes. */\r\n    typeParameters: TypeParameterNode[],\r\n    /** Type arguments provided. */\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    /** Relative context. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    /** Alternative report node in case of empty type arguments. */\r\n    alternativeReportNode: Node | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type[] | null {\r\n    var minParameterCount = 0;\r\n    var maxParameterCount = 0;\r\n    for (let i = 0; i < typeParameters.length; ++i) {\r\n      if (!typeParameters[i].defaultType) ++minParameterCount;\r\n      ++maxParameterCount;\r\n    }\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        argumentCount\r\n          ? Range.join(\r\n              (<TypeNode[]>typeArgumentNodes)[0].range,\r\n              (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n            )\r\n          : assert(alternativeReportNode).range,\r\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\r\n        argumentCount.toString(10)\r\n      );\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(maxParameterCount);\r\n    for (let i = 0; i < maxParameterCount; ++i) {\r\n      let type = i < argumentCount\r\n        ? this.resolveType( // reports\r\n            (<TypeNode[]>typeArgumentNodes)[i],\r\n            context,\r\n            contextualTypeArguments,\r\n            reportMode\r\n          )\r\n        : this.resolveType( // reports\r\n            assert(typeParameters[i].defaultType),\r\n            context,\r\n            contextualTypeArguments,\r\n            reportMode\r\n          );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the program element it refers to. */\r\n  resolveIdentifier(\r\n    /** The expression to resolve. */\r\n    identifier: IdentifierExpression,\r\n    /** Optional flow to search for scoped locals. */\r\n    flow: Flow | null,\r\n    /** Optional context to search. */\r\n    context: Element | null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var name = identifier.text;\r\n    var element: Element | null;\r\n    if (flow) {\r\n      if (element = flow.lookup(name)) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return element;\r\n      }\r\n    }\r\n    if (context) {\r\n      if (element = context.lookup(name)) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return element;\r\n      }\r\n    }\r\n    if (element = this.program.lookupGlobal(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        identifier.range, name\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a lazily compiled global, i.e. a static class field. */\r\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\r\n    if (global.is(CommonFlags.RESOLVED)) return true;\r\n    var typeNode = global.typeNode;\r\n    if (!typeNode) return false;\r\n    var type = this.resolveType( // reports\r\n      typeNode,\r\n      global.parent,\r\n      null,\r\n      reportMode\r\n    );\r\n    if (!type) return false;\r\n    global.setType(type);\r\n    return true;\r\n  }\r\n\r\n  /** Resolves a property access expression to the program element it refers to. */\r\n  resolvePropertyAccessExpression(\r\n    /** The expression to resolve. */\r\n    propertyAccess: PropertyAccessExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = propertyAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\r\n    if (!target) return null;\r\n    var propertyName = propertyAccess.property.text;\r\n\r\n    // Resolve variable-likes to their class type first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\r\n        let classReference = type.classReference;\r\n        if (!classReference) {\r\n          let typeClasses = this.program.typeClasses;\r\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\r\n            classReference = typeClasses.get(type.kind)!;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\r\n        let getterInstance = this.resolveFunction( // reports\r\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n        if (!getterInstance) return null;\r\n        let classReference = getterInstance.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance\r\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\r\n        let classReference = getterInstance.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: { // property access on element access?\r\n        let elementExpression = this.currentElementExpression;\r\n        if (elementExpression) {\r\n          // let arrayType = this.program.determineBuiltinArrayType(<Class>target);\r\n          // if (!arrayType) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                elementExpression.range, (<Class>target).internalName\r\n              );\r\n              return null;\r\n            }\r\n            let arrayType = indexedGet.signature.returnType;\r\n          // }\r\n          if (!(target = arrayType.classReference)) {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, arrayType.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\r\n        let shadowType = target.shadowType;\r\n        if (shadowType) {\r\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\r\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\r\n            if (resolvedType) shadowType.setType(resolvedType);\r\n          }\r\n          let classReference = shadowType.type.classReference;\r\n          if (classReference) target = classReference.prototype;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          if (members && members.has(propertyName)) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = null;\r\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        if (members && members.has(propertyName)) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = null;\r\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an element access expression to the program element it refers to. */\r\n  resolveElementAccessExpression(\r\n    /** The expression to resolve. */\r\n    elementAccess: ElementAccessExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = elementAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (target = type.classReference) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        // let arrayType = this.program.determineBuiltinArrayType(<Class>target);\r\n        // if (!arrayType) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                elementAccess.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return null;\r\n          }\r\n          let arrayType = indexedGet.signature.returnType;\r\n        // }\r\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\r\n          if (target = arrayType.classReference) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = elementAccess.elementExpression;\r\n            return target;\r\n          }\r\n          return null;\r\n        }\r\n        this.currentThisExpression = targetExpression;\r\n        this.currentElementExpression = elementAccess.elementExpression;\r\n        return target;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        targetExpression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Determines the final type of an integer literal given the specified contextual type. */\r\n  determineIntegerLiteralType(\r\n    /** Integer literal value. */\r\n    intValue: I64,\r\n    /** Current contextual type. */\r\n    contextualType: Type\r\n  ): Type {\r\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\r\n      // compile to contextualType if matching\r\n      switch (contextualType.kind) {\r\n        case TypeKind.I8: {\r\n          if (i64_is_i8(intValue)) return Type.i8;\r\n          break;\r\n        }\r\n        case TypeKind.U8: {\r\n          if (i64_is_u8(intValue)) return Type.u8;\r\n          break;\r\n        }\r\n        case TypeKind.I16: {\r\n          if (i64_is_i16(intValue)) return Type.i16;\r\n          break;\r\n        }\r\n        case TypeKind.U16: {\r\n          if (i64_is_u16(intValue)) return Type.u16;\r\n          break;\r\n        }\r\n        case TypeKind.I32: {\r\n          if (i64_is_i32(intValue)) return Type.i32;\r\n          break;\r\n        }\r\n        case TypeKind.U32: {\r\n          if (i64_is_u32(intValue)) return Type.u32;\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: {\r\n          if (i64_is_bool(intValue)) return Type.bool;\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_i32(intValue)) return Type.isize32;\r\n            break;\r\n          }\r\n          return Type.isize64;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_u32(intValue)) return Type.usize32;\r\n            break;\r\n          }\r\n          return Type.usize64;\r\n        }\r\n        case TypeKind.I64: return Type.i64;\r\n        case TypeKind.U64: return Type.u64;\r\n        case TypeKind.F32: return Type.f32;\r\n        case TypeKind.F64: return Type.f64;\r\n        case TypeKind.VOID: break; // best fitting below\r\n        default: assert(false);\r\n      }\r\n    }\r\n    // otherwise compile to best fitting native type\r\n    if (i64_is_i32(intValue)) return Type.i32;\r\n    if (i64_is_u32(intValue)) return Type.u32;\r\n    return Type.i64;\r\n  }\r\n\r\n  /** Resolves any expression to the program element it refers to. */\r\n  resolveExpression(\r\n    /** The expression to resolve. */\r\n    expression: Expression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) { // simply skip\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        return this.resolveAssertionExpression(\r\n          <AssertionExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        return this.resolveUnaryPrefixExpression(\r\n          <UnaryPrefixExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        return this.resolveUnaryPostfixExpression(\r\n          <UnaryPostfixExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.BINARY: {\r\n        return this.resolveBinaryExpression(\r\n          <BinaryExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.THIS: {\r\n        return this.resolveThisExpression(\r\n          <ThisExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.SUPER: {\r\n        return this.resolveSuperExpression(\r\n          <SuperExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(\r\n          <IdentifierExpression>expression,\r\n          flow, flow.actualFunction, reportMode\r\n        );\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        return this.resolveLiteralExpression(\r\n          <LiteralExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccessExpression(\r\n          <ElementAccessExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        return this.resolveCallExpression(\r\n          <CallExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      // TODO: everything else\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an assertion expression to the program element it refers to. */\r\n  resolveAssertionExpression(\r\n    /** The expression to resolve. */\r\n    expression: AssertionExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (expression.assertionKind == AssertionKind.NONNULL) {\r\n      return this.resolveExpression(\r\n        expression.expression,\r\n        flow,\r\n        contextualType,\r\n        reportMode\r\n      );\r\n    }\r\n    var type = this.resolveType(\r\n      assert(expression.toType), // must be set if not NONNULL\r\n      flow.actualFunction,\r\n      flow.contextualTypeArguments,\r\n      reportMode\r\n    );\r\n    if (!type) return null;\r\n    var element: Element | null = type.classReference;\r\n    if (!element) {\r\n      let signature = type.signatureReference;\r\n      if (!signature) return null;\r\n      element = signature.asFunctionTarget(this.program);\r\n    }\r\n    this.currentThisExpression = null;\r\n    this.currentElementExpression = null;\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an unary prefix expression to the program element it refers to. */\r\n  resolveUnaryPrefixExpression(\r\n    /** The expression to resolve. */\r\n    expression: UnaryPrefixExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var operand = expression.operand;\r\n    // TODO: operator overloads\r\n    switch (expression.operator) {\r\n      case Token.MINUS: {\r\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\r\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\r\n          let type = this.determineIntegerLiteralType(\r\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\r\n            contextualType\r\n          );\r\n          let typeClasses = this.program.typeClasses;\r\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\r\n        }\r\n        return this.resolveExpression(\r\n          operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      case Token.PLUS:\r\n      case Token.PLUS_PLUS:\r\n      case Token.MINUS_MINUS: {\r\n        return this.resolveExpression(\r\n          expression.operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(TypeKind.BOOL) ? typeClasses.get(TypeKind.BOOL)! : null;\r\n      }\r\n      case Token.TILDE: {\r\n        let resolvedOperand = this.resolveExpression(\r\n          expression.operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n        if (!resolvedOperand) return null;\r\n        // TODO\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an unary postfix expression to the program element it refers to. */\r\n  resolveUnaryPostfixExpression(\r\n    /** The expression to resolve. */\r\n    expression: UnaryPostfixExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    // TODO: operator overloads\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS:\r\n      case Token.MINUS_MINUS: {\r\n        return this.resolveExpression(\r\n          expression.operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a binary expression to the program element it refers to. */\r\n  resolveBinaryExpression(\r\n    /** The expression to resolve. */\r\n    expression: BinaryExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    // TODO\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a this expression to the program element it refers to. */\r\n  resolveThisExpression(\r\n    /** The expression to resolve. */\r\n    expression: ThisExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      let thisLocal = flow.lookupLocal(CommonSymbols.this_);\r\n      if (thisLocal) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return thisLocal;\r\n      }\r\n    }\r\n    var parent = flow.actualFunction.parent;\r\n    if (parent) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return parent;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a super expression to the program element it refers to. */\r\n  resolveSuperExpression(\r\n    /** The expression to resolve. */\r\n    expression: SuperExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      let superLocal = flow.lookupLocal(CommonSymbols.super_);\r\n      if (superLocal) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return superLocal;\r\n      }\r\n    }\r\n    var parent: Element | null = flow.actualFunction.parent;\r\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return parent;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a literal expression to the program element it refers to. */\r\n  resolveLiteralExpression(\r\n    /** The expression to resolve. */\r\n    expression: LiteralExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.INTEGER: {\r\n        this.currentThisExpression = expression;\r\n        this.currentElementExpression = null;\r\n        let literalType = this.determineIntegerLiteralType(\r\n          (<IntegerLiteralExpression>expression).value,\r\n          contextualType\r\n        );\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        this.currentThisExpression = expression;\r\n        this.currentElementExpression = null;\r\n        let literalType = contextualType == Type.f32 ? Type.f32 : Type.f64;\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\r\n      }\r\n      case LiteralKind.STRING: {\r\n        this.currentThisExpression = expression;\r\n        this.currentElementExpression = null;\r\n        return this.program.stringInstance;\r\n      }\r\n      // TODO\r\n      // case LiteralKind.ARRAY:\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a call expression to the program element it refers to. */\r\n  resolveCallExpression(\r\n    /** The expression to resolve. */\r\n    expression: CallExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = expression.expression;\r\n    var target = this.resolveExpression( // reports\r\n      targetExpression,\r\n      flow,\r\n      contextualType,\r\n      reportMode\r\n    );\r\n    if (!target) return null;\r\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n      // `unchecked(expr: *): *` is special\r\n      if (\r\n        (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\r\n        expression.arguments.length > 0\r\n      ) {\r\n        return this.resolveExpression(expression.arguments[0], flow, contextualType, reportMode);\r\n      }\r\n      // otherwise resolve normally\r\n      let instance = this.resolveFunctionInclTypeArguments(\r\n        <FunctionPrototype>target,\r\n        expression.typeArguments,\r\n        flow.actualFunction,\r\n        makeMap(flow.contextualTypeArguments), // don't inherit\r\n        expression,\r\n        reportMode\r\n      );\r\n      if (!instance) return null;\r\n      let returnType = instance.signature.returnType;\r\n      let classType = returnType.classReference;\r\n      if (classType) {\r\n        // reuse resolvedThisExpression (might be property access)\r\n        // reuse resolvedElementExpression (might be element access)\r\n        return classType;\r\n      } else {\r\n        let signature = returnType.signatureReference;\r\n        if (signature) {\r\n          let functionTarget = signature.asFunctionTarget(this.program);\r\n          // reuse resolvedThisExpression (might be property access)\r\n          // reuse resolvedElementExpression (might be element access)\r\n          return functionTarget;\r\n        }\r\n      }\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n          targetExpression.range, target.internalName\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a function prototype using the specified concrete type arguments. */\r\n  resolveFunction(\r\n    /** The prototype of the function. */\r\n    prototype: FunctionPrototype,\r\n    /** Concrete type arguments. */\r\n    typeArguments: Type[] | null,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\r\n      ? prototype.parent.parent\r\n      : prototype.parent;\r\n    var classInstance: Class | null = null; // if an instance method\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Instance method prototypes are pre-bound to their concrete class as their parent\r\n    if (prototype.is(CommonFlags.INSTANCE)) {\r\n      assert(actualParent.kind == ElementKind.CLASS);\r\n      classInstance = <Class>actualParent;\r\n\r\n      // check if this exact concrete class and function combination is known already\r\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\r\n      if (resolvedInstance) return resolvedInstance;\r\n\r\n      // inherit class specific type arguments\r\n      let classTypeArguments = classInstance.typeArguments;\r\n      if (classTypeArguments) {\r\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\r\n        let numClassTypeArguments = classTypeParameters.length;\r\n        assert(numClassTypeArguments == classTypeParameters.length);\r\n        for (let i = 0; i < numClassTypeArguments; ++i) {\r\n          let classTypeParameterName = classTypeParameters[i].name.text;\r\n          if (!contextualTypeArguments.has(classTypeParameterName)) {\r\n            contextualTypeArguments.set(\r\n              classTypeParameterName,\r\n              classTypeArguments[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\r\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\r\n      if (resolvedInstance) return resolvedInstance;\r\n    }\r\n\r\n    // override whatever is contextual with actual function type arguments\r\n    var signatureNode = prototype.signatureNode;\r\n    var typeParameterNodes = prototype.typeParameterNodes;\r\n    var numFunctionTypeArguments: i32;\r\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\r\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\r\n          typeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\r\n    }\r\n\r\n    // resolve `this` type if applicable\r\n    var thisType: Type | null = null;\r\n    var explicitThisType = signatureNode.explicitThisType;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        prototype.parent, // relative to function\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!thisType) return null;\r\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\r\n    } else if (classInstance) {\r\n      thisType = classInstance.type;\r\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\r\n    }\r\n\r\n    // resolve parameter types\r\n    var signatureParameters = signatureNode.parameters;\r\n    var numSignatureParameters = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(numSignatureParameters);\r\n    var parameterNames = new Array<string>(numSignatureParameters);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < numSignatureParameters; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = parameterDeclaration.type;\r\n      if (isTypeOmitted(typeNode)) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          typeNode.range\r\n        );\r\n        return null;\r\n      }\r\n      let parameterType = this.resolveType(\r\n        typeNode,\r\n        prototype.parent, // relative to function\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    // resolve return type\r\n    var returnType: Type;\r\n    if (prototype.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = signatureNode.returnType;\r\n      if (isTypeOmitted(typeNode)) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          typeNode.range\r\n        );\r\n        return null;\r\n      }\r\n      let type = this.resolveType(\r\n        typeNode,\r\n        prototype.parent, // relative to function\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var nameInclTypeParameters = prototype.name;\r\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\r\n    var instance = new Function(\r\n      nameInclTypeParameters,\r\n      prototype,\r\n      signature,\r\n      contextualTypeArguments\r\n    );\r\n    prototype.setResolvedInstance(instanceKey, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\r\n  resolveFunctionInclTypeArguments(\r\n    /** The prototype of the function. */\r\n    prototype: FunctionPrototype,\r\n    /** Type arguments provided. */\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    /** Relative context. Type arguments are resolved from here. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type>,\r\n    /** The node to use when reporting intermediate errors. */\r\n    reportNode: Node,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\r\n      ? prototype.parent.parent\r\n      : prototype.parent;\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n\r\n      // If this is an instance method, first apply the class's type arguments\r\n      if (prototype.is(CommonFlags.INSTANCE)) {\r\n        assert(actualParent.kind == ElementKind.CLASS);\r\n        let classTypeArguments = (<Class>actualParent).typeArguments;\r\n        if (classTypeArguments) {\r\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\r\n          let numClassTypeArguments = classTypeArguments.length;\r\n          assert(numClassTypeArguments == typeParameterNodes.length);\r\n          for (let i = 0; i < numClassTypeArguments; ++i) {\r\n            contextualTypeArguments.set(\r\n              typeParameterNodes[i].name.text,\r\n              classTypeArguments[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.typeParameterNodes),\r\n        typeArgumentNodes,\r\n        context,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveFunction(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n\r\n  /** Resolves a class prototype using the specified concrete type arguments. */\r\n  resolveClass(\r\n    /** The prototype of the class. */\r\n    prototype: ClassPrototype,\r\n    /** Concrete type arguments. */\r\n    typeArguments: Type[] | null,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Check if this exact instance has already been resolved\r\n    var instance = prototype.getResolvedInstance(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // Insert contextual type arguments for this operation. Internally, this method is always\r\n    // called with matching type parameter / argument counts.\r\n    if (typeArguments) {\r\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\r\n      let numTypeParameters = typeParameterNodes.length;\r\n      let numTypeArguments = typeArguments.length;\r\n      assert(numTypeArguments == numTypeParameters);\r\n      for (let i = 0; i < numTypeArguments; ++i) {\r\n        contextualTypeArguments.set(typeParameterNodes[i].name.text, typeArguments[i]);\r\n      }\r\n    } else {\r\n      let typeParameterNodes = prototype.typeParameterNodes;\r\n      assert(!(typeParameterNodes && typeParameterNodes.length));\r\n    }\r\n\r\n    // Resolve base class if applicable\r\n    var basePrototype = prototype.basePrototype;\r\n    var baseClass: Class | null = null;\r\n    if (basePrototype) {\r\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\r\n      baseClass = this.resolveClassInclTypeArguments(\r\n        basePrototype,\r\n        extendsNode.typeArguments,\r\n        prototype.parent, // relative to derived class\r\n        makeMap(contextualTypeArguments), // don't inherit\r\n        extendsNode,\r\n        reportMode\r\n      );\r\n      if (!baseClass) return null;\r\n    }\r\n\r\n    // Construct the instance and remember that it has been resolved already\r\n    var nameInclTypeParamters = prototype.name;\r\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\r\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    prototype.setResolvedInstance(instanceKey, instance);\r\n\r\n    // Inherit base class members and set up the initial memory offset for own fields\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      let baseMembers = baseClass.members;\r\n      if (baseMembers) {\r\n        let instanceMembers = instance.members;\r\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\r\n        for (let [baseMemberName, baseMember] of baseMembers) {\r\n          instanceMembers.set(baseMemberName, baseMember);\r\n        }\r\n      }\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n    }\r\n\r\n    // Resolve instance members\r\n    var instanceMemberPrototypes = prototype.instanceMembers;\r\n    if (instanceMemberPrototypes) {\r\n      for (let member of instanceMemberPrototypes.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            let instanceMembers = instance.members;\r\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\r\n            else if (instanceMembers.has(member.name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                (<FieldPrototype>member).identifierNode.range,\r\n                member.name\r\n              );\r\n              break;\r\n            }\r\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\r\n            let fieldType: Type | null = null;\r\n            // TODO: handle duplicate non-private fields specifically?\r\n            if (!fieldTypeNode) {\r\n              if (baseClass) {\r\n                let baseMembers = baseClass.members;\r\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\r\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\r\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\r\n                    assert(baseField.kind == ElementKind.FIELD);\r\n                    fieldType = (<Field>baseField).type;\r\n                  }\r\n                }\r\n              }\r\n              if (!fieldType) {\r\n                if (reportMode == ReportMode.REPORT) {\r\n                  this.error(\r\n                    DiagnosticCode.Type_expected,\r\n                    (<FieldPrototype>member).identifierNode.range.atEnd\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n              fieldType = this.resolveType(\r\n                fieldTypeNode,\r\n                prototype.parent, // relative to class\r\n                instance.contextualTypeArguments,\r\n                reportMode\r\n              );\r\n            }\r\n            if (!fieldType) break; // did report above\r\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\r\n            assert(isPowerOf2(fieldType.byteSize));\r\n            let mask = fieldType.byteSize - 1;\r\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\r\n            fieldInstance.memoryOffset = memoryOffset;\r\n            memoryOffset += fieldType.byteSize;\r\n            instance.add(member.name, fieldInstance); // reports\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\r\n            instance.add(boundPrototype.name, boundPrototype); // reports\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY_PROTOTYPE: {\r\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\r\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\r\n            if (getterPrototype) {\r\n              let getterInstance = this.resolveFunction(\r\n                getterPrototype.toBound(instance),\r\n                null,\r\n                makeMap(instance.contextualTypeArguments),\r\n                reportMode\r\n              );\r\n              if (getterInstance) {\r\n                propertyInstance.getterInstance = getterInstance;\r\n                propertyInstance.setType(getterInstance.signature.returnType);\r\n              }\r\n            }\r\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\r\n            if (setterPrototype) {\r\n              let setterInstance = this.resolveFunction(\r\n                setterPrototype.toBound(instance),\r\n                null,\r\n                makeMap(instance.contextualTypeArguments),\r\n                reportMode\r\n              );\r\n              if (setterInstance) {\r\n                propertyInstance.setterInstance = setterInstance;\r\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\r\n                  assert(setterInstance.signature.parameterTypes.length == 1);\r\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\r\n                }\r\n              }\r\n            }\r\n            instance.add(propertyInstance.name, propertyInstance); // reports\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Finalize memory offset\r\n    instance.currentMemoryOffset = memoryOffset;\r\n\r\n    // Link _own_ constructor if present\r\n    {\r\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\r\n      if (ctorPrototype && ctorPrototype.parent === instance) {\r\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n        let ctorInstance = this.resolveFunction(\r\n          <FunctionPrototype>ctorPrototype,\r\n          null,\r\n          instance.contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\r\n      }\r\n    }\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\r\n        let boundPrototype = overloadPrototype.toBound(instance);\r\n        operatorInstance = this.resolveFunction(\r\n          boundPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      } else {\r\n        operatorInstance = this.resolveFunction(\r\n          overloadPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      overloads.set(kind, operatorInstance);\r\n    }\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a class prototype by first resolving the specified type arguments. */\r\n  resolveClassInclTypeArguments(\r\n    /** The prototype of the class. */\r\n    prototype: ClassPrototype,\r\n    /** Type argument nodes provided. */\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    /** Relative context. Type arguments are resolved from here. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type>,\r\n    /** The node to use when reporting intermediate errors. */\r\n    reportNode: Node,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.typeParameterNodes), // must be present if generic\r\n        typeArgumentNodes,\r\n        context,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveClass(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n}\r\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  BuiltinSymbols,\r\n  compileCall as compileBuiltinCall,\r\n  compileAbort,\r\n  compileVisitGlobals,\r\n  compileVisitMembers,\r\n  compileRTTI,\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  needsExplicitUnreachable,\r\n  getGetLocalIndex,\r\n  FeatureFlags,\r\n  isTeeLocal,\r\n  getSetLocalIndex\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  CommonSymbols,\r\n  INDEX_SUFFIX,\r\n  Feature,\r\n  Target\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  ConstantValueKind,\r\n  OperatorKind,\r\n  DecoratorFlags,\r\n  PropertyPrototype,\r\n  File,\r\n  mangleInternalName\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  Flow,\r\n  LocalFlags\r\n} from \"./flow\";\r\n\r\nimport {\r\n  Resolver, ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Range,\r\n  DecoratorKind,\r\n  AssertionKind,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FieldDeclaration,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InstanceOfExpression,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ObjectLiteralExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n\r\n  nodeIsConstantValue,\r\n  findDecorator,\r\n  isTypeOmitted\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64,\r\n  makeMap\r\n} from \"./util\";\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\r\n  sharedMemory: i32 = 0;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: i32 = 0;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n  /** Additional features to activate. */\r\n  features: Feature = Feature.NONE;\r\n\r\n  /** Hinted optimize level. Not applied by the compiler itself. */\r\n  optimizeLevelHint: i32 = 0;\r\n  /** Hinted shrink level. Not applied by the compiler itself. */\r\n  shrinkLevelHint: i32 = 0;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n\r\n  /** Tests if a specific feature is activated. */\r\n  hasFeature(feature: Feature): bool {\r\n    return (this.features & feature) != 0;\r\n  }\r\n}\r\n\r\n/** Requests or indicates compilation conditions of statements and expressions. */\r\nexport const enum ContextualFlags {\r\n  NONE = 0,\r\n\r\n  /** Implicit conversion required. */\r\n  IMPLICIT = 1 << 0,\r\n  /** Explicit conversion required. */\r\n  EXPLICIT = 1 << 1,\r\n  /** Small integer wrap required. */\r\n  WRAP = 1 << 2,\r\n\r\n  /** Value is known to be immediately dropped. */\r\n  WILL_DROP = 1 << 3,\r\n  /** Value is known to be immediately assigned to a retaining target.  */\r\n  SKIP_AUTORELEASE = 1 << 4,\r\n  /** Is the last statement in a function body. */\r\n  LAST_IN_BODY = 1 << 5,\r\n  /** Data can be compiled statically. */\r\n  STATIC_CAPABLE = 1 << 6\r\n}\r\n\r\n/** Runtime features to be activated by the compiler. */\r\nexport const enum RuntimeFeatures {\r\n  NONE = 0,\r\n  /** Requires HEAP_BASE and heap setup. */\r\n  HEAP = 1 << 0,\r\n  /** Requires RTTI_BASE and RTTI setup. */\r\n  RTTI = 1 << 1,\r\n  /** Requires the built-in globals visitor. */\r\n  visitGlobals = 1 << 2,\r\n  /** Requires the built-in members visitor. */\r\n  visitMembers = 1 << 3\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Resolver reference. */\r\n  resolver: Resolver;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current control flow. */\r\n  currentFlow: Flow;\r\n  /** Current inline functions stack. */\r\n  currentInlineFunctions: Function[] = [];\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function statements. */\r\n  currentBody: ExpressionRef[];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = [];\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: string[] = [ \"null\" ];\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n  /** Requires runtime features. */\r\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\r\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\r\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    this.resolver = program.resolver;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\r\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\r\n      max(options.memoryBase, 8)\r\n    );\r\n    this.module = Module.create();\r\n    var featureFlags: BinaryenFeatureFlags = 0;\r\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\r\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBAL)) featureFlags |= FeatureFlags.MutableGloabls;\r\n    // if (this.options.hasFeature(Feature.TRUNC_SAT)) featureFlags |= FeatureFlags.NontrappingFPToInt;\r\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\r\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\r\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\r\n    // if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\r\n    this.module.setFeatures(featureFlags);\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the main start function\r\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature([], Type.void));\r\n    startFunctionInstance.internalName = \"start\";\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.currentFlow = startFunctionInstance.flow;\r\n    this.currentBody = startFunctionBody;\r\n\r\n    // add a mutable heap and rtti base dummies\r\n    if (options.isWasm64) {\r\n      module.addGlobal(BuiltinSymbols.HEAP_BASE, NativeType.I64, true, module.createI64(0));\r\n      module.addGlobal(BuiltinSymbols.RTTI_BASE, NativeType.I64, true, module.createI64(0));\r\n    } else {\r\n      module.addGlobal(BuiltinSymbols.HEAP_BASE, NativeType.I32, true, module.createI32(0));\r\n      module.addGlobal(BuiltinSymbols.RTTI_BASE, NativeType.I32, true, module.createI32(0));\r\n    }\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var files = program.filesByName;\r\n    for (let file of files.values()) {\r\n      if (file.source.isEntry) {\r\n        this.compileFile(file);\r\n        this.compileExports(file);\r\n      }\r\n    }\r\n\r\n    // compile the start function if not empty or called by main\r\n    var hasExplicitStart = program.explicitStartFunction !== null;\r\n    if (startFunctionBody.length || hasExplicitStart) {\r\n      let signature = startFunctionInstance.signature;\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.createBlock(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      if (!hasExplicitStart) module.setStart(funcRef);\r\n    }\r\n\r\n    // compile runtime features\r\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\r\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\r\n    module.removeGlobal(BuiltinSymbols.RTTI_BASE);\r\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\r\n\r\n    // update the heap base pointer\r\n    var memoryOffset = this.memoryOffset;\r\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n    this.memoryOffset = memoryOffset;\r\n    module.removeGlobal(BuiltinSymbols.HEAP_BASE);\r\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\r\n      if (options.isWasm64) {\r\n        module.addGlobal(\r\n          BuiltinSymbols.HEAP_BASE,\r\n          NativeType.I64,\r\n          false,\r\n          module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n        );\r\n      } else {\r\n        module.addGlobal(\r\n          BuiltinSymbols.HEAP_BASE,\r\n          NativeType.I32,\r\n          false,\r\n          module.createI32(i64_low(memoryOffset))\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up memory\r\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\r\n    module.setMemory(\r\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\r\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\r\n        : 0,\r\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\r\n      this.memorySegments,\r\n      options.target,\r\n      \"memory\",\r\n      isSharedMemory\r\n    );\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\r\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.createBlock(null, []));\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\r\n\r\n    // set up module exports\r\n    for (let file of this.program.filesByName.values()) {\r\n      if (file.source.isEntry) this.ensureModuleExports(file);\r\n    }\r\n    return module;\r\n  }\r\n\r\n  /** Applies the respective module exports for the specified file. */\r\n  private ensureModuleExports(file: File): void {\r\n    var members = file.exports;\r\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar)  {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\r\n    }\r\n  }\r\n\r\n  /** Applies the respective module export(s) for the specified element. */\r\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\r\n    switch (element.kind) {\r\n\r\n      // traverse instances\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instances = (<FunctionPrototype>element).instances;\r\n        if (instances) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.ensureModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        let instances = (<ClassPrototype>element).instances;\r\n        if (instances) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.ensureModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getter = (<PropertyPrototype>element).getterPrototype;\r\n        let setter = (<PropertyPrototype>element).setterPrototype;\r\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n\r\n      // export concrete elements\r\n      case ElementKind.GLOBAL: {\r\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_export_a_mutable_global,\r\n            (<Global>element).identifierNode.range\r\n          );\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.ENUMVALUE: {\r\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_export_a_mutable_global,\r\n            (<EnumValue>element).identifierNode.range\r\n          );\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION: {\r\n        let instance = <Function>element;\r\n        let signature = instance.signature;\r\n        if (signature.requiredParameters < signature.parameterTypes.length) {\r\n          // utilize trampoline to fill in omitted arguments\r\n          instance = this.ensureTrampoline(instance);\r\n          this.ensureArgcSet();\r\n        }\r\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = (<Property>element).getterInstance;\r\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        let setter = (<Property>element).setterInstance;\r\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\r\n        if (!element.is(CommonFlags.READONLY)) {\r\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        // make the class name itself represent its runtime id\r\n        if (!(<Class>element).type.isUnmanaged) {\r\n          let module = this.module;\r\n          let internalName = (<Class>element).internalName;\r\n          module.addGlobal(internalName, NativeType.I32, false, module.createI32((<Class>element).id));\r\n          module.addGlobalExport(internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // just traverse members below\r\n      case ElementKind.ENUM:\r\n      case ElementKind.NAMESPACE:\r\n      case ElementKind.FILE:\r\n      case ElementKind.TYPEDEFINITION: break;\r\n\r\n      default: assert(false); // unexpected module export\r\n    }\r\n\r\n    // traverse members\r\n    var members = element.members;\r\n    if (members) {\r\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\r\n        ? INSTANCE_DELIMITER\r\n        : STATIC_DELIMITER\r\n      );\r\n      if (\r\n        element.kind == ElementKind.NAMESPACE ||\r\n        element.kind == ElementKind.FILE\r\n      ) {\r\n        for (let member of members.values()) {\r\n          if (!member.is(CommonFlags.EXPORT)) continue;\r\n          this.ensureModuleExport(member.name, member, subPrefix);\r\n        }\r\n      } else {\r\n        for (let member of members.values()) {\r\n          if (member.is(CommonFlags.PRIVATE)) continue;\r\n          this.ensureModuleExport(member.name, member, subPrefix);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes a function to get the value of a field of an exported class. */\r\n  private ensureModuleFieldGetter(name: string, field: Field): void {\r\n    var module = this.module;\r\n    var type = field.type;\r\n    var usizeType = this.options.usizeType;\r\n    var loadExpr = module.createLoad(type.byteSize, type.is(TypeFlags.SIGNED),\r\n      module.createGetLocal(0, usizeType.toNativeType()),\r\n      type.toNativeType(), field.memoryOffset\r\n    );\r\n    // a user-defined getter would return a retained value, so:\r\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\r\n    module.addFunction(\r\n      name,\r\n      this.ensureFunctionType(null, type, usizeType),\r\n      null,\r\n      loadExpr\r\n    );\r\n    module.addFunctionExport(name, name);\r\n  }\r\n\r\n  /** Makes a function to set the value of a field of an exported class. */\r\n  private ensureModuleFieldSetter(name: string, field: Field): void {\r\n    var module = this.module;\r\n    var type = field.type;\r\n    var nativeType = type.toNativeType();\r\n    var usizeType = this.options.usizeType;\r\n    var nativeSizeType = usizeType.toNativeType();\r\n    var valueExpr = module.createGetLocal(1, nativeType);\r\n    if (type.isManaged) {\r\n      valueExpr = this.makeRetainRelease(\r\n        module.createLoad(type.byteSize, false, // oldRef\r\n          module.createGetLocal(0, nativeSizeType),\r\n          nativeType, field.memoryOffset\r\n        ),\r\n        valueExpr // newRef\r\n      );\r\n    }\r\n    module.addFunction(\r\n      name,\r\n      this.ensureFunctionType([ type ], Type.void, usizeType),\r\n      null,\r\n      module.createStore(\r\n        type.byteSize,\r\n        module.createGetLocal(0, nativeSizeType),\r\n        valueExpr,\r\n        nativeType,\r\n        field.memoryOffset\r\n      )\r\n    );\r\n    module.addFunctionExport(name, name);\r\n  }\r\n\r\n  // === Elements =================================================================================\r\n\r\n  /** Compiles any element. */\r\n  compileElement(element: Element, compileMembers: bool = true): void {\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        this.compileGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        this.compileEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        if (!element.is(CommonFlags.GENERIC)) {\r\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        if (!element.is(CommonFlags.GENERIC)) {\r\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\r\n        if (getterPrototype) {\r\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\r\n        }\r\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\r\n        if (setterPrototype) {\r\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE:\r\n      case ElementKind.TYPEDEFINITION:\r\n      case ElementKind.ENUMVALUE: break;\r\n      default: assert(false, ElementKind[element.kind]);\r\n    }\r\n    if (compileMembers) this.compileMembers(element);\r\n  }\r\n\r\n  /** Compiles an element's members. */\r\n  compileMembers(element: Element): void {\r\n    var members = element.members;\r\n    if (members) for (let element of members.values()) this.compileElement(element);\r\n  }\r\n\r\n  /** Compiles a file's exports. */\r\n  compileExports(file: File): void {\r\n    var exports = file.exports;\r\n    if (exports) for (let element of exports.values()) this.compileElement(element);\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar) {\r\n      for (let exportStar of exportsStar) {\r\n        this.compileFile(exportStar);\r\n        this.compileExports(exportStar);\r\n      }\r\n    }\r\n  }\r\n\r\n  // files\r\n\r\n  /** Compiles the file matching the specified path. */\r\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var file: File;\r\n    var filesByName = this.program.filesByName;\r\n    var pathWithIndex: string;\r\n    if (filesByName.has(normalizedPathWithoutExtension)) {\r\n      file = filesByName.get(normalizedPathWithoutExtension)!;\r\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\r\n      file = filesByName.get(pathWithIndex)!;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n      return;\r\n    }\r\n    this.compileFile(file);\r\n  }\r\n\r\n  /** Compiles the specified file. */\r\n  compileFile(file: File): void {\r\n    if (file.is(CommonFlags.COMPILED)) return;\r\n    file.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements within the file's start function\r\n    var startFunction = file.startFunction;\r\n    var previousBody = this.currentBody;\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.currentBody = startFunctionBody;\r\n\r\n    // compile top-level statements\r\n    var previousFlow = this.currentFlow;\r\n    var flow = startFunction.flow;\r\n    this.currentFlow = flow;\r\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\r\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\r\n    }\r\n    this.finishAutoreleases(flow, startFunctionBody);\r\n    this.currentFlow = previousFlow;\r\n    this.currentBody = previousBody;\r\n\r\n    // if top-level statements are present, make the per-file start function and call it in start\r\n    if (startFunctionBody.length) {\r\n      let module = this.module;\r\n      let locals = startFunction.localsByIndex;\r\n      let numLocals = locals.length;\r\n      let varTypes = new Array<NativeType>(numLocals);\r\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\r\n      module.addFunction(\r\n        startFunction.internalName,\r\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\r\n        varTypes,\r\n        startFunctionBody.length > 1\r\n          ? module.createBlock(null, startFunctionBody)\r\n          : startFunctionBody[0]\r\n      );\r\n      previousBody.push(\r\n        module.createCall(startFunction.internalName, null, NativeType.None)\r\n      );\r\n    }\r\n  }\r\n\r\n  // === Globals ==================================================================================\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var initExpr: ExpressionRef = 0;\r\n    var initAutoreleaseSkipped: bool = false;\r\n    var typeNode = global.typeNode;\r\n    var initializerNode = global.initializerNode;\r\n\r\n    if (!global.is(CommonFlags.RESOLVED)) {\r\n\r\n      // resolve now if annotated\r\n      if (typeNode) {\r\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\r\n        if (!resolvedType) return false;\r\n        if (resolvedType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            typeNode.range\r\n          );\r\n          return false;\r\n        }\r\n        global.setType(resolvedType);\r\n\r\n      // infer from initializer if not annotated\r\n      } else if (initializerNode) { // infer type using void/NONE for literal inference\r\n        let previousFlow = this.currentFlow;\r\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = global.file.startFunction.flow;\r\n        }\r\n        initExpr = this.compileExpression(initializerNode, Type.i32, // reports\r\n          ContextualFlags.WRAP | ContextualFlags.SKIP_AUTORELEASE\r\n        );\r\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\r\n        this.currentFlow = previousFlow;\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          return false;\r\n        }\r\n        global.setType(this.currentType);\r\n\r\n      // must either be annotated or have an initializer\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          global.identifierNode.range.atEnd\r\n        );\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n      if (global.internalName == BuiltinSymbols.HEAP_BASE) this.runtimeFeatures |= RuntimeFeatures.HEAP;\r\n      else if (global.internalName == BuiltinSymbols.RTTI_BASE) this.runtimeFeatures |= RuntimeFeatures.RTTI;\r\n      return true;\r\n    }\r\n\r\n    var type = global.type;\r\n    var nativeType = type.toNativeType();\r\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // constant global\r\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        mangleImportName(global, global.declaration);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          mangleImportName_moduleName,\r\n          mangleImportName_elementName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          global.declaration.range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and constant\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // evaluate initializer if present\r\n    if (initializerNode) {\r\n      if (!initExpr) {\r\n        let previousFlow = this.currentFlow;\r\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = global.file.startFunction.flow;\r\n        }\r\n        initExpr = this.compileExpression(initializerNode, type,\r\n          ContextualFlags.IMPLICIT | ContextualFlags.WRAP | ContextualFlags.SKIP_AUTORELEASE | ContextualFlags.STATIC_CAPABLE\r\n        );\r\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\r\n        this.currentFlow = previousFlow;\r\n      }\r\n\r\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n        if (isDeclaredConstant) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              initializerNode.range\r\n            );\r\n            initializeInStart = true;\r\n          }\r\n        } else {\r\n          initializeInStart = true;\r\n        }\r\n      }\r\n\r\n      // explicitly inline if annotated\r\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\r\n        if (!initializeInStart) { // reported above\r\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\r\n          let exprType = getExpressionType(initExpr);\r\n          switch (exprType) {\r\n            case NativeType.I32: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(\r\n                getConstValueI64Low(initExpr),\r\n                getConstValueI64High(initExpr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF32(initExpr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF64(initExpr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false);\r\n              return false;\r\n            }\r\n          }\r\n          global.set(CommonFlags.INLINED); // inline the value from now on\r\n        }\r\n      }\r\n\r\n    // initialize to zero if there's no initializer\r\n    } else {\r\n      initExpr = type.toNativeZero(module);\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\r\n        this.error(\r\n          DiagnosticCode.Decorator_0_is_not_valid_here,\r\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\r\n        );\r\n      }\r\n      module.addGlobal(internalName, nativeType, true, type.toNativeZero(module));\r\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\r\n      this.currentBody.push(\r\n        module.createSetGlobal(internalName, initExpr)\r\n      );\r\n    } else if (!global.hasDecorator(DecoratorFlags.INLINE)) { // compile normally\r\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // === Enums ====================================================================================\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n    var previousValueIsMut = false;\r\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueNode = val.valueNode;\r\n        val.set(CommonFlags.COMPILED);\r\n        let previousFlow = this.currentFlow;\r\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = element.file.startFunction.flow;\r\n        }\r\n        let initExpr: ExpressionRef;\r\n        if (valueNode) {\r\n          initExpr = this.compileExpression(valueNode, Type.i32,\r\n            ContextualFlags.IMPLICIT // autorelease is not applicable in i32 context\r\n          );\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            initExpr = module.precomputeExpression(initExpr);\r\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n              if (element.is(CommonFlags.CONST)) {\r\n                this.error(\r\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                  valueNode.range\r\n                );\r\n              }\r\n              initInStart = true;\r\n            }\r\n          }\r\n        } else if (previousValue == null) {\r\n          initExpr = module.createI32(0);\r\n        } else {\r\n          if (previousValueIsMut) {\r\n            this.error(\r\n              DiagnosticCode.Enum_member_must_have_initializer,\r\n              (<EnumValue>member).identifierNode.range.atEnd\r\n            );\r\n          }\r\n          initExpr = module.createBinary(BinaryOp.AddI32,\r\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n            module.createI32(1)\r\n          );\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.error(\r\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                member.declaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n        }\r\n        this.currentFlow = previousFlow;\r\n        if (initInStart) {\r\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\r\n          this.currentBody.push(\r\n            this.makeGlobalAssignment(val, initExpr, false)\r\n          );\r\n          previousValueIsMut = true;\r\n        } else {\r\n          if (isInline) {\r\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\r\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\r\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            }\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n          }\r\n          val.isImmutable = true;\r\n          previousValueIsMut = false;\r\n        }\r\n        previousValue = <EnumValue>val;\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // === Functions ================================================================================\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> = makeMap(),\r\n    alternativeReportNode: Node | null = null\r\n  ): Function | null {\r\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\r\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      prototype.parent, // relative to itself\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return null;\r\n    if (!this.compileFunction(instance)) return null; // reports\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles the body of a function within the specified flow. */\r\n  compileFunctionBody(\r\n    /** Function to compile. */\r\n    instance: Function,\r\n    /** Target array of statements. */\r\n    stmts: ExpressionRef[] | null = null\r\n  ): ExpressionRef[] {\r\n    var module = this.module;\r\n    var bodyNode = assert(instance.prototype.bodyNode);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = this.currentFlow;\r\n\r\n    // compile statements\r\n    if (bodyNode.kind == NodeKind.BLOCK) {\r\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\r\n    } else {\r\n      // must be an expression statement if not a block\r\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\r\n\r\n      // must be an arrow function\r\n      assert(instance.prototype.arrowKind);\r\n\r\n      // none of the following can be an arrow function\r\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\r\n\r\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      if (!stmts) stmts = [ expr ];\r\n      else stmts.push(expr);\r\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) { // TODO: detect if returning an AUTORELEASE local\r\n        let indexBefore = stmts.length;\r\n        this.performAutoreleases(flow, stmts);\r\n        this.finishAutoreleases(flow, stmts);\r\n        let canOverflow = flow.canOverflow(expr, returnType);\r\n        let nonNull = flow.isNonnull(returnType, expr);\r\n        if (stmts.length > indexBefore) {\r\n          let temp = flow.getAndFreeTempLocal(returnType, !canOverflow, nonNull);\r\n          stmts[indexBefore - 1] = module.createSetLocal(temp.index, expr);\r\n          stmts.push(module.createGetLocal(temp.index, returnType.toNativeType()));\r\n        }\r\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\r\n        flow.set(FlowFlags.RETURNS); // now is terminating\r\n      }\r\n    }\r\n\r\n    // make the main function call `start` implicitly, but only once\r\n    if (instance.prototype == this.program.explicitStartFunction) {\r\n      module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.createI32(0));\r\n      stmts.unshift(\r\n        module.createIf(\r\n          module.createUnary(\r\n            UnaryOp.EqzI32,\r\n            module.createGetGlobal(BuiltinSymbols.started, NativeType.I32)\r\n          ),\r\n          module.createBlock(null, [\r\n            module.createCall(\"start\", null, NativeType.None),\r\n            module.createSetGlobal(BuiltinSymbols.started, module.createI32(1))\r\n          ])\r\n        )\r\n      );\r\n    }\r\n\r\n    // make constructors return their instance pointer\r\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n      assert(instance.is(CommonFlags.INSTANCE));\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n\r\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        let thisLocalIndex = flow.is(FlowFlags.INLINE_CONTEXT)\r\n          ? assert(flow.lookupLocal(CommonSymbols.this_)).index\r\n          : 0;\r\n\r\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\r\n        if (!flow.is(FlowFlags.ALLOCATES)) {\r\n          // {\r\n          //   if (!this) this = <ALLOC>\r\n          //   this.a = X\r\n          //   this.b = Y\r\n          // }\r\n          stmts.push(\r\n            module.createIf(\r\n              module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                module.createGetLocal(thisLocalIndex, nativeSizeType)\r\n              ),\r\n              module.createSetLocal(thisLocalIndex,\r\n                this.makeRetain(\r\n                  this.makeAllocation(<Class>classInstance)\r\n                ),\r\n              )\r\n            )\r\n          );\r\n          this.makeFieldInitialization(<Class>classInstance, stmts);\r\n        }\r\n\r\n        // implicitly return `this`. unlike for normal functions, retaining the value isn't\r\n        // necessary because the allocation (constructor call) already did (RC=1)\r\n        stmts.push(\r\n          module.createGetLocal(thisLocalIndex, nativeSizeType)\r\n        );\r\n        flow.set(FlowFlags.RETURNS);\r\n      }\r\n\r\n      // check that super has been called if this is a derived class\r\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\r\n        this.error(\r\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\r\n          instance.prototype.declaration.range\r\n        );\r\n      }\r\n\r\n    // if this is a normal function, make sure that all branches return\r\n    } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        instance.prototype.signatureNode.returnType.range\r\n      );\r\n    }\r\n\r\n    return stmts;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\r\n\r\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var signature = instance.signature;\r\n    var bodyNode = instance.prototype.bodyNode;\r\n\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var funcRef: FunctionRef;\r\n\r\n    // concrete function\r\n    if (bodyNode) {\r\n\r\n      // must not be ambient\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          instance.identifierNode.range\r\n        );\r\n      }\r\n\r\n      // cannot have an annotated external name\r\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\r\n        let decoratorNodes = instance.decoratorNodes;\r\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          decorator.range\r\n        );\r\n      }\r\n\r\n      // compile body in this function's context\r\n      let previousFlow = this.currentFlow;\r\n      let flow = instance.flow;\r\n      this.currentFlow = flow;\r\n      let stmts = new Array<ExpressionRef>();\r\n\r\n      // retain each argument for as long as the function lives\r\n      let index = 0;\r\n      let thisType = signature.thisType;\r\n      if (thisType) {\r\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\r\n        ++index;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\r\n        let type = parameterTypes[i];\r\n        if (type.isManaged) {\r\n          stmts.push(\r\n            module.createDrop(\r\n              this.makeRetain(\r\n                module.createGetLocal(index, type.toNativeType())\r\n              )\r\n            )\r\n          );\r\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\r\n        }\r\n      }\r\n\r\n      this.compileFunctionBody(instance, stmts);\r\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        this.performAutoreleases(flow, stmts);\r\n        this.finishAutoreleases(flow, stmts);\r\n      }\r\n      this.currentFlow = previousFlow;\r\n\r\n      // create the function\r\n      funcRef = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\r\n      );\r\n\r\n    // imported function\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          instance.identifierNode.range\r\n        );\r\n      }\r\n\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\r\n\r\n      // create the import\r\n      funcRef = module.addFunctionImport(\r\n        instance.internalName,\r\n        mangleImportName_moduleName,\r\n        mangleImportName_elementName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    instance.finalize(module, funcRef);\r\n    this.currentType = previousType;\r\n    return true;\r\n  }\r\n\r\n  // === Classes ==================================================================================\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> = makeMap(),\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = this.resolver.resolveClassInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      prototype.parent, // relative to itself\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n    var prototype = instance.prototype;\r\n    var staticMembers = (<ClassPrototype>prototype).members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                (<FunctionPrototype>element).identifierNode\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY_PROTOTYPE: {\r\n            let getter = (<PropertyPrototype>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                getter.identifierNode\r\n              );\r\n            }\r\n            let setter = (<PropertyPrototype>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                setter.identifierNode\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(instance.contextualTypeArguments),\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            element.set(CommonFlags.COMPILED);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterInstance;\r\n            if (getter) this.compileFunction(getter);\r\n            let setter = (<Property>element).setterInstance;\r\n            if (setter) this.compileFunction(setter);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // === Memory ===================================================================================\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\r\n  ensureStaticString(stringValue: string): ExpressionRef {\r\n    var program = this.program;\r\n    var rtHeaderSize = program.runtimeHeaderSize;\r\n    var stringInstance = assert(program.stringInstance);\r\n    var stringSegment: MemorySegment;\r\n    var segments = this.stringSegments;\r\n    if (segments.has(stringValue)) {\r\n      stringSegment = segments.get(stringValue)!; // reuse\r\n    } else {\r\n      let length = stringValue.length;\r\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\r\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\r\n      for (let i = 0; i < length; ++i) {\r\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\r\n      }\r\n      stringSegment = this.addMemorySegment(buffer);\r\n      segments.set(stringValue, stringSegment);\r\n    }\r\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\r\n    this.currentType = stringInstance.type;\r\n    if (this.options.isWasm64) {\r\n      return this.module.createI64(i64_low(ref), i64_high(ref));\r\n    } else {\r\n      assert(i64_is_u32(ref));\r\n      return this.module.createI32(i64_low(ref));\r\n    }\r\n  }\r\n\r\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\r\n    var program = this.program;\r\n    var length = values.length;\r\n    var byteSize = elementType.byteSize;\r\n    var byteLength = length * byteSize;\r\n    var bufferInstance = assert(program.arrayBufferInstance);\r\n    var runtimeHeaderSize = program.runtimeHeaderSize;\r\n\r\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\r\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\r\n    var pos = runtimeHeaderSize;\r\n    var nativeType = elementType.toNativeType();\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        switch (byteSize) {\r\n          case 1: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI8(getConstValueI32(value), buf, pos);\r\n              pos += 1;\r\n            }\r\n            break;\r\n          }\r\n          case 2: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI16(getConstValueI32(value), buf, pos);\r\n              pos += 2;\r\n            }\r\n            break;\r\n          }\r\n          case 4: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI32(getConstValueI32(value), buf, pos);\r\n              pos += 4;\r\n            }\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF32(getConstValueF32(value), buf, pos);\r\n          pos += 4;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF64(getConstValueF64(value), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    assert(pos == buf.length);\r\n\r\n    return this.addMemorySegment(buf);\r\n  }\r\n\r\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\r\n    var program = this.program;\r\n    var runtimeHeaderSize = program.runtimeHeaderSize;\r\n    var arrayPrototype = assert(program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\r\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\r\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\r\n    var arrayLength = i32(bufferLength / elementType.byteSize);\r\n\r\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\r\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\r\n\r\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\r\n    assert(!program.options.isWasm64); // TODO\r\n    assert(arrayInstance.writeField(\"data\", bufferAddress32, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"dataLength\", bufferLength, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\r\n\r\n    return this.addMemorySegment(buf);\r\n  }\r\n\r\n  // === Table ====================================================================================\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func.internalName);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // === Statements ===============================================================================\r\n\r\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\r\n    switch (statement.kind) {\r\n      case NodeKind.CLASSDECLARATION: {\r\n        let memberStatements = (<ClassDeclaration>statement).members;\r\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\r\n          this.compileTopLevelStatement(memberStatements[i], body);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.ENUMDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\r\n        assert(element.kind == ElementKind.ENUM);\r\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case NodeKind.NAMESPACEDECLARATION: {\r\n        let memberStatements = (<NamespaceDeclaration>statement).members;\r\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\r\n          this.compileTopLevelStatement(memberStatements[i], body);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        let declarations = (<VariableStatement>statement).declarations;\r\n        for (let i = 0, k = declarations.length; i < k; ++i) {\r\n          let element = this.program.getElementByDeclaration(declarations[i]);\r\n          assert(element.kind == ElementKind.GLOBAL);\r\n          if (\r\n            !element.is(CommonFlags.AMBIENT) && // delay imports\r\n            !element.hasDecorator(DecoratorFlags.LAZY)\r\n          ) this.compileGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.FIELDDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\r\n        if (element.kind == ElementKind.GLOBAL) { // static\r\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.EXPORT: {\r\n        if ((<ExportStatement>statement).normalizedPath != null) {\r\n          this.compileFileByPath(\r\n            <string>(<ExportStatement>statement).normalizedPath,\r\n            <StringLiteralExpression>(<ExportStatement>statement).path\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.IMPORT: {\r\n        this.compileFileByPath(\r\n          (<ImportStatement>statement).normalizedPath,\r\n          (<ImportStatement>statement).path\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTIONDECLARATION:\r\n      case NodeKind.METHODDECLARATION:\r\n      case NodeKind.INTERFACEDECLARATION:\r\n      case NodeKind.INDEXSIGNATUREDECLARATION:\r\n      case NodeKind.TYPEDECLARATION: break;\r\n      default: { // otherwise a top-level statement that is part of the start function's body\r\n        let stmt = this.compileStatement(statement);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  compileStatement(\r\n    statement: Statement,\r\n    contextualFlags: ContextualFlags = ContextualFlags.NONE\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var stmt: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        stmt = this.compileBlockStatement(<BlockStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        stmt = this.compileBreakStatement(<BreakStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        stmt = this.compileContinueStatement(<ContinueStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        stmt = this.compileDoStatement(<DoStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        stmt = this.compileForStatement(<ForStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        stmt = this.compileIfStatement(<IfStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        stmt = this.compileThrowStatement(<ThrowStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        stmt = this.compileTryStatement(<TryStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        stmt = this.compileVariableStatement(<VariableStatement>statement, contextualFlags);\r\n        if (!stmt) stmt = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        stmt = this.compileVoidStatement(<VoidStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        stmt = this.compileWhileStatement(<WhileStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // TODO: integrate inner type declaration into flow\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          statement.range\r\n        );\r\n        stmt = module.createUnreachable();\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        stmt = module.createUnreachable();\r\n      }\r\n    }\r\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\r\n    return stmt;\r\n  }\r\n\r\n  compileStatements(\r\n    statements: Statement[],\r\n    isBody: bool = false,\r\n    stmts: ExpressionRef[] | null = null\r\n  ): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    if (!stmts) {\r\n      stmts = new Array<ExpressionRef>(numStatements);\r\n      stmts.length = 0;\r\n    }\r\n    var flow = this.currentFlow;\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      let stmt = this.compileStatement(statements[i],\r\n        isBody && i == numStatements - 1\r\n          ? ContextualFlags.LAST_IN_BODY\r\n          : ContextualFlags.NONE\r\n      );\r\n      switch (getExpressionId(stmt)) {\r\n        case ExpressionId.Block: {\r\n          if (!getBlockName(stmt)) {\r\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: stmts.push(stmt);\r\n        case ExpressionId.Nop:\r\n      }\r\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\r\n        break;\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  compileBlockStatement(\r\n    statement: BlockStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var statements = statement.statements;\r\n    var outerFlow = this.currentFlow;\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n\r\n    var stmts = this.compileStatements(statements);\r\n    if (!innerFlow.isAny(FlowFlags.ANY_TERMINATING)) this.performAutoreleases(innerFlow, stmts);\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\r\n    this.currentFlow = outerFlow;\r\n    return flatten(this.module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileBreakStatement(\r\n    statement: BreakStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFlow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    var current: Flow | null = flow.parent;\r\n    while (current && current.breakLabel === breakLabel) {\r\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\r\n      current = current.parent;\r\n    }\r\n    flow.freeScopedLocals();\r\n    stmts.push(module.createBreak(breakLabel));\r\n    flow.set(FlowFlags.BREAKS);\r\n    return flatten(module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileContinueStatement(\r\n    statement: ContinueStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFlow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES);\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    var current: Flow | null = flow.parent;\r\n    while (current && current.continueLabel === continueLabel) {\r\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\r\n      current = current.parent;\r\n    }\r\n    flow.freeScopedLocals();\r\n    stmts.push(module.createBreak(continueLabel));\r\n    return flatten(module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileDoStatement(\r\n    statement: DoStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (statement.statement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(\r\n        this.compileStatement(statement.statement)\r\n      );\r\n    }\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32),\r\n      this.currentType\r\n    );\r\n    // TODO: check if condition is always false and if so, omit it (just a block)\r\n\r\n    // Switch back to the parent flow\r\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\r\n    if (!terminated) this.performAutoreleases(innerFlow, stmts);\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    this.currentFlow = outerFlow;\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    outerFlow.inherit(innerFlow);\r\n\r\n    var block: ExpressionRef[] = [\r\n      module.createLoop(continueLabel,\r\n        terminated\r\n          ? flatten(module, stmts, NativeType.None) // skip trailing continue if unnecessary\r\n          : module.createBlock(null, [\r\n              flatten(module, stmts, NativeType.None),\r\n              module.createBreak(continueLabel, condExpr)\r\n            ], NativeType.None)\r\n      )\r\n    ];\r\n    if (terminated) block.push(module.createUnreachable());\r\n    return module.createBlock(breakLabel, block);\r\n  }\r\n\r\n  compileEmptyStatement(\r\n    statement: EmptyStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(\r\n    statement: ExpressionStatement,\r\n    contextualFlags: ContextualFlags,\r\n  ): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void,\r\n      contextualFlags | ContextualFlags.EXPLICIT | ContextualFlags.WILL_DROP\r\n    );\r\n  }\r\n\r\n  compileForStatement(\r\n    statement: ForStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n    var repeatLabel = \"repeat|\" + label;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initExpr = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : 0;\r\n    var condExpr: ExpressionRef = 0;\r\n    var alwaysTrue = false;\r\n    if (statement.condition) {\r\n      condExpr = module.precomputeExpression(\r\n        this.makeIsTrueish(\r\n          this.compileExpressionRetainType(<Expression>statement.condition, Type.bool),\r\n          this.currentType\r\n        )\r\n      );\r\n      // check if the condition is always true\r\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\r\n        assert(getExpressionType(condExpr) == NativeType.I32);\r\n        if (getConstValueI32(condExpr) != 0) alwaysTrue = true;\r\n        // TODO: could skip compilation if the condition is always false here, but beware that the\r\n        // initializer could still declare new 'var's that are used later on.\r\n      }\r\n    } else {\r\n      // omitted condition is always true\r\n      condExpr = module.createI32(1);\r\n      alwaysTrue = true;\r\n    }\r\n    innerFlow.inheritNonnullIfTrue(condExpr);\r\n    var incrExpr = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void,\r\n          ContextualFlags.IMPLICIT | ContextualFlags.WILL_DROP\r\n        )\r\n      :  0;\r\n    var bodyStatement = statement.statement;\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (bodyStatement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(\r\n        this.compileStatement(bodyStatement)\r\n      );\r\n    }\r\n    if (!innerFlow.isAny(FlowFlags.ANY_TERMINATING)) this.performAutoreleases(innerFlow, stmts);\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    this.currentFlow = outerFlow;\r\n    var usesContinue = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n\r\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\r\n    if (initExpr) breakBlock.push(initExpr);\r\n\r\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\r\n    if (usesContinue) {\r\n      stmts.unshift(\r\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\r\n      );\r\n      repeatBlock.push(\r\n        module.createBlock(continueLabel, stmts, NativeType.None)\r\n      );\r\n    } else { // can omit the 'continue' block\r\n      repeatBlock.push(\r\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\r\n      );\r\n      for (let i = 0, k = stmts.length; i < k; ++i) {\r\n        repeatBlock.push(stmts[i]);\r\n      }\r\n    }\r\n    if (incrExpr) repeatBlock.push(incrExpr);\r\n    repeatBlock.push(\r\n      module.createBreak(repeatLabel)\r\n    );\r\n\r\n    breakBlock.push(\r\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\r\n    );\r\n\r\n    return module.createBlock(breakLabel, breakBlock);\r\n  }\r\n\r\n  compileIfStatement(\r\n    statement: IfStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpressionRetainType(statement.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Try to eliminate unnecesssary branches if the condition is constant\r\n    if (\r\n      getExpressionId(condExpr) == ExpressionId.Const &&\r\n      getExpressionType(condExpr) == NativeType.I32\r\n    ) {\r\n      return getConstValueI32(condExpr)\r\n        ? this.compileStatement(ifTrue)\r\n        : ifFalse\r\n          ? this.compileStatement(ifFalse)\r\n          : module.createNop();\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var ifTrueStmts = new Array<ExpressionRef>();\r\n    var ifTrueFlow = outerFlow.fork();\r\n    this.currentFlow = ifTrueFlow;\r\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\r\n    if (ifTrue.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\r\n    } else {\r\n      ifTrueStmts.push(this.compileStatement(ifTrue));\r\n    }\r\n    if (!ifTrueFlow.isAny(FlowFlags.ANY_TERMINATING)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\r\n    ifTrueFlow.freeScopedLocals();\r\n    this.currentFlow = outerFlow;\r\n\r\n    if (ifFalse) {\r\n      let ifFalseFlow = outerFlow.fork();\r\n      this.currentFlow = ifFalseFlow;\r\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\r\n      let ifFalseStmts = new Array<ExpressionRef>();\r\n      if (ifFalse.kind == NodeKind.BLOCK) {\r\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\r\n      } else {\r\n        ifFalseStmts.push(this.compileStatement(ifFalse));\r\n      }\r\n      if (!ifFalseFlow.isAny(FlowFlags.ANY_TERMINATING)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\r\n      ifFalseFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\r\n      return module.createIf(condExpr,\r\n        flatten(module, ifTrueStmts, NativeType.None),\r\n        flatten(module, ifFalseStmts, NativeType.None)\r\n      );\r\n    } else {\r\n      outerFlow.inheritConditional(ifTrueFlow);\r\n      if (ifTrueFlow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        outerFlow.inheritNonnullIfFalse(condExpr);\r\n      }\r\n      return module.createIf(condExpr,\r\n        flatten(module, ifTrueStmts, NativeType.None)\r\n      );\r\n    }\r\n  }\r\n\r\n  compileReturnStatement(\r\n    statement: ReturnStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var expr: ExpressionRef = 0;\r\n    var flow = this.currentFlow;\r\n    var returnType = flow.returnType;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    var valueExpression = statement.value;\r\n    if (valueExpression) {\r\n      if (returnType == Type.void) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          valueExpression.range, this.currentType.toString(), returnType.toString()\r\n        );\r\n        this.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      let contextualFlags = ContextualFlags.IMPLICIT;\r\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) contextualFlags |= ContextualFlags.WRAP;\r\n      expr = this.compileExpression(valueExpression, returnType, contextualFlags | ContextualFlags.SKIP_AUTORELEASE);\r\n\r\n      // when returning a local, and it is already retained, skip the final set\r\n      // of retaining it as the return value and releasing it as a variable\r\n      if (!this.skippedAutoreleases.has(expr)) {\r\n        if (returnType.isManaged) {\r\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\r\n            if (flow.isAnyLocalFlag(getGetLocalIndex(expr), LocalFlags.ANY_RETAINED)) {\r\n              flow.unsetLocalFlag(getGetLocalIndex(expr), LocalFlags.ANY_RETAINED);\r\n              this.skippedAutoreleases.add(expr);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remember whether returning a properly wrapped value\r\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n\r\n    } else if (returnType != Type.void) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        statement.range, \"void\", returnType.toString()\r\n      );\r\n      expr = module.createUnreachable();\r\n    }\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    this.finishAutoreleases(flow, stmts);\r\n\r\n    // Make sure that the return value is retained for the caller\r\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\r\n\r\n    if (returnType != Type.void && stmts.length) {\r\n      let temp = flow.getAndFreeTempLocal(returnType, false, flow.isNonnull(returnType, expr));\r\n      stmts.unshift(\r\n        module.createSetLocal(temp.index, expr)\r\n      );\r\n      expr = module.createGetLocal(temp.index, returnType.toNativeType());\r\n    }\r\n    flow.freeScopedLocals();\r\n\r\n    // If the last statement anyway, make it the block's return value\r\n    if ((contextualFlags & ContextualFlags.LAST_IN_BODY) != 0 && expr && returnType != Type.void) {\r\n      if (!stmts.length) return expr;\r\n      stmts.push(expr);\r\n      return module.createBlock(null, stmts, returnType.toNativeType());\r\n    }\r\n\r\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      if (!stmts.length) return module.createBreak(assert(flow.inlineReturnLabel), 0, expr);\r\n      stmts.push(module.createBreak(assert(flow.inlineReturnLabel), 0, expr));\r\n      // stmts.push(module.createUnreachable());\r\n      return module.createBlock(null, stmts);\r\n    }\r\n\r\n    // Otherwise emit a normal return\r\n    if (!stmts.length) return module.createReturn(expr);\r\n    stmts.push(module.createReturn(expr));\r\n    return module.createBlock(null, stmts);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement, contextualFlags: ContextualFlags): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n    if (!numCases) {\r\n      return this.compileExpression(statement.condition, Type.void,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n    }\r\n\r\n    // Everything within a switch uses the same break context\r\n    var outerFlow = this.currentFlow;\r\n    var context = outerFlow.pushBreakLabel();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\r\n    var tempLocalIndex = tempLocal.index;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32,\r\n        ContextualFlags.IMPLICIT\r\n      )\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.u32,\r\n              ContextualFlags.IMPLICIT\r\n            )\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    outerFlow.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    var alwaysReturnsWrapped = true;\r\n    var alwaysThrows = true;\r\n    var alwaysAllocates = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n\r\n      // Each switch case initiates a new branch\r\n      let innerFlow = outerFlow.fork();\r\n      this.currentFlow = innerFlow;\r\n      let breakLabel = \"break|\" + context;\r\n      innerFlow.breakLabel = breakLabel;\r\n\r\n      let isLast = i == numCases - 1;\r\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\r\n      stmts[0] = currentBlock;\r\n      let count = 1;\r\n      let terminated = false;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        let stmt = this.compileStatement(statements[j]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          stmts[count++] = stmt;\r\n          if (innerFlow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n            terminated = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      stmts.length = count;\r\n      if (terminated || isLast) {\r\n        if (!innerFlow.is(FlowFlags.RETURNS)) alwaysReturns = false;\r\n        if (!innerFlow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\r\n        if (!innerFlow.is(FlowFlags.THROWS)) alwaysThrows = false;\r\n        if (!innerFlow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      if (!innerFlow.isAny(FlowFlags.ANY_TERMINATING)) this.performAutoreleases(innerFlow, stmts);\r\n      innerFlow.unset(\r\n        FlowFlags.BREAKS |\r\n        FlowFlags.CONDITIONALLY_BREAKS\r\n      );\r\n      innerFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\r\n    }\r\n    outerFlow.popBreakLabel();\r\n\r\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\r\n    if (defaultIndex >= 0) {\r\n      if (alwaysReturns) outerFlow.set(FlowFlags.RETURNS);\r\n      if (alwaysReturnsWrapped) outerFlow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (alwaysThrows) outerFlow.set(FlowFlags.THROWS);\r\n      if (alwaysAllocates) outerFlow.set(FlowFlags.ALLOCATES);\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(\r\n    statement: ThrowStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var flow = this.currentFlow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.finishAutoreleases(flow, stmts);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    var value = statement.value;\r\n    var message: Expression | null = null;\r\n    if (value.kind == NodeKind.NEW) {\r\n      let newArgs = (<NewExpression>value).arguments;\r\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\r\n    }\r\n    stmts.push(compileAbort(this, message, statement));\r\n\r\n    return flatten(this.module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileTryStatement(\r\n    statement: TryStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    // TODO: can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\r\n  compileVariableStatement(statement: VariableStatement, contextualFlags: ContextualFlags): ExpressionRef {\r\n    var module = this.module;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n    var flow = this.currentFlow;\r\n    var initializers = new Array<ExpressionRef>();\r\n    var resolver = this.resolver;\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let initExpr: ExpressionRef = 0;\r\n      let initAutoreleaseSkipped = false;\r\n      if (declaration.type) {\r\n        type = resolver.resolveType( // reports\r\n          declaration.type,\r\n          flow.actualFunction,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\r\n            ContextualFlags.IMPLICIT | ContextualFlags.SKIP_AUTORELEASE\r\n          );\r\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        initExpr = this.compileExpressionRetainType(declaration.initializer, Type.void,\r\n          ContextualFlags.SKIP_AUTORELEASE\r\n        ); // reports\r\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      let isInlined = false;\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (initExpr) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\r\n            let local = new Local(name, -1, type, flow.parentFunction);\r\n            switch (getExpressionType(initExpr)) {\r\n              case NativeType.I32: {\r\n                local.setConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI32(initExpr),\r\n                    0\r\n                  ),\r\n                  type\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local.setConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI64Low(initExpr),\r\n                    getConstValueI64High(initExpr)\r\n                  ),\r\n                  type\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                return module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = flow.scopedLocals;\r\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isInlined = true;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (!isInlined) {\r\n        let local: Local;\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          local = flow.addScopedLocal(name, type, false, declaration.name); // reports if duplicate\r\n        } else {\r\n          if (flow.lookupLocal(name)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, name\r\n            );\r\n            continue;\r\n          }\r\n          local = flow.parentFunction.addLocal(type, name, declaration);\r\n        }\r\n        let isManaged = type.isManaged;\r\n        if (initExpr) {\r\n          if (isManaged) {\r\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\r\n            initializers.push(\r\n              module.createSetLocal(local.index,\r\n                initAutoreleaseSkipped\r\n                  ? initExpr\r\n                  : this.makeRetain(initExpr)\r\n              )\r\n            );\r\n          } else {\r\n            initializers.push(\r\n              module.createSetLocal(local.index, initExpr)\r\n            );\r\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\r\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\r\n            }\r\n          }\r\n        } else {\r\n          if (isManaged) {\r\n            // This is necessary because the first use (and assign) of the local could be taking place\r\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\r\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\r\n            // initialized but becomes released later on, whatever was stored before would be released.\r\n            // TODO: Detect this condition inside of a loop instead?\r\n            initializers.push(\r\n              module.createSetLocal(local.index,\r\n                type.toNativeZero(module)\r\n              )\r\n            );\r\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\r\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return initializers.length == 0\r\n      ? 0\r\n      : flatten(module, initializers, NativeType.None);\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement, contextualFlags: ContextualFlags): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void,\r\n      ContextualFlags.EXPLICIT | ContextualFlags.WILL_DROP\r\n    );\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement, contextualFlags: ContextualFlags): ExpressionRef {\r\n    var module = this.module;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpressionRetainType(statement.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Try to eliminate unnecesssary loops if the condition is constant\r\n    if (\r\n      getExpressionId(condExpr) == ExpressionId.Const &&\r\n      getExpressionType(condExpr) == NativeType.I32\r\n    ) {\r\n      if (!getConstValueI32(condExpr)) return module.createNop();\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n\r\n    innerFlow.inheritNonnullIfTrue(condExpr);\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (statement.statement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(this.compileStatement(statement.statement));\r\n    }\r\n    var alwaysTrue = false; // TODO\r\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\r\n    if (!terminated) {\r\n      this.performAutoreleases(innerFlow, stmts);\r\n      stmts.push(module.createBreak(continueLabel));\r\n    }\r\n    innerFlow.freeScopedLocals();\r\n\r\n    // Switch back to the parent flow\r\n    outerFlow.popBreakLabel();\r\n    this.currentFlow = outerFlow;\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condExpr,\r\n          flatten(module, stmts, NativeType.None)\r\n        )\r\n      )\r\n    ]);\r\n  }\r\n\r\n  // === Expressions ==============================================================================\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !(contextualFlags & (ContextualFlags.IMPLICIT | ContextualFlags.EXPLICIT)) &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        // monkey-patch for converting built-in floats to f32 implicitly\r\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags = ContextualFlags.NONE\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n    var expr: ExpressionRef;\r\n    if (contextualType == Type.void) contextualFlags |= ContextualFlags.WILL_DROP;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileExpression((<ParenthesizedExpression>expression).expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n    // ensure conversion and wrapping in case the respective function doesn't on its own\r\n    var currentType = this.currentType;\r\n    var wrap = (contextualFlags & ContextualFlags.WRAP) != 0;\r\n    if (currentType != contextualType) {\r\n      if (contextualFlags & ContextualFlags.EXPLICIT) {\r\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\r\n        wrap = false;\r\n        this.currentType = contextualType;\r\n      } else if (contextualFlags & ContextualFlags.IMPLICIT) {\r\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\r\n        wrap = false;\r\n        this.currentType = contextualType;\r\n      }\r\n    }\r\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\r\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\r\n    // must go through this function, with the respective per-kind functions not being used directly.\r\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n    return expr;\r\n  }\r\n\r\n  /** Compiles an expression while retaining the type, that is not void, it ultimately compiles to. */\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags = ContextualFlags.NONE\r\n  ): ExpressionRef {\r\n    return this.compileExpression(expression,\r\n      contextualType == Type.void\r\n        ? Type.i32 // default to i32\r\n        : contextualType,\r\n      (contextualFlags & ~(ContextualFlags.IMPLICIT | ContextualFlags.EXPLICIT))\r\n    );\r\n  }\r\n\r\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags = ContextualFlags.NONE\r\n  ): ExpressionRef {\r\n    return this.module.precomputeExpression(\r\n      this.compileExpression(expression, contextualType, contextualFlags)\r\n    );\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    /** Original type. */\r\n    fromType: Type,\r\n    /** New type. */\r\n    toType: Type,\r\n    /** Whether the conversion is explicit.*/\r\n    explicit: bool,\r\n    /** Whether the result should be wrapped, if a small integer. */\r\n    wrap: bool,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\r\n\r\n    if (this.currentFlow.isNonnull(fromType, expr)) fromType = fromType.nonNullableType;\r\n\r\n    if (!fromType.isAssignableTo(toType)) {\r\n      if (!explicit) {\r\n        if (fromType.nonNullableType == toType) {\r\n          this.error(\r\n            DiagnosticCode.Object_is_possibly_null,\r\n            reportNode.range\r\n          ); // recoverable\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n            reportNode.range, fromType.toString(), toType.toString()\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType == Type.bool) {\r\n            expr = module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n            wrap = false;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType == Type.bool) {\r\n            expr = module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n            wrap = false;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      // i64 to ...\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32 or smaller\r\n        if (toType == Type.bool) {\r\n          expr = module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n          wrap = false;\r\n        } else if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n        }\r\n\r\n      // i32 or smaller to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(\r\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\r\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\r\n        );\r\n        wrap = false;\r\n\r\n      // i32 to i32\r\n      } else {\r\n        // small i32 to ...\r\n        if (fromType.is(TypeFlags.SHORT)) {\r\n          // small i32 to larger i32\r\n          if (fromType.size < toType.size) {\r\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\r\n            wrap = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return wrap\r\n      ? this.ensureSmallIntegerWrap(expr, toType)\r\n      : expr;\r\n  }\r\n\r\n  compileAssertionExpression(\r\n    expression: AssertionExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    switch (expression.assertionKind) {\r\n      case AssertionKind.PREFIX:\r\n      case AssertionKind.AS: {\r\n        let flow = this.currentFlow;\r\n        let toType = this.resolver.resolveType( // reports\r\n          assert(expression.toType),\r\n          flow.actualFunction,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!toType) return this.module.createUnreachable();\r\n        return this.compileExpression(expression.expression, toType,\r\n          contextualFlags | ContextualFlags.EXPLICIT\r\n        );\r\n      }\r\n      case AssertionKind.NONNULL: {\r\n        assert(!expression.toType);\r\n        let expr = this.compileExpressionRetainType(expression.expression, contextualType);\r\n        let type = this.currentType;\r\n        if (!type.is(TypeFlags.NULLABLE | TypeFlags.REFERENCE) || this.currentFlow.isNonnull(type, expr)) {\r\n          this.info(\r\n            DiagnosticCode.Expression_is_never_null,\r\n            expression.expression.range\r\n          );\r\n        } else if (!this.options.noAssert) {\r\n          let module = this.module;\r\n          let flow = this.currentFlow;\r\n          let tempIndex = flow.getAndFreeTempLocal(type, !flow.canOverflow(expr, type), false).index;\r\n          expr = module.createIf(\r\n            module.createTeeLocal(tempIndex, expr),\r\n            module.createGetLocal(tempIndex, type.toNativeType()),\r\n            module.createUnreachable()\r\n          );\r\n        }\r\n        this.currentType = this.currentType.nonNullableType;\r\n        return expr;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '==' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.V128: {\r\n            expr = module.createUnary(UnaryOp.AllTrueVecI8x16,\r\n              module.createBinary(BinaryOp.EqVecI8x16, leftExpr, rightExpr)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '!=' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.V128: {\r\n            expr = module.createUnary(UnaryOp.AnyTrueVecI8x16,\r\n              module.createBinary(BinaryOp.NeVecI8x16, leftExpr, rightExpr)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // addition might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // subtraction might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POW);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType.kind == TypeKind.F32) {\r\n          rightExpr = this.compileExpression(right, Type.f32, ContextualFlags.IMPLICIT);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            this.currentType, Type.f64,\r\n            false, false,\r\n            left\r\n          );\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpression(right, Type.f64, ContextualFlags.IMPLICIT);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.createUnreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, true, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, true, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\r\n          case TypeKind.I16: // ^\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.REM);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, true, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, true, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n          }\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\r\n        let flow = this.currentFlow;\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, contextualFlags);\r\n        leftType = this.currentType;\r\n\r\n        let rightFlow = flow.fork();\r\n        this.currentFlow = rightFlow;\r\n        rightFlow.inheritNonnullIfTrue(leftExpr);\r\n        rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT | (contextualFlags & ~ContextualFlags.WILL_DROP));\r\n        rightType = leftType;\r\n\r\n        // simplify if only interested in true or false\r\n        if (contextualType == Type.bool || contextualType == Type.void) {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n          this.currentType = Type.bool;\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            this.makeIsTrueish(rightExpr, rightType),\r\n            module.createI32(0)\r\n          );\r\n\r\n        // references must properly retain and release, with the same outcome independent of the branch taken\r\n        } else if (leftType.isManaged) {\r\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\r\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\r\n          let temp = flow.getTempLocal(leftType);\r\n          leftExpr = module.createTeeLocal(temp.index, leftExpr);\r\n\r\n          // instead of retaining left and releasing it again in right when right\r\n          // is taken, we can also just retain left if right is not taken\r\n          let retainLeftInElse = false;\r\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\r\n            if (!leftAutoreleaseSkipped) {\r\n              retainLeftInElse = true;\r\n            } else {\r\n              rightExpr = this.makeRetain(rightExpr);\r\n              rightAutoreleaseSkipped = true;\r\n            }\r\n          } else if (!(contextualFlags & ContextualFlags.SKIP_AUTORELEASE)) { // otherwise keep right alive a little longer\r\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\r\n          }\r\n\r\n          let rightStmts = new Array<ExpressionRef>();\r\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\r\n            rightStmts.unshift(\r\n              this.makeRelease(\r\n                module.createGetLocal(temp.index, leftType.toNativeType())\r\n              )\r\n            );\r\n          }\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            rightExpr,\r\n            retainLeftInElse\r\n              ? this.makeRetain(\r\n                  module.createGetLocal(temp.index, leftType.toNativeType())\r\n                )\r\n              : module.createGetLocal(temp.index, leftType.toNativeType())\r\n          );\r\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n          if (temp) flow.freeTempLocal(temp);\r\n\r\n        // basic values can use more aggressive optimizations\r\n        } else {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          // simplify if cloning left without side effects is possible\r\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n            expr = module.createIf(\r\n              this.makeIsTrueish(leftExpr, this.currentType),\r\n              rightExpr,\r\n              expr\r\n            );\r\n\r\n          // if not possible, tee left to a temp\r\n          } else {\r\n            let tempLocal = flow.getTempLocal(leftType, !flow.canOverflow(leftExpr, leftType));\r\n            expr = module.createIf(\r\n              this.makeIsTrueish(module.createTeeLocal(tempLocal.index, leftExpr), leftType),\r\n              rightExpr,\r\n              module.createGetLocal(tempLocal.index, leftType.toNativeType())\r\n            );\r\n          }\r\n        }\r\n        this.currentType = leftType;\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\r\n        let flow = this.currentFlow;\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, contextualFlags);\r\n        leftType = this.currentType;\r\n\r\n        let rightFlow = flow.fork();\r\n        this.currentFlow = rightFlow;\r\n        rightFlow.inheritNonnullIfFalse(leftExpr);\r\n        rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT | contextualFlags);\r\n        rightType = leftType;\r\n\r\n        // simplify if only interested in true or false\r\n        if (contextualType == Type.bool || contextualType == Type.void) {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n          this.currentType = Type.bool;\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            module.createI32(1),\r\n            this.makeIsTrueish(rightExpr, rightType)\r\n          );\r\n\r\n        // references must properly retain and release, with the same outcome independent of the branch taken\r\n        } else if (leftType.isManaged) {\r\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\r\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\r\n          let temp = flow.getTempLocal(leftType);\r\n          leftExpr = module.createTeeLocal(temp.index, leftExpr);\r\n\r\n          // instead of retaining left and releasing it again in right when right\r\n          // is taken, we can also just retain left if right is not taken\r\n          let retainLeftInThen = false;\r\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\r\n            if (!leftAutoreleaseSkipped) {\r\n              retainLeftInThen = true;\r\n            } else {\r\n              rightExpr = this.makeRetain(rightExpr);\r\n              rightAutoreleaseSkipped = true;\r\n            }\r\n          } else if (!(contextualFlags & ContextualFlags.SKIP_AUTORELEASE)) { // otherwise keep right alive a little longer\r\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\r\n          }\r\n\r\n          let rightStmts = new Array<ExpressionRef>();\r\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\r\n            // TODO: usually, false'ish means left is null, but this might not hold\r\n            // once implicit conversion with strings is performed and left is \"\", so:\r\n            rightStmts.unshift(\r\n              this.makeRelease(\r\n                module.createGetLocal(temp.index, leftType.toNativeType())\r\n              )\r\n            );\r\n          }\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            retainLeftInThen\r\n              ? this.makeRetain(\r\n                  module.createGetLocal(temp.index, leftType.toNativeType())\r\n                )\r\n              : module.createGetLocal(temp.index, leftType.toNativeType()),\r\n            rightExpr\r\n          );\r\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n          if (temp) flow.freeTempLocal(temp);\r\n\r\n        // basic values can use more aggressive optimizations\r\n        } else {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          // simplify if cloning left without side effects is possible\r\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n            expr = module.createIf(\r\n              this.makeIsTrueish(leftExpr, this.currentType),\r\n              expr,\r\n              rightExpr\r\n            );\r\n\r\n          // if not possible, tee left to a temp. local\r\n          } else {\r\n            let tempLocal = flow.getAndFreeTempLocal(this.currentType,\r\n              !flow.canOverflow(leftExpr, this.currentType),\r\n              flow.isNonnull(this.currentType, leftExpr)\r\n            );\r\n            expr = module.createIf(\r\n              this.makeIsTrueish(module.createTeeLocal(tempLocal.index, leftExpr), this.currentType),\r\n              module.createGetLocal(tempLocal.index, this.currentType.toNativeType()),\r\n              rightExpr\r\n            );\r\n          }\r\n        }\r\n        this.currentType = leftType;\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n    if (!compound) return expr;\r\n    var resolver = this.resolver;\r\n    var target = this.resolver.resolveExpression(left, this.currentFlow);\r\n    if (!target) return module.createUnreachable();\r\n    return this.makeAssignment(\r\n      target,\r\n      expr, // TODO: delay release above if possible?\r\n      left,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    valueExpr: ExpressionRef,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\r\n    // is a bad idea currently. so this assumes that the type matches.\r\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    leftExpr: ExpressionRef,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var rightType: Type;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      rightType = operatorInstance.signature.parameterTypes[0];\r\n    } else {\r\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\r\n      // local states, like having retained locals that actually do not even exist, possibly\r\n      // releasing something random in that local before and evil things like that. Hence this\r\n      // assumes that LHS type matches, which in turn means that static overloads must be\r\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\r\n      // things like multiple static overloads for different combinations of LHS/RHS types.\r\n      // We might want that at some point of course, but requires to complete the resolver so\r\n      // it can actually resolve every kind of expression without ever having to recompile.\r\n      rightType = operatorInstance.signature.parameterTypes[1];\r\n    }\r\n    var rightExpr = this.compileExpression(right, rightType, ContextualFlags.IMPLICIT);\r\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var resolver = program.resolver;\r\n    var flow = this.currentFlow;\r\n    var target = resolver.resolveExpression(expression, flow); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n    var thisExpression = resolver.currentThisExpression;\r\n    var elementExpression = resolver.currentElementExpression;\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var targetType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        // not yet compiled if a static field compiled as a global\r\n        if (!this.compileGlobal(<Global>target)) return this.module.createUnreachable(); // reports\r\n        // fall-through\r\n      }\r\n      case ElementKind.FIELD: {\r\n        targetType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.LOCAL: {\r\n        targetType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\r\n        if (!setterPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!setterInstance) return this.module.createUnreachable();\r\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n        targetType = setterInstance.signature.parameterTypes[0];\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let setterInstance = (<Property>target).setterInstance;\r\n        if (!setterInstance) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n        targetType = setterInstance.signature.parameterTypes[0];\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (elementExpression) { // indexed access\r\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          // if (isUnchecked) {\r\n          //   let arrayType = this.program.determineBuiltinArrayType(<Class>target);\r\n          //   if (arrayType) {\r\n          //     return compileBuiltinArraySet(\r\n          //       this,\r\n          //       <Class>target,\r\n          //       assert(this.resolver.currentThisExpression),\r\n          //       elementExpression,\r\n          //       valueExpression,\r\n          //       contextualType\r\n          //     );\r\n          //   }\r\n          // }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return this.module.createUnreachable();\r\n          }\r\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\r\n          targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    assert(targetType != Type.void);\r\n    return this.makeAssignment(\r\n      target,\r\n      this.compileExpression(valueExpression, targetType, ContextualFlags.IMPLICIT | ContextualFlags.SKIP_AUTORELEASE),\r\n      expression,\r\n      thisExpression,\r\n      elementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  /** Makes an assignment expression or block, assigning a value to a target. */\r\n  makeAssignment(\r\n    /** Target element, e.g. a Local. */\r\n    target: Element,\r\n    /** Value expression that has been compiled in a previous step already. */\r\n    valueExpr: ExpressionRef,\r\n    /** Expression reference. Has already been compiled to `valueExpr`. */\r\n    valueExpression: Expression,\r\n    /** `this` expression reference if a field or property set. */\r\n    thisExpression: Expression | null,\r\n    /** Index expression reference if an indexed set. */\r\n    indexExpression: Expression | null,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\r\n    // everything else must insert the skipped autorelease now. See (*)\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        if (target.is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          this.currentType = tee ? (<Local>target).type : Type.void;\r\n          return module.createUnreachable();\r\n        }\r\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\r\n        if (target.is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range,\r\n            target.internalName\r\n          );\r\n          this.currentType = tee ? (<Global>target).type : Type.void;\r\n          return module.createUnreachable();\r\n        }\r\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let initializerNode = (<Field>target).initializerNode;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            initializerNode\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, (<Field>target).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        return this.makeFieldAssignment(<Field>target,\r\n          valueExpr,\r\n          this.compileExpressionRetainType(\r\n            assert(thisExpression),\r\n            // FIXME: explicit type (currently fails due to missing null checking)\r\n            this.options.usizeType\r\n          ),\r\n          tee\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\r\n        if (!setterPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!setterInstance) return module.createUnreachable();\r\n        // call just the setter if the return value isn't of interest\r\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\r\n        // otherwise call the setter first, then the getter\r\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\r\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!getterInstance) return module.createUnreachable();\r\n        let returnType = getterInstance.signature.returnType;\r\n        let nativeReturnType = returnType.toNativeType();\r\n        return module.createBlock(null, [\r\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\r\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\r\n        ], nativeReturnType);\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        let setterInstance = (<Property>target).setterInstance;\r\n        if (!setterInstance) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        // call just the setter if the return value isn't of interest\r\n        if (!tee) {\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            assert(thisExpression),\r\n            this.options.usizeType\r\n          );\r\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\r\n        }\r\n        // otherwise call the setter first, then the getter\r\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\r\n        let returnType = getterInstance.signature.returnType;\r\n        let nativeReturnType = returnType.toNativeType();\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          assert(thisExpression),\r\n          this.options.usizeType\r\n        );\r\n        let tempLocal = flow.getAndFreeTempLocal(returnType, false);\r\n        let tempLocalIndex = tempLocal.index;\r\n        return module.createBlock(null, [\r\n          this.makeCallDirect(setterInstance, [ // set and remember the target\r\n            module.createTeeLocal(tempLocalIndex, thisExpr),\r\n            valueExpr\r\n          ], valueExpression),\r\n          this.makeCallDirect(getterInstance, [ // get from remembered target\r\n            module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n          ], valueExpression)\r\n        ], nativeReturnType);\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        if (indexExpression) {\r\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              valueExpression.range, target.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              valueExpression.range, target.internalName\r\n            );\r\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n            return module.createUnreachable();\r\n          }\r\n          let targetType = (<Class>target).type;\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            assert(thisExpression),\r\n            this.options.usizeType\r\n          );\r\n          let elementExpr = this.compileExpression(indexExpression, Type.i32, ContextualFlags.IMPLICIT);\r\n          if (tee) {\r\n            let tempLocalTarget = flow.getTempLocal(targetType);\r\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType, false);\r\n            let returnType = indexedGet.signature.returnType;\r\n            flow.freeTempLocal(tempLocalTarget);\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(indexedSet, [\r\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\r\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                valueExpr\r\n              ], valueExpression),\r\n              this.makeCallDirect(indexedGet, [\r\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n              ], valueExpression)\r\n            ], returnType.toNativeType());\r\n          } else {\r\n            return this.makeCallDirect(indexedSet, [\r\n              thisExpr,\r\n              elementExpr,\r\n              valueExpr\r\n            ], valueExpression);\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      valueExpression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\r\n  private makeLocalAssignment(\r\n    /** The local to assign to. */\r\n    local: Local,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var type = local.type;\r\n    assert(type != Type.void);\r\n    var flow = this.currentFlow;\r\n    var localIndex = local.index;\r\n\r\n    if (type.is(TypeFlags.NULLABLE)) {\r\n      if (flow.isNonnull(type, valueExpr)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\r\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\r\n    }\r\n\r\n    if (type.isManaged) {\r\n      let module = this.module;\r\n      let nativeType = type.toNativeType();\r\n\r\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n        if (this.skippedAutoreleases.has(valueExpr)) {\r\n          valueExpr = this.makeSkippedRelease(\r\n            module.createGetLocal(localIndex, nativeType), // oldRef\r\n            valueExpr // newRef\r\n          );\r\n          if (tee) { // TEE(local = __skippedRelease(local, value))\r\n            this.currentType = type;\r\n            return module.createTeeLocal(localIndex, valueExpr);\r\n          } else { // local = __skippedRelease(local, value)\r\n            this.currentType = Type.void;\r\n            return module.createSetLocal(localIndex, valueExpr);\r\n          }\r\n        } else {\r\n          valueExpr = this.makeRetainRelease(\r\n            module.createGetLocal(localIndex, nativeType), // oldRef\r\n            valueExpr // newRef\r\n          );\r\n          if (tee) { // TEE(local = __retainRelease(local, value))\r\n            this.currentType = type;\r\n            return module.createTeeLocal(localIndex, valueExpr);\r\n          } else { // local = __retainRelease(local, value)\r\n            this.currentType = Type.void;\r\n            return module.createSetLocal(localIndex, valueExpr);\r\n          }\r\n        }\r\n      } else {\r\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\r\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\r\n        if (!this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeRetain(valueExpr);\r\n        if (tee) { // TEE(local = __retain(value, local))\r\n          this.currentType = type;\r\n          return module.createTeeLocal(localIndex, valueExpr);\r\n        } else { // local = __retain(value, local)\r\n          this.currentType = Type.void;\r\n          return module.createSetLocal(localIndex, valueExpr);\r\n        }\r\n      }\r\n    } else {\r\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\r\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\r\n      }\r\n      if (tee) { // TEE(local = value)\r\n        this.currentType = type;\r\n        return this.module.createTeeLocal(localIndex, valueExpr);\r\n      } else { // local = value\r\n        this.currentType = Type.void;\r\n        return this.module.createSetLocal(localIndex, valueExpr);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\r\n  private makeGlobalAssignment(\r\n    /** The global to assign to. */\r\n    global: Global,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var type = global.type;\r\n    assert(type != Type.void);\r\n    var nativeType = type.toNativeType();\r\n\r\n    if (type.isManaged) {\r\n      if (this.skippedAutoreleases.has(valueExpr)) {\r\n        if (tee) { // (global = __skippedRelease(global, value)), global\r\n          this.currentType = type;\r\n          return module.createBlock(null, [\r\n            module.createSetGlobal(global.internalName,\r\n              this.makeSkippedRelease(\r\n                module.createGetGlobal(global.internalName, nativeType), // oldRef\r\n                valueExpr // newRef\r\n              )\r\n            ),\r\n            module.createGetGlobal(global.internalName, nativeType)\r\n          ], nativeType);\r\n        } else { // global = __skippedRelease(global, value)\r\n          this.currentType = Type.void;\r\n          return module.createSetGlobal(global.internalName,\r\n            this.makeSkippedRelease(\r\n              module.createGetGlobal(global.internalName, nativeType), // oldRef\r\n              valueExpr // newRef\r\n            )\r\n          );\r\n        }\r\n      } else {\r\n        if (tee) { // (global = __retainRelease(global, value)), global\r\n          this.currentType = type;\r\n          return module.createBlock(null, [\r\n            module.createSetGlobal(global.internalName,\r\n              this.makeRetainRelease(\r\n                module.createGetGlobal(global.internalName, nativeType), // oldRef\r\n                valueExpr // newRef\r\n              )\r\n            ),\r\n            module.createGetGlobal(global.internalName, nativeType)\r\n          ], nativeType);\r\n        } else { // global = __retainRelease(global, value)\r\n          this.currentType = Type.void;\r\n          return module.createSetGlobal(global.internalName,\r\n            this.makeRetainRelease(\r\n              module.createGetGlobal(global.internalName, nativeType), // oldRef\r\n              valueExpr // newRef\r\n            )\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\r\n      if (tee) { // (global = value), global\r\n        this.currentType = type;\r\n        return module.createBlock(null, [\r\n          module.createSetGlobal(global.internalName, valueExpr),\r\n          module.createGetGlobal(global.internalName, nativeType)\r\n        ], nativeType);\r\n      } else { // global = value\r\n        this.currentType = Type.void;\r\n        return module.createSetGlobal(global.internalName,\r\n          valueExpr\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\r\n  makeFieldAssignment(\r\n    /** The field to assign to. */\r\n    field: Field,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** The value of `this`. */\r\n    thisExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var fieldType = field.type;\r\n    var nativeFieldType = fieldType.toNativeType();\r\n    assert(field.parent.kind == ElementKind.CLASS);\r\n    var thisType = (<Class>field.parent).type;\r\n    var nativeThisType = thisType.toNativeType();\r\n\r\n    if (fieldType.isManaged && thisType.isManaged) {\r\n      let tempThis = flow.getTempLocal(thisType);\r\n      if (this.skippedAutoreleases.has(valueExpr)) {\r\n        if (tee) { // ((t1 = this).field = __skippedRelease(t1.field, t2 = value)), t2\r\n          let tempValue = flow.getAndFreeTempLocal(fieldType, !flow.canOverflow(valueExpr, fieldType));\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = fieldType;\r\n          return module.createBlock(null, [\r\n            module.createStore(fieldType.byteSize,\r\n              module.createTeeLocal(tempThis.index, thisExpr),\r\n              this.makeSkippedRelease(\r\n                module.createLoad(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                  module.createGetLocal(tempThis.index, nativeThisType),\r\n                  nativeFieldType, field.memoryOffset\r\n                ),\r\n                module.createTeeLocal(tempValue.index, valueExpr), // newRef\r\n              ),\r\n              nativeFieldType, field.memoryOffset\r\n            ),\r\n            module.createGetLocal(tempValue.index, nativeFieldType)\r\n          ], nativeFieldType);\r\n        } else { // (t1 = this).field = __skippedRelease(t1.field, value)\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = Type.void;\r\n          return module.createStore(fieldType.byteSize,\r\n            module.createTeeLocal(tempThis.index, thisExpr),\r\n            this.makeSkippedRelease(\r\n              module.createLoad(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                module.createGetLocal(tempThis.index, nativeThisType),\r\n                nativeFieldType, field.memoryOffset\r\n              ),\r\n              valueExpr, // newRef\r\n            ),\r\n            nativeFieldType, field.memoryOffset\r\n          );\r\n        }\r\n      } else {\r\n        if (tee) { // ((t1 = this).field = __retainRelease(t1.field, t2 = value)), t2\r\n          let tempValue = flow.getAndFreeTempLocal(fieldType, !flow.canOverflow(valueExpr, fieldType));\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = fieldType;\r\n          return module.createBlock(null, [\r\n            module.createStore(fieldType.byteSize,\r\n              module.createTeeLocal(tempThis.index, thisExpr),\r\n              this.makeRetainRelease(\r\n                module.createLoad(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                  module.createGetLocal(tempThis.index, nativeThisType),\r\n                  nativeFieldType, field.memoryOffset\r\n                ),\r\n                module.createTeeLocal(tempValue.index, valueExpr) // newRef\r\n              ),\r\n              nativeFieldType, field.memoryOffset\r\n            ),\r\n            module.createGetLocal(tempValue.index, nativeFieldType)\r\n          ], nativeFieldType);\r\n        } else { // (t1 = this).field = __retainRelease(t1.field, value)\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = Type.void;\r\n          return module.createStore(fieldType.byteSize,\r\n            module.createTeeLocal(tempThis.index, thisExpr),\r\n            this.makeRetainRelease(\r\n              module.createLoad(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                module.createGetLocal(tempThis.index, nativeThisType),\r\n                nativeFieldType, field.memoryOffset\r\n              ),\r\n              valueExpr // newRef\r\n            ),\r\n            nativeFieldType, field.memoryOffset\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      if (tee) { // (this.field = (t1 = value)), t1\r\n        let tempValue = flow.getAndFreeTempLocal(fieldType, !flow.canOverflow(valueExpr, fieldType));\r\n        this.currentType = fieldType;\r\n        return module.createBlock(null, [\r\n          module.createStore(fieldType.byteSize,\r\n            thisExpr,\r\n            module.createTeeLocal(tempValue.index, valueExpr),\r\n            nativeFieldType, field.memoryOffset\r\n          ),\r\n          module.createGetLocal(tempValue.index, nativeFieldType)\r\n        ], nativeFieldType);\r\n      } else { // this.field = value\r\n        this.currentType = Type.void;\r\n        return module.createStore(fieldType.byteSize,\r\n          thisExpr,\r\n          valueExpr,\r\n          nativeFieldType, field.memoryOffset\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Compiles a call expression according to the specified context. */\r\n  compileCallExpression(\r\n    /** Call expression to compile. */\r\n    expression: CallExpression,\r\n    /** Contextual type indicating the return type the caller expects, if any. */\r\n    contextualType: Type,\r\n    /** Contextual flags indicating contextual conditions. */\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // handle call to super\r\n    if (expression.expression.kind == NodeKind.SUPER) {\r\n      let flow = this.currentFlow;\r\n      let actualFunction = flow.actualFunction;\r\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n        this.error(\r\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n\r\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let baseClassInstance = assert((<Class>classInstance).base);\r\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n\r\n      // {\r\n      //   this = super(this || <ALLOC>, ...args)\r\n      //   this.a = X\r\n      //   this.b = Y\r\n      // }\r\n      let stmts: ExpressionRef[] = [\r\n        module.createSetLocal(thisLocal.index,\r\n          this.compileCallDirect(\r\n            this.ensureConstructor(baseClassInstance, expression),\r\n            expression.arguments,\r\n            expression,\r\n            module.createIf(\r\n              module.createGetLocal(thisLocal.index, nativeSizeType),\r\n              module.createGetLocal(thisLocal.index, nativeSizeType),\r\n              this.makeRetain(\r\n                this.makeAllocation(<Class>classInstance)\r\n              )\r\n            )\r\n          )\r\n        )\r\n      ];\r\n      this.makeFieldInitialization(<Class>classInstance, stmts);\r\n\r\n      // check that super had been called before accessing allocating `this`\r\n      if (flow.isAny(\r\n        FlowFlags.ALLOCATES |\r\n        FlowFlags.CONDITIONALLY_ALLOCATES\r\n      )) {\r\n        this.error(\r\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\r\n      this.currentType = Type.void;\r\n      return module.createBlock(null, stmts);\r\n    }\r\n\r\n    // otherwise resolve normally\r\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          instance = this.resolver.resolveFunctionInclTypeArguments(\r\n            prototype,\r\n            typeArguments,\r\n            flow.actualFunction.parent, // relative to caller\r\n            makeMap<string,Type>(flow.contextualTypeArguments),\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let inferredTypes = new Map<string,Type | null>();\r\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\r\n          let numTypeParameters = typeParameterNodes.length;\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\r\n          }\r\n          // let numInferred = 0;\r\n          let parameterNodes = prototype.signatureNode.parameters;\r\n          let numParameters = parameterNodes.length;\r\n          let argumentNodes = expression.arguments;\r\n          let numArguments = argumentNodes.length;\r\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\r\n          for (let i = 0; i < numParameters; ++i) {\r\n            let typeNode = parameterNodes[i].type;\r\n            let templateName = typeNode.kind == NodeKind.TYPE && !(<TypeNode>typeNode).name.next\r\n              ? (<TypeNode>typeNode).name.identifier.text\r\n              : null;\r\n            let argumentExpression = i < numArguments\r\n              ? argumentNodes[i]\r\n              : parameterNodes[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameters.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            if (templateName !== null && inferredTypes.has(templateName)) {\r\n              let inferredType = inferredTypes.get(templateName);\r\n              if (inferredType) {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType);\r\n                let commonType: Type | null;\r\n                if (!(commonType = Type.commonDenominator(inferredType, this.currentType, true))) {\r\n                  if (!(commonType = Type.commonDenominator(inferredType, this.currentType, false))) {\r\n                    this.error(\r\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\r\n                    );\r\n                    return module.createUnreachable();\r\n                  }\r\n                }\r\n                inferredType = commonType;\r\n              } else {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32);\r\n                inferredType = this.currentType;\r\n                // ++numInferred;\r\n              }\r\n              inferredTypes.set(templateName, inferredType);\r\n            } else {\r\n              let concreteType = this.resolver.resolveType(\r\n                parameterNodes[i].type,\r\n                flow.actualFunction,\r\n                flow.contextualTypeArguments\r\n              );\r\n              if (!concreteType) return module.createUnreachable();\r\n              argumentExprs[i] = this.compileExpression(argumentExpression, concreteType, ContextualFlags.IMPLICIT);\r\n            }\r\n          }\r\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\r\n            resolvedTypeArguments[i] = inferredType;\r\n          }\r\n          instance = this.resolver.resolveFunction(\r\n            prototype,\r\n            resolvedTypeArguments,\r\n            makeMap<string,Type>(flow.contextualTypeArguments)\r\n          );\r\n          if (!instance) return this.module.createUnreachable();\r\n          return this.makeCallDirect(instance, argumentExprs, expression, contextualType == Type.void);\r\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\r\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\r\n          // so inlining can be performed in `makeCallDirect` instead?\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = this.resolver.resolveFunction(prototype, null);\r\n        }\r\n        if (!instance) return this.module.createUnreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType\r\n          );\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr,\r\n          false,\r\n          contextualFlags\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          if ((<Local>target).is(CommonFlags.INLINED)) {\r\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\r\n          } else {\r\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\r\n          }\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType\r\n          );\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, ContextualFlags.IMPLICIT);\r\n        break;\r\n      }\r\n\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\r\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\r\n        if (!getterInstance) return module.createUnreachable();\r\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\r\n        signature = this.currentType.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, this.currentType.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let getterInstance = assert((<Property>target).getterInstance);\r\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\r\n          this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType\r\n          )\r\n        );\r\n        signature = this.currentType.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, this.currentType.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        break;\r\n      }\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression,\r\n      0,\r\n      contextualType == Type.void\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var typeArguments: Type[] | null = null;\r\n\r\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\r\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\r\n    var typeParameterNodes = prototype.typeParameterNodes;\r\n    var typeArgumentNodes = expression.typeArguments;\r\n    if (expression.typeArguments) {\r\n      if (!prototype.is(CommonFlags.GENERIC)) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          expression.range, prototype.internalName\r\n        );\r\n      }\r\n      typeArguments = this.resolver.resolveTypeArguments(\r\n        assert(typeParameterNodes),\r\n        typeArgumentNodes,\r\n        this.currentFlow.actualFunction.parent,\r\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n\r\n    // now compile the builtin, which usually returns a block of code that replaces the call.\r\n    var expr = compileBuiltinCall(\r\n      this,\r\n      prototype,\r\n      typeArguments,\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    inlineCanAlias: bool = false,\r\n    contextualFlags: ContextualFlags = ContextualFlags.NONE\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      this.currentType = signature.returnType;\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    // Inline if explicitly requested\r\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      if (this.currentInlineFunctions.includes(instance)) {\r\n        this.warning(\r\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\r\n          reportNode.range, instance.internalName\r\n        );\r\n      } else {\r\n        this.currentInlineFunctions.push(instance);\r\n        let expr = this.compileCallInlinePrechecked(instance, argumentExpressions, thisArg, inlineCanAlias, (contextualFlags & ContextualFlags.WILL_DROP) != 0);\r\n        this.currentInlineFunctions.pop();\r\n        return expr;\r\n      }\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    if (signature.returnType.isManaged) {\r\n      if (contextualFlags & ContextualFlags.WILL_DROP) {\r\n        // Skip autorelease and simply release\r\n        return this.makeCallDirect(instance, operands, reportNode, true);\r\n      } else if (contextualFlags & ContextualFlags.SKIP_AUTORELEASE) {\r\n        // Skip autorelease and remember\r\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\r\n        this.skippedAutoreleases.add(expr);\r\n        return expr;\r\n      } else {\r\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\r\n      }\r\n    }\r\n    return this.makeCallDirect(instance, operands, reportNode,\r\n      (contextualFlags & ContextualFlags.WILL_DROP) != 0\r\n    );\r\n  }\r\n\r\n  compileCallInline(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    thisArg: ExpressionRef,\r\n    reportNode: Node,\r\n    canAlias: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      this.currentType = instance.signature.returnType;\r\n      return this.module.createUnreachable();\r\n    }\r\n    return this.compileCallInlinePrechecked(instance, argumentExpressions, thisArg, canAlias);\r\n  }\r\n\r\n  private compileCallInlinePrechecked(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    thisArg: ExpressionRef = 0,\r\n    canAlias: bool = false,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    var parameterTypes = signature.parameterTypes;\r\n    assert(numArguments <= parameterTypes.length);\r\n    var args = new Array<ExpressionRef>(numArguments);\r\n    var flow = this.currentFlow;\r\n\r\n    // compile arguments possibly using their own temp locals\r\n    var temps = flow.blockLocalsBeforeInlining(instance);\r\n    for (let i = 0; i < numArguments; ++i) {\r\n      args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n    }\r\n    flow.unblockLocals(temps);\r\n\r\n    return this.makeCallInlinePrechecked(instance, args, thisArg, canAlias, immediatelyDropped);\r\n  }\r\n\r\n  makeCallInlinePrechecked(\r\n    instance: Function,\r\n    args: ExpressionRef[],\r\n    thisArg: ExpressionRef = 0,\r\n    canAlias: bool = false,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n\r\n    // CAUTION: Imagine a call like `theCall(a, b)`. Unless canAlias, inlining needs a temporary local for\r\n    // each argument, looking something like `BLOCK { t1 = a, t2 = b, inlinedTheCall }`. Now, if argument b,\r\n    // which is compiled beforehand, itself required a temporary local, it is likely that it did pick `t1`\r\n    // for this, making it something like `BLOCK { t1 = a, t2 = (t1 = c, t1), inlinedTheCall }`, which is\r\n    // overwriting t1. Hence, whenever makeCallInline is used, this condition must be taken into account.\r\n    // Flows provide the helpers Flow#blockLocalsBeforeInlining and Flow#unblockLocals for this.\r\n\r\n    var module = this.module;\r\n\r\n    // Create a new inline flow and use it to compile the function as a block\r\n    var previousFlow = this.currentFlow;\r\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\r\n    var body = [];\r\n\r\n    // Convert provided call arguments to temporary locals\r\n    if (thisArg) {\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let thisType = assert(instance.signature.thisType);\r\n      if (canAlias && getExpressionId(thisArg) == ExpressionId.LocalGet) {\r\n        flow.addScopedAlias(CommonSymbols.this_, thisType, getGetLocalIndex(thisArg));\r\n        let baseInstance = (<Class>classInstance).base;\r\n        if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, getGetLocalIndex(thisArg));\r\n      } else {\r\n        let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, false);\r\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\r\n        body.push(\r\n          module.createSetLocal(thisLocal.index, thisArg)\r\n        );\r\n        let baseInstance = (<Class>classInstance).base;\r\n        if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\r\n      }\r\n    } else {\r\n      assert(!instance.signature.thisType);\r\n    }\r\n    var numArguments = args.length;\r\n    var signature = instance.signature;\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i) {\r\n      let paramExpr = args[i];\r\n      let paramType = parameterTypes[i];\r\n      if (canAlias && getExpressionId(paramExpr) == ExpressionId.LocalGet) {\r\n        flow.addScopedAlias(signature.getParameterName(i), paramType, getGetLocalIndex(paramExpr));\r\n      } else {\r\n        let argumentLocal = flow.addScopedLocal(\r\n          signature.getParameterName(i),\r\n          paramType,\r\n          !previousFlow.canOverflow(paramExpr, paramType)\r\n        );\r\n        if (paramType.isManaged) {\r\n          flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\r\n          body.push(\r\n            module.createSetLocal(argumentLocal.index,\r\n              this.makeRetain(paramExpr)\r\n            )\r\n          );\r\n        } else {\r\n          body.push(\r\n            module.createSetLocal(argumentLocal.index, paramExpr)\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // Compile optional parameter initializers in the scope of the inlined flow\r\n    this.currentFlow = flow;\r\n    var numParameters = signature.parameterTypes.length;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let initType = parameterTypes[i];\r\n      let initExpr = this.compileExpression(\r\n        assert(instance.prototype.signatureNode.parameters[i].initializer),\r\n        initType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      if (canAlias && getExpressionId(initExpr) == ExpressionId.LocalGet) {\r\n        flow.addScopedAlias(signature.getParameterName(i), initType, getGetLocalIndex(initExpr));\r\n      } else {\r\n        let argumentLocal = flow.addScopedLocal(\r\n          signature.getParameterName(i),\r\n          initType,\r\n          !flow.canOverflow(initExpr, initType)\r\n        );\r\n        if (initType.isManaged) {\r\n          flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\r\n          body.push(\r\n            module.createSetLocal(argumentLocal.index,\r\n              this.makeRetain(initExpr)\r\n            )\r\n          );\r\n        } else {\r\n          body.push(\r\n            module.createSetLocal(argumentLocal.index, initExpr)\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    this.compileFunctionBody(instance, body);\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n      this.performAutoreleases(flow, body);\r\n      this.finishAutoreleases(flow, body);\r\n    }\r\n    flow.freeScopedLocals();\r\n    var returnType = flow.returnType;\r\n    this.currentFlow = previousFlow;\r\n\r\n    // Create an outer block that we can break to when returning a value out of order\r\n    var expr = module.createBlock(flow.inlineReturnLabel, body, returnType.toNativeType());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      } else {\r\n        expr = this.makeAutorelease(expr);\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.signatureNode.parameters;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\r\n    trampoline = new Function(\r\n      original.name + \"|trampoline\",\r\n      original.prototype,\r\n      trampolineSignature,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFlow = this.currentFlow;\r\n    this.currentFlow = trampoline.flow;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"outOfRange\", [\r\n        module.createSwitch(names, \"outOfRange\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.createBinary(\r\n                BinaryOp.SubI32,\r\n                module.createGetGlobal(BuiltinSymbols.argc, NativeType.I32),\r\n                module.createI32(minArguments)\r\n              )\r\n            : module.createGetGlobal(BuiltinSymbols.argc, NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      let declaration = originalParameterDeclarations[minArguments + i];\r\n      let initializer = declaration.initializer;\r\n      let initExpr: ExpressionRef;\r\n      if (initializer) {\r\n        initExpr = module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            initializer,\r\n            type,\r\n            ContextualFlags.IMPLICIT\r\n          )\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\r\n          declaration.range\r\n        );\r\n        initExpr = module.createUnreachable();\r\n      }\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        initExpr,\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFlow = previousFlow;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var funcRef = module.addFunction(\r\n      trampoline.internalName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        trampolineSignature.returnType,\r\n        trampolineSignature.thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        BuiltinSymbols.argc,\r\n        NativeType.I32,\r\n        true,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n    return BuiltinSymbols.argc;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.createSetGlobal(this.ensureArgcVar(),\r\n          module.createGetLocal(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\r\n    }\r\n    return BuiltinSymbols.setargc;\r\n  }\r\n\r\n  // <reference-counting>\r\n\r\n  /** Makes retain call, retaining the expression's value. */\r\n  makeRetain(expr: ExpressionRef): ExpressionRef {\r\n    var retainInstance = this.program.retainInstance;\r\n    this.compileFunction(retainInstance);\r\n    return this.module.createCall(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\r\n  }\r\n\r\n  /** Makes a retainRelease call, retaining the new expression's value and releasing the old expression's value, in this order. */\r\n  makeRetainRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\r\n    // FIXME: this is a workaround, see https://github.com/WebAssembly/binaryen/issues/2135\r\n    var retainReleaseInstance = this.program.retainReleaseInstance;\r\n    this.compileFunction(retainReleaseInstance);\r\n    return this.module.createCall(retainReleaseInstance.internalName, [ oldExpr, newExpr ], this.options.nativeSizeType);\r\n  }\r\n\r\n  /** Makes a skippedRelease call, ignoring the new expression's value and releasing the old expression's value, in this order. */\r\n  makeSkippedRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\r\n    // FIXME: this is a workaround, see https://github.com/WebAssembly/binaryen/issues/2135\r\n    var skippedReleaseInstance = this.program.skippedReleaseInstance;\r\n    this.compileFunction(skippedReleaseInstance);\r\n    return this.module.createCall(skippedReleaseInstance.internalName, [ oldExpr, newExpr ], this.options.nativeSizeType);\r\n  }\r\n\r\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\r\n  makeRelease(expr: ExpressionRef): ExpressionRef {\r\n    var releaseInstance = this.program.releaseInstance;\r\n    this.compileFunction(releaseInstance);\r\n    return this.module.createCall(releaseInstance.internalName, [ expr ], NativeType.None);\r\n  }\r\n\r\n  /** Makes an automatic release call at the end of the current flow. */\r\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\r\n    return this.module.createTeeLocal(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\r\n  }\r\n\r\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\r\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\r\n    // NOTE: Can't remove the local.tee completely because it's already compiled\r\n    // and a child of something else. Preventing the final release however should\r\n    // make it optimize away.\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\r\n        if (isTeeLocal(expr)) {\r\n          let index = getSetLocalIndex(expr);\r\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\r\n            // Assumes that the expression actually belongs to the flow and that\r\n            // top-level autoreleases are never undone. While that's true, it's\r\n            // not necessary to check presence in scopedLocals.\r\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\r\n            return index;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\r\n        if (getBlockName(expr) === null) { // must not be a break target\r\n          let count = getBlockChildCount(expr);\r\n          if (count) {\r\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Attemps to move a final autorelease from one flow to a parent.\r\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\r\n   * retain would have been written already.\r\n   */\r\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\r\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\r\n    // eliminate the now unnecessary temporary local.tee because it is already part of\r\n    // another expression in the tree. But optimizing should collapse locals again.\r\n    var index = this.undoAutorelease(expr, fromInnerFlow);\r\n    return ~index\r\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\r\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\r\n  }\r\n\r\n  /** Performs any queued autoreleases in the specified flow. */\r\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\r\n    var scopedLocals = flow.scopedLocals;\r\n    if (scopedLocals) {\r\n      let module = this.module;\r\n      for (let local of scopedLocals.values()) {\r\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          let localIndex = local.index;\r\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\r\n            stmts.push(\r\n              this.makeRelease(\r\n                module.createGetLocal(localIndex, local.type.toNativeType())\r\n              )\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\r\n  performAutoreleasesWithValue(\r\n    flow: Flow,\r\n    valueExpr: ExpressionRef,\r\n    valueType: Type,\r\n    stmts: ExpressionRef[] | null = null,\r\n    clearFlags: bool = true\r\n  ): ExpressionRef {\r\n    if (!stmts) stmts = new Array<ExpressionRef>();\r\n    stmts.push(\r\n      this.module.createNop()\r\n    );\r\n    var lengthBefore = stmts.length;\r\n    this.performAutoreleases(flow, stmts, clearFlags);\r\n    if (stmts.length > lengthBefore) {\r\n      let nativeType = valueType.toNativeType();\r\n      let temp = flow.getAndFreeTempLocal(valueType, !flow.canOverflow(valueExpr, valueType), flow.isNonnull(valueType, valueExpr));\r\n      let module = this.module;\r\n      stmts[lengthBefore - 1] = module.createSetLocal(temp.index, valueExpr); // nop -> set\r\n      stmts.push(\r\n        module.createGetLocal(temp.index, nativeType) // append get\r\n      );\r\n      return module.createBlock(null, stmts, nativeType);\r\n    } else if (stmts.length > 1) {\r\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\r\n      return this.module.createBlock(null, stmts, valueType.toNativeType());\r\n    }\r\n    return valueExpr;\r\n  }\r\n\r\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\r\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\r\n    var module = this.module;\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      // traverse to the top-most flow containing the inlined function's\r\n      // locals as scoped locals and release these instead.\r\n      let parent: Flow | null;\r\n      while (parent = flow.parent) flow = parent;\r\n      this.performAutoreleases(flow, stmts, false);\r\n    } else {\r\n      for (let local of flow.parentFunction.localsByIndex) {\r\n        let localIndex = local.index;\r\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\r\n          stmts.push(\r\n            this.makeRelease(\r\n              module.createGetLocal(localIndex, local.type.toNativeType())\r\n            )\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // </reference-counting>\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null,\r\n    reportNode: Node,\r\n    immediatelyDropped: bool = false,\r\n    /** Skip the usual autorelease and manage this at the callsite instead. */\r\n    skipAutorelease: bool = false\r\n  ): ExpressionRef {\r\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\r\n      this.warning(\r\n        DiagnosticCode.TODO_Cannot_inline_inferred_calls_and_specific_internals_yet,\r\n        reportNode.range, instance.internalName\r\n      );\r\n    }\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      let parameterNodes = instance.prototype.signatureNode.parameters;\r\n      assert(parameterNodes.length == parameterTypes.length);\r\n      let allOptionalsAreConstant = true;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        let initializer = parameterNodes[i].initializer;\r\n        if (initializer) {\r\n          let resolved: Element | null;\r\n          if (\r\n            nodeIsConstantValue(initializer.kind) ||\r\n            (\r\n              (resolved = this.resolver.resolveExpression(initializer, instance.flow, parameterTypes[i])) &&\r\n              (\r\n                resolved.kind == ElementKind.GLOBAL\r\n                // resolved.kind == ElementKind.FUNCTION_TARGET\r\n              )\r\n            )\r\n          ) { // inline into the call\r\n            let previousFlow = this.currentFlow;\r\n            this.currentFlow = instance.flow;\r\n            operands.push(this.compileExpression(\r\n              <Expression>parameterNodes[i].initializer,\r\n              parameterTypes[i],\r\n              ContextualFlags.IMPLICIT\r\n            ));\r\n            this.currentFlow = previousFlow;\r\n            continue;\r\n          }\r\n        }\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n        allOptionalsAreConstant = false;\r\n      }\r\n      if (!allOptionalsAreConstant) {\r\n        if (!isCallImport) {\r\n          let original = instance;\r\n          instance = this.ensureTrampoline(instance);\r\n          if (!this.compileFunction(instance)) return module.createUnreachable();\r\n          instance.flow.flags = original.flow.flags;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          let expr = module.createCall(instance.internalName, operands, nativeReturnType);\r\n          this.currentType = returnType;\r\n          if (returnType.isManaged) {\r\n            if (immediatelyDropped) {\r\n              expr = this.makeRelease(expr);\r\n              this.currentType = Type.void;\r\n            } else if (!skipAutorelease) {\r\n              expr = this.makeAutorelease(expr);\r\n            } else {\r\n              this.skippedAutoreleases.add(expr);\r\n            }\r\n          }\r\n          return module.createBlock(null, [\r\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\r\n            expr\r\n          ], this.currentType.toNativeType());\r\n        }\r\n      }\r\n    }\r\n\r\n    // If the return value is of a reference type it has not yet been released but is in flight\r\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\r\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\r\n    var expr = module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      } else if (!skipAutorelease) {\r\n        expr = this.makeAutorelease(expr);\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    var expr = module.createCallIndirect(indexArg, operands, signature.toSignatureString());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      } else {\r\n        expr = this.makeAutorelease(expr);\r\n      }\r\n    }\r\n    return module.createBlock(null, [\r\n      module.createSetGlobal(this.ensureArgcVar(), // might be calling a trampoline\r\n        module.createI32(numArguments)\r\n      ),\r\n      expr\r\n    ], this.currentType.toNativeType()); // not necessarily wrapped\r\n  }\r\n\r\n  compileCommaExpression(\r\n    expression: CommaExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\r\n        ContextualFlags.IMPLICIT | ContextualFlags.WILL_DROP\r\n      );\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, contextualFlags);\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(\r\n    expression: ElementAccessExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var target = this.resolver.resolveElementAccessExpression(\r\n      expression,\r\n      this.currentFlow,\r\n      contextualType\r\n    ); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS: {\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.expression.range, (<Class>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let thisArg = this.compileExpression(expression.expression, (<Class>target).type,\r\n          ContextualFlags.IMPLICIT\r\n        );\r\n        return this.compileCallDirect(indexedGet, [\r\n          expression.elementExpression\r\n        ], expression, thisArg, false, contextualFlags & (ContextualFlags.WILL_DROP | ContextualFlags.SKIP_AUTORELEASE));\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileFunctionExpression(\r\n    expression: FunctionExpression,\r\n    contextualSignature: Signature | null,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\r\n    assert(!declaration.typeParameters); // function expression cannot be generic\r\n    var flow = this.currentFlow;\r\n    var actualFunction = flow.actualFunction;\r\n    var prototype = new FunctionPrototype(\r\n      declaration.name.text.length\r\n        ? declaration.name.text\r\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\r\n      actualFunction,\r\n      declaration,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var instance: Function | null;\r\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\r\n\r\n    // compile according to context. this differs from a normal function in that omitted parameter\r\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\r\n    if (contextualSignature) {\r\n      let signatureNode = prototype.signatureNode;\r\n      let parameterNodes = signatureNode.parameters;\r\n      let numPresentParameters = parameterNodes.length;\r\n\r\n      // must not require more than the maximum number of parameters\r\n      let parameterTypes = contextualSignature.parameterTypes;\r\n      let numParameters = parameterTypes.length;\r\n      if (numPresentParameters > numParameters) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          expression.range, numParameters.toString(), numPresentParameters.toString()\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n\r\n      // check non-omitted parameter types\r\n      let parameterNames = new Array<string>(numPresentParameters);\r\n      for (let i = 0; i < numPresentParameters; ++i) {\r\n        let parameterNode = parameterNodes[i];\r\n        parameterNames[i] = parameterNode.name.text; // use actual name\r\n        if (!isTypeOmitted(parameterNode.type)) {\r\n          let resolvedType = this.resolver.resolveType(\r\n            parameterNode.type,\r\n            actualFunction.parent,\r\n            contextualTypeArguments\r\n          );\r\n          if (!resolvedType) return this.module.createUnreachable();\r\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\r\n            );\r\n            return this.module.createUnreachable();\r\n          }\r\n        }\r\n        // any unused parameters are inherited but ignored\r\n      }\r\n\r\n      // check non-omitted return type\r\n      let returnType = contextualSignature.returnType;\r\n      if (!isTypeOmitted(signatureNode.returnType)) {\r\n        let resolvedType = this.resolver.resolveType(\r\n          signatureNode.returnType,\r\n          actualFunction.parent,\r\n          contextualTypeArguments\r\n        );\r\n        if (!resolvedType) return this.module.createUnreachable();\r\n        if (\r\n          returnType == Type.void\r\n            ? resolvedType != Type.void\r\n            : !resolvedType.isStrictlyAssignableTo(returnType)\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n      }\r\n\r\n      // check explicit this type\r\n      let thisType = contextualSignature.thisType;\r\n      let thisTypeNode = signatureNode.explicitThisType;\r\n      if (thisTypeNode) {\r\n        if (!thisType) {\r\n          this.error(\r\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n            thisTypeNode.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let resolvedType = this.resolver.resolveType(\r\n          thisTypeNode,\r\n          actualFunction.parent,\r\n          contextualTypeArguments\r\n        );\r\n        if (!resolvedType) return this.module.createUnreachable();\r\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n      }\r\n\r\n      let signature = new Signature(parameterTypes, returnType, thisType);\r\n      signature.requiredParameters = numParameters; // !\r\n      signature.parameterNames = parameterNames;\r\n      instance = new Function(\r\n        prototype.name,\r\n        prototype,\r\n        signature,\r\n        contextualTypeArguments\r\n      );\r\n      if (!this.compileFunction(instance)) return this.module.createUnreachable();\r\n      this.currentType = contextualSignature.type;\r\n\r\n    // otherwise compile like a normal function\r\n    } else {\r\n      instance = this.compileFunctionUsingTypeArguments(\r\n        prototype,\r\n        [],\r\n        contextualTypeArguments\r\n      );\r\n      if (!instance) return this.module.createUnreachable();\r\n      this.currentType = instance.signature.type;\r\n    }\r\n\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\r\n  private maybeCompileEnclosingSource(expression: Expression): void {\r\n    var internalPath = expression.range.source.internalPath;\r\n    var filesByName = this.program.filesByName;\r\n    assert(filesByName.has(internalPath));\r\n    var enclosingFile = filesByName.get(internalPath)!;\r\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\r\n      this.compileFileByPath(internalPath, expression);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var actualFunction = flow.actualFunction;\r\n\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // {\r\n              //   if (!this) this = <ALLOC>\r\n              //   this.a = X\r\n              //   this.b = Y\r\n              //   return this\r\n              // }\r\n              let stmts: ExpressionRef[] = [\r\n                module.createIf(\r\n                  module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                    module.createGetLocal(thisLocal.index, nativeSizeType)\r\n                  ),\r\n                  module.createSetLocal(thisLocal.index,\r\n                    this.makeRetain(\r\n                      this.makeAllocation(<Class>classInstance)\r\n                    )\r\n                  )\r\n                )\r\n              ];\r\n              this.makeFieldInitialization(<Class>classInstance, stmts);\r\n              stmts.push(\r\n                module.createGetLocal(thisLocal.index, nativeSizeType)\r\n              );\r\n              this.currentType = thisLocal.type;\r\n              return module.createBlock(null, stmts, nativeSizeType);\r\n            }\r\n          }\r\n          // if not a constructor, `this` type can differ\r\n          let thisType = assert(actualFunction.signature.thisType);\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(thisLocal.index, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let flow = this.currentFlow;\r\n        let actualFunction = flow.actualFunction;\r\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\r\n            // TS1034 in the parser effectively limits this to property accesses\r\n            this.error(\r\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\r\n              expression.range\r\n            );\r\n          }\r\n        }\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let baseClassInstance = (<Class>classInstance).base;\r\n          if (baseClassInstance) {\r\n            let superType = baseClassInstance.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    this.maybeCompileEnclosingSource(expression);\r\n\r\n    // otherwise resolve\r\n    var target = this.resolver.resolveIdentifier( // reports\r\n      expression,\r\n      flow,\r\n      this.currentEnum || actualFunction\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let type = (<Local>target).type;\r\n        assert(type != Type.void);\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, contextualFlags);\r\n        }\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\r\n          type = type.nonNullableType;\r\n        }\r\n        this.currentType = type;\r\n        return this.module.createGetLocal(localIndex, type.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, contextualFlags);\r\n        }\r\n        this.currentType = type;\r\n        return this.module.createGetGlobal((<Global>target).internalName, type.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\r\n          return this.module.createI32(i64_low((<EnumValue>target).constantIntegerValue));\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = this.resolver.resolveFunction(\r\n          <FunctionPrototype>target,\r\n          null,\r\n          makeMap<string,Type>(flow.contextualTypeArguments)\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.createI32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileInstanceOfExpression(\r\n    expression: InstanceOfExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\r\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\r\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\r\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\r\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType);\r\n    var actualType = this.currentType;\r\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\r\n    this.currentType = Type.bool;\r\n    if (!expectedType) return module.createUnreachable();\r\n\r\n    // instanceof <basic> - must be exact\r\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\r\n      return module.createBlock(null, [\r\n        this.convertExpression(expr, actualType, Type.void, (contextualFlags & ContextualFlags.EXPLICIT) != 0, false, expression.expression),\r\n        module.createI32(actualType == expectedType ? 1 : 0)\r\n      ], NativeType.I32);\r\n    }\r\n\r\n    // <basic> instanceof <reference> - always false\r\n    if (!actualType.is(TypeFlags.REFERENCE)) {\r\n      return module.createBlock(null, [\r\n        this.convertExpression(expr, actualType, Type.void, (contextualFlags & ContextualFlags.EXPLICIT) != 0,false, expression.expression),\r\n        module.createI32(0)\r\n      ], NativeType.I32);\r\n    }\r\n\r\n    // both LHS and RHS are references now\r\n    var nativeSizeType = actualType.toNativeType();\r\n\r\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\r\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\r\n\r\n      // downcast - check statically\r\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\r\n        return module.createBinary(\r\n          nativeSizeType == NativeType.I64\r\n            ? BinaryOp.NeI64\r\n            : BinaryOp.NeI32,\r\n          expr,\r\n          actualType.toNativeZero(module)\r\n        );\r\n      }\r\n\r\n      // upcast - check dynamically\r\n      if (expectedType.isAssignableTo(actualType)) {\r\n        let program = this.program;\r\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(actualType, false);\r\n          let instanceofInstance = assert(program.instanceofInstance);\r\n          this.compileFunction(instanceofInstance);\r\n          return module.createIf(\r\n            module.createUnary(\r\n              nativeSizeType == NativeType.I64\r\n                ? UnaryOp.EqzI64\r\n                : UnaryOp.EqzI32,\r\n              module.createTeeLocal(tempLocal.index, expr),\r\n            ),\r\n            module.createI32(0),\r\n            this.makeCallDirect(instanceofInstance, [\r\n              module.createGetLocal(tempLocal.index, nativeSizeType),\r\n              module.createI32(expectedType.classReference!.id)\r\n            ], expression)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n        }\r\n      }\r\n\r\n    // either none or both nullable\r\n    } else {\r\n\r\n      // downcast - check statically\r\n      if (actualType.isAssignableTo(expectedType)) {\r\n        return module.createBlock(null, [\r\n          this.convertExpression(expr, actualType, Type.void, (contextualFlags & ContextualFlags.EXPLICIT) != 0, false, expression.expression),\r\n          module.createI32(1)\r\n        ], NativeType.I32);\r\n\r\n      // upcast - check dynamically\r\n      } else if (expectedType.isAssignableTo(actualType)) {\r\n        let program = this.program;\r\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\r\n          // FIXME: the temp local and the if can be removed here once flows\r\n          // perform null checking, which would error earlier when checking\r\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(actualType, false);\r\n          let instanceofInstance = assert(program.instanceofInstance);\r\n          this.compileFunction(instanceofInstance);\r\n          return module.createIf(\r\n            module.createUnary(\r\n              nativeSizeType == NativeType.I64\r\n                ? UnaryOp.EqzI64\r\n                : UnaryOp.EqzI32,\r\n              module.createTeeLocal(tempLocal.index, expr),\r\n            ),\r\n            module.createI32(0),\r\n            this.makeCallDirect(instanceofInstance, [\r\n              module.createGetLocal(tempLocal.index, nativeSizeType),\r\n              module.createI32(expectedType.classReference!.id)\r\n            ], expression)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // false\r\n    return module.createBlock(null, [\r\n      this.convertExpression(expr, actualType, Type.void, (contextualFlags & ContextualFlags.EXPLICIT) != 0, false, expression.expression),\r\n      module.createI32(0)\r\n    ], NativeType.I32);\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags,\r\n    implicitlyNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitlyNegate);\r\n        let classType = contextualType.classReference;\r\n        if (classType) {\r\n          if (classType.prototype == this.program.arrayPrototype) {\r\n            return this.compileArrayLiteral(\r\n              assert(classType.typeArguments)[0],\r\n              (<ArrayLiteralExpression>expression).elementExpressions,\r\n              false, // TODO: isConst?\r\n              contextualFlags,\r\n              expression\r\n            );\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitlyNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitlyNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\r\n        this.currentType = type;\r\n        switch (type.kind) {\r\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\r\n          case TypeKind.I64: return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\r\n          case TypeKind.U64: return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.F32: return module.createF32(i64_to_f32(intValue));\r\n          case TypeKind.F64: return module.createF64(i64_to_f64(intValue));\r\n          default: return module.createI32(i64_low(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitlyNegate);\r\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\r\n      }\r\n      case LiteralKind.OBJECT: {\r\n        assert(!implicitlyNegate);\r\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\r\n      }\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\r\n    return this.ensureStaticString(expression.value);\r\n  }\r\n\r\n  compileArrayLiteral(\r\n    elementType: Type,\r\n    expressions: (Expression | null)[],\r\n    isConst: bool,\r\n    contextualFlags: ContextualFlags,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var program = this.program;\r\n    var arrayPrototype = assert(program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\r\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\r\n    var arrayType = arrayInstance.type;\r\n    var flow = this.currentFlow;\r\n\r\n    // block those here so compiling expressions doesn't conflict\r\n    var tempThis = flow.getTempLocal(arrayType);\r\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\r\n\r\n    // compile value expressions and find out whether all are constant\r\n    var length = expressions.length;\r\n    var values = new Array<ExpressionRef>(length);\r\n    var allValuesAreConstant = true;\r\n    var nativeElementType = elementType.toNativeType();\r\n    for (let i = 0; i < length; ++i) {\r\n      let expression = expressions[i];\r\n      let expr = expression\r\n        ? module.precomputeExpression(\r\n            this.compileExpression(<Expression>expression, elementType,\r\n              ContextualFlags.IMPLICIT\r\n            )\r\n          )\r\n        : elementType.toNativeZero(module);\r\n      if (getExpressionId(expr) == ExpressionId.Const) {\r\n        assert(getExpressionType(expr) == nativeElementType);\r\n      } else {\r\n        if (isConst) {\r\n          this.warning(\r\n            DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n            reportNode.range\r\n          );\r\n        }\r\n        allValuesAreConstant = false;\r\n      }\r\n      values[i] = expr;\r\n    }\r\n\r\n    // if the array is static, make a static arraybuffer segment\r\n    if (allValuesAreConstant) {\r\n      flow.freeTempLocal(tempThis);\r\n      flow.freeTempLocal(tempDataStart);\r\n\r\n      let runtimeHeaderSize = program.runtimeHeaderSize;\r\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\r\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\r\n\r\n      // make both the buffer and array header static if assigned to a global. this can't be done\r\n      // if inside of a function because each invocation must create a new array reference then.\r\n      if (contextualFlags & ContextualFlags.STATIC_CAPABLE) {\r\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\r\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\r\n        this.currentType = arrayType;\r\n        return program.options.isWasm64\r\n          ? this.module.createI64(i64_low(arrayAddress), i64_high(arrayAddress))\r\n          : this.module.createI32(i64_low(arrayAddress));\r\n\r\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\r\n      } else {\r\n        // makeArray(length, alignLog2, classId, staticBuffer)\r\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\r\n          module.createI32(length),\r\n          program.options.isWasm64\r\n            ? module.createI64(elementType.alignLog2)\r\n            : module.createI32(elementType.alignLog2),\r\n          module.createI32(arrayInstance.id),\r\n          program.options.isWasm64\r\n            ? module.createI64(i64_low(bufferAddress), i64_high(bufferAddress))\r\n            : module.createI32(i64_low(bufferAddress))\r\n        ], reportNode);\r\n        this.currentType = arrayType;\r\n        return this.makeAutorelease(this.makeRetain(expr));\r\n      }\r\n    }\r\n\r\n    // otherwise compile an explicit instantiation with indexed sets\r\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\r\n    if (!setter) {\r\n      flow.freeTempLocal(tempThis);\r\n      flow.freeTempLocal(tempDataStart);\r\n      this.error(\r\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n        reportNode.range, arrayInstance.internalName\r\n      );\r\n      this.currentType = arrayType;\r\n      return module.createUnreachable();\r\n    }\r\n    var nativeArrayType = arrayType.toNativeType();\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\r\n    stmts.push(\r\n      module.createSetLocal(tempThis.index,\r\n        this.makeCallDirect(program.allocArrayInstance, [\r\n          module.createI32(length),\r\n          program.options.isWasm64\r\n            ? module.createI64(elementType.alignLog2)\r\n            : module.createI32(elementType.alignLog2),\r\n          module.createI32(arrayInstance.id),\r\n          program.options.isWasm64\r\n            ? module.createI64(0)\r\n            : module.createI32(0)\r\n        ], reportNode),\r\n      )\r\n    );\r\n    // tempData = tempThis.dataStart\r\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\r\n    assert(dataStart.kind == ElementKind.FIELD);\r\n    stmts.push(\r\n      module.createSetLocal(tempDataStart.index,\r\n        module.createLoad(arrayType.byteSize, false,\r\n          module.createGetLocal(tempThis.index, nativeArrayType),\r\n          nativeArrayType,\r\n          (<Field>dataStart).memoryOffset\r\n        )\r\n      )\r\n    );\r\n    var isManaged = elementType.isManaged;\r\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\r\n      let valueExpr = values[i];\r\n      if (isManaged) {\r\n        // value = __retain(value)\r\n        valueExpr = this.makeRetain(valueExpr);\r\n      }\r\n      // store<T>(tempData, value, immOffset)\r\n      stmts.push(\r\n        module.createStore(elementType.byteSize,\r\n          module.createGetLocal(tempDataStart.index, nativeArrayType),\r\n          valueExpr,\r\n          nativeElementType,\r\n          i << alignLog2\r\n        )\r\n      );\r\n    }\r\n    // -> tempThis\r\n    stmts.push(\r\n      module.createGetLocal(tempThis.index, nativeArrayType)\r\n    );\r\n    flow.freeTempLocal(tempThis);\r\n    flow.freeTempLocal(tempDataStart);\r\n    this.currentType = arrayType;\r\n    return module.createBlock(null, stmts, nativeArrayType);\r\n  }\r\n\r\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // contextual type must be a class\r\n    var classReference = contextualType.classReference;\r\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, \"<object>\", contextualType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // if present, check that the constructor is compatible with object literals\r\n    var ctor = classReference.constructorInstance;\r\n    if (ctor) {\r\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\r\n      // object literal and use them to call the ctor while not generating a store.\r\n      if (ctor.signature.requiredParameters) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PRIVATE)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PROTECTED)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // check and compile field values\r\n    var names = expression.names;\r\n    var numNames = names.length;\r\n    var values = expression.values;\r\n    var members = classReference.members;\r\n    var hasErrors = false;\r\n    var exprs = new Array<ExpressionRef>(numNames + 2);\r\n    var flow = this.currentFlow;\r\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\r\n    assert(numNames == values.length);\r\n    for (let i = 0, k = numNames; i < k; ++i) {\r\n      let member = members ? members.get(names[i].text) : null;\r\n      if (!member || member.kind != ElementKind.FIELD) {\r\n        this.error(\r\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n          names[i].range, names[i].text, classReference.toString()\r\n        );\r\n        hasErrors = true;\r\n        continue;\r\n      }\r\n      let type = (<Field>member).type;\r\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\r\n        type.byteSize,\r\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\r\n        this.compileExpression(values[i], (<Field>member).type, ContextualFlags.IMPLICIT),\r\n        type.toNativeType(),\r\n        (<Field>member).memoryOffset\r\n      );\r\n    }\r\n    this.currentType = classReference.type.nonNullableType;\r\n    if (hasErrors) return module.createUnreachable();\r\n\r\n    // allocate a new instance first and assign 'this' to the temp. local\r\n    exprs[0] = module.createSetLocal(\r\n      tempLocal.index,\r\n      this.makeRetain(\r\n        this.makeAllocation(classReference)\r\n      )\r\n    );\r\n\r\n    // once all field values have been set, return 'this'\r\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\r\n\r\n    this.currentType = classReference.type;\r\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\r\n  }\r\n\r\n  compileNewExpression(\r\n    expression: NewExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.resolver.resolveExpression( // reports\r\n      expression.expression,\r\n      flow\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance: Class | null = null;\r\n    var typeArguments = expression.typeArguments;\r\n    var classReference: Class | null;\r\n    if (\r\n      !typeArguments &&\r\n      (classReference = contextualType.classReference) !== null &&\r\n      classReference.is(CommonFlags.GENERIC)\r\n    ) {\r\n      classInstance = this.resolver.resolveClass(\r\n        classPrototype,\r\n        classReference.typeArguments,\r\n        makeMap<string,Type>(flow.contextualTypeArguments)\r\n      );\r\n    } else {\r\n      classInstance = this.resolver.resolveClassInclTypeArguments(\r\n        classPrototype,\r\n        typeArguments,\r\n        flow.actualFunction.parent, // relative to caller\r\n        makeMap<string,Type>(flow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n    if (!classInstance) return module.createUnreachable();\r\n    if (contextualType == Type.void) contextualFlags |= ContextualFlags.WILL_DROP;\r\n    return this.compileInstantiate(classInstance, expression.arguments, contextualFlags, expression);\r\n  }\r\n\r\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\r\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\r\n    var instance = classInstance.constructorInstance;\r\n    if (instance) {\r\n      // do not attempt to compile it if inlined anyway\r\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\r\n      return instance;\r\n    }\r\n\r\n    // clone base constructor if a derived class\r\n    var baseClass = classInstance.base;\r\n    if (baseClass) {\r\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\r\n      instance = new Function(\r\n        CommonSymbols.constructor,\r\n        new FunctionPrototype(\r\n          CommonSymbols.constructor,\r\n          classInstance,\r\n          // declaration is important, i.e. to access optional parameter initializers\r\n          (<FunctionDeclaration>baseCtor.declaration).clone()\r\n        ),\r\n        baseCtor.signature,\r\n        null\r\n      );\r\n\r\n    // otherwise make a default constructor\r\n    } else {\r\n      instance = new Function(\r\n        CommonSymbols.constructor,\r\n        new FunctionPrototype(\r\n          CommonSymbols.constructor,\r\n          classInstance,\r\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\r\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\r\n          )\r\n        ),\r\n        new Signature(null, classInstance.type, classInstance.type),\r\n        null\r\n      );\r\n    }\r\n\r\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\r\n    instance.set(CommonFlags.COMPILED);\r\n    instance.prototype.setResolvedInstance(\"\", instance);\r\n    classInstance.constructorInstance = instance;\r\n    var previousFlow = this.currentFlow;\r\n    this.currentFlow = instance.flow;\r\n\r\n    // generate body\r\n    var signature = instance.signature;\r\n    var module = this.module;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var stmts = new Array<ExpressionRef>();\r\n\r\n    // {\r\n    //   if (!this) this = <ALLOC>\r\n    //   IF_DERIVED: this = super(this, ...args)\r\n    //   this.a = X\r\n    //   this.b = Y\r\n    //   return this\r\n    // }\r\n    stmts.push(\r\n      module.createIf(\r\n        module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n          module.createGetLocal(0, nativeSizeType)\r\n        ),\r\n        module.createSetLocal(0,\r\n          this.makeRetain(\r\n            this.makeAllocation(classInstance)\r\n          )\r\n        )\r\n      )\r\n    );\r\n    if (baseClass) {\r\n      let parameterTypes = signature.parameterTypes;\r\n      let numParameters = parameterTypes.length;\r\n      let operands = new Array<ExpressionRef>(1 + numParameters);\r\n      operands[0] = module.createGetLocal(0, nativeSizeType);\r\n      for (let i = 0; i < numParameters; ++i) {\r\n        operands[i + 1] = module.createGetLocal(i + 1, parameterTypes[i].toNativeType());\r\n      }\r\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\r\n      stmts.push(\r\n        module.createSetLocal(0,\r\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode)\r\n        )\r\n      );\r\n    }\r\n    this.makeFieldInitialization(classInstance, stmts);\r\n    stmts.push(\r\n      module.createGetLocal(0, nativeSizeType)\r\n    );\r\n\r\n    // make the function\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var locals = instance.localsByIndex;\r\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\r\n    var numOperands = 1 + signature.parameterTypes.length;\r\n    var numLocals = locals.length;\r\n    if (numLocals > numOperands) {\r\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\r\n    }\r\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes,\r\n      flatten(module, stmts, nativeSizeType)\r\n    );\r\n    instance.finalize(module, funcRef);\r\n    this.currentFlow = previousFlow;\r\n    return instance;\r\n  }\r\n\r\n  compileInstantiate(\r\n    /** Class to instantiate. */\r\n    classInstance: Class,\r\n    /** Constructor arguments. */\r\n    argumentExpressions: Expression[],\r\n    /** Contextual flags. */\r\n    contextualFlags: ContextualFlags,\r\n    /** Node to report on. */\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var ctor = this.ensureConstructor(classInstance, reportNode);\r\n    var expr = this.compileCallDirect( // no need for another autoreleased local\r\n      ctor,\r\n      argumentExpressions,\r\n      reportNode,\r\n      this.options.usizeType.toNativeZero(this.module),\r\n      false,\r\n      contextualFlags\r\n    );\r\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\r\n      this.currentType = classInstance.type; // important because a super ctor could be called\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    this.maybeCompileEnclosingSource(propertyAccess);\r\n\r\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static field\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, contextualFlags);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>theEnum)) {\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\r\n          return module.createI32(i64_low((<EnumValue>target).constantIntegerValue));\r\n        }\r\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          assert(this.resolver.currentThisExpression),\r\n          this.options.usizeType\r\n        );\r\n        this.currentType = (<Field>target).type;\r\n        return module.createLoad(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\r\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\r\n        if (getterPrototype) {\r\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\r\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let getterInstance = assert((<Property>target).getterInstance);\r\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\r\n          this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType\r\n          )\r\n        );\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.error(\r\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\r\n          propertyAccess.range, (<FunctionPrototype>target).name\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileTernaryExpression(\r\n    expression: TernaryExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    var condExpr = this.module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpressionRetainType(expression.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Try to eliminate unnecesssary branches if the condition is constant\r\n    if (\r\n      getExpressionId(condExpr) == ExpressionId.Const &&\r\n      getExpressionType(condExpr) == NativeType.I32\r\n    ) {\r\n      return getConstValueI32(condExpr)\r\n        ? this.compileExpressionRetainType(ifThen, contextualType)\r\n        : this.compileExpressionRetainType(ifElse, contextualType);\r\n    }\r\n\r\n    var ifThenFlow = outerFlow.fork();\r\n    this.currentFlow = ifThenFlow;\r\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, contextualFlags & ContextualFlags.SKIP_AUTORELEASE);\r\n    var ifThenType = this.currentType;\r\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\r\n\r\n    var ifElseFlow = outerFlow.fork();\r\n    this.currentFlow = ifElseFlow;\r\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, contextualFlags & ContextualFlags.SKIP_AUTORELEASE);\r\n    var ifElseType = this.currentType;\r\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\r\n\r\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\r\n      );\r\n      this.currentType = contextualType;\r\n      return this.module.createUnreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(\r\n      ifThenExpr,\r\n      ifThenType, commonType,\r\n      false, false,\r\n      ifThen\r\n    );\r\n    ifElseExpr = this.convertExpression(\r\n      ifElseExpr,\r\n      ifElseType, commonType,\r\n      false, false,\r\n      ifElse\r\n    );\r\n    this.currentType = commonType;\r\n\r\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\r\n      if (!IfThenAutoreleaseSkipped) {\r\n        ifThenExpr = this.makeRetain(ifThenExpr);\r\n        IfThenAutoreleaseSkipped = true;\r\n      } else {\r\n        ifElseExpr = this.makeRetain(ifElseExpr);\r\n        ifElseAutoreleaseSkipped = true;\r\n      }\r\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\r\n      // if (!(contextualFlags & ContextualFlags.SKIP_AUTORELEASE)) {\r\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\r\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\r\n      // }\r\n    }\r\n\r\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\r\n    ifThenFlow.freeScopedLocals();\r\n\r\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\r\n    ifElseFlow.freeScopedLocals();\r\n\r\n    this.currentFlow = outerFlow;\r\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\r\n\r\n    var expr = this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\r\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\r\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n    return expr;\r\n  }\r\n\r\n  compileUnaryPostfixExpression(\r\n    expression: UnaryPostfixExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ContextualFlags.NONE\r\n    );\r\n\r\n    // shortcut if compiling the getter already failed\r\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\r\n\r\n    // if the value isn't dropped, a temp. local is required to remember the original value\r\n    var tempLocal: Local | null = null;\r\n    if (contextualType != Type.void) {\r\n      tempLocal = flow.getTempLocal(this.currentType);\r\n      getValue = module.createTeeLocal(\r\n        tempLocal.index,\r\n        getValue\r\n      );\r\n    }\r\n\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(\r\n              BinaryOp.AddI32,\r\n              getValue,\r\n              module.createI32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\r\n                if (overload) {\r\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            expr = module.createBinary(\r\n              options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              getValue,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(\r\n              BinaryOp.AddI64,\r\n              getValue,\r\n              module.createI64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(\r\n              BinaryOp.AddF32,\r\n              getValue,\r\n              module.createF32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(\r\n              BinaryOp.AddF64,\r\n              getValue,\r\n              module.createF64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(\r\n              BinaryOp.SubI32,\r\n              getValue,\r\n              module.createI32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\r\n                if (overload) {\r\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            expr = module.createBinary(\r\n              options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              getValue,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(\r\n              BinaryOp.SubI64,\r\n              getValue,\r\n              module.createI64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(\r\n              BinaryOp.SubF32,\r\n              getValue,\r\n              module.createF32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(\r\n              BinaryOp.SubF64,\r\n              getValue,\r\n              module.createF64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    var resolver = this.resolver;\r\n    var target = resolver.resolveExpression(expression.operand, flow); // reports\r\n\r\n    // simplify if dropped anyway\r\n    if (!tempLocal) {\r\n      this.currentType = Type.void;\r\n      if (!target) return module.createUnreachable();\r\n      return this.makeAssignment(\r\n        target,\r\n        expr,\r\n        expression.operand,\r\n        resolver.currentThisExpression,\r\n        resolver.currentElementExpression,\r\n        false\r\n      );\r\n    } else if (!target) {\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\r\n    var setValue = this.makeAssignment(\r\n      target,\r\n      expr, // includes a tee of getValue to tempLocal\r\n      expression.operand,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      false\r\n    );\r\n\r\n    this.currentType = tempLocal.type;\r\n    flow.freeTempLocal(tempLocal);\r\n    var nativeType = tempLocal.type.toNativeType();\r\n\r\n    return module.createBlock(null, [\r\n      setValue,\r\n      module.createGetLocal(tempLocal.index, nativeType)\r\n    ], nativeType); // result of 'x++' / 'x--' might overflow\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ContextualFlags.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        // nop\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, ContextualFlags.NONE, true);\r\n          // compileExpression normally does this:\r\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n          break;\r\n        }\r\n\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ContextualFlags.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              this.currentType.toNativeZero(module),\r\n              expr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createUnary(UnaryOp.NegF32, expr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createUnary(UnaryOp.NegF64, expr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ContextualFlags.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ContextualFlags.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ContextualFlags.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          // allow '!' for references even without an overload\r\n        }\r\n\r\n        expr = this.makeIsFalseish(expr, this.currentType);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          ContextualFlags.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        } else {\r\n          expr = this.convertExpression(expr,\r\n            this.currentType, this.currentType.intType,\r\n            false, false,\r\n            expression.operand\r\n          );\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              this.currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    if (!compound) return expr;\r\n    var resolver = this.resolver;\r\n    var target = resolver.resolveExpression(expression.operand, this.currentFlow);\r\n    if (!target) return module.createUnreachable();\r\n    return this.makeAssignment(\r\n      target,\r\n      expr,\r\n      expression.operand,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\r\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    switch (type.kind) {\r\n      case TypeKind.I8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(24)\r\n                ),\r\n                module.createI32(24)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.I16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(16)\r\n                ),\r\n                module.createI32(16)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xffff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.BOOL: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          // bool is special in that it compares to 0 instead of masking with 0x1\r\n          expr = module.createBinary(BinaryOp.NeI32,\r\n            expr,\r\n            module.createI32(0)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\r\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\r\n    var parentFunction = this.currentFlow.parentFunction;\r\n    var source = range.source;\r\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n    range.debugInfoRef = expr;\r\n    parentFunction.debugLocations.push(range);\r\n  }\r\n\r\n  // === Specialized code generation ==============================================================\r\n\r\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\r\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return module.createUnary(UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createUnary(UnaryOp.EqzI64, expr);\r\n      }\r\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\r\n      case TypeKind.ISIZE: {\r\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\r\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.BOOL: // not a mask, just != 0\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return expr;\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n      }\r\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\r\n      case TypeKind.ISIZE: {\r\n        return type.size == 64\r\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n          : expr;\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\r\n  makeAllocation(\r\n    classInstance: Class\r\n  ): ExpressionRef {\r\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\r\n    var program = this.program;\r\n    assert(classInstance.program == program);\r\n    var module = this.module;\r\n    var options = this.options;\r\n    this.currentType = classInstance.type;\r\n    var allocInstance = program.allocInstance;\r\n    this.compileFunction(allocInstance);\r\n    return module.createCall(allocInstance.internalName, [\r\n      options.isWasm64\r\n        ? module.createI64(classInstance.currentMemoryOffset)\r\n        : module.createI32(classInstance.currentMemoryOffset),\r\n      module.createI32(\r\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\r\n          ? 0\r\n          : classInstance.id\r\n      )\r\n    ], options.nativeSizeType);\r\n  }\r\n\r\n  /** Makes the initializers for a class's fields. */\r\n  makeFieldInitialization(\r\n    classInstance: Class,\r\n    stmts: ExpressionRef[] = []\r\n  ): ExpressionRef[] {\r\n    var members = classInstance.members;\r\n    if (!members) return [];\r\n\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\r\n    var thisLocalIndex = isInline\r\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\r\n      : 0;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n\r\n    for (let member of members.values()) {\r\n      if (\r\n        member.kind != ElementKind.FIELD || // not a field\r\n        member.parent != classInstance      // inherited field\r\n      ) continue;\r\n\r\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\r\n      let fieldType = field.type;\r\n      let nativeFieldType = fieldType.toNativeType();\r\n      let initializerNode = field.prototype.initializerNode;\r\n      if (initializerNode) { // use initializer\r\n        stmts.push(\r\n          module.createStore(fieldType.byteSize,\r\n            module.createGetLocal(thisLocalIndex, nativeSizeType),\r\n            this.compileExpression(initializerNode, fieldType, // reports\r\n              ContextualFlags.IMPLICIT\r\n            ),\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          )\r\n        );\r\n      } else {\r\n        let parameterIndex = field.prototype.parameterIndex;\r\n        stmts.push(\r\n          module.createStore(fieldType.byteSize,\r\n            module.createGetLocal(thisLocalIndex, nativeSizeType),\r\n            parameterIndex >= 0 // initialized via parameter (here: a local)\r\n              ? module.createGetLocal(\r\n                  isInline\r\n                    ? assert(flow.lookupLocal(field.name)).index\r\n                    : 1 + parameterIndex, // this is local 0\r\n                  nativeFieldType\r\n                )\r\n              : fieldType.toNativeZero(module),\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          )\r\n        );\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  makeInstanceOfClass(\r\n    expr: ExpressionRef,\r\n    classInstance: Class\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var idTemp = flow.getTempLocal(Type.i32);\r\n    var idExpr = module.createLoad(4, false,\r\n      module.createBinary(BinaryOp.SubI32,\r\n        expr,\r\n        module.createI32(this.program.runtimeHeaderSize)\r\n      ),\r\n      NativeType.I32\r\n    );\r\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\r\n    var conditions: ExpressionRef[] = [];\r\n    conditions.push(\r\n      module.createDrop( // br_if returns the value too\r\n        module.createBreak(label,\r\n          module.createBinary(BinaryOp.EqI32, // classId == class.id\r\n            module.createTeeLocal(idTemp.index, idExpr),\r\n            module.createI32(classInstance.id)\r\n          ),\r\n          module.createI32(1) // ? true\r\n        )\r\n      )\r\n    );\r\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\r\n    // TODO: simplify if there are none\r\n    conditions.push(\r\n      module.createI32(0) // : false\r\n    );\r\n    flow.freeTempLocal(idTemp);\r\n    flow.popBreakLabel();\r\n    return module.createBlock(label, conditions, NativeType.I32);\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleImportName(\r\n  element: Element,\r\n  declaration: DeclarationStatement\r\n): void {\r\n  // by default, use the file name as the module name\r\n  mangleImportName_moduleName = declaration.range.source.simplePath;\r\n  // and the internal name of the element within that file as the element name\r\n  mangleImportName_elementName = mangleInternalName(\r\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\r\n  );\r\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\r\n\r\n  var program = element.program;\r\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\r\n  var args = decorator.arguments;\r\n  if (args && args.length) {\r\n    let arg = args[0];\r\n    // if one argument is given, override just the element name\r\n    // if two arguments are given, override both module and element name\r\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n      if (args.length >= 2) {\r\n        arg = args[1];\r\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n          mangleImportName_moduleName = mangleImportName_elementName;\r\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n          if (args.length > 2) {\r\n            program.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"2\", args.length.toString()\r\n            );\r\n          }\r\n        } else {\r\n          program.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            arg.range\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      program.error(\r\n        DiagnosticCode.String_literal_expected,\r\n        arg.range\r\n      );\r\n    }\r\n  } else {\r\n    program.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      decorator.range, \"1\", \"0\"\r\n    );\r\n  }\r\n}\r\n\r\nvar mangleImportName_moduleName: string;\r\nvar mangleImportName_elementName: string;\r\n\r\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\r\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\r\n  var length = stmts.length;\r\n  if (length == 0) return module.createNop(); // usually filtered out again\r\n  if (length == 1) return stmts[0];\r\n  return module.createBlock(null, stmts,\r\n    type == NativeType.Auto\r\n      ? getExpressionType(stmts[length - 1])\r\n      : type\r\n  );\r\n}\r\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_present_to_use_0 = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Module_cannot_have_multiple_start_functions = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  TODO_Cannot_inline_inferred_calls_and_specific_internals_yet = 224,\n  Expression_is_never_null = 225,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be present to use '{0}'.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Module cannot have multiple start functions.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"TODO: Cannot inline inferred calls and specific internals yet.\";\n    case 225: return \"Expression is never 'null'.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\r\n * A control flow analyzer.\r\n * @module flow\r\n *//***/\r\n\r\nimport {\r\n  Type,\r\n  TypeFlags,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  Local,\r\n  Function,\r\n  Element,\r\n  ElementKind,\r\n  Global\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionId,\r\n  ExpressionRef,\r\n\r\n  getExpressionId,\r\n  getGetLocalIndex,\r\n  isTeeLocal,\r\n  getSetLocalValue,\r\n  getGetGlobalName,\r\n  getBinaryOp,\r\n  BinaryOp,\r\n  getBinaryLeft,\r\n  getConstValueI32,\r\n  getBinaryRight,\r\n  getUnaryOp,\r\n  UnaryOp,\r\n  getExpressionType,\r\n  getConstValueI64Low,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getLoadBytes,\r\n  isLoadSigned,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getCallTarget,\r\n  getSetLocalIndex,\r\n  getIfCondition,\r\n  getConstValueI64High,\r\n  getUnaryValue,\r\n  getCallOperand,\r\n  getCallOperandCount\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node\r\n} from \"./ast\";\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  // categorical\r\n\r\n  /** This flow returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This flow returns a wrapped value. */\r\n  RETURNS_WRAPPED = 1 << 1,\r\n  /** This flow returns a non-null value. */\r\n  RETURNS_NONNULL = 1 << 2,\r\n  /** This flow throws. */\r\n  THROWS = 1 << 3,\r\n  /** This flow breaks. */\r\n  BREAKS = 1 << 4,\r\n  /** This flow continues. */\r\n  CONTINUES = 1 << 5,\r\n  /** This flow allocates. Constructors only. */\r\n  ALLOCATES = 1 << 6,\r\n  /** This flow calls super. Constructors only. */\r\n  CALLS_SUPER = 1 << 7,\r\n\r\n  // conditional\r\n\r\n  /** This flow conditionally returns in a child flow. */\r\n  CONDITIONALLY_RETURNS = 1 << 8,\r\n  /** This flow conditionally throws in a child flow. */\r\n  CONDITIONALLY_THROWS = 1 << 9,\r\n  /** This flow conditionally breaks in a child flow. */\r\n  CONDITIONALLY_BREAKS = 1 << 10,\r\n  /** This flow conditionally continues in a child flow. */\r\n  CONDITIONALLY_CONTINUES = 1 << 11,\r\n  /** This flow conditionally allocates in a child flow. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 12,\r\n\r\n  // special\r\n\r\n  /** This is an inlining flow. */\r\n  INLINE_CONTEXT = 1 << 13,\r\n  /** This is a flow with explicitly disabled bounds checking. */\r\n  UNCHECKED_CONTEXT = 1 << 14,\r\n\r\n  // masks\r\n\r\n  /** Any terminating flag. */\r\n  ANY_TERMINATING = FlowFlags.RETURNS\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = FlowFlags.RETURNS\r\n                  | FlowFlags.RETURNS_WRAPPED\r\n                  | FlowFlags.RETURNS_NONNULL\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES\r\n                  | FlowFlags.ALLOCATES\r\n                  | FlowFlags.CALLS_SUPER,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\r\n                  | FlowFlags.CONDITIONALLY_THROWS\r\n                  | FlowFlags.CONDITIONALLY_BREAKS\r\n                  | FlowFlags.CONDITIONALLY_CONTINUES\r\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\r\n}\r\n\r\n/** Flags indicating the current state of a local. */\r\nexport enum LocalFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** Local is properly wrapped. Relevant for small integers. */\r\n  WRAPPED = 1 << 0,\r\n  /** Local is non-null. */\r\n  NONNULL = 1 << 1,\r\n  /** Local is read from. */\r\n  READFROM = 1 << 2,\r\n  /** Local is written to. */\r\n  WRITTENTO = 1 << 3,\r\n  /** Local is retained. */\r\n  RETAINED = 1 << 4,\r\n\r\n  /** Local is conditionally read from. */\r\n  CONDITIONALLY_READFROM = 1 << 5,\r\n  /** Local is conditionally written to. */\r\n  CONDITIONALLY_WRITTENTO = 1 << 6,\r\n  /** Local must be conditionally retained. */\r\n  CONDITIONALLY_RETAINED = 1 << 7,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = WRAPPED\r\n                  | NONNULL\r\n                  | READFROM\r\n                  | WRITTENTO\r\n                  | RETAINED,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = RETAINED\r\n                  | CONDITIONALLY_READFROM\r\n                  | CONDITIONALLY_WRITTENTO\r\n                  | CONDITIONALLY_RETAINED,\r\n\r\n  /** Any retained flag. */\r\n  ANY_RETAINED = RETAINED\r\n               | CONDITIONALLY_RETAINED\r\n}\r\nexport namespace LocalFlags {\r\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\r\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\r\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\r\n  }\r\n}\r\n\r\n/** Flags indicating the current state of a field. */\r\nexport enum FieldFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** Field is initialized. Relevant in constructors. */\r\n  INITIALIZED = 1 << 0,\r\n  /** Field is conditionally initialized. Relevant in constructors. */\r\n  CONDITIONALLY_INITIALIZED = 1 << 1,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = INITIALIZED,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\r\n}\r\nexport namespace FieldFlags {\r\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\r\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\r\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\r\n  }\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  parentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Local flags. */\r\n  localFlags: LocalFlags[];\r\n  /** Field flags. Relevant in constructors. */\r\n  fieldFlags: Map<string,FieldFlags> | null = null;\r\n  /** Function being inlined, when inlining. */\r\n  inlineFunction: Function | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  inlineReturnLabel: string | null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(parentFunction: Function): Flow {\r\n    var flow = new Flow();\r\n    flow.parent = null;\r\n    flow.flags = FlowFlags.NONE;\r\n    flow.parentFunction = parentFunction;\r\n    flow.continueLabel = null;\r\n    flow.breakLabel = null;\r\n    flow.returnType = parentFunction.signature.returnType;\r\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\r\n    flow.localFlags = [];\r\n    flow.inlineFunction = null;\r\n    flow.inlineReturnLabel = null;\r\n    return flow;\r\n  }\r\n\r\n  /** Creates an inline flow within `parentFunction`. */\r\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\r\n    var flow = Flow.create(parentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.inlineFunction = inlineFunction;\r\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\r\n    flow.returnType = inlineFunction.signature.returnType;\r\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\r\n    return flow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\r\n  get actualFunction(): Function {\r\n    return this.inlineFunction || this.parentFunction;\r\n  }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this flow has one of the specified flags. */\r\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Forks this flow to a child flow. */\r\n  fork(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.parentFunction = this.parentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    branch.localFlags = this.localFlags.slice();\r\n    branch.inlineFunction = this.inlineFunction;\r\n    branch.inlineReturnLabel = this.inlineReturnLabel;\r\n    return branch;\r\n  }\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type, wrapped: bool = false, nonNull: bool = false): Local {\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\r\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\r\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\r\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\r\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps && temps.length) {\r\n      local = temps.pop();\r\n      local.type = type;\r\n      local.flags = CommonFlags.NONE;\r\n    } else {\r\n      local = parentFunction.addLocal(type);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      if (wrapped) this.setLocalFlag(local.index, LocalFlags.WRAPPED);\r\n      else this.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\r\n    } else {\r\n      if (nonNull) this.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n      else this.unsetLocalFlag(local.index, LocalFlags.NONNULL);\r\n    }\r\n    return local;\r\n  }\r\n\r\n  /** Gets a local that sticks around until this flow is exited, and then released. */\r\n  getAutoreleaseLocal(type: Type): Local {\r\n    var local = this.getTempLocal(type);\r\n    local.set(CommonFlags.SCOPED);\r\n    var scopedLocals = this.scopedLocals;\r\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\r\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\r\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\r\n    return local;\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\r\n        break;\r\n      }\r\n      case NativeType.V128: {\r\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type, wrapped: bool = false, nonnull: bool = false): Local {\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\r\n        break;\r\n      }\r\n      case NativeType.V128: {\r\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps.length) {\r\n      local = temps[temps.length - 1];\r\n      local.type = type;\r\n    } else {\r\n      local = parentFunction.addLocal(type);\r\n      temps.push(local);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      if (wrapped) this.setLocalFlag(local.index, LocalFlags.WRAPPED);\r\n      else this.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\r\n    } else {\r\n      if (nonnull) this.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n      else this.unsetLocalFlag(local.index, LocalFlags.NONNULL);\r\n    }\r\n    return local;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(name: string, type: Type, wrapped: bool, reportNode: Node | null = null): Local {\r\n    var scopedLocal = this.getTempLocal(type);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (reportNode) {\r\n          this.parentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            reportNode.range\r\n          );\r\n        }\r\n        return existingLocal;\r\n      }\r\n    }\r\n    scopedLocal.set(CommonFlags.SCOPED);\r\n    this.scopedLocals.set(name, scopedLocal);\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      if (wrapped) this.setLocalFlag(scopedLocal.index, LocalFlags.WRAPPED);\r\n      else this.unsetLocalFlag(scopedLocal.index, LocalFlags.WRAPPED);\r\n    }\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\r\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (reportNode) {\r\n          this.parentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            reportNode.range\r\n          );\r\n        }\r\n        return existingLocal;\r\n      }\r\n    }\r\n    assert(index < this.parentFunction.localsByIndex.length);\r\n    var scopedAlias = new Local(\r\n      name,\r\n      index,\r\n      type,\r\n      this.parentFunction\r\n    );\r\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\r\n    this.scopedLocals.set(name, scopedAlias);\r\n    return scopedAlias;\r\n  }\r\n\r\n  /** Blocks any locals that might be used in an inlining operation. */\r\n  blockLocalsBeforeInlining(instance: Function): Local[] {\r\n    var signature = instance.signature;\r\n    var parameterTypes = signature.parameterTypes;\r\n    var numParameters = parameterTypes.length;\r\n    var temps = new Array<Local>(numParameters);\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      temps[i] = this.getTempLocal(parameterTypes[i]);\r\n    }\r\n    var thisType = signature.thisType;\r\n    if (thisType) temps.push(this.getTempLocal(thisType));\r\n    return temps;\r\n  }\r\n\r\n  /** Unblocks the specified locals. */\r\n  unblockLocals(temps: Local[]): void {\r\n    for (let i = 0, k = temps.length; i < k; ++i) {\r\n      this.freeTempLocal(temps[i]);\r\n    }\r\n  }\r\n\r\n  /** Frees this flow's scoped variables and returns its parent flow. */\r\n  freeScopedLocals(): void {\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          this.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n  }\r\n\r\n  /** Looks up the local of the specified name in the current scope. */\r\n  lookupLocal(name: string): Local | null {\r\n    var current: Flow | null = this;\r\n    var scope: Map<String,Local> | null;\r\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\r\n    while (current = current.parent);\r\n    return this.parentFunction.localsByName.get(name);\r\n  }\r\n\r\n  /** Looks up the element with the specified name relative to the scope of this flow. */\r\n  lookup(name: string): Element | null {\r\n    var element = this.lookupLocal(name);\r\n    if (element) return element;\r\n    return this.actualFunction.lookup(name);\r\n  }\r\n\r\n  /** Tests if the local at the specified index has the specified flag or flags. */\r\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\r\n    if (index < 0) return defaultIfInlined;\r\n    var localFlags = this.localFlags;\r\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\r\n  }\r\n\r\n  /** Tests if the local at the specified index has any of the specified flags. */\r\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\r\n    if (index < 0) return defaultIfInlined;\r\n    var localFlags = this.localFlags;\r\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\r\n  }\r\n\r\n  /** Sets the specified flag or flags on the local at the specified index. */\r\n  setLocalFlag(index: i32, flag: LocalFlags): void {\r\n    if (index < 0) return;\r\n    var localFlags = this.localFlags;\r\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\r\n    this.localFlags[index] = flags | flag;\r\n  }\r\n\r\n  /** Unsets the specified flag or flags on the local at the specified index. */\r\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\r\n    if (index < 0) return;\r\n    var localFlags = this.localFlags;\r\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\r\n    this.localFlags[index] = flags & ~flag;\r\n  }\r\n\r\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\r\n  pushBreakLabel(): string {\r\n    var parentFunction = this.parentFunction;\r\n    var id = parentFunction.nextBreakId++;\r\n    var stack = parentFunction.breakStack;\r\n    if (!stack) parentFunction.breakStack = [ id ];\r\n    else stack.push(id);\r\n    return parentFunction.breakLabel = id.toString(10);\r\n  }\r\n\r\n  /** Pops the most recent break label from the stack. */\r\n  popBreakLabel(): void {\r\n    var parentFunction = this.parentFunction;\r\n    var stack = assert(parentFunction.breakStack);\r\n    var length = assert(stack.length);\r\n    stack.pop();\r\n    if (length > 1) {\r\n      parentFunction.breakLabel = stack[length - 2].toString(10);\r\n    } else {\r\n      parentFunction.breakLabel = null;\r\n      parentFunction.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\r\n  inherit(other: Flow): void {\r\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\r\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\r\n  }\r\n\r\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\r\n  inheritConditional(other: Flow): void {\r\n    if (other.is(FlowFlags.RETURNS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (other.is(FlowFlags.THROWS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (other.is(FlowFlags.ALLOCATES)) {\r\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n    var localFlags = other.localFlags;\r\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\r\n      let flags = localFlags[i];\r\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\r\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\r\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\r\n    }\r\n  }\r\n\r\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\r\n  inheritMutual(left: Flow, right: Flow): void {\r\n    // categorical flags set in both arms\r\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\r\n\r\n    // conditional flags set in at least one arm\r\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\r\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\r\n\r\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\r\n    var leftLocalFlags = left.localFlags;\r\n    var numLeftLocalFlags = leftLocalFlags.length;\r\n    var rightLocalFlags = right.localFlags;\r\n    var numRightLocalFlags = rightLocalFlags.length;\r\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\r\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\r\n      combinedFlags[i] = LocalFlags.join(\r\n        unchecked(leftLocalFlags[i]),\r\n        i < numRightLocalFlags\r\n          ? unchecked(rightLocalFlags[i])\r\n          : 0\r\n      );\r\n    }\r\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\r\n      combinedFlags[i] = LocalFlags.join(\r\n        0,\r\n        unchecked(rightLocalFlags[i])\r\n      );\r\n    }\r\n    this.localFlags = combinedFlags;\r\n  }\r\n\r\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\r\n  isNonnull(type: Type, expr: ExpressionRef): bool {\r\n    if (!type.is(TypeFlags.NULLABLE)) return true;\r\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\r\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\r\n    // has already been handled by the nullable type check above.\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: {\r\n        if (!isTeeLocal(expr)) break;\r\n        let local = this.parentFunction.localsByIndex[getSetLocalIndex(expr)];\r\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getGetLocalIndex(expr)];\r\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\r\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\r\n    // A: `expr` is true-ish -> Q: how did that happen?\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: {\r\n        if (!isTeeLocal(expr)) break;\r\n        let local = this.parentFunction.localsByIndex[getSetLocalIndex(expr)];\r\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n        this.inheritNonnullIfTrue(getSetLocalValue(expr)); // must have been true-ish as well\r\n        break;\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getGetLocalIndex(expr)];\r\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n        break;\r\n      }\r\n      case ExpressionId.If: {\r\n        let ifFalse = getIfFalse(expr);\r\n        if (!ifFalse) break;\r\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\r\n          // Logical AND: (if (condition ifTrue 0))\r\n          // the only way this had become true is if condition and ifTrue are true\r\n          if (\r\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\r\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\r\n          ) {\r\n            this.inheritNonnullIfTrue(getIfCondition(expr));\r\n            this.inheritNonnullIfTrue(getIfTrue(expr));\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.EqI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\r\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\r\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.EqI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\r\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\r\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Call: {\r\n        let name = getCallTarget(expr);\r\n        let program = this.parentFunction.program;\r\n        switch (name) {\r\n          case program.retainInstance.internalName:\r\n          case program.retainReleaseInstance.internalName: {\r\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\r\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\r\n    // A: `expr` is false-ish -> Q: how did that happen?\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.If: {\r\n        let ifTrue = getIfTrue(expr);\r\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\r\n          let ifFalse = getIfFalse(expr);\r\n          if (!ifFalse) break;\r\n          // Logical OR: (if (condition 1 ifFalse))\r\n          // the only way this had become false is if condition and ifFalse are false\r\n          if (\r\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\r\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\r\n          ) {\r\n            this.inheritNonnullIfFalse(getIfCondition(expr));\r\n            this.inheritNonnullIfFalse(getIfFalse(expr));\r\n          }\r\n\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n          // remember: we want to know how the _entire_ expression became FALSE (!)\r\n          case BinaryOp.EqI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.EqI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\r\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\r\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\r\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\r\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\r\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\r\n   * expression might already have overflown and returns `false` only if the operation neglects\r\n   * any possible combination of garbage bits being present.\r\n   */\r\n  canOverflow(expr: ExpressionRef, type: Type): bool {\r\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\r\n    // opportunities here, obviously.\r\n    assert(type != Type.void);\r\n\r\n    // types other than i8, u8, i16, u16 and bool do not overflow\r\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\r\n\r\n    var operand: ExpressionRef;\r\n    switch (getExpressionId(expr)) {\r\n\r\n      // overflows if the local isn't wrapped or the conversion does\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getGetLocalIndex(expr)];\r\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\r\n            || canConversionOverflow(local.type, type);\r\n      }\r\n\r\n      // overflows if the value does\r\n      case ExpressionId.LocalSet: { // tee\r\n        assert(isTeeLocal(expr));\r\n        return this.canOverflow(getSetLocalValue(expr), type);\r\n      }\r\n\r\n      // overflows if the conversion does (globals are wrapped on set)\r\n      case ExpressionId.GlobalGet: {\r\n        // TODO: this is inefficient because it has to read a string\r\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGetGlobalName(expr))));\r\n        assert(global.kind == ElementKind.GLOBAL);\r\n        return canConversionOverflow(assert((<Global>global).type), type);\r\n      }\r\n\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64:\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64:\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtU32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtU64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64:\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeU32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeU64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64:\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtU32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtU64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64:\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeU32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeU64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: return false;\r\n\r\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\r\n          case BinaryOp.MulI32: {\r\n            return !(\r\n              (\r\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryRight(expr), type)\r\n                  )\r\n                )\r\n              ) || (\r\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryLeft(expr), type)\r\n                  )\r\n                )\r\n              )\r\n            );\r\n          }\r\n\r\n          // result won't overflow if one side is a constant less than this type's mask or one side\r\n          // is wrapped\r\n          case BinaryOp.AndI32: {\r\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\r\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\r\n            return !(\r\n              (\r\n                (\r\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              ) || (\r\n                (\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              )\r\n            );\r\n          }\r\n\r\n          // overflows if the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShlI32: {\r\n            let shift = 32 - type.size;\r\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\r\n                || getConstValueI32(operand) < shift;\r\n          }\r\n\r\n          // overflows if the value does and the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShrI32: {\r\n            let shift = 32 - type.size;\r\n            return this.canOverflow(getBinaryLeft(expr), type) && (\r\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\r\n              getConstValueI32(operand) < shift\r\n            );\r\n          }\r\n\r\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\r\n          // wrapped, it can't overflow.\r\n          case BinaryOp.ShrU32: {\r\n            let shift = 32 - type.size;\r\n            return type.is(TypeFlags.SIGNED)\r\n              ? !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) > shift // must clear MSB\r\n                )\r\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) >= shift // can leave MSB\r\n                );\r\n          }\r\n\r\n          // overflows if any side does\r\n          case BinaryOp.DivU32:\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemU32: {\r\n            return this.canOverflow(getBinaryLeft(expr), type)\r\n                || this.canOverflow(getBinaryRight(expr), type);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: return false;\r\n\r\n          // overflow if the maximum result (32) cannot be represented in the target type\r\n          case UnaryOp.ClzI32:\r\n          case UnaryOp.CtzI32:\r\n          case UnaryOp.PopcntI32: return type.size < 7;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the value cannot be represented in the target type\r\n      case ExpressionId.Const: {\r\n        let value: i32 = 0;\r\n        switch (getExpressionType(expr)) {\r\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\r\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\r\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\r\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\r\n          default: assert(false);\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\r\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\r\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\r\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\r\n          case TypeKind.BOOL: return (value & ~1) != 0;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the conversion does\r\n      case ExpressionId.Load: {\r\n        let fromType: Type;\r\n        switch (getLoadBytes(expr)) {\r\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\r\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\r\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\r\n        }\r\n        return canConversionOverflow(fromType, type);\r\n      }\r\n\r\n      // overflows if the result does, which is either\r\n      // - the last expression of the block, by contract, if the block doesn't have a label\r\n      // - the last expression or the value of an inner br if the block has a label (TODO)\r\n      case ExpressionId.Block: {\r\n        if (!getBlockName(expr)) {\r\n          let size = assert(getBlockChildCount(expr));\r\n          let last = getBlockChild(expr, size - 1);\r\n          return this.canOverflow(last, type);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.If: {\r\n        return this.canOverflow(getIfTrue(expr), type)\r\n            || this.canOverflow(assert(getIfFalse(expr)), type);\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.Select: {\r\n        return this.canOverflow(getSelectThen(expr), type)\r\n            || this.canOverflow(getSelectElse(expr), type);\r\n      }\r\n\r\n      // overflows if the call does not return a wrapped value or the conversion does\r\n      case ExpressionId.Call: {\r\n        let program = this.parentFunction.program;\r\n        let instancesByName = program.instancesByName;\r\n        let instanceName = assert(getCallTarget(expr));\r\n        if (instancesByName.has(instanceName)) {\r\n          let instance = instancesByName.get(instanceName)!;\r\n          assert(instance.kind == ElementKind.FUNCTION);\r\n          let returnType = (<Function>instance).signature.returnType;\r\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\r\n              || canConversionOverflow(returnType, type);\r\n        }\r\n        return false; // assume no overflow for builtins\r\n      }\r\n\r\n      // doesn't technically overflow\r\n      case ExpressionId.Unreachable: return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  toString(): string {\r\n    var levels = 0;\r\n    var parent = this.parent;\r\n    while (parent) {\r\n      parent = parent.parent;\r\n      ++levels;\r\n    }\r\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\r\n  }\r\n}\r\n\r\n/** Tests if a conversion from one type to another can technically overflow. */\r\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\r\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\r\n      || fromType.size > toType.size\r\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\r\n}\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\n import {\r\n  Compiler,\r\n  ContextualFlags,\r\n  RuntimeFeatures,\r\n  flatten\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression,\r\n  CallExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  AtomicRMWOp,\r\n  SIMDExtractOp,\r\n  SIMDReplaceOp,\r\n  SIMDShiftOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI64High,\r\n  getConstValueI64Low,\r\n  getConstValueI32,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  Relooper,\r\n  RelooperBlockRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  FunctionPrototype,\r\n  Field,\r\n  Global,\r\n  DecoratorFlags,\r\n  Program,\r\n  Element\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags\r\n} from \"./flow\";\r\n\r\nimport {\r\n  ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  Feature,\r\n  TypeinfoFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeF32,\r\n  writeF64,\r\n  isPowerOf2\r\n} from \"./util\";\r\n\r\n/** Symbols of various compiler built-ins. */\r\nexport namespace BuiltinSymbols {\r\n  // std/builtins.ts\r\n  export const isInteger = \"~lib/builtins/isInteger\";\r\n  export const isFloat = \"~lib/builtins/isFloat\";\r\n  export const isBoolean = \"~lib/builtins/isBoolean\";\r\n  export const isSigned = \"~lib/builtins/isSigned\";\r\n  export const isReference = \"~lib/builtins/isReference\";\r\n  export const isString = \"~lib/builtins/isString\";\r\n  export const isArray = \"~lib/builtins/isArray\";\r\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\r\n  export const isFunction = \"~lib/builtins/isFunction\";\r\n  export const isNullable = \"~lib/builtins/isNullable\";\r\n  export const isDefined = \"~lib/builtins/isDefined\";\r\n  export const isConstant = \"~lib/builtins/isConstant\";\r\n  export const isManaged = \"~lib/builtins/isManaged\";\r\n\r\n  export const clz = \"~lib/builtins/clz\";\r\n  export const ctz = \"~lib/builtins/ctz\";\r\n  export const popcnt = \"~lib/builtins/popcnt\";\r\n  export const rotl = \"~lib/builtins/rotl\";\r\n  export const rotr = \"~lib/builtins/rotr\";\r\n  export const abs = \"~lib/builtins/abs\";\r\n  export const max = \"~lib/builtins/max\";\r\n  export const min = \"~lib/builtins/min\";\r\n  export const ceil = \"~lib/builtins/ceil\";\r\n  export const floor = \"~lib/builtins/floor\";\r\n  export const copysign = \"~lib/builtins/copysign\";\r\n  export const nearest = \"~lib/builtins/nearest\";\r\n  export const reinterpret = \"~lib/builtins/reinterpret\";\r\n  export const sqrt = \"~lib/builtins/sqrt\";\r\n  export const trunc = \"~lib/builtins/trunc\";\r\n  export const load = \"~lib/builtins/load\";\r\n  export const store = \"~lib/builtins/store\";\r\n  export const atomic_load = \"~lib/builtins/atomic.load\";\r\n  export const atomic_store = \"~lib/builtins/atomic.store\";\r\n  export const atomic_add = \"~lib/builtins/atomic.add\";\r\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\r\n  export const atomic_and = \"~lib/builtins/atomic.and\";\r\n  export const atomic_or = \"~lib/builtins/atomic.or\";\r\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\r\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\r\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\r\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\r\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\r\n\r\n  export const sizeof = \"~lib/builtins/sizeof\";\r\n  export const alignof = \"~lib/builtins/alignof\";\r\n  export const offsetof = \"~lib/builtins/offsetof\";\r\n  export const select = \"~lib/builtins/select\";\r\n  export const unreachable = \"~lib/builtins/unreachable\";\r\n  export const changetype = \"~lib/builtins/changetype\";\r\n  export const assert = \"~lib/builtins/assert\";\r\n  export const unchecked = \"~lib/builtins/unchecked\";\r\n  export const call_direct = \"~lib/builtins/call_direct\";\r\n  export const call_indirect = \"~lib/builtins/call_indirect\";\r\n  export const instantiate = \"~lib/builtins/instantiate\";\r\n  export const idof = \"~lib/builtins/idof\";\r\n\r\n  export const i8 = \"~lib/builtins/i8\";\r\n  export const i16 = \"~lib/builtins/i16\";\r\n  export const i32 = \"~lib/builtins/i32\";\r\n  export const i64 = \"~lib/builtins/i64\";\r\n  export const isize = \"~lib/builtins/isize\";\r\n  export const u8 = \"~lib/builtins/u8\";\r\n  export const u16 = \"~lib/builtins/u16\";\r\n  export const u32 = \"~lib/builtins/u32\";\r\n  export const u64 = \"~lib/builtins/u64\";\r\n  export const usize = \"~lib/builtins/usize\";\r\n  export const bool = \"~lib/builtins/bool\";\r\n  export const f32 = \"~lib/builtins/f32\";\r\n  export const f64 = \"~lib/builtins/f64\";\r\n  export const v128 = \"~lib/builtins/v128\";\r\n  export const void_ = \"~lib/builtins/void\";\r\n\r\n  export const i32_clz = \"~lib/builtins/i32.clz\";\r\n  export const i64_clz = \"~lib/builtins/i64.clz\";\r\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\r\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\r\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\r\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\r\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\r\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\r\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\r\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\r\n\r\n  export const f32_abs = \"~lib/builtins/f32.abs\";\r\n  export const f64_abs = \"~lib/builtins/f64.abs\";\r\n  export const f32_max = \"~lib/builtins/f32.max\";\r\n  export const f64_max = \"~lib/builtins/f64.max\";\r\n  export const f32_min = \"~lib/builtins/f32.min\";\r\n  export const f64_min = \"~lib/builtins/f64.min\";\r\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\r\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\r\n  export const f32_floor = \"~lib/builtins/f32.floor\";\r\n  export const f64_floor = \"~lib/builtins/f64.floor\";\r\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\r\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\r\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\r\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\r\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\r\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\r\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\r\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\r\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\r\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\r\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\r\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\r\n\r\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\r\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\r\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\r\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\r\n  export const i32_load = \"~lib/builtins/i32.load\";\r\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\r\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\r\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\r\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\r\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\r\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\r\n  export const i64_load = \"~lib/builtins/i64.load\";\r\n  export const f32_load = \"~lib/builtins/f32.load\";\r\n  export const f64_load = \"~lib/builtins/f64.load\";\r\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\r\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\r\n  export const i32_store = \"~lib/builtins/i32.store\";\r\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\r\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\r\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\r\n  export const i64_store = \"~lib/builtins/i64.store\";\r\n  export const f32_store = \"~lib/builtins/f32.store\";\r\n  export const f64_store = \"~lib/builtins/f64.store\";\r\n\r\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\r\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\r\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\r\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\r\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\r\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\r\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\r\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\r\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\r\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\r\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\r\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\r\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\r\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\r\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\r\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\r\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\r\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\r\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\r\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\r\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\r\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\r\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\r\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\r\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\r\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\r\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\r\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\r\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\r\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\r\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\r\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\r\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\r\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\r\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\r\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\r\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\r\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\r\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\r\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\r\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\r\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\r\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\r\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\r\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\r\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\r\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\r\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\r\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\r\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\r\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\r\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\r\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\r\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\r\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\r\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\r\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\r\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\r\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\r\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\r\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\r\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\r\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\r\n  export const i32_wait = \"~lib/builtins/i32.wait\";\r\n  export const i64_wait = \"~lib/builtins/i64.wait\";\r\n\r\n  export const v128_splat = \"~lib/builtins/v128.splat\";\r\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\r\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\r\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\r\n  export const v128_load = \"~lib/builtins/v128.load\";\r\n  export const v128_store = \"~lib/builtins/v128.store\";\r\n  export const v128_add = \"~lib/builtins/v128.add\";\r\n  export const v128_sub = \"~lib/builtins/v128.sub\";\r\n  export const v128_mul = \"~lib/builtins/v128.mul\";\r\n  export const v128_div = \"~lib/builtins/v128.div\";\r\n  export const v128_neg = \"~lib/builtins/v128.neg\";\r\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\r\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\r\n  export const v128_shl = \"~lib/builtins/v128.shl\";\r\n  export const v128_shr = \"~lib/builtins/v128.shr\";\r\n  export const v128_and = \"~lib/builtins/v128.and\";\r\n  export const v128_or = \"~lib/builtins/v128.or\";\r\n  export const v128_xor = \"~lib/builtins/v128.xor\";\r\n  export const v128_not = \"~lib/builtins/v128.not\";\r\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\r\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\r\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\r\n  export const v128_min = \"~lib/builtins/v128.min\";\r\n  export const v128_max = \"~lib/builtins/v128.max\";\r\n  export const v128_abs = \"~lib/builtins/v128.abs\";\r\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\r\n  export const v128_eq = \"~lib/builtins/v128.eq\";\r\n  export const v128_ne = \"~lib/builtins/v128.ne\";\r\n  export const v128_lt = \"~lib/builtins/v128.lt\";\r\n  export const v128_le = \"~lib/builtins/v128.le\";\r\n  export const v128_gt = \"~lib/builtins/v128.gt\";\r\n  export const v128_ge = \"~lib/builtins/v128.ge\";\r\n  export const v128_convert = \"~lib/builtins/v128.convert\";\r\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\r\n\r\n  export const i8x16 = \"~lib/builtins/i8x16\";\r\n  export const i16x8 = \"~lib/builtins/i16x8\";\r\n  export const i32x4 = \"~lib/builtins/i32x4\";\r\n  export const i64x2 = \"~lib/builtins/i64x2\";\r\n  export const f32x4 = \"~lib/builtins/f32x4\";\r\n  export const f64x2 = \"~lib/builtins/f64x2\";\r\n\r\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\r\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\r\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\r\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\r\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\r\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\r\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\r\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\r\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\r\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\r\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\r\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\r\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\r\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\r\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\r\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\r\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\r\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\r\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\r\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\r\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\r\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\r\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\r\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\r\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\r\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\r\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\r\n\r\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\r\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\r\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\r\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\r\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\r\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\r\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\r\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\r\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\r\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\r\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\r\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\r\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\r\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\r\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\r\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\r\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\r\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\r\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\r\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\r\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\r\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\r\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\r\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\r\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\r\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\r\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\r\n\r\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\r\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\r\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\r\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\r\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\r\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\r\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\r\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\r\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\r\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\r\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\r\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\r\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\r\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\r\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\r\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\r\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\r\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\r\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\r\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\r\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\r\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\r\n  export const i32x4_trunc_s_f32x4_sat = \"~lib/builtins/i32x4.trunc_s_f32x4_sat\";\r\n  export const i32x4_trunc_u_f32x4_sat = \"~lib/builtins/i32x4.trunc_u_f32x4_sat\";\r\n\r\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\r\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\r\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\r\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\r\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\r\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\r\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\r\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\r\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\r\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\r\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\r\n  export const i64x2_trunc_s_f64x2_sat = \"~lib/builtins/i64x2.trunc_s_f64x2_sat\";\r\n  export const i64x2_trunc_u_f64x2_sat = \"~lib/builtins/i64x2.trunc_u_f64x2_sat\";\r\n\r\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\r\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\r\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\r\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\r\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\r\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\r\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\r\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\r\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\r\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\r\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\r\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\r\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\r\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\r\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\r\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\r\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\r\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\r\n  export const f32x4_convert_s_i32x4 = \"~lib/builtins/f32x4.convert_s_i32x4\";\r\n  export const f32x4_convert_u_i32x4 = \"~lib/builtins/f32x4.convert_u_i32x4\";\r\n\r\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\r\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\r\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\r\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\r\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\r\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\r\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\r\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\r\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\r\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\r\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\r\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\r\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\r\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\r\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\r\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\r\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\r\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\r\n  export const f64x2_convert_s_i64x2 = \"~lib/builtins/f64x2.convert_s_i64x2\";\r\n  export const f64x2_convert_u_i64x2 = \"~lib/builtins/f64x2.convert_u_i64x2\";\r\n\r\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\r\n\r\n  // internals\r\n  export const HEAP_BASE = \"~lib/heap/HEAP_BASE\";\r\n  export const RTTI_BASE = \"~lib/rt/RTTI_BASE\";\r\n  export const visit_globals = \"~lib/rt/__visit_globals\";\r\n  export const visit_members = \"~lib/rt/__visit_members\";\r\n\r\n  // std/diagnostics.ts\r\n  export const ERROR = \"~lib/diagnostics/ERROR\";\r\n  export const WARNING = \"~lib/diagnostics/WARNING\";\r\n  export const INFO = \"~lib/diagnostics/INFO\";\r\n\r\n  // std/memory.ts\r\n  export const memory_size = \"~lib/memory/memory.size\";\r\n  export const memory_grow = \"~lib/memory/memory.grow\";\r\n  export const memory_copy = \"~lib/memory/memory.copy\";\r\n  export const memory_fill = \"~lib/memory/memory.fill\";\r\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\r\n  export const memory_free = \"~lib/memory/memory.free\";\r\n  export const memory_reset = \"~lib/memory/memory.reset\";\r\n\r\n  // std/runtime.ts\r\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\r\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\r\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\r\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\r\n  export const runtime_register = \"~lib/util/runtime/register\";\r\n  export const runtime_discard = \"~lib/util/runtime/discard\";\r\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\r\n\r\n  // std/typedarray.ts\r\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\r\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\r\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\r\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\r\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\r\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\r\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\r\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\r\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\r\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\r\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\r\n\r\n  // compiler generated\r\n  export const started = \"~lib/started\";\r\n  export const argc = \"~lib/argc\";\r\n  export const setargc = \"~lib/setargc\";\r\n  export const capabilities = \"~lib/capabilities\";\r\n}\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  /* Compiler reference. */\r\n  compiler: Compiler,\r\n  /** Respective function prototype. */\r\n  prototype: FunctionPrototype,\r\n  /** Pre-resolved type arguments. */\r\n  typeArguments: Type[] | null,\r\n  /** Operand expressions. */\r\n  operands: Expression[],\r\n  /** Contextual type. */\r\n  contextualType: Type,\r\n  /** Respective call expression. */\r\n  reportNode: CallExpression,\r\n  /** Indicates that contextual type is ASM type. */\r\n  isAsm: bool = false\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  // NOTE that consolidation of individual instructions into a single case isn't exactly scientific\r\n  // below, but rather done to make this file easier to work with. If there was a general rule it'd\r\n  // most likely be \"three or more instructions that only differ in their actual opcode\".\r\n\r\n  var directize = false;\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // === Static type evaluation =================================================================\r\n\r\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type == Type.bool\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.SIGNED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\r\n      }\r\n      return module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classReference = type.classReference;\r\n      if (!classReference) return module.createI32(0);\r\n      let classPrototype = classReference.prototype;\r\n      return module.createI32(classPrototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classReference = type.classReference;\r\n      if (!classReference) return module.createI32(0);\r\n      return module.createI32(classReference.isArrayLike ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return module.createI32(type.signatureReference ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return module.createI32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let element = compiler.resolver.resolveExpression(\r\n        operands[0],\r\n        compiler.currentFlow,\r\n        Type.void,\r\n        ReportMode.SWALLOW\r\n      );\r\n      return module.createI32(element ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32);\r\n      compiler.currentType = Type.bool;\r\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return module.createI32(type.isManaged ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let expr: ExpressionRef;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          expr = module.createI32(byteSize);\r\n        } else {\r\n          expr = module.createI64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          expr = module.createI64(byteSize, 0);\r\n        } else {\r\n          expr = module.createI32(byteSize);\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      assert(isPowerOf2(byteSize));\r\n      let alignLog2 = ctz<i32>(byteSize);\r\n      let expr: ExpressionRef;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          expr = module.createI32(alignLog2);\r\n        } else {\r\n          expr = module.createI64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          expr = module.createI64(alignLog2, 0);\r\n        } else {\r\n          expr = module.createI32(alignLog2);\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let classType = typeArguments![0].classReference;\r\n      if (!classType) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.createI32(offset);\r\n        } else {\r\n          return module.createI64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.createI64(offset);\r\n        } else {\r\n          return module.createI32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // === Math ===================================================================================\r\n\r\n    case BuiltinSymbols.clz: // any_bitcount<T?>(value: T) -> T\r\n    case BuiltinSymbols.ctz:\r\n    case BuiltinSymbols.popcnt: {\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, ContextualFlags.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.clz: {\r\n          switch (type.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.ClzI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.ClzI64\r\n                : UnaryOp.ClzI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.ClzI64; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.ctz: {\r\n          switch (type.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.CtzI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.CtzI64\r\n                : UnaryOp.CtzI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.CtzI64; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.popcnt: {\r\n          switch (compiler.currentType.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.PopcntI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.PopcntI64\r\n                : UnaryOp.PopcntI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.PopcntI64; break; }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      return module.createUnary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, ContextualFlags.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT);\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          expr = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            type\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          expr = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.ISIZE: {\r\n          expr = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0, arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          expr = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr; // possibly overflows\r\n    }\r\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, ContextualFlags.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT);\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          expr = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            type\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          expr = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.ISIZE: {\r\n          expr = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0, arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          expr = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr; // possibly overflowws\r\n    }\r\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFlow;\r\n\r\n          // possibly overflows, e.g. abs<i8>(-128) == 128\r\n          let tempLocal1 = flow.getTempLocal(Type.i32, false);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32, false).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 31)) ^ (x >> 31)\r\n          expr = module.createBinary(BinaryOp.XorI32,\r\n            module.createBinary(BinaryOp.AddI32,\r\n              module.createTeeLocal(\r\n                tempLocalIndex2,\r\n                module.createBinary(BinaryOp.ShrI32,\r\n                  module.createTeeLocal(tempLocalIndex1, arg0),\r\n                  module.createI32(31)\r\n                )\r\n              ),\r\n              module.createGetLocal(tempLocalIndex1, NativeType.I32)\r\n            ),\r\n            module.createGetLocal(tempLocalIndex2, NativeType.I32)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let options = compiler.options;\r\n          let flow = compiler.currentFlow;\r\n          let wasm64 = options.isWasm64;\r\n\r\n          let tempLocal1 = flow.getTempLocal(options.usizeType, false);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType, false).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          expr = module.createBinary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\r\n            module.createBinary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\r\n              module.createTeeLocal(\r\n                tempLocalIndex2,\r\n                module.createBinary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\r\n                  module.createTeeLocal(tempLocalIndex1, arg0),\r\n                  wasm64 ? module.createI64(63) : module.createI32(31)\r\n                )\r\n              ),\r\n              module.createGetLocal(tempLocalIndex1, options.nativeSizeType)\r\n            ),\r\n            module.createGetLocal(tempLocalIndex2, options.nativeSizeType)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let flow = compiler.currentFlow;\r\n\r\n          let tempLocal1 = flow.getTempLocal(Type.i64, false);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64, false).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 63)) ^ (x >> 63)\r\n          expr = module.createBinary(BinaryOp.XorI64,\r\n            module.createBinary(BinaryOp.AddI64,\r\n              module.createTeeLocal(\r\n                tempLocalIndex2,\r\n                module.createBinary(BinaryOp.ShrI64,\r\n                  module.createTeeLocal(tempLocalIndex1, arg0),\r\n                  module.createI64(63)\r\n                )\r\n              ),\r\n              module.createGetLocal(tempLocalIndex1, NativeType.I64)\r\n            ),\r\n            module.createGetLocal(tempLocalIndex2, NativeType.I64)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          expr = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT | ContextualFlags.WRAP);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: { op = BinaryOp.GtI32; break; }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\r\n        case TypeKind.I64: { op = BinaryOp.GtI64; break; }\r\n        case TypeKind.U64: { op = BinaryOp.GtU64; break; }\r\n        case TypeKind.ISIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.GtI64\r\n            : BinaryOp.GtI32;\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.GtU64\r\n            : BinaryOp.GtU32;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          return module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n        }\r\n        case TypeKind.F64: {\r\n          return module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      let flow = compiler.currentFlow;\r\n      let nativeType = type.toNativeType();\r\n      let tempLocal0 = flow.getTempLocal(type, true);\r\n      let tempLocal1 = flow.getAndFreeTempLocal(type, true);\r\n      flow.freeTempLocal(tempLocal0);\r\n      return module.createSelect(\r\n        module.createTeeLocal(tempLocal0.index, arg0),\r\n        module.createTeeLocal(tempLocal1.index, arg1),\r\n        module.createBinary(op,\r\n          module.createGetLocal(tempLocal0.index, nativeType),\r\n          module.createGetLocal(tempLocal1.index, nativeType)\r\n        )\r\n      );\r\n    }\r\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT | ContextualFlags.WRAP);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: { op = BinaryOp.LtI32; break; }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\r\n        case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\r\n        case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\r\n        case TypeKind.ISIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.LtI64\r\n            : BinaryOp.LtI32;\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.LtU64\r\n            : BinaryOp.LtU32;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          return module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n        }\r\n        case TypeKind.F64: {\r\n          return module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      let flow = compiler.currentFlow;\r\n      let nativeType = type.toNativeType();\r\n      let tempLocal0 = flow.getTempLocal(type, true);\r\n      let tempLocal1 = flow.getAndFreeTempLocal(type, true);\r\n      flow.freeTempLocal(tempLocal0);\r\n      return module.createSelect(\r\n        module.createTeeLocal(tempLocal0.index, arg0),\r\n        module.createTeeLocal(tempLocal1.index, arg1),\r\n        module.createBinary(op,\r\n          module.createGetLocal(tempLocal0.index, nativeType),\r\n          module.createGetLocal(tempLocal1.index, nativeType)\r\n        )\r\n      );\r\n    }\r\n    case BuiltinSymbols.ceil: // any_rounding<T?>(value: T) -> T\r\n    case BuiltinSymbols.floor: {\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: return arg0; // considered rounded\r\n        case TypeKind.F32: {\r\n          op = prototype.internalName == BuiltinSymbols.ceil\r\n            ? UnaryOp.CeilF32\r\n            : UnaryOp.FloorF32;\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          op = prototype.internalName == BuiltinSymbols.ceil\r\n            ? UnaryOp.CeilF64\r\n            : UnaryOp.FloorF64;\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      return module.createUnary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        // TODO: does an integer version make sense?\r\n        case TypeKind.F32: { op = BinaryOp.CopysignF32; break; }\r\n        case TypeKind.F64: { op = BinaryOp.CopysignF64; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      return module.createBinary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          expr = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.currentType = type;\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.f32, ContextualFlags.IMPLICIT);\r\n          expr = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.f64, ContextualFlags.IMPLICIT);\r\n          expr = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          let arg0 = compiler.compileExpression(operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32,\r\n            ContextualFlags.IMPLICIT\r\n          );\r\n          expr = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.i32, ContextualFlags.IMPLICIT);\r\n          expr = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.i64, ContextualFlags.IMPLICIT);\r\n          expr = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = type;\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.currentType = type;\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          expr = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          expr = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n\r\n    // === Memory access ==========================================================================\r\n\r\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      let outType = (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > type.size\r\n      ) ? contextualType : type;\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let numOperands = operands.length;\r\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = outType;\r\n        return module.createUnreachable();\r\n      }\r\n      let immAlign: i32;\r\n      let naturalAlign = type.byteSize;\r\n      if (numOperands == 3) {\r\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\r\n        if (immAlign < 0) {\r\n          compiler.currentType = outType;\r\n          return module.createUnreachable();\r\n        }\r\n        if (immAlign > naturalAlign) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\r\n          );\r\n          compiler.currentType = outType;\r\n          return module.createUnreachable();\r\n        }\r\n        if (!isPowerOf2(immAlign)) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_power_of_two,\r\n            operands[2].range, \"Alignment\"\r\n          );\r\n          compiler.currentType = outType;\r\n          return module.createUnreachable();\r\n        }\r\n      } else {\r\n        immAlign = naturalAlign;\r\n      }\r\n      compiler.currentType = outType;\r\n      return module.createLoad(\r\n        type.byteSize,\r\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        outType.toNativeType(),\r\n        immOffset,\r\n        immAlign\r\n      );\r\n    }\r\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            ContextualFlags.IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? ContextualFlags.NONE // no need to convert to small int (but now might result in a float)\r\n              : ContextualFlags.IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size          // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      let immAlign: i32;\r\n      let naturalAlign = type.byteSize;\r\n      if (operands.length == 4) {\r\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\r\n        if (immAlign < 0) {\r\n          compiler.currentType = Type.void;\r\n          return module.createUnreachable();\r\n        }\r\n        if (immAlign > naturalAlign) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\r\n          );\r\n          compiler.currentType = Type.void;\r\n          return module.createUnreachable();\r\n        }\r\n        if (!isPowerOf2(immAlign)) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_power_of_two,\r\n            operands[3].range, \"Alignment\"\r\n          );\r\n          compiler.currentType = Type.void;\r\n          return module.createUnreachable();\r\n        }\r\n      } else {\r\n        immAlign = naturalAlign;\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\r\n    }\r\n\r\n    // === Atomics ================================================================================\r\n\r\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      let outType = (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > type.size\r\n      ) ? contextualType : type;\r\n      if (!type.is(TypeFlags.INTEGER)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = outType;\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = outType;\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = outType;\r\n      return module.createAtomicLoad(\r\n        type.byteSize,\r\n        arg0,\r\n        outType.toNativeType(),\r\n        immOffset\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(\r\n            operands[1],\r\n            contextualType,\r\n            ContextualFlags.IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? ContextualFlags.NONE // no need to convert to small int (but now might result in a float)\r\n              : ContextualFlags.IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size          // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createAtomicStore(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\r\n    }\r\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\r\n    case BuiltinSymbols.atomic_sub:\r\n    case BuiltinSymbols.atomic_and:\r\n    case BuiltinSymbols.atomic_or:\r\n    case BuiltinSymbols.atomic_xor:\r\n    case BuiltinSymbols.atomic_xchg: {\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            ContextualFlags.IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? ContextualFlags.NONE // no need to convert to small int (but now might result in a float)\r\n              : ContextualFlags.IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size       // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = inType;\r\n        return module.createUnreachable();\r\n      }\r\n      let op: AtomicRMWOp;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\r\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\r\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\r\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\r\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\r\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\r\n      }\r\n      compiler.currentType = inType;\r\n      return module.createAtomicRMW(\r\n        op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType()\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize): T\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            ContextualFlags.IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? ContextualFlags.NONE // no need to convert to small int (but now might result in a float)\r\n              : ContextualFlags.IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      let arg2 = compiler.compileExpression(operands[2],\r\n        inType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size       // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        arg2 = compiler.convertExpression(arg2,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[2]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = inType;\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = inType;\r\n      return module.createAtomicCmpxchg(\r\n        type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType()\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64): i32;\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let arg1 = compiler.compileExpression(operands[1], type,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let arg2 = compiler.compileExpression(operands[2],\r\n        Type.i64,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      compiler.currentType = Type.i32;\r\n      return module.createAtomicWait(arg0, arg1, arg2, type.toNativeType());\r\n    }\r\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32): i32;\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let arg1 = compiler.compileExpression(operands[1],\r\n        Type.i32,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      compiler.currentType = Type.i32;\r\n      return module.createAtomicNotify(arg0, arg1);\r\n    }\r\n\r\n    // === Control flow ===========================================================================\r\n\r\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\r\n        : compiler.compileExpressionRetainType(operands[0], Type.i32);\r\n      let type = compiler.currentType;\r\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT);\r\n      let arg2 = compiler.makeIsTrueish(\r\n        compiler.compileExpressionRetainType(operands[2], Type.bool),\r\n        compiler.currentType // ^\r\n      );\r\n      compiler.currentType = type;\r\n      return module.createSelect(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.typeArgumentsRange, prototype.internalName\r\n        );\r\n      }\r\n      checkArgsRequired(operands, 0, reportNode, compiler);\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // === Memory =================================================================================\r\n\r\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      return module.createHost(HostOp.MemorySize);\r\n    }\r\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      return module.createHost(HostOp.MemoryGrow, null, [\r\n        compiler.compileExpression(operands[0], Type.i32, ContextualFlags.IMPLICIT)\r\n      ]);\r\n    }\r\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.createUnreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      let arg0 = compiler.compileExpression(operands[0], usizeType, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], usizeType, ContextualFlags.IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], usizeType, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = Type.void;\r\n      return module.createMemoryCopy(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.createUnreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      let arg0 = compiler.compileExpression(operands[0], usizeType, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, ContextualFlags.IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], usizeType, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = Type.void;\r\n      return module.createMemoryFill(arg0, arg1, arg2);\r\n    }\r\n\r\n    // === Helpers ================================================================================\r\n\r\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let toType = typeArguments![0];\r\n      let arg0 = compiler.compileExpressionRetainType(operands[0], toType);\r\n      let fromType = compiler.currentType;\r\n      compiler.currentType = toType;\r\n      if (fromType.size != toType.size) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      return arg0;\r\n    }\r\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\r\n      ) {\r\n        if (typeArguments) {\r\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\r\n          compiler.currentType = typeArguments[0].nonNullableType;\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\r\n        : compiler.compileExpressionRetainType(operands[0], Type.bool, ContextualFlags.WRAP);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // return ifTrueish if assertions are disabled\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) { // simplify if dropped anyway\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      // otherwise call abort if the assertion is false-ish\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n      compiler.currentType = type.nonNullableType;\r\n      let expr: ExpressionRef;\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        compiler.currentType = Type.void;\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32, arg0),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64, arg0),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            expr = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            expr = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.typeArgumentsRange\r\n            );\r\n            expr = abort;\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        compiler.currentType = type.nonNullableType;\r\n        switch (compiler.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(type, true /* arg0 is wrapped */);\r\n            expr = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64, false);\r\n            expr = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n            expr = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32, false);\r\n            expr = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64, false);\r\n            expr = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.typeArgumentsRange\r\n            );\r\n            expr = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let flow = compiler.currentFlow;\r\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\r\n      // eliminate unnecessary tees by preferring contextualType(=void):\r\n      let expr = compiler.compileExpression(operands[0], contextualType);\r\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.call_direct: directize = true;\r\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\r\n      let arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32);\r\n      let arg0Type = compiler.currentType;\r\n      if (!(\r\n        arg0Type == Type.u32 ||                                      // either plain index\r\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\r\n      )) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let numOperands = operands.length - 1;\r\n      let operandExprs = new Array<ExpressionRef>(numOperands);\r\n      let nativeReturnType = returnType.toNativeType();\r\n      let parameterTypes = new Array<Type>(numOperands);\r\n      let nativeParamTypes = new Array<NativeType>(numOperands);\r\n      for (let i = 0; i < numOperands; ++i) {\r\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32);\r\n        let operandType = compiler.currentType;\r\n        parameterTypes[i] = operandType;\r\n        nativeParamTypes[i] = operandType.toNativeType();\r\n      }\r\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\r\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\r\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\r\n      compiler.currentType = returnType;\r\n      if (directize) {\r\n        // if the index expression is precomputable to a constant value, emit a direct call\r\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\r\n          assert(getExpressionType(arg0) == NativeType.I32);\r\n          let index = getConstValueI32(arg0);\r\n          let functionTable = compiler.functionTable;\r\n          if (index >= 0 && index < functionTable.length) {\r\n            return module.createCall(functionTable[index], operandExprs, nativeReturnType);\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\r\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\r\n      return module.createCallIndirect(arg0, operandExprs, typeName);\r\n    }\r\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\r\n      ) return module.createUnreachable();\r\n      let classInstance = typeArguments![0].classReference;\r\n      if (!classInstance) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = classInstance.type;\r\n      return compiler.compileInstantiate(classInstance, operands, ContextualFlags.NONE, reportNode);\r\n    }\r\n\r\n    // === User-defined diagnostics ===============================================================\r\n\r\n    case BuiltinSymbols.ERROR: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.error(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    case BuiltinSymbols.WARNING: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.warning(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createNop();\r\n    }\r\n    case BuiltinSymbols.INFO: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.info(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createNop();\r\n    }\r\n\r\n    // === Portable type conversions ==============================================================\r\n\r\n    case BuiltinSymbols.i8: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i8, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i16: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i16, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i32, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i64, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.isize: {\r\n      let isizeType = compiler.options.isizeType;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = isizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], isizeType, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u8: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u8, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u16: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u16, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u32, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u64, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.usize: {\r\n      let usizeType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], usizeType, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.bool: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.bool, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.f32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f32, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.f64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f64, ContextualFlags.EXPLICIT);\r\n    }\r\n\r\n    // === SIMD ===================================================================================\r\n\r\n    case BuiltinSymbols.v128: // alias for now\r\n    case BuiltinSymbols.i8x16: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 16, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 16; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i8, ContextualFlags.IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.createUnreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI8(getConstValueI32(expr), bytes, i);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createV128(bytes);\r\n    }\r\n    case BuiltinSymbols.i16x8: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 8, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 8; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i16, ContextualFlags.IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.createUnreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI16(getConstValueI32(expr), bytes, i << 1);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createV128(bytes);\r\n    }\r\n    case BuiltinSymbols.i32x4: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 4, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 4; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i32, ContextualFlags.IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.createUnreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI32(getConstValueI32(expr), bytes, i << 2);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createV128(bytes);\r\n    }\r\n    case BuiltinSymbols.i64x2: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 2; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i64, ContextualFlags.IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.createUnreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I64);\r\n          let off = i << 3;\r\n          writeI32(getConstValueI64Low(expr), bytes, off);\r\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createV128(bytes);\r\n    }\r\n    case BuiltinSymbols.f32x4: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 4, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 4; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.f32, ContextualFlags.IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.createUnreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.F32);\r\n          writeF32(getConstValueF32(expr), bytes, i << 2);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createV128(bytes);\r\n    }\r\n    case BuiltinSymbols.f64x2: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 2; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.f64, ContextualFlags.IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.createUnreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.F64);\r\n          writeF64(getConstValueF64(expr), bytes, i << 3);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createV128(bytes);\r\n    }\r\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = UnaryOp.SplatVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = UnaryOp.SplatVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = UnaryOp.SplatVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = UnaryOp.SplatVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? UnaryOp.SplatVecI64x2\r\n            : UnaryOp.SplatVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = UnaryOp.SplatVecF32x4; break; }\r\n        case TypeKind.F64: { op = UnaryOp.SplatVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], type, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.createUnary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = type;\r\n        return module.createUnreachable();\r\n      }\r\n      let op: SIMDExtractOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneSVecI8x16; break; }\r\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneUVecI8x16; break; }\r\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneSVecI16x8; break; }\r\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneUVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? SIMDExtractOp.ExtractLaneVecI64x2\r\n            : SIMDExtractOp.ExtractLaneVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneVecF32x4; break; }\r\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = type;\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = type;\r\n      if (getExpressionId(arg1) != ExpressionId.Const) {\r\n        compiler.error(\r\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n          operands[1].range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      assert(getExpressionType(arg1) == NativeType.I32);\r\n      let maxIdx = (16 / type.byteSize) - 1;\r\n      let idx = getConstValueI32(arg1);\r\n      if (idx < 0 || idx > maxIdx) {\r\n        compiler.error(\r\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      return module.createSIMDExtract(op, arg0, idx);\r\n    }\r\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let op: SIMDReplaceOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? SIMDReplaceOp.ReplaceLaneVecI64x2\r\n            : SIMDReplaceOp.ReplaceLaneVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneVecF32x4; break; }\r\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, ContextualFlags.IMPLICIT);\r\n      if (getExpressionId(arg1) != ExpressionId.Const) {\r\n        compiler.error(\r\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n          operands[1].range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      assert(getExpressionType(arg1) == NativeType.I32);\r\n      let maxIdx = (16 / type.byteSize) - 1;\r\n      let idx = getConstValueI32(arg1);\r\n      if (idx < 0 || idx > maxIdx) {\r\n        compiler.error(\r\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg2 = compiler.compileExpression(operands[2], type, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.createSIMDReplace(op, arg0, idx, arg2);\r\n    }\r\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let laneWidth = type.byteSize;\r\n      let laneCount = 16 / laneWidth;\r\n      assert(isInteger(laneCount) && isPowerOf2(laneCount));\r\n      if (\r\n        checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.F32:\r\n        case TypeKind.F64: break;\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ContextualFlags.IMPLICIT);\r\n      let mask = new Uint8Array(16);\r\n      let maxIdx = (laneCount << 1) - 1;\r\n      for (let i = 0; i < laneCount; ++i) {\r\n        let operand = operands[2 + i];\r\n        let argN = compiler.precomputeExpression(operand, Type.u8, ContextualFlags.IMPLICIT);\r\n        if (getExpressionId(argN) != ExpressionId.Const) {\r\n          compiler.error(\r\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n            operand.range\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.createUnreachable();\r\n        }\r\n        assert(getExpressionType(argN) == NativeType.I32);\r\n        let idx = getConstValueI32(argN);\r\n        if (idx < 0 || idx > maxIdx) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (laneWidth) {\r\n          case 1: {\r\n            writeI8(idx, mask, i);\r\n            break;\r\n          }\r\n          case 2: {\r\n            let off8 = i << 1;\r\n            let idx8 = idx << 1;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            break;\r\n          }\r\n          case 4: {\r\n            let off8 = i << 2;\r\n            let idx8 = idx << 2;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            writeI8(idx8 + 2, mask, off8 + 2);\r\n            writeI8(idx8 + 3, mask, off8 + 3);\r\n            break;\r\n          }\r\n          case 8: {\r\n            let off8 = i << 3;\r\n            let idx8 = idx << 3;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            writeI8(idx8 + 2, mask, off8 + 2);\r\n            writeI8(idx8 + 3, mask, off8 + 3);\r\n            writeI8(idx8 + 4, mask, off8 + 4);\r\n            writeI8(idx8 + 5, mask, off8 + 5);\r\n            writeI8(idx8 + 6, mask, off8 + 6);\r\n            writeI8(idx8 + 7, mask, off8 + 7);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createSIMDShuffle(arg0, arg1, mask);\r\n    }\r\n    case BuiltinSymbols.v128_add: // any_binary<T!>(a: v128, b: v128) -> v128\r\n    case BuiltinSymbols.v128_sub:\r\n    case BuiltinSymbols.v128_mul:\r\n    case BuiltinSymbols.v128_div:\r\n    case BuiltinSymbols.v128_add_saturate:\r\n    case BuiltinSymbols.v128_sub_saturate:\r\n    case BuiltinSymbols.v128_min:\r\n    case BuiltinSymbols.v128_max:\r\n    case BuiltinSymbols.v128_eq:\r\n    case BuiltinSymbols.v128_ne:\r\n    case BuiltinSymbols.v128_lt:\r\n    case BuiltinSymbols.v128_le:\r\n    case BuiltinSymbols.v128_gt:\r\n    case BuiltinSymbols.v128_ge: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let op: BinaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_add: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.AddVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.AddVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.AddVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = BinaryOp.AddVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? BinaryOp.AddVecI64x2\r\n                : BinaryOp.AddVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = BinaryOp.AddVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.AddVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sub: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.SubVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.SubVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.SubVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = BinaryOp.SubVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? BinaryOp.SubVecI64x2\r\n                : BinaryOp.SubVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = BinaryOp.SubVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.SubVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_mul: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.MulVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.MulVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.MulVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.MulVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MulVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.MulVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_div: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.DivVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.DivVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_add_saturate: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.AddSatSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.AddSatUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.AddSatSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.AddSatUVecI16x8; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sub_saturate: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.SubSatSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.SubSatUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.SubSatSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.SubSatUVecI16x8; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_min: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.MinVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MinVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_max: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.MaxVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MaxVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_eq: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.EqVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.EqVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.EqVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.EqVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.EqVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.EqVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_ne: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.NeVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.NeVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.NeVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.NeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.NeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.NeVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_lt: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.LtSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.LtUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.LtSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.LtUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.LtSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.LtUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.LtVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.LtVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.LtSVecI32x4\r\n                  : BinaryOp.LtUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_le: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.LeSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.LeUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.LeSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.LeUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.LeSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.LeUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.LeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.LeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.LeSVecI32x4\r\n                  : BinaryOp.LeUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_gt: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.GtSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.GtUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.GtSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.GtUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.GtSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.GtUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.GtVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.GtVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.GtSVecI32x4\r\n                  : BinaryOp.GtUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_ge: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.GeSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.GeUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.GeSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.GeUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.GeSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.GeUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.GeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.GeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.GeSVecI32x4\r\n                  : BinaryOp.GeUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.createBinary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_neg: // any_unary<T!>(a: v128) -> v128\r\n    case BuiltinSymbols.v128_abs:\r\n    case BuiltinSymbols.v128_sqrt:\r\n    case BuiltinSymbols.v128_convert:\r\n    case BuiltinSymbols.v128_trunc: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_neg: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.NegVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.NegVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.NegVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.NegVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.NegVecI64x2\r\n                : UnaryOp.NegVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = UnaryOp.NegVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.NegVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_abs: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = UnaryOp.AbsVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.AbsVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sqrt: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = UnaryOp.SqrtVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.SqrtVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_convert: {\r\n          switch (type.kind) {\r\n            case TypeKind.I32: { op = UnaryOp.ConvertSVecI32x4ToVecF32x4; break; }\r\n            case TypeKind.U32: { op = UnaryOp.ConvertUVecI32x4ToVecF32x4; break; }\r\n            case TypeKind.I64: { op = UnaryOp.ConvertSVecI64x2ToVecF64x2; break; }\r\n            case TypeKind.U64: { op = UnaryOp.ConvertUVecI64x2ToVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_trunc: {\r\n          switch (type.kind) {\r\n            case TypeKind.I32: { op = UnaryOp.TruncSatSVecF32x4ToVecI32x4; break; }\r\n            case TypeKind.U32: { op = UnaryOp.TruncSatUVecF32x4ToVecI32x4; break; }\r\n            case TypeKind.I64: { op = UnaryOp.TruncSatSVecF64x2ToVecI64x2; break; }\r\n            case TypeKind.U64: { op = UnaryOp.TruncSatUVecF64x2ToVecI64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.createUnary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_shl: // any_shift<T!>(a: v128, b: i32) -> v128\r\n    case BuiltinSymbols.v128_shr: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let op: SIMDShiftOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_shl: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = SIMDShiftOp.ShlVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = SIMDShiftOp.ShlVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = SIMDShiftOp.ShlVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = SIMDShiftOp.ShlVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShlVecI64x2\r\n                : SIMDShiftOp.ShlVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_shr: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = SIMDShiftOp.ShrSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = SIMDShiftOp.ShrUVecI8x16; break; }\r\n            case TypeKind.I16: { op = SIMDShiftOp.ShrSVecI16x8; break; }\r\n            case TypeKind.U16: { op = SIMDShiftOp.ShrUVecI16x8; break; }\r\n            case TypeKind.I32: { op = SIMDShiftOp.ShrSVecI32x4; break; }\r\n            case TypeKind.U32: { op = SIMDShiftOp.ShrUVecI32x4; break; }\r\n            case TypeKind.I64: { op = SIMDShiftOp.ShrSVecI64x2; break; }\r\n            case TypeKind.U64: { op = SIMDShiftOp.ShrUVecI64x2; break; }\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShrSVecI64x2\r\n                : SIMDShiftOp.ShrSVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShrUVecI64x2\r\n                : SIMDShiftOp.ShrUVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.createSIMDShift(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_and: // any_bitwise_binary(a: v128, b: v128) -> v128\r\n    case BuiltinSymbols.v128_or:\r\n    case BuiltinSymbols.v128_xor: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let op: BinaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.v128_and: { op = BinaryOp.AndVec128; break; }\r\n        case BuiltinSymbols.v128_or:  { op = BinaryOp.OrVec128; break; }\r\n        case BuiltinSymbols.v128_xor: { op = BinaryOp.XorVec128; break; }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ContextualFlags.IMPLICIT);\r\n      return module.createBinary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_not: { // any_bitwise_unary(a: v128) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      return module.createUnary(UnaryOp.NotVec128, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ContextualFlags.IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, ContextualFlags.IMPLICIT);\r\n      return module.createSIMDBitselect(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.v128_any_true: // any_test<T!>(a: v128) -> bool\r\n    case BuiltinSymbols.v128_all_true: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.v128_any_true: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.AnyTrueVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.AnyTrueVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.AnyTrueVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.AnyTrueVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.AnyTrueVecI64x2\r\n                : UnaryOp.AnyTrueVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_all_true: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.AllTrueVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.AllTrueVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.AllTrueVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.AllTrueVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.AllTrueVecI64x2\r\n                : UnaryOp.AllTrueVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = Type.bool;\r\n      return module.createUnary(op, arg0);\r\n    }\r\n\r\n    // === Internal runtime =======================================================================\r\n\r\n    case BuiltinSymbols.idof: {\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.u32;\r\n      if (!type) return module.createUnreachable();\r\n      let classReference = type.classReference;\r\n      if (!classReference || classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      return module.createI32(classReference.id);\r\n    }\r\n    case BuiltinSymbols.visit_globals: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\r\n      ) {\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, ContextualFlags.IMPLICIT);\r\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\r\n      compiler.currentType = Type.void;\r\n      return module.createCall(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\r\n    }\r\n    case BuiltinSymbols.visit_members: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\r\n      ) {\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, ContextualFlags.IMPLICIT);\r\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\r\n      compiler.currentType = Type.void;\r\n      return module.createCall(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\r\n    }\r\n  }\r\n\r\n  // try to defer inline asm to a concrete built-in\r\n  {\r\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\r\n    if (expr) {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.typeArgumentsRange, prototype.internalName\r\n        );\r\n      }\r\n      return expr;\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Cannot_find_name_0,\r\n    reportNode.expression.range, prototype.internalName\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\n/** Tries to defer an inline-assembler-like call to a built-in function. */\r\nfunction tryDeferASM(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  operands: Expression[],\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  /* tslint:disable:max-line-length */\r\n  switch (prototype.internalName) {\r\n\r\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\r\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\r\n    //   and, or, xor, shl, shr_u, shr_s\r\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\r\n\r\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\r\n  }\r\n  if (compiler.options.hasFeature(Feature.THREADS)) {\r\n    switch (prototype.internalName) {\r\n\r\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\r\n    }\r\n  }\r\n  if (compiler.options.hasFeature(Feature.SIMD)) {\r\n    switch (prototype.internalName) {\r\n\r\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.void, reportNode);\r\n\r\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\r\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\r\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\r\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\r\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_trunc_s_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_trunc_u_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u32, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64x2_trunc_s_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_trunc_u_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u64, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\r\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_convert_s_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_convert_u_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\r\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_convert_s_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_convert_u_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    }\r\n  }\r\n  /* tslint:enable:max-line-length */\r\n  return 0;\r\n}\r\n\r\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\r\nfunction deferASM(\r\n  name: string,\r\n  compiler: Compiler,\r\n  typeArgument: Type,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  assert(compiler.program.elementsByName.has(name));\r\n  var prototype = compiler.program.elementsByName.get(name)!;\r\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n  return compileCall(\r\n    compiler,\r\n    <FunctionPrototype>prototype,\r\n    [ typeArgument ],\r\n    operands,\r\n    contextualType,\r\n    reportNode,\r\n    /* isAsm */ true\r\n  );\r\n}\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringInstance = compiler.program.stringInstance;\r\n  if (!stringInstance) return module.createUnreachable();\r\n\r\n  var abortInstance = program.abortInstance;\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringInstance.type, ContextualFlags.IMPLICIT)\r\n    : stringInstance.type.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCall(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n\r\n/** Compiles the `visit_globals` function. */\r\nexport function compileVisitGlobals(compiler: Compiler): void {\r\n  var module = compiler.module;\r\n  var exprs = new Array<ExpressionRef>();\r\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\r\n  var nativeSizeType = compiler.options.nativeSizeType;\r\n  var visitInstance = assert(compiler.program.visitInstance);\r\n\r\n  compiler.compileFunction(visitInstance);\r\n\r\n  for (let element of compiler.program.elementsByName.values()) {\r\n    if (element.kind != ElementKind.GLOBAL) continue;\r\n    let global = <Global>element;\r\n    let classReference = global.type.classReference;\r\n    if (\r\n      global.is(CommonFlags.COMPILED) &&\r\n      classReference !== null &&\r\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\r\n    ) {\r\n      if (global.is(CommonFlags.INLINED)) {\r\n        let value = global.constantIntegerValue;\r\n        if (i64_low(value) || i64_high(value)) {\r\n          exprs.push(\r\n            module.createCall(visitInstance.internalName, [\r\n              compiler.options.isWasm64\r\n                ? module.createI64(i64_low(value), i64_high(value))\r\n                : module.createI32(i64_low(value))\r\n            ], NativeType.None)\r\n          );\r\n        }\r\n      } else {\r\n        exprs.push(\r\n          module.createIf(\r\n            module.createTeeLocal(1,\r\n              module.createGetGlobal(global.internalName, nativeSizeType)\r\n            ),\r\n            module.createCall(visitInstance.internalName, [\r\n              module.createGetLocal(1, nativeSizeType), // tempRef != null\r\n              module.createGetLocal(0, NativeType.I32) // cookie\r\n            ], NativeType.None)\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\r\n    exprs.length\r\n      ? module.createBlock(null, exprs)\r\n      : module.createNop()\r\n  );\r\n}\r\n\r\n/** Compiles the `visit_members` function. */\r\nexport function compileVisitMembers(compiler: Compiler): void {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n  var usizeType = program.options.usizeType;\r\n  var nativeSizeType = usizeType.toNativeType();\r\n  var nativeSizeSize = usizeType.byteSize;\r\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\r\n  var managedClasses = program.managedClasses;\r\n  var visitInstance = assert(program.visitInstance);\r\n  var blocks = new Array<RelooperBlockRef>();\r\n  var relooper = Relooper.create(module);\r\n\r\n  var outer = relooper.addBlockWithSwitch(\r\n    module.createNop(),\r\n    module.createLoad(nativeSizeSize, false,\r\n      nativeSizeType == NativeType.I64\r\n        ? module.createBinary(BinaryOp.SubI64,\r\n            module.createGetLocal(0, nativeSizeType),\r\n            module.createI64(8)\r\n          )\r\n        : module.createBinary(BinaryOp.SubI32,\r\n            module.createGetLocal(0, nativeSizeType),\r\n            module.createI32(8) // rtId is at -8\r\n          ),\r\n      NativeType.I32,\r\n      0\r\n    )\r\n  );\r\n\r\n  var lastId = 0;\r\n  for (let [id, instance] of managedClasses) {\r\n    assert(instance.type.isManaged);\r\n    assert(id == lastId++);\r\n\r\n    let visitImpl: Element | null;\r\n\r\n    // if a library element, check if it implements a custom traversal function\r\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\r\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\r\n      let block: RelooperBlockRef;\r\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\r\n        block = relooper.addBlock(\r\n          module.createUnreachable()\r\n        );\r\n      } else {\r\n        let visitSig = visitFunc.signature;\r\n        assert(\r\n          visitSig.parameterTypes.length == 1 &&\r\n          visitSig.parameterTypes[0] == Type.u32 &&\r\n          visitSig.returnType == Type.void &&\r\n          visitSig.thisType == instance.type\r\n        );\r\n        let callExpr = module.createCall(visitFunc.internalName, [\r\n          module.createGetLocal(0, nativeSizeType), // ref\r\n          module.createGetLocal(1, NativeType.I32)  // cookie\r\n        ], NativeType.None);\r\n        block = relooper.addBlock(\r\n          instance.base\r\n            ? callExpr // branch will be added later\r\n            : module.createBlock(null, [\r\n                callExpr,\r\n                module.createReturn()\r\n              ])\r\n        );\r\n      }\r\n      relooper.addBranchForSwitch(outer, block, [ id ]);\r\n      blocks.push(block);\r\n\r\n    // otherwise generate one\r\n    } else {\r\n      // traverse references assigned to own fields\r\n      let code = new Array<ExpressionRef>();\r\n      let members = instance.members;\r\n      if (members) {\r\n        for (let member of members.values()) {\r\n          if (member.kind == ElementKind.FIELD) {\r\n            if ((<Field>member).parent === instance) {\r\n              let fieldType = (<Field>member).type;\r\n              if (fieldType.isManaged) {\r\n                let fieldOffset = (<Field>member).memoryOffset;\r\n                assert(fieldOffset >= 0);\r\n                code.push(\r\n                  // if ($2 = value) FIELDCLASS~traverse($2)\r\n                  module.createIf(\r\n                    module.createTeeLocal(2,\r\n                      module.createLoad(nativeSizeSize, false,\r\n                        module.createGetLocal(0, nativeSizeType),\r\n                        nativeSizeType, fieldOffset\r\n                      )\r\n                    ),\r\n                    module.createCall(visitInstance.internalName, [\r\n                      module.createGetLocal(2, nativeSizeType), // ref\r\n                      module.createGetLocal(1, NativeType.I32)  // cookie\r\n                    ], NativeType.None)\r\n                  )\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (!instance.base) code.push(module.createReturn());\r\n      let block = relooper.addBlock(\r\n        flatten(module, code, NativeType.None)\r\n      );\r\n      relooper.addBranchForSwitch(outer, block, [ id ]);\r\n      blocks.push(block);\r\n    }\r\n  }\r\n  for (let [id, instance] of managedClasses) {\r\n    let base = instance.base;\r\n    if (base) {\r\n      relooper.addBranch(blocks[id], blocks[base.id]);\r\n    }\r\n  }\r\n  blocks.push(\r\n    relooper.addBlock(\r\n      module.createUnreachable()\r\n    )\r\n  );\r\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\r\n  compiler.compileFunction(visitInstance);\r\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\r\n}\r\n\r\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\r\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\r\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\r\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\r\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\r\n}\r\n\r\n/** Compiles runtime type information for use by stdlib. */\r\nexport function compileRTTI(compiler: Compiler): void {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n  var managedClasses = program.managedClasses;\r\n  var count = managedClasses.size;\r\n  var size = 4 + 8 * count;\r\n  var data = new Uint8Array(size);\r\n  writeI32(count, data, 0);\r\n  var off = 4;\r\n  var arrayPrototype = program.arrayPrototype;\r\n  var setPrototype = program.setPrototype;\r\n  var mapPrototype = program.mapPrototype;\r\n  var lastId = 0;\r\n  for (let [id, instance] of managedClasses) {\r\n    assert(id == lastId++);\r\n    let flags: TypeinfoFlags = 0;\r\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\r\n    if (instance.prototype.extends(arrayPrototype)) {\r\n      let typeArguments = assert(instance.getTypeArgumentsTo(arrayPrototype));\r\n      assert(typeArguments.length == 1);\r\n      flags |= TypeinfoFlags.ARRAY;\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\r\n    } else if (instance.prototype.extends(setPrototype)) {\r\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\r\n      assert(typeArguments.length == 1);\r\n      flags |= TypeinfoFlags.SET;\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\r\n    } else if (instance.prototype.extends(mapPrototype)) {\r\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\r\n      assert(typeArguments.length == 2);\r\n      flags |= TypeinfoFlags.MAP;\r\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\r\n    }\r\n    writeI32(flags, data, off); off += 4;\r\n    let base = instance.base;\r\n    writeI32(base ? base.id : 0, data, off); off += 4;\r\n  }\r\n  assert(off == size);\r\n  var usizeType = program.options.usizeType;\r\n  var segment = compiler.addMemorySegment(data);\r\n  if (usizeType.size == 8) {\r\n    let offset = segment.offset;\r\n    module.addGlobal(BuiltinSymbols.RTTI_BASE, NativeType.I64, false, module.createI64(i64_low(offset), i64_high(offset)));\r\n  } else {\r\n    module.addGlobal(BuiltinSymbols.RTTI_BASE, NativeType.I32, false, module.createI32(i64_low(segment.offset)));\r\n  }\r\n}\r\n\r\n// Helpers\r\n\r\n/** Evaluates the constant type of a type argument *or* expression. */\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: CallExpression\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments) {\r\n      if (typeArguments.length == 1) {\r\n        compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT);\r\n      } else {\r\n        if (typeArguments.length) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return null;\r\n        }\r\n        compiler.compileExpressionRetainType(operands[0], Type.i32);\r\n      }\r\n    } else {\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\n/** Evaluates a compile-time constant immediate offset argument.*/\r\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64, ContextualFlags.IMPLICIT);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I64 ||\r\n      getConstValueI64High(expr) != 0 ||\r\n      (value = getConstValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32, ContextualFlags.IMPLICIT);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I32 ||\r\n      (value = getConstValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n/** Checks a call with a single required type argument. Returns `1` on error. */\r\nfunction checkTypeRequired(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler,\r\n  setCurrentTypeOnError: bool = false\r\n): i32 {\r\n  if (typeArguments) {\r\n    let numTypeArguments = typeArguments.length;\r\n    if (numTypeArguments == 1) return 0;\r\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\r\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\r\n    );\r\n  } else {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", \"0\"\r\n    );\r\n  }\r\n  return 1;\r\n}\r\n\r\n/** Checks a call with a single optional type argument. Returns `1` on error. */\r\nfunction checkTypeOptional(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler,\r\n  setCurrentTypeOnError: bool = false\r\n): i32 {\r\n  if (typeArguments) {\r\n    let numTypeArguments = typeArguments.length;\r\n    if (numTypeArguments == 1) return 0;\r\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\r\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that is not generic. Returns `1` on error. */\r\nfunction checkTypeAbsent(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  prototype: FunctionPrototype\r\n): i32 {\r\n  if (typeArguments) {\r\n    prototype.program.error(\r\n      DiagnosticCode.Type_0_is_not_generic,\r\n      reportNode.typeArgumentsRange, prototype.internalName\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\r\nfunction checkArgsRequired(\r\n  operands: Expression[],\r\n  expected: i32,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler\r\n): i32 {\r\n  if (operands.length != expected) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_arguments_but_got_1,\r\n      reportNode.range, expected.toString(), operands.length.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\r\nfunction checkArgsOptional(\r\n  operands: Expression[],\r\n  expectedMinimum: i32,\r\n  expectedMaximum: i32,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler\r\n): i32 {\r\n  var numOperands = operands.length;\r\n  if (numOperands < expectedMinimum) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\r\n    );\r\n    return 1;\r\n  } else if (numOperands > expectedMaximum) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_arguments_but_got_1,\r\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  getFunctionName,\r\n  getFunctionBody,\r\n  getFunctionParamCount,\r\n  getFunctionParamType,\r\n  getFunctionResultType,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfCondition,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getLoopName,\r\n  getLoopBody,\r\n  getBreakName,\r\n  getBreakCondition,\r\n  getGetLocalIndex,\r\n  getSetLocalIndex,\r\n  getSetLocalValue,\r\n  getLoadOffset,\r\n  getLoadPtr,\r\n  getStoreOffset,\r\n  getStorePtr,\r\n  getStoreValue,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getUnaryOp,\r\n  getUnaryValue,\r\n  getBinaryOp,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getSelectCondition,\r\n  getDropValue,\r\n  getReturnValue,\r\n  getHostOp,\r\n  getHostOperand\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\r\n    var body = getFunctionBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(getFunctionResultType(func)));\r\n    this.push(\" \");\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = getExpressionId(expr);\r\n    var type = getExpressionType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = getBlockName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = getBlockChildCount(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(getBlockChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          if (nested = getIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(getIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = getLoopName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(getLoopBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = getBreakCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = getBreakName(expr)) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        this.push(\"$\");\r\n        this.push(getGetLocalIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.LocalSet: {\r\n        this.push(\"$\");\r\n        this.push(getSetLocalIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(getSetLocalValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GlobalGet:\r\n      case ExpressionId.GlobalSet: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getLoadOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getLoadPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getStoreOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getStorePtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getStoreValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(getConstValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(getConstValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(getConstValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(getSelectThen(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectElse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(getDropValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = getReturnValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (getHostOp(expr)) {\r\n          case HostOp.MemorySize: {\r\n            this.push(\"memory.size()\");\r\n            return;\r\n          }\r\n          case HostOp.MemoryGrow: {\r\n            this.push(\"memory.grow(\");\r\n            this.decompileExpression(getHostOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicNotify:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.V128: return \"v128\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property,\r\n  PropertyPrototype\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  includePrivate: bool;\r\n  /** Elements still to do. */\r\n  todo: Element[] = [];\r\n  /** Already seen elements. */\r\n  seen: Set<Element> = new Set();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all elements and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let file of this.program.filesByName.values()) {\r\n      let members = file.members;\r\n      if (!members) continue;\r\n      for (let member of members.values()) {\r\n        // FIXME: doesn't honor the actual externally visible name\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var todo = this.todo;\r\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(<FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(<ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        this.visitPropertyInstances(<PropertyPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterInstance;\r\n        if (getter) this.visitFunction(getter);\r\n        let setter = prop.setterInstance;\r\n        if (setter) this.visitFunction(setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(element);\r\n        break;\r\n      }\r\n      case ElementKind.TYPEDEFINITION: break;\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(element: FunctionPrototype): void {\r\n    var instances = element.instances;\r\n    if (instances) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(element: ClassPrototype): void {\r\n    var instances = element.instances;\r\n    if (instances) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitPropertyInstances(element: PropertyPrototype): void {\r\n    // var instances = element.instances;\r\n    // if (instances) {\r\n    //   for (let instance of instances.values()) {\r\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\r\n    //   }\r\n    // }\r\n    assert(false);\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitField(element: Field): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.name);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\r\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.name);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.name);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.name);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else sb.push(\"static \");\r\n    } else {\r\n      if (isConst) sb.push(\"const \");\r\n      else sb.push(\"var \");\r\n    }\r\n    sb.push(element.name);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\r\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(element.identifierNode.text); // 'get:funcName' internally\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n      sb.push(\";\\n\");\r\n      return;\r\n    } else {\r\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\r\n      sb.push(element.name);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.name);\r\n    var base = element.base;\r\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.name); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.parent.members; // static\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var ctor = element.constructorInstance;\r\n    if (ctor) this.visitFunction(ctor);\r\n    members = element.members; // instance\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(element.name);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.name);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    sb.push(\"export default ASModule;\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          let instances = (<FunctionPrototype>member).instances;\r\n          if (instances) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instances = (<ClassPrototype>member).instances;\r\n          if (instances) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler,\r\n  IdentifierHandling\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n  ArrowKind,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  ClassExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  IndexSignatureDeclaration,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath,\r\n  nodeIsCallable,\r\n  nodeIsGenericCallable\r\n} from \"./ast\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Source file names to be requested next. */\r\n  backlog: string[] = new Array();\r\n  /** Source file names already seen, that is processed or backlogged. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Source file names already completely processed. */\r\n  donelog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n\r\n    // check if already processed\r\n    if (this.donelog.has(internalPath)) return;\r\n    this.donelog.add(internalPath); // do not parse again\r\n    this.seenlog.add(internalPath); // do not request again\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    var program = this.program;\r\n    program.sources.push(source);\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn, null);\r\n      if (statement) statements.push(statement);\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: NamespaceDeclaration | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [decorator];\r\n      else decorators.push(decorator);\r\n    }\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (tn.skip(Token.DEFAULT)) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          tn.range()\r\n        );\r\n      }\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        }\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (!tn.skip(Token.CLASS)) {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n          break;\r\n        } else {\r\n          tn.discard(state);\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    this.donelog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'void'\r\n    } else if (token == Token.VOID) {\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\r\n      let current = first;\r\n      let parameters: TypeNode[] | null = null;\r\n      let nullable = false;\r\n\r\n      // Identifier ('.' Identifier)+\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\r\n          current.next = next;\r\n          current = next;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range(tn.pos)\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          if (!parameters) parameters = [<TypeNode>parameter];\r\n          else parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      while (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skipIdentifier()) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        if (isSignature) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skipIdentifier()) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n    if (tn.skip(Token.EXCLAMATION)) {\r\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n    }\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    var range = Range.join(identifier.range, tn.range());\r\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\r\n      this.error(\r\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n        range);\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      range\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n      if (!member) return null;\r\n      members.push(<EnumValueDeclaration>member);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEBRACE)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    var seenOptional = false;\r\n    while (!tn.skip(Token.GREATERTHAN)) {\r\n      let typeParameter = this.parseTypeParameter(tn);\r\n      if (!typeParameter) return null;\r\n      if (typeParameter.defaultType !== null) {\r\n        seenOptional = true;\r\n      } else if (seenOptional) {\r\n        this.error(\r\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\r\n          typeParameter.range\r\n        );\r\n        typeParameter.defaultType = null;\r\n      }\r\n      if (!typeParameters) typeParameters = [ typeParameter ];\r\n      else typeParameters.push(typeParameter);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.GREATERTHAN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    if (!(typeParameters && typeParameters.length)) {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)? ('=' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      let defaultType: TypeNode | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        defaultType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        defaultType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseParametersThis: TypeNode | null = null;\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n    var thisType: CommonTypeNode | null = null;\r\n\r\n    // check if there is a leading `this` parameter\r\n    this.parseParametersThis = null;\r\n    if (tn.skip(Token.THIS)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        thisType = this.parseType(tn); // reports\r\n        if (!thisType) return null;\r\n        if (thisType.kind == NodeKind.TYPE) {\r\n          this.parseParametersThis = <TypeNode>thisType;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            thisType.range\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n        return null;\r\n      }\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          return parameters;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let param = this.parseParameter(tn, isConstructor); // reports\r\n      if (!param) return null;\r\n      if (seenRest && !reportedRest) {\r\n        this.error(\r\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n          seenRest.name.range\r\n        );\r\n        reportedRest = true;\r\n      }\r\n      switch (param.parameterKind) {\r\n        default: {\r\n          if (seenOptional) {\r\n            this.error(\r\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n              param.name.range\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ParameterKind.OPTIONAL: {\r\n          seenOptional = true;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          seenRest = param;\r\n          break;\r\n        }\r\n      }\r\n      parameters.push(param);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (isConstructor) {\r\n      if (tn.skip(Token.PUBLIC)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PUBLIC;\r\n      } else if (tn.skip(Token.PROTECTED)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PROTECTED;\r\n      } else if (tn.skip(Token.PRIVATE)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PRIVATE;\r\n      }\r\n      if (tn.peek() == Token.READONLY) {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek() != Token.COLON) { // modifier\r\n          tn.discard(state);\r\n          if (!startRange) startRange = tn.range();\r\n          accessFlags |= CommonFlags.READONLY;\r\n        } else { // identifier\r\n          tn.reset(state);\r\n        }\r\n      }\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skipIdentifier()) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n    var thisType = this.parseParametersThis;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      ArrowKind.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var arrowKind = ArrowKind.NONE;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skipIdentifier()) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    arrowKind: ArrowKind,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n    }\r\n\r\n    if (arrowKind) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null, // TODO?\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (arrowKind) {\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        body = this.parseBlockStatement(tn, false);\r\n      } else {\r\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\r\n      }\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      CommonFlags.NONE,\r\n      arrowKind,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: TypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [<TypeNode>type];\r\n          else implementsTypes.push(<TypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (member) members.push(<DeclarationStatement>member);\r\n        else {\r\n          this.skipStatement(tn);\r\n          if (tn.skip(Token.ENDOFFILE)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return declaration;\r\n  }\r\n\r\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\r\n\r\n    // at 'class': Identifier? '{' ... '}'\r\n\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n\r\n    if (tn.skipIdentifier()) {\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    } else {\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration = Node.createClassDeclaration(\r\n      name,\r\n      [],\r\n      null,\r\n      null,\r\n      members,\r\n      null,\r\n      CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (member) members.push(<DeclarationStatement>member);\r\n        else {\r\n          this.skipStatement(tn);\r\n          if (tn.skip(Token.ENDOFFILE)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return Node.createClassExpression(declaration);\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\r\n\r\n    var decorators: DecoratorNode[] | null = null;\r\n    if (tn.skip(Token.AT)) {\r\n      do {\r\n        let decorator = this.parseDecorator(tn);\r\n        if (!decorator) break;\r\n        if (!decorators) decorators = [<DecoratorNode>decorator];\r\n        else decorators.push(<DecoratorNode>decorator);\r\n      } while (tn.skip(Token.AT));\r\n      if (decorators && isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n        );\r\n      }\r\n    }\r\n\r\n    // inherit ambient status\r\n    var flags = parent.flags & CommonFlags.AMBIENT;\r\n\r\n    // implemented methods are virtual\r\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\r\n\r\n    var accessStart = 0;\r\n    var accessEnd = 0;\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"public\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PUBLIC;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"private\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PRIVATE;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"protected\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PROTECTED;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    }\r\n\r\n    var staticStart = 0;\r\n    var staticEnd = 0;\r\n    var abstractStart = 0;\r\n    var abstractEnd = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"static\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      flags |= CommonFlags.INSTANCE;\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        if (isInterface) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(), \"abstract\"\r\n          );\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (!isInterface) {\r\n      if (tn.skip(Token.GET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.GET;\r\n          isGetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.SET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.SET;\r\n          isSetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n        flags |= CommonFlags.CONSTRUCTOR;\r\n        isConstructor = true;\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    var name: IdentifierExpression;\r\n    if (isConstructor) {\r\n      name = Node.createConstructorExpression(tn.range());\r\n    } else {\r\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\r\n        // TODO: also handle symbols, which might have some of these modifiers\r\n        if (flags & CommonFlags.PUBLIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"public\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PROTECTED) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PRIVATE) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\r\n        if (!retIndex) return null;\r\n        tn.skip(Token.SEMICOLON);\r\n        return retIndex;\r\n      }\r\n      if (!tn.skipIdentifier()) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      let thisType = this.parseParametersThis;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        thisType,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\r\n            tn.range(), name.text\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.QUESTION)) {\r\n        this.error(\r\n          DiagnosticCode.Optional_properties_are_not_supported,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      if (tn.skip(Token.EXCLAMATION)) {\r\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let range = tn.range(startPos, tn.pos);\r\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\r\n        this.error(\r\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n          range\r\n        );\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        range\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\r\n\r\n    // at: '[': 'key' ':' Type ']' ':' Type\r\n\r\n    if (decorators && decorators.length) {\r\n      this.error(\r\n        DiagnosticCode.Decorators_are_not_valid_here,\r\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n      ); // recoverable\r\n    }\r\n\r\n    var start = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let id = tn.readIdentifier();\r\n      if (id == \"key\") {\r\n        if (tn.skip(Token.COLON)) {\r\n          let keyType = this.parseType(tn);\r\n          if (!keyType) return null;\r\n          if (keyType.kind != NodeKind.TYPE) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              tn.range()\r\n            );\r\n            return null;\r\n          }\r\n          if (tn.skip(Token.CLOSEBRACKET)) {\r\n            if (tn.skip(Token.COLON)) {\r\n              let valueType = this.parseType(tn);\r\n              if (!valueType) return null;\r\n              return Node.createIndexSignatureDeclaration(<TypeNode>keyType, valueType, tn.range(start, tn.pos));\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \":\"\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \":\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"key\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let ns = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, ns);\r\n          if (member) members.push(member);\r\n          else {\r\n            this.skipStatement(tn);\r\n            if (tn.skip(Token.ENDOFFILE)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ns;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    isDeclare: bool\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    var path: StringLiteralExpression | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseExportMember(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\r\n          let internalPath = assert(ret.internalPath);\r\n          let source = tn.source;\r\n          if (!source.exportPaths) source.exportPaths = new Set();\r\n          source.exportPaths.add(internalPath);\r\n          if (!this.seenlog.has(internalPath)) {\r\n            this.backlog.push(internalPath);\r\n            this.seenlog.add(internalPath);\r\n          }\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"from\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseImportDeclaration(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skipIdentifier()) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        if (tn.token == Token.ENDOFFILE) return null;\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skipIdentifier()) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(IdentifierHandling.PREFER);\r\n    var startPos = tn.tokenPos;\r\n    var precedence = determinePrecedenceStart(token);\r\n    if (precedence != Precedence.NONE) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, precedence);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var expr: Expression | null = null;\r\n    switch (token) {\r\n\r\n      case Token.NULL: return Node.createNullExpression(tn.range());\r\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\r\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            ArrowKind.ARROW_PARENTHESIZED\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(IdentifierHandling.PREFER)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (\r\n                    !tn.skip(Token.COLON) &&\r\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\r\n                  ) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // optional parameter or parenthesized\r\n                case Token.QUESTION: {\r\n                  if (\r\n                    tn.skip(Token.COLON) ||   // optional parameter with type\r\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\r\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\r\n                  ) {\r\n                    tn.reset(state);\r\n                    return this.parseFunctionExpression(tn);\r\n                  }\r\n                  again = false; // parenthesized\r\n                  break;\r\n                  }\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        while (!tn.skip(Token.CLOSEBRACKET)) {\r\n          if (tn.peek() == Token.COMMA) {\r\n            expr = null; // omitted\r\n          } else {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n          }\r\n          elementExpressions.push(expr);\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACKET)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"]\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // ObjectLiteralExpression\r\n      case Token.OPENBRACE: {\r\n        let startPos = tn.tokenPos;\r\n        let names = new Array<IdentifierExpression>();\r\n        let values = new Array<Expression>();\r\n        let name: IdentifierExpression;\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          if (!tn.skipIdentifier()) {\r\n            if (!tn.skip(Token.STRINGLITERAL)) {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                tn.range(),\r\n              );\r\n              return null;\r\n            }\r\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\r\n            name.isQuoted = true;\r\n          } else {\r\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          }\r\n          names.push(name);\r\n          if (tn.skip(Token.COLON)) {\r\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!value) return null;\r\n            values.push(value);\r\n          } else if (!name.isQuoted) {\r\n            values.push(name);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACE)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [\r\n              Node.createParameter(\r\n                identifier,\r\n                Node.createOmittedType(identifier.range.atEnd),\r\n                null,\r\n                ParameterKind.DEFAULT,\r\n                identifier.range\r\n              )\r\n            ],\r\n            ArrowKind.ARROW_SINGLE,\r\n            startPos\r\n          );\r\n        }\r\n        return identifier;\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\r\n          this.error(\r\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\r\n            tn.range()\r\n          );\r\n        }\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      case Token.CLASS: {\r\n        return this.parseClassExpression(tn);\r\n      }\r\n      default: {\r\n        if (token == Token.ENDOFFILE) {\r\n          this.error(\r\n            DiagnosticCode.Unexpected_end_of_text,\r\n            tn.range(startPos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Expression_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments: CommonTypeNode[] | null = null;\r\n    do {\r\n      if (tn.peek() === Token.GREATERTHAN) {\r\n        break;\r\n      }\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      if (!typeArguments) typeArguments = [ type ];\r\n      else typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!expr) return null;\r\n      args.push(expr);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = Precedence.COMMA\r\n  ): Expression | null {\r\n    assert(precedence != Precedence.NONE);\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\r\n\r\n    var startPos = expr.range.start;\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn); // reports\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        case Token.EXCLAMATION: {\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.NONNULL,\r\n            expr,\r\n            null,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // InstanceOfExpression\r\n        case Token.INSTANCEOF: {\r\n          let isType = this.parseType(tn); // reports\r\n          if (!isType) return null;\r\n          expr = Node.createInstanceOfExpression(\r\n            expr,\r\n            isType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn); // reports\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\r\n            ? Precedence.COMMA + 1\r\n            : Precedence.COMMA\r\n          );\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (tn.skipIdentifier()) {\r\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            } else {\r\n              next = this.parseExpression(tn,\r\n                isRightAssociative(token)\r\n                  ? nextPrecedence\r\n                  : nextPrecedence + 1\r\n              );\r\n              if (!next) return null;\r\n            }\r\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\r\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\r\n              if (!expr) return null;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            next = this.parseExpression(tn,\r\n              isRightAssociative(token)\r\n                ? nextPrecedence\r\n                : nextPrecedence + 1\r\n            );\r\n            if (!next) return null;\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  private joinPropertyCall(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    expr: Expression,\r\n    call: CallExpression\r\n  ): Expression | null {\r\n    var callee = call.expression;\r\n    switch (callee.kind) {\r\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\r\n        call.expression = Node.createPropertyAccessExpression(\r\n          expr,\r\n          <IdentifierExpression>callee,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.CALL: { // join call target und wrap the original call around it\r\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\r\n        if (!inner) return null;\r\n        call.expression = inner;\r\n        call.range = tn.range(startPos, tn.pos);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          call.range\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return call;\r\n  }\r\n\r\n  private maybeParseCallExpression(\r\n    tn: Tokenizer,\r\n    expr: Expression\r\n  ): Expression {\r\n    if (nodeIsCallable(expr.kind)) {\r\n      let typeArguments: CommonTypeNode[] | null = null;\r\n      while (\r\n        tn.skip(Token.OPENPAREN)\r\n        ||\r\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\r\n      ) {\r\n        let args = this.parseArguments(tn);\r\n        if (!args) break;\r\n        expr = Node.createCallExpression( // is again callable\r\n          expr,\r\n          typeArguments,\r\n          args,\r\n          tn.range(expr.range.start, tn.pos)\r\n        );\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.SEMICOLON      // end of the statement for sure\r\n      ) {\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          this.skipBlock(tn);\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipBlock(tn: Tokenizer): void {\r\n    // at '{': ... '}'\r\n    var depth = 1;\r\n    var again = true;\r\n    do {\r\n      switch (tn.next()) {\r\n        case Token.ENDOFFILE: {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          again = false;\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          ++depth;\r\n          break;\r\n        }\r\n        case Token.CLOSEBRACE: {\r\n          --depth;\r\n          if (!depth) again = false;\r\n          break;\r\n        }\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (again);\r\n  }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  NONE,\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET:\r\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\n/// <reference path=\"./node.d.ts\" />\r\n\r\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\r\nimport \"../../../std/portable/index\";\r\nimport \"./float\";\r\nimport \"./i64\";\r\n\r\nimport { Module } from \"../../module\";\r\n\r\nModule.prototype.toText = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitStackIR();\r\n};\r\n\r\nModule.prototype.toAsmjs = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitAsmjs();\r\n};\r\n","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\nglobal.binaryen = binaryen;\r\n\r\nfor (var key in binaryen) {\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\r\n}\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.__memory_allocate = binaryen._malloc;\r\nglobal.__memory_free = binaryen._free;\r\nglobal.__memory_copy = binaryen._memmove;\r\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\r\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nglobalScope.ASC_TARGET = 2; // Target.JS\r\nglobalScope.ASC_NO_ASSERT = false;\r\nglobalScope.ASC_MEMORY_BASE = 0;\r\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\r\nglobalScope.ASC_SHRINK_LEVEL = 0;\r\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\r\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\r\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\r\nglobalScope.ASC_FEATURE_SIMD = false;\r\nglobalScope.ASC_FEATURE_THREADS = false;\r\n\r\nvar F64 = new Float64Array(1);\r\nvar U64 = new Uint32Array(F64.buffer);\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value:  127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value:  32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value:   0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value:     0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value:          0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: false, writable: false },\r\n  \"MAX_VALUE\": { value: true,  writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\r\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\r\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isNullable\"] = function isNullable(arg) {\r\n  return true;\r\n}\r\n\r\nglobalScope[\"isReference\"] = function isReference(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isFunction\"] = function isFunction(arg) {\r\n  return typeof arg === \"function\";\r\n}\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\r\n  return expr\r\n    && typeof expr === 'object'\r\n    && typeof expr.length === 'number'\r\n    && expr.length >= 0\r\n    && Math.trunc(expr.length) === expr.length;\r\n};\r\n\r\nArray.create = function(capacity) {\r\n  var arr = new Array(capacity);\r\n  arr.length = 0;\r\n  return arr;\r\n};\r\n\r\nglobalScope[\"isDefined\"] = function isDefined(expr) {\r\n  return typeof expr !== \"undefined\";\r\n}\r\n\r\nglobalScope[\"isConstant\"] = function isConstant(expr) {\r\n  return false;\r\n};\r\n\r\nglobalScope[\"unchecked\"] = function unchecked(expr) {\r\n  return expr;\r\n};\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nglobalScope[\"JSMath\"] = Math;\r\n\r\nObject.defineProperties(globalScope[\"JSMath\"], {\r\n  sincos_sin: { value: 0.0, writable: true },\r\n  sincos_cos: { value: 0.0, writable: true },\r\n  signbit: {\r\n    value: function signbit(x) {\r\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\r\n    }\r\n  },\r\n  sincos: {\r\n    value: function sincos(x) {\r\n      this.sincos_sin = Math.sin(x);\r\n      this.sincos_cos = Math.cos(x);\r\n    }\r\n  }\r\n});\r\n\r\nglobalScope[\"memory\"] = (() => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n  return {\r\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\r\n      if (!(size >>>= 0)) return 0;\r\n      if (HEAP_OFFSET + size > HEAP.length) {\r\n        var oldHeap = HEAP;\r\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n        HEAP.set(oldHeap);\r\n      }\r\n      var ptr = HEAP_OFFSET;\r\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n      return ptr;\r\n    },\r\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\r\n      HEAP.fill(value, dest, dest + size);\r\n    },\r\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\r\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\r\n      HEAP.copyWithin(dest, src, src + size);\r\n    },\r\n    reset: globalScope[\"__memory_reset\"] || function reset() {\r\n      HEAP = new Uint8Array(0);\r\n      HEAP_OFFSET = 0;\r\n    }\r\n  };\r\n})();\r\n\r\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\r\n  HEAP[(ptr | 0) + (offset | 0)] = value;\r\n};\r\n\r\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\r\n  return HEAP[(ptr | 0) + (offset | 0)];\r\n};\r\n\r\nglobalScope[\"unmanaged\"] = function() {};\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_zero = Long.ZERO;\r\n\r\nglobal.i64_one = Long.ONE;\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_eq = function(left, right) {\r\n  return left.eq(right);\r\n};\r\n\r\nglobal.i64_ne = function(left, right) {\r\n  return left.ne(right);\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n/** Indicates specific features to activate. */\r\nexport const enum Feature {\r\n  /** No additional features. */\r\n  NONE = 0,\r\n  /** Sign extension operations. */\r\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\r\n  /** Mutable global imports and exports. */\r\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\r\n  /** Bulk memory operations. */\r\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  /** SIMD types and operations. */\r\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\r\n  /** Threading and atomic operations. */\r\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\r\n}\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64,\r\n  /** Portable. */\r\n  JS\r\n}\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\r\n//    3                   2                   1\r\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\r\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ RTTI_BASE\r\n// │                             count                             │\r\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\r\n// │                      Typeinfo#flags [id=0]                    │ id < count\r\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\r\n// │                      Typeinfo#base  [id=0]                    │\r\n// ├───────────────────────────────────────────────────────────────┤\r\n// │                              ...                              │\r\n\r\n/** Runtime type information data structure. */\r\n@unmanaged\r\nexport class Typeinfo {\r\n  /** Flags describing the shape of this class type. */\r\n  flags: TypeinfoFlags;\r\n  /** Base class id or `0` if none. */\r\n  base: u32;\r\n}\r\n\r\n/** Runtime type information flags. */\r\nexport const enum TypeinfoFlags {\r\n  /** No specific flags. */\r\n  NONE = 0,\r\n  /** Type is an `Array`. */\r\n  ARRAY = 1 << 0,\r\n  /** Type is a `Set`. */\r\n  SET = 1 << 1,\r\n  /** Type is a `Map`. */\r\n  MAP = 1 << 2,\r\n  /** Type is inherently acyclic. */\r\n  ACYCLIC = 1 << 3,\r\n  /** Value alignment of 1 byte. */\r\n  VALUE_ALIGN_0 = 1 << 4,\r\n  /** Value alignment of 2 bytes. */\r\n  VALUE_ALIGN_1 = 1 << 5,\r\n  /** Value alignment of 4 bytes. */\r\n  VALUE_ALIGN_2 = 1 << 6,\r\n  /** Value alignment of 8 bytes. */\r\n  VALUE_ALIGN_3 = 1 << 7,\r\n  /** Value alignment of 16 bytes. */\r\n  VALUE_ALIGN_4 = 1 << 8,\r\n  /** Value type is nullable. */\r\n  VALUE_NULLABLE = 1 << 9,\r\n  /** Value type is managed. */\r\n  VALUE_MANAGED = 1 << 10,\r\n  /** Key alignment of 1 byte. */\r\n  KEY_ALIGN_0 = 1 << 11,\r\n  /** Key alignment of 2 bytes. */\r\n  KEY_ALIGN_1 = 1 << 12,\r\n  /** Key alignment of 4 bytes. */\r\n  KEY_ALIGN_2 = 1 << 13,\r\n  /** Key alignment of 8 bytes. */\r\n  KEY_ALIGN_3 = 1 << 14,\r\n  /** Key alignment of 16 bytes. */\r\n  KEY_ALIGN_4 = 1 << 15,\r\n  /** Key type is nullable. */\r\n  KEY_NULLABLE = 1 << 16,\r\n  /** Key type is managed. */\r\n  KEY_MANAGED = 1 << 17\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport { Target, Feature } from \"./common\";\r\nimport { Compiler, Options } from \"./compiler\";\r\nimport { Decompiler } from \"./decompiler\";\r\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\r\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\r\nimport { Module } from \"./module\";\r\nimport { Parser } from \"./parser\";\r\nimport { Program } from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `sharedMemory` option. */\r\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\r\n  options.sharedMemory = sharedMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Sign extension operations. */\r\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\r\n/** Mutable global imports and exports. */\r\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\r\n/** Bulk memory operations. */\r\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\r\n/** SIMD types and operations. */\r\nexport const FEATURE_SIMD = Feature.SIMD;\r\n/** Threading and atomic operations. */\r\nexport const FEATURE_THREADS = Feature.THREADS;\r\n\r\n/** Enables a specific feature. */\r\nexport function enableFeature(options: Options, feature: Feature): void {\r\n  options.features |= feature;\r\n}\r\n\r\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\r\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\r\n  options.optimizeLevelHint = optimizeLevel;\r\n  options.shrinkLevelHint = shrinkLevel;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX } from \"./common\";\r\n\r\n// Full API\r\nexport * from \"./ast\";\r\n// export * from \"./binary\";\r\nexport * from \"./common\";\r\nexport * from \"./compiler\";\r\nexport * from \"./decompiler\";\r\nexport * from \"./definitions\";\r\nexport * from \"./diagnosticMessages.generated\";\r\nexport * from \"./diagnostics\";\r\nexport * from \"./flow\";\r\nexport * from \"./module\";\r\nexport * from \"./parser\";\r\nexport * from \"./program\";\r\nexport * from \"./resolver\";\r\nexport * from \"./tokenizer\";\r\nexport * from \"./types\";\r\nexport * from \"./util\";\r\n","/** @module util *//***/\r\n\r\n/** Tests if the bit at the specified index is set within a 64-bit map. */\r\nexport function bitsetIs(map: I64, index: i32): bool {\r\n  assert(index >= 0 && index < 64);\r\n  return i64_ne(\r\n    i64_and(\r\n      map,\r\n      i64_shl(\r\n        i64_one,\r\n        i64_new(index)\r\n      )\r\n    ),\r\n    i64_zero\r\n  );\r\n}\r\n\r\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\r\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\r\n  assert(index >= 0 && index < 64);\r\n  return isSet\r\n    ? i64_or(\r\n        map,\r\n        i64_shl(\r\n          i64_one,\r\n          i64_new(index)\r\n        )\r\n      )\r\n    : i64_and(\r\n        map,\r\n        i64_not(\r\n          i64_shl(\r\n            i64_one,\r\n            i64_new(index)\r\n          )\r\n        )\r\n      );\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode.A && c <= CharCode.Z\r\n      || c == CharCode._\r\n      || c == CharCode.DOLLAR\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode._\r\n      || c == CharCode.DOLLAR\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n  var midVal: u16;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + ((hi - lo) >> 1);\r\n    mid -= (mid & 1);\r\n    midVal = map[mid];\r\n    if (midVal <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < midVal) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\r\n  if (original) {\r\n    let cloned = new Array<V>(original.length);\r\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\r\n    return cloned;\r\n  }\r\n  return new Array<V>();\r\n}\r\n\r\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\r\n  if (original) {\r\n    let cloned = new Set<V>();\r\n    for (let v of original) cloned.add(v);\r\n    return cloned;\r\n  }\r\n  return new Set<V>();\r\n}\r\n\r\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\r\n  var cloned = new Map<K,V>();\r\n  if (original) {\r\n    for (let [k, v] of original) cloned.set(k, v);\r\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\r\n  } else if (overrides) {\r\n    for (let [k, v] of overrides) cloned.set(k, v);\r\n  }\r\n  return cloned;\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nimport {\r\n  PATH_DELIMITER\r\n} from \"../common\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + PATH_DELIMITER + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  if (pos <= 1) {\r\n    if (pos == 0) return \".\";\r\n    if (normalizedPath.charCodeAt(0) == separator) {\r\n      return normalizedPath;\r\n    }\r\n  }\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\n/** Reads an 8-bit integer from the specified buffer. */\r\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset];\r\n}\r\n\r\n/** Writes an 8-bit integer to the specified buffer. */\r\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset] = value;\r\n}\r\n\r\n/** Reads a 16-bit integer from the specified buffer. */\r\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8;\r\n}\r\n\r\n/** Writes a 16-bit integer to the specified buffer. */\r\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n}\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n"],"sourceRoot":""}