{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__18__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","FILESPACE_PREFIX","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","Array","emitDiagnostic","info","warning","error","__export","common_1","tokenizer_1","Token","Range","NodeKind","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","CALL","ELEMENTACCESS","PROPERTYACCESS","PARENTHESIZED","nodeIsGenericCallable","Node","parent","flags","NONE","is","flag","isAny","set","createType","typeArguments","isNullable","type","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","extendsType","defaultType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createSignature","parameters","returnType","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","node","CommentNode","commentKind","expr","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","k","setParentIfNotNull","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","identifier","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","_super","__extends","_this","apply","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","DecoratorKind","SIGNATURE","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","OPERATOR","SEALED","UNMANAGED","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","ASSERTION","BINARY","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","STRING","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","isLastStatement","BLOCK","FUNCTIONDECLARATION","METHODDECLARATION","SourceKind","Statement","Source","SOURCE","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","VARIABLE","NAMESPACEDECLARATION","EXPORT","isTopLevelExport","CLASSDECLARATION","STATIC","needsExplicitExport","member","INDEXSIGNATUREDECLARATION","VariableLikeDeclarationStatement","BREAK","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VOID","WHILE","asGlobal","endsWith","findDecorator","decorator","OperatorKind","diagnostics_1","types_1","ast_1","module_1","resolver_1","QueuedImport","QueuedExport","TypeAlias","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","noTypesYet","Map","Program","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayBufferInstance","arrayPrototype","stringInstance","mainFunction","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","resolver","Resolver","sources","getSource","lookupSourceByPath","normalizedPathWithoutExtension","tmp","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","setConstantInteger","i64_new","isWasm64","noTreeShaking","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","hasFeature","queuedImports","queuedExports","queuedExtends","queuedImplements","filespace","Filespace","internalName","currentFilespace","j","initializeClass","initializeEnum","initializeExports","initializeFunction","initializeImports","initializeInterface","initializeNamespace","initializeTypeAlias","initializeVariables","queuedImport","tryLocateImport","localName","splice","externalNameAlt","Module_0_has_no_exported_member_1","queuedExports_1","__values","queuedExports_1_1","next","done","_c","__read","exportName","queuedExport","currentExport","isReExport","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_d","Error","has","resolveClass","instance","Duplicate_identifier_0","programLevelInternalName","FUNCTION_PROTOTYPE","startFunction","GENERIC","AMBIENT","MAIN","resolveFunction","parameterTypes","signatureReference","byteSize","globalName","global","Global","withConstantIntegerValue","RESOLVED","setConstantFloat","withConstantFloatValue","queuedNamedExports","checkDecorators","acceptedFlags","presentFlags","decoratorKindToFlag","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","checkGlobal","parentNode","hasDecorator","namespace","fileLevelInternalName","simpleName","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","existingExport","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeAccessor","initializeMethod","classPrototype","isInterface","INTERFACE_PROTOTYPE","staticField","READONLY","ABSTRACT","instanceMembers","instanceField","FieldPrototype","decoratorFlags","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","initializeEnumValue","enm","EnumValue","initializeExport","externalIdentifier","prefix","FILESPACE","referencedName","referencedElement","seen","Set","add","initializeImport","indexPart","InterfacePrototype","parentNamespace","Namespace","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","existingExport_1","global_1","CONST","Element","program","NAMESPACE","ENUM","ENUMVALUE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","Parameter","Local","index","LOCAL","scopedGlobal","instances","classTypeArguments","applyClassTypeArguments","contextualTypeArguments","classTypeParameters","numClassTypeParameters","Function","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","localIndex","INSTANCE","local","thisType","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","_b","inheritedName","inheritedType","parameterType","parameterName","getParameterName","flow","Flow","addLocal","getTempLocal","wrapped","temps","toNativeType","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","FunctionTarget","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","FIELD","memoryOffset","Class","base","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseType","isAssignableTo","target","current","lookupOverload","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","fork","branch","slice","free","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","getScopedLocal","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritConditional","inheritMutual","leftExt","rightExt","thisExt","minLength","min","canOverflow","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","global_2","getGetGlobalName","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","compiler_1","NativeType","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenCurrentMemory","_BinaryenGrowMemory","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","memory","allocate","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","str","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","needsExplicitUnreachable","Return","Break","numChildren","program_1","TypeKind","TypeFlags","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","classType","asNullable","signednessIsRelevant","currentClass","targetClass","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","Signature","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","g","eval","e","window","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","builtins_1","Options","WASM32","importMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentOuterFunction","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","compileSource","funcRef","ensureFunctionType","i64_align","numPages","i64_shr_u","moduleExport","makeModuleExport","compileIterateRoots","subPrefix","_f","_g","_h","_j","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","setter","nativeType","nativeSizeType","getterName","setterName","_k","_l","_m","_o","fullName","_p","_q","ctor","compileSourceByPath","reportNode","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","initExpr","resolvedType","resolveType","Type_expected","atEnd","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","compileEnum","previousValue","previousValueIsMut","initInStart","valueDeclaration","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunctionUsingTypeArguments","makeMap","resolveFunctionInclTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","stmts","compileStatements","unshift","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","compileInterfaceDeclaration","compileNamespace","compileClassUsingTypeArguments","alternativeReportNode","resolveClassInclTypeArguments","compileClass","staticMembers","ctorInstance","_e","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","numStatements","Nop","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","compileInlineConstant","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","operatorInstance","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","resolveExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","currentElementExpression","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","Index_signature_is_missing_in_type_0","valueWithCorrectType","tee","thisExpression","currentThisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","indexedGet","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","typeNode","argumentExpression","inferredType","concreteType","resolvedTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","compileGetter","compileCallIndirect","typeArgumentNodes","resolveTypeArguments","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","includes","compileCallInlineUnchecked","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","previousFlow","parentBase","thisLocal","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","isInstance","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","resolveElementAccess","retainConstantType","scopedThis","_this_cannot_be_referenced_in_current_location","superType","_super_can_only_be_referenced_in_a_derived_class","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","ensureStaticArray","elementType","byteLength","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","isConst","compiledValues","constantValues","nativeElementType","isStatic","arrayType","nativeArrayType","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Property_0_does_not_exist_on_type_1","compileAllocate","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","classInstance","compileInstantiate","currentClassInstance","makeAllocate","propertyAccess","resolvePropertyAccess","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","calcValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","fieldType","nativeFieldType","fieldDeclaration","ReportMode","currentTypeIsPlaceholder","reportMode","REPORT","resolveSignature","numTypeArguments","paramType","instanceKey","placeholderType","Expected_0_type_arguments_but_got_1","parameterTypeNodes","parameterTypeNode","REST","returnTypeNode","minParameterCount","maxParameterCount","argumentCount","ensureResolvedLazyGlobal","contextualFunction","targetExpression","propertyName","elementAccess","explicitLocal","functionTarget","classInstanceKey","classInstances","instance_1","numFunctionTypeArguments","signatureNode","functionTypeParameters","signatureParameters","signatureParameterCount","parameterDeclaration","resolveFunctionPartially","partialKey","partialPrototype","expectedTypeArguments","actualTypeArguments","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","inheritedMember","constructorPartial","baseField","fieldInstance","instanceProperty","partialGetterPrototype","partialSetterPrototype","overloadPrototype","operatorPartial","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Switch","CallIndirect","SetGlobal","Store","i64_to_string","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","NEARBindingsBuilder","typeMapping","nonNullableTypes","generatedEncodeFunctions","generatedDecodeFunctions","build","generateArgsParser","generateWrapperFunction","fields","paramName","forEach","generateDecodeFunction","generateHandlerMethods","generateEncodeFunction","generateFieldEncoder","valuePrefix","setterType","this_1","generatePushHandler","encodeType","generateArrayHandlerMethods","getFields","sourceExpr","generateHandler","fieldExpr","indexOf","pushType","__spread","filter","visitInterface","mainSource","IDLBuilder","indentLevel","indent","typeToString","members_1","members_1_1","TSDBuilder","numMembers","members_2","members_2_1","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","QUOTED","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","ASC_TARGET","F64","Float64Array","U64","Uint32Array","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","Math","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","POSITIVE_INFINITY","Infinity","NEGATIVE_INFINITY","NaN","clz32","abs","floor","trunc","round","sqrt","x","y","sign","isTrueish","radix","parseInt","undefined","fromCodePoint","Number","isInteger","isArray","signbit","Boolean","HEAP","HEAP_OFFSET","oldHeap","copy","dest","src","copyWithin","F32","Float32Array","I32","Int32Array","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","mod","i64_rem_u","and","or","i64_xor","xor","shl","i64_shr","shr","shru","not","i64_eq","eq","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","gte","lte","minSafeF64","maxSafeF64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","evaluateConstantType","SWALLOW","expr_1","tempLocal0","tempLocal1","evaluateConstantOffset","alignLog2","Type_0_has_no_property_1","abort","operandExprs","signatureParts","nativeParamTypes","operandType","User_defined_0","expr_2","deferASM","deferASMCall","typeArgument","stringType","messageArg","filenameArg","existingIndex","gcPrototype","gcInstance","nativeSizeSize","baseInstance","funcName","allocateInstance","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","isUnicodeIdentifierStart","unicodeIdentifierPart","isUnicodeIdentifierPart","mid","makeArray","cloned","makeSet","original_1","original_1_1","v","original_2","original_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","buildNEAR"],"mappings":"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,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCE,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__18__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is an arrow function. */\n  ARROW = 1 << 19,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 20,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 21,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 22,\n  /** Is compiled. */\n  COMPILED = 1 << 23,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 24,\n  /** Is scoped. */\n  SCOPED = 1 << 25,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 26,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 27,\n  /** Is the main function. */\n  MAIN = 1 << 28,\n\n  // Other\n\n  QUOTED = 1 << 29\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Prefix used to indicate a filespace element. */\nexport const FILESPACE_PREFIX = \"file:\";\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(message.range, useColors));\n    }\n\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.PARENTHESIZED: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n  /** Parent node. */\n  parent: Node | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n\n  // types\n\n  static createType(\n    name: IdentifierExpression,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name; name.parent = type;\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createIdentifierExpression(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    defaultType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\n    elem.defaultType = defaultType; if (defaultType) defaultType.parent = elem;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters; setParent(parameters, sig);\n    sig.returnType = returnType; returnType.parent = sig;\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.arguments = args; if (args) setParent(args, stmt);\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression; expression.parent = expr;\n    expr.toType = toType; toType.parent = expr;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left; left.parent = expr;\n    expr.right = right; right.parent = expr;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions; setParent(expressions, expr);\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.elementExpression = element; element.parent = expr;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.flags = declaration.flags & CommonFlags.ARROW;\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.isType = isType; isType.parent = expr;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.property = property; property.parent = expr;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition; condition.parent = expr;\n    expr.ifThen = ifThen; ifThen.parent = expr;\n    expr.ifElse = ifElse; ifElse.parent = expr;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier; identifier.parent = stmt;\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement; statement.parent = stmt;\n    stmt.condition = condition; condition.parent = stmt;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.values = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    flags: CommonFlags,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.members = members; if (members) setParent(members, stmt);\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.externalName = externalName; externalName.parent = stmt;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    if (!externalName) {\n      externalName = name;\n    } else {\n      externalName.parent = elem;\n    }\n    elem.externalName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression; expression.parent = stmt;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    externalName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.externalName = externalName; externalName.parent = elem;\n    if (!name) {\n      name = externalName;\n    } else {\n      name.parent = elem;\n    }\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.type = type; if (type) type.parent = stmt;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.condition = condition; if (condition) condition.parent = stmt;\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: TypeNode,\n    valueType: CommonTypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType; keyType.parent = elem;\n    elem.valueType = valueType; valueType.parent = elem;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.cases = cases; setParent(cases, stmt);\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label; if (label) label.parent = elem;\n    elem.statements = statements; setParent(statements, elem);\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value; value.parent = stmt;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    stmt.catchVariable = catchVariable;\n    if (catchVariable) catchVariable.parent = stmt;\n    stmt.catchStatements = catchStatements;\n    if (catchStatements) setParent(catchStatements, stmt);\n    stmt.finallyStatements = finallyStatements;\n    if (finallyStatements) setParent(finallyStatements, stmt);\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.type = alias; alias.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.declarations = declarations; setParent(declarations, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\nexport function isLastStatement(statement: Statement): bool {\n  var parent = assert(statement.parent);\n  if (parent.kind == NodeKind.BLOCK) {\n    let statements = (<BlockStatement>parent).statements;\n    if (statements[statements.length - 1] === statement) {\n      switch (assert(parent.parent).kind) {\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.METHODDECLARATION: return true;\n      }\n    }\n  }\n  return false;\n}\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n\n  protected cachedProgramLevelInternalName: string | null = null;\n  protected cachedFileLevelInternalName: string | null = null;\n\n  /** Gets the mangled program-level internal name of this declaration. */\n  get programLevelInternalName(): string {\n    if (!this.cachedProgramLevelInternalName) {\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\n    }\n    return this.cachedProgramLevelInternalName;\n  }\n\n  /** Gets the mangled file-level internal name of this declaration. */\n  get fileLevelInternalName(): string {\n    if (!this.cachedFileLevelInternalName) {\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\n    }\n    return this.cachedFileLevelInternalName;\n  }\n\n  /** Tests if this is a top-level declaration within its source file. */\n  get isTopLevel(): bool {\n    var parent = this.parent;\n    if (!parent) {\n      return false;\n    }\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\n      return false;\n    }\n    return parent.kind == NodeKind.SOURCE;\n  }\n\n  /** Tests if this declaration is a top-level export within its source file. */\n  get isTopLevelExport(): bool {\n    var parent = this.parent;\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\n      return false;\n    }\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\n    }\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\n    }\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\n  }\n\n  /** Tests if this declaration needs an explicit export. */\n  needsExplicitExport(member: ExportMember): bool {\n    // This is necessary because module-level exports are automatically created\n    // for top level declarations of all sorts. This function essentially tests\n    // that there isn't a otherwise duplicate top-level export already.\n    return (\n      member.name.text != member.externalName.text || // if aliased\n      this.range.source != member.range.source ||     // if a re-export\n      !this.isTopLevelExport                          // if not top-level\n    );\n  }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: TypeNode;\n  /** Value type. */\n  valueType: CommonTypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[];\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Identifier being exported. */\n  name: IdentifierExpression;\n  /** Identifier seen when imported again. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index within the constructor, if applicable. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles a declaration's name to an internal name. */\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\n  var name = declaration.name.text;\n  var parent = declaration.parent;\n  if (!parent) return name;\n  if (\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\n    parent.kind == NodeKind.VARIABLE\n  ) { // skip over\n    if (!(parent = parent.parent)) return name;\n  }\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\n      declaration.is(CommonFlags.STATIC)\n        ? STATIC_DELIMITER\n        : INSTANCE_DELIMITER\n    ) + name;\n  }\n  if (\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\n    parent.kind == NodeKind.ENUMDECLARATION\n  ) {\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\n           STATIC_DELIMITER + name;\n  }\n  return asGlobal\n    ? name\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n// Helpers\n\n/** Sets the parent node on an array of nodes. */\nfunction setParent(nodes: Node[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    nodes[i].parent = parent;\n  }\n}\n\n/** Sets the parent node on an array of nullable nodes. */\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    let node = nodes[i];\n    if (node) node.parent = parent;\n  }\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  FILESPACE_PREFIX\n} from \"./common\";\n\nimport {\n  Options,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  Range,\n  CommonTypeNode,\n  TypeParameterNode,\n  DecoratorNode,\n  DecoratorKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Module,\n  NativeType,\n  FunctionRef,\n  ExpressionRef,\n  ExpressionId,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getBinaryOp,\n  getConstValueI32,\n  getBinaryLeft,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getLoadBytes,\n  isLoadSigned,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getConstValueF32,\n  getConstValueF64,\n  getConstValueI64Low,\n  getGetGlobalName\n} from \"./module\";\n\nimport {\n  CharCode\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\n/** Represents a yet unresolved import. */\nclass QueuedImport {\n  localName: string;\n  externalName: string;\n  externalNameAlt: string;\n  declaration: ImportDeclaration | null; // not set if a filespace\n}\n\n/** Represents a yet unresolved export. */\nclass QueuedExport {\n  externalName: string;\n  isReExport: bool;\n  member: ExportMember;\n}\n\n/** Represents a type alias. */\nclass TypeAlias {\n  typeParameters: TypeParameterNode[] | null;\n  type: CommonTypeNode;\n}\n\n/** Represents a module-level export. */\nclass ModuleExport {\n  element: Element;\n  identifier: IdentifierExpression;\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\nconst noTypesYet = new Map<string,Type>();\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Array of source files. */\n  sources: Source[];\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n\n  /** Elements by internal name. */\n  elementsLookup: Map<string,Element> = new Map();\n  /** Class and function instances by internal name. */\n  instancesLookup: Map<string,Element> = new Map();\n  /** Types by internal name. */\n  typesLookup: Map<string,Type> = noTypesYet;\n  /** Declared type aliases. */\n  typeAliases: Map<string,TypeAlias> = new Map();\n  /** File-level exports by exported name. */\n  fileLevelExports: Map<string,Element> = new Map();\n  /** Module-level exports by exported name. */\n  moduleLevelExports: Map<string,ModuleExport> = new Map();\n\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class | null = null;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n  /** Start function reference. */\n  startFunction: FunctionPrototype;\n  /** Main function reference, if present. */\n  mainFunction: FunctionPrototype | null = null;\n  /** Abort function reference, if present. */\n  abortInstance: Function | null = null;\n  /** Memory allocation function. */\n  memoryAllocateInstance: Function | null = null;\n\n  /** Whether a garbage collector is present or not. */\n  hasGC: bool = false;\n  /** Garbage collector allocation function. */\n  gcAllocateInstance: Function | null = null;\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\n  gcLinkInstance: Function | null = null;\n  /** Garbage collector mark function called to on reachable managed objects. */\n  gcMarkInstance: Function | null = null;\n  /** Size of a managed object header. */\n  gcHeaderSize: u32 = 0;\n  /** Offset of the GC hook. */\n  gcHookOffset: u32 = 0;\n\n  /** Currently processing filespace. */\n  currentFilespace: Filespace;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.resolver = new Resolver(this);\n    this.sources = [];\n  }\n\n  /** Gets a source by its exact path. */\n  getSource(normalizedPath: string): Source | null {\n    var sources = this.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == normalizedPath) return source;\n    }\n    return null;\n  }\n\n  /** Looks up the source for the specified possibly ambiguous path. */\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\n    var tmp: string;\n    return (\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\n      this.getSource( tmp                                                    + \"/index.ts\")\n    );\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // add built-in types\n    this.typesLookup = new Map([\n      [\"i8\", Type.i8],\n      [\"i16\", Type.i16],\n      [\"i32\", Type.i32],\n      [\"i64\", Type.i64],\n      [\"isize\", options.isizeType],\n      [\"u8\", Type.u8],\n      [\"u16\", Type.u16],\n      [\"u32\", Type.u32],\n      [\"u64\", Type.u64],\n      [\"usize\", options.usizeType],\n      [\"bool\", Type.bool],\n      [\"f32\", Type.f32],\n      [\"f64\", Type.f64],\n      [\"void\", Type.void],\n      [\"number\", Type.f64],\n      [\"boolean\", Type.bool]\n    ]);\n\n    // add compiler hints\n    this.setConstantInteger(\"ASC_TARGET\", Type.i32,\n      i64_new(options.isWasm64 ? 2 : 1));\n    this.setConstantInteger(\"ASC_NO_TREESHAKING\", Type.bool,\n      i64_new(options.noTreeShaking ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_NO_ASSERT\", Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_MEMORY_BASE\", Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.setConstantInteger(\"ASC_OPTIMIZE_LEVEL\", Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.setConstantInteger(\"ASC_SHRINK_LEVEL\", Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.setConstantInteger(\"ASC_FEATURE_MUTABLE_GLOBAL\", Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_FEATURE_SIGN_EXTENSION\", Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<string,QueuedExport>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // build initial lookup maps of internal names to declarations\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n\n      // create one filespace per source\n      let filespace = new Filespace(this, source);\n      this.elementsLookup.set(filespace.internalName, filespace);\n      this.currentFilespace = filespace;\n\n      // process this source's statements\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement);\n            break;\n          }\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, queuedExports);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeAlias(<TypeDeclaration>statement);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0; i < queuedImports.length;) {\n      let queuedImport = queuedImports[i];\n      let declaration = queuedImport.declaration;\n      if (declaration) { // named\n        let element = this.tryLocateImport(queuedImport.externalName, queuedExports);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.tryLocateImport(queuedImport.externalNameAlt, queuedExports)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              declaration.range,\n              (<ImportStatement>declaration.parent).path.value,\n              declaration.externalName.text\n            );\n            ++i;\n          }\n        }\n      } else { // filespace\n        let element = this.elementsLookup.get(queuedImport.externalName);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.elementsLookup.get(queuedImport.externalNameAlt)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            assert(false); // already reported by the parser not finding the file\n            ++i;\n          }\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [exportName, queuedExport] of queuedExports) {\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\n      let element: Element | null;\n      do {\n        if (currentExport.isReExport) {\n          if (element = this.fileLevelExports.get(currentExport.externalName)) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              queuedExport.member.externalName\n            );\n            break;\n          }\n          currentExport = queuedExports.get(currentExport.externalName);\n          if (!currentExport) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.member.externalName.range,\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\n              queuedExport.member.externalName.text\n            );\n          }\n        } else {\n          if (\n            // normal export\n            (element = this.elementsLookup.get(currentExport.externalName)) ||\n            // library re-export\n            (element = this.elementsLookup.get(currentExport.member.name.text))\n          ) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              queuedExport.member.externalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              queuedExport.member.range, queuedExport.member.name.text\n            );\n          }\n          break;\n        }\n      } while (currentExport);\n    }\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let derivedPrototype = queuedExtends[i];\n      let derivedDeclaration = derivedPrototype.declaration;\n      let derivedType = assert(derivedDeclaration.extendsType);\n      let baseElement = resolver.resolveIdentifier(derivedType.name, null); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        derivedPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          derivedType.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let element = this.elementsLookup.get(name);\n          if (element) this.elementsLookup.set(alias, element);\n          else throw new Error(\"element not found: \" + name);\n        }\n      }\n    }\n\n    // register 'ArrayBuffer'\n    if (this.elementsLookup.has(\"ArrayBuffer\")) {\n      let element = assert(this.elementsLookup.get(\"ArrayBuffer\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\n    }\n\n    // register 'Array'\n    if (this.elementsLookup.has(\"Array\")) {\n      let element = assert(this.elementsLookup.get(\"Array\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayPrototype = <ClassPrototype>element;\n    }\n\n    // register 'String'\n    if (this.elementsLookup.has(\"String\")) {\n      let element = assert(this.elementsLookup.get(\"String\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let instance = resolver.resolveClass(<ClassPrototype>element, null);\n      if (instance) {\n        if (this.typesLookup.has(\"string\")) {\n          let declaration = (<ClassPrototype>element).declaration;\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, declaration.programLevelInternalName\n          );\n        } else {\n          this.stringInstance = instance;\n          this.typesLookup.set(\"string\", instance.type);\n        }\n      }\n    }\n\n    // register 'start'\n    {\n      let element = assert(this.elementsLookup.get(\"start\"));\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      this.startFunction = <FunctionPrototype>element;\n    }\n\n    // register 'main' if present\n    if (this.moduleLevelExports.has(\"main\")) {\n      let element = (<ModuleExport>this.moduleLevelExports.get(\"main\")).element;\n      if (\n        element.kind == ElementKind.FUNCTION_PROTOTYPE &&\n        !(<FunctionPrototype>element).isAny(CommonFlags.GENERIC | CommonFlags.AMBIENT)\n      ) {\n        (<FunctionPrototype>element).set(CommonFlags.MAIN);\n        this.mainFunction = <FunctionPrototype>element;\n      }\n    }\n\n    // register 'abort' if present\n    if (this.elementsLookup.has(\"abort\")) {\n      let element = <Element>this.elementsLookup.get(\"abort\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n      if (instance) this.abortInstance = instance;\n    }\n\n    // register 'memory.allocate' if present\n    if (this.elementsLookup.has(\"memory\")) {\n      let element = <Element>this.elementsLookup.get(\"memory\");\n      let members = element.members;\n      if (members) {\n        if (members.has(\"allocate\")) {\n          element = assert(members.get(\"allocate\"));\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (instance) this.memoryAllocateInstance = instance;\n        }\n      }\n    }\n\n    // register GC hooks if present\n    if (\n      this.elementsLookup.has(\"__gc_allocate\") &&\n      this.elementsLookup.has(\"__gc_link\") &&\n      this.elementsLookup.has(\"__gc_mark\")\n    ) {\n      // __gc_allocate(usize, (ref: usize) => void): usize\n      let element = <Element>this.elementsLookup.get(\"__gc_allocate\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      let signature = gcAllocateInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1].signatureReference);\n      assert(signature.returnType == this.options.usizeType);\n\n      // __gc_link(usize, usize): void\n      element = <Element>this.elementsLookup.get(\"__gc_link\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcLinkInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      // __gc_mark(usize): void\n      element = <Element>this.elementsLookup.get(\"__gc_mark\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcMarkInstance.signature;\n      assert(signature.parameterTypes.length == 1);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      this.gcAllocateInstance = gcAllocateInstance;\n      this.gcLinkInstance = gcLinkInstance;\n      this.gcMarkInstance = gcMarkInstance;\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\n      this.gcHookOffset =  gcHookOffset;\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\n      this.hasGC = true;\n    }\n  }\n\n  /** Sets a constant integer value. */\n  setConstantInteger(globalName: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER));\n    var global = new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n      .withConstantIntegerValue(value);\n    global.set(CommonFlags.RESOLVED);\n    this.elementsLookup.set(globalName, global);\n  }\n\n  /** Sets a constant float value. */\n  setConstantFloat(globalName: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT));\n    var global = new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n      .withConstantFloatValue(value);\n    global.set(CommonFlags.RESOLVED);\n    this.elementsLookup.set(globalName, global);\n  }\n\n  /** Tries to locate an import by traversing exports and queued exports. */\n  private tryLocateImport(\n    externalName: string,\n    queuedNamedExports: Map<string,QueuedExport>\n  ): Element | null {\n    var element: Element | null;\n    var fileLevelExports = this.fileLevelExports;\n    do {\n      if (element = fileLevelExports.get(externalName)) return element;\n      let queuedExport = queuedNamedExports.get(externalName);\n      if (!queuedExport) break;\n      if (queuedExport.isReExport) {\n        externalName = queuedExport.externalName;\n        continue;\n      }\n      return this.elementsLookup.get(queuedExport.externalName);\n    } while (true);\n    return null;\n  }\n\n  /** Checks that only supported decorators are present. */\n  private checkDecorators(\n    decorators: DecoratorNode[],\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var presentFlags = DecoratorFlags.NONE;\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      let kind = decoratorNameToKind(decorator.name);\n      let flag = decoratorKindToFlag(kind);\n      if (flag) {\n        if (flag == DecoratorFlags.BUILTIN) {\n          if (decorator.range.source.isLibrary) {\n            presentFlags |= flag;\n          } else {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          }\n        } else if (!(acceptedFlags & flag)) {\n          this.error(\n            DiagnosticCode.Decorator_0_is_not_valid_here,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else if (presentFlags & flag) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else {\n          presentFlags |= flag;\n        }\n      }\n    }\n    return presentFlags;\n  }\n\n  /** Checks and sets up global options of an element. */\n  private checkGlobal(\n    element: Element,\n    declaration: DeclarationStatement\n  ): void {\n    var parentNode = declaration.parent;\n    // alias globally if explicitly annotated @global or exported from a top-level library file\n    if (\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\n      (\n        declaration.range.source.isLibrary &&\n        element.is(CommonFlags.EXPORT) &&\n        (\n          assert(parentNode).kind == NodeKind.SOURCE ||\n          (\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\n          )\n        )\n    ) {\n      let globalName = declaration.programLevelInternalName;\n      if (this.elementsLookup.has(globalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, element.internalName\n        );\n      } else {\n        this.elementsLookup.set(globalName, element);\n      }\n    }\n    // builtins use the global name directly\n    if (element.hasDecorator(DecoratorFlags.BUILTIN)) {\n      element.internalName = declaration.programLevelInternalName;\n    }\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    declaration: ClassDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new ClassPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.SEALED |\n            DecoratorFlags.UNMANAGED\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n\n      // remember classes that implement interfaces\n      } else if (numImplementsTypes) {\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning( // TODO\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(prototype);\n      }\n    }\n\n    // remember classes that extend another one\n    if (declaration.extendsType) queuedExtends.push(prototype);\n\n    // add as namespace member if applicable\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // otherwise add to file-level exports if exported\n    } else if (prototype.is(CommonFlags.EXPORT)) {\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: {\n          assert(false); // should have been reported while parsing\n          return;\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    declaration: FieldDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var decorators = declaration.decorators;\n    var isInterface = classPrototype.kind == ElementKind.INTERFACE_PROTOTYPE;\n\n    // static fields become global variables\n    if (declaration.is(CommonFlags.STATIC)) {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(false);\n      }\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      let staticField = new Global(\n        this,\n        name,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators, DecoratorFlags.INLINE)\n          : DecoratorFlags.NONE\n      );\n      staticField.parent = classPrototype;\n      classPrototype.members.set(name, staticField);\n      this.elementsLookup.set(internalName, staticField);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        staticField.set(CommonFlags.MODULE_EXPORT);\n      }\n\n      if (staticField.hasDecorator(DecoratorFlags.INLINE) && !staticField.is(CommonFlags.READONLY)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n    // instance fields are remembered until resolved\n    } else {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      }\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instanceField = new FieldPrototype(\n        classPrototype,\n        name,\n        internalName,\n        declaration\n      );\n      if (decorators) this.checkDecorators(decorators, DecoratorFlags.NONE);\n      classPrototype.instanceMembers.set(name, instanceField);\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var prototype: FunctionPrototype | null = null;\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.OPERATOR_BINARY  |\n        DecoratorFlags.OPERATOR_PREFIX  |\n        DecoratorFlags.OPERATOR_POSTFIX |\n        DecoratorFlags.INLINE\n      );\n    }\n\n    // static methods become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\n          internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      classPrototype.members.set(simpleName, prototype);\n      this.elementsLookup.set(internalName, prototype);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance methods are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\n      // }\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\n        if (classPrototype.constructorPrototype) {\n          this.error(\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\n            declaration.name.range\n          );\n        } else {\n          prototype.set(CommonFlags.CONSTRUCTOR);\n          classPrototype.constructorPrototype = prototype;\n        }\n      } else {\n        classPrototype.instanceMembers.set(simpleName, prototype);\n      }\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\n  }\n\n  private checkOperatorOverloads(\n    decorators: DecoratorNode[] | null,\n    prototype: FunctionPrototype,\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(0)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private initializeAccessor(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalPropertyName = declaration.fileLevelInternalName;\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\n    var isGetter = declaration.is(CommonFlags.GET);\n    var isNew = false;\n    if (propertyElement) {\n      if (\n        propertyElement.kind != ElementKind.PROPERTY ||\n        (isGetter\n          ? (<Property>propertyElement).getterPrototype\n          : (<Property>propertyElement).setterPrototype\n        ) != null\n      ) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalPropertyName\n        );\n        return;\n      }\n    } else {\n      propertyElement = new Property(\n        this,\n        simpleName,\n        internalPropertyName,\n        classPrototype\n      );\n      isNew = true;\n    }\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.INLINE\n      );\n    }\n\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\n\n    // static accessors become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\n      if (this.elementsLookup.has(staticName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, staticName\n        );\n        return;\n      }\n      let staticPrototype = new FunctionPrototype(\n        this,\n        baseName,\n        staticName,\n        declaration,\n        null,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = staticPrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = staticPrototype;\n      }\n      if (isNew) {\n        if (classPrototype.members) {\n          if (classPrototype.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, staticName\n            );\n            return;\n          }\n        } else {\n          classPrototype.members = new Map();\n        }\n        classPrototype.members.set(simpleName, propertyElement); // check above\n      } else {\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\n      }\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance accessors are remembered until resolved\n    } else {\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(baseName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalPropertyName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instancePrototype = new FunctionPrototype(\n        this,\n        baseName,\n        instanceName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = instancePrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = instancePrototype;\n      }\n      classPrototype.instanceMembers.set(baseName, propertyElement);\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n  }\n\n  private initializeEnum(\n    declaration: EnumDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var element = new Enum(this, simpleName, internalName, declaration);\n    element.parent = namespace;\n    this.elementsLookup.set(internalName, element);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, element);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\n        element.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, element);\n      this.currentFilespace.members.set(simpleName, element);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        element.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n\n    this.checkGlobal(element, declaration);\n  }\n\n  private initializeEnumValue(\n    declaration: EnumValueDeclaration,\n    enm: Enum\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    if (enm.members) {\n      if (enm.members.has(name)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n    } else {\n      enm.members = new Map();\n    }\n    var value = new EnumValue(enm, this, name, internalName, declaration);\n    enm.members.set(name, value);\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\n      value.set(CommonFlags.MODULE_EXPORT);\n    }\n  }\n\n  private initializeExports(\n    statement: ExportStatement,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var members = statement.members;\n    if (members) { // named\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\n      }\n    } else { // TODO: filespace\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.range\n      );\n    }\n  }\n\n  private setExportAndCheckLibrary(\n    internalName: string,\n    element: Element,\n    externalIdentifier: IdentifierExpression\n  ): void {\n    // add to file-level exports\n    this.fileLevelExports.set(internalName, element);\n\n    // add to filespace\n    var internalPath = externalIdentifier.range.source.internalPath;\n    var prefix = FILESPACE_PREFIX + internalPath;\n    var filespace = this.elementsLookup.get(prefix);\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\n    assert(filespace.kind == ElementKind.FILESPACE);\n    var simpleName = externalIdentifier.text;\n    (<Filespace>filespace).members.set(simpleName, element);\n\n    // add global alias if a top-level export of a library file\n    var source = externalIdentifier.range.source;\n    if (source.isLibrary) {\n      if (this.elementsLookup.has(simpleName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          externalIdentifier.range, simpleName\n        );\n      } else {\n        element.internalName = simpleName;\n        this.elementsLookup.set(simpleName, element);\n      }\n\n    // add module level export if a top-level export of an entry file\n    } else if (source.isEntry) {\n      this.moduleLevelExports.set(externalIdentifier.text, <ModuleExport>{\n        element,\n        identifier: externalIdentifier\n      });\n    }\n  }\n\n  private initializeExport(\n    member: ExportMember,\n    internalPath: string | null,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\n    if (this.fileLevelExports.has(externalName)) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.externalName.range, externalName\n      );\n      return;\n    }\n    var referencedName: string;\n    var referencedElement: Element | null;\n    var queuedExport: QueuedExport | null;\n\n    // export local element\n    if (internalPath == null) {\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the element exists\n      if (this.elementsLookup.has(referencedName)) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          <Element>this.elementsLookup.get(referencedName),\n          member.externalName\n        );\n        return;\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = false;\n      queuedExport.externalName = referencedName; // -> here: local name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n\n    // export external element\n    } else {\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the export exists\n      referencedElement = this.elementsLookup.get(referencedName);\n      if (referencedElement) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // walk already known queued exports\n      let seen = new Set<QueuedExport>();\n      while (queuedExport = queuedExports.get(referencedName)) {\n        if (queuedExport.isReExport) {\n          referencedElement = this.fileLevelExports.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          referencedName = queuedExport.externalName;\n          if (seen.has(queuedExport)) break;\n          seen.add(queuedExport);\n        } else {\n          referencedElement = this.elementsLookup.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          break;\n        }\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = true;\n      queuedExport.externalName = referencedName; // -> here: external name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n    }\n  }\n\n  private initializeFunction(\n    declaration: FunctionDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var decorators = declaration.decorators;\n    var prototype = new FunctionPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      null,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.INLINE |\n            DecoratorFlags.EXTERNAL\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.parent = namespace;\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeImports(\n    statement: ImportStatement,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) {\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          statement.internalPath,\n          queuedExports, queuedImports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\n      let simpleName = statement.namespaceName.text;\n      let internalName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        simpleName\n      );\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          statement.namespaceName.range,\n          internalName\n        );\n        return;\n      }\n\n      // resolve right away if the exact filespace exists\n      let filespace = this.elementsLookup.get(statement.internalPath);\n      if (filespace) {\n        this.elementsLookup.set(internalName, filespace);\n        return;\n      }\n\n      // otherwise queue it\n      let queuedImport = new QueuedImport();\n      queuedImport.localName = internalName;\n      let externalName = FILESPACE_PREFIX + statement.internalPath;\n      queuedImport.externalName = externalName;\n      queuedImport.externalNameAlt = externalName + PATH_DELIMITER + \"index\";\n      queuedImport.declaration = null; // filespace\n      queuedImports.push(queuedImport);\n    }\n  }\n\n  private initializeImport(\n    declaration: ImportDeclaration,\n    internalPath: string,\n    queuedNamedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var localName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(localName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, localName\n      );\n      return;\n    }\n\n    var externalName = internalPath + PATH_DELIMITER + declaration.externalName.text;\n\n    // resolve right away if the exact export exists\n    var element: Element | null;\n    if (element = this.fileLevelExports.get(externalName)) {\n      this.elementsLookup.set(localName, element);\n      return;\n    }\n\n    // otherwise queue it\n    const indexPart = PATH_DELIMITER + \"index\";\n    var queuedImport = new QueuedImport();\n    queuedImport.localName = localName;\n    if (internalPath.endsWith(indexPart)) {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\n        declaration.externalName.text\n      );\n    } else {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath +\n        indexPart +\n        PATH_DELIMITER +\n        declaration.externalName.text\n      );\n    }\n    queuedImport.declaration = declaration; // named\n    queuedImports.push(queuedImport);\n  }\n\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new InterfacePrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators, DecoratorFlags.GLOBAL)\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(prototype.internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(prototype.internalName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"interface member expected\");\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeNamespace(\n    declaration: NamespaceDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    parentNamespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    var simpleName = declaration.name.text;\n    var namespace = this.elementsLookup.get(internalName);\n    if (!namespace) {\n      namespace = new Namespace(this, simpleName, internalName, declaration);\n      namespace.parent = parentNamespace;\n      this.elementsLookup.set(internalName, namespace);\n      this.checkGlobal(namespace, declaration);\n    }\n\n    if (parentNamespace) {\n      if (parentNamespace.members) {\n        if (parentNamespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        parentNamespace.members = new Map();\n      }\n      parentNamespace.members.set(simpleName, namespace);\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\n      let existingExport = this.fileLevelExports.get(internalName);\n      if (existingExport) {\n        if (!existingExport.is(CommonFlags.EXPORT)) {\n          this.error(\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n            declaration.name.range, namespace.internalName\n          ); // recoverable\n        }\n        namespace = existingExport; // join\n      } else {\n        this.fileLevelExports.set(internalName, namespace);\n      }\n      this.currentFilespace.members.set(simpleName, namespace);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          if (existingExport.element !== namespace) { // not merged\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            return;\n          }\n        } else {\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: namespace,\n            identifier: declaration.name\n          });\n        }\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      switch (members[i].kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\n          // TODO: what about namespaced types?\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            members[i].range\n          );\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>members[i], namespace);\n          break;\n        }\n        default: {\n          throw new Error(\"namespace member expected\");\n        }\n      }\n    }\n  }\n\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\n    // type aliases are program globals\n    // TODO: what about namespaced types?\n    var name = declaration.name.text;\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, name\n      );\n      return;\n    }\n    var alias = new TypeAlias();\n    alias.typeParameters = declaration.typeParameters;\n    alias.type = declaration.type;\n    this.typeAliases.set(name, alias);\n  }\n\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let decorators = declaration.decorators;\n      let internalName = declaration.fileLevelInternalName;\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        continue;\n      }\n      let simpleName = declaration.name.text;\n      let global = new Global(\n        this,\n        simpleName,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators,\n              DecoratorFlags.GLOBAL |\n              DecoratorFlags.INLINE |\n              DecoratorFlags.EXTERNAL\n            )\n          : DecoratorFlags.NONE\n      );\n      global.parent = namespace;\n      this.elementsLookup.set(internalName, global);\n\n      if (global.hasDecorator(DecoratorFlags.INLINE) && !global.is(CommonFlags.CONST)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n      if (namespace) {\n        if (namespace.members) {\n          if (namespace.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n        } else {\n          namespace.members = new Map();\n        }\n        namespace.members.set(simpleName, global);\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\n          global.set(CommonFlags.MODULE_EXPORT);\n        }\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\n        if (this.fileLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n        } else {\n          this.fileLevelExports.set(internalName, global);\n        }\n        this.currentFilespace.members.set(simpleName, global);\n        if (declaration.range.source.isEntry) {\n          if (this.moduleLevelExports.has(simpleName)) {\n            let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            continue;\n          }\n          global.set(CommonFlags.MODULE_EXPORT);\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: global,\n            identifier: declaration.name\n          });\n        }\n      }\n      this.checkGlobal(global, declaration);\n    }\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link Filespace}. */\n  FILESPACE,\n}\n\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8\n}\n\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Specific element kind. */\n  kind: ElementKind;\n  /** Containing {@link Program}. */\n  program: Program;\n  /** Simple name. */\n  simpleName: string;\n  /** Internal name referring to this element. */\n  internalName: string;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Namespaced member elements. */\n  members: Map<string,Element> | null = null;\n  /** Parent element, if applicable. */\n  parent: Element | null = null;\n\n  /** Constructs a new element, linking it to its containing {@link Program}. */\n  protected constructor(program: Program, simpleName: string, internalName: string) {\n    this.program = program;\n    this.simpleName = simpleName;\n    this.internalName = internalName;\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n}\n\n/** A filespace representing the implicit top-level namespace of a source. */\nexport class Filespace extends Element {\n\n  kind = ElementKind.FILESPACE;\n\n  /** File members (externally visible only). */\n  members: Map<string,Element>; // more specific\n\n  /** Constructs a new filespace. */\n  constructor(\n    program: Program,\n    source: Source\n  ) {\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\n    this.members = new Map();\n  }\n}\n\n/** A namespace that differs from a filespace in being user-declared with a name. */\nexport class Namespace extends Element {\n\n  // All elements have namespace semantics. This is an explicitly declared one.\n  kind = ElementKind.NAMESPACE;\n\n  /** Declaration reference. */\n  declaration: NamespaceDeclaration; // more specific\n\n  /** Constructs a new namespace. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: NamespaceDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum. */\nexport class Enum extends Element {\n\n  kind = ElementKind.ENUM;\n\n  /** Declaration reference. */\n  declaration: EnumDeclaration;\n\n  /** Constructs a new enum. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends Element {\n\n  kind = ElementKind.ENUMVALUE;\n\n  /** Declaration reference. */\n  declaration: EnumValueDeclaration;\n  /** Constant value, if applicable. */\n  constantValue: i32 = 0;\n\n  constructor(\n    enm: Enum,\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumValueDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = enm;\n    this.declaration = declaration;\n  }\n}\n\nexport const enum ConstantValueKind {\n  NONE,\n  INTEGER,\n  FLOAT\n}\n\nexport class VariableLikeElement extends Element {\n\n  // kind varies\n\n  /** Declaration reference. */\n  declaration: VariableLikeDeclarationStatement | null;\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\n  type: Type;\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  protected constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null\n  ) {\n    super(program, simpleName, internalName);\n    this.type = type;\n    this.declaration = declaration;\n  }\n\n  withConstantIntegerValue(value: I64): this {\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n\n  withConstantFloatValue(value: f64): this {\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  kind = ElementKind.GLOBAL;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, type, declaration);\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\n    this.decoratorFlags = decoratorFlags;\n    this.type = type; // resolved later if `void`\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n\n  // not an Element on its own\n\n  /** Parameter name. */\n  name: string;\n  /** Parameter type. */\n  type: Type;\n  /** Parameter initializer. */\n  initializer: Expression | null;\n\n  /** Constructs a new function parameter. */\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\n    this.name = name;\n    this.type = type;\n    this.initializer = initializer;\n  }\n}\n\n/** A function local. */\nexport class Local extends VariableLikeElement {\n\n  kind = ElementKind.LOCAL;\n\n  /** Local index. */\n  index: i32;\n  /** Respective scoped global, if any. */\n  scopedGlobal: Global | null = null;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    index: i32,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null = null\n  ) {\n    super(program, simpleName, simpleName, type, declaration);\n    this.index = index;\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends Element {\n\n  kind = ElementKind.FUNCTION_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FunctionDeclaration;\n  /** If an instance method, the class prototype reference. */\n  classPrototype: ClassPrototype | null;\n  /** Resolved instances by class type arguments and function type arguments. */\n  instances: Map<string,Map<string,Function>> = new Map();\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\n  classTypeArguments: Type[] | null = null;\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: FunctionDeclaration,\n    classPrototype: ClassPrototype | null = null,\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.classPrototype = classPrototype;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Applies class type arguments to the context of a partially resolved instance method. */\n  applyClassTypeArguments(contextualTypeArguments: Map<string,Type>): void {\n    var classTypeArguments = assert(this.classTypeArguments); // set only if partial\n    var classDeclaration = assert(this.classPrototype).declaration;\n    var classTypeParameters = classDeclaration.typeParameters;\n    var numClassTypeParameters = classTypeParameters.length;\n    assert(numClassTypeParameters == classTypeArguments.length);\n    for (let i = 0; i < numClassTypeParameters; ++i) {\n      contextualTypeArguments.set(\n        classTypeParameters[i].name.text,\n        classTypeArguments[i]\n      );\n    }\n  }\n\n  toString(): string { return this.simpleName; }\n}\n\n/** A resolved function. */\nexport class Function extends Element {\n\n  kind = ElementKind.FUNCTION;\n\n  /** Prototype reference. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Current break context label. */\n  breakContext: string | null = null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Current control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n  /** The outer scope, if a function expression. */\n  outerScope: Flow | null = null;\n\n  private nextBreakId: i32 = 0;\n  private breakStack: i32[] | null = null;\n  nextInlineId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    prototype: FunctionPrototype,\n    internalName: string,\n    signature: Signature,\n    parent: Element | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(prototype.program, prototype.simpleName, internalName);\n    this.prototype = prototype;\n    this.signature = signature;\n    this.parent = parent;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    if (!(prototype.is(CommonFlags.AMBIENT))) {\n      let localIndex = 0;\n      if (parent && parent.kind == ElementKind.CLASS) {\n        assert(this.is(CommonFlags.INSTANCE));\n        let local = new Local(\n          prototype.program,\n          \"this\",\n          localIndex++,\n          assert(signature.thisType)\n        );\n        this.localsByName.set(\"this\", local);\n        this.localsByIndex[local.index] = local;\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\n        if (inheritedTypeArguments) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n            if (!this.contextualTypeArguments.has(inheritedName)) {\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\n            }\n          }\n        }\n      } else {\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          prototype.program,\n          parameterName,\n          localIndex++,\n          parameterType\n          // FIXME: declaration?\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var local = new Local(\n      this.prototype.program,\n      name\n        ? name\n        : \"var$\" + localIndex.toString(10),\n      localIndex,\n      type,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  private tempI32s: Local[] | null = null;\n  private tempI64s: Local[] | null = null;\n  private tempF32s: Local[] | null = null;\n  private tempF64s: Local[] | null = null;\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s;\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s;\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s;\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s;\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = this.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = this.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Enters a(nother) break context. */\n  enterBreakContext(): string {\n    var id = this.nextBreakId++;\n    if (!this.breakStack) this.breakStack = [ id ];\n    else this.breakStack.push(id);\n    return this.breakContext = id.toString(10);\n  }\n\n  /** Leaves the current break context. */\n  leaveBreakContext(): void {\n    assert(this.breakStack != null);\n    var length = (<i32[]>this.breakStack).length;\n    assert(length > 0);\n    (<i32[]>this.breakStack).pop();\n    if (length > 1) {\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\n    } else {\n      this.breakContext = null;\n      this.breakStack = null;\n    }\n  }\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakContext = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n\n  /** Returns the TypeScript representation of this function. */\n  toString(): string { return this.prototype.simpleName; }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  kind = ElementKind.FUNCTION_TARGET;\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(program: Program, signature: Signature) {\n    super(program, \"\", \"\");\n    var simpleName = signature.toSignatureString();\n    this.simpleName = simpleName;\n    this.internalName = simpleName;\n    this.signature = signature;\n    this.type = Type.u32.asFunction(signature);\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends Element {\n\n  kind = ElementKind.FIELD_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FieldDeclaration;\n  /** Parent class prototype. */\n  classPrototype: ClassPrototype;\n\n  /** Constructs a new field prototype. */\n  constructor(\n    classPrototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    declaration: FieldDeclaration\n  ) {\n    super(classPrototype.program, simpleName, internalName);\n    this.classPrototype = classPrototype;\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  kind = ElementKind.FIELD;\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    prototype: FieldPrototype,\n    internalName: string,\n    type: Type,\n    declaration: FieldDeclaration,\n    parent: Class\n  ) {\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.type = type;\n    this.parent = parent;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class Property extends Element {\n\n  kind = ElementKind.PROPERTY;\n\n  /** Parent class prototype. */\n  parent: ClassPrototype;\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    parent: ClassPrototype\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = parent;\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends Element {\n\n  kind = ElementKind.CLASS_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: ClassDeclaration;\n  /** Resolved instances. */\n  instances: Map<string,Class> = new Map();\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: ClassDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A resolved class. */\nexport class Class extends Element {\n\n  kind = ElementKind.CLASS;\n\n  /** Prototype reference. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Resolved class type. */\n  type: Type;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Function index of the GC hook. */\n  gcHookIndex: u32 = <u32>-1;\n\n  /** Constructs a new class. */\n  constructor(\n    prototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] | null = null,\n    base: Class | null = null\n  ) {\n    super(prototype.program, simpleName, internalName);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.type = prototype.program.options.usizeType.asClass(this);\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          this.contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply instance-specific contextual type arguments\n    var declaration = this.prototype.declaration;\n    var i: i32, k: i32;\n    if (declaration) { // irrelevant for built-ins\n      let typeParameters = declaration.typeParameters;\n      if (typeArguments) {\n        if ((k = typeArguments.length) != typeParameters.length) {\n          throw new Error(\"type argument count mismatch\");\n        }\n        if (k) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (i = 0; i < k; ++i) {\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n          }\n        }\n      } else if (typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  kind = ElementKind.INTERFACE_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: InterfaceDeclaration; // more specific\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, declaration, decoratorFlags);\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class {\n\n  kind = ElementKind.INTERFACE;\n\n  /** Prototype reference. */\n  prototype: InterfacePrototype; // more specific\n  /** Base interface, if applcable. */\n  base: Interface | null; // more specific\n\n  /** Constructs a new interface. */\n  constructor(\n    prototype: InterfacePrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(prototype, simpleName, internalName, typeArguments, base);\n  }\n}\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This branch always returns. */\n  RETURNS = 1 << 0,\n  /** This branch always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This branch always throws. */\n  THROWS = 1 << 2,\n  /** This branch always breaks. */\n  BREAKS = 1 << 3,\n  /** This branch always continues. */\n  CONTINUES = 1 << 4,\n  /** This branch always allocates. Constructors only. */\n  ALLOCATES = 1 << 5,\n\n  // conditional\n\n  /** This branch conditionally returns in a child branch. */\n  CONDITIONALLY_RETURNS = 1 << 6,\n  /** This branch conditionally throws in a child branch. */\n  CONDITIONALLY_THROWS = 1 << 7,\n  /** This branch conditionally breaks in a child branch. */\n  CONDITIONALLY_BREAKS = 1 << 8,\n  /** This branch conditionally continues in a child branch. */\n  CONDITIONALLY_CONTINUES = 1 << 9,\n  /** This branch conditionally allocates in a child branch. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 10,\n\n  // special\n\n  /** This branch is part of inlining a function. */\n  INLINE_CONTEXT = 1 << 11,\n  /** This branch explicitly requests no bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 12,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  currentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  returnLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(currentFunction: Function): Flow {\n    var parentFlow = new Flow();\n    parentFlow.parent = null;\n    parentFlow.flags = FlowFlags.NONE;\n    parentFlow.currentFunction = currentFunction;\n    parentFlow.continueLabel = null;\n    parentFlow.breakLabel = null;\n    parentFlow.returnLabel = null;\n    parentFlow.returnType = currentFunction.signature.returnType;\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\n    parentFlow.wrappedLocals = i64_new(0);\n    parentFlow.wrappedLocalsExt = null;\n    return parentFlow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.currentFunction = this.currentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnLabel = this.returnLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    return branch;\n  }\n\n  /** Frees this flow's scoped variables. */\n  free(): Flow {\n    var parent = assert(this.parent);\n    if (this.scopedLocals) { // free block-scoped locals\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n    return parent;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. */\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        let declaration = existingLocal.declaration;\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    assert(index < this.currentFunction.localsByIndex.length);\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\n      this.currentFunction.program,\n      name,\n      index,\n      type,\n      null\n    );\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Gets the local of the specified name in the current scope. */\n  getScopedLocal(name: string): Local | null {\n    var local: Local | null;\n    var current: Flow | null = this;\n    do {\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\n        return local;\n      }\n    } while (current = current.parent);\n    return this.currentFunction.localsByName.get(name);\n  }\n\n  /** Tests if the local with the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    var map: I64;\n    var ext: I64[] | null;\n    if (index < 64) {\n      if (index < 0) return true; // inlined constant\n      map = this.wrappedLocals;\n    } else if (ext = this.wrappedLocalsExt) {\n      let i = ((index - 64) / 64) | 0;\n      if (i >= ext.length) return false;\n      map = ext[i];\n      index -= (i + 1) * 64;\n    } else {\n      return false;\n    }\n    return i64_ne(\n      i64_and(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      ),\n      i64_zero\n    );\n  }\n\n  /** Sets if the local with the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    var map: I64;\n    var off: i32 = -1;\n    if (index < 64) {\n      if (index < 0) return; // inlined constant\n      map = this.wrappedLocals;\n    } else {\n      let ext = this.wrappedLocalsExt;\n      off = ((index - 64) / 64) | 0;\n      if (!ext) {\n        this.wrappedLocalsExt = ext = new Array(off + 1);\n        ext.length = 0;\n      }\n      while (ext.length <= off) ext.push(i64_new(0));\n      map = ext[off];\n      index -= (off + 1) * 64;\n    }\n    map = wrapped\n      ? i64_or(\n          map,\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      : i64_and(\n          map,\n          i64_not(\n            i64_shl(\n              i64_one,\n              i64_new(index)\n            )\n          )\n        );\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\n    else this.wrappedLocals = map;\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\n\n    // conditional flags set in at least one arm\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\n\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let currentFunction = this.currentFunction;\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !currentFunction.flow.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: { // tee\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GetGlobal: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.currentFunction.program.elementsLookup.get(assert(getGetGlobalName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        // actually, brs with a value that'd be handled here is not emitted atm\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.currentFunction.program;\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\n  finalize(): void {\n    assert(this.parent == null); // must be the topmost parent flow\n    this.continueLabel = null;\n    this.breakLabel = null;\n    this.returnLabel = null;\n    this.contextualTypeArguments = null;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport {\n  Target\n} from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport const enum NativeType {\n  None = 0,        // _BinaryenTypeNone(),\n  I32  = 1,        // _BinaryenTypeInt32(),\n  I64  = 2,        // _BinaryenTypeInt64(),\n  F32  = 3,        // _BinaryenTypeFloat32(),\n  F64  = 4,        // _BinaryenTypeFloat64(),\n  Unreachable = 5, // _BinaryenTypeUnreachable(),\n  Auto = -1        // _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId()\n  // SIMDExtract = _BinaryenSIMDExtractId(),\n  // SIMDReplace = _BinaryenSIMDReplaceId(),\n  // SIMDShuffle = _BinaryenSIMDShuffleId(),\n  // SIMDBitselect = _BinaryenSIMDBitselectId(),\n  // SIMDShift = _BinaryenSIMDShiftId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64()\n}\n\nexport enum HostOp {\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n\n  // see: https://github.com/WebAssembly/bulk-memory-operations\n  // MoveMemory\n  // SetMemory\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\n// export enum SIMDOp {\n//   SplatVecI8x16 = _BinaryenSplatVecI8x16(),\n//   SplatVecI16x8 = _BinaryenSplatVecI16x8(),\n//   SplatVecI32x4 = _BinaryenSplatVecI32x4(),\n//   SplatVecI64x2 = _BinaryenSplatVecI64x2(),\n//   SplatVecF32x4 = _BinaryenSplatVecF32x4(),\n//   SplatVecF64x2 = _BinaryenSplatVecF64x2(),\n//   NotVec128 = _BinaryenNotVec128(),\n//   NegVecI8x16 = _BinaryenNegVecI8x16(),\n//   AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\n//   AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\n//   NegVecI16x8 = _BinaryenNegVecI16x8(),\n//   AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\n//   AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\n//   NegVecI32x4 = _BinaryenNegVecI32x4(),\n//   AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\n//   AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\n//   NegVecI64x2 = _BinaryenNegVecI64x2(),\n//   AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\n//   AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\n//   AbsVecF32x4 = _BinaryenAbsVecF32x4(),\n//   NegVecF32x4 = _BinaryenNegVecF32x4(),\n//   SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\n//   AbsVecF64x2 = _BinaryenAbsVecF64x2(),\n//   NegVecF64x2 = _BinaryenNegVecF64x2(),\n//   SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\n//   TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n//   TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n//   TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n//   TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n//   ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n//   ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n//   ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n//   ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2(),\n//   EqVecI8x16 = _BinaryenEqVecI8x16(),\n//   NeVecI8x16 = _BinaryenNeVecI8x16(),\n//   LtSVecI8x16 = _BinaryenLtSVecI8x16(),\n//   LtUVecI8x16 = _BinaryenLtUVecI8x16(),\n//   LeSVecI8x16 = _BinaryenLeSVecI8x16(),\n//   LeUVecI8x16 = _BinaryenLeUVecI8x16(),\n//   GtSVecI8x16 = _BinaryenGtSVecI8x16(),\n//   GtUVecI8x16 = _BinaryenGtUVecI8x16(),\n//   GeSVecI8x16 = _BinaryenGeSVecI8x16(),\n//   GeUVecI8x16 = _BinaryenGeUVecI8x16(),\n//   EqVecI16x8 = _BinaryenEqVecI16x8(),\n//   NeVecI16x8 = _BinaryenNeVecI16x8(),\n//   LtSVecI16x8 = _BinaryenLtSVecI16x8(),\n//   LtUVecI16x8 = _BinaryenLtUVecI16x8(),\n//   LeSVecI16x8 = _BinaryenLeSVecI16x8(),\n//   LeUVecI16x8 = _BinaryenLeUVecI16x8(),\n//   GtSVecI16x8 = _BinaryenGtSVecI16x8(),\n//   GtUVecI16x8 = _BinaryenGtUVecI16x8(),\n//   GeSVecI16x8 = _BinaryenGeSVecI16x8(),\n//   GeUVecI16x8 = _BinaryenGeUVecI16x8(),\n//   EqVecI32x4 = _BinaryenEqVecI32x4(),\n//   NeVecI32x4 = _BinaryenNeVecI32x4(),\n//   LtSVecI32x4 = _BinaryenLtSVecI32x4(),\n//   LtUVecI32x4 = _BinaryenLtUVecI32x4(),\n//   LeSVecI32x4 = _BinaryenLeSVecI32x4(),\n//   LeUVecI32x4 = _BinaryenLeUVecI32x4(),\n//   GtSVecI32x4 = _BinaryenGtSVecI32x4(),\n//   GtUVecI32x4 = _BinaryenGtUVecI32x4(),\n//   GeSVecI32x4 = _BinaryenGeSVecI32x4(),\n//   GeUVecI32x4 = _BinaryenGeUVecI32x4(),\n//   EqVecF32x4 = _BinaryenEqVecF32x4(),\n//   NeVecF32x4 = _BinaryenNeVecF32x4(),\n//   LtVecF32x4 = _BinaryenLtVecF32x4(),\n//   LeVecF32x4 = _BinaryenLeVecF32x4(),\n//   GtVecF32x4 = _BinaryenGtVecF32x4(),\n//   GeVecF32x4 = _BinaryenGeVecF32x4(),\n//   EqVecF64x2 = _BinaryenEqVecF64x2(),\n//   NeVecF64x2 = _BinaryenNeVecF64x2(),\n//   LtVecF64x2 = _BinaryenLtVecF64x2(),\n//   LeVecF64x2 = _BinaryenLeVecF64x2(),\n//   GtVecF64x2 = _BinaryenGtVecF64x2(),\n//   GeVecF64x2 = _BinaryenGeVecF64x2(),\n//   AndVec128 = _BinaryenAndVec128(),\n//   OrVec128 = _BinaryenOrVec128(),\n//   XorVec128 = _BinaryenXorVec128(),\n//   AddVecI8x16 = _BinaryenAddVecI8x16(),\n//   AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\n//   AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\n//   SubVecI8x16 = _BinaryenSubVecI8x16(),\n//   SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\n//   SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\n//   MulVecI8x16 = _BinaryenMulVecI8x16(),\n//   AddVecI16x8 = _BinaryenAddVecI16x8(),\n//   AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\n//   AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\n//   SubVecI16x8 = _BinaryenSubVecI16x8(),\n//   SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\n//   SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\n//   MulVecI16x8 = _BinaryenMulVecI16x8(),\n//   AddVecI32x4 = _BinaryenAddVecI32x4(),\n//   SubVecI32x4 = _BinaryenSubVecI32x4(),\n//   MulVecI32x4 = _BinaryenMulVecI32x4(),\n//   AddVecI64x2 = _BinaryenAddVecI64x2(),\n//   SubVecI64x2 = _BinaryenSubVecI64x2(),\n//   AddVecF32x4 = _BinaryenAddVecF32x4(),\n//   SubVecF32x4 = _BinaryenSubVecF32x4(),\n//   MulVecF32x4 = _BinaryenMulVecF32x4(),\n//   DivVecF32x4 = _BinaryenDivVecF32x4(),\n//   MinVecF32x4 = _BinaryenMinVecF32x4(),\n//   MaxVecF32x4 = _BinaryenMaxVecF32x4(),\n//   AddVecF64x2 = _BinaryenAddVecF64x2(),\n//   SubVecF64x2 = _BinaryenSubVecF64x2(),\n//   MulVecF64x2 = _BinaryenMulVecF64x2(),\n//   DivVecF64x2 = _BinaryenDivVecF64x2(),\n//   MinVecF64x2 = _BinaryenMinVecF64x2(),\n//   MaxVecF64x2 = _BinaryenMaxVecF64x2()\n// }\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private cachedByValue: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.cachedByValue = memory.allocate(16);\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.cachedByValue = memory.allocate(3 * 8); // LLVM C-ABI, max used is 3 * usize\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunctionType(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenGetGlobal(this.ref, cStr, type);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenSetGlobal(this.ref, cStr, value);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenBreak(this.ref, cStr, condition, value);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenLoop(this.ref, cStr, body);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = allocString(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = allocString(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cStr);\n      memory.free(cArr);\n      for (let i = numNames - 1; i >= 0; --i) memory.free(strs[i]);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var cStr = allocString(typeName);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cStr);\n      memory.free(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveGlobal(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunction(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  private cachedTemporaryName: usize = 0;\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.cachedTemporaryName;\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = assert(this.cachedTemporaryName);\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = allocString(externalName);\n    try {\n      _BinaryenRemoveExport(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null\n  ): void {\n    var cStr = allocString(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\n    } finally {\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n      memory.free(cStr);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeName: usize = 0; // for free'ing\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      let name = allocString(\"precompute\");\n      this.cachedPrecomputeName = name;\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n    expr = _BinaryenFunctionGetBody(func);\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.cachedByValue;\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    memory.free(this.cachedByValue);\n    memory.free(this.cachedTemporaryName);\n    memory.free(this.cachedPrecomputeName);\n    memory.free(this.cachedPrecomputeNames);\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getGetGlobalName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGetGlobalGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  switch (_BinaryenExpressionGetType(expr)) {\n    case NativeType.I32:\n    case NativeType.I64:\n    case NativeType.F32:\n    case NativeType.F64: return false;\n  }\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  isManaged(program: Program): bool {\n    if (program.hasGC) {\n      let classReference = this.classReference;\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n    }\n    return false;\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to a target of the specified type. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Determines the common compatible type of two types, if any. */\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.toString() + \" | null\"\n          : classReference.toString();\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\n          : signatureReference.toString(true);\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"I\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"F\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    sb.push(returnType.toSignatureString());\n    return sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              text.charCodeAt(this.pos) == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken != Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.SLASH && !escaped) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.X:\n        case CharCode.x:\n        case CharCode.B:\n        case CharCode.b:\n        case CharCode.O:\n        case CharCode.o: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\n        return false;\n      }\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.X:\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.B:\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_16 = i64_new(16, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 16 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(c - CharCode._0, 0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = value * 16 + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.A, 0)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = value * 16 + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.a, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_10 = i64_new(10, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_8 = i64_new(8, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = value * 8 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_8),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_2 = i64_new(2, 0);\n    var i64_1 = i64_new(1, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = value * 2;\n        value = i64_mul(\n          value,\n          i64_2\n        );\n      } else if (c == CharCode._1) {\n        // value = value * 2 + 1;\n        value = i64_add(\n          i64_mul(value, i64_2),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.E || c == CharCode.e) {\n        if (\n          ++this.pos < this.end && (\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\n            text.charCodeAt(this.pos) == CharCode.PLUS\n          ) &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = value * 16 + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = value * 16 + 10 + c - CharCode.A;\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = value * 16 + 10 + c - CharCode.a;\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAllocate,\n  compileAbort,\n  compileIterateRoots,\n  ensureGCHook\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getGetLocalIndex,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  INNER_DELIMITER,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  Namespace,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  FlowFlags,\n  ConstantValueKind,\n  Flow,\n  OperatorKind,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Source,\n  Range,\n  DecoratorKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FunctionDeclaration,\n  ForStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableDeclaration,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n  FieldDeclaration,\n\n  nodeIsConstantValue,\n  isLastStatement,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, compiles everything instead of just reachable code. */\n  noTreeShaking: bool = false;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current function in compilation. */\n  currentFunction: Function;\n  /** Current outer function in compilation, if compiling a function expression. */\n  currentOuterFunction: Function | null = null;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function being compiled. */\n  startFunctionInstance: Function;\n  /** Start function statements. */\n  startFunctionBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Indicates whether the iterateRoots function must be generated. */\n  needsIterateRoots: bool = false;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the start function\n    var startFunctionInstance = new Function(program.startFunction, \"start\", new Signature([], Type.void));\n    this.startFunctionInstance = startFunctionInstance;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.startFunctionBody = startFunctionBody;\n    this.currentFunction = startFunctionInstance;\n\n    // add a mutable heap base dummy\n    if (options.isWasm64) {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I64,\n        true,\n        module.createI64(0, 0)\n      );\n    } else {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I32,\n        false,\n        module.createI32(0)\n      );\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var sources = program.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].isEntry) this.compileSource(sources[i]);\n    }\n\n    // compile the start function if not empty or called by main\n    if (startFunctionBody.length || program.mainFunction !== null) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!program.mainFunction) module.setStart(funcRef);\n    }\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(\"HEAP_BASE\");\n    if (options.isWasm64) {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I64,\n        false,\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n      );\n    } else {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I32,\n        false,\n        module.createI32(i64_low(memoryOffset))\n      );\n    }\n\n    // determine initial page size\n    var numPages = this.memorySegments.length\n      ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n      : 0;\n    module.setMemory(\n      numPages,\n      Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\"\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addTableExport(\"0\", \"table\");\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.createBlock(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let [name, moduleExport] of program.moduleLevelExports) {\n      this.makeModuleExport(name, moduleExport.element);\n    }\n\n    // set up gc\n    if (this.needsIterateRoots) compileIterateRoots(this);\n\n    return module;\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      }\n    }\n\n    switch (element.kind) {\n\n      // export global\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<Global>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!assert(element.parent).is(CommonFlags.CONST) && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<EnumValue>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n\n      // export function\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n\n      // export getter and setter\n      case ElementKind.PROPERTY: {\n        let getter = assert((<Property>element).getterPrototype);\n        this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterPrototype;\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export a getter and a setter\n      case ElementKind.FIELD: {\n        let module = this.module;\n        let type = (<Field>element).type;\n        let nativeType = type.toNativeType();\n        let offset = (<Field>element).memoryOffset;\n        let usizeType = this.options.usizeType;\n        let nativeSizeType = this.options.nativeSizeType;\n\n        // make a getter\n        let getterName = prefix + GETTER_PREFIX + name;\n        module.addFunction(\n          getterName,\n          this.ensureFunctionType(null, type, usizeType),\n          null,\n          module.createLoad(\n            type.byteSize,\n            type.is(TypeFlags.SIGNED),\n            module.createGetLocal(0, nativeSizeType),\n            nativeType,\n            offset\n          )\n        );\n        module.addFunctionExport(getterName, getterName);\n\n        // make a setter\n        if (!element.is(CommonFlags.READONLY)) {\n          let setterName = prefix + SETTER_PREFIX + name;\n          module.addFunction(\n            setterName,\n            this.ensureFunctionType([ type ], Type.void, usizeType),\n            null,\n            module.createStore(\n              type.byteSize,\n              module.createGetLocal(0, nativeSizeType),\n              module.createGetLocal(1, nativeType),\n              nativeType,\n              offset\n            )\n          );\n          module.addFunctionExport(setterName, setterName);\n        }\n        break;\n      }\n\n      // skip prototype and export instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        for (let instances of (<FunctionPrototype>element).instances.values()) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.makeModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        for (let instance of (<ClassPrototype>element).instances.values()) {\n          let instanceName = name;\n          if (instance.is(CommonFlags.GENERIC)) {\n            let fullName = instance.internalName;\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n          }\n          let ctor = instance.constructorInstance;\n          if (ctor) this.makeModuleExport(instanceName + INSTANCE_DELIMITER + ctor.simpleName, ctor, prefix);\n          this.makeModuleExport(instanceName, instance, prefix);\n        }\n        break;\n      }\n\n      // all possible members already handled above\n      case ElementKind.ENUM:\n      case ElementKind.CLASS:\n      case ElementKind.NAMESPACE: break;\n\n      default: assert(false);\n    }\n  }\n\n  // sources\n\n  /** Compiles a source by looking it up by path first. */\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\n    if (source) this.compileSource(source);\n    else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n    }\n  }\n\n  /** Compiles a source. */\n  compileSource(source: Source): void {\n    if (source.is(CommonFlags.COMPILED)) return;\n    source.set(CommonFlags.COMPILED);\n\n    // compile top-level statements\n    var noTreeShaking = this.options.noTreeShaking;\n    var isEntry = source.isEntry;\n    var startFunctionInstance = this.startFunctionInstance;\n    var startFunctionBody = this.startFunctionBody;\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      let statement = statements[i];\n      switch (statement.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<ClassDeclaration>statement).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: break;\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<FunctionDeclaration>statement).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.IMPORT: {\n          this.compileSourceByPath(\n            (<ImportStatement>statement).normalizedPath,\n            (<ImportStatement>statement).path\n          );\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\n          if (variableInit) startFunctionBody.push(variableInit);\n          break;\n        }\n        case NodeKind.EXPORT: {\n          if ((<ExportStatement>statement).normalizedPath != null) {\n            this.compileSourceByPath(\n              <string>(<ExportStatement>statement).normalizedPath,\n              <StringLiteralExpression>(<ExportStatement>statement).path\n            );\n          }\n          if (noTreeShaking || isEntry) {\n            this.compileExportStatement(<ExportStatement>statement);\n          }\n          break;\n        }\n        default: { // otherwise a top-level statement that is part of the start function's body\n          let previousFunction = this.currentFunction;\n          this.currentFunction = startFunctionInstance;\n          startFunctionBody.push(this.compileStatement(statement));\n          this.currentFunction = previousFunction;\n          break;\n        }\n      }\n    }\n  }\n\n  // globals\n\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\n    // look up the initialized program element\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.GLOBAL);\n    if (!this.compileGlobal(<Global>element)) return null; // reports\n    return <Global>element;\n  }\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var declaration = global.declaration;\n    var initExpr: ExpressionRef = 0;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n      if (declaration) {\n\n        // resolve now if annotated\n        if (declaration.type) {\n          let resolvedType = this.resolver.resolveType(declaration.type); // reports\n          if (!resolvedType) return false;\n          if (resolvedType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              declaration.type.range\n            );\n            return false;\n          }\n          global.type = resolvedType;\n          global.set(CommonFlags.RESOLVED);\n\n        // infer from initializer if not annotated\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\n          initExpr = this.compileExpressionRetainType( // reports\n            declaration.initializer,\n            Type.void,\n            WrapMode.WRAP\n          );\n          if (this.currentType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\n            );\n            return false;\n          }\n          global.type = this.currentType;\n          global.set(CommonFlags.RESOLVED);\n\n        // must either be annotated or have an initializer\n        } else {\n          this.error(\n            DiagnosticCode.Type_expected,\n            declaration.name.range.atEnd\n          );\n          return false;\n        }\n      } else {\n        assert(false); // must have a declaration if resolved lazily\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        if (declaration) {\n          mangleImportName(global, declaration);\n        } else {\n          mangleImportName_moduleName = \"env\";\n          mangleImportName_elementName = global.simpleName;\n        }\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          assert(declaration).range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // evaluate initializer if present\n    if (declaration !== null && declaration.initializer !== null) {\n      if (!initExpr) {\n        initExpr = this.compileExpression(\n          declaration.initializer,\n          global.type,\n          ConversionKind.IMPLICIT,\n          WrapMode.WRAP\n        );\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n            initializeInStart = true;\n          }\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // explicitly inline if annotated\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        if (!initializeInStart) { // reported above\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // initialize to zero if there's no initializer\n    } else {\n      initExpr = global.type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.ENUM);\n    if (!this.compileEnum(<Enum>element)) return null;\n    return <Enum>element;\n  }\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueDeclaration = val.declaration;\n        val.set(CommonFlags.COMPILED);\n        let initExpr: ExpressionRef;\n        if (valueDeclaration.value) {\n          initExpr = this.compileExpression(\n            <Expression>valueDeclaration.value,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              initExpr = module.precomputeExpression(initExpr);\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueDeclaration.value.range\n                );\n                initInStart = true;\n              }\n            } else {\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.createI32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              valueDeclaration.range\n            );\n          }\n          initExpr = module.createBinary(BinaryOp.AddI32,\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\n            module.createI32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                valueDeclaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\n          this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\n          previousValueIsMut = true;\n        } else {\n          module.addGlobal(val.internalName, NativeType.I32, !element.is(CommonFlags.CONST), initExpr);\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Compiles a top-level function given its declaration. */\n  compileFunctionDeclaration(\n    declaration: FunctionDeclaration,\n    typeArguments: TypeNode[]\n  ): Function | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n    return this.compileFunctionUsingTypeArguments( // reports\n      <FunctionPrototype>element,\n      typeArguments,\n      makeMap<string,Type>(),\n      null,\n      (<FunctionPrototype>element).declaration.name\n    );\n  }\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type>,\n    outerScope: Flow | null,\n    reportNode: Node\n  ): Function | null {\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      reportNode\n    );\n    if (!instance) return null;\n    instance.outerScope = outerScope;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n    instance.set(CommonFlags.COMPILED);\n\n    // check that modifiers are matching\n    var declaration = instance.prototype.declaration;\n    var body = declaration.body;\n    if (body) {\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          declaration.name.range\n        );\n      }\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          declaration.name.range\n        );\n      }\n    }\n\n    var ref: FunctionRef;\n    var signature = instance.signature;\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n    if (body) {\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\n      let returnType = instance.signature.returnType;\n\n      // compile body\n      let previousFunction = this.currentFunction;\n      this.currentFunction = instance;\n      let flow = instance.flow;\n      let stmt: ExpressionRef;\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n        assert(instance.is(CommonFlags.ARROW));\n        stmt = this.compileExpression(\n          (<ExpressionStatement>body).expression,\n          returnType,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        flow.set(FlowFlags.RETURNS);\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n        flow.finalize();\n      } else {\n        assert(body.kind == NodeKind.BLOCK);\n        let stmts = this.compileStatements((<BlockStatement>body).statements);\n        if (instance.is(CommonFlags.MAIN)) {\n          module.addGlobal(\"~started\", NativeType.I32, true, module.createI32(0));\n          stmts.unshift(\n            module.createIf(\n              module.createUnary(\n                UnaryOp.EqzI32,\n                module.createGetGlobal(\"~started\", NativeType.I32)\n              ),\n              module.createBlock(null, [\n                module.createCall(\"start\", null, NativeType.None),\n                module.createSetGlobal(\"~started\", module.createI32(1))\n              ])\n            )\n          );\n        }\n        flow.finalize();\n        if (isConstructor) {\n          let nativeSizeType = this.options.nativeSizeType;\n          assert(instance.is(CommonFlags.INSTANCE));\n\n          // implicitly return `this` if the constructor doesn't always return on its own\n          if (!flow.is(FlowFlags.RETURNS)) {\n\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\n            if (flow.is(FlowFlags.ALLOCATES)) {\n              stmts.push(module.createGetLocal(0, nativeSizeType));\n\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\n            } else {\n              let parent = assert(instance.parent);\n              assert(parent.kind == ElementKind.CLASS);\n              stmts.push(module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, declaration.name)\n              ));\n            }\n          }\n\n        // make sure all branches return\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n          this.error(\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n            declaration.signature.returnType.range\n          );\n        }\n        stmt = !stmts.length\n          ? module.createNop()\n          : stmts.length == 1\n            ? stmts[0]\n            : module.createBlock(null, stmts, returnType.toNativeType());\n      }\n      this.currentFunction = previousFunction;\n\n      // create the function\n      ref = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmt\n      );\n\n      // concrete functions cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n    } else {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declaration); // TODO: check for duplicates\n\n      // create the function import\n      ref = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, ref);\n    return true;\n  }\n\n  // namespaces\n\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\n    var members = declaration.members;\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<ClassDeclaration>member).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<InterfaceDeclaration>member).isGeneric\n          ) {\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileEnumDeclaration(<EnumDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<FunctionDeclaration>member).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\n            if (variableInit) this.startFunctionBody.push(variableInit);\n          }\n          break;\n        }\n        default: assert(false);\n      }\n    }\n  }\n\n  compileNamespace(ns: Namespace): void {\n    if (!ns.members) return;\n\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let element of ns.members.values()) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking ||\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileClassUsingTypeArguments(\n              <ClassPrototype>element,\n              [],\n              makeMap<string,Type>()\n            );\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            if (element.hasDecorator(DecoratorFlags.BUILTIN)) break;\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              makeMap<string,Type>(),\n              null,\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // exports\n\n  compileExportStatement(statement: ExportStatement): void {\n    var fileLevelExports = this.program.fileLevelExports;\n    var members = statement.members;\n    if (!members) return; // filespace\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      let element = fileLevelExports.get(\n        statement.range.source.internalPath + PATH_DELIMITER + member.externalName.text\n      );\n      if (!element) continue; // reported in Program#initialize\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\n            this.compileClassUsingTypeArguments(\n              <ClassPrototype>element,\n              [],\n              makeMap<string,Type>()\n            );\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\n            statement.range.source.isEntry\n          ) {\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              makeMap<string,Type>(),\n              null,\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // classes\n\n  compileClassDeclaration(\n    declaration: ClassDeclaration,\n    typeArguments: TypeNode[]\n  ): void {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    this.compileClassUsingTypeArguments(\n      <ClassPrototype>element,\n      typeArguments,\n      makeMap<string,Type>(),\n      declaration\n    );\n  }\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type>,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n\n    var staticMembers = instance.prototype.members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                null,\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                null,\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileStatement(statement: Statement): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // type declarations must be top-level because function bodies are evaluated when\n        // reachaable only.\n        if (this.currentFunction == this.startFunctionInstance) {\n          return module.createNop();\n        }\n        // otherwise fall-through\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[]): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    stmts.length = 0;\n    var flow = this.currentFunction.flow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i]);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n    var parentFlow = this.currentFunction.flow;\n    var flow = parentFlow.fork();\n    this.currentFunction.flow = flow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\n\n    this.currentFunction.flow = flow.free();\n    parentFlow.inherit(flow);\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFunction.flow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFunction.flow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    parentFlow.inherit(flow);\n\n    var block: ExpressionRef[] = [\n      module.createLoop(continueLabel,\n        terminated\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ];\n    if (terminated) block.push(module.createUnreachable());\n    return module.createBlock(breakLabel, block);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = flow.breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = module.precomputeExpression(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : 0;\n    var bodyStatement = statement.statement;\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\n      : this.compileStatement(bodyStatement);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var usesContinue = flow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      repeatBlock.push(\n        module.createBlock(continueLabel, [ // inner 'continue' block\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\n          bodyExpr\n        ], NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(bodyExpr);\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.createBreak(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\n    );\n\n    return module.createBlock(breakLabel, breakBlock);\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileStatement(ifTrue)\n          : ifFalse\n            ? this.compileStatement(ifFalse)\n            : module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Each arm initiates a branch\n    var parentFlow = currentFunction.flow;\n    var ifTrueFlow = parentFlow.fork();\n    currentFunction.flow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    currentFunction.flow = ifTrueFlow.free();\n\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      let ifFalseFlow = parentFlow.fork();\n      currentFunction.flow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      currentFunction.flow = ifFalseFlow.free();\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    } else {\n      parentFlow.inheritConditional(ifTrueFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var expr: ExpressionRef = 0;\n    var flow = currentFunction.flow;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      let returnType = flow.returnType;\n      if (returnType == Type.void) {\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          statement.value.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    }\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastStatement(statement)) return expr ? expr : module.createNop();\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    return flow.is(FlowFlags.INLINE_CONTEXT)\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\n      : module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\n    }\n\n    // Everything within a switch uses the same break context\n    var context = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    currentFunction.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let flow = parentFlow.fork();\n      currentFunction.flow = flow;\n      let breakLabel = \"break|\" + context;\n      flow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      flow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      currentFunction.flow = flow.free();\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    currentFunction.leaveBreakContext();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) parentFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) parentFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) parentFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) parentFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFunction.flow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO\n    // can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /**\n   * Compiles a variable statement. Returns `0` if an initializer is not\n   * necessary.\n   */\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n\n    // top-level variables and constants become globals\n    if (isKnownGlobal || (\n      currentFunction == this.startFunctionInstance &&\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\n    )) {\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\n      // though such variables could also become start function locals if, and only if, not used\n      // within any function declared in the same source, which is unknown at this point. the only\n      // efficient way to deal with this would be to keep track of all occasions it is used and\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\n      for (let i = 0; i < numDeclarations; ++i) {\n        this.compileGlobalDeclaration(declarations[i]);\n      }\n      return 0;\n    }\n\n    // other variables become locals\n    var initializers = new Array<ExpressionRef>();\n    var flow = this.currentFunction.flow;\n    var resolver = this.resolver;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpressionRetainType( // reports\n          declaration.initializer,\n          Type.void,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(program, name, -1, type);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  )\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  )\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\n                break;\n              }\n              case NativeType.F64: {\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = currentFunction.flow.scopedLocals;\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\n        } else {\n          local = currentFunction.addLocal(type, name, declaration); // reports\n        }\n        if (initExpr) {\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary loops if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Statements initiate a new branch with its own break context\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysTrue = false; // TODO\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          terminated\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ]);\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n      }\n    }\n\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (conversionKind == ConversionKind.IMPLICIT) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n            wrapMode = WrapMode.NONE;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n            wrapMode = WrapMode.NONE;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n          wrapMode = WrapMode.NONE;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    var toType = this.resolver.resolveType( // reports\n      expression.toType,\n      this.currentFunction.flow.contextualTypeArguments\n    );\n    if (!toType) return this.module.createUnreachable();\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Math\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Math\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          this.makeIsTrueish(leftExpr, this.currentType);\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\n      argumentExpressions = [];\n    } else {\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\n    }\n    return this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let parent = assert(operatorInstance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var currentFunction = this.currentFunction;\n    var target = resolver.resolveExpression(expression, currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!instance) return this.module.createUnreachable();\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\n          targetType = instance.signature.parameterTypes[0];\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, (<Property>target).internalName\n        );\n        return this.module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        if (resolver.currentElementExpression) { // indexed access\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var target = this.resolver.resolveExpression(expression, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let flow = this.currentFunction.flow;\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        const declaration = (<Field>target).declaration;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\n            declaration == null ||\n            declaration.initializer != null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let currentFunction = this.currentFunction;\n          let flow = currentFunction.flow;\n          let tempLocal = currentFunction.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          // TODO: call __gc_link here if a GC is present\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          // TODO: call __gc_link here if a GC is present\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let setterInstance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!setterInstance) return module.createUnreachable();\n\n          // call just the setter if the return value isn't of interest\n          if (!tee) {\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\n              let thisExpression = assert(this.resolver.currentThisExpression);\n              let thisExpr = this.compileExpressionRetainType(\n                thisExpression,\n                this.options.usizeType,\n                WrapMode.NONE\n              );\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n            } else {\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n            }\n          }\n\n          // otherwise call the setter first, then the getter\n          let getterPrototype = (<Property>target).getterPrototype;\n          assert(getterPrototype != null); // must have one if there is a setter\n          let getterInstance = this.resolver.resolveFunction(<FunctionPrototype>getterPrototype, null);\n          if (!getterInstance) return module.createUnreachable();\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\n            let thisExpression = assert(this.resolver.currentThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\n            let tempLocalIndex = tempLocal.index;\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ // set and remember the target\n                module.createTeeLocal(tempLocalIndex, thisExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(getterInstance, [ // get from remembered target\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\n              ])\n            ], nativeReturnType);\n          } else {\n            // note that this must be performed here because `resolved` is shared\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n              this.makeCallDirect(getterInstance)\n            ], nativeReturnType);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolver.currentElementExpression;\n        if (elementExpression) {\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let currentFunction = this.currentFunction;\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            this.currentFunction.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var target = this.resolver.resolveExpression(expression.expression, currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            makeMap<string,Type>(this.currentFunction.flow.contextualTypeArguments),\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameters = assert(prototype.declaration.typeParameters);\n          let numTypeParameters = typeParameters.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameters[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterTypes = prototype.declaration.signature.parameters;\n          let numParameterTypes = parameterTypes.length;\n          let argumentExpressions = expression.arguments;\n          let numArguments = argumentExpressions.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameterTypes; ++i) {\n            let typeNode = parameterTypes[i].type;\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\n            let argumentExpression = i < numArguments\n              ? argumentExpressions[i]\n              : prototype.declaration.signature.parameters[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (name !== null && inferredTypes.has(name)) {\n              let inferredType = inferredTypes.get(name);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(name, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterTypes[i].type,\n                this.currentFunction.flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            makeMap<string,Type>(this.currentFunction.flow.contextualTypeArguments)\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(prototype, null);\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          instance.hasDecorator(DecoratorFlags.INLINE)\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n\n      case ElementKind.PROPERTY: {\n        indexArg = this.compileGetter(<Property>target, expression.expression);\n        let type = this.currentType;\n        signature = type.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.createUnreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        makeMap<string,Type>(this.currentFunction.flow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    inline: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (inline) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr = this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlineUnchecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n    var declaration = instance.prototype.declaration;\n\n    // Create an empty child flow with its own scope and mark it for inlining\n    var previousFlow = currentFunction.flow;\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\n    var returnType = instance.signature.returnType;\n    var flow = Flow.create(currentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.returnLabel = returnLabel;\n    flow.returnType = returnType;\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(thisArg),\n          (<Class>parent).type,\n          \"this\"\n        );\n        let parentBase = (<Class>parent).base;\n        if (parentBase) {\n          flow.addScopedLocalAlias(\n            getGetLocalIndex(thisArg),\n            parentBase.type,\n            \"super\"\n          );\n        }\n      } else {\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\n        body.push(\n          module.createSetLocal(thisLocal.index, thisArg)\n        );\n        let parentBase = (<Class>parent).base;\n        if (parentBase) {\n          flow.addScopedLocalAlias(\n            thisLocal.index,\n            parentBase.type,\n            \"super\"\n          );\n        }\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(paramExpr),\n          parameterTypes[i],\n          signature.getParameterName(i)\n        );\n        // inherits wrap status\n      } else {\n        let argumentLocal = flow.addScopedLocal(\n          parameterTypes[i],\n          signature.getParameterName(i),\n          !flow.canOverflow(paramExpr, parameterTypes[i])\n        );\n        body.push(\n          module.createSetLocal(argumentLocal.index, paramExpr)\n        );\n      }\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    currentFunction.flow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(declaration.signature.parameters[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        parameterTypes[i],\n        signature.getParameterName(i),\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    var bodyStatement = assert(declaration.body);\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      let statements = (<BlockStatement>bodyStatement).statements;\n      for (let i = 0, k = statements.length; i < k; ++i) {\n        let stmt = this.compileStatement(statements[i]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          body.push(stmt);\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\n        }\n      }\n    } else {\n      body.push(this.compileStatement(bodyStatement));\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      for (let scopedLocal of scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      flow.scopedLocals = null;\n    }\n    flow.finalize();\n    this.currentFunction.flow = previousFlow;\n    this.currentType = returnType;\n\n    // Check that all branches are terminated\n    if (returnType != Type.void && !flow.isAny(FlowFlags.ANY_TERMINATING)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        declaration.signature.returnType.range\n      );\n      return module.createUnreachable();\n    }\n    return flow.is(FlowFlags.RETURNS)\n      ? module.createBlock(returnLabel, body, returnType.toNativeType())\n      : body.length > 1\n        ? module.createBlock(null, body, returnType.toNativeType())\n        : body.length\n          ? body[0]\n          : module.createNop();\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    var trampolineName = originalName + \"|trampoline\";\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.prototype,\n      trampolineName,\n      trampolineSignature,\n      original.parent,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFunction = this.currentFunction;\n    this.currentFunction = trampoline;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"outOfRange\", [\n        module.createSwitch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(\"~argc\", NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.createSetLocal(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.createUnreachable();\n      }\n      body = module.createBlock(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFunction = previousFunction;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampolineName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    var internalName = \"~argc\";\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        internalName,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return internalName;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = \"~setargc\";\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    return module.createCall(instance.internalName, operands, returnType.toNativeType());\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.resolver.resolveElementAccess(expression, this.currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\n    var declaration = expression.declaration;\n    var name = declaration.name;\n    var simpleName = (name.text.length\n      ? name.text\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\n    var currentFunction = this.currentFunction;\n    var prototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\n      declaration,\n      null,\n      DecoratorFlags.NONE\n    );\n    var flow = currentFunction.flow;\n    var instance = this.compileFunctionUsingTypeArguments(\n      prototype,\n      [],\n      makeMap<string,Type>(flow.contextualTypeArguments),\n      flow,\n      declaration\n    );\n    if (!instance) return this.module.createUnreachable();\n    this.currentType = instance.signature.type; // TODO: get cached type?\n    // NOTE that, in order to make this work in every case, the function must be represented by a\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            this.currentType = scopedThis.type;\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let thisType = (<Class>parent).type;\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // must be conditional because `this` could have been provided by a derived class\n              this.currentType = thisType;\n              return module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, expression)\n              );\n            }\n          }\n          this.currentType = thisType;\n          return module.createGetLocal(0, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let base = (<Class>parent).base;\n          if (base) {\n            let superType = base.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      this.currentEnum || currentFunction\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let localType = (<Local>target).type;\n        assert(localType != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return this.module.createI32((<EnumValue>target).constantValue);\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(currentFunction.flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\n    var type = this.currentType;\n    var isType = this.resolver.resolveType(expression.isType);\n    this.currentType = Type.bool;\n    if (!isType) return module.createUnreachable();\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\n      ? type.nonNullableType.isAssignableTo(isType)\n        ? module.createBinary( // not precomputeable\n            type.is(TypeFlags.LONG)\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            type.toNativeZero(module)\n          )\n        : module.createI32(0)\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            false, // TODO: isConst?\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        switch (contextualType.kind) {\n\n          // compile to contextualType if matching\n\n          case TypeKind.I8: {\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U8: {\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I16: {\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U16: {\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I32: {\n            if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U32: {\n            if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.BOOL: {\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.ISIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.USIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.F32: {\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\n            break;\n          }\n          case TypeKind.F64: {\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\n            break;\n          }\n          case TypeKind.VOID: {\n            break; // compiles to best fitting type below, being dropped\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n\n        // otherwise compile to best fitting native type\n\n        if (i64_is_i32(intValue)) {\n          this.currentType = Type.i32;\n          return module.createI32(i64_low(intValue));\n        } else if (i64_is_u32(intValue)) {\n          this.currentType = Type.u32;\n          return module.createI32(i64_low(intValue));\n        } else {\n          this.currentType = Type.i64;\n          return module.createI64(i64_low(intValue), i64_high(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n\n    // if the string already exists, reuse it\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = <MemorySegment>segments.get(stringValue);\n\n    // otherwise create it\n    } else {\n      let length = stringValue.length;\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\n      let totalSize = headerSize + length * 2;\n\n      let buf: Uint8Array;\n      let pos: u32;\n\n      if (hasGC) {\n        buf = new Uint8Array(gcHeaderSize + totalSize);\n        pos = gcHeaderSize;\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\n      } else {\n        buf = new Uint8Array(totalSize);\n        pos = 0;\n      }\n      writeI32(length, buf, pos + stringInstance.offsetof(\"length\"));\n      pos += headerSize;\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\n\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    } else {\n      assert(i64_is_u32(stringOffset));\n      return this.module.createI32(i64_low(stringOffset));\n    }\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var usizeTypeSize = this.options.usizeType.byteSize;\n\n    var buf: Uint8Array;\n    var pos: u32;\n\n    // create the backing ArrayBuffer segment\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(bufferTotalSize);\n      pos = 0;\n    }\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(\"byteLength\"));\n    pos += bufferHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    var bufferSegment = this.addMemorySegment(buf);\n    var bufferOffset = bufferSegment.offset;\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\n\n    // create the Array segment and return a pointer to it\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(\n      arrayPrototype,\n      [ elementType ],\n      makeMap<string,Type>()\n    ));\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(arrayHeaderSize);\n      pos = 0;\n    }\n    var arraySegment = this.addMemorySegment(buf);\n    var arrayOffset = arraySegment.offset;\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\n    this.currentType = arrayInstance.type;\n    if (usizeTypeSize == 8) {\n      writeI64(bufferOffset, buf, pos + arrayInstance.offsetof(\"buffer_\"));\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\n    } else {\n      assert(i64_is_u32(bufferOffset));\n      writeI32(i64_low(bufferOffset), buf, pos + arrayInstance.offsetof(\"buffer_\"));\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\n      assert(i64_is_u32(arrayOffset));\n      return this.module.createI32(i64_low(arrayOffset));\n    }\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    isConst: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // find out whether all elements are constant (array is static)\n    var length = expressions.length;\n    var compiledValues = new Array<ExpressionRef>(length);\n    var constantValues = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expr = expressions[i]\n        ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n        : elementType.toNativeZero(module);\n      compiledValues[i] = expr;\n      if (isStatic) {\n        expr = module.precomputeExpression(compiledValues[i]);\n        if (getExpressionId(expr) == ExpressionId.Const) {\n          assert(getExpressionType(expr) == nativeElementType);\n          constantValues[i] = expr;\n        } else {\n          if (isConst) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              reportNode.range\n            );\n          }\n          isStatic = false;\n        }\n      }\n    }\n\n    // make a static array if possible\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\n\n    // otherwise obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(\n      <ClassPrototype>arrayPrototype,\n      [ elementType ],\n      makeMap<string,Type>()\n    ));\n    var arrayType = arrayInstance.type;\n\n    // and compile an explicit instantiation\n    this.currentType = arrayType;\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      return module.createUnreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n    var currentFunction = this.currentFunction;\n    var tempLocal = currentFunction.addLocal(arrayType); // can't reuse a temp (used in compiledValues)\n    var stmts = new Array<ExpressionRef>(2 + length);\n    var index = 0;\n    stmts[index++] = module.createSetLocal(tempLocal.index,\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(length)\n      ])\n    );\n    for (let i = 0; i < length; ++i) {\n      stmts[index++] = this.makeCallDirect(setter, [\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\n        module.createI32(i),\n        compiledValues[i]\n      ]);\n    }\n    assert(index + 1 == stmts.length);\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n    currentFunction.freeTempLocal(tempLocal); // but can be reused now\n    this.currentType = arrayType;\n    return module.createBlock(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var tempLocal = this.currentFunction.getTempLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\n        type.byteSize,\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.createUnreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.createSetLocal(\n      tempLocal.index,\n      compileAllocate(this, classReference, expression)\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\n\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var currentFunction = this.currentFunction;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      currentFunction\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(currentFunction.flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        makeMap<string,Type>(currentFunction.flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.createUnreachable();\n    return this.compileInstantiate(classInstance, expression.arguments, expression);\n  }\n\n  compileInstantiate(classInstance: Class, argumentExpressions: Expression[], reportNode: Node): ExpressionRef {\n    // traverse to the top-most visible constructor\n    var currentClassInstance: Class | null = classInstance;\n    var constructorInstance: Function | null = null;\n    do {\n      constructorInstance = currentClassInstance.constructorInstance;\n      if (constructorInstance) break; // TODO: check visibility\n    } while (currentClassInstance = currentClassInstance.base);\n\n    // if a constructor is present, call it with a zero `this`\n    var expr: ExpressionRef;\n    if (constructorInstance) {\n      expr = this.compileCallDirect(constructorInstance, argumentExpressions, reportNode,\n        this.options.usizeType.toNativeZero(this.module)\n      );\n\n    // otherwise simply allocate a new instance and initialize its fields\n    } else {\n      if (argumentExpressions.length) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", argumentExpressions.length.toString(10)\n        );\n      }\n      expr = this.makeAllocate(classInstance, reportNode);\n    }\n\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n\n    var target = this.resolver.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static property\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let parent = (<EnumValue>target).parent;\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>parent)) {\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return module.createI32((<EnumValue>target).constantValue);\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY: {// instance property (here: getter)\n        return this.compileGetter(<Property>target, propertyAccess);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          propertyAccess.range, (<FunctionPrototype>target).simpleName\n        );\n        return module.createUnreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  private compileGetter(target: Property, reportNode: Node): ExpressionRef {\n    var prototype = target.getterPrototype;\n    if (prototype) {\n      let instance = this.resolver.resolveFunction(prototype, null);\n      if (!instance) return this.module.createUnreachable();\n      let signature = instance.signature;\n      if (!this.checkCallSignature( // reports\n        signature,\n        0,\n        instance.is(CommonFlags.INSTANCE),\n        reportNode\n      )) {\n        return this.module.createUnreachable();\n      }\n      let inline = (instance.decoratorFlags & DecoratorFlags.INLINE) != 0;\n      if (instance.is(CommonFlags.INSTANCE)) {\n        let parent = assert(instance.parent);\n        assert(parent.kind == ElementKind.CLASS);\n        let thisExpression = assert(this.resolver.currentThisExpression); //!!!\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, thisExpr, inline);\n      } else {\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, 0, inline);\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        reportNode.range, (<Property>target).simpleName, (<Property>target).parent.toString()\n      );\n      return this.module.createUnreachable();\n    }\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var currentFunction = this.currentFunction;\n    var parentFlow = currentFunction.flow;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = this.module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    var ifThenFlow = parentFlow.fork();\n    currentFunction.flow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n    var ifThenType = this.currentType;\n    ifThenFlow.free();\n\n    var ifElseFlow = parentFlow.fork();\n    currentFunction.flow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n    var ifElseType = this.currentType;\n    currentFunction.flow = ifElseFlow.free();\n\n    parentFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    var currentType = this.currentType;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = currentFunction.getTempLocal(currentType, false);\n      getValue = module.createTeeLocal(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var calcValue: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            calcValue = module.createBinary(\n              BinaryOp.AddI32,\n              getValue,\n              module.createI32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n                if (overload) {\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            calcValue = module.createBinary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            calcValue = module.createBinary(\n              BinaryOp.AddI64,\n              getValue,\n              module.createI64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            calcValue = module.createBinary(\n              BinaryOp.AddF32,\n              getValue,\n              module.createF32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            calcValue = module.createBinary(\n              BinaryOp.AddF64,\n              getValue,\n              module.createF64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            calcValue = module.createBinary(\n              BinaryOp.SubI32,\n              getValue,\n              module.createI32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n                if (overload) {\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            calcValue = module.createBinary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            calcValue = module.createBinary(\n              BinaryOp.SubI64,\n              getValue,\n              module.createI64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            calcValue = module.createBinary(\n              BinaryOp.SubF32,\n              getValue,\n              module.createF32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            calcValue = module.createBinary(\n              BinaryOp.SubF64,\n              getValue,\n              module.createF64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      this.currentType = Type.void;\n      return this.compileAssignmentWithValue(expression.operand,\n        calcValue,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      calcValue, // also tees getValue to tempLocal\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    currentFunction.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.createBlock(null, [\n      setValue,\n      module.createGetLocal(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createUnary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createUnary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        } else {\n          expr = this.convertExpression(\n            expr,\n            this.currentType, this.currentType.intType,\n            ConversionKind.IMPLICIT, WrapMode.NONE,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFunction.flow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.createBinary(BinaryOp.NeI32,\n            expr,\n            module.createI32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation expression for an instance of the specified class. */\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\n    var initializers = new Array<ExpressionRef>();\n    initializers.push(\n      module.createSetLocal(tempLocal.index,\n        compileAllocate(this, classInstance, reportNode)\n      )\n    );\n\n    // apply field initializers\n    if (classInstance.members) {\n      for (let member of classInstance.members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          let fieldType = field.type;\n          let nativeFieldType = fieldType.toNativeType();\n          let fieldDeclaration = field.prototype.declaration;\n          assert(!field.isAny(CommonFlags.CONST));\n          if (fieldDeclaration.initializer) { // use initializer\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              this.compileExpression( // reports\n                fieldDeclaration.initializer,\n                fieldType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              ),\n              nativeFieldType,\n              field.memoryOffset\n            ));\n          } else { // initialize with zero\n            // TODO: might be unnecessary if the ctor initializes the field\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              parameterIndex >= 0 // initialized via parameter\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\n                : fieldType.toNativeZero(module),\n                nativeFieldType,\n              field.memoryOffset\n            ));\n          }\n        }\n      }\n    }\n\n    // return `this`\n    initializers.push(\n      module.createGetLocal(tempLocal.index, nativeSizeType)\n    );\n\n    currentFunction.freeTempLocal(tempLocal);\n    this.currentType = classInstance.type;\n    return module.createBlock(null, initializers, nativeSizeType);\n  }\n\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    // requires that `this` is the first local\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    this.currentType = classInstance.type;\n    return module.createIf(\n      nativeSizeType == NativeType.I64\n        ? module.createBinary(\n            BinaryOp.NeI64,\n            module.createGetLocal(0, NativeType.I64),\n            module.createI64(0)\n          )\n        : module.createGetLocal(0, NativeType.I32),\n      module.createGetLocal(0, nativeSizeType),\n      module.createTeeLocal(0,\n        this.makeAllocate(classInstance, reportNode)\n      )\n    );\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var currentFunction = this.currentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    currentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = declaration.programLevelInternalName;\n\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    default: return \"\";\n  }\n}\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  FlowFlags,\n\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionTarget,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  DecoratorFlags,\n  FieldPrototype,\n  Field,\n  Global\n} from \"./program\";\n\nimport {\n  SignatureNode,\n  ParameterKind,\n  CommonTypeNode,\n  NodeKind,\n  TypeNode,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind\n} from \"./types\";\n\nimport {\n  PATH_DELIMITER,\n  INSTANCE_DELIMITER,\n  CommonFlags\n} from \"./common\";\n\nimport {\n  makeMap\n} from \"./util\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n  /** Whether the last resolved type has been resolved from a placeholder, i.e. `T`. */\n  currentTypeIsPlaceholder: bool = false;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    node: CommonTypeNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signatures specifically\n    if (node.kind == NodeKind.SIGNATURE) {\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportMode);\n      if (!signature) return null;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.TYPE);\n    var typeNode = <TypeNode>node;\n    var simpleName = typeNode.name.text;\n    var globalName = simpleName;\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName; // TODO cache\n\n    // check file-global / program-global enum or class\n    {\n      let elementsLookup = this.program.elementsLookup;\n      let element: Element | null;\n      if (\n        (element = elementsLookup.get(localName)) || // file-global\n        (element = elementsLookup.get(globalName))   // program-global\n      ) {\n        switch (element.kind) {\n          case ElementKind.ENUM: {\n            if (typeNode.typeArguments !== null && typeNode.typeArguments.length) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_generic,\n                  node.range, element.internalName\n                );\n              }\n              return null;\n            }\n            return Type.i32;\n          }\n          case ElementKind.CLASS_PROTOTYPE: {\n            let instance = this.resolveClassInclTypeArguments(\n              <ClassPrototype>element,\n              typeNode.typeArguments,\n              makeMap<string,Type>(contextualTypeArguments),\n              node\n            ); // reports\n            if (!instance) return null;\n            return node.isNullable ? instance.type.asNullable() : instance.type;\n          }\n        }\n      }\n    }\n\n    // check (global) type alias\n    {\n      let alias = this.program.typeAliases.get(simpleName);\n      if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportMode);\n    }\n\n    // resolve parameters\n    var typeArgumentNodes = typeNode.typeArguments;\n    var typeArguments: Type[] | null = null;\n    if (typeArgumentNodes) {\n      let numTypeArguments = typeArgumentNodes.length;\n      typeArguments = new Array<Type>(numTypeArguments);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        let paramType = this.resolveType( // reports\n          typeArgumentNodes[i],\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!paramType) return null;\n        typeArguments[i] = paramType;\n      }\n      if (numTypeArguments) { // can't be a placeholder if it has parameters\n        let instanceKey = typesToString(typeArguments);\n        if (instanceKey.length) {\n          localName += \"<\" + instanceKey + \">\";\n          globalName += \"<\" + instanceKey + \">\";\n        }\n      } else if (contextualTypeArguments) {\n        let placeholderType = contextualTypeArguments.get(globalName);\n        if (placeholderType) return placeholderType;\n      }\n    }\n\n    // check file-global / program-global type\n    {\n      let typesLookup = this.program.typesLookup;\n      let type: Type | null;\n      if (\n        (type = typesLookup.get(localName)) ||\n        (type = typesLookup.get(globalName))\n      ) {\n        return type;\n      }\n    }\n\n    // check built-in macro types\n    if (simpleName == \"NATIVE\") {\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n          );\n        }\n        return null;\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: return Type.i32;\n        case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: return Type.u32;\n        case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n        case TypeKind.VOID: return Type.void;\n        default: assert(false);\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, globalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\n  resolveSignature(\n    node: SignatureNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Signature | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(explicitThisType, contextualTypeArguments, reportMode);\n      if (!thisType) return null;\n    }\n    var parameterTypeNodes = node.parameters;\n    var numParameters = parameterTypeNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterTypeNode = parameterTypeNodes[i];\n      switch (parameterTypeNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterType = this.resolveType(\n        assert(parameterTypeNode.type),\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterTypeNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (returnTypeNode) {\n      returnType = this.resolveType(returnTypeNode, contextualTypeArguments, reportMode);\n      if (!returnType) return null;\n    } else {\n      returnType = Type.void;\n    }\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return signature;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    typeParameters: TypeParameterNode[],\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type>,\n    alternativeReportNode: Node | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0; i < typeParameters.length; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<TypeNode[]>typeArgumentNodes)[0].range,\n              (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range.atEnd,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<TypeNode[]>typeArgumentNodes)[i],\n            contextualTypeArguments,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            contextualTypeArguments,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the element it refers to. */\n  resolveIdentifier(\n    identifier: IdentifierExpression,\n    context: Element | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n\n    if (context) {\n\n      switch (context.kind) {\n        case ElementKind.FUNCTION: { // search locals, use prototype\n          element = (<Function>context).flow.getScopedLocal(name);\n          if (element) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n          context = (<Function>context).prototype.parent;\n          break;\n        }\n        case ElementKind.CLASS: { // use prototype\n          context = (<Class>context).prototype.parent;\n          break;\n        }\n      }\n\n      // search context\n      while (context) {\n        let members = context.members;\n        if (members) {\n          if (element = members.get(name)) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n        }\n        context = context.parent;\n      }\n    }\n\n    // search current file\n    var elementsLookup = this.program.elementsLookup;\n    if (element = elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    // search global scope\n    if (element = elementsLookup.get(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field. */\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var resolveType = assert(global.declaration).type;\n    if (!resolveType) return false;\n    var resolvedType = this.resolveType(resolveType, null, reportMode);\n    if (!resolvedType) return false;\n    global.type = resolvedType;\n    global.set(CommonFlags.RESOLVED);\n    return true;\n  }\n\n  /** Resolves a property access to the element it refers to. */\n  resolvePropertyAccess(\n    propertyAccess: PropertyAccessExpression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // start by resolving the lhs target (expression before the last dot)\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode); // reports\n    if (!target) return null;\n\n    // at this point we know exactly what the target is, so look up the element within\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to the class type they reference first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = this.resolveFunction(\n          assert((<Property>target).getterPrototype),\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getter) return null;\n        let classReference = getter.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          let member: Element | null;\n          if (members && (member = members.get(propertyName))) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members) {\n          let member = members.get(propertyName);\n          if (member) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n          }\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  resolveElementAccess(\n    elementAccess: ElementAccessExpression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementAccess.range, (<Class>target).internalName\n            );\n          }\n          return null;\n        }\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\n          let returnType = indexedGet.signature.returnType;\n          if (target = returnType.classReference) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = elementAccess.elementExpression;\n            return target;\n          }\n          return null;\n        }\n        this.currentThisExpression = targetExpression;\n        this.currentElementExpression = elementAccess.elementExpression;\n        return target;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  resolveExpression(\n    expression: Expression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) {\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        let type = this.resolveType(\n          (<AssertionExpression>expression).toType,\n          contextualFunction.flow.contextualTypeArguments,\n          reportMode\n        );\n        if (type) {\n          let classType = type.classReference;\n          if (classType) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return classType;\n          }\n        }\n        return null;\n      }\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\n        throw new Error(\"not implemented\");\n      }\n      case NodeKind.THIS: { // -> Class / ClassPrototype\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.SUPER: { // -> Class\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction, reportMode);\n      }\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>expression).literalKind) {\n          case LiteralKind.STRING: {\n            this.currentThisExpression = expression;\n            this.currentElementExpression = null;\n            return this.program.stringInstance;\n          }\n          // case LiteralKind.ARRAY: // TODO\n        }\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccess(\n          <PropertyAccessExpression>expression,\n          contextualFunction,\n          reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccess(\n          <ElementAccessExpression>expression,\n          contextualFunction,\n          reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        let targetExpression = (<CallExpression>expression).expression;\n        let target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\n        if (!target) return null;\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n          let instance = this.resolveFunctionInclTypeArguments(\n            <FunctionPrototype>target,\n            (<CallExpression>expression).typeArguments,\n            makeMap<string,Type>(contextualFunction.flow.contextualTypeArguments),\n            expression,\n            reportMode\n          );\n          if (!instance) return null;\n          let returnType = instance.signature.returnType;\n          let classType = returnType.classReference;\n          if (classType) {\n            // reuse resolvedThisExpression (might be property access)\n            // reuse resolvedElementExpression (might be element access)\n            return classType;\n          } else {\n            let signature = returnType.signatureReference;\n            if (signature) {\n              let functionTarget = signature.cachedFunctionTarget;\n              if (!functionTarget) {\n                functionTarget = new FunctionTarget(this.program, signature);\n                signature.cachedFunctionTarget = functionTarget;\n              }\n              // reuse resolvedThisExpression (might be property access)\n              // reuse resolvedElementExpression (might be element access)\n              return functionTarget;\n            }\n          }\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n              targetExpression.range, target.internalName\n            );\n          }\n          return null;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype to an instance using the specified concrete type arguments. */\n  resolveFunction(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var classTypeArguments = prototype.classTypeArguments; // set only if partially resolved\n    var classInstanceKey = classTypeArguments ? typesToString(classTypeArguments) : \"\";\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n    var classInstances = prototype.instances.get(classInstanceKey);\n    if (classInstances) {\n      let instance = classInstances.get(instanceKey);\n      if (instance) return instance;\n    }\n\n    var declaration = prototype.declaration;\n    var isInstance = prototype.is(CommonFlags.INSTANCE);\n    var classPrototype = prototype.classPrototype;\n\n    // apply class type arguments if a partially resolved instance method\n    if (classTypeArguments) prototype.applyClassTypeArguments(contextualTypeArguments);\n\n    // override with function specific type arguments\n    var signatureNode = declaration.signature;\n    var functionTypeParameters = declaration.typeParameters;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\n    }\n\n    // resolve class if an instance method\n    var classInstance: Class | null = null;\n    var thisType: Type | null = null;\n    if (isInstance) {\n      classInstance = this.resolveClass(\n        assert(classPrototype),\n        classTypeArguments,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!classInstance) return null;\n      thisType = classInstance.type;\n      contextualTypeArguments.set(\"this\", thisType);\n    }\n\n    // resolve signature node\n    var signatureParameters = signatureNode.parameters;\n    var signatureParameterCount = signatureParameters.length;\n    var parameterTypes = new Array<Type>(signatureParameterCount);\n    var parameterNames = new Array<string>(signatureParameterCount);\n    var requiredParameters = 0;\n    for (let i = 0; i < signatureParameterCount; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = assert(parameterDeclaration.type);\n      let parameterType = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = assert(signatureNode.returnType);\n      let type = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var internalName = prototype.internalName;\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      prototype,\n      internalName,\n      signature,\n      classInstance\n        ? classInstance\n        : classPrototype,\n      contextualTypeArguments\n    );\n    if (!classInstances) prototype.instances.set(classInstanceKey, classInstances = new Map());\n    classInstances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototype partially by applying the specified type arguments. */\n  resolveFunctionPartially(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): FunctionPrototype | null {\n    assert(prototype.is(CommonFlags.INSTANCE));\n    var classPrototype = assert(prototype.classPrototype);\n\n    if (!(typeArguments && typeArguments.length)) return prototype; // no need to clone\n\n    var simpleName = prototype.simpleName;\n    var partialKey = typesToString(typeArguments);\n    var partialPrototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\n      prototype.declaration,\n      classPrototype,\n      prototype.decoratorFlags\n    );\n    partialPrototype.flags = prototype.flags;\n    partialPrototype.operatorKind = prototype.operatorKind;\n    partialPrototype.classTypeArguments = typeArguments;\n    partialPrototype.instances = prototype.instances;\n    return partialPrototype;\n  }\n\n  /** Resolves a function prototype to an instance by first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    prototype: FunctionPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type>,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // apply class type arguments if a partially resolved instance method\n      // FIXME: this is done once more in resolveFunction. required here for resolveTypeArguments,\n      // required there for just resolving a function no matter if a partial or not.\n      let classTypeArguments = prototype.classTypeArguments;\n      if (classTypeArguments) prototype.applyClassTypeArguments(contextualTypeArguments);\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    prototype: ClassPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    var declaration = prototype.declaration;\n    if (typeArguments) {\n      let typeParameters = declaration.typeParameters;\n      let expectedTypeArguments = typeParameters.length;\n      let actualTypeArguments = typeArguments.length;\n      assert(actualTypeArguments == expectedTypeArguments);\n      for (let i = 0; i < actualTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n      }\n    } else {\n      assert(declaration.typeParameters.length == 0);\n    }\n\n    // Resolve base class if applicable\n    var baseClass: Class | null = null;\n    if (declaration.extendsType) {\n      let baseClassType = this.resolveType(\n        declaration.extendsType,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!baseClassType) return null;\n      if (!(baseClass = baseClassType.classReference)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            declaration.extendsType.range\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            declaration.extendsType.range, baseClass.internalName\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(declaration.name.range, declaration.extendsType.range)\n          );\n        }\n        return null;\n      }\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var simpleName = prototype.simpleName;\n    var internalName = prototype.internalName;\n    if (instanceKey.length) {\n      simpleName += \"<\" + instanceKey + \">\";\n      internalName += \"<\" + instanceKey + \">\";\n    }\n    instance = new Class(prototype, simpleName, internalName, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      if (baseClass.members) {\n        if (!instance.members) instance.members = new Map();\n        for (let inheritedMember of baseClass.members.values()) {\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve constructor by first applying the class type arguments\n    var constructorPrototype = prototype.constructorPrototype;\n    if (constructorPrototype) {\n      let constructorPartial = this.resolveFunctionPartially(\n        constructorPrototype,\n        typeArguments,\n        reportMode\n      );\n      if (!constructorPartial) return null;\n      instance.constructorInstance = this.resolveFunction(\n        constructorPartial,\n        null,\n        makeMap<string,Type>(),\n        reportMode\n      );\n    }\n\n    // Resolve instance members\n    if (prototype.instanceMembers) {\n      for (let member of prototype.instanceMembers.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields\n            if (!fieldDeclaration.type) {\n              if (baseClass !== null && baseClass.members !== null) {\n                let baseField = baseClass.members.get((<FieldPrototype>member).simpleName);\n                if (baseField && !baseField.is(CommonFlags.PRIVATE)) {\n                  assert(baseField.kind == ElementKind.FIELD);\n                  fieldType = (<Field>baseField).type;\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldDeclaration.name.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldDeclaration.type,\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break;\n            let fieldInstance = new Field(\n              <FieldPrototype>member,\n              internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\n              fieldType,\n              fieldDeclaration,\n              instance\n            );\n            switch (fieldType.byteSize) { // align\n              case 1: break;\n              case 2: { if (memoryOffset & 1) ++memoryOffset; break; }\n              case 4: { if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1; break; }\n              case 8: { if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1; break; }\n              default: assert(false);\n            }\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.members.set(member.simpleName, fieldInstance);\n            break;\n          }\n\n          // Partially resolve methods as these might have type arguments on their own\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let partialPrototype = this.resolveFunctionPartially(\n              <FunctionPrototype>member,\n              typeArguments,\n              reportMode\n            );\n            if (!partialPrototype) return null;\n            partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\n            instance.members.set(member.simpleName, partialPrototype);\n            break;\n          }\n\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\n          case ElementKind.PROPERTY: {\n            if (!instance.members) instance.members = new Map();\n            let getterPrototype = assert((<Property>member).getterPrototype); // must be present\n            let setterPrototype = (<Property>member).setterPrototype;         // might be present\n            let instanceProperty = new Property(\n              this.program,\n              member.simpleName,\n              internalName + INSTANCE_DELIMITER + member.simpleName,\n              prototype\n            );\n            let partialGetterPrototype = this.resolveFunctionPartially(\n              getterPrototype,\n              typeArguments,\n              reportMode\n            );\n            if (!partialGetterPrototype) return null;\n            partialGetterPrototype\n              .internalName = internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName;\n            instanceProperty.getterPrototype = partialGetterPrototype;\n            if (setterPrototype) {\n              let partialSetterPrototype = this.resolveFunctionPartially(\n                setterPrototype,\n                typeArguments,\n                reportMode\n              );\n              if (!partialSetterPrototype) return null;\n              partialSetterPrototype\n                .internalName = internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName;\n              instanceProperty.setterPrototype = partialSetterPrototype;\n            }\n            instance.members.set(member.simpleName, instanceProperty);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let operatorPartial = this.resolveFunctionPartially(\n          overloadPrototype,\n          typeArguments,\n          reportMode\n        );\n        if (!operatorPartial) continue;\n        operatorInstance = this.resolveFunction(\n          operatorPartial,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    prototype: ClassPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type>,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments(\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all exports and calls the respective handlers. */\n  walk(): void {\n    for (let moduleExport of this.program.moduleLevelExports.values()) {\n      // FIXME: doesn't honor the actual externally visible name\n      this.visitElement(moduleExport.element);\n    }\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterPrototype;\n        if (getter) this.visitFunctionInstances(getter);\n        let setter = prop.setterPrototype;\n        if (setter) this.visitFunctionInstances(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    for (let instances of element.instances.values()) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n    }\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n// TODO: Extract this into separate module, preferrable pluggable\nexport class NEARBindingsBuilder extends ExportsWalker {\n  private typeMapping: { [key: string]: string } = {\n    \"i32\": \"Integer\",\n    \"String\": \"String\",\n    \"Uint8Array\": \"Uint8Array\",\n    \"bool\": \"Boolean\"\n  };\n\n  private nonNullableTypes = [\"i32\", \"bool\"];\n\n  private sb: string[] = [];\n  private generatedEncodeFunctions = new Set<string>();\n  private generatedDecodeFunctions = new Set<string>();\n\n  static build(program: Program): string {\n    return new NEARBindingsBuilder(program).build();\n  }\n\n  visitGlobal(element: Global): void {\n    // Do nothing\n  }\n\n  visitEnum(element: Enum): void {\n    // Do nothing\n  }\n\n  visitClass(element: Class): void {\n    // Do nothing\n  }\n\n  visitFunction(element: Function): void {\n    this.generateArgsParser(element);\n    this.generateWrapperFunction(element);\n  }\n\n  private generateArgsParser(element: Function) {\n    let signature = element.signature;\n    let fields = signature.parameterNames ? signature.parameterNames.map((paramName, i) => {\n      return { simpleName: paramName, type: signature.parameterTypes[i] };\n    }) : [];\n    fields.forEach(field => this.generateDecodeFunction(field.type));\n    this.sb.push(`export class __near_ArgsParser_${element.simpleName} extends ThrowingBSONHandler {\n        buffer: Uint8Array;\n        decoder: BSONDecoder<__near_ArgsParser_${element.simpleName}>;\n      `);\n    if (signature.parameterNames) {\n      fields.forEach((field) => {\n        this.sb.push(`__near_param_${field.simpleName}: ${field.type};`);\n      });\n      this.generateHandlerMethods(\"this.__near_param_\", fields);\n    } else {\n      this.generateHandlerMethods(\"this.__near_param_\", []);\n    }\n    this.sb.push(`}`);\n  }\n\n  private generateWrapperFunction(element: Function) {\n    let signature = element.signature;\n    let returnType = signature.returnType;\n    this.generateEncodeFunction(returnType);\n    this.sb.push(`export function near_func_${element.simpleName}(): void {\n      let bson = new Uint8Array(input_read_len());\n      input_read_into(bson.buffer.data);\n      let handler = new __near_ArgsParser_${element.simpleName}();\n      handler.buffer = bson;\n      handler.decoder = new BSONDecoder<__near_ArgsParser_${element.simpleName}>(handler);\n      handler.decoder.deserialize(bson);`);\n    if (returnType.toString() != \"void\") {\n      this.sb.push(`let result = ${element.simpleName}(`);\n    } else {\n      this.sb.push(`${element.simpleName}(`);\n    }\n    if (signature.parameterNames) {\n      this.sb.push(signature.parameterNames.map(paramName => `handler.__near_param_${paramName}`).join(\",\"));\n    }\n    this.sb.push(\");\");\n    if (returnType.toString() != \"void\") {\n      this.sb.push(`\n        let encoder = new BSONEncoder();`);\n      this.generateFieldEncoder(returnType, '\"result\"', \"result\");\n      this.sb.push(`\n        return_value(near.bufferWithSize(encoder.serialize()).buffer.data);\n      `);\n    }\n    this.sb.push(`}`);\n  }\n\n  private generateHandlerMethods(valuePrefix: string, fields: any[]) : void {\n    for (let fieldType in this.typeMapping) {\n      let setterType = this.typeMapping[fieldType];\n      this.sb.push(`set${setterType}(name: string, value: ${fieldType}): void {`);\n      fields.forEach((field) => {\n        if (field.type.toString() == fieldType) {\n            this.sb.push(`if (name == \"${field.simpleName}\") {\n              ${valuePrefix}${field.simpleName} = value;\n              return;\n            }`);\n        }\n      });\n      this.sb.push(\"}\");\n    }\n    this.sb.push(\"setNull(name: string): void {\");\n    fields.forEach((field) => {\n      this.sb.push(`if (name == \"${field.simpleName}\") {\n        ${valuePrefix}${field.simpleName} = <${field.type.toString()}>null;\n        return;\n      }`);\n    });\n    this.sb.push(`\n      super.setNull(name);\n    }`);\n\n    this.sb.push(`\n      pushObject(name: string): bool {`);\n    this.generatePushHandler(valuePrefix, fields);\n    this.sb.push(`\n        return super.pushObject(name);\n      }`);\n    this.sb.push(`\n      pushArray(name: string): bool {`);\n    this.generatePushHandler(valuePrefix, fields);\n    this.sb.push(`\n        return super.pushArray(name);\n      }`);\n  }\n\n  private generatePushHandler(valuePrefix: string, fields: any[]) {\n    fields.forEach((field) => {\n      if (!(field.type.toString() in this.typeMapping)) {\n        this.sb.push(`if (name == \"${field.simpleName}\") {\n          ${valuePrefix}${field.simpleName} = __near_decode_${this.encodeType(field.type)}(this.buffer, this.decoder.readIndex);\n          return false;\n        }`);\n      }\n    });\n  }\n\n  private generateArrayHandlerMethods(valuePrefix: string, fieldType: Type) : void {\n    let setterType = this.typeMapping[fieldType.toString()];\n    if (setterType) {\n      this.sb.push(`set${setterType}(name: string, value: ${fieldType}): void {\n        ${valuePrefix}[i32(parseInt(name))] = value;\n      }\n      setNull(name: string): void {\n        ${valuePrefix}[i32(parseInt(name))] = <${fieldType}>null;\n      }`);\n    } else {\n      this.sb.push(`pushObject(name: string): bool {\n        ${valuePrefix}[i32(parseInt(name))] = __near_decode_${this.encodeType(fieldType)}(this.buffer, this.decoder.readIndex);\n        return false;\n      }\n      pushArray(name: string): bool {\n        ${valuePrefix}[i32(parseInt(name))] = __near_decode_${this.encodeType(fieldType)}(this.buffer, this.decoder.readIndex);\n        return false;\n      }`);\n    }\n  }\n\n  private generateEncodeFunction(type: Type) {\n    if (!type.classReference) {\n      return;\n    }\n\n    let typeName = this.encodeType(type);\n    if (this.generatedEncodeFunctions.has(typeName) || typeName in this.typeMapping) {\n      return;\n    }\n    this.generatedEncodeFunctions.add(typeName);\n\n    if (type.classReference.prototype.simpleName == \"Array\" && type.classReference.typeArguments) {\n      // Array\n      this.generateEncodeFunction(type.classReference.typeArguments[0]);\n\n      this.sb.push(`export function __near_encode_${typeName}(\n          value: ${type.toString()},\n          encoder: BSONEncoder): void {`);\n      this.sb.push(`for (let i = 0; i < value.length; i++) {`);\n      this.generateFieldEncoder(type.classReference.typeArguments[0], \"near.str(i)\", \"value[i]\");\n      this.sb.push(\"}\");\n\n    } else {\n      // Object\n      this.getFields(type.classReference).forEach(field => {\n        this.generateEncodeFunction(field.type);\n      });\n\n      this.sb.push(`export function __near_encode_${typeName}(\n          value: ${type.toString()},\n          encoder: BSONEncoder): void {`);\n      this.getFields(type.classReference).forEach((field) => {\n        let fieldType = field.type;\n        let fieldName = field.simpleName;\n        let sourceExpr = `value.${fieldName}`;\n        this.generateFieldEncoder(fieldType, `\"${fieldName}\"`, sourceExpr);\n      });\n    }\n\n    this.sb.push(\"}\");\n  }\n\n  private generateHandler(type: Type) {\n    let typeName = this.encodeType(type);\n    this.sb.push(`export class __near_BSONHandler_${typeName} extends ThrowingBSONHandler {\n      buffer: Uint8Array;\n      decoder: BSONDecoder<__near_BSONHandler_${typeName}>;\n      value: ${type} = new ${type}();`);\n    if (type.classReference!.simpleName.startsWith(\"Array\")) {\n      this.generateArrayHandlerMethods(\"this.value\", type.classReference!.typeArguments![0]);\n    } else {\n      this.generateHandlerMethods(\"this.value.\", this.getFields(type.classReference!));\n    }\n    this.sb.push(\"}\\n\");\n  }\n\n  private generateDecodeFunction(type: Type) {\n    if (!type.classReference) {\n      return;\n    }\n\n    let typeName = this.encodeType(type);\n    if (this.generatedDecodeFunctions.has(typeName) || typeName in this.typeMapping) {\n      return;\n    }\n    this.generatedDecodeFunctions.add(typeName);\n\n    this.generateHandler(type);\n    if (type.classReference.prototype.simpleName == \"Array\" && type.classReference.typeArguments) {\n      // Array\n      this.generateDecodeFunction(type.classReference.typeArguments[0]);\n    } else {\n      // Object\n      this.getFields(type.classReference).forEach(field => {\n        this.generateDecodeFunction(field.type);\n      });\n    }\n\n    this.sb.push(`export function __near_decode_${typeName}(\n        buffer: Uint8Array, offset: i32): ${type} {\n      let handler = new __near_BSONHandler_${typeName}();\n      handler.buffer = buffer;\n      handler.decoder = new BSONDecoder<__near_BSONHandler_${typeName}>(handler);\n      handler.decoder.deserialize(buffer, offset);\n      return handler.value;\n    }\\n`);\n  }\n\n  private generateFieldEncoder(fieldType: Type, fieldExpr: string, sourceExpr: string) {\n    let setterType = this.typeMapping[fieldType.toString()];\n    if (!setterType) {\n      // Object / array\n      let pushType = fieldType.classReference!.prototype.simpleName == \"Array\" ? \"Array\" : \"Object\";\n      this.sb.push(`if (${sourceExpr} != null) {\n          encoder.push${pushType}(${fieldExpr});\n          __near_encode_${this.encodeType(fieldType)}(${sourceExpr}, encoder);\n          encoder.pop${pushType}();\n        } else {\n          encoder.setNull(${fieldExpr});\n        }`);\n    } else {\n      // Basic types\n      if (this.nonNullableTypes.indexOf(fieldType.toString()) != -1) {\n        this.sb.push(`encoder.set${setterType}(${fieldExpr}, ${sourceExpr});`);\n      } else {\n        this.sb.push(`if (${sourceExpr} != null) {\n            encoder.set${setterType}(${fieldExpr}, ${sourceExpr});\n          } else {\n            encoder.setNull(${fieldExpr});\n          }`);\n      }\n    }\n  }\n\n  private encodeType(type: Type) : string {\n    return (<any>type.toString())\n      .replace(/_/g, '__')\n      .replace(/>/g, '')\n      .replace(/</g, '_');\n  }\n\n  private getFields(element: Class): Field[] {\n    if (!element.members) {\n      return [];\n    }\n\n    return <Field[]>[...element.members.values()].filter(member => member instanceof Field);\n  }\n\n  visitInterface(element: Interface): void {\n    // Do nothing\n  }\n\n  visitField(element: Field): void {\n    throw new Error(\"Shouldn't be called\");\n  }\n\n  visitNamespace(element: Element): void {\n    // Do nothing\n  }\n\n  build(): string {\n    let mainSource = this.program.sources\n      .filter(s => s.normalizedPath.indexOf(\"~lib\") != 0)[0];\n    this.sb.push(mainSource.text);\n    this.walk();\n    return this.sb.join(\"\\n\");\n  }\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\n      sb.push(\": \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.simpleName);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(element.simpleName);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.simpleName); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.prototype.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          for (let instances of (<FunctionPrototype>member).instances.values()) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          for (let instance of (<ClassPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable,\n  IndexSignatureDeclaration\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn);\n      if (statement) {\n        statement.parent = source;\n        statements.push(statement);\n      }\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: Node | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n          break;\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n          decorators = null;\n        }\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, flags, startPos);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createIdentifierExpression(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(<TypeParameterNode>typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (typeParameters.length === 0) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      let defaultType: TypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var isArrow = false;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      isArrow = true;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    isArrow: bool,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n      this.error(\n        DiagnosticCode.Type_expected,\n        returnType.range\n      ); // recoverable\n    }\n\n    if (isArrow) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null;\n    if (isArrow) {\n      body = this.parseStatement(tn, false);\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    } else {\n      typeParameters = [];\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators = new Array<DecoratorNode>();\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            implicitFieldDeclaration.parent = parent;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[]): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.TYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<TypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (!member) return null;\n          member.parent = ns;\n          members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    startPos: i32\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            true\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.set(CommonFlags.QUOTED);\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.is(CommonFlags.QUOTED)) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitStackIR();\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__18__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 1, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false },\n  \"POSITIVE_INFINITY\": { value:  Infinity, writable: false },\n  \"NEGATIVE_INFINITY\": { value: -Infinity, writable: false },\n  \"NaN\": { value: NaN, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false },\n  \"POSITIVE_INFINITY\": { value:  Infinity, writable: false },\n  \"NEGATIVE_INFINITY\": { value: -Infinity, writable: false },\n  \"NaN\": { value: NaN, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isReference\"] = function isClass(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\nglobalScope[\"JSMath\"].signbit = function signbit(x) {\n  F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n}\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[ptr + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[ptr + (offset | 0)];\n};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  OperatorKind,\n  FlowFlags,\n  Global,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var module = compiler.module;\n\n  var arg0: ExpressionRef,\n      arg1: ExpressionRef,\n      arg2: ExpressionRef,\n      ret: ExpressionRef;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  switch (prototype.internalName) {\n\n    // types\n\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && classType.lookupOverload(OperatorKind.INDEXED_GET) !== null\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isDefined\": { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let element = compiler.resolver.resolveExpression(operands[0], compiler.currentFunction, ReportMode.SWALLOW);\n      return module.createI32(element ? 1 : 0);\n    }\n    case \"isConstant\": { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case \"isManaged\": { // isManaged<T>() -> bool\n      if (!compiler.program.hasGC) {\n        compiler.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n\n    // math\n\n    case \"clz\": { // clz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ClzI64\n              : UnaryOp.ClzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ctz\": { // ctz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.CtzI64\n              : UnaryOp.CtzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.PopcntI64\n              : UnaryOp.PopcntI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            compiler.currentType\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflows\n    }\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            compiler.currentType\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflowws\n    }\n    case \"abs\": { // abs<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n          ret = module.createSelect( // x > 0 ? x : 0-x\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI32, // ifFalse\n              module.createI32(0),\n              module.createGetLocal(tempLocal.index, NativeType.I32)\n            ),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              module.createI32(0)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              compiler.options.usizeType.toNativeZero(module),\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            ),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\n              compiler.options.usizeType.toNativeZero(module)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI64,\n              module.createI64(0, 0),\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n            ),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n              module.createI64(0, 0)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"max\": { // max<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"min\": { // min<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ceil\": { // ceil<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"floor\": { // floor<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"nearest\": { // nearest<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\n      if (operands.length != 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            compiler.currentType = typeArguments[0];\n            return module.createUnreachable();\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: { // small integers and void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = typeArguments[0];\n      return ret;\n    }\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        // case TypeKind.VOID:\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"trunc\": { // trunc<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments && typeArguments.length) {\n        compiler.currentType = typeArguments[0];\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n\n    // memory access\n\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createLoad(\n        typeArguments[0].byteSize,\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case \"sizeof\": { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(byteSize);\n        } else {\n          ret = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(byteSize, 0);\n        } else {\n          ret = module.createI32(byteSize);\n        }\n      }\n      return ret;\n    }\n    case \"alignof\": { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let alignLog2: i32;\n      switch (byteSize) {\n        case 1: { alignLog2 = 0; break; }\n        case 2: { alignLog2 = 1; break; }\n        case 4: { alignLog2 = 2; break; }\n        case 8: { alignLog2 = 3; break; }\n        default: { assert(false); return module.createUnreachable(); }\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(alignLog2);\n        } else {\n          ret = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(alignLog2, 0);\n        } else {\n          ret = module.createI32(alignLog2);\n        }\n      }\n      return ret;\n    }\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length > 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classType = typeArguments[0].classReference;\n      if (!classType) {\n        compiler.error( // TODO: better error\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // control flow\n\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (operands.length != 3) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n      let type = compiler.currentType;\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType\n      );\n      compiler.currentType = type;\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        default: { // any other value type\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"unreachable\": { // unreachable() -> *\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createUnreachable();\n    }\n\n    // host operations\n\n    case \"memory.size\": { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case \"memory.grow\": { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        arg0 = module.createUnreachable();\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\n    }\n    // see: https://github.com/WebAssembly/bulk-memory-operations\n    case \"memory.copy\": { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\n    }\n    case \"memory.fill\": { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u32,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\n    }\n\n    // other\n\n    case \"changetype\": { // changetype<T!>(value: *) -> T\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        typeArguments[0],\n        WrapMode.NONE\n      );\n      compiler.currentType = typeArguments[0];\n      if (compiler.currentType.size != typeArguments[0].size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\n      return arg0; // any usize to any usize\n    }\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\n      if (operands.length < 1 || operands.length > 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else if (operands.length > 2) {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      }\n\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) {\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n\n      compiler.currentType = type.nonNullableType;\n\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n        compiler.currentType = Type.void;\n      } else {\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFunction.flow;\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\n              compiler.currentType,\n              !flow.canOverflow(arg0, compiler.currentType)\n            );\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          default: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n      }\n      return ret;\n    }\n    case \"unchecked\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let flow = compiler.currentFunction.flow;\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return ret;\n    }\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (operands.length < 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let returnType: Type;\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        returnType = typeArguments[0];\n      } else {\n        returnType = contextualType;\n      }\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      if (compiler.currentType.kind != TypeKind.U32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.createUnreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let signatureParts = new Array<string>(numOperands + 1);\n      let nativeReturnType = returnType.toNativeType();\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\n        let operandType = compiler.currentType;\n        signatureParts[i] = operandType.toSignatureString();\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      signatureParts[numOperands] = returnType.toSignatureString();\n      let typeName = signatureParts.join(\"\");\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.createCallIndirect(arg0, operandExprs, typeName);\n    }\n    case \"instantiate\": {\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classInstance = typeArguments[0].classReference;\n      if (!classInstance) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      return compiler.compileInstantiate(classInstance, operands, reportNode);\n    }\n\n    // user-defined diagnostic macros\n\n    case \"ERROR\": {\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createUnreachable();\n    }\n    case \"WARNING\": {\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n    case \"INFO\": {\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n\n    // conversions\n\n    case \"i8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"isize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"usize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"bool\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.bool,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n\n    // gc\n\n    case \"iterateRoots\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      let type = compiler.currentType;\n      let signatureReference = type.signatureReference;\n      compiler.currentType = Type.void;\n      if (\n        !type.is(TypeFlags.REFERENCE) ||\n        !signatureReference ||\n        signatureReference.parameterTypes.length != 1 ||\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\n       ) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\n        );\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      // just emit a call even if the function doesn't yet exist\n      compiler.needsIterateRoots = true;\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\n    }\n  }\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\n  if (expr) {\n    if (typeArguments && typeArguments.length) {\n      compiler.error(\n        DiagnosticCode.Type_0_is_not_generic,\n        reportNode.range, prototype.internalName\n      );\n    }\n    return expr;\n  }\n  compiler.error(\n    DiagnosticCode.Operation_not_supported,\n    reportNode.range\n  );\n  return module.createUnreachable();\n}\n\n/** Defers an inline-assembler-like call to a built-in function. */\nfunction deferASMCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\n\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  valueType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var prototype = assert(compiler.program.elementsLookup.get(name));\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\n}\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: Node\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.range, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a `constantOffset` argument.*/\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Compiles a memory allocation for an instance of the specified class. */\nexport function compileAllocate(\n  compiler: Compiler,\n  classInstance: Class,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  assert(classInstance.program == program);\n  var module = compiler.module;\n  var options = compiler.options;\n\n  // __gc_allocate(size, markFn)\n  if (program.hasGC && classInstance.type.isManaged(program)) {\n    let allocateInstance = assert(program.gcAllocateInstance);\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\n    compiler.currentType = classInstance.type;\n    return module.createCall(\n      allocateInstance.internalName, [\n        options.isWasm64\n          ? module.createI64(classInstance.currentMemoryOffset)\n          : module.createI32(classInstance.currentMemoryOffset),\n        module.createI32(\n          ensureGCHook(compiler, classInstance)\n        )\n      ],\n      options.nativeSizeType\n    );\n\n  // memory.allocate(size)\n  } else {\n    let allocateInstance = program.memoryAllocateInstance;\n    if (!allocateInstance) {\n      program.error(\n        DiagnosticCode.Cannot_find_name_0,\n        reportNode.range, \"memory.allocate\"\n      );\n      return module.createUnreachable();\n    }\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\n\n    compiler.currentType = classInstance.type;\n    return module.createCall(\n      allocateInstance.internalName, [\n        options.isWasm64\n          ? module.createI64(classInstance.currentMemoryOffset)\n          : module.createI32(classInstance.currentMemoryOffset)\n      ],\n      options.nativeSizeType\n    );\n  }\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringType = program.typesLookup.get(\"string\");\n  if (!stringType) return module.createUnreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\n    : stringType.toNativeZero(module);\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCall(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.createI32(reportNode.range.line),\n        module.createI32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n\n/** Compiles the iterateRoots function if requires. */\nexport function compileIterateRoots(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n\n  for (let element of compiler.program.elementsLookup.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              compiler.options.isWasm64\n                ? module.createI64(i64_low(value), i64_high(value))\n                : module.createI32(i64_low(value))\n            ],\n            \"iv\"\n          )\n        );\n      } else {\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              module.createGetGlobal(\n                global.internalName,\n                compiler.options.nativeSizeType\n              )\n            ],\n            \"iv\"\n          )\n        );\n      }\n    }\n  }\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\n  module.addFunction(\"~iterateRoots\", typeRef, [],\n    exprs.length\n      ? module.createBlock(null, exprs)\n      : module.createNop()\n  );\n}\n\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\nexport function ensureGCHook(\n  compiler: Compiler,\n  classInstance: Class\n): u32 {\n  var program = compiler.program;\n  assert(classInstance.type.isManaged(program));\n\n  // check if the GC hook has already been created\n  {\n    let existingIndex = classInstance.gcHookIndex;\n    if (existingIndex != <u32>-1) return existingIndex;\n  }\n\n  // check if the class implements a custom GC function (only valid for internals)\n  var members = classInstance.members;\n  if (classInstance.prototype.declaration.range.source.isLibrary) {\n    if (members !== null && members.has(\"__gc\")) {\n      let gcPrototype = assert(members.get(\"__gc\"));\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\n      assert(gcInstance.signature.parameterTypes.length == 0);\n      assert(gcInstance.signature.returnType == Type.void);\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\n      assert(compiler.compileFunction(gcInstance));\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\n      classInstance.gcHookIndex = index;\n      return index;\n    }\n  }\n\n  var module = compiler.module;\n  var options = compiler.options;\n  var nativeSizeType = options.nativeSizeType;\n  var nativeSizeSize = options.usizeType.byteSize;\n  var body = new Array<ExpressionRef>();\n\n  // nothing to mark if 'this' is null\n  body.push(\n    module.createIf(\n      module.createUnary(\n        options.isWasm64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.createGetLocal(0, nativeSizeType)\n      ),\n      module.createReturn()\n    )\n  );\n\n  // remember the function index so we don't recurse infinitely\n  var functionTable = compiler.functionTable;\n  var gcHookIndex = functionTable.length;\n  functionTable.push(\"<placeholder>\");\n  classInstance.gcHookIndex = gcHookIndex;\n\n  // if the class extends a base class, call its hook first (calls mark)\n  var baseInstance = classInstance.base;\n  if (baseInstance) {\n    assert(baseInstance.type.isManaged(program));\n    body.push(\n      module.createCallIndirect(\n        module.createI32(\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\n        ),\n        [\n          module.createGetLocal(0, nativeSizeType)\n        ],\n        nativeSizeType == NativeType.I64 ? \"Iv\" : \"iv\"\n      )\n    );\n\n  // if this class is the top-most base class, mark the instance\n  } else {\n    body.push(\n      module.createCall(assert(program.gcMarkInstance).internalName, [\n        module.createGetLocal(0, nativeSizeType)\n      ], NativeType.None)\n    );\n  }\n\n  // mark instances assigned to own fields that are again references\n  if (members) {\n    for (let member of members.values()) {\n      if (member.kind == ElementKind.FIELD) {\n        if ((<Field>member).parent === classInstance) {\n          let type = (<Field>member).type;\n          if (type.isManaged(program)) {\n            let offset = (<Field>member).memoryOffset;\n            assert(offset >= 0);\n            body.push(\n              module.createCall(assert(program.gcMarkInstance).internalName, [\n                module.createLoad(\n                  nativeSizeSize,\n                  false,\n                  module.createGetLocal(0, nativeSizeType),\n                  nativeSizeType,\n                  offset\n                )\n              ], NativeType.None)\n            );\n          }\n        }\n      }\n    }\n  }\n\n  // add the function to the module and return its table index\n  var funcName = classInstance.internalName + \"~gc\";\n  module.addFunction(\n    funcName,\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\n    null,\n    module.createBlock(null, body)\n  );\n  functionTable[gcHookIndex] = funcName;\n  return gcHookIndex;\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n\n  while (lo + 1 < hi) {\n    mid = lo + (hi - lo) / 2;\n    mid -= mid % 2;\n    if (map[mid] <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < map[mid]) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null): Map<K,V> {\n  if (original) {\n    let cloned = new Map<K,V>();\n    for (let [k, v] of original) cloned.set(k, v);\n    return cloned;\n  }\n  return new Map<K,V>();\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder,\n  NEARBindingsBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noTreeShaking` option. */\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\n  options.noTreeShaking = noTreeShaking;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n// TODO: Make pluggable tree walkers instead of hardcoding various formats here\nexport function buildNEAR(program: Program): string {\n  return NEARBindingsBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util\";\n"],"sourceRoot":""}