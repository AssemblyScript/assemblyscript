{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__18__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","FILESPACE_PREFIX","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","Array","emitDiagnostic","info","warning","error","__export","common_1","tokenizer_1","Token","Range","NodeKind","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","CALL","ELEMENTACCESS","PROPERTYACCESS","PARENTHESIZED","nodeIsGenericCallable","Node","parent","flags","NONE","is","flag","isAny","set","createType","typeArguments","isNullable","type","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","extendsType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createSignature","parameters","returnType","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","node","CommentNode","commentKind","expr","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","k","setParentIfNotNull","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","identifier","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","_super","__extends","_this","apply","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","DecoratorKind","SIGNATURE","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","OPERATOR","SEALED","UNMANAGED","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","ASSERTION","BINARY","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","STRING","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","isLastStatement","BLOCK","FUNCTIONDECLARATION","METHODDECLARATION","SourceKind","Statement","Source","SOURCE","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","VARIABLE","NAMESPACEDECLARATION","EXPORT","isTopLevelExport","CLASSDECLARATION","STATIC","needsExplicitExport","member","VariableLikeDeclarationStatement","BREAK","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VOID","WHILE","asGlobal","endsWith","findDecorator","decorator","OperatorKind","diagnostics_1","types_1","ast_1","module_1","resolver_1","QueuedImport","QueuedExport","TypeAlias","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","noTypesYet","Map","Program","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayBufferInstance","arrayPrototype","stringInstance","mainFunction","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","resolver","Resolver","sources","getSource","lookupSourceByPath","normalizedPathWithoutExtension","tmp","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","setConstantInteger","i64_new","isWasm64","noTreeShaking","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","hasFeature","queuedImports","queuedExports","queuedExtends","queuedImplements","filespace","Filespace","internalName","currentFilespace","j","initializeClass","initializeEnum","initializeExports","initializeFunction","initializeImports","initializeInterface","initializeNamespace","initializeTypeAlias","initializeVariables","queuedImport","tryLocateImport","localName","splice","externalNameAlt","Module_0_has_no_exported_member_1","queuedExports_1","__values","queuedExports_1_1","next","done","_c","__read","exportName","queuedExport","currentExport","isReExport","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_d","Error","has","resolveClass","instance","Duplicate_identifier_0","programLevelInternalName","FUNCTION_PROTOTYPE","startFunction","GENERIC","AMBIENT","MAIN","resolveFunction","parameterTypes","signatureReference","byteSize","globalName","global","Global","withConstantIntegerValue","RESOLVED","setConstantFloat","withConstantFloatValue","queuedNamedExports","checkDecorators","acceptedFlags","presentFlags","decoratorKindToFlag","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","checkGlobal","parentNode","hasDecorator","namespace","fileLevelInternalName","simpleName","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","existingExport","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeAccessor","initializeMethod","classPrototype","isInterface","INTERFACE_PROTOTYPE","staticField","READONLY","ABSTRACT","instanceMembers","instanceField","FieldPrototype","decoratorFlags","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","initializeEnumValue","enm","EnumValue","initializeExport","externalIdentifier","prefix","FILESPACE","referencedName","referencedElement","seen","Set","add","initializeImport","indexPart","InterfacePrototype","parentNamespace","Namespace","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","existingExport_1","global_1","CONST","Element","program","NAMESPACE","ENUM","ENUMVALUE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","Parameter","Local","index","LOCAL","scopedGlobal","instances","classTypeArguments","Function","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","localIndex","INSTANCE","local","thisType","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","_b","inheritedName","inheritedType","parameterType","parameterName","getParameterName","flow","Flow","addLocal","getTempLocal","wrapped","temps","toNativeType","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","FunctionTarget","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","FIELD","memoryOffset","Class","base","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseType","isAssignableTo","target","current","lookupOverload","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","fork","branch","slice","free","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","getScopedLocal","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritConditional","inheritMutual","leftExt","rightExt","thisExt","minLength","min","canOverflow","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","global_2","getGetGlobalName","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","compiler_1","NativeType","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenCurrentMemory","_BinaryenGrowMemory","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","memory","allocate","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","str","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","needsExplicitUnreachable","Return","Break","numChildren","program_1","TypeKind","TypeFlags","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","classType","asNullable","signednessIsRelevant","currentClass","targetClass","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","Signature","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","g","eval","e","window","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","builtins_1","Options","WASM32","importMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentOuterFunction","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","compileSource","funcRef","ensureFunctionType","i64_align","numPages","i64_shr_u","moduleExport","makeModuleExport","compileIterateRoots","subPrefix","_f","_g","_h","_j","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","setter","nativeType","nativeSizeType","getterName","setterName","_k","_l","_m","_o","fullName","_p","_q","ctor","compileSourceByPath","reportNode","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","initExpr","resolvedType","resolveType","Type_expected","atEnd","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","compileEnum","previousValue","previousValueIsMut","initInStart","valueDeclaration","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunctionUsingTypeArguments","resolveFunctionInclTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","stmts","compileStatements","unshift","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","compileInterfaceDeclaration","compileNamespace","compileClassUsingTypeArguments","alternativeReportNode","resolveClassInclTypeArguments","compileClass","staticMembers","ctorInstance","_e","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","numStatements","Nop","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","compileInlineConstant","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","operatorInstance","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","resolveExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","currentElementExpression","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","Index_signature_is_missing_in_type_0","valueWithCorrectType","tee","thisExpression","currentThisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","indexedGet","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","typeNode","argumentExpression","inferredType","concreteType","resolvedTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","compileGetter","compileCallIndirect","typeArgumentNodes","resolveTypeArguments","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","includes","compileCallInlineUnchecked","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","previousFlow","parentBase","thisLocal","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","isInstance","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","resolveElementAccess","retainConstantType","scopedThis","_this_cannot_be_referenced_in_current_location","superType","_super_can_only_be_referenced_in_a_derived_class","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","ensureStaticArray","elementType","byteLength","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","isConst","compiledValues","constantValues","nativeElementType","isStatic","arrayType","nativeArrayType","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Property_0_does_not_exist_on_type_1","compileAllocate","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","classInstance","compileInstantiate","currentClassInstance","makeAllocate","propertyAccess","resolvePropertyAccess","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","calcValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","fieldType","nativeFieldType","fieldDeclaration","ReportMode","reportMode","REPORT","resolveSignature","numTypeArguments","paramType","instanceKey","placeholderType","parameterTypeNodes","parameterTypeNode","REST","returnTypeNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","ensureResolvedLazyGlobal","contextualFunction","targetExpression","propertyName","elementAccess","explicitLocal","functionTarget","classInstanceKey","classInstances","instance_1","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","signatureParameters","signatureParameterCount","parameterDeclaration","resolveFunctionPartially","partialKey","partialPrototype","expectedTypeArguments","actualTypeArguments","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","inheritedMember","constructorPartial","baseField","fieldInstance","instanceProperty","partialGetterPrototype","partialSetterPrototype","overloadPrototype","operatorPartial","typeParameterNodes","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Switch","CallIndirect","SetGlobal","Store","i64_to_string","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","typeParameter","parseTypeParameter","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","QUOTED","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","ASC_TARGET","F64","Float64Array","U64","Uint32Array","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","Math","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","POSITIVE_INFINITY","Infinity","NEGATIVE_INFINITY","NaN","clz32","abs","floor","trunc","round","sqrt","x","y","sign","isTrueish","radix","parseInt","undefined","fromCodePoint","Number","isInteger","isArray","signbit","Boolean","HEAP","HEAP_OFFSET","oldHeap","copy","dest","src","copyWithin","F32","Float32Array","I32","Int32Array","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","mod","i64_rem_u","and","or","i64_xor","xor","shl","i64_shr","shr","shru","not","i64_eq","eq","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","gte","lte","minSafeF64","maxSafeF64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","evaluateConstantType","SWALLOW","expr_1","tempLocal0","tempLocal1","evaluateConstantOffset","alignLog2","Type_0_has_no_property_1","abort","operandExprs","signatureParts","nativeParamTypes","operandType","User_defined_0","expr_2","deferASM","deferASMCall","typeArgument","valueType","stringType","messageArg","filenameArg","existingIndex","gcPrototype","gcInstance","nativeSizeSize","baseInstance","funcName","allocateInstance","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","isUnicodeIdentifierStart","unicodeIdentifierPart","isUnicodeIdentifierPart","mid","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD"],"mappings":"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,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCE,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__18__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n","/**\r\n * Common constants.\r\n * @module common\r\n *//***/\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\r\n  DEFINITE_ASSIGNMENT = 1 << 13,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 14,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 15,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 16,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 17,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 18,\r\n  /** Is an arrow function. */\r\n  ARROW = 1 << 19,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 20,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 21,\r\n\r\n  // Compilation states\r\n\r\n  /** Is resolved. */\r\n  RESOLVED = 1 << 22,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 23,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 24,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 25,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 26,\r\n  /** Is a virtual method. */\r\n  VIRTUAL = 1 << 27,\r\n  /** Is the main function. */\r\n  MAIN = 1 << 28,\r\n\r\n  // Other\r\n\r\n  QUOTED = 1 << 29\r\n}\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n/** Prefix used to indicate a filespace element. */\r\nexport const FILESPACE_PREFIX = \"file:\";\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(message.range, useColors));\r\n    }\r\n\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) sb.push(\"~\");\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./charcode\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath,\r\n  CharCode\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  CLASS,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  INSTANCEOF,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Checks if a node represents a constant value. */\r\nexport function nodeIsConstantValue(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.LITERAL:\r\n    case NodeKind.NULL:\r\n    case NodeKind.TRUE:\r\n    case NodeKind.FALSE: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable. */\r\nexport function nodeIsCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.CALL:\r\n    case NodeKind.ELEMENTACCESS:\r\n    case NodeKind.PROPERTYACCESS:\r\n    case NodeKind.PARENTHESIZED: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable with generic arguments. */\r\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.PROPERTYACCESS: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n  /** Parent node. */\r\n  parent: Node | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n\r\n  // types\r\n\r\n  static createType(\r\n    name: IdentifierExpression,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name; name.parent = type;\r\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createIdentifierExpression(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameters = parameters; setParent(parameters, sig);\r\n    sig.returnType = returnType; returnType.parent = sig;\r\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    name: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.arguments = args; if (args) setParent(args, stmt);\r\n    stmt.decoratorKind = decoratorNameToKind(name);\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.toType = toType; toType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left; left.parent = expr;\r\n    expr.right = right; right.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createClassExpression(\r\n    declaration: ClassDeclaration\r\n  ): ClassExpression {\r\n    var expr = new ClassExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions; setParent(expressions, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.elementExpression = element; element.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.flags = declaration.flags & CommonFlags.ARROW;\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createInstanceOfExpression(\r\n    expression: Expression,\r\n    isType: CommonTypeNode,\r\n    range: Range\r\n  ): InstanceOfExpression {\r\n    var expr = new InstanceOfExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.isType = isType; isType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createObjectLiteralExpression(\r\n    names: IdentifierExpression[],\r\n    values: Expression[],\r\n    range: Range\r\n  ): ObjectLiteralExpression {\r\n    var expr = new ObjectLiteralExpression();\r\n    expr.range = range;\r\n    expr.names = names;\r\n    expr.values = values;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.property = property; property.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition; condition.parent = expr;\r\n    expr.ifThen = ifThen; ifThen.parent = expr;\r\n    expr.ifElse = ifElse; ifElse.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier; identifier.parent = stmt;\r\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.values = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[] | null,\r\n    path: StringLiteralExpression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.members = members; if (members) setParent(members, stmt);\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.externalName = externalName; externalName.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    if (!externalName) {\r\n      externalName = name;\r\n    } else {\r\n      externalName.parent = elem;\r\n    }\r\n    elem.externalName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression; expression.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\r\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    externalName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.externalName = externalName; externalName.parent = elem;\r\n    if (!name) {\r\n      name = externalName;\r\n    } else {\r\n      name.parent = elem;\r\n    }\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.type = type; if (type) type.parent = stmt;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.condition = condition; if (condition) condition.parent = stmt;\r\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.cases = cases; setParent(cases, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label; if (label) label.parent = elem;\r\n    elem.statements = statements; setParent(statements, elem);\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    stmt.catchVariable = catchVariable;\r\n    if (catchVariable) catchVariable.parent = stmt;\r\n    stmt.catchStatements = catchStatements;\r\n    if (catchStatements) setParent(catchStatements, stmt);\r\n    stmt.finallyStatements = finallyStatements;\r\n    if (finallyStatements) setParent(finallyStatements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.type = alias; alias.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.declarations = declarations; setParent(declarations, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameters: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  OPERATOR_BINARY,\r\n  OPERATOR_PREFIX,\r\n  OPERATOR_POSTFIX,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE,\r\n  EXTERNAL,\r\n  BUILTIN\r\n}\r\n\r\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\r\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\r\n  // @global, @inline, @operator, @sealed, @unmanaged\r\n  if (name.kind == NodeKind.IDENTIFIER) {\r\n    let nameStr = (<IdentifierExpression>name).text;\r\n    assert(nameStr.length);\r\n    switch (nameStr.charCodeAt(0)) {\r\n      case CharCode.b: {\r\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\r\n        break;\r\n      }\r\n      case CharCode.e: {\r\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\r\n        break;\r\n      }\r\n      case CharCode.g: {\r\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\r\n        break;\r\n      }\r\n      case CharCode.i: {\r\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\r\n        break;\r\n      }\r\n      case CharCode.o: {\r\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\r\n        break;\r\n      }\r\n      case CharCode.s: {\r\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\r\n        break;\r\n      }\r\n      case CharCode.u: {\r\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\r\n        break;\r\n      }\r\n    }\r\n  } else if (\r\n    name.kind == NodeKind.PROPERTYACCESS &&\r\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\r\n  ) {\r\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\r\n    assert(nameStr.length);\r\n    let propStr = (<PropertyAccessExpression>name).property.text;\r\n    assert(propStr.length);\r\n    // @operator.binary, @operator.prefix, @operator.postfix\r\n    if (nameStr == \"operator\") {\r\n      switch (propStr.charCodeAt(0)) {\r\n        case CharCode.b: {\r\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\r\n          break;\r\n        }\r\n        case CharCode.p: {\r\n          switch (propStr) {\r\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\r\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return DecoratorKind.CUSTOM;\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n}\r\n\r\n/** Represents a class expression using the 'class' keyword. */\r\nexport class ClassExpression extends Expression {\r\n  kind = NodeKind.CLASS;\r\n\r\n  /** Inline class declaration. */\r\n  declaration: ClassDeclaration;\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an `instanceof` expression. */\r\nexport class InstanceOfExpression extends Expression {\r\n  kind = NodeKind.INSTANCEOF;\r\n\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Type to test for. */\r\n  isType: CommonTypeNode;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n}\r\n\r\n/** Represents an object literal expression. */\r\nexport class ObjectLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.OBJECT;\r\n\r\n  /** Field names. */\r\n  names: IdentifierExpression[];\r\n  /** Field values. */\r\n  values: Expression[];\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\nexport function isLastStatement(statement: Statement): bool {\r\n  var parent = assert(statement.parent);\r\n  if (parent.kind == NodeKind.BLOCK) {\r\n    let statements = (<BlockStatement>parent).statements;\r\n    if (statements[statements.length - 1] === statement) {\r\n      switch (assert(parent.parent).kind) {\r\n        case NodeKind.FUNCTIONDECLARATION:\r\n        case NodeKind.METHODDECLARATION: return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Simple path (last part without extension). */\r\n  simplePath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n  /** Re-exported sources. */\r\n  exportPaths: Set<string> | null = null;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    var internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.internalPath = internalPath;\r\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\r\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n\r\n  protected cachedProgramLevelInternalName: string | null = null;\r\n  protected cachedFileLevelInternalName: string | null = null;\r\n\r\n  /** Gets the mangled program-level internal name of this declaration. */\r\n  get programLevelInternalName(): string {\r\n    if (!this.cachedProgramLevelInternalName) {\r\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\r\n    }\r\n    return this.cachedProgramLevelInternalName;\r\n  }\r\n\r\n  /** Gets the mangled file-level internal name of this declaration. */\r\n  get fileLevelInternalName(): string {\r\n    if (!this.cachedFileLevelInternalName) {\r\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\r\n    }\r\n    return this.cachedFileLevelInternalName;\r\n  }\r\n\r\n  /** Tests if this is a top-level declaration within its source file. */\r\n  get isTopLevel(): bool {\r\n    var parent = this.parent;\r\n    if (!parent) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\r\n      return false;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE;\r\n  }\r\n\r\n  /** Tests if this declaration is a top-level export within its source file. */\r\n  get isTopLevelExport(): bool {\r\n    var parent = this.parent;\r\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\r\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\r\n    }\r\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\r\n  }\r\n\r\n  /** Tests if this declaration needs an explicit export. */\r\n  needsExplicitExport(member: ExportMember): bool {\r\n    // This is necessary because module-level exports are automatically created\r\n    // for top level declarations of all sorts. This function essentially tests\r\n    // that there isn't a otherwise duplicate top-level export already.\r\n    return (\r\n      member.name.text != member.externalName.text || // if aliased\r\n      this.range.source != member.range.source ||     // if a re-export\r\n      !this.isTopLevelExport                          // if not top-level\r\n    );\r\n  }\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[];\r\n  /** Base class type being extended, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: TypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Identifier being exported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier seen when imported again. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\r\n  members: ExportMember[] | null;\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index within the constructor, if applicable. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Finds the first decorator matching the specified kind. */\r\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      if (decorator.decoratorKind == kind) return decorator;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Mangles a declaration's name to an internal name. */\r\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\r\n  var name = declaration.name.text;\r\n  var parent = declaration.parent;\r\n  if (!parent) return name;\r\n  if (\r\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\r\n    parent.kind == NodeKind.VARIABLE\r\n  ) { // skip over\r\n    if (!(parent = parent.parent)) return name;\r\n  }\r\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\r\n      declaration.is(CommonFlags.STATIC)\r\n        ? STATIC_DELIMITER\r\n        : INSTANCE_DELIMITER\r\n    ) + name;\r\n  }\r\n  if (\r\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\r\n    parent.kind == NodeKind.ENUMDECLARATION\r\n  ) {\r\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\r\n           STATIC_DELIMITER + name;\r\n  }\r\n  return asGlobal\r\n    ? name\r\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n// Helpers\r\n\r\n/** Sets the parent node on an array of nodes. */\r\nfunction setParent(nodes: Node[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    nodes[i].parent = parent;\r\n  }\r\n}\r\n\r\n/** Sets the parent node on an array of nullable nodes. */\r\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    let node = nodes[i];\r\n    if (node) node.parent = parent;\r\n  }\r\n}\r\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  FILESPACE_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Options,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  Range,\r\n  CommonTypeNode,\r\n  TypeParameterNode,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n\r\n  Expression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  StringLiteralExpression,\r\n\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  decoratorNameToKind,\r\n  findDecorator\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  BinaryOp,\r\n  UnaryOp,\r\n\r\n  getExpressionId,\r\n  getGetLocalIndex,\r\n  isTeeLocal,\r\n  getSetLocalValue,\r\n  getBinaryOp,\r\n  getConstValueI32,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getUnaryOp,\r\n  getExpressionType,\r\n  getLoadBytes,\r\n  isLoadSigned,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getCallTarget,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getConstValueI64Low,\r\n  getGetGlobalName\r\n} from \"./module\";\r\n\r\nimport {\r\n  CharCode\r\n} from \"./util\";\r\n\r\nimport {\r\n  Resolver\r\n} from \"./resolver\";\r\n\r\n/** Represents a yet unresolved import. */\r\nclass QueuedImport {\r\n  localName: string;\r\n  externalName: string;\r\n  externalNameAlt: string;\r\n  declaration: ImportDeclaration | null; // not set if a filespace\r\n}\r\n\r\n/** Represents a yet unresolved export. */\r\nclass QueuedExport {\r\n  externalName: string;\r\n  isReExport: bool;\r\n  member: ExportMember;\r\n}\r\n\r\n/** Represents a type alias. */\r\nclass TypeAlias {\r\n  typeParameters: TypeParameterNode[] | null;\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a module-level export. */\r\nclass ModuleExport {\r\n  element: Element;\r\n  identifier: IdentifierExpression;\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n\r\n  // indexed access\r\n  INDEXED_GET,            // a[]\r\n  INDEXED_SET,            // a[]=b\r\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\r\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\r\n\r\n  // binary\r\n  ADD,                    // a + b\r\n  SUB,                    // a - b\r\n  MUL,                    // a * b\r\n  DIV,                    // a / b\r\n  REM,                    // a % b\r\n  POW,                    // a ** b\r\n  BITWISE_AND,            // a & b\r\n  BITWISE_OR,             // a | b\r\n  BITWISE_XOR,            // a ^ b\r\n  BITWISE_SHL,            // a << b\r\n  BITWISE_SHR,            // a >> b\r\n  BITWISE_SHR_U,          // a >>> b\r\n  EQ,                     // a == b\r\n  NE,                     // a != b\r\n  GT,                     // a > b\r\n  GE,                     // a >= b\r\n  LT,                     // a < b\r\n  LE,                     // a <= b\r\n\r\n  // unary prefix\r\n  PLUS,                   // +a\r\n  MINUS,                  // -a\r\n  NOT,                    // !a\r\n  BITWISE_NOT,            // ~a\r\n  PREFIX_INC,             // ++a\r\n  PREFIX_DEC,             // --a\r\n\r\n  // unary postfix\r\n  POSTFIX_INC,            // a++\r\n  POSTFIX_DEC             // a--\r\n\r\n  // not overridable:\r\n  // IDENTITY             // a === b\r\n  // LOGICAL_AND          // a && b\r\n  // LOGICAL_OR           // a || b\r\n}\r\n\r\n/** Returns the operator kind represented by the specified decorator and string argument. */\r\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\r\n  assert(arg.length);\r\n  switch (decoratorKind) {\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.OPENBRACKET: {\r\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\r\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\r\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.ADD;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.SUB;\r\n          break;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          if (arg == \"*\") return OperatorKind.MUL;\r\n          if (arg == \"**\") return OperatorKind.POW;\r\n          break;\r\n        }\r\n        case CharCode.SLASH: {\r\n          if (arg == \"/\") return OperatorKind.DIV;\r\n          break;\r\n        }\r\n        case CharCode.PERCENT: {\r\n          if (arg == \"%\") return OperatorKind.REM;\r\n          break;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\r\n          break;\r\n        }\r\n        case CharCode.BAR: {\r\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\r\n          break;\r\n        }\r\n        case CharCode.CARET: {\r\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\r\n          break;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          if (arg == \"==\") return OperatorKind.EQ;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!=\") return OperatorKind.NE;\r\n          break;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          if (arg == \">\") return OperatorKind.GT;\r\n          if (arg == \">=\") return OperatorKind.GE;\r\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\r\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\r\n          break;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          if (arg == \"<\") return OperatorKind.LT;\r\n          if (arg == \"<=\") return OperatorKind.LE;\r\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_PREFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.PLUS;\r\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.MINUS;\r\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!\") return OperatorKind.NOT;\r\n          break;\r\n        }\r\n        case CharCode.TILDE: {\r\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_POSTFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return OperatorKind.INVALID;\r\n}\r\n\r\nconst noTypesYet = new Map<string,Type>();\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Array of source files. */\r\n  sources: Source[];\r\n  /** Resolver instance. */\r\n  resolver: Resolver;\r\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n\r\n  /** Elements by internal name. */\r\n  elementsLookup: Map<string,Element> = new Map();\r\n  /** Class and function instances by internal name. */\r\n  instancesLookup: Map<string,Element> = new Map();\r\n  /** Types by internal name. */\r\n  typesLookup: Map<string,Type> = noTypesYet;\r\n  /** Declared type aliases. */\r\n  typeAliases: Map<string,TypeAlias> = new Map();\r\n  /** File-level exports by exported name. */\r\n  fileLevelExports: Map<string,Element> = new Map();\r\n  /** Module-level exports by exported name. */\r\n  moduleLevelExports: Map<string,ModuleExport> = new Map();\r\n\r\n  /** ArrayBuffer instance reference. */\r\n  arrayBufferInstance: Class | null = null;\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype | null = null;\r\n  /** String instance reference. */\r\n  stringInstance: Class | null = null;\r\n  /** Start function reference. */\r\n  startFunction: FunctionPrototype;\r\n  /** Main function reference, if present. */\r\n  mainFunction: FunctionPrototype | null = null;\r\n  /** Abort function reference, if present. */\r\n  abortInstance: Function | null = null;\r\n  /** Memory allocation function. */\r\n  memoryAllocateInstance: Function | null = null;\r\n\r\n  /** Whether a garbage collector is present or not. */\r\n  hasGC: bool = false;\r\n  /** Garbage collector allocation function. */\r\n  gcAllocateInstance: Function | null = null;\r\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\r\n  gcLinkInstance: Function | null = null;\r\n  /** Garbage collector mark function called to on reachable managed objects. */\r\n  gcMarkInstance: Function | null = null;\r\n  /** Size of a managed object header. */\r\n  gcHeaderSize: u32 = 0;\r\n  /** Offset of the GC hook. */\r\n  gcHookOffset: u32 = 0;\r\n\r\n  /** Currently processing filespace. */\r\n  currentFilespace: Filespace;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.resolver = new Resolver(this);\r\n    this.sources = [];\r\n  }\r\n\r\n  /** Gets a source by its exact path. */\r\n  getSource(normalizedPath: string): Source | null {\r\n    var sources = this.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == normalizedPath) return source;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the source for the specified possibly ambiguous path. */\r\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\r\n    var tmp: string;\r\n    return (\r\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\r\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\r\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\r\n      this.getSource( tmp                                                    + \"/index.ts\")\r\n    );\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n\r\n    // add built-in types\r\n    this.typesLookup = new Map([\r\n      [\"i8\", Type.i8],\r\n      [\"i16\", Type.i16],\r\n      [\"i32\", Type.i32],\r\n      [\"i64\", Type.i64],\r\n      [\"isize\", options.isizeType],\r\n      [\"u8\", Type.u8],\r\n      [\"u16\", Type.u16],\r\n      [\"u32\", Type.u32],\r\n      [\"u64\", Type.u64],\r\n      [\"usize\", options.usizeType],\r\n      [\"bool\", Type.bool],\r\n      [\"f32\", Type.f32],\r\n      [\"f64\", Type.f64],\r\n      [\"void\", Type.void],\r\n      [\"number\", Type.f64],\r\n      [\"boolean\", Type.bool]\r\n    ]);\r\n\r\n    // add compiler hints\r\n    this.setConstantInteger(\"ASC_TARGET\", Type.i32,\r\n      i64_new(options.isWasm64 ? 2 : 1));\r\n    this.setConstantInteger(\"ASC_NO_TREESHAKING\", Type.bool,\r\n      i64_new(options.noTreeShaking ? 1 : 0, 0));\r\n    this.setConstantInteger(\"ASC_NO_ASSERT\", Type.bool,\r\n      i64_new(options.noAssert ? 1 : 0, 0));\r\n    this.setConstantInteger(\"ASC_MEMORY_BASE\", Type.i32,\r\n      i64_new(options.memoryBase, 0));\r\n    this.setConstantInteger(\"ASC_OPTIMIZE_LEVEL\", Type.i32,\r\n      i64_new(options.optimizeLevelHint, 0));\r\n    this.setConstantInteger(\"ASC_SHRINK_LEVEL\", Type.i32,\r\n      i64_new(options.shrinkLevelHint, 0));\r\n    this.setConstantInteger(\"ASC_FEATURE_MUTABLE_GLOBAL\", Type.bool,\r\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\r\n    this.setConstantInteger(\"ASC_FEATURE_SIGN_EXTENSION\", Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\r\n\r\n    // remember deferred elements\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExports = new Map<string,QueuedExport>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // build initial lookup maps of internal names to declarations\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n\r\n      // create one filespace per source\r\n      let filespace = new Filespace(this, source);\r\n      this.elementsLookup.set(filespace.internalName, filespace);\r\n      this.currentFilespace = filespace;\r\n\r\n      // process this source's statements\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeAlias(<TypeDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0; i < queuedImports.length;) {\r\n      let queuedImport = queuedImports[i];\r\n      let declaration = queuedImport.declaration;\r\n      if (declaration) { // named\r\n        let element = this.tryLocateImport(queuedImport.externalName, queuedExports);\r\n        if (element) {\r\n          this.elementsLookup.set(queuedImport.localName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          if (element = this.tryLocateImport(queuedImport.externalNameAlt, queuedExports)) {\r\n            this.elementsLookup.set(queuedImport.localName, element);\r\n            queuedImports.splice(i, 1);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              declaration.range,\r\n              (<ImportStatement>declaration.parent).path.value,\r\n              declaration.externalName.text\r\n            );\r\n            ++i;\r\n          }\r\n        }\r\n      } else { // filespace\r\n        let element = this.elementsLookup.get(queuedImport.externalName);\r\n        if (element) {\r\n          this.elementsLookup.set(queuedImport.localName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          if (element = this.elementsLookup.get(queuedImport.externalNameAlt)) {\r\n            this.elementsLookup.set(queuedImport.localName, element);\r\n            queuedImports.splice(i, 1);\r\n          } else {\r\n            assert(false); // already reported by the parser not finding the file\r\n            ++i;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [exportName, queuedExport] of queuedExports) {\r\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\r\n      let element: Element | null;\r\n      do {\r\n        if (currentExport.isReExport) {\r\n          if (element = this.fileLevelExports.get(currentExport.externalName)) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              queuedExport.member.externalName\r\n            );\r\n            break;\r\n          }\r\n          currentExport = queuedExports.get(currentExport.externalName);\r\n          if (!currentExport) {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.member.externalName.range,\r\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\r\n              queuedExport.member.externalName.text\r\n            );\r\n          }\r\n        } else {\r\n          if (\r\n            // normal export\r\n            (element = this.elementsLookup.get(currentExport.externalName)) ||\r\n            // library re-export\r\n            (element = this.elementsLookup.get(currentExport.member.name.text))\r\n          ) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              queuedExport.member.externalName\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Cannot_find_name_0,\r\n              queuedExport.member.range, queuedExport.member.name.text\r\n            );\r\n          }\r\n          break;\r\n        }\r\n      } while (currentExport);\r\n    }\r\n\r\n    // resolve base prototypes of derived classes\r\n    var resolver = this.resolver;\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let derivedPrototype = queuedExtends[i];\r\n      let derivedDeclaration = derivedPrototype.declaration;\r\n      let derivedType = assert(derivedDeclaration.extendsType);\r\n      let baseElement = resolver.resolveIdentifier(derivedType.name, null); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        derivedPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          derivedType.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    {\r\n      let globalAliases = options.globalAliases;\r\n      if (globalAliases) {\r\n        for (let [alias, name] of globalAliases) {\r\n          if (!name.length) continue; // explicitly disabled\r\n          let element = this.elementsLookup.get(name);\r\n          if (element) this.elementsLookup.set(alias, element);\r\n          else throw new Error(\"element not found: \" + name);\r\n        }\r\n      }\r\n    }\r\n\r\n    // register 'ArrayBuffer'\r\n    if (this.elementsLookup.has(\"ArrayBuffer\")) {\r\n      let element = assert(this.elementsLookup.get(\"ArrayBuffer\"));\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\r\n    }\r\n\r\n    // register 'Array'\r\n    if (this.elementsLookup.has(\"Array\")) {\r\n      let element = assert(this.elementsLookup.get(\"Array\"));\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      this.arrayPrototype = <ClassPrototype>element;\r\n    }\r\n\r\n    // register 'String'\r\n    if (this.elementsLookup.has(\"String\")) {\r\n      let element = assert(this.elementsLookup.get(\"String\"));\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let instance = resolver.resolveClass(<ClassPrototype>element, null);\r\n      if (instance) {\r\n        if (this.typesLookup.has(\"string\")) {\r\n          let declaration = (<ClassPrototype>element).declaration;\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, declaration.programLevelInternalName\r\n          );\r\n        } else {\r\n          this.stringInstance = instance;\r\n          this.typesLookup.set(\"string\", instance.type);\r\n        }\r\n      }\r\n    }\r\n\r\n    // register 'start'\r\n    {\r\n      let element = assert(this.elementsLookup.get(\"start\"));\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      this.startFunction = <FunctionPrototype>element;\r\n    }\r\n\r\n    // register 'main' if present\r\n    if (this.moduleLevelExports.has(\"main\")) {\r\n      let element = (<ModuleExport>this.moduleLevelExports.get(\"main\")).element;\r\n      if (\r\n        element.kind == ElementKind.FUNCTION_PROTOTYPE &&\r\n        !(<FunctionPrototype>element).isAny(CommonFlags.GENERIC | CommonFlags.AMBIENT)\r\n      ) {\r\n        (<FunctionPrototype>element).set(CommonFlags.MAIN);\r\n        this.mainFunction = <FunctionPrototype>element;\r\n      }\r\n    }\r\n\r\n    // register 'abort' if present\r\n    if (this.elementsLookup.has(\"abort\")) {\r\n      let element = <Element>this.elementsLookup.get(\"abort\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\r\n      if (instance) this.abortInstance = instance;\r\n    }\r\n\r\n    // register 'memory.allocate' if present\r\n    if (this.elementsLookup.has(\"memory\")) {\r\n      let element = <Element>this.elementsLookup.get(\"memory\");\r\n      let members = element.members;\r\n      if (members) {\r\n        if (members.has(\"allocate\")) {\r\n          element = assert(members.get(\"allocate\"));\r\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\r\n          if (instance) this.memoryAllocateInstance = instance;\r\n        }\r\n      }\r\n    }\r\n\r\n    // register GC hooks if present\r\n    if (\r\n      this.elementsLookup.has(\"__gc_allocate\") &&\r\n      this.elementsLookup.has(\"__gc_link\") &&\r\n      this.elementsLookup.has(\"__gc_mark\")\r\n    ) {\r\n      // __gc_allocate(usize, (ref: usize) => void): usize\r\n      let element = <Element>this.elementsLookup.get(\"__gc_allocate\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      let signature = gcAllocateInstance.signature;\r\n      assert(signature.parameterTypes.length == 2);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.parameterTypes[1].signatureReference);\r\n      assert(signature.returnType == this.options.usizeType);\r\n\r\n      // __gc_link(usize, usize): void\r\n      element = <Element>this.elementsLookup.get(\"__gc_link\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      signature = gcLinkInstance.signature;\r\n      assert(signature.parameterTypes.length == 2);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.parameterTypes[1] == this.options.usizeType);\r\n      assert(signature.returnType == Type.void);\r\n\r\n      // __gc_mark(usize): void\r\n      element = <Element>this.elementsLookup.get(\"__gc_mark\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      signature = gcMarkInstance.signature;\r\n      assert(signature.parameterTypes.length == 1);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.returnType == Type.void);\r\n\r\n      this.gcAllocateInstance = gcAllocateInstance;\r\n      this.gcLinkInstance = gcLinkInstance;\r\n      this.gcMarkInstance = gcMarkInstance;\r\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\r\n      this.gcHookOffset =  gcHookOffset;\r\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\r\n      this.hasGC = true;\r\n    }\r\n  }\r\n\r\n  /** Sets a constant integer value. */\r\n  setConstantInteger(globalName: string, type: Type, value: I64): void {\r\n    assert(type.is(TypeFlags.INTEGER));\r\n    var global = new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\r\n      .withConstantIntegerValue(value);\r\n    global.set(CommonFlags.RESOLVED);\r\n    this.elementsLookup.set(globalName, global);\r\n  }\r\n\r\n  /** Sets a constant float value. */\r\n  setConstantFloat(globalName: string, type: Type, value: f64): void {\r\n    assert(type.is(TypeFlags.FLOAT));\r\n    var global = new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\r\n      .withConstantFloatValue(value);\r\n    global.set(CommonFlags.RESOLVED);\r\n    this.elementsLookup.set(globalName, global);\r\n  }\r\n\r\n  /** Tries to locate an import by traversing exports and queued exports. */\r\n  private tryLocateImport(\r\n    externalName: string,\r\n    queuedNamedExports: Map<string,QueuedExport>\r\n  ): Element | null {\r\n    var element: Element | null;\r\n    var fileLevelExports = this.fileLevelExports;\r\n    do {\r\n      if (element = fileLevelExports.get(externalName)) return element;\r\n      let queuedExport = queuedNamedExports.get(externalName);\r\n      if (!queuedExport) break;\r\n      if (queuedExport.isReExport) {\r\n        externalName = queuedExport.externalName;\r\n        continue;\r\n      }\r\n      return this.elementsLookup.get(queuedExport.externalName);\r\n    } while (true);\r\n    return null;\r\n  }\r\n\r\n  /** Checks that only supported decorators are present. */\r\n  private checkDecorators(\r\n    decorators: DecoratorNode[],\r\n    acceptedFlags: DecoratorFlags\r\n  ): DecoratorFlags {\r\n    var presentFlags = DecoratorFlags.NONE;\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      let kind = decoratorNameToKind(decorator.name);\r\n      let flag = decoratorKindToFlag(kind);\r\n      if (flag) {\r\n        if (flag == DecoratorFlags.BUILTIN) {\r\n          if (decorator.range.source.isLibrary) {\r\n            presentFlags |= flag;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Decorator_0_is_not_valid_here,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          }\r\n        } else if (!(acceptedFlags & flag)) {\r\n          this.error(\r\n            DiagnosticCode.Decorator_0_is_not_valid_here,\r\n            decorator.range, decorator.name.range.toString()\r\n          );\r\n        } else if (presentFlags & flag) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_decorator,\r\n            decorator.range, decorator.name.range.toString()\r\n          );\r\n        } else {\r\n          presentFlags |= flag;\r\n        }\r\n      }\r\n    }\r\n    return presentFlags;\r\n  }\r\n\r\n  /** Checks and sets up global options of an element. */\r\n  private checkGlobal(\r\n    element: Element,\r\n    declaration: DeclarationStatement\r\n  ): void {\r\n    var parentNode = declaration.parent;\r\n    // alias globally if explicitly annotated @global or exported from a top-level library file\r\n    if (\r\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\r\n      (\r\n        declaration.range.source.isLibrary &&\r\n        element.is(CommonFlags.EXPORT) &&\r\n        (\r\n          assert(parentNode).kind == NodeKind.SOURCE ||\r\n          (\r\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\r\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\r\n          )\r\n        )\r\n    ) {\r\n      let globalName = declaration.programLevelInternalName;\r\n      if (this.elementsLookup.has(globalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, element.internalName\r\n        );\r\n      } else {\r\n        this.elementsLookup.set(globalName, element);\r\n      }\r\n    }\r\n    // builtins use the global name directly\r\n    if (element.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n      element.internalName = declaration.programLevelInternalName;\r\n    }\r\n  }\r\n\r\n  /** Initializes a class declaration. */\r\n  private initializeClass(\r\n    declaration: ClassDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new ClassPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.checkDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.SEALED |\r\n            DecoratorFlags.UNMANAGED\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n\r\n      // remember classes that implement interfaces\r\n      } else if (numImplementsTypes) {\r\n        for (let i = 0; i < numImplementsTypes; ++i) {\r\n          this.warning( // TODO\r\n            DiagnosticCode.Operation_not_supported,\r\n            implementsTypes[i].range\r\n          );\r\n        }\r\n        queuedImplements.push(prototype);\r\n      }\r\n    }\r\n\r\n    // remember classes that extend another one\r\n    if (declaration.extendsType) queuedExtends.push(prototype);\r\n\r\n    // add as namespace member if applicable\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // otherwise add to file-level exports if exported\r\n    } else if (prototype.is(CommonFlags.EXPORT)) {\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      this.currentFilespace.members.set(simpleName, prototype);\r\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, existingExport.element.internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n          element: prototype,\r\n          identifier: declaration.name\r\n        });\r\n      }\r\n    }\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false); // should have been reported while parsing\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobal(prototype, declaration);\r\n  }\r\n\r\n  /** Initializes a field of a class or interface. */\r\n  private initializeField(\r\n    declaration: FieldDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var decorators = declaration.decorators;\r\n    var isInterface = classPrototype.kind == ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n    // static fields become global variables\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      if (isInterface) {\r\n        // should have been reported while parsing\r\n        assert(false);\r\n      }\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      let staticField = new Global(\r\n        this,\r\n        name,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration,\r\n        decorators\r\n          ? this.checkDecorators(decorators, DecoratorFlags.INLINE)\r\n          : DecoratorFlags.NONE\r\n      );\r\n      staticField.parent = classPrototype;\r\n      classPrototype.members.set(name, staticField);\r\n      this.elementsLookup.set(internalName, staticField);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        staticField.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n      if (staticField.hasDecorator(DecoratorFlags.INLINE) && !staticField.is(CommonFlags.READONLY)) {\r\n        this.error(\r\n          DiagnosticCode.Decorator_0_is_not_valid_here,\r\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\r\n        );\r\n      }\r\n\r\n    // instance fields are remembered until resolved\r\n    } else {\r\n      if (isInterface) {\r\n        // should have been reported while parsing\r\n        assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\r\n      }\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instanceField = new FieldPrototype(\r\n        classPrototype,\r\n        name,\r\n        internalName,\r\n        declaration\r\n      );\r\n      if (decorators) this.checkDecorators(decorators, DecoratorFlags.NONE);\r\n      classPrototype.instanceMembers.set(name, instanceField);\r\n    }\r\n  }\r\n\r\n  /** Initializes a method of a class or interface. */\r\n  private initializeMethod(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var prototype: FunctionPrototype | null = null;\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.checkDecorators(decorators,\r\n        DecoratorFlags.OPERATOR_BINARY  |\r\n        DecoratorFlags.OPERATOR_PREFIX  |\r\n        DecoratorFlags.OPERATOR_POSTFIX |\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    // static methods become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      classPrototype.members.set(simpleName, prototype);\r\n      this.elementsLookup.set(internalName, prototype);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance methods are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\r\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\r\n      // }\r\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\r\n        if (classPrototype.constructorPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\r\n            declaration.name.range\r\n          );\r\n        } else {\r\n          prototype.set(CommonFlags.CONSTRUCTOR);\r\n          classPrototype.constructorPrototype = prototype;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers.set(simpleName, prototype);\r\n      }\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\r\n  }\r\n\r\n  private checkOperatorOverloads(\r\n    decorators: DecoratorNode[] | null,\r\n    prototype: FunctionPrototype,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        switch (decorator.decoratorKind) {\r\n          case DecoratorKind.OPERATOR:\r\n          case DecoratorKind.OPERATOR_BINARY:\r\n          case DecoratorKind.OPERATOR_PREFIX:\r\n          case DecoratorKind.OPERATOR_POSTFIX: {\r\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n            if (numArgs == 1) {\r\n              let firstArg = (<Expression[]>decorator.arguments)[0];\r\n              if (\r\n                firstArg.kind == NodeKind.LITERAL &&\r\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n              ) {\r\n                let kind = operatorKindFromDecorator(\r\n                  decorator.decoratorKind,\r\n                  (<StringLiteralExpression>firstArg).value\r\n                );\r\n                if (kind == OperatorKind.INVALID) {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  let overloads = classPrototype.overloadPrototypes;\r\n                  if (overloads.has(kind)) {\r\n                    this.error(\r\n                      DiagnosticCode.Duplicate_function_implementation,\r\n                      firstArg.range\r\n                    );\r\n                  } else {\r\n                    prototype.operatorKind = kind;\r\n                    overloads.set(kind, prototype);\r\n                  }\r\n                }\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.String_literal_expected,\r\n                  firstArg.range\r\n                );\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                decorator.range, \"1\", numArgs.toString(0)\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeAccessor(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalPropertyName = declaration.fileLevelInternalName;\r\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    var isNew = false;\r\n    if (propertyElement) {\r\n      if (\r\n        propertyElement.kind != ElementKind.PROPERTY ||\r\n        (isGetter\r\n          ? (<Property>propertyElement).getterPrototype\r\n          : (<Property>propertyElement).setterPrototype\r\n        ) != null\r\n      ) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalPropertyName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      propertyElement = new Property(\r\n        this,\r\n        simpleName,\r\n        internalPropertyName,\r\n        classPrototype\r\n      );\r\n      isNew = true;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.checkDecorators(decorators,\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\r\n\r\n    // static accessors become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\r\n      if (this.elementsLookup.has(staticName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, staticName\r\n        );\r\n        return;\r\n      }\r\n      let staticPrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        staticName,\r\n        declaration,\r\n        null,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = staticPrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = staticPrototype;\r\n      }\r\n      if (isNew) {\r\n        if (classPrototype.members) {\r\n          if (classPrototype.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, staticName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          classPrototype.members = new Map();\r\n        }\r\n        classPrototype.members.set(simpleName, propertyElement); // check above\r\n      } else {\r\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\r\n      }\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance accessors are remembered until resolved\r\n    } else {\r\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(baseName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalPropertyName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instancePrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        instanceName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = instancePrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = instancePrototype;\r\n      }\r\n      classPrototype.instanceMembers.set(baseName, propertyElement);\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeEnum(\r\n    declaration: EnumDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var element = new Enum(this, simpleName, internalName, declaration);\r\n    element.parent = namespace;\r\n    this.elementsLookup.set(internalName, element);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, element);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, element);\r\n      this.currentFilespace.members.set(simpleName, element);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, existingExport.element.internalName\r\n          );\r\n          return;\r\n        }\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n          element,\r\n          identifier: declaration.name\r\n        });\r\n      }\r\n    }\r\n\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n\r\n    this.checkGlobal(element, declaration);\r\n  }\r\n\r\n  private initializeEnumValue(\r\n    declaration: EnumValueDeclaration,\r\n    enm: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (enm.members) {\r\n      if (enm.members.has(name)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      enm.members = new Map();\r\n    }\r\n    var value = new EnumValue(enm, this, name, internalName, declaration);\r\n    enm.members.set(name, value);\r\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\r\n      value.set(CommonFlags.MODULE_EXPORT);\r\n    }\r\n  }\r\n\r\n  private initializeExports(\r\n    statement: ExportStatement,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var members = statement.members;\r\n    if (members) { // named\r\n      for (let i = 0, k = members.length; i < k; ++i) {\r\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\r\n      }\r\n    } else { // TODO: filespace\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.range\r\n      );\r\n    }\r\n  }\r\n\r\n  private setExportAndCheckLibrary(\r\n    internalName: string,\r\n    element: Element,\r\n    externalIdentifier: IdentifierExpression\r\n  ): void {\r\n    // add to file-level exports\r\n    this.fileLevelExports.set(internalName, element);\r\n\r\n    // add to filespace\r\n    var internalPath = externalIdentifier.range.source.internalPath;\r\n    var prefix = FILESPACE_PREFIX + internalPath;\r\n    var filespace = this.elementsLookup.get(prefix);\r\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\r\n    assert(filespace.kind == ElementKind.FILESPACE);\r\n    var simpleName = externalIdentifier.text;\r\n    (<Filespace>filespace).members.set(simpleName, element);\r\n\r\n    // add global alias if a top-level export of a library file\r\n    var source = externalIdentifier.range.source;\r\n    if (source.isLibrary) {\r\n      if (this.elementsLookup.has(simpleName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          externalIdentifier.range, simpleName\r\n        );\r\n      } else {\r\n        element.internalName = simpleName;\r\n        this.elementsLookup.set(simpleName, element);\r\n      }\r\n\r\n    // add module level export if a top-level export of an entry file\r\n    } else if (source.isEntry) {\r\n      this.moduleLevelExports.set(externalIdentifier.text, <ModuleExport>{\r\n        element,\r\n        identifier: externalIdentifier\r\n      });\r\n    }\r\n  }\r\n\r\n  private initializeExport(\r\n    member: ExportMember,\r\n    internalPath: string | null,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\r\n    if (this.fileLevelExports.has(externalName)) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.externalName.range, externalName\r\n      );\r\n      return;\r\n    }\r\n    var referencedName: string;\r\n    var referencedElement: Element | null;\r\n    var queuedExport: QueuedExport | null;\r\n\r\n    // export local element\r\n    if (internalPath == null) {\r\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the element exists\r\n      if (this.elementsLookup.has(referencedName)) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          <Element>this.elementsLookup.get(referencedName),\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = false;\r\n      queuedExport.externalName = referencedName; // -> here: local name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n\r\n    // export external element\r\n    } else {\r\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the export exists\r\n      referencedElement = this.elementsLookup.get(referencedName);\r\n      if (referencedElement) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // walk already known queued exports\r\n      let seen = new Set<QueuedExport>();\r\n      while (queuedExport = queuedExports.get(referencedName)) {\r\n        if (queuedExport.isReExport) {\r\n          referencedElement = this.fileLevelExports.get(queuedExport.externalName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          referencedName = queuedExport.externalName;\r\n          if (seen.has(queuedExport)) break;\r\n          seen.add(queuedExport);\r\n        } else {\r\n          referencedElement = this.elementsLookup.get(queuedExport.externalName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = true;\r\n      queuedExport.externalName = referencedName; // -> here: external name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n    }\r\n  }\r\n\r\n  private initializeFunction(\r\n    declaration: FunctionDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var prototype = new FunctionPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      null,\r\n      decorators\r\n        ? this.checkDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.INLINE |\r\n            DecoratorFlags.EXTERNAL\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.parent = namespace;\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      this.currentFilespace.members.set(simpleName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, existingExport.element.internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n          element: prototype,\r\n          identifier: declaration.name\r\n        });\r\n      }\r\n    }\r\n\r\n    this.checkGlobal(prototype, declaration);\r\n  }\r\n\r\n  private initializeImports(\r\n    statement: ImportStatement,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) {\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          statement.internalPath,\r\n          queuedExports, queuedImports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\r\n      let simpleName = statement.namespaceName.text;\r\n      let internalName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        simpleName\r\n      );\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          statement.namespaceName.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // resolve right away if the exact filespace exists\r\n      let filespace = this.elementsLookup.get(statement.internalPath);\r\n      if (filespace) {\r\n        this.elementsLookup.set(internalName, filespace);\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      let queuedImport = new QueuedImport();\r\n      queuedImport.localName = internalName;\r\n      let externalName = FILESPACE_PREFIX + statement.internalPath;\r\n      queuedImport.externalName = externalName;\r\n      queuedImport.externalNameAlt = externalName + PATH_DELIMITER + \"index\";\r\n      queuedImport.declaration = null; // filespace\r\n      queuedImports.push(queuedImport);\r\n    }\r\n  }\r\n\r\n  private initializeImport(\r\n    declaration: ImportDeclaration,\r\n    internalPath: string,\r\n    queuedNamedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var localName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(localName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, localName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var externalName = internalPath + PATH_DELIMITER + declaration.externalName.text;\r\n\r\n    // resolve right away if the exact export exists\r\n    var element: Element | null;\r\n    if (element = this.fileLevelExports.get(externalName)) {\r\n      this.elementsLookup.set(localName, element);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    const indexPart = PATH_DELIMITER + \"index\";\r\n    var queuedImport = new QueuedImport();\r\n    queuedImport.localName = localName;\r\n    if (internalPath.endsWith(indexPart)) {\r\n      queuedImport.externalName = externalName; // try exact first\r\n      queuedImport.externalNameAlt = (\r\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\r\n        declaration.externalName.text\r\n      );\r\n    } else {\r\n      queuedImport.externalName = externalName; // try exact first\r\n      queuedImport.externalNameAlt = (\r\n        internalPath +\r\n        indexPart +\r\n        PATH_DELIMITER +\r\n        declaration.externalName.text\r\n      );\r\n    }\r\n    queuedImport.declaration = declaration; // named\r\n    queuedImports.push(queuedImport);\r\n  }\r\n\r\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new InterfacePrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.checkDecorators(decorators, DecoratorFlags.GLOBAL)\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(prototype.internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(prototype.internalName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      this.currentFilespace.members.set(simpleName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, existingExport.element.internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n          element: prototype,\r\n          identifier: declaration.name\r\n        });\r\n      }\r\n    }\r\n\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"interface member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobal(prototype, declaration);\r\n  }\r\n\r\n  private initializeNamespace(\r\n    declaration: NamespaceDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    parentNamespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var simpleName = declaration.name.text;\r\n    var namespace = this.elementsLookup.get(internalName);\r\n    if (!namespace) {\r\n      namespace = new Namespace(this, simpleName, internalName, declaration);\r\n      namespace.parent = parentNamespace;\r\n      this.elementsLookup.set(internalName, namespace);\r\n      this.checkGlobal(namespace, declaration);\r\n    }\r\n\r\n    if (parentNamespace) {\r\n      if (parentNamespace.members) {\r\n        if (parentNamespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        parentNamespace.members = new Map();\r\n      }\r\n      parentNamespace.members.set(simpleName, namespace);\r\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\r\n      let existingExport = this.fileLevelExports.get(internalName);\r\n      if (existingExport) {\r\n        if (!existingExport.is(CommonFlags.EXPORT)) {\r\n          this.error(\r\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n            declaration.name.range, namespace.internalName\r\n          ); // recoverable\r\n        }\r\n        namespace = existingExport; // join\r\n      } else {\r\n        this.fileLevelExports.set(internalName, namespace);\r\n      }\r\n      this.currentFilespace.members.set(simpleName, namespace);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          if (existingExport.element !== namespace) { // not merged\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, existingExport.element.internalName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n            element: namespace,\r\n            identifier: declaration.name\r\n          });\r\n        }\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      switch (members[i].kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\r\n          // TODO: what about namespaced types?\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            members[i].range\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>members[i], namespace);\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"namespace member expected\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\r\n    // type aliases are program globals\r\n    // TODO: what about namespaced types?\r\n    var name = declaration.name.text;\r\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, name\r\n      );\r\n      return;\r\n    }\r\n    var alias = new TypeAlias();\r\n    alias.typeParameters = declaration.typeParameters;\r\n    alias.type = declaration.type;\r\n    this.typeAliases.set(name, alias);\r\n  }\r\n\r\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let decorators = declaration.decorators;\r\n      let internalName = declaration.fileLevelInternalName;\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        continue;\r\n      }\r\n      let simpleName = declaration.name.text;\r\n      let global = new Global(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration,\r\n        decorators\r\n          ? this.checkDecorators(decorators,\r\n              DecoratorFlags.GLOBAL |\r\n              DecoratorFlags.INLINE |\r\n              DecoratorFlags.EXTERNAL\r\n            )\r\n          : DecoratorFlags.NONE\r\n      );\r\n      global.parent = namespace;\r\n      this.elementsLookup.set(internalName, global);\r\n\r\n      if (global.hasDecorator(DecoratorFlags.INLINE) && !global.is(CommonFlags.CONST)) {\r\n        this.error(\r\n          DiagnosticCode.Decorator_0_is_not_valid_here,\r\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\r\n        );\r\n      }\r\n\r\n      if (namespace) {\r\n        if (namespace.members) {\r\n          if (namespace.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n        } else {\r\n          namespace.members = new Map();\r\n        }\r\n        namespace.members.set(simpleName, global);\r\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\r\n        if (this.fileLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n        } else {\r\n          this.fileLevelExports.set(internalName, global);\r\n        }\r\n        this.currentFilespace.members.set(simpleName, global);\r\n        if (declaration.range.source.isEntry) {\r\n          if (this.moduleLevelExports.has(simpleName)) {\r\n            let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, existingExport.element.internalName\r\n            );\r\n            continue;\r\n          }\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n            element: global,\r\n            identifier: declaration.name\r\n          });\r\n        }\r\n      }\r\n      this.checkGlobal(global, declaration);\r\n    }\r\n  }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE,\r\n  /** A {@link Filespace}. */\r\n  FILESPACE,\r\n}\r\n\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is a binary operator overload. */\r\n  OPERATOR_BINARY = 1 << 1,\r\n  /** Is a unary prefix operator overload. */\r\n  OPERATOR_PREFIX = 1 << 2,\r\n  /** Is a unary postfix operator overload. */\r\n  OPERATOR_POSTFIX = 1 << 3,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 4,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 5,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 6,\r\n  /** Is using a different external name. */\r\n  EXTERNAL = 1 << 7,\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 8\r\n}\r\n\r\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\r\n  switch (kind) {\r\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\r\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\r\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\r\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\r\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\r\n    default: return DecoratorFlags.NONE;\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Specific element kind. */\r\n  kind: ElementKind;\r\n  /** Containing {@link Program}. */\r\n  program: Program;\r\n  /** Simple name. */\r\n  simpleName: string;\r\n  /** Internal name referring to this element. */\r\n  internalName: string;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Namespaced member elements. */\r\n  members: Map<string,Element> | null = null;\r\n  /** Parent element, if applicable. */\r\n  parent: Element | null = null;\r\n\r\n  /** Constructs a new element, linking it to its containing {@link Program}. */\r\n  protected constructor(program: Program, simpleName: string, internalName: string) {\r\n    this.program = program;\r\n    this.simpleName = simpleName;\r\n    this.internalName = internalName;\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n}\r\n\r\n/** A filespace representing the implicit top-level namespace of a source. */\r\nexport class Filespace extends Element {\r\n\r\n  kind = ElementKind.FILESPACE;\r\n\r\n  /** File members (externally visible only). */\r\n  members: Map<string,Element>; // more specific\r\n\r\n  /** Constructs a new filespace. */\r\n  constructor(\r\n    program: Program,\r\n    source: Source\r\n  ) {\r\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\r\n    this.members = new Map();\r\n  }\r\n}\r\n\r\n/** A namespace that differs from a filespace in being user-declared with a name. */\r\nexport class Namespace extends Element {\r\n\r\n  // All elements have namespace semantics. This is an explicitly declared one.\r\n  kind = ElementKind.NAMESPACE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: NamespaceDeclaration; // more specific\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: NamespaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends Element {\r\n\r\n  kind = ElementKind.ENUM;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumDeclaration;\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends Element {\r\n\r\n  kind = ElementKind.ENUMVALUE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumValueDeclaration;\r\n  /** Constant value, if applicable. */\r\n  constantValue: i32 = 0;\r\n\r\n  constructor(\r\n    enm: Enum,\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumValueDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = enm;\r\n    this.declaration = declaration;\r\n  }\r\n}\r\n\r\nexport const enum ConstantValueKind {\r\n  NONE,\r\n  INTEGER,\r\n  FLOAT\r\n}\r\n\r\nexport class VariableLikeElement extends Element {\r\n\r\n  // kind varies\r\n\r\n  /** Declaration reference. */\r\n  declaration: VariableLikeDeclarationStatement | null;\r\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\r\n  type: Type;\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  protected constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.type = type;\r\n    this.declaration = declaration;\r\n  }\r\n\r\n  withConstantIntegerValue(value: I64): this {\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n\r\n  withConstantFloatValue(value: f64): this {\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  kind = ElementKind.GLOBAL;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, type, declaration);\r\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.type = type; // resolved later if `void`\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n\r\n  // not an Element on its own\r\n\r\n  /** Parameter name. */\r\n  name: string;\r\n  /** Parameter type. */\r\n  type: Type;\r\n  /** Parameter initializer. */\r\n  initializer: Expression | null;\r\n\r\n  /** Constructs a new function parameter. */\r\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.initializer = initializer;\r\n  }\r\n}\r\n\r\n/** A function local. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  kind = ElementKind.LOCAL;\r\n\r\n  /** Local index. */\r\n  index: i32;\r\n  /** Respective scoped global, if any. */\r\n  scopedGlobal: Global | null = null;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    index: i32,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null = null\r\n  ) {\r\n    super(program, simpleName, simpleName, type, declaration);\r\n    this.index = index;\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FunctionDeclaration;\r\n  /** If an instance method, the class prototype reference. */\r\n  classPrototype: ClassPrototype | null;\r\n  /** Resolved instances by class type arguments and function type arguments. */\r\n  instances: Map<string,Map<string,Function>> = new Map();\r\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\r\n  classTypeArguments: Type[] | null = null;\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FunctionDeclaration,\r\n    classPrototype: ClassPrototype | null = null,\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.classPrototype = classPrototype;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  toString(): string { return this.simpleName; }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends Element {\r\n\r\n  kind = ElementKind.FUNCTION;\r\n\r\n  /** Prototype reference. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  localsByName: Map<string,Local> = new Map();\r\n  /** Array of locals by index. */\r\n  localsByIndex: Local[] = [];\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Current break context label. */\r\n  breakContext: string | null = null;\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Current control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] = [];\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n  /** The outer scope, if a function expression. */\r\n  outerScope: Flow | null = null;\r\n\r\n  private nextBreakId: i32 = 0;\r\n  private breakStack: i32[] | null = null;\r\n  nextInlineId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    prototype: FunctionPrototype,\r\n    internalName: string,\r\n    signature: Signature,\r\n    parent: Element | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.parent = parent;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    if (!(prototype.is(CommonFlags.AMBIENT))) {\r\n      let localIndex = 0;\r\n      if (parent && parent.kind == ElementKind.CLASS) {\r\n        assert(this.is(CommonFlags.INSTANCE));\r\n        let local = new Local(\r\n          prototype.program,\r\n          \"this\",\r\n          localIndex++,\r\n          assert(signature.thisType)\r\n        );\r\n        this.localsByName.set(\"this\", local);\r\n        this.localsByIndex[local.index] = local;\r\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\r\n        if (inheritedTypeArguments) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n            if (!this.contextualTypeArguments.has(inheritedName)) {\r\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        let local = new Local(\r\n          prototype.program,\r\n          parameterName,\r\n          localIndex++,\r\n          parameterType\r\n          // FIXME: declaration?\r\n        );\r\n        this.localsByName.set(parameterName, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var local = new Local(\r\n      this.prototype.program,\r\n      name\r\n        ? name\r\n        : \"var$\" + localIndex.toString(10),\r\n      localIndex,\r\n      type,\r\n      declaration\r\n    );\r\n    if (name) {\r\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\r\n      this.localsByName.set(name, local);\r\n    }\r\n    this.localsByIndex[local.index] = local;\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  private tempI32s: Local[] | null = null;\r\n  private tempI64s: Local[] | null = null;\r\n  private tempF32s: Local[] | null = null;\r\n  private tempF64s: Local[] | null = null;\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type, wrapped: bool = false): Local {\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s;\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps && temps.length) {\r\n      local = temps.pop();\r\n      local.type = type;\r\n      local.flags = CommonFlags.NONE;\r\n    } else {\r\n      local = this.addLocal(type);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.flow.setLocalWrapped(local.index, wrapped);\r\n    }\r\n    return local;\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps.length) {\r\n      local = temps[temps.length - 1];\r\n      local.type = type;\r\n    } else {\r\n      local = this.addLocal(type);\r\n      temps.push(local);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.flow.setLocalWrapped(local.index, wrapped);\r\n    }\r\n    return local;\r\n  }\r\n\r\n  /** Enters a(nother) break context. */\r\n  enterBreakContext(): string {\r\n    var id = this.nextBreakId++;\r\n    if (!this.breakStack) this.breakStack = [ id ];\r\n    else this.breakStack.push(id);\r\n    return this.breakContext = id.toString(10);\r\n  }\r\n\r\n  /** Leaves the current break context. */\r\n  leaveBreakContext(): void {\r\n    assert(this.breakStack != null);\r\n    var length = (<i32[]>this.breakStack).length;\r\n    assert(length > 0);\r\n    (<i32[]>this.breakStack).pop();\r\n    if (length > 1) {\r\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\r\n    } else {\r\n      this.breakContext = null;\r\n      this.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakContext = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n        let debugLocation = debugLocations[i];\r\n        module.setDebugLocation(\r\n          ref,\r\n          debugLocation.debugInfoRef,\r\n          debugLocation.source.debugInfoIndex,\r\n          debugLocation.line,\r\n          debugLocation.column\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Returns the TypeScript representation of this function. */\r\n  toString(): string { return this.prototype.simpleName; }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_TARGET;\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(program: Program, signature: Signature) {\r\n    super(program, \"\", \"\");\r\n    var simpleName = signature.toSignatureString();\r\n    this.simpleName = simpleName;\r\n    this.internalName = simpleName;\r\n    this.signature = signature;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends Element {\r\n\r\n  kind = ElementKind.FIELD_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FieldDeclaration;\r\n  /** Parent class prototype. */\r\n  classPrototype: ClassPrototype;\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    classPrototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FieldDeclaration\r\n  ) {\r\n    super(classPrototype.program, simpleName, internalName);\r\n    this.classPrototype = classPrototype;\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  kind = ElementKind.FIELD;\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    prototype: FieldPrototype,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: FieldDeclaration,\r\n    parent: Class\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.type = type;\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class Property extends Element {\r\n\r\n  kind = ElementKind.PROPERTY;\r\n\r\n  /** Parent class prototype. */\r\n  parent: ClassPrototype;\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    parent: ClassPrototype\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends Element {\r\n\r\n  kind = ElementKind.CLASS_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: ClassDeclaration;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Class> = new Map();\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: ClassDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends Element {\r\n\r\n  kind = ElementKind.CLASS;\r\n\r\n  /** Prototype reference. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Resolved class type. */\r\n  type: Type;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n  /** Function index of the GC hook. */\r\n  gcHookIndex: u32 = <u32>-1;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    prototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] | null = null,\r\n    base: Class | null = null\r\n  ) {\r\n    super(prototype.program, simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.type = prototype.program.options.usizeType.asClass(this);\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          this.contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply instance-specific contextual type arguments\r\n    var declaration = this.prototype.declaration;\r\n    var i: i32, k: i32;\r\n    if (declaration) { // irrelevant for built-ins\r\n      let typeParameters = declaration.typeParameters;\r\n      if (typeArguments) {\r\n        if ((k = typeArguments.length) != typeParameters.length) {\r\n          throw new Error(\"type argument count mismatch\");\r\n        }\r\n        if (k) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (i = 0; i < k; ++i) {\r\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n          }\r\n        }\r\n      } else if (typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\r\n    if (unchecked) {\r\n      switch (kind) {\r\n        case OperatorKind.INDEXED_GET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        case OperatorKind.INDEXED_SET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  offsetof(fieldName: string): u32 {\r\n    var members = assert(this.members);\r\n    assert(members.has(fieldName));\r\n    var field = <Element>members.get(fieldName);\r\n    assert(field.kind == ElementKind.FIELD);\r\n    return (<Field>field).memoryOffset;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype {\r\n\r\n  kind = ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: InterfaceDeclaration; // more specific\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, declaration, decoratorFlags);\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class {\r\n\r\n  kind = ElementKind.INTERFACE;\r\n\r\n  /** Prototype reference. */\r\n  prototype: InterfacePrototype; // more specific\r\n  /** Base interface, if applcable. */\r\n  base: Interface | null; // more specific\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    prototype: InterfacePrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(prototype, simpleName, internalName, typeArguments, base);\r\n  }\r\n}\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  // categorical\r\n\r\n  /** This branch always returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This branch always returns a wrapped value. */\r\n  RETURNS_WRAPPED = 1 << 1,\r\n  /** This branch always throws. */\r\n  THROWS = 1 << 2,\r\n  /** This branch always breaks. */\r\n  BREAKS = 1 << 3,\r\n  /** This branch always continues. */\r\n  CONTINUES = 1 << 4,\r\n  /** This branch always allocates. Constructors only. */\r\n  ALLOCATES = 1 << 5,\r\n\r\n  // conditional\r\n\r\n  /** This branch conditionally returns in a child branch. */\r\n  CONDITIONALLY_RETURNS = 1 << 6,\r\n  /** This branch conditionally throws in a child branch. */\r\n  CONDITIONALLY_THROWS = 1 << 7,\r\n  /** This branch conditionally breaks in a child branch. */\r\n  CONDITIONALLY_BREAKS = 1 << 8,\r\n  /** This branch conditionally continues in a child branch. */\r\n  CONDITIONALLY_CONTINUES = 1 << 9,\r\n  /** This branch conditionally allocates in a child branch. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 10,\r\n\r\n  // special\r\n\r\n  /** This branch is part of inlining a function. */\r\n  INLINE_CONTEXT = 1 << 11,\r\n  /** This branch explicitly requests no bounds checking. */\r\n  UNCHECKED_CONTEXT = 1 << 12,\r\n\r\n  // masks\r\n\r\n  /** Any terminating flag. */\r\n  ANY_TERMINATING = FlowFlags.RETURNS\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = FlowFlags.RETURNS\r\n                  | FlowFlags.RETURNS_WRAPPED\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES\r\n                  | FlowFlags.ALLOCATES,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\r\n                  | FlowFlags.CONDITIONALLY_THROWS\r\n                  | FlowFlags.CONDITIONALLY_BREAKS\r\n                  | FlowFlags.CONDITIONALLY_CONTINUES\r\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  currentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  returnLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Local variable wrap states for the first 64 locals. */\r\n  wrappedLocals: I64;\r\n  /** Local variable wrap states for locals with index >= 64. */\r\n  wrappedLocalsExt: I64[] | null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(currentFunction: Function): Flow {\r\n    var parentFlow = new Flow();\r\n    parentFlow.parent = null;\r\n    parentFlow.flags = FlowFlags.NONE;\r\n    parentFlow.currentFunction = currentFunction;\r\n    parentFlow.continueLabel = null;\r\n    parentFlow.breakLabel = null;\r\n    parentFlow.returnLabel = null;\r\n    parentFlow.returnType = currentFunction.signature.returnType;\r\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\r\n    parentFlow.wrappedLocals = i64_new(0);\r\n    parentFlow.wrappedLocalsExt = null;\r\n    return parentFlow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this flow has one of the specified flags. */\r\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Forks this flow to a child flow. */\r\n  fork(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.currentFunction = this.currentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnLabel = this.returnLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    branch.wrappedLocals = this.wrappedLocals;\r\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\r\n    return branch;\r\n  }\r\n\r\n  /** Frees this flow's scoped variables. */\r\n  free(): Flow {\r\n    var parent = assert(this.parent);\r\n    if (this.scopedLocals) { // free block-scoped locals\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          this.currentFunction.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n    return parent;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\r\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (declaration) {\r\n          this.currentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range\r\n          );\r\n        } else assert(false);\r\n        return existingLocal;\r\n      }\r\n    }\r\n    scopedLocal.set(CommonFlags.SCOPED);\r\n    this.scopedLocals.set(name, scopedLocal);\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.setLocalWrapped(scopedLocal.index, wrapped);\r\n    }\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Adds a new scoped alias for the specified local. */\r\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        let declaration = existingLocal.declaration;\r\n        if (declaration) {\r\n          this.currentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range\r\n          );\r\n        } else assert(false);\r\n        return existingLocal;\r\n      }\r\n    }\r\n    assert(index < this.currentFunction.localsByIndex.length);\r\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\r\n      this.currentFunction.program,\r\n      name,\r\n      index,\r\n      type,\r\n      null\r\n    );\r\n    this.scopedLocals.set(name, scopedAlias);\r\n    return scopedAlias;\r\n  }\r\n\r\n  /** Gets the local of the specified name in the current scope. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var local: Local | null;\r\n    var current: Flow | null = this;\r\n    do {\r\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\r\n        return local;\r\n      }\r\n    } while (current = current.parent);\r\n    return this.currentFunction.localsByName.get(name);\r\n  }\r\n\r\n  /** Tests if the local with the specified index is considered wrapped. */\r\n  isLocalWrapped(index: i32): bool {\r\n    var map: I64;\r\n    var ext: I64[] | null;\r\n    if (index < 64) {\r\n      if (index < 0) return true; // inlined constant\r\n      map = this.wrappedLocals;\r\n    } else if (ext = this.wrappedLocalsExt) {\r\n      let i = ((index - 64) / 64) | 0;\r\n      if (i >= ext.length) return false;\r\n      map = ext[i];\r\n      index -= (i + 1) * 64;\r\n    } else {\r\n      return false;\r\n    }\r\n    return i64_ne(\r\n      i64_and(\r\n        map,\r\n        i64_shl(\r\n          i64_one,\r\n          i64_new(index)\r\n        )\r\n      ),\r\n      i64_zero\r\n    );\r\n  }\r\n\r\n  /** Sets if the local with the specified index is considered wrapped. */\r\n  setLocalWrapped(index: i32, wrapped: bool): void {\r\n    var map: I64;\r\n    var off: i32 = -1;\r\n    if (index < 64) {\r\n      if (index < 0) return; // inlined constant\r\n      map = this.wrappedLocals;\r\n    } else {\r\n      let ext = this.wrappedLocalsExt;\r\n      off = ((index - 64) / 64) | 0;\r\n      if (!ext) {\r\n        this.wrappedLocalsExt = ext = new Array(off + 1);\r\n        ext.length = 0;\r\n      }\r\n      while (ext.length <= off) ext.push(i64_new(0));\r\n      map = ext[off];\r\n      index -= (off + 1) * 64;\r\n    }\r\n    map = wrapped\r\n      ? i64_or(\r\n          map,\r\n          i64_shl(\r\n            i64_one,\r\n            i64_new(index)\r\n          )\r\n        )\r\n      : i64_and(\r\n          map,\r\n          i64_not(\r\n            i64_shl(\r\n              i64_one,\r\n              i64_new(index)\r\n            )\r\n          )\r\n        );\r\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\r\n    else this.wrappedLocals = map;\r\n  }\r\n\r\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\r\n  inherit(other: Flow): void {\r\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\r\n    this.wrappedLocals = other.wrappedLocals;\r\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\r\n  }\r\n\r\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\r\n  inheritConditional(other: Flow): void {\r\n    if (other.is(FlowFlags.RETURNS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (other.is(FlowFlags.THROWS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (other.is(FlowFlags.ALLOCATES)) {\r\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n  }\r\n\r\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\r\n  inheritMutual(left: Flow, right: Flow): void {\r\n    // categorical flags set in both arms\r\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\r\n\r\n    // conditional flags set in at least one arm\r\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\r\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\r\n\r\n    // locals wrapped in both arms\r\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\r\n    var leftExt = left.wrappedLocalsExt;\r\n    var rightExt = right.wrappedLocalsExt;\r\n    if (leftExt != null && rightExt != null) {\r\n      let thisExt = this.wrappedLocalsExt;\r\n      let minLength = min(leftExt.length, rightExt.length);\r\n      if (minLength) {\r\n        if (!thisExt) thisExt = new Array(minLength);\r\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\r\n        for (let i = 0; i < minLength; ++i) {\r\n          thisExt[i] = i64_and(\r\n            leftExt[i],\r\n            rightExt[i]\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\r\n   * expression might already have overflown and returns `false` only if the operation neglects\r\n   * any possible combination of garbage bits being present.\r\n   */\r\n  canOverflow(expr: ExpressionRef, type: Type): bool {\r\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\r\n    // opportunities here, obviously.\r\n    assert(type != Type.void);\r\n\r\n    // types other than i8, u8, i16, u16 and bool do not overflow\r\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\r\n\r\n    var operand: ExpressionRef;\r\n    switch (getExpressionId(expr)) {\r\n\r\n      // overflows if the local isn't wrapped or the conversion does\r\n      case ExpressionId.GetLocal: {\r\n        let currentFunction = this.currentFunction;\r\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\r\n        return !currentFunction.flow.isLocalWrapped(local.index)\r\n            || canConversionOverflow(local.type, type);\r\n      }\r\n\r\n      // overflows if the value does\r\n      case ExpressionId.SetLocal: { // tee\r\n        assert(isTeeLocal(expr));\r\n        return this.canOverflow(getSetLocalValue(expr), type);\r\n      }\r\n\r\n      // overflows if the conversion does (globals are wrapped on set)\r\n      case ExpressionId.GetGlobal: {\r\n        // TODO: this is inefficient because it has to read a string\r\n        let global = assert(this.currentFunction.program.elementsLookup.get(assert(getGetGlobalName(expr))));\r\n        assert(global.kind == ElementKind.GLOBAL);\r\n        return canConversionOverflow(assert((<Global>global).type), type);\r\n      }\r\n\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64:\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64:\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtU32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtU64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64:\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeU32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeU64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64:\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtU32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtU64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64:\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeU32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeU64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: return false;\r\n\r\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\r\n          case BinaryOp.MulI32: {\r\n            return !(\r\n              (\r\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryRight(expr), type)\r\n                  )\r\n                )\r\n              ) || (\r\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryLeft(expr), type)\r\n                  )\r\n                )\r\n              )\r\n            );\r\n          }\r\n\r\n          // result won't overflow if one side is a constant less than this type's mask or one side\r\n          // is wrapped\r\n          case BinaryOp.AndI32: {\r\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\r\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\r\n            return !(\r\n              (\r\n                (\r\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              ) || (\r\n                (\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              )\r\n            );\r\n          }\r\n\r\n          // overflows if the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShlI32: {\r\n            let shift = 32 - type.size;\r\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\r\n                || getConstValueI32(operand) < shift;\r\n          }\r\n\r\n          // overflows if the value does and the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShrI32: {\r\n            let shift = 32 - type.size;\r\n            return this.canOverflow(getBinaryLeft(expr), type) && (\r\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\r\n              getConstValueI32(operand) < shift\r\n            );\r\n          }\r\n\r\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\r\n          // wrapped, it can't overflow.\r\n          case BinaryOp.ShrU32: {\r\n            let shift = 32 - type.size;\r\n            return type.is(TypeFlags.SIGNED)\r\n              ? !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) > shift // must clear MSB\r\n                )\r\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) >= shift // can leave MSB\r\n                );\r\n          }\r\n\r\n          // overflows if any side does\r\n          case BinaryOp.DivU32:\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemU32: {\r\n            return this.canOverflow(getBinaryLeft(expr), type)\r\n                || this.canOverflow(getBinaryRight(expr), type);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: return false;\r\n\r\n          // overflow if the maximum result (32) cannot be represented in the target type\r\n          case UnaryOp.ClzI32:\r\n          case UnaryOp.CtzI32:\r\n          case UnaryOp.PopcntI32: return type.size < 7;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the value cannot be represented in the target type\r\n      case ExpressionId.Const: {\r\n        let value: i32 = 0;\r\n        switch (getExpressionType(expr)) {\r\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\r\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\r\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\r\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\r\n          default: assert(false);\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\r\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\r\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\r\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\r\n          case TypeKind.BOOL: return (value & ~1) != 0;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the conversion does\r\n      case ExpressionId.Load: {\r\n        let fromType: Type;\r\n        switch (getLoadBytes(expr)) {\r\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\r\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\r\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\r\n        }\r\n        return canConversionOverflow(fromType, type);\r\n      }\r\n\r\n      // overflows if the result does, which is either\r\n      // - the last expression of the block, by contract, if the block doesn't have a label\r\n      // - the last expression or the value of an inner br if the block has a label (TODO)\r\n      case ExpressionId.Block: {\r\n        if (!getBlockName(expr)) {\r\n          let size = assert(getBlockChildCount(expr));\r\n          let last = getBlockChild(expr, size - 1);\r\n          return this.canOverflow(last, type);\r\n        }\r\n        // actually, brs with a value that'd be handled here is not emitted atm\r\n        break;\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.If: {\r\n        return this.canOverflow(getIfTrue(expr), type)\r\n            || this.canOverflow(assert(getIfFalse(expr)), type);\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.Select: {\r\n        return this.canOverflow(getSelectThen(expr), type)\r\n            || this.canOverflow(getSelectElse(expr), type);\r\n      }\r\n\r\n      // overflows if the call does not return a wrapped value or the conversion does\r\n      case ExpressionId.Call: {\r\n        let program = this.currentFunction.program;\r\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\r\n        assert(instance.kind == ElementKind.FUNCTION);\r\n        let returnType = (<Function>instance).signature.returnType;\r\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\r\n            || canConversionOverflow(returnType, type);\r\n      }\r\n\r\n      // doesn't technically overflow\r\n      case ExpressionId.Unreachable: return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\r\n  finalize(): void {\r\n    assert(this.parent == null); // must be the topmost parent flow\r\n    this.continueLabel = null;\r\n    this.breakLabel = null;\r\n    this.returnLabel = null;\r\n    this.contextualTypeArguments = null;\r\n  }\r\n}\r\n\r\n/** Tests if a conversion from one type to another can technically overflow. */\r\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\r\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\r\n      || fromType.size > toType.size\r\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type RelooperRef = usize;\r\nexport type RelooperBlockRef = usize;\r\nexport type Index = u32;\r\n\r\nexport const enum NativeType {\r\n  None = 0,        // _BinaryenTypeNone(),\r\n  I32  = 1,        // _BinaryenTypeInt32(),\r\n  I64  = 2,        // _BinaryenTypeInt64(),\r\n  F32  = 3,        // _BinaryenTypeFloat32(),\r\n  F64  = 4,        // _BinaryenTypeFloat64(),\r\n  Unreachable = 5, // _BinaryenTypeUnreachable(),\r\n  Auto = -1        // _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/sign-extension-ops\r\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\r\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\r\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\r\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\r\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64()\r\n}\r\n\r\nexport enum HostOp {\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n\r\n  // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  // MoveMemory\r\n  // SetMemory\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n\r\n  private cachedByValue: usize;\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.cachedByValue = memory.allocate(16);\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.cachedByValue = memory.allocate(3 * 8); // LLVM C-ABI, max used is 3 * usize\r\n      return module;\r\n    } finally {\r\n      memory.free(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunctionType(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunctionType(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenGetGlobal(this.ref, cStr, type);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(\r\n    ptr: ExpressionRef,\r\n    wakeCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenSetGlobal(this.ref, cStr, value);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    var cArr = allocPtrArray(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenBreak(this.ref, cStr, condition, value);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenLoop(this.ref, cStr, body);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = allocString(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = allocString(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      memory.free(cStr);\r\n      memory.free(cArr);\r\n      for (let i = numNames - 1; i >= 0; --i) memory.free(strs[i]);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cArr = allocPtrArray(operands);\r\n    var cStr = allocString(typeName);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  removeGlobal(\r\n    name: string\r\n  ): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveGlobal(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunction(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  private cachedTemporaryName: usize = 0;\r\n  private hasTemporaryFunction: bool = false;\r\n\r\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\r\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\r\n    var tempName = this.cachedTemporaryName;\r\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\r\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeTemporaryFunction(): void {\r\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\r\n    var tempName = assert(this.cachedTemporaryName);\r\n    _BinaryenRemoveFunction(this.ref, tempName);\r\n    _BinaryenRemoveFunctionType(this.ref, tempName);\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = allocString(externalName);\r\n    try {\r\n      _BinaryenRemoveExport(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n    } finally {\r\n      memory.free(cStr3);\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      memory.free(cStr3);\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      memory.free(cStr3);\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n    } finally {\r\n      memory.free(cStr3);\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  /** Unlimited memory constant. */\r\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null\r\n  ): void {\r\n    var cStr = allocString(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\r\n    } finally {\r\n      memory.free(cArr3);\r\n      memory.free(cArr2);\r\n      memory.free(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(\r\n    initial: Index,\r\n    maximum: Index,\r\n    funcs: string[]\r\n  ): void {\r\n    var numNames = funcs.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(funcs[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\r\n    } finally {\r\n      memory.free(cArr);\r\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  getOptimizeLevel(): i32 {\r\n    return _BinaryenGetOptimizeLevel();\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  getShrinkLevel(): i32 {\r\n    return _BinaryenGetShrinkLevel();\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      memory.free(cArr);\r\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\r\n    }\r\n  }\r\n\r\n  private cachedPrecomputeName: usize = 0; // for free'ing\r\n  private cachedPrecomputeNames: usize = 0;\r\n\r\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\r\n    // remember the previous optimize levels and set to max instead, to be sure\r\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\r\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\r\n    var previousDebugInfo = _BinaryenGetDebugInfo();\r\n    _BinaryenSetOptimizeLevel(4);\r\n    _BinaryenSetShrinkLevel(0);\r\n    _BinaryenSetDebugInfo(false);\r\n\r\n    // wrap the expression in a temp. function and run the precompute pass on it\r\n    var type = _BinaryenExpressionGetType(expr);\r\n    var func = this.addTemporaryFunction(type, null, expr);\r\n    var names = this.cachedPrecomputeNames;\r\n    if (!names) {\r\n      let name = allocString(\"precompute\");\r\n      this.cachedPrecomputeName = name;\r\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\r\n    }\r\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\r\n    expr = _BinaryenFunctionGetBody(func);\r\n    this.removeTemporaryFunction();\r\n\r\n    // reset optimize levels to previous\r\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\r\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\r\n    _BinaryenSetDebugInfo(previousDebugInfo);\r\n    return expr;\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.cachedByValue;\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) memory.free(cStr);\r\n      if (binaryPtr) memory.free(binaryPtr);\r\n      if (sourceMapPtr) memory.free(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  dispose(): void {\r\n    assert(this.ref);\r\n    memory.free(this.cachedByValue);\r\n    memory.free(this.cachedTemporaryName);\r\n    memory.free(this.cachedPrecomputeName);\r\n    memory.free(this.cachedPrecomputeNames);\r\n    _BinaryenModuleDispose(this.ref);\r\n    this.ref = 0;\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(\r\n    expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n        switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        return _BinaryenGetLocal(this.ref,\r\n          _BinaryenGetLocalGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GetGlobal: {\r\n        let globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return (\r\n          _BinaryenLoadIsAtomic(expr)\r\n            ? _BinaryenAtomicLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n            : _BinaryenLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenLoadGetAlign(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n        );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\n// expressions\r\n\r\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\r\n  return _BinaryenExpressionGetId(expr);\r\n}\r\n\r\nexport function getExpressionType(expr: ExpressionRef): NativeType {\r\n  return _BinaryenExpressionGetType(expr);\r\n}\r\n\r\nexport function getConstValueI32(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI32(expr);\r\n}\r\n\r\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64Low(expr);\r\n}\r\n\r\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64High(expr);\r\n}\r\n\r\nexport function getConstValueF32(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF32(expr);\r\n}\r\n\r\nexport function getConstValueF64(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF64(expr);\r\n}\r\n\r\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenGetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenSetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSetLocalGetValue(expr);\r\n}\r\n\r\nexport function isTeeLocal(expr: ExpressionRef): bool {\r\n  return _BinaryenSetLocalIsTee(expr);\r\n}\r\n\r\nexport function getGetGlobalName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenGetGlobalGetName(expr));\r\n}\r\n\r\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\r\n  return _BinaryenBinaryGetOp(expr);\r\n}\r\n\r\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetLeft(expr);\r\n}\r\n\r\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetRight(expr);\r\n}\r\n\r\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\r\n  return _BinaryenUnaryGetOp(expr);\r\n}\r\n\r\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenUnaryGetValue(expr);\r\n}\r\n\r\nexport function getLoadBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetBytes(expr);\r\n}\r\n\r\nexport function getLoadOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetOffset(expr);\r\n}\r\n\r\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoadGetPtr(expr);\r\n}\r\n\r\nexport function isLoadSigned(expr: ExpressionRef): bool {\r\n  return _BinaryenLoadIsSigned(expr);\r\n}\r\n\r\nexport function getStoreBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetBytes(expr);\r\n}\r\n\r\nexport function getStoreOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetOffset(expr);\r\n}\r\n\r\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetPtr(expr);\r\n}\r\n\r\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetValue(expr);\r\n}\r\n\r\nexport function getBlockName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBlockGetName(expr));\r\n}\r\n\r\nexport function getBlockChildCount(expr: ExpressionRef): Index {\r\n  return _BinaryenBlockGetNumChildren(expr);\r\n}\r\n\r\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenBlockGetChild(expr, index);\r\n}\r\n\r\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetCondition(expr);\r\n}\r\n\r\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfTrue(expr);\r\n}\r\n\r\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfFalse(expr);\r\n}\r\n\r\nexport function getLoopName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenLoopGetName(expr));\r\n}\r\n\r\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoopGetBody(expr);\r\n}\r\n\r\nexport function getBreakName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBreakGetName(expr));\r\n}\r\n\r\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBreakGetCondition(expr);\r\n}\r\n\r\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfTrue(expr);\r\n}\r\n\r\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfFalse(expr);\r\n}\r\n\r\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetCondition(expr);\r\n}\r\n\r\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenDropGetValue(expr);\r\n}\r\n\r\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenReturnGetValue(expr);\r\n}\r\n\r\nexport function getCallTarget(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenCallGetTarget(expr));\r\n}\r\n\r\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenHostGetOp(expr);\r\n}\r\n\r\nexport function getHostOperandCount(expr: ExpressionRef): Index {\r\n  return _BinaryenHostGetNumOperands(expr);\r\n}\r\n\r\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenHostGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenHostGetNameOperand(expr));\r\n}\r\n\r\n// functions\r\n\r\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\r\n  return _BinaryenFunctionGetBody(func);\r\n}\r\n\r\nexport function getFunctionName(func: FunctionRef): string | null {\r\n  return readString(_BinaryenFunctionGetName(func));\r\n}\r\n\r\nexport function getFunctionParamCount(func: FunctionRef): Index {\r\n  return _BinaryenFunctionGetNumParams(func);\r\n}\r\n\r\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\r\n  return _BinaryenFunctionGetParam(func, index);\r\n}\r\n\r\nexport function getFunctionResultType(func: FunctionRef): NativeType {\r\n  return _BinaryenFunctionGetResult(func);\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate(module.ref);\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    condition: ExpressionRef = 0,\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    indexes: i32[],\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\r\n//     case ExpressionId.GetLocal:\r\n//     case ExpressionId.GetGlobal:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop:\r\n//     case ExpressionId.Unreachable: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = memory.allocate(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = memory.allocate(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocPtrArray(ptrs: usize[] | null): usize {\r\n  return allocI32Array(ptrs); // TODO: WASM64 one day\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n\r\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\r\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\r\n  // not applicable if pushing a value to the stack\r\n  switch (_BinaryenExpressionGetType(expr)) {\r\n    case NativeType.I32:\r\n    case NativeType.I64:\r\n    case NativeType.F32:\r\n    case NativeType.F64: return false;\r\n  }\r\n  switch (_BinaryenExpressionGetId(expr)) {\r\n    case ExpressionId.Unreachable:\r\n    case ExpressionId.Return: return false;\r\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\r\n    case ExpressionId.Block: {\r\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\r\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\r\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget,\r\n  Program,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9\r\n}\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Returns the closest int type representing this type. */\r\n  get intType(): Type {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return Type.i8;\r\n      case TypeKind.I16: return Type.i16;\r\n      case TypeKind.F32:\r\n      case TypeKind.I32: return Type.i32;\r\n      case TypeKind.F64:\r\n      case TypeKind.I64: return Type.i64;\r\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\r\n      case TypeKind.U8: return Type.u8;\r\n      case TypeKind.U16: return Type.u16;\r\n      case TypeKind.U32: return Type.u32;\r\n      case TypeKind.U64: return Type.u64;\r\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\r\n      case TypeKind.BOOL:\r\n      default: return Type.i32;\r\n    }\r\n  }\r\n\r\n  /** Tests if this is a managed type that needs GC hooks. */\r\n  isManaged(program: Program): bool {\r\n    if (program.hasGC) {\r\n      let classReference = this.classReference;\r\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\r\n    return ~0 >>> (targetType.size - size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.nonNullableType = this;\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to a target of the specified type. */\r\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\r\n          if (currentClass = this.classReference) {\r\n            if (targetClass = target.classReference) {\r\n              return currentClass.isAssignableTo(targetClass);\r\n            }\r\n          } else if (currentFunction = this.signatureReference) {\r\n            if (targetFunction = target.signatureReference) {\r\n              return currentFunction.isAssignableTo(targetFunction);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (\r\n            !signednessIsRelevant ||\r\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\r\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n          ) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Determines the common compatible type of two types, if any. */\r\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to its TypeScript representation. */\r\n  toString(kindOnly: bool = false): string {\r\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\r\n      let classReference = this.classReference;\r\n      if (classReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? classReference.toString() + \" | null\"\r\n          : classReference.toString();\r\n      }\r\n      let signatureReference = this.signatureReference;\r\n      if (signatureReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\r\n          : signatureReference.toString(true);\r\n      }\r\n      assert(false);\r\n    }\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: return \"usize\";\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      default: assert(false);\r\n      case TypeKind.VOID: return \"void\";\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      default: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"I\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"F\";\r\n      case TypeKind.VOID: return \"v\";\r\n    }\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getDefaultParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    sb.push(returnType.toSignatureString());\r\n    return sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(includeThis: bool = false): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      if (includeThis) {\r\n        sb.push(\"this: \");\r\n        sb.push(thisType.toString());\r\n        index = 1;\r\n      }\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getDefaultParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached default parameter names used where names are unknown.\r\nvar cachedDefaultParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached default parameter name for the specified index. */\r\nexport function getDefaultParameterName(index: i32): string {\r\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\r\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\r\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedDefaultParameterNames[index - 1];\r\n}\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport enum IdentifierHandling {\r\n  DEFAULT,\r\n  PREFER,\r\n  ALWAYS\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  assert(text.length);\r\n  switch (text.charCodeAt(0)) {\r\n    case CharCode.a: {\r\n      switch (text) {\r\n        case \"abstract\": return Token.ABSTRACT;\r\n        case \"as\": return Token.AS;\r\n        case \"async\": return Token.ASYNC;\r\n        case \"await\": return Token.AWAIT;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.b: {\r\n      switch (text) {\r\n        case \"break\": return Token.BREAK;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.c: {\r\n      switch (text) {\r\n        case \"case\": return Token.CASE;\r\n        case \"catch\": return Token.CATCH;\r\n        case \"class\": return Token.CLASS;\r\n        case \"continue\": return Token.CONTINUE;\r\n        case \"const\": return Token.CONST;\r\n        case \"constructor\": return Token.CONSTRUCTOR;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.d: {\r\n      switch (text) {\r\n        case \"debugger\": return Token.DEBUGGER;\r\n        case \"declare\": return Token.DECLARE;\r\n        case \"default\": return Token.DEFAULT;\r\n        case \"delete\": return Token.DELETE;\r\n        case \"do\": return Token.DO;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.e: {\r\n      switch (text) {\r\n        case \"else\": return Token.ELSE;\r\n        case \"enum\": return Token.ENUM;\r\n        case \"export\": return Token.EXPORT;\r\n        case \"extends\": return Token.EXTENDS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.f: {\r\n      switch (text) {\r\n        case \"false\": return Token.FALSE;\r\n        case \"finally\": return Token.FINALLY;\r\n        case \"for\": return Token.FOR;\r\n        case \"from\": return Token.FROM;\r\n        case \"function\": return Token.FUNCTION;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.g: {\r\n      switch (text) {\r\n        case \"get\": return Token.GET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.i: {\r\n      switch (text) {\r\n        case \"if\": return Token.IF;\r\n        case \"implements\": return Token.IMPLEMENTS;\r\n        case \"import\": return Token.IMPORT;\r\n        case \"in\": return Token.IN;\r\n        case \"instanceof\": return Token.INSTANCEOF;\r\n        case \"interface\": return Token.INTERFACE;\r\n        case \"is\": return Token.IS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.k: {\r\n      switch (text) {\r\n        case \"keyof\": return Token.KEYOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.l: {\r\n      switch (text) {\r\n        case \"let\": return Token.LET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.m: {\r\n      switch (text) {\r\n        case \"module\": return Token.MODULE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.n: {\r\n      switch (text) {\r\n        case \"namespace\": return Token.NAMESPACE;\r\n        case \"new\": return Token.NEW;\r\n        case \"null\": return Token.NULL;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.o: {\r\n      switch (text) {\r\n        case \"of\": return Token.OF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.p: {\r\n      switch (text) {\r\n        case \"package\": return Token.PACKAGE;\r\n        case \"private\": return Token.PRIVATE;\r\n        case \"protected\": return Token.PROTECTED;\r\n        case \"public\": return Token.PUBLIC;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.r: {\r\n      switch (text) {\r\n        case \"readonly\": return Token.READONLY;\r\n        case \"return\": return Token.RETURN;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.s: {\r\n      switch (text) {\r\n        case \"set\": return Token.SET;\r\n        case \"static\": return Token.STATIC;\r\n        case \"super\": return Token.SUPER;\r\n        case \"switch\": return Token.SWITCH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.t: {\r\n      switch (text) {\r\n        case \"this\": return Token.THIS;\r\n        case \"throw\": return Token.THROW;\r\n        case \"true\": return Token.TRUE;\r\n        case \"try\": return Token.TRY;\r\n        case \"type\": return Token.TYPE;\r\n        case \"typeof\": return Token.TYPEOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.v: {\r\n      switch (text) {\r\n        case \"var\": return Token.VAR;\r\n        case \"void\": return Token.VOID;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.w: {\r\n      switch (text) {\r\n        case \"while\": return Token.WHILE;\r\n        case \"with\": return Token.WITH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.y: {\r\n      switch (text) {\r\n        case \"yield\": return Token.YIELD;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return Token.INVALID;\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.FOR:\r\n    case Token.GET:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE:\r\n    case Token.VOID: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(identifierHandling);\r\n  }\r\n\r\n  private unsafeNext(\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxTokenLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (!(\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          )) break;\r\n          // otherwise fall-through\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < this.end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken != Token.INVALID &&\r\n                identifierHandling !== IdentifierHandling.ALWAYS &&\r\n                !(\r\n                  identifierHandling === IdentifierHandling.PREFER &&\r\n                  tokenIsAlsoIdentifier(keywordToken)\r\n                )\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\r\n          if (isLineBreak(text.charCodeAt(pos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\r\n    return this.skip(Token.IDENTIFIER, identifierHandling);\r\n  }\r\n\r\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.SLASH && !escaped) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.X:\r\n        case CharCode.x:\r\n        case CharCode.B:\r\n        case CharCode.b:\r\n        case CharCode.O:\r\n        case CharCode.o: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\r\n        return false;\r\n      }\r\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\r\n      // does not validate separator placement (this is done in readXYInteger)\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.X:\r\n        case CharCode.x: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.B:\r\n        case CharCode.b: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.O:\r\n        case CharCode.o: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_16 = i64_new(16, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 16 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = value * 16 + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.A, 0)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = value * 16 + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.a, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_10 = i64_new(10, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_8 = i64_new(8, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = value * 8 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_8),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_2 = i64_new(2, 0);\r\n    var i64_1 = i64_new(1, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode._0) {\r\n        // value = value * 2;\r\n        value = i64_mul(\r\n          value,\r\n          i64_2\r\n        );\r\n      } else if (c == CharCode._1) {\r\n        // value = value * 2 + 1;\r\n        value = i64_add(\r\n          i64_mul(value, i64_2),\r\n          i64_1\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    // TODO: numeric separators (parseFloat can't handle these)\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.E || c == CharCode.e) {\r\n        if (\r\n          ++this.pos < this.end && (\r\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\r\n            text.charCodeAt(this.pos) == CharCode.PLUS\r\n          ) &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = value * 16 + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = value * 16 + 10 + c - CharCode.A;\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = value * 16 + 10 + c - CharCode.a;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\r\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  compileCall as compileBuiltinCall,\r\n  compileAllocate,\r\n  compileAbort,\r\n  compileIterateRoots,\r\n  ensureGCHook\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getGetLocalIndex,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  needsExplicitUnreachable\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  INNER_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  Namespace,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  FlowFlags,\r\n  ConstantValueKind,\r\n  Flow,\r\n  OperatorKind,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  Resolver, ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Source,\r\n  Range,\r\n  DecoratorKind,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FunctionDeclaration,\r\n  ForStatement,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InstanceOfExpression,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableDeclaration,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ObjectLiteralExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n  FieldDeclaration,\r\n\r\n  nodeIsConstantValue,\r\n  isLastStatement,\r\n  findDecorator\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64\r\n} from \"./util\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, compiles everything instead of just reachable code. */\r\n  noTreeShaking: bool = false;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: i32 = 0;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n  /** Additional features to activate. */\r\n  features: Feature = Feature.NONE;\r\n\r\n  /** Hinted optimize level. Not applied by the compiler itself. */\r\n  optimizeLevelHint: i32 = 0;\r\n  /** Hinted shrink level. Not applied by the compiler itself. */\r\n  shrinkLevelHint: i32 = 0;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n\r\n  /** Tests if a specific feature is activated. */\r\n  hasFeature(feature: Feature): bool {\r\n    return (this.features & feature) != 0;\r\n  }\r\n}\r\n\r\n/** Indicates specific features to activate. */\r\nexport const enum Feature {\r\n  /** No additional features. */\r\n  NONE = 0,\r\n  /** Sign extension operations. */\r\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\r\n  /** Mutable global imports and exports. */\r\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Indicates the desired wrap mode of a conversion. */\r\nexport const enum WrapMode {\r\n  /** No wrapping. */\r\n  NONE,\r\n  /** Wrap small integer values. */\r\n  WRAP\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Resolver reference. */\r\n  resolver: Resolver;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current function in compilation. */\r\n  currentFunction: Function;\r\n  /** Current outer function in compilation, if compiling a function expression. */\r\n  currentOuterFunction: Function | null = null;\r\n  /** Current inline functions stack. */\r\n  currentInlineFunctions: Function[] = [];\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function being compiled. */\r\n  startFunctionInstance: Function;\r\n  /** Start function statements. */\r\n  startFunctionBody: ExpressionRef[];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = [];\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: string[] = [ \"null\" ];\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n  /** Indicates whether the iterateRoots function must be generated. */\r\n  needsIterateRoots: bool = false;\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    this.resolver = program.resolver;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\r\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\r\n      max(options.memoryBase, 8)\r\n    );\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the start function\r\n    var startFunctionInstance = new Function(program.startFunction, \"start\", new Signature([], Type.void));\r\n    this.startFunctionInstance = startFunctionInstance;\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.startFunctionBody = startFunctionBody;\r\n    this.currentFunction = startFunctionInstance;\r\n\r\n    // add a mutable heap base dummy\r\n    if (options.isWasm64) {\r\n      module.addGlobal(\r\n        \"HEAP_BASE\",\r\n        NativeType.I64,\r\n        true,\r\n        module.createI64(0, 0)\r\n      );\r\n    } else {\r\n      module.addGlobal(\r\n        \"HEAP_BASE\",\r\n        NativeType.I32,\r\n        false,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].isEntry) this.compileSource(sources[i]);\r\n    }\r\n\r\n    // compile the start function if not empty or called by main\r\n    if (startFunctionBody.length || program.mainFunction !== null) {\r\n      let signature = startFunctionInstance.signature;\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.createBlock(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      if (!program.mainFunction) module.setStart(funcRef);\r\n    }\r\n\r\n    // update the heap base pointer\r\n    var memoryOffset = this.memoryOffset;\r\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n    this.memoryOffset = memoryOffset;\r\n    module.removeGlobal(\"HEAP_BASE\");\r\n    if (options.isWasm64) {\r\n      module.addGlobal(\r\n        \"HEAP_BASE\",\r\n        NativeType.I64,\r\n        false,\r\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n      );\r\n    } else {\r\n      module.addGlobal(\r\n        \"HEAP_BASE\",\r\n        NativeType.I32,\r\n        false,\r\n        module.createI32(i64_low(memoryOffset))\r\n      );\r\n    }\r\n\r\n    // determine initial page size\r\n    var numPages = this.memorySegments.length\r\n      ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\r\n      : 0;\r\n    module.setMemory(\r\n      numPages,\r\n      Module.UNLIMITED_MEMORY,\r\n      this.memorySegments,\r\n      options.target,\r\n      \"memory\"\r\n    );\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\r\n    module.addTableExport(\"0\", \"table\");\r\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.createBlock(null, []));\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\r\n\r\n    // set up module exports\r\n    for (let [name, moduleExport] of program.moduleLevelExports) {\r\n      this.makeModuleExport(name, moduleExport.element);\r\n    }\r\n\r\n    // set up gc\r\n    if (this.needsIterateRoots) compileIterateRoots(this);\r\n\r\n    return module;\r\n  }\r\n\r\n  /** Applies the respective module export(s) for the specified element. */\r\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\r\n\r\n    // traverse members\r\n    var members = element.members;\r\n    if (members) {\r\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\r\n        ? INSTANCE_DELIMITER\r\n        : STATIC_DELIMITER\r\n      );\r\n      if (element.kind == ElementKind.NAMESPACE) {\r\n        for (let member of members.values()) {\r\n          if (!member.is(CommonFlags.EXPORT)) continue;\r\n          this.makeModuleExport(member.simpleName, member, subPrefix);\r\n        }\r\n      } else {\r\n        for (let member of members.values()) {\r\n          if (member.is(CommonFlags.PRIVATE)) continue;\r\n          this.makeModuleExport(member.simpleName, member, subPrefix);\r\n        }\r\n      }\r\n    }\r\n\r\n    switch (element.kind) {\r\n\r\n      // export global\r\n      case ElementKind.GLOBAL: {\r\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          let declaration = (<Global>element).declaration;\r\n          if (declaration) {\r\n            this.error(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              declaration.name.range\r\n            );\r\n          }\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.ENUMVALUE: {\r\n        if (!assert(element.parent).is(CommonFlags.CONST) && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          let declaration = (<EnumValue>element).declaration;\r\n          if (declaration) {\r\n            this.error(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              declaration.name.range\r\n            );\r\n          }\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // export function\r\n      case ElementKind.FUNCTION: {\r\n        let instance = <Function>element;\r\n        let signature = instance.signature;\r\n        if (signature.requiredParameters < signature.parameterTypes.length) {\r\n          // utilize trampoline to fill in omitted arguments\r\n          instance = this.ensureTrampoline(instance);\r\n          this.ensureArgcSet();\r\n        }\r\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\r\n        break;\r\n      }\r\n\r\n      // export getter and setter\r\n      case ElementKind.PROPERTY: {\r\n        let getter = assert((<Property>element).getterPrototype);\r\n        this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        let setter = (<Property>element).setterPrototype;\r\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n\r\n      // export a getter and a setter\r\n      case ElementKind.FIELD: {\r\n        let module = this.module;\r\n        let type = (<Field>element).type;\r\n        let nativeType = type.toNativeType();\r\n        let offset = (<Field>element).memoryOffset;\r\n        let usizeType = this.options.usizeType;\r\n        let nativeSizeType = this.options.nativeSizeType;\r\n\r\n        // make a getter\r\n        let getterName = prefix + GETTER_PREFIX + name;\r\n        module.addFunction(\r\n          getterName,\r\n          this.ensureFunctionType(null, type, usizeType),\r\n          null,\r\n          module.createLoad(\r\n            type.byteSize,\r\n            type.is(TypeFlags.SIGNED),\r\n            module.createGetLocal(0, nativeSizeType),\r\n            nativeType,\r\n            offset\r\n          )\r\n        );\r\n        module.addFunctionExport(getterName, getterName);\r\n\r\n        // make a setter\r\n        if (!element.is(CommonFlags.READONLY)) {\r\n          let setterName = prefix + SETTER_PREFIX + name;\r\n          module.addFunction(\r\n            setterName,\r\n            this.ensureFunctionType([ type ], Type.void, usizeType),\r\n            null,\r\n            module.createStore(\r\n              type.byteSize,\r\n              module.createGetLocal(0, nativeSizeType),\r\n              module.createGetLocal(1, nativeType),\r\n              nativeType,\r\n              offset\r\n            )\r\n          );\r\n          module.addFunctionExport(setterName, setterName);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // skip prototype and export instances\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        for (let instances of (<FunctionPrototype>element).instances.values()) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.makeModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        for (let instance of (<ClassPrototype>element).instances.values()) {\r\n          let instanceName = name;\r\n          if (instance.is(CommonFlags.GENERIC)) {\r\n            let fullName = instance.internalName;\r\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n          }\r\n          let ctor = instance.constructorInstance;\r\n          if (ctor) this.makeModuleExport(instanceName + INSTANCE_DELIMITER + ctor.simpleName, ctor, prefix);\r\n          this.makeModuleExport(instanceName, instance, prefix);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // all possible members already handled above\r\n      case ElementKind.ENUM:\r\n      case ElementKind.CLASS:\r\n      case ElementKind.NAMESPACE: break;\r\n\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  // sources\r\n\r\n  /** Compiles a source by looking it up by path first. */\r\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\r\n    if (source) this.compileSource(source);\r\n    else {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Compiles a source. */\r\n  compileSource(source: Source): void {\r\n    if (source.is(CommonFlags.COMPILED)) return;\r\n    source.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    var isEntry = source.isEntry;\r\n    var startFunctionInstance = this.startFunctionInstance;\r\n    var startFunctionBody = this.startFunctionBody;\r\n    var statements = source.statements;\r\n    for (let i = 0, k = statements.length; i < k; ++i) {\r\n      let statement = statements[i];\r\n      switch (statement.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<ClassDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>statement, [], null);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: break;\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<FunctionDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.IMPORT: {\r\n          this.compileSourceByPath(\r\n            (<ImportStatement>statement).normalizedPath,\r\n            (<ImportStatement>statement).path\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\r\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\r\n          if (variableInit) startFunctionBody.push(variableInit);\r\n          break;\r\n        }\r\n        case NodeKind.EXPORT: {\r\n          if ((<ExportStatement>statement).normalizedPath != null) {\r\n            this.compileSourceByPath(\r\n              <string>(<ExportStatement>statement).normalizedPath,\r\n              <StringLiteralExpression>(<ExportStatement>statement).path\r\n            );\r\n          }\r\n          if (noTreeShaking || isEntry) {\r\n            this.compileExportStatement(<ExportStatement>statement);\r\n          }\r\n          break;\r\n        }\r\n        default: { // otherwise a top-level statement that is part of the start function's body\r\n          let previousFunction = this.currentFunction;\r\n          this.currentFunction = startFunctionInstance;\r\n          startFunctionBody.push(this.compileStatement(statement));\r\n          this.currentFunction = previousFunction;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\r\n    // look up the initialized program element\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.GLOBAL);\r\n    if (!this.compileGlobal(<Global>element)) return null; // reports\r\n    return <Global>element;\r\n  }\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var declaration = global.declaration;\r\n    var initExpr: ExpressionRef = 0;\r\n\r\n    if (!global.is(CommonFlags.RESOLVED)) {\r\n      if (declaration) {\r\n\r\n        // resolve now if annotated\r\n        if (declaration.type) {\r\n          let resolvedType = this.resolver.resolveType(declaration.type); // reports\r\n          if (!resolvedType) return false;\r\n          if (resolvedType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              declaration.type.range\r\n            );\r\n            return false;\r\n          }\r\n          global.type = resolvedType;\r\n          global.set(CommonFlags.RESOLVED);\r\n\r\n        // infer from initializer if not annotated\r\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\r\n          initExpr = this.compileExpressionRetainType( // reports\r\n            declaration.initializer,\r\n            Type.void,\r\n            WrapMode.WRAP\r\n          );\r\n          if (this.currentType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\r\n            );\r\n            return false;\r\n          }\r\n          global.type = this.currentType;\r\n          global.set(CommonFlags.RESOLVED);\r\n\r\n        // must either be annotated or have an initializer\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            declaration.name.range.atEnd\r\n          );\r\n          return false;\r\n        }\r\n      } else {\r\n        assert(false); // must have a declaration if resolved lazily\r\n      }\r\n    }\r\n\r\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\r\n\r\n    var nativeType = global.type.toNativeType();\r\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // constant global\r\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        if (declaration) {\r\n          mangleImportName(global, declaration);\r\n        } else {\r\n          mangleImportName_moduleName = \"env\";\r\n          mangleImportName_elementName = global.simpleName;\r\n        }\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          mangleImportName_moduleName,\r\n          mangleImportName_elementName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          assert(declaration).range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and constant\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // evaluate initializer if present\r\n    if (declaration !== null && declaration.initializer !== null) {\r\n      if (!initExpr) {\r\n        initExpr = this.compileExpression(\r\n          declaration.initializer,\r\n          global.type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.WRAP\r\n        );\r\n      }\r\n\r\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n        if (isDeclaredConstant) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n            initializeInStart = true;\r\n          }\r\n        } else {\r\n          initializeInStart = true;\r\n        }\r\n      }\r\n\r\n      // explicitly inline if annotated\r\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\r\n        if (!initializeInStart) { // reported above\r\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\r\n          let exprType = getExpressionType(initExpr);\r\n          switch (exprType) {\r\n            case NativeType.I32: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(\r\n                getConstValueI64Low(initExpr),\r\n                getConstValueI64High(initExpr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF32(initExpr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF64(initExpr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false);\r\n              return false;\r\n            }\r\n          }\r\n          global.set(CommonFlags.INLINED); // inline the value from now on\r\n        }\r\n      }\r\n\r\n    // initialize to zero if there's no initializer\r\n    } else {\r\n      initExpr = global.type.toNativeZero(module);\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\r\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\r\n\r\n    } else { // compile normally\r\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.ENUM);\r\n    if (!this.compileEnum(<Enum>element)) return null;\r\n    return <Enum>element;\r\n  }\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n    var previousValueIsMut = false;\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueDeclaration = val.declaration;\r\n        val.set(CommonFlags.COMPILED);\r\n        let initExpr: ExpressionRef;\r\n        if (valueDeclaration.value) {\r\n          initExpr = this.compileExpression(\r\n            <Expression>valueDeclaration.value,\r\n            Type.i32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              initExpr = module.precomputeExpression(initExpr);\r\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n                this.error(\r\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                  valueDeclaration.value.range\r\n                );\r\n                initInStart = true;\r\n              }\r\n            } else {\r\n              initInStart = true;\r\n            }\r\n          }\r\n        } else if (previousValue == null) {\r\n          initExpr = module.createI32(0);\r\n        } else {\r\n          if (previousValueIsMut) {\r\n            this.error(\r\n              DiagnosticCode.Enum_member_must_have_initializer,\r\n              valueDeclaration.range\r\n            );\r\n          }\r\n          initExpr = module.createBinary(BinaryOp.AddI32,\r\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n            module.createI32(1)\r\n          );\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.error(\r\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                valueDeclaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n        }\r\n        if (initInStart) {\r\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\r\n          this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\r\n          previousValueIsMut = true;\r\n        } else {\r\n          module.addGlobal(val.internalName, NativeType.I32, !element.is(CommonFlags.CONST), initExpr);\r\n          previousValueIsMut = false;\r\n        }\r\n        previousValue = <EnumValue>val;\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  /** Compiles a top-level function given its declaration. */\r\n  compileFunctionDeclaration(\r\n    declaration: FunctionDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    return this.compileFunctionUsingTypeArguments( // reports\r\n      <FunctionPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      null, // no outer scope (is top level)\r\n      (<FunctionPrototype>element).declaration.name\r\n    );\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    outerScope: Flow | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      reportNode\r\n    );\r\n    if (!instance) return null;\r\n    instance.outerScope = outerScope;\r\n    if (!this.compileFunction(instance)) return null; // reports\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    // check that modifiers are matching\r\n    var declaration = instance.prototype.declaration;\r\n    var body = declaration.body;\r\n    if (body) {\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    }\r\n\r\n    var ref: FunctionRef;\r\n    var signature = instance.signature;\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n    if (body) {\r\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\r\n      let returnType = instance.signature.returnType;\r\n\r\n      // compile body\r\n      let previousFunction = this.currentFunction;\r\n      this.currentFunction = instance;\r\n      let flow = instance.flow;\r\n      let stmt: ExpressionRef;\r\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\r\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\r\n        assert(instance.is(CommonFlags.ARROW));\r\n        stmt = this.compileExpression(\r\n          (<ExpressionStatement>body).expression,\r\n          returnType,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        flow.set(FlowFlags.RETURNS);\r\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n        flow.finalize();\r\n      } else {\r\n        assert(body.kind == NodeKind.BLOCK);\r\n        let stmts = this.compileStatements((<BlockStatement>body).statements);\r\n        if (instance.is(CommonFlags.MAIN)) {\r\n          module.addGlobal(\"~started\", NativeType.I32, true, module.createI32(0));\r\n          stmts.unshift(\r\n            module.createIf(\r\n              module.createUnary(\r\n                UnaryOp.EqzI32,\r\n                module.createGetGlobal(\"~started\", NativeType.I32)\r\n              ),\r\n              module.createBlock(null, [\r\n                module.createCall(\"start\", null, NativeType.None),\r\n                module.createSetGlobal(\"~started\", module.createI32(1))\r\n              ])\r\n            )\r\n          );\r\n        }\r\n        flow.finalize();\r\n        if (isConstructor) {\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          assert(instance.is(CommonFlags.INSTANCE));\r\n\r\n          // implicitly return `this` if the constructor doesn't always return on its own\r\n          if (!flow.is(FlowFlags.RETURNS)) {\r\n\r\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\r\n            if (flow.is(FlowFlags.ALLOCATES)) {\r\n              stmts.push(module.createGetLocal(0, nativeSizeType));\r\n\r\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\r\n            } else {\r\n              let parent = assert(instance.parent);\r\n              assert(parent.kind == ElementKind.CLASS);\r\n              stmts.push(module.createTeeLocal(0,\r\n                this.makeConditionalAllocate(<Class>parent, declaration.name)\r\n              ));\r\n            }\r\n          }\r\n\r\n        // make sure all branches return\r\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n          this.error(\r\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n            declaration.signature.returnType.range\r\n          );\r\n        }\r\n        stmt = !stmts.length\r\n          ? module.createNop()\r\n          : stmts.length == 1\r\n            ? stmts[0]\r\n            : module.createBlock(null, stmts, returnType.toNativeType());\r\n      }\r\n      this.currentFunction = previousFunction;\r\n\r\n      // create the function\r\n      ref = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        stmt\r\n      );\r\n\r\n      // concrete functions cannot have an annotated external name\r\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\r\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          decorator.range\r\n        );\r\n      }\r\n\r\n    } else {\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n      mangleImportName(instance, declaration); // TODO: check for duplicates\r\n\r\n      // create the function import\r\n      ref = module.addFunctionImport(\r\n        instance.internalName,\r\n        mangleImportName_moduleName,\r\n        mangleImportName_elementName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    instance.finalize(module, ref);\r\n    return true;\r\n  }\r\n\r\n  // namespaces\r\n\r\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\r\n    var members = declaration.members;\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<ClassDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<InterfaceDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<FunctionDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\r\n            if (variableInit) this.startFunctionBody.push(variableInit);\r\n          }\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  compileNamespace(ns: Namespace): void {\r\n    if (!ns.members) return;\r\n\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let element of ns.members.values()) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking ||\r\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            if (element.hasDecorator(DecoratorFlags.BUILTIN)) break;\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // exports\r\n\r\n  compileExportStatement(statement: ExportStatement): void {\r\n    var fileLevelExports = this.program.fileLevelExports;\r\n    var members = statement.members;\r\n    if (!members) return; // filespace\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      let element = fileLevelExports.get(\r\n        statement.range.source.internalPath + PATH_DELIMITER + member.externalName.text\r\n      );\r\n      if (!element) continue; // reported in Program#initialize\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\r\n            statement.range.source.isEntry\r\n          ) {\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassDeclaration(\r\n    declaration: ClassDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): void {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n    this.compileClassUsingTypeArguments(\r\n      <ClassPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      declaration\r\n    );\r\n  }\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = this.resolver.resolveClassInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    var staticMembers = instance.prototype.members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [], null, null,\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [], null, null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [], null, null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                instance.contextualTypeArguments,\r\n                null, // no outer scope\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD: {\r\n            element.set(CommonFlags.COMPILED);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [], instance.contextualTypeArguments, null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [], instance.contextualTypeArguments, null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // function table\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func.internalName);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileStatement(statement: Statement): ExpressionRef {\r\n    var module = this.module;\r\n    var stmt: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        stmt = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        stmt = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        stmt = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        stmt = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!stmt) stmt = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // type declarations must be top-level because function bodies are evaluated when\r\n        // reachaable only.\r\n        if (this.currentFunction == this.startFunctionInstance) {\r\n          return module.createNop();\r\n        }\r\n        // otherwise fall-through\r\n      }\r\n      default: {\r\n        assert(false);\r\n        stmt = module.createUnreachable();\r\n      }\r\n    }\r\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\r\n    return stmt;\r\n  }\r\n\r\n  compileStatements(statements: Statement[]): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    var stmts = new Array<ExpressionRef>(numStatements);\r\n    stmts.length = 0;\r\n    var flow = this.currentFunction.flow;\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      let stmt = this.compileStatement(statements[i]);\r\n      switch (getExpressionId(stmt)) {\r\n        case ExpressionId.Block: {\r\n          if (!getBlockName(stmt)) {\r\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: stmts.push(stmt);\r\n        case ExpressionId.Nop:\r\n      }\r\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\r\n        break;\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n    var parentFlow = this.currentFunction.flow;\r\n    var flow = parentFlow.fork();\r\n    this.currentFunction.flow = flow;\r\n\r\n    var stmts = this.compileStatements(statements);\r\n    var stmt = stmts.length == 0\r\n      ? this.module.createNop()\r\n      : stmts.length == 1\r\n        ? stmts[0]\r\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\r\n\r\n    this.currentFunction.flow = flow.free();\r\n    parentFlow.inherit(flow);\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFunction.flow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.BREAKS);\r\n    return module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFunction.flow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES);\r\n    return module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n    var currentFunction = this.currentFunction;\r\n    var module = this.module;\r\n\r\n    var label = currentFunction.enterBreakContext();\r\n    var parentFlow = currentFunction.flow;\r\n    var flow = parentFlow.fork();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n    // TODO: check if condition is always false and if so, omit it (just a block)\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.free();\r\n    currentFunction.leaveBreakContext();\r\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\r\n    flow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    parentFlow.inherit(flow);\r\n\r\n    var block: ExpressionRef[] = [\r\n      module.createLoop(continueLabel,\r\n        terminated\r\n          ? body // skip trailing continue if unnecessary\r\n          : module.createBlock(null, [\r\n              body,\r\n              module.createBreak(continueLabel, condExpr)\r\n            ], NativeType.None)\r\n      )\r\n    ];\r\n    if (terminated) block.push(module.createUnreachable());\r\n    return module.createBlock(breakLabel, block);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var parentFlow = currentFunction.flow;\r\n    var flow = parentFlow.fork();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = flow.breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n    var repeatLabel = \"repeat|\" + label;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initExpr = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : 0;\r\n    var condExpr: ExpressionRef = 0;\r\n    var alwaysTrue = false;\r\n    if (statement.condition) {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n      // check if the condition is always true\r\n      let condPre = module.precomputeExpression(condExpr);\r\n      if (getExpressionId(condPre) == ExpressionId.Const) {\r\n        assert(getExpressionType(condPre) == NativeType.I32);\r\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\r\n        // TODO: could skip compilation if the condition is always false here, but beware that the\r\n        // initializer could still declare new 'var's that are used later on.\r\n      }\r\n      // recompile to original\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    } else {\r\n      // omitted condition is always true\r\n      condExpr = module.createI32(1);\r\n      alwaysTrue = true;\r\n    }\r\n    var incrExpr = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n      : 0;\r\n    var bodyStatement = statement.statement;\r\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\r\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\r\n      : this.compileStatement(bodyStatement);\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.free();\r\n    currentFunction.leaveBreakContext();\r\n    var usesContinue = flow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\r\n    flow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) parentFlow.inherit(flow);\r\n    else parentFlow.inheritConditional(flow);\r\n\r\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\r\n    if (initExpr) breakBlock.push(initExpr);\r\n\r\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\r\n    if (usesContinue) {\r\n      repeatBlock.push(\r\n        module.createBlock(continueLabel, [ // inner 'continue' block\r\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\r\n          bodyExpr\r\n        ], NativeType.None)\r\n      );\r\n    } else { // can omit the 'continue' block\r\n      repeatBlock.push(\r\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\r\n      );\r\n      repeatBlock.push(bodyExpr);\r\n    }\r\n    if (incrExpr) repeatBlock.push(incrExpr);\r\n    repeatBlock.push(\r\n      module.createBreak(repeatLabel)\r\n    );\r\n\r\n    breakBlock.push(\r\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\r\n    );\r\n\r\n    return module.createBlock(breakLabel, breakBlock);\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary branches if the condition is constant\r\n      let condExprPrecomp = module.precomputeExpression(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        return getConstValueI32(condExprPrecomp)\r\n          ? this.compileStatement(ifTrue)\r\n          : ifFalse\r\n            ? this.compileStatement(ifFalse)\r\n            : module.createNop();\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var parentFlow = currentFunction.flow;\r\n    var ifTrueFlow = parentFlow.fork();\r\n    currentFunction.flow = ifTrueFlow;\r\n    var ifTrueExpr = this.compileStatement(ifTrue);\r\n    currentFunction.flow = ifTrueFlow.free();\r\n\r\n    var ifFalseExpr: ExpressionRef = 0;\r\n    if (ifFalse) {\r\n      let ifFalseFlow = parentFlow.fork();\r\n      currentFunction.flow = ifFalseFlow;\r\n      ifFalseExpr = this.compileStatement(ifFalse);\r\n      currentFunction.flow = ifFalseFlow.free();\r\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\r\n    } else {\r\n      parentFlow.inheritConditional(ifTrueFlow);\r\n    }\r\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var expr: ExpressionRef = 0;\r\n    var flow = currentFunction.flow;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    if (statement.value) {\r\n      let returnType = flow.returnType;\r\n      if (returnType == Type.void) {\r\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          statement.value.range, this.currentType.toString(), returnType.toString()\r\n        );\r\n        this.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      expr = this.compileExpression(\r\n        statement.value,\r\n        returnType,\r\n        ConversionKind.IMPLICIT,\r\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\r\n          ? WrapMode.WRAP\r\n          : WrapMode.NONE\r\n      );\r\n\r\n      // Remember whether returning a properly wrapped value\r\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n    }\r\n\r\n    // If the last statement anyway, make it the block's return value\r\n    if (isLastStatement(statement)) return expr ? expr : module.createNop();\r\n\r\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\r\n    return flow.is(FlowFlags.INLINE_CONTEXT)\r\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\r\n      : module.createReturn(expr);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n    if (!numCases) {\r\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    }\r\n\r\n    // Everything within a switch uses the same break context\r\n    var context = currentFunction.enterBreakContext();\r\n    var parentFlow = currentFunction.flow;\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\r\n    var tempLocalIndex = tempLocal.index;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    var alwaysReturnsWrapped = true;\r\n    var alwaysThrows = true;\r\n    var alwaysAllocates = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n\r\n      // Each switch case initiates a new branch\r\n      let flow = parentFlow.fork();\r\n      currentFunction.flow = flow;\r\n      let breakLabel = \"break|\" + context;\r\n      flow.breakLabel = breakLabel;\r\n\r\n      let isLast = i == numCases - 1;\r\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\r\n      stmts[0] = currentBlock;\r\n      let count = 1;\r\n      let terminated = false;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        let stmt = this.compileStatement(statements[j]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          stmts[count++] = stmt;\r\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n            terminated = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      stmts.length = count;\r\n      if (terminated || isLast) {\r\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\r\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\r\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\r\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      flow.unset(\r\n        FlowFlags.BREAKS |\r\n        FlowFlags.CONDITIONALLY_BREAKS\r\n      );\r\n      currentFunction.flow = flow.free();\r\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\r\n    }\r\n    currentFunction.leaveBreakContext();\r\n\r\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\r\n    if (defaultIndex >= 0) {\r\n      if (alwaysReturns) parentFlow.set(FlowFlags.RETURNS);\r\n      if (alwaysReturnsWrapped) parentFlow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (alwaysThrows) parentFlow.set(FlowFlags.THROWS);\r\n      if (alwaysAllocates) parentFlow.set(FlowFlags.ALLOCATES);\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n    var flow = this.currentFunction.flow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return compileAbort(this, null, statement);\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    // TODO\r\n    // can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /**\r\n   * Compiles a variable statement. Returns `0` if an initializer is not\r\n   * necessary.\r\n   */\r\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n\r\n    // top-level variables and constants become globals\r\n    if (isKnownGlobal || (\r\n      currentFunction == this.startFunctionInstance &&\r\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\r\n    )) {\r\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\r\n      // though such variables could also become start function locals if, and only if, not used\r\n      // within any function declared in the same source, which is unknown at this point. the only\r\n      // efficient way to deal with this would be to keep track of all occasions it is used and\r\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\r\n      for (let i = 0; i < numDeclarations; ++i) {\r\n        this.compileGlobalDeclaration(declarations[i]);\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    // other variables become locals\r\n    var initializers = new Array<ExpressionRef>();\r\n    var flow = this.currentFunction.flow;\r\n    var resolver = this.resolver;\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let initExpr: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = resolver.resolveType( // reports\r\n          declaration.type,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          initExpr = this.compileExpression( // reports\r\n            declaration.initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        initExpr = this.compileExpressionRetainType( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          WrapMode.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      let isInlined = false;\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (initExpr) {\r\n          initExpr = this.module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\r\n            let local = new Local(program, name, -1, type);\r\n            switch (getExpressionType(initExpr)) {\r\n              case NativeType.I32: {\r\n                local = local.withConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI32(initExpr),\r\n                    0\r\n                  )\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local = local.withConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI64Low(initExpr),\r\n                    getConstValueI64High(initExpr)\r\n                  )\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                return this.module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = currentFunction.flow.scopedLocals;\r\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isInlined = true;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (!isInlined) {\r\n        let local: Local;\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\r\n        } else {\r\n          local = currentFunction.addLocal(type, name, declaration); // reports\r\n        }\r\n        if (initExpr) {\r\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\r\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\r\n          }\r\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped(local.index, true); // zero\r\n        }\r\n      }\r\n    }\r\n    return initializers.length   // we can unwrap these here because the\r\n      ? initializers.length == 1 // source didn't tell us exactly what to do\r\n        ? initializers[0]\r\n        : this.module.createBlock(null, initializers, NativeType.None)\r\n      : 0;\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary loops if the condition is constant\r\n      let condExprPrecomp = module.precomputeExpression(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var parentFlow = currentFunction.flow;\r\n    var flow = parentFlow.fork();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysTrue = false; // TODO\r\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.free();\r\n    currentFunction.leaveBreakContext();\r\n    flow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) parentFlow.inherit(flow);\r\n    else parentFlow.inheritConditional(flow);\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condExpr,\r\n          terminated\r\n            ? body // skip trailing continue if unnecessary\r\n            : module.createBlock(null, [\r\n                body,\r\n                module.createBreak(continueLabel)\r\n              ], NativeType.None)\r\n        )\r\n      )\r\n    ]);\r\n  }\r\n\r\n  // expressions\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    retainType: bool\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !retainType &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        // monkey-patch for converting built-in floats to f32 implicitly\r\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(\r\n          <IdentifierExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    var currentType = this.currentType;\r\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\r\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\r\n      this.currentType = contextualType;\r\n    } else if (wrapMode == WrapMode.WRAP) {\r\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\r\n    }\r\n\r\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n    return expr;\r\n  }\r\n\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.compileExpression(\r\n      expression,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      wrapMode\r\n    );\r\n  }\r\n\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.module.precomputeExpression(\r\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\r\n    );\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    fromType: Type,\r\n    toType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    assert(conversionKind != ConversionKind.NONE);\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\r\n\r\n    if (!fromType.isAssignableTo(toType)) {\r\n      if (conversionKind == ConversionKind.IMPLICIT) {\r\n        this.error(\r\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n          reportNode.range, fromType.toString(), toType.toString()\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType == Type.bool) {\r\n            expr = module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n            wrapMode = WrapMode.NONE;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType == Type.bool) {\r\n            expr = module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n            wrapMode = WrapMode.NONE;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      // i64 to ...\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32 or smaller\r\n        if (toType == Type.bool) {\r\n          expr = module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n          wrapMode = WrapMode.NONE;\r\n        } else if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n        }\r\n\r\n      // i32 or smaller to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(\r\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\r\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\r\n        );\r\n        wrapMode = WrapMode.NONE;\r\n\r\n      // i32 to i32\r\n      } else {\r\n        // small i32 to ...\r\n        if (fromType.is(TypeFlags.SHORT)) {\r\n          // small i32 to larger i32\r\n          if (fromType.size < toType.size) {\r\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\r\n            wrapMode = WrapMode.NONE;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return wrapMode == WrapMode.WRAP\r\n      ? this.ensureSmallIntegerWrap(expr, toType)\r\n      : expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    var toType = this.resolver.resolveType( // reports\r\n      expression.toType,\r\n      this.currentFunction.flow.contextualTypeArguments\r\n    );\r\n    if (!toType) return this.module.createUnreachable();\r\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '==' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '!=' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // addition might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // subtraction might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POW);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType.kind == TypeKind.F32) {\r\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            this.currentType,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE,\r\n            left\r\n          );\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Math\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.createUnreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\r\n          case TypeKind.I16: // ^\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.REM);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Math\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n          }\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n          this.makeIsTrueish(leftExpr, this.currentType);\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            rightExpr,\r\n            expr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFunction.flow;\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            rightExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            )\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\r\n          expr = this.module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            expr,\r\n            rightExpr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFunction.flow;\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            ),\r\n            rightExpr\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    valueExpr: ExpressionRef,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\r\n      argumentExpressions = [];\r\n    } else {\r\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\r\n    }\r\n    return this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg,\r\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n    );\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    leftExpr: ExpressionRef,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let parent = assert(operatorInstance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\r\n      argumentExpressions = [ right ];\r\n    } else {\r\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\r\n    }\r\n    var ret = this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg,\r\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n    );\r\n    return ret;\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var resolver = program.resolver;\r\n    var currentFunction = this.currentFunction;\r\n    var target = resolver.resolveExpression(expression, currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var targetType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        targetType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>target).setterPrototype;\r\n        if (setterPrototype) {\r\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\r\n          if (!instance) return this.module.createUnreachable();\r\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n          targetType = instance.signature.parameterTypes[0];\r\n          break;\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n          expression.range, (<Property>target).internalName\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (resolver.currentElementExpression) { // indexed access\r\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return this.module.createUnreachable();\r\n          }\r\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\r\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    assert(targetType != Type.void);\r\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    return this.compileAssignmentWithValue(\r\n      expression,\r\n      valueExpr,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileAssignmentWithValue(\r\n    expression: Expression,\r\n    valueWithCorrectType: ExpressionRef,\r\n    tee: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var target = this.resolver.resolveExpression(expression, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let type = (<Local>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let flow = this.currentFunction.flow;\r\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\r\n        }\r\n        return tee\r\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\r\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range,\r\n            target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\r\n        if (tee) {\r\n          let nativeType = type.toNativeType();\r\n          let internalName = target.internalName;\r\n          return module.createBlock(null, [ // emulated teeGlobal\r\n            module.createSetGlobal(internalName, valueWithCorrectType),\r\n            module.createGetGlobal(internalName, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        const declaration = (<Field>target).declaration;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            declaration == null ||\r\n            declaration.initializer != null\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Field>target).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let thisExpression = assert(this.resolver.currentThisExpression);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        let type = (<Field>target).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        let nativeType = type.toNativeType();\r\n        if (type.kind == TypeKind.BOOL) {\r\n          // make sure bools are wrapped (usually are) when storing as 8 bits\r\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\r\n        }\r\n        if (tee) {\r\n          let currentFunction = this.currentFunction;\r\n          let flow = currentFunction.flow;\r\n          let tempLocal = currentFunction.getAndFreeTempLocal(\r\n            type,\r\n            !flow.canOverflow(valueWithCorrectType, type)\r\n          );\r\n          let tempLocalIndex = tempLocal.index;\r\n          // TODO: simplify if valueWithCorrectType has no side effects\r\n          // TODO: call __gc_link here if a GC is present\r\n          return module.createBlock(null, [\r\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\r\n            module.createStore(\r\n              type.byteSize,\r\n              thisExpr,\r\n              module.createGetLocal(tempLocalIndex, nativeType),\r\n              nativeType,\r\n              (<Field>target).memoryOffset\r\n            ),\r\n            module.createGetLocal(tempLocalIndex, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          // TODO: call __gc_link here if a GC is present\r\n          return module.createStore(\r\n            type.byteSize,\r\n            thisExpr,\r\n            valueWithCorrectType,\r\n            nativeType,\r\n            (<Field>target).memoryOffset\r\n          );\r\n        }\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>target).setterPrototype;\r\n        if (setterPrototype) {\r\n          let setterInstance = this.resolver.resolveFunction(setterPrototype, null);\r\n          if (!setterInstance) return module.createUnreachable();\r\n\r\n          // call just the setter if the return value isn't of interest\r\n          if (!tee) {\r\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n              let thisExpression = assert(this.resolver.currentThisExpression);\r\n              let thisExpr = this.compileExpressionRetainType(\r\n                thisExpression,\r\n                this.options.usizeType,\r\n                WrapMode.NONE\r\n              );\r\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\r\n            }\r\n          }\r\n\r\n          // otherwise call the setter first, then the getter\r\n          let getterPrototype = (<Property>target).getterPrototype;\r\n          assert(getterPrototype != null); // must have one if there is a setter\r\n          let getterInstance = this.resolver.resolveFunction(<FunctionPrototype>getterPrototype, null);\r\n          if (!getterInstance) return module.createUnreachable();\r\n          let returnType = getterInstance.signature.returnType;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n            let thisExpression = assert(this.resolver.currentThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType,\r\n              WrapMode.NONE\r\n            );\r\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\r\n            let tempLocalIndex = tempLocal.index;\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ // set and remember the target\r\n                module.createTeeLocal(tempLocalIndex, thisExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(getterInstance, [ // get from remembered target\r\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n              ])\r\n            ], nativeReturnType);\r\n          } else {\r\n            // note that this must be performed here because `resolved` is shared\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\r\n              this.makeCallDirect(getterInstance)\r\n            ], nativeReturnType);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.resolver.currentElementExpression;\r\n        if (elementExpression) {\r\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              expression.range, target.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, target.internalName\r\n            );\r\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n            return module.createUnreachable();\r\n          }\r\n          let targetType = (<Class>target).type;\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          let elementExpr = this.compileExpression(\r\n            elementExpression,\r\n            Type.i32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          if (tee) {\r\n            let currentFunction = this.currentFunction;\r\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\r\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\r\n            let returnType = indexedGet.signature.returnType;\r\n            this.currentFunction.freeTempLocal(tempLocalTarget);\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(indexedSet, [\r\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\r\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(indexedGet, [\r\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n              ])\r\n            ], returnType.toNativeType());\r\n          } else {\r\n            return this.makeCallDirect(indexedSet, [\r\n              thisExpr,\r\n              elementExpr,\r\n              valueWithCorrectType\r\n            ]);\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var target = this.resolver.resolveExpression(expression.expression, currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          instance = this.resolver.resolveFunctionInclTypeArguments(\r\n            prototype,\r\n            typeArguments,\r\n            this.currentFunction.flow.contextualTypeArguments,\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let inferredTypes = new Map<string,Type | null>();\r\n          let typeParameters = assert(prototype.declaration.typeParameters);\r\n          let numTypeParameters = typeParameters.length;\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            inferredTypes.set(typeParameters[i].name.text, null);\r\n          }\r\n          // let numInferred = 0;\r\n          let parameterTypes = prototype.declaration.signature.parameters;\r\n          let numParameterTypes = parameterTypes.length;\r\n          let argumentExpressions = expression.arguments;\r\n          let numArguments = argumentExpressions.length;\r\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\r\n          for (let i = 0; i < numParameterTypes; ++i) {\r\n            let typeNode = parameterTypes[i].type;\r\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\r\n            let argumentExpression = i < numArguments\r\n              ? argumentExpressions[i]\r\n              : prototype.declaration.signature.parameters[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            if (name !== null && inferredTypes.has(name)) {\r\n              let inferredType = inferredTypes.get(name);\r\n              if (inferredType) {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\r\n                let commonType: Type | null;\r\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\r\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\r\n                    this.error(\r\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\r\n                    );\r\n                    return module.createUnreachable();\r\n                  }\r\n                }\r\n                inferredType = commonType;\r\n              } else {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\r\n                inferredType = this.currentType;\r\n                // ++numInferred;\r\n              }\r\n              inferredTypes.set(name, inferredType);\r\n            } else {\r\n              let concreteType = this.resolver.resolveType(\r\n                parameterTypes[i].type,\r\n                this.currentFunction.flow.contextualTypeArguments\r\n              );\r\n              if (!concreteType) return module.createUnreachable();\r\n              argumentExprs[i] = this.compileExpression(\r\n                argumentExpression,\r\n                concreteType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              );\r\n            }\r\n          }\r\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\r\n            resolvedTypeArguments[i] = inferredType;\r\n          }\r\n          instance = this.resolver.resolveFunction(\r\n            prototype,\r\n            resolvedTypeArguments,\r\n            this.currentFunction.flow.contextualTypeArguments\r\n          );\r\n          if (!instance) return this.module.createUnreachable();\r\n          return this.makeCallDirect(instance, argumentExprs);\r\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\r\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\r\n          // so inlining can be performed in `makeCallDirect` instead?\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = this.resolver.resolveFunction(\r\n            prototype,\r\n            null,\r\n            this.currentFunction.flow.contextualTypeArguments\r\n          );\r\n        }\r\n        if (!instance) return this.module.createUnreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr,\r\n          instance.hasDecorator(DecoratorFlags.INLINE)\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          if ((<Local>target).is(CommonFlags.INLINED)) {\r\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\r\n          } else {\r\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\r\n          }\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(\r\n          expression.expression,\r\n          (<FunctionTarget>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        break;\r\n      }\r\n\r\n      case ElementKind.PROPERTY: {\r\n        indexArg = this.compileGetter(<Property>target, expression.expression);\r\n        let type = this.currentType;\r\n        signature = type.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        break;\r\n      }\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var typeArguments: Type[] | null = null;\r\n\r\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\r\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\r\n    var typeArgumentNodes = expression.typeArguments;\r\n    if (expression.typeArguments) {\r\n      if (!prototype.is(CommonFlags.GENERIC)) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          expression.range, prototype.internalName\r\n        );\r\n      }\r\n      typeArguments = this.resolver.resolveTypeArguments(\r\n        assert(prototype.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        this.currentFunction.flow.contextualTypeArguments,\r\n        expression\r\n      );\r\n    }\r\n\r\n    // now compile the builtin, which usually returns a block of code that replaces the call.\r\n    var expr = compileBuiltinCall(\r\n      this,\r\n      prototype,\r\n      typeArguments,\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    inline: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    // Inline if explicitly requested\r\n    if (inline) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      if (this.currentInlineFunctions.includes(instance)) {\r\n        this.warning(\r\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\r\n          reportNode.range, instance.internalName\r\n        );\r\n      } else {\r\n        this.currentInlineFunctions.push(instance);\r\n        let expr = this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\r\n        this.currentInlineFunctions.pop();\r\n        return expr;\r\n      }\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallDirect(instance, operands);\r\n  }\r\n\r\n  // Depends on being pre-checked in compileCallDirect\r\n  private compileCallInlineUnchecked(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    var currentFunction = this.currentFunction;\r\n    var module = this.module;\r\n    var declaration = instance.prototype.declaration;\r\n\r\n    // Create an empty child flow with its own scope and mark it for inlining\r\n    var previousFlow = currentFunction.flow;\r\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = Flow.create(currentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.returnLabel = returnLabel;\r\n    flow.returnType = returnType;\r\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\r\n\r\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\r\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\r\n    var body = [];\r\n    if (thisArg) {\r\n      let parent = assert(instance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\r\n        flow.addScopedLocalAlias(\r\n          getGetLocalIndex(thisArg),\r\n          (<Class>parent).type,\r\n          \"this\"\r\n        );\r\n        let parentBase = (<Class>parent).base;\r\n        if (parentBase) {\r\n          flow.addScopedLocalAlias(\r\n            getGetLocalIndex(thisArg),\r\n            parentBase.type,\r\n            \"super\"\r\n          );\r\n        }\r\n      } else {\r\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\r\n        body.push(\r\n          module.createSetLocal(thisLocal.index, thisArg)\r\n        );\r\n        let parentBase = (<Class>parent).base;\r\n        if (parentBase) {\r\n          flow.addScopedLocalAlias(\r\n            thisLocal.index,\r\n            parentBase.type,\r\n            \"super\"\r\n          );\r\n        }\r\n      }\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i) {\r\n      let paramExpr = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\r\n        flow.addScopedLocalAlias(\r\n          getGetLocalIndex(paramExpr),\r\n          parameterTypes[i],\r\n          signature.getParameterName(i)\r\n        );\r\n        // inherits wrap status\r\n      } else {\r\n        let argumentLocal = flow.addScopedLocal(\r\n          parameterTypes[i],\r\n          signature.getParameterName(i),\r\n          !flow.canOverflow(paramExpr, parameterTypes[i])\r\n        );\r\n        body.push(\r\n          module.createSetLocal(argumentLocal.index, paramExpr)\r\n        );\r\n      }\r\n    }\r\n\r\n    // Compile optional parameter initializers in the scope of the inlined flow\r\n    currentFunction.flow = flow;\r\n    var numParameters = signature.parameterTypes.length;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let initExpr = this.compileExpression(\r\n        assert(declaration.signature.parameters[i].initializer),\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.WRAP\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(\r\n        parameterTypes[i],\r\n        signature.getParameterName(i),\r\n        !flow.canOverflow(initExpr, parameterTypes[i])\r\n      );\r\n      body.push(\r\n        module.createSetLocal(argumentLocal.index, initExpr)\r\n      );\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    var bodyStatement = assert(declaration.body);\r\n    if (bodyStatement.kind == NodeKind.BLOCK) {\r\n      let statements = (<BlockStatement>bodyStatement).statements;\r\n      for (let i = 0, k = statements.length; i < k; ++i) {\r\n        let stmt = this.compileStatement(statements[i]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          body.push(stmt);\r\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\r\n        }\r\n      }\r\n    } else {\r\n      body.push(this.compileStatement(bodyStatement));\r\n    }\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    var scopedLocals = flow.scopedLocals;\r\n    if (scopedLocals) {\r\n      for (let scopedLocal of scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          currentFunction.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      flow.scopedLocals = null;\r\n    }\r\n    flow.finalize();\r\n    this.currentFunction.flow = previousFlow;\r\n    this.currentType = returnType;\r\n\r\n    // Check that all branches are terminated\r\n    if (returnType != Type.void && !flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        declaration.signature.returnType.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    return flow.is(FlowFlags.RETURNS)\r\n      ? module.createBlock(returnLabel, body, returnType.toNativeType())\r\n      : body.length > 1\r\n        ? module.createBlock(null, body, returnType.toNativeType())\r\n        : body.length\r\n          ? body[0]\r\n          : module.createNop();\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\r\n    var trampolineName = originalName + \"|trampoline\";\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampoline = new Function(\r\n      original.prototype,\r\n      trampolineName,\r\n      trampolineSignature,\r\n      original.parent,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFunction = this.currentFunction;\r\n    this.currentFunction = trampoline;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"outOfRange\", [\r\n        module.createSwitch(names, \"outOfRange\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.createBinary(\r\n                BinaryOp.SubI32,\r\n                module.createGetGlobal(\"~argc\", NativeType.I32),\r\n                module.createI32(minArguments)\r\n              )\r\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      let declaration = originalParameterDeclarations[minArguments + i];\r\n      let initializer = declaration.initializer;\r\n      let initExpr: ExpressionRef;\r\n      if (initializer) {\r\n        initExpr = module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP\r\n          )\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\r\n          declaration.range\r\n        );\r\n        initExpr = module.createUnreachable();\r\n      }\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        initExpr,\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFunction = previousFunction;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var funcRef = module.addFunction(\r\n      trampolineName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        trampolineSignature.returnType,\r\n        trampolineSignature.thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    var internalName = \"~argc\";\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        internalName,\r\n        NativeType.I32,\r\n        true,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    var internalName = \"~setargc\";\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(internalName,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.createSetGlobal(this.ensureArgcVar(),\r\n          module.createGetLocal(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(internalName, \"_setargc\");\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\r\n      let allOptionalsAreConstant = true;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        let initializer = parameterNodes[i].initializer;\r\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\r\n          allOptionalsAreConstant = false;\r\n          break;\r\n        }\r\n      }\r\n      if (allOptionalsAreConstant) { // inline into the call\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(\r\n            this.compileExpression(\r\n              <Expression>parameterNodes[i].initializer,\r\n              parameterTypes[i],\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            )\r\n          );\r\n        }\r\n      } else { // otherwise fill up with zeroes and call the trampoline\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(parameterTypes[i].toNativeZero(module));\r\n        }\r\n        if (!isCallImport) {\r\n          let original = instance;\r\n          instance = this.ensureTrampoline(instance);\r\n          if (!this.compileFunction(instance)) return module.createUnreachable();\r\n          instance.flow.flags = original.flow.flags;\r\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\r\n          let nativeReturnType = returnType.toNativeType();\r\n          this.currentType = returnType;\r\n          return module.createBlock(null, [\r\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\r\n            module.createCall(instance.internalName, operands, nativeReturnType)\r\n          ], nativeReturnType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // otherwise just call through\r\n    this.currentType = returnType;\r\n    return module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    this.currentType = returnType;\r\n    return module.createBlock(null, [\r\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\r\n        module.createI32(numArguments)\r\n      ),\r\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\r\n    ], returnType.toNativeType()); // not necessarily wrapped\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(\r\n        expressions[i],\r\n        Type.void, // drop all\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(\r\n      expressions[numExpressions],\r\n      contextualType, // except last\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE\r\n    );\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var target = this.resolver.resolveElementAccess(expression, this.currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS: {\r\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.expression.range, (<Class>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let thisArg = this.compileExpression(\r\n          expression.expression,\r\n          (<Class>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        return this.compileCallDirect(indexedGet, [\r\n          expression.elementExpression\r\n        ], expression, thisArg);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\r\n    var declaration = expression.declaration;\r\n    var name = declaration.name;\r\n    var simpleName = (name.text.length\r\n      ? name.text\r\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\r\n    var currentFunction = this.currentFunction;\r\n    var prototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\r\n      declaration,\r\n      null,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var flow = currentFunction.flow;\r\n    var instance = this.compileFunctionUsingTypeArguments(\r\n      prototype,\r\n      [],\r\n      flow.contextualTypeArguments,\r\n      flow,\r\n      declaration\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    this.currentType = instance.signature.type; // TODO: get cached type?\r\n    // NOTE that, in order to make this work in every case, the function must be represented by a\r\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            this.currentType = scopedThis.type;\r\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let thisType = (<Class>parent).type;\r\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // must be conditional because `this` could have been provided by a derived class\r\n              this.currentType = thisType;\r\n              return module.createTeeLocal(0,\r\n                this.makeConditionalAllocate(<Class>parent, expression)\r\n              );\r\n            }\r\n          }\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(0, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let base = (<Class>parent).base;\r\n          if (base) {\r\n            let superType = base.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // otherwise resolve\r\n    var target = this.resolver.resolveIdentifier( // reports\r\n      expression,\r\n      this.currentEnum || currentFunction\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let localType = (<Local>target).type;\r\n        assert(localType != Type.void);\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\r\n        }\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        this.currentType = localType;\r\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return this.module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = this.resolver.resolveFunction(\r\n          <FunctionPrototype>target,\r\n          null,\r\n          currentFunction.flow.contextualTypeArguments\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.createI32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileInstanceOfExpression(\r\n    expression: InstanceOfExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\r\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\r\n    // possible in AS anyway.\r\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\r\n    var type = this.currentType;\r\n    var isType = this.resolver.resolveType(expression.isType);\r\n    this.currentType = Type.bool;\r\n    if (!isType) return module.createUnreachable();\r\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\r\n      ? type.nonNullableType.isAssignableTo(isType)\r\n        ? module.createBinary( // not precomputeable\r\n            type.is(TypeFlags.LONG)\r\n              ? BinaryOp.NeI64\r\n              : BinaryOp.NeI32,\r\n            expr,\r\n            type.toNativeZero(module)\r\n          )\r\n        : module.createI32(0)\r\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    implicitNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitNegate);\r\n        let classType = contextualType.classReference;\r\n        if (\r\n          classType &&\r\n          classType.prototype == this.program.arrayPrototype\r\n        ) {\r\n          return this.compileArrayLiteral(\r\n            assert(classType.typeArguments)[0],\r\n            (<ArrayLiteralExpression>expression).elementExpressions,\r\n            false, // TODO: isConst?\r\n            expression\r\n          );\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        switch (contextualType.kind) {\r\n\r\n          // compile to contextualType if matching\r\n\r\n          case TypeKind.I8: {\r\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U8: {\r\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I16: {\r\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U16: {\r\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.BOOL: {\r\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.F32: {\r\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            break; // compiles to best fitting type below, being dropped\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n\r\n        // otherwise compile to best fitting native type\r\n\r\n        if (i64_is_i32(intValue)) {\r\n          this.currentType = Type.i32;\r\n          return module.createI32(i64_low(intValue));\r\n        } else if (i64_is_u32(intValue)) {\r\n          this.currentType = Type.u32;\r\n          return module.createI32(i64_low(intValue));\r\n        } else {\r\n          this.currentType = Type.i64;\r\n          return module.createI64(i64_low(intValue), i64_high(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitNegate);\r\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\r\n      }\r\n      case LiteralKind.OBJECT: {\r\n        assert(!implicitNegate);\r\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\r\n      }\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\r\n  ensureStaticString(stringValue: string): ExpressionRef {\r\n    var program = this.program;\r\n    var hasGC = program.hasGC;\r\n    var gcHeaderSize = program.gcHeaderSize;\r\n\r\n    var stringInstance = assert(program.stringInstance);\r\n    var stringSegment: MemorySegment;\r\n\r\n    // if the string already exists, reuse it\r\n    var segments = this.stringSegments;\r\n    if (segments.has(stringValue)) {\r\n      stringSegment = <MemorySegment>segments.get(stringValue);\r\n\r\n    // otherwise create it\r\n    } else {\r\n      let length = stringValue.length;\r\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\r\n      let totalSize = headerSize + length * 2;\r\n\r\n      let buf: Uint8Array;\r\n      let pos: u32;\r\n\r\n      if (hasGC) {\r\n        buf = new Uint8Array(gcHeaderSize + totalSize);\r\n        pos = gcHeaderSize;\r\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\r\n      } else {\r\n        buf = new Uint8Array(totalSize);\r\n        pos = 0;\r\n      }\r\n      writeI32(length, buf, pos + stringInstance.offsetof(\"length\"));\r\n      pos += headerSize;\r\n      for (let i = 0; i < length; ++i) {\r\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\r\n      }\r\n      stringSegment = this.addMemorySegment(buf);\r\n      segments.set(stringValue, stringSegment);\r\n    }\r\n    var stringOffset = stringSegment.offset;\r\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\r\n\r\n    this.currentType = stringInstance.type;\r\n    if (this.options.isWasm64) {\r\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    } else {\r\n      assert(i64_is_u32(stringOffset));\r\n      return this.module.createI32(i64_low(stringOffset));\r\n    }\r\n  }\r\n\r\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\r\n    return this.ensureStaticString(expression.value);\r\n  }\r\n\r\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\r\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\r\n    var program = this.program;\r\n    var hasGC = program.hasGC;\r\n    var gcHeaderSize = program.gcHeaderSize;\r\n\r\n    var length = values.length;\r\n    var byteSize = elementType.byteSize;\r\n    var byteLength = length * byteSize;\r\n    var usizeTypeSize = this.options.usizeType.byteSize;\r\n\r\n    var buf: Uint8Array;\r\n    var pos: u32;\r\n\r\n    // create the backing ArrayBuffer segment\r\n    var bufferInstance = assert(program.arrayBufferInstance);\r\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\r\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\r\n    if (hasGC) {\r\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\r\n      pos = gcHeaderSize;\r\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\r\n    } else {\r\n      buf = new Uint8Array(bufferTotalSize);\r\n      pos = 0;\r\n    }\r\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(\"byteLength\"));\r\n    pos += bufferHeaderSize;\r\n    var nativeType = elementType.toNativeType();\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        switch (byteSize) {\r\n          case 1: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI8(getConstValueI32(value), buf, pos);\r\n              pos += 1;\r\n            }\r\n            break;\r\n          }\r\n          case 2: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI16(getConstValueI32(value), buf, pos);\r\n              pos += 2;\r\n            }\r\n            break;\r\n          }\r\n          case 4: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI32(getConstValueI32(value), buf, pos);\r\n              pos += 4;\r\n            }\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF32(getConstValueF32(value), buf, pos);\r\n          pos += 4;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF64(getConstValueF64(value), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    var bufferSegment = this.addMemorySegment(buf);\r\n    var bufferOffset = bufferSegment.offset;\r\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\r\n\r\n    // create the Array segment and return a pointer to it\r\n    var arrayPrototype = assert(program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\r\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\r\n    if (hasGC) {\r\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\r\n      pos = gcHeaderSize;\r\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\r\n    } else {\r\n      buf = new Uint8Array(arrayHeaderSize);\r\n      pos = 0;\r\n    }\r\n    var arraySegment = this.addMemorySegment(buf);\r\n    var arrayOffset = arraySegment.offset;\r\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\r\n    this.currentType = arrayInstance.type;\r\n    if (usizeTypeSize == 8) {\r\n      writeI64(bufferOffset, buf, pos + arrayInstance.offsetof(\"buffer_\"));\r\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\r\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\r\n    } else {\r\n      assert(i64_is_u32(bufferOffset));\r\n      writeI32(i64_low(bufferOffset), buf, pos + arrayInstance.offsetof(\"buffer_\"));\r\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\r\n      assert(i64_is_u32(arrayOffset));\r\n      return this.module.createI32(i64_low(arrayOffset));\r\n    }\r\n  }\r\n\r\n  compileArrayLiteral(\r\n    elementType: Type,\r\n    expressions: (Expression | null)[],\r\n    isConst: bool,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // find out whether all elements are constant (array is static)\r\n    var length = expressions.length;\r\n    var compiledValues = new Array<ExpressionRef>(length);\r\n    var constantValues = new Array<ExpressionRef>(length);\r\n    var nativeElementType = elementType.toNativeType();\r\n    var isStatic = true;\r\n    for (let i = 0; i < length; ++i) {\r\n      let expr = expressions[i]\r\n        ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n        : elementType.toNativeZero(module);\r\n      compiledValues[i] = expr;\r\n      if (isStatic) {\r\n        expr = module.precomputeExpression(compiledValues[i]);\r\n        if (getExpressionId(expr) == ExpressionId.Const) {\r\n          assert(getExpressionType(expr) == nativeElementType);\r\n          constantValues[i] = expr;\r\n        } else {\r\n          if (isConst) {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              reportNode.range\r\n            );\r\n          }\r\n          isStatic = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    // make a static array if possible\r\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\r\n\r\n    // otherwise obtain the array type\r\n    var arrayPrototype = assert(this.program.arrayPrototype);\r\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\r\n    var arrayInstance = this.resolver.resolveClass(<ClassPrototype>arrayPrototype, [ elementType ]);\r\n    if (!arrayInstance) return module.createUnreachable();\r\n    var arrayType = arrayInstance.type;\r\n\r\n    // and compile an explicit instantiation\r\n    this.currentType = arrayType;\r\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\r\n    if (!setter) {\r\n      this.error(\r\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n        reportNode.range, arrayInstance.internalName\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var nativeArrayType = arrayType.toNativeType();\r\n    var currentFunction = this.currentFunction;\r\n    var tempLocal = currentFunction.addLocal(arrayType); // can't reuse a temp (used in compiledValues)\r\n    var stmts = new Array<ExpressionRef>(2 + length);\r\n    var index = 0;\r\n    stmts[index++] = module.createSetLocal(tempLocal.index,\r\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\r\n        module.createI32(0), // this\r\n        module.createI32(length)\r\n      ])\r\n    );\r\n    for (let i = 0; i < length; ++i) {\r\n      stmts[index++] = this.makeCallDirect(setter, [\r\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\r\n        module.createI32(i),\r\n        compiledValues[i]\r\n      ]);\r\n    }\r\n    assert(index + 1 == stmts.length);\r\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\r\n    currentFunction.freeTempLocal(tempLocal); // but can be reused now\r\n    this.currentType = arrayType;\r\n    return module.createBlock(null, stmts, nativeArrayType);\r\n  }\r\n\r\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // contextual type must be a class\r\n    var classReference = contextualType.classReference;\r\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, \"<object>\", contextualType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // if present, check that the constructor is compatible with object literals\r\n    var ctor = classReference.constructorInstance;\r\n    if (ctor) {\r\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\r\n      // object literal and use them to call the ctor while not generating a store.\r\n      if (ctor.signature.requiredParameters) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PRIVATE)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PROTECTED)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // check and compile field values\r\n    var names = expression.names;\r\n    var numNames = names.length;\r\n    var values = expression.values;\r\n    var members = classReference.members;\r\n    var hasErrors = false;\r\n    var exprs = new Array<ExpressionRef>(numNames + 2);\r\n    var tempLocal = this.currentFunction.getTempLocal(this.options.usizeType);\r\n    assert(numNames == values.length);\r\n    for (let i = 0, k = numNames; i < k; ++i) {\r\n      let member = members ? members.get(names[i].text) : null;\r\n      if (!member || member.kind != ElementKind.FIELD) {\r\n        this.error(\r\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n          names[i].range, names[i].text, classReference.toString()\r\n        );\r\n        hasErrors = true;\r\n        continue;\r\n      }\r\n      let type = (<Field>member).type;\r\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\r\n        type.byteSize,\r\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\r\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\r\n        type.toNativeType(),\r\n        (<Field>member).memoryOffset\r\n      );\r\n    }\r\n    this.currentType = classReference.type.nonNullableType;\r\n    if (hasErrors) return module.createUnreachable();\r\n\r\n    // allocate a new instance first and assign 'this' to the temp. local\r\n    exprs[0] = module.createSetLocal(\r\n      tempLocal.index,\r\n      compileAllocate(this, classReference, expression)\r\n    );\r\n\r\n    // once all field values have been set, return 'this'\r\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\r\n\r\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.resolver.resolveExpression( // reports\r\n      expression.expression,\r\n      currentFunction\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance: Class | null = null;\r\n    var typeArguments = expression.typeArguments;\r\n    var classReference: Class | null;\r\n    if (\r\n      !typeArguments &&\r\n      (classReference = contextualType.classReference) !== null &&\r\n      classReference.is(CommonFlags.GENERIC)\r\n    ) {\r\n      classInstance = this.resolver.resolveClass(\r\n        classPrototype,\r\n        classReference.typeArguments,\r\n        currentFunction.flow.contextualTypeArguments\r\n      );\r\n    } else {\r\n      classInstance = this.resolver.resolveClassInclTypeArguments(\r\n        classPrototype,\r\n        typeArguments,\r\n        currentFunction.flow.contextualTypeArguments,\r\n        expression\r\n      );\r\n    }\r\n    if (!classInstance) return module.createUnreachable();\r\n    return this.compileInstantiate(classInstance, expression.arguments, expression);\r\n  }\r\n\r\n  compileInstantiate(classInstance: Class, argumentExpressions: Expression[], reportNode: Node): ExpressionRef {\r\n    // traverse to the top-most visible constructor\r\n    var currentClassInstance: Class | null = classInstance;\r\n    var constructorInstance: Function | null = null;\r\n    do {\r\n      constructorInstance = currentClassInstance.constructorInstance;\r\n      if (constructorInstance) break; // TODO: check visibility\r\n    } while (currentClassInstance = currentClassInstance.base);\r\n\r\n    // if a constructor is present, call it with a zero `this`\r\n    var expr: ExpressionRef;\r\n    if (constructorInstance) {\r\n      expr = this.compileCallDirect(constructorInstance, argumentExpressions, reportNode,\r\n        this.options.usizeType.toNativeZero(this.module)\r\n      );\r\n\r\n    // otherwise simply allocate a new instance and initialize its fields\r\n    } else {\r\n      if (argumentExpressions.length) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", argumentExpressions.length.toString(10)\r\n        );\r\n      }\r\n      expr = this.makeAllocate(classInstance, reportNode);\r\n    }\r\n\r\n    this.currentType = classInstance.type;\r\n    return expr;\r\n  }\r\n\r\n  compileParenthesizedExpression(\r\n    expression: ParenthesizedExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(\r\n      expression.expression,\r\n      contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var target = this.resolver.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static property\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let parent = (<EnumValue>target).parent;\r\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>parent)) {\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        let thisExpression = assert(this.resolver.currentThisExpression);\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        this.currentType = (<Field>target).type;\r\n        return module.createLoad(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY: {// instance property (here: getter)\r\n        return this.compileGetter(<Property>target, propertyAccess);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.error(\r\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\r\n          propertyAccess.range, (<FunctionPrototype>target).simpleName\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  private compileGetter(target: Property, reportNode: Node): ExpressionRef {\r\n    var prototype = target.getterPrototype;\r\n    if (prototype) {\r\n      let instance = this.resolver.resolveFunction(prototype, null);\r\n      if (!instance) return this.module.createUnreachable();\r\n      let signature = instance.signature;\r\n      if (!this.checkCallSignature( // reports\r\n        signature,\r\n        0,\r\n        instance.is(CommonFlags.INSTANCE),\r\n        reportNode\r\n      )) {\r\n        return this.module.createUnreachable();\r\n      }\r\n      let inline = (instance.decoratorFlags & DecoratorFlags.INLINE) != 0;\r\n      if (instance.is(CommonFlags.INSTANCE)) {\r\n        let parent = assert(instance.parent);\r\n        assert(parent.kind == ElementKind.CLASS);\r\n        let thisExpression = assert(this.resolver.currentThisExpression); //!!!\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        this.currentType = signature.returnType;\r\n        return this.compileCallDirect(instance, [], reportNode, thisExpr, inline);\r\n      } else {\r\n        this.currentType = signature.returnType;\r\n        return this.compileCallDirect(instance, [], reportNode, 0, inline);\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n        reportNode.range, (<Property>target).simpleName, (<Property>target).parent.toString()\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n    var currentFunction = this.currentFunction;\r\n    var parentFlow = currentFunction.flow;\r\n\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary branches if the condition is constant\r\n      let condExprPrecomp = this.module.precomputeExpression(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        return getConstValueI32(condExprPrecomp)\r\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\r\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    var ifThenFlow = parentFlow.fork();\r\n    currentFunction.flow = ifThenFlow;\r\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\r\n    var ifThenType = this.currentType;\r\n    ifThenFlow.free();\r\n\r\n    var ifElseFlow = parentFlow.fork();\r\n    currentFunction.flow = ifElseFlow;\r\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n    var ifElseType = this.currentType;\r\n    currentFunction.flow = ifElseFlow.free();\r\n\r\n    parentFlow.inheritMutual(ifThenFlow, ifElseFlow);\r\n\r\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, ifThenType.toString(), ifElseType.toString()\r\n      );\r\n      this.currentType = contextualType;\r\n      return this.module.createUnreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(\r\n      ifThenExpr,\r\n      ifThenType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifThen\r\n    );\r\n    ifElseExpr = this.convertExpression(\r\n      ifElseExpr,\r\n      ifElseType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifElse\r\n    );\r\n    this.currentType = commonType;\r\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n\r\n    // shortcut if compiling the getter already failed\r\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\r\n\r\n    var currentType = this.currentType;\r\n\r\n    // if the value isn't dropped, a temp. local is required to remember the original value\r\n    var tempLocal: Local | null = null;\r\n    if (contextualType != Type.void) {\r\n      tempLocal = currentFunction.getTempLocal(currentType, false);\r\n      getValue = module.createTeeLocal(\r\n        tempLocal.index,\r\n        getValue\r\n      );\r\n    }\r\n\r\n    var calcValue: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddI32,\r\n              getValue,\r\n              module.createI32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\r\n                if (overload) {\r\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            calcValue = module.createBinary(\r\n              options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              getValue,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddI64,\r\n              getValue,\r\n              module.createI64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddF32,\r\n              getValue,\r\n              module.createF32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddF64,\r\n              getValue,\r\n              module.createF64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubI32,\r\n              getValue,\r\n              module.createI32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\r\n                if (overload) {\r\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            calcValue = module.createBinary(\r\n              options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              getValue,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubI64,\r\n              getValue,\r\n              module.createI64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubF32,\r\n              getValue,\r\n              module.createF32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubF64,\r\n              getValue,\r\n              module.createF64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // simplify if dropped anyway\r\n    if (!tempLocal) {\r\n      this.currentType = Type.void;\r\n      return this.compileAssignmentWithValue(expression.operand,\r\n        calcValue,\r\n        false\r\n      );\r\n    }\r\n\r\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\r\n    var setValue = this.compileAssignmentWithValue(expression.operand,\r\n      calcValue, // also tees getValue to tempLocal\r\n      false\r\n    );\r\n\r\n    this.currentType = tempLocal.type;\r\n    currentFunction.freeTempLocal(tempLocal);\r\n    var nativeType = tempLocal.type.toNativeType();\r\n\r\n    return module.createBlock(null, [\r\n      setValue,\r\n      module.createGetLocal(tempLocal.index, nativeType)\r\n    ], nativeType); // result of 'x++' / 'x--' might overflow\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        // nop\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          // compileExpression normally does this:\r\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n          break;\r\n        }\r\n\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              this.currentType.toNativeZero(module),\r\n              expr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createUnary(UnaryOp.NegF32, expr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createUnary(UnaryOp.NegF64, expr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          // allow '!' for references even without an overload\r\n        }\r\n\r\n        expr = this.makeIsFalseish(expr, this.currentType);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        } else {\r\n          expr = this.convertExpression(\r\n            expr,\r\n            this.currentType, this.currentType.intType,\r\n            ConversionKind.IMPLICIT, WrapMode.NONE,\r\n            expression.operand\r\n          );\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              this.currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\r\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFunction.flow;\r\n    switch (type.kind) {\r\n      case TypeKind.I8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(24)\r\n                ),\r\n                module.createI32(24)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.I16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(16)\r\n                ),\r\n                module.createI32(16)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xffff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.BOOL: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          // bool is special in that it compares to 0 instead of masking with 0x1\r\n          expr = module.createBinary(BinaryOp.NeI32,\r\n            expr,\r\n            module.createI32(0)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\r\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return module.createUnary(UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createUnary(UnaryOp.EqzI64, expr);\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\r\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return expr;\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return type.size == 64\r\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n          : expr;\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an allocation expression for an instance of the specified class. */\r\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n\r\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\r\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\r\n    var initializers = new Array<ExpressionRef>();\r\n    initializers.push(\r\n      module.createSetLocal(tempLocal.index,\r\n        compileAllocate(this, classInstance, reportNode)\r\n      )\r\n    );\r\n\r\n    // apply field initializers\r\n    if (classInstance.members) {\r\n      for (let member of classInstance.members.values()) {\r\n        if (member.kind == ElementKind.FIELD) {\r\n          let field = <Field>member;\r\n          let fieldType = field.type;\r\n          let nativeFieldType = fieldType.toNativeType();\r\n          let fieldDeclaration = field.prototype.declaration;\r\n          assert(!field.isAny(CommonFlags.CONST));\r\n          if (fieldDeclaration.initializer) { // use initializer\r\n            initializers.push(module.createStore(fieldType.byteSize,\r\n              module.createGetLocal(tempLocal.index, nativeSizeType),\r\n              this.compileExpression( // reports\r\n                fieldDeclaration.initializer,\r\n                fieldType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              ),\r\n              nativeFieldType,\r\n              field.memoryOffset\r\n            ));\r\n          } else { // initialize with zero\r\n            // TODO: might be unnecessary if the ctor initializes the field\r\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\r\n            initializers.push(module.createStore(fieldType.byteSize,\r\n              module.createGetLocal(tempLocal.index, nativeSizeType),\r\n              parameterIndex >= 0 // initialized via parameter\r\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\r\n                : fieldType.toNativeZero(module),\r\n                nativeFieldType,\r\n              field.memoryOffset\r\n            ));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // return `this`\r\n    initializers.push(\r\n      module.createGetLocal(tempLocal.index, nativeSizeType)\r\n    );\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n    this.currentType = classInstance.type;\r\n    return module.createBlock(null, initializers, nativeSizeType);\r\n  }\r\n\r\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\r\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\r\n    // requires that `this` is the first local\r\n    var module = this.module;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    this.currentType = classInstance.type;\r\n    return module.createIf(\r\n      nativeSizeType == NativeType.I64\r\n        ? module.createBinary(\r\n            BinaryOp.NeI64,\r\n            module.createGetLocal(0, NativeType.I64),\r\n            module.createI64(0)\r\n          )\r\n        : module.createGetLocal(0, NativeType.I32),\r\n      module.createGetLocal(0, nativeSizeType),\r\n      module.createTeeLocal(0,\r\n        this.makeAllocate(classInstance, reportNode)\r\n      )\r\n    );\r\n  }\r\n\r\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\r\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\r\n    var currentFunction = this.currentFunction;\r\n    var source = range.source;\r\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n    range.debugInfoRef = expr;\r\n    currentFunction.debugLocations.push(range);\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleImportName(\r\n  element: Element,\r\n  declaration: DeclarationStatement\r\n): void {\r\n  // by default, use the file name as the module name\r\n  mangleImportName_moduleName = declaration.range.source.simplePath;\r\n  // and the internal name of the element within that file as the element name\r\n  mangleImportName_elementName = declaration.programLevelInternalName;\r\n\r\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\r\n\r\n  var program = element.program;\r\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\r\n  var args = decorator.arguments;\r\n  if (args && args.length) {\r\n    let arg = args[0];\r\n    // if one argument is given, override just the element name\r\n    // if two arguments are given, override both module and element name\r\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n      if (args.length >= 2) {\r\n        arg = args[1];\r\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n          mangleImportName_moduleName = mangleImportName_elementName;\r\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n          if (args.length > 2) {\r\n            program.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"2\", args.length.toString()\r\n            );\r\n          }\r\n        } else {\r\n          program.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            arg.range\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      program.error(\r\n        DiagnosticCode.String_literal_expected,\r\n        arg.range\r\n      );\r\n    }\r\n  } else {\r\n    program.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      decorator.range, \"1\", \"0\"\r\n    );\r\n  }\r\n}\r\n\r\nvar mangleImportName_moduleName: string;\r\nvar mangleImportName_elementName: string;\r\n","/**\r\n * Generated from diagnosticsMessages.json. Do not edit.\r\n * @module diagnostics\r\n *//***/\r\n\r\n/* tslint:disable:max-line-length */\r\n\r\n/** Enum of available diagnostic codes. */\r\nexport enum DiagnosticCode {\r\n  Operation_not_supported = 100,\r\n  Operation_is_unsafe = 101,\r\n  User_defined_0 = 102,\r\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\r\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\r\n  Type_0_cannot_be_changed_to_type_1 = 202,\r\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\r\n  Basic_type_0_cannot_be_nullable = 204,\r\n  Cannot_export_a_mutable_global = 205,\r\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\r\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\r\n  Unmanaged_classes_cannot_implement_interfaces = 208,\r\n  Invalid_regular_expression_flags = 209,\r\n  Implementation_0_must_match_the_signature_1 = 210,\r\n  Class_0_is_sealed_and_cannot_be_extended = 211,\r\n  Decorator_0_is_not_valid_here = 212,\r\n  Duplicate_decorator = 213,\r\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\r\n  Optional_parameter_must_have_an_initializer = 215,\r\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\r\n  Function_0_cannot_be_inlined_into_itself = 217,\r\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\r\n  Optional_properties_are_not_supported = 219,\r\n  Unterminated_string_literal = 1002,\r\n  Identifier_expected = 1003,\r\n  _0_expected = 1005,\r\n  A_file_cannot_have_a_reference_to_itself = 1006,\r\n  Trailing_comma_not_allowed = 1009,\r\n  Unexpected_token = 1012,\r\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\r\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\r\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\r\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\r\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\r\n  _0_modifier_cannot_be_used_here = 1042,\r\n  A_rest_parameter_cannot_be_optional = 1047,\r\n  A_rest_parameter_cannot_have_an_initializer = 1048,\r\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\r\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\r\n  A_get_accessor_cannot_have_parameters = 1054,\r\n  Enum_member_must_have_initializer = 1061,\r\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\r\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\r\n  An_accessor_cannot_have_type_parameters = 1094,\r\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\r\n  Type_parameter_list_cannot_be_empty = 1098,\r\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\r\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\r\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\r\n  Expression_expected = 1109,\r\n  Type_expected = 1110,\r\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\r\n  Duplicate_label_0 = 1114,\r\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\r\n  Digit_expected = 1124,\r\n  Hexadecimal_digit_expected = 1125,\r\n  Unexpected_end_of_text = 1126,\r\n  Invalid_character = 1127,\r\n  _case_or_default_expected = 1130,\r\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\r\n  Type_argument_expected = 1140,\r\n  String_literal_expected = 1141,\r\n  Line_break_not_permitted_here = 1142,\r\n  Declaration_expected = 1146,\r\n  _const_declarations_must_be_initialized = 1155,\r\n  Unterminated_regular_expression_literal = 1161,\r\n  Interface_declaration_cannot_have_implements_clause = 1176,\r\n  Binary_digit_expected = 1177,\r\n  Octal_digit_expected = 1178,\r\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\r\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\r\n  Unterminated_Unicode_escape_sequence = 1199,\r\n  Decorators_are_not_valid_here = 1206,\r\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\r\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\r\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\r\n  A_class_may_only_extend_another_class = 1311,\r\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\r\n  Duplicate_identifier_0 = 2300,\r\n  Cannot_find_name_0 = 2304,\r\n  Module_0_has_no_exported_member_1 = 2305,\r\n  Generic_type_0_requires_1_type_argument_s = 2314,\r\n  Type_0_is_not_generic = 2315,\r\n  Type_0_is_not_assignable_to_type_1 = 2322,\r\n  Index_signature_is_missing_in_type_0 = 2329,\r\n  _this_cannot_be_referenced_in_current_location = 2332,\r\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\r\n  Property_0_does_not_exist_on_type_1 = 2339,\r\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\r\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\r\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\r\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\r\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\r\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\r\n  _get_and_set_accessor_must_have_the_same_type = 2380,\r\n  Constructor_implementation_is_missing = 2390,\r\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\r\n  Multiple_constructor_implementations_are_not_allowed = 2392,\r\n  Duplicate_function_implementation = 2393,\r\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\r\n  Type_0_has_no_property_1 = 2460,\r\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\r\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\r\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\r\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\r\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\r\n  Index_signature_in_type_0_only_permits_reading = 2542,\r\n  Expected_0_arguments_but_got_1 = 2554,\r\n  Expected_at_least_0_arguments_but_got_1 = 2555,\r\n  Expected_0_type_arguments_but_got_1 = 2558,\r\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\r\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\r\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\r\n  Namespace_0_has_no_exported_member_1 = 2694,\r\n  File_0_not_found = 6054,\r\n  Numeric_separators_are_not_allowed_here = 6188,\r\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189\r\n}\r\n\r\n/** Translates a diagnostic code to its respective string. */\r\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\r\n  switch (code) {\r\n    case 100: return \"Operation not supported.\";\r\n    case 101: return \"Operation is unsafe.\";\r\n    case 102: return \"User-defined: {0}\";\r\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\r\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\r\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\r\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\r\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\r\n    case 205: return \"Cannot export a mutable global.\";\r\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\r\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\r\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\r\n    case 209: return \"Invalid regular expression flags.\";\r\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\r\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\r\n    case 212: return \"Decorator '{0}' is not valid here.\";\r\n    case 213: return \"Duplicate decorator.\";\r\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\r\n    case 215: return \"Optional parameter must have an initializer.\";\r\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\r\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\r\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\r\n    case 219: return \"Optional properties are not supported.\";\r\n    case 1002: return \"Unterminated string literal.\";\r\n    case 1003: return \"Identifier expected.\";\r\n    case 1005: return \"'{0}' expected.\";\r\n    case 1006: return \"A file cannot have a reference to itself.\";\r\n    case 1009: return \"Trailing comma not allowed.\";\r\n    case 1012: return \"Unexpected token.\";\r\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\r\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\r\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\r\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\r\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\r\n    case 1042: return \"'{0}' modifier cannot be used here.\";\r\n    case 1047: return \"A rest parameter cannot be optional.\";\r\n    case 1048: return \"A rest parameter cannot have an initializer.\";\r\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\r\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\r\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\r\n    case 1061: return \"Enum member must have initializer.\";\r\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\r\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\r\n    case 1094: return \"An accessor cannot have type parameters.\";\r\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\r\n    case 1098: return \"Type parameter list cannot be empty.\";\r\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\r\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\r\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\r\n    case 1109: return \"Expression expected.\";\r\n    case 1110: return \"Type expected.\";\r\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\r\n    case 1114: return \"Duplicate label '{0}'.\";\r\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\r\n    case 1124: return \"Digit expected.\";\r\n    case 1125: return \"Hexadecimal digit expected.\";\r\n    case 1126: return \"Unexpected end of text.\";\r\n    case 1127: return \"Invalid character.\";\r\n    case 1130: return \"'case' or 'default' expected.\";\r\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\r\n    case 1140: return \"Type argument expected.\";\r\n    case 1141: return \"String literal expected.\";\r\n    case 1142: return \"Line break not permitted here.\";\r\n    case 1146: return \"Declaration expected.\";\r\n    case 1155: return \"'const' declarations must be initialized.\";\r\n    case 1161: return \"Unterminated regular expression literal.\";\r\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\r\n    case 1177: return \"Binary digit expected.\";\r\n    case 1178: return \"Octal digit expected.\";\r\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\r\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\r\n    case 1199: return \"Unterminated Unicode escape sequence.\";\r\n    case 1206: return \"Decorators are not valid here.\";\r\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\r\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\r\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\r\n    case 1311: return \"A class may only extend another class.\";\r\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\r\n    case 2300: return \"Duplicate identifier '{0}'.\";\r\n    case 2304: return \"Cannot find name '{0}'.\";\r\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\r\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\r\n    case 2315: return \"Type '{0}' is not generic.\";\r\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\r\n    case 2329: return \"Index signature is missing in type '{0}'.\";\r\n    case 2332: return \"'this' cannot be referenced in current location.\";\r\n    case 2335: return \"'super' can only be referenced in a derived class.\";\r\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\r\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\r\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\r\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\r\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\r\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\r\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\r\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\r\n    case 2390: return \"Constructor implementation is missing.\";\r\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\r\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\r\n    case 2393: return \"Duplicate function implementation.\";\r\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\r\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\r\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\r\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\r\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\r\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\r\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\r\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\r\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\r\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\r\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\r\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\r\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\r\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\r\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\r\n    case 6054: return \"File '{0}' not found.\";\r\n    case 6188: return \"Numeric separators are not allowed here.\";\r\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\r\n    default: return \"\";\r\n  }\r\n}\r\n","/**\r\n * Resolve infrastructure to obtain types and elements.\r\n * @module resolver\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticEmitter,\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Program,\r\n  ElementKind,\r\n  OperatorKind,\r\n  FlowFlags,\r\n\r\n  Element,\r\n  Class,\r\n  ClassPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  FunctionPrototype,\r\n  VariableLikeElement,\r\n  Property,\r\n  DecoratorFlags,\r\n  FieldPrototype,\r\n  Field,\r\n  Global\r\n} from \"./program\";\r\n\r\nimport {\r\n  SignatureNode,\r\n  ParameterKind,\r\n  CommonTypeNode,\r\n  NodeKind,\r\n  TypeNode,\r\n  TypeParameterNode,\r\n  Node,\r\n  Range,\r\n  IdentifierExpression,\r\n  CallExpression,\r\n  ElementAccessExpression,\r\n  PropertyAccessExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  AssertionExpression,\r\n  Expression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n  typesToString\r\n} from \"./types\";\r\n\r\nimport {\r\n  PATH_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\n/** Indicates whether errors are reported or not. */\r\nexport enum ReportMode {\r\n  /** Report errors. */\r\n  REPORT,\r\n  /** Swallow errors. */\r\n  SWALLOW\r\n}\r\n\r\n/** Provides tools to resolve types and expressions. */\r\nexport class Resolver extends DiagnosticEmitter {\r\n\r\n  /** The program this resolver belongs to. */\r\n  program: Program;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  currentThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  currentElementExpression : Expression | null = null;\r\n\r\n  /** Constructs the resolver for the specified program. */\r\n  constructor(program: Program) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    node: CommonTypeNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n\r\n    // handle signatures specifically\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportMode);\r\n      if (!signature) return null;\r\n      return node.isNullable ? signature.type.asNullable() : signature.type;\r\n    }\r\n\r\n    // now dealing with TypeNode\r\n    assert(node.kind == NodeKind.TYPE);\r\n    var typeNode = <TypeNode>node;\r\n    var simpleName = typeNode.name.text;\r\n    var globalName = simpleName;\r\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName; // TODO cache\r\n\r\n    // check file-global / program-global enum or class\r\n    {\r\n      let elementsLookup = this.program.elementsLookup;\r\n      let element: Element | null;\r\n      if (\r\n        (element = elementsLookup.get(localName)) || // file-global\r\n        (element = elementsLookup.get(globalName))   // program-global\r\n      ) {\r\n        switch (element.kind) {\r\n          case ElementKind.ENUM: {\r\n            if (typeNode.typeArguments !== null && typeNode.typeArguments.length) {\r\n              if (reportMode == ReportMode.REPORT) {\r\n                this.error(\r\n                  DiagnosticCode.Type_0_is_not_generic,\r\n                  node.range, element.internalName\r\n                );\r\n              }\r\n              return null;\r\n            }\r\n            return Type.i32;\r\n          }\r\n          case ElementKind.CLASS_PROTOTYPE: {\r\n            let instance = this.resolveClassInclTypeArguments(\r\n              <ClassPrototype>element,\r\n              typeNode.typeArguments,\r\n              contextualTypeArguments,\r\n              node\r\n            ); // reports\r\n            if (!instance) return null;\r\n            return node.isNullable ? instance.type.asNullable() : instance.type;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // check (global) type alias\r\n    {\r\n      let alias = this.program.typeAliases.get(simpleName);\r\n      if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportMode);\r\n    }\r\n\r\n    // resolve parameters\r\n    {\r\n      let typeArgumentNodes = typeNode.typeArguments;\r\n      if (typeArgumentNodes) {\r\n        let numTypeArguments = typeArgumentNodes.length;\r\n        let paramTypes = new Array<Type>(numTypeArguments);\r\n        for (let i = 0; i < numTypeArguments; ++i) {\r\n          let paramType = this.resolveType( // reports\r\n            typeArgumentNodes[i],\r\n            contextualTypeArguments,\r\n            reportMode\r\n          );\r\n          if (!paramType) return null;\r\n          paramTypes[i] = paramType;\r\n        }\r\n        if (numTypeArguments) { // can't be a placeholder if it has parameters\r\n          let instanceKey = typesToString(paramTypes);\r\n          if (instanceKey.length) {\r\n            localName += \"<\" + instanceKey + \">\";\r\n            globalName += \"<\" + instanceKey + \">\";\r\n          }\r\n        } else if (contextualTypeArguments) {\r\n          let placeholderType = contextualTypeArguments.get(globalName);\r\n          if (placeholderType) return placeholderType;\r\n        }\r\n      }\r\n    }\r\n\r\n    // check file-global / program-global type\r\n    {\r\n      let typesLookup = this.program.typesLookup;\r\n      let type: Type | null;\r\n      if (\r\n        (type = typesLookup.get(localName)) ||\r\n        (type = typesLookup.get(globalName))\r\n      ) {\r\n        return type;\r\n      }\r\n    }\r\n\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, globalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\r\n  resolveSignature(\r\n    node: SignatureNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Signature | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(explicitThisType, contextualTypeArguments, reportMode);\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterTypeNodes = node.parameters;\r\n    var numParameters = parameterTypeNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterTypeNode = parameterTypeNodes[i];\r\n      switch (parameterTypeNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterType = this.resolveType(\r\n        assert(parameterTypeNode.type),\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterTypeNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (returnTypeNode) {\r\n      returnType = this.resolveType(returnTypeNode, contextualTypeArguments, reportMode);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Type.void;\r\n    }\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return signature;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    typeParameters: TypeParameterNode[],\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type[] | null {\r\n    var parameterCount = typeParameters.length;\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (parameterCount != argumentCount) {\r\n      if (argumentCount) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          Range.join(\r\n            (<TypeNode[]>typeArgumentNodes)[0].range,\r\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n          ),\r\n          parameterCount.toString(10), argumentCount.toString(10)\r\n        );\r\n      } else if (alternativeReportNode) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(parameterCount);\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      let type = this.resolveType( // reports\r\n        (<TypeNode[]>typeArgumentNodes)[i],\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the element it refers to. */\r\n  resolveIdentifier(\r\n    identifier: IdentifierExpression,\r\n    context: Element | null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var name = identifier.text;\r\n    var element: Element | null;\r\n\r\n    if (context) {\r\n\r\n      switch (context.kind) {\r\n        case ElementKind.FUNCTION: { // search locals, use prototype\r\n          element = (<Function>context).flow.getScopedLocal(name);\r\n          if (element) {\r\n            this.currentThisExpression = null;\r\n            this.currentElementExpression = null;\r\n            return element;\r\n          }\r\n          context = (<Function>context).prototype.parent;\r\n          break;\r\n        }\r\n        case ElementKind.CLASS: { // use prototype\r\n          context = (<Class>context).prototype.parent;\r\n          break;\r\n        }\r\n      }\r\n\r\n      // search context\r\n      while (context) {\r\n        let members = context.members;\r\n        if (members) {\r\n          if (element = members.get(name)) {\r\n            this.currentThisExpression = null;\r\n            this.currentElementExpression = null;\r\n            return element;\r\n          }\r\n        }\r\n        context = context.parent;\r\n      }\r\n    }\r\n\r\n    // search current file\r\n    var elementsLookup = this.program.elementsLookup;\r\n    if (element = elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    // search global scope\r\n    if (element = elementsLookup.get(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        identifier.range, name\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a lazily compiled global, i.e. a static class field. */\r\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\r\n    if (global.is(CommonFlags.RESOLVED)) return true;\r\n    var resolveType = assert(global.declaration).type;\r\n    if (!resolveType) return false;\r\n    var resolvedType = this.resolveType(resolveType, null, reportMode);\r\n    if (!resolvedType) return false;\r\n    global.type = resolvedType;\r\n    global.set(CommonFlags.RESOLVED);\r\n    return true;\r\n  }\r\n\r\n  /** Resolves a property access to the element it refers to. */\r\n  resolvePropertyAccess(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualFunction: Function,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = propertyAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode); // reports\r\n    if (!target) return null;\r\n\r\n    // at this point we know exactly what the target is, so look up the element within\r\n    var propertyName = propertyAccess.property.text;\r\n\r\n    // Resolve variable-likes to the class type they reference first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        assert(type != Type.void);\r\n        let classReference = type.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = this.resolveFunction(\r\n          assert((<Property>target).getterPrototype),\r\n          null,\r\n          null,\r\n          reportMode\r\n        );\r\n        if (!getter) return null;\r\n        let classReference = getter.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.currentElementExpression;\r\n        if (elementExpression) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementExpression.range, (<Class>target).internalName\r\n            );\r\n            return null;\r\n          }\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (!(target = returnType.classReference)) {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, returnType.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          let member: Element | null;\r\n          if (members && (member = members.get(propertyName))) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = null;\r\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        if (members) {\r\n          let member = members.get(propertyName);\r\n          if (member) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = null;\r\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveElementAccess(\r\n    elementAccess: ElementAccessExpression,\r\n    contextualFunction: Function,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = elementAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (target = type.classReference) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n        if (!indexedGet) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementAccess.range, (<Class>target).internalName\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (target = returnType.classReference) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = elementAccess.elementExpression;\r\n            return target;\r\n          }\r\n          return null;\r\n        }\r\n        this.currentThisExpression = targetExpression;\r\n        this.currentElementExpression = elementAccess.elementExpression;\r\n        return target;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        targetExpression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  resolveExpression(\r\n    expression: Expression,\r\n    contextualFunction: Function,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) {\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        let type = this.resolveType(\r\n          (<AssertionExpression>expression).toType,\r\n          contextualFunction.flow.contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (type) {\r\n          let classType = type.classReference;\r\n          if (classType) {\r\n            this.currentThisExpression = null;\r\n            this.currentElementExpression = null;\r\n            return classType;\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case NodeKind.THIS: { // -> Class / ClassPrototype\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\r\n          if (explicitLocal) {\r\n            this.currentThisExpression = null;\r\n            this.currentElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent) {\r\n          this.currentThisExpression = null;\r\n          this.currentElementExpression = null;\r\n          return parent;\r\n        }\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n            expression.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.SUPER: { // -> Class\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\r\n          if (explicitLocal) {\r\n            this.currentThisExpression = null;\r\n            this.currentElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n          this.currentThisExpression = null;\r\n          this.currentElementExpression = null;\r\n          return parent;\r\n        }\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n            expression.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction, reportMode);\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        switch ((<LiteralExpression>expression).literalKind) {\r\n          case LiteralKind.STRING: {\r\n            this.currentThisExpression = expression;\r\n            this.currentElementExpression = null;\r\n            return this.program.stringInstance;\r\n          }\r\n          // case LiteralKind.ARRAY: // TODO\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccess(\r\n          <PropertyAccessExpression>expression,\r\n          contextualFunction,\r\n          reportMode\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccess(\r\n          <ElementAccessExpression>expression,\r\n          contextualFunction,\r\n          reportMode\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        let targetExpression = (<CallExpression>expression).expression;\r\n        let target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\r\n        if (!target) return null;\r\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n          let instance = this.resolveFunctionInclTypeArguments(\r\n            <FunctionPrototype>target,\r\n            (<CallExpression>expression).typeArguments,\r\n            contextualFunction.flow.contextualTypeArguments,\r\n            expression,\r\n            reportMode\r\n          );\r\n          if (!instance) return null;\r\n          let returnType = instance.signature.returnType;\r\n          let classType = returnType.classReference;\r\n          if (classType) {\r\n            // reuse resolvedThisExpression (might be property access)\r\n            // reuse resolvedElementExpression (might be element access)\r\n            return classType;\r\n          } else {\r\n            let signature = returnType.signatureReference;\r\n            if (signature) {\r\n              let functionTarget = signature.cachedFunctionTarget;\r\n              if (!functionTarget) {\r\n                functionTarget = new FunctionTarget(this.program, signature);\r\n                signature.cachedFunctionTarget = functionTarget;\r\n              }\r\n              // reuse resolvedThisExpression (might be property access)\r\n              // reuse resolvedElementExpression (might be element access)\r\n              return functionTarget;\r\n            }\r\n          }\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n              targetExpression.range, target.internalName\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a function prototype to an instance using the specified concrete type arguments. */\r\n  resolveFunction(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var classTypeArguments = prototype.classTypeArguments;\r\n    var classInstanceKey = classTypeArguments ? typesToString(classTypeArguments) : \"\";\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n    var classInstances = prototype.instances.get(classInstanceKey);\r\n    if (classInstances) {\r\n      let instance = classInstances.get(instanceKey);\r\n      if (instance) return instance;\r\n    }\r\n\r\n    var declaration = prototype.declaration;\r\n    var isInstance = prototype.is(CommonFlags.INSTANCE);\r\n    var classPrototype = prototype.classPrototype;\r\n\r\n    // inherit contextual type arguments as provided. might be overridden.\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(\r\n          inheritedName,\r\n          inheritedType\r\n        );\r\n      }\r\n    }\r\n\r\n    // override with class type arguments if a partially resolved instance method\r\n    if (classTypeArguments) { // set only if partially resolved\r\n      assert(prototype.is(CommonFlags.INSTANCE));\r\n      let classDeclaration = assert(classPrototype).declaration;\r\n      let classTypeParameters = classDeclaration.typeParameters;\r\n      let numClassTypeParameters = classTypeParameters.length;\r\n      assert(numClassTypeParameters == classTypeArguments.length);\r\n      for (let i = 0; i < numClassTypeParameters; ++i) {\r\n        contextualTypeArguments.set(\r\n          classTypeParameters[i].name.text,\r\n          classTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!classTypeArguments);\r\n    }\r\n\r\n    // override with function specific type arguments\r\n    var signatureNode = declaration.signature;\r\n    var functionTypeParameters = declaration.typeParameters;\r\n    var numFunctionTypeArguments: i32;\r\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\r\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\r\n          typeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\r\n    }\r\n\r\n    // resolve class if an instance method\r\n    var classInstance: Class | null = null;\r\n    var thisType: Type | null = null;\r\n    if (isInstance) {\r\n      classInstance = this.resolveClass(\r\n        assert(classPrototype),\r\n        classTypeArguments,\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!classInstance) return null;\r\n      thisType = classInstance.type;\r\n      contextualTypeArguments.set(\"this\", thisType);\r\n    }\r\n\r\n    // resolve signature node\r\n    var signatureParameters = signatureNode.parameters;\r\n    var signatureParameterCount = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(signatureParameterCount);\r\n    var parameterNames = new Array<string>(signatureParameterCount);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < signatureParameterCount; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = assert(parameterDeclaration.type);\r\n      let parameterType = this.resolveType(typeNode, contextualTypeArguments, reportMode);\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    var returnType: Type;\r\n    if (prototype.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = assert(signatureNode.returnType);\r\n      let type = this.resolveType(typeNode, contextualTypeArguments, reportMode);\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var internalName = prototype.internalName;\r\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\r\n    var instance = new Function(\r\n      prototype,\r\n      internalName,\r\n      signature,\r\n      classInstance\r\n        ? classInstance\r\n        : classPrototype,\r\n      contextualTypeArguments\r\n    );\r\n    if (!classInstances) prototype.instances.set(classInstanceKey, classInstances = new Map());\r\n    classInstances.set(instanceKey, instance);\r\n    this.program.instancesLookup.set(internalName, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a function prototype partially by applying the specified type arguments. */\r\n  resolveFunctionPartially(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: Type[] | null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): FunctionPrototype | null {\r\n    assert(prototype.is(CommonFlags.INSTANCE));\r\n    var classPrototype = assert(prototype.classPrototype);\r\n\r\n    if (!(typeArguments && typeArguments.length)) return prototype; // no need to clone\r\n\r\n    var simpleName = prototype.simpleName;\r\n    var partialKey = typesToString(typeArguments);\r\n    var partialPrototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\r\n      prototype.declaration,\r\n      classPrototype,\r\n      prototype.decoratorFlags\r\n    );\r\n    partialPrototype.flags = prototype.flags;\r\n    partialPrototype.operatorKind = prototype.operatorKind;\r\n    partialPrototype.classTypeArguments = typeArguments;\r\n    partialPrototype.instances = prototype.instances;\r\n    return partialPrototype;\r\n  }\r\n\r\n  /** Resolves a function prototype to an instance by first resolving the specified type arguments. */\r\n  resolveFunctionInclTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    reportNode: Node,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    }\r\n    return this.resolveFunction(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n\r\n  /** Resolves a class prototype using the specified concrete type arguments. */\r\n  resolveClass(\r\n    prototype: ClassPrototype,\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Check if this exact instance has already been resolved\r\n    var instance = prototype.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // Copy contextual type arguments so we don't pollute the original map\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(inheritedName, inheritedType);\r\n      }\r\n    }\r\n\r\n    // Insert contextual type arguments for this operation. Internally, this method is always\r\n    // called with matching type parameter / argument counts.\r\n    var declaration = prototype.declaration;\r\n    if (typeArguments) {\r\n      let typeParameters = declaration.typeParameters;\r\n      let expectedTypeArguments = typeParameters.length;\r\n      let actualTypeArguments = typeArguments.length;\r\n      assert(actualTypeArguments == expectedTypeArguments);\r\n      for (let i = 0; i < actualTypeArguments; ++i) {\r\n        contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n      }\r\n    } else {\r\n      assert(declaration.typeParameters.length == 0);\r\n    }\r\n\r\n    // Resolve base class if applicable\r\n    var baseClass: Class | null = null;\r\n    if (declaration.extendsType) {\r\n      let baseClassType = this.resolveType(\r\n        declaration.extendsType,\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!baseClassType) return null;\r\n      if (!(baseClass = baseClassType.classReference)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.program.error(\r\n            DiagnosticCode.A_class_may_only_extend_another_class,\r\n            declaration.extendsType.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.program.error(\r\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n            declaration.extendsType.range, baseClass.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.program.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n            Range.join(declaration.name.range, declaration.extendsType.range)\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Construct the instance and remember that it has been resolved already\r\n    var simpleName = prototype.simpleName;\r\n    var internalName = prototype.internalName;\r\n    if (instanceKey.length) {\r\n      simpleName += \"<\" + instanceKey + \">\";\r\n      internalName += \"<\" + instanceKey + \">\";\r\n    }\r\n    instance = new Class(prototype, simpleName, internalName, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    prototype.instances.set(instanceKey, instance);\r\n    this.program.instancesLookup.set(internalName, instance);\r\n\r\n    // Inherit base class members and set up the initial memory offset for own fields\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      if (baseClass.members) {\r\n        if (!instance.members) instance.members = new Map();\r\n        for (let inheritedMember of baseClass.members.values()) {\r\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\r\n        }\r\n      }\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n    }\r\n\r\n    // Resolve constructor by first applying the class type arguments\r\n    if (prototype.constructorPrototype) {\r\n      let constructorPartial = this.resolveFunctionPartially(\r\n        prototype.constructorPrototype,\r\n        typeArguments,\r\n        reportMode\r\n      );\r\n      if (!constructorPartial) return null;\r\n      instance.constructorInstance = this.resolveFunction(constructorPartial, null, null, reportMode);\r\n    }\r\n\r\n    // Resolve instance members\r\n    if (prototype.instanceMembers) {\r\n      for (let member of prototype.instanceMembers.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\r\n            let fieldType: Type | null = null;\r\n            // TODO: handle duplicate non-private fields\r\n            if (!fieldDeclaration.type) {\r\n              if (baseClass !== null && baseClass.members !== null) {\r\n                let baseField = baseClass.members.get((<FieldPrototype>member).simpleName);\r\n                if (baseField && !baseField.is(CommonFlags.PRIVATE)) {\r\n                  assert(baseField.kind == ElementKind.FIELD);\r\n                  fieldType = (<Field>baseField).type;\r\n                }\r\n              }\r\n              if (!fieldType) {\r\n                if (reportMode == ReportMode.REPORT) {\r\n                  this.error(\r\n                    DiagnosticCode.Type_expected,\r\n                    fieldDeclaration.name.range.atEnd\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n              fieldType = this.resolveType(\r\n                fieldDeclaration.type,\r\n                instance.contextualTypeArguments,\r\n                reportMode\r\n              );\r\n            }\r\n            if (!fieldType) break;\r\n            let fieldInstance = new Field(\r\n              <FieldPrototype>member,\r\n              internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\r\n              fieldType,\r\n              fieldDeclaration,\r\n              instance\r\n            );\r\n            switch (fieldType.byteSize) { // align\r\n              case 1: break;\r\n              case 2: { if (memoryOffset & 1) ++memoryOffset; break; }\r\n              case 4: { if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1; break; }\r\n              case 8: { if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1; break; }\r\n              default: assert(false);\r\n            }\r\n            fieldInstance.memoryOffset = memoryOffset;\r\n            memoryOffset += fieldType.byteSize;\r\n            instance.members.set(member.simpleName, fieldInstance);\r\n            break;\r\n          }\r\n\r\n          // Partially resolve methods as these might have type arguments on their own\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let partialPrototype = this.resolveFunctionPartially(\r\n              <FunctionPrototype>member,\r\n              typeArguments,\r\n              reportMode\r\n            );\r\n            if (!partialPrototype) return null;\r\n            partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\r\n            instance.members.set(member.simpleName, partialPrototype);\r\n            break;\r\n          }\r\n\r\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\r\n          case ElementKind.PROPERTY: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let getterPrototype = assert((<Property>member).getterPrototype); // must be present\r\n            let setterPrototype = (<Property>member).setterPrototype;         // might be present\r\n            let instanceProperty = new Property(\r\n              this.program,\r\n              member.simpleName,\r\n              internalName + INSTANCE_DELIMITER + member.simpleName,\r\n              prototype\r\n            );\r\n            let partialGetterPrototype = this.resolveFunctionPartially(\r\n              getterPrototype,\r\n              typeArguments,\r\n              reportMode\r\n            );\r\n            if (!partialGetterPrototype) return null;\r\n            partialGetterPrototype\r\n              .internalName = internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName;\r\n            instanceProperty.getterPrototype = partialGetterPrototype;\r\n            if (setterPrototype) {\r\n              let partialSetterPrototype = this.resolveFunctionPartially(\r\n                setterPrototype,\r\n                typeArguments,\r\n                reportMode\r\n              );\r\n              if (!partialSetterPrototype) return null;\r\n              partialSetterPrototype\r\n                .internalName = internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName;\r\n              instanceProperty.setterPrototype = partialSetterPrototype;\r\n            }\r\n            instance.members.set(member.simpleName, instanceProperty);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Finalize memory offset\r\n    instance.currentMemoryOffset = memoryOffset;\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\r\n        let operatorPartial = this.resolveFunctionPartially(\r\n          overloadPrototype,\r\n          typeArguments,\r\n          reportMode\r\n        );\r\n        if (!operatorPartial) continue;\r\n        operatorInstance = this.resolveFunction(operatorPartial, null, null, reportMode);\r\n      } else {\r\n        operatorInstance = this.resolveFunction(overloadPrototype, null, null, reportMode);\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      overloads.set(kind, operatorInstance);\r\n    }\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a class prototype by first resolving the specified type arguments. */\r\n  resolveClassInclTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    reportNode: Node,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n      let typeParameterNodes = prototype.declaration.typeParameters;\r\n      let expectedTypeArguments = typeParameterNodes.length;\r\n      assert(expectedTypeArguments > 0);\r\n      let actualTypeArguments = typeArgumentNodes !== null ? typeArgumentNodes.length : 0;\r\n      if (expectedTypeArguments != actualTypeArguments) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, expectedTypeArguments.toString(10), actualTypeArguments.toString(10)\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      resolvedTypeArguments = this.resolveTypeArguments(\r\n        typeParameterNodes,\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveClass(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  getFunctionName,\r\n  getFunctionBody,\r\n  getFunctionParamCount,\r\n  getFunctionParamType,\r\n  getFunctionResultType,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfCondition,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getLoopName,\r\n  getLoopBody,\r\n  getBreakName,\r\n  getBreakCondition,\r\n  getGetLocalIndex,\r\n  getSetLocalIndex,\r\n  getSetLocalValue,\r\n  getLoadOffset,\r\n  getLoadPtr,\r\n  getStoreOffset,\r\n  getStorePtr,\r\n  getStoreValue,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getUnaryOp,\r\n  getUnaryValue,\r\n  getBinaryOp,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getSelectCondition,\r\n  getDropValue,\r\n  getReturnValue,\r\n  getHostOp,\r\n  getHostOperand\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\r\n    var body = getFunctionBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(getFunctionResultType(func)));\r\n    this.push(\" \");\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = getExpressionId(expr);\r\n    var type = getExpressionType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = getBlockName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = getBlockChildCount(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(getBlockChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          if (nested = getIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(getIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = getLoopName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(getLoopBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = getBreakCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = getBreakName(expr)) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getGetLocalIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.SetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getSetLocalIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(getSetLocalValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GetGlobal:\r\n      case ExpressionId.SetGlobal: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getLoadOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getLoadPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getStoreOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getStorePtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getStoreValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(getConstValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(getConstValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(getConstValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(getSelectThen(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectElse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(getDropValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = getReturnValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (getHostOp(expr)) {\r\n          case HostOp.CurrentMemory: {\r\n            this.push(\"memory.size()\");\r\n            return;\r\n          }\r\n          case HostOp.GrowMemory: {\r\n            this.push(\"memory.grow(\");\r\n            this.decompileExpression(getHostOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  includePrivate: bool;\r\n  /** Elements still to do. */\r\n  todo: Element[] = [];\r\n  /** Already seen elements. */\r\n  seen: Set<Element> = new Set();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all exports and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let moduleExport of this.program.moduleLevelExports.values()) {\r\n      // FIXME: doesn't honor the actual externally visible name\r\n      this.visitElement(moduleExport.element);\r\n    }\r\n    var todo = this.todo;\r\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(<FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(<ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterPrototype;\r\n        if (getter) this.visitFunctionInstances(getter);\r\n        let setter = prop.setterPrototype;\r\n        if (setter) this.visitFunctionInstances(setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(element);\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(element: FunctionPrototype): void {\r\n    for (let instances of element.instances.values()) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(element: ClassPrototype): void {\r\n    for (let instance of element.instances.values()) {\r\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\r\n    }\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitField(element: Field): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else sb.push(\"static \");\r\n    } else {\r\n      if (isConst) sb.push(\"const \");\r\n      else sb.push(\"var \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n      sb.push(\";\\n\");\r\n      return;\r\n    } else {\r\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\r\n      sb.push(element.simpleName);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    var base = element.base;\r\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.simpleName); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.prototype.members; // static\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var ctor = element.constructorInstance;\r\n    if (ctor) this.visitFunction(ctor);\r\n    members = element.members; // instance\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    sb.push(\"export default ASModule;\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          for (let instances of (<FunctionPrototype>member).instances.values()) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          for (let instance of (<ClassPrototype>member).instances.values()) {\r\n            if (instance.is(CommonFlags.COMPILED)) return true;\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler,\r\n  IdentifierHandling\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  ClassExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath,\r\n  nodeIsCallable,\r\n  nodeIsGenericCallable\r\n} from \"./ast\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Source file names to be requested next. */\r\n  backlog: string[] = new Array();\r\n  /** Source file names already seen, that is processed or backlogged. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Source file names already completely processed. */\r\n  donelog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n\r\n    // check if already processed\r\n    if (this.donelog.has(internalPath)) return;\r\n    this.donelog.add(internalPath); // do not parse again\r\n    this.seenlog.add(internalPath); // do not request again\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    var program = this.program;\r\n    program.sources.push(source);\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn);\r\n      if (statement) {\r\n        statement.parent = source;\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: Node | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [];\r\n      decorators.push(decorator);\r\n    }\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (tn.skip(Token.DEFAULT)) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          tn.range()\r\n        );\r\n      }\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n          break;\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        }\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (!tn.skip(Token.CLASS)) {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n          break;\r\n        } else {\r\n          tn.discard(state);\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, flags, startPos);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    this.donelog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'void'\r\n    } else if (token == Token.VOID) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let parameters = new Array<TypeNode>();\r\n      let nullable = false;\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\r\n\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skipIdentifier()) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        if (isSignature) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skipIdentifier()) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n    if (tn.skip(Token.EXCLAMATION)) {\r\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n    }\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    var range = Range.join(identifier.range, tn.range());\r\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\r\n      this.error(\r\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n        range);\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      range\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n      if (!member) return null;\r\n      members.push(<EnumValueDeclaration>member);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEBRACE)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters = new Array<TypeParameterNode>();\r\n    while (!tn.skip(Token.GREATERTHAN)) {\r\n      let typeParameter = this.parseTypeParameter(tn);\r\n      if (!typeParameter) return null;\r\n      typeParameters.push(<TypeParameterNode>typeParameter);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.GREATERTHAN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    if (typeParameters.length === 0) {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseParametersThis: TypeNode | null = null;\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n    var thisType: CommonTypeNode | null = null;\r\n\r\n    // check if there is a leading `this` parameter\r\n    this.parseParametersThis = null;\r\n    if (tn.skip(Token.THIS)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        thisType = this.parseType(tn); // reports\r\n        if (!thisType) return null;\r\n        if (thisType.kind == NodeKind.TYPE) {\r\n          this.parseParametersThis = <TypeNode>thisType;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            thisType.range\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n        return null;\r\n      }\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          return parameters;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let param = this.parseParameter(tn, isConstructor); // reports\r\n      if (!param) return null;\r\n      if (seenRest && !reportedRest) {\r\n        this.error(\r\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n          seenRest.name.range\r\n        );\r\n        reportedRest = true;\r\n      }\r\n      switch (param.parameterKind) {\r\n        default: {\r\n          if (seenOptional) {\r\n            this.error(\r\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n              param.name.range\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ParameterKind.OPTIONAL: {\r\n          seenOptional = true;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          seenRest = param;\r\n          break;\r\n        }\r\n      }\r\n      parameters.push(param);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (isConstructor) {\r\n      if (tn.skip(Token.PUBLIC)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PUBLIC;\r\n      } else if (tn.skip(Token.PROTECTED)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PROTECTED;\r\n      } else if (tn.skip(Token.PRIVATE)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PRIVATE;\r\n      }\r\n      if (tn.peek() == Token.READONLY) {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek() != Token.COLON) { // modifier\r\n          tn.discard(state);\r\n          if (!startRange) startRange = tn.range();\r\n          accessFlags |= CommonFlags.READONLY;\r\n        } else { // identifier\r\n          tn.reset(state);\r\n        }\r\n      }\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skipIdentifier()) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n    var thisType = this.parseParametersThis;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var isArrow = false;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skipIdentifier()) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      isArrow = true;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    isArrow: bool,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n      this.error(\r\n        DiagnosticCode.Type_expected,\r\n        returnType.range\r\n      ); // recoverable\r\n    }\r\n\r\n    if (isArrow) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null, // TODO?\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null;\r\n    if (isArrow) {\r\n      body = this.parseStatement(tn, false);\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    } else {\r\n      typeParameters = [];\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: TypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [];\r\n          implementsTypes.push(<TypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (!member) return null;\r\n        member.parent = declaration;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return declaration;\r\n  }\r\n\r\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\r\n\r\n    // at 'class': Identifier? '{' ... '}'\r\n\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n\r\n    if (tn.skipIdentifier()) {\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    } else {\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration = Node.createClassDeclaration(\r\n      name,\r\n      [],\r\n      null,\r\n      null,\r\n      members,\r\n      null,\r\n      CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (!member) return null;\r\n        member.parent = declaration;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return Node.createClassExpression(declaration);\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\r\n\r\n    var decorators = new Array<DecoratorNode>();\r\n    while (tn.skip(Token.AT)) {\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) break;\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorator.range\r\n        );\r\n      }\r\n      decorators.push(<DecoratorNode>decorator);\r\n    }\r\n\r\n    // inherit ambient status\r\n    var flags = parent.flags & CommonFlags.AMBIENT;\r\n\r\n    // implemented methods are virtual\r\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\r\n\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"public\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"private\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PRIVATE;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"protected\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PROTECTED;\r\n    }\r\n\r\n    var staticStart: i32 = 0;\r\n    var staticEnd: i32 = 0;\r\n    var abstractStart: i32 = 0;\r\n    var abstractEnd: i32 = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"static\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      flags |= CommonFlags.INSTANCE;\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        if (isInterface) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(), \"abstract\"\r\n          );\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) {\r\n        flags |= CommonFlags.GENERIC_CONTEXT;\r\n      }\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (!isInterface) {\r\n      if (tn.skip(Token.GET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.GET;\r\n          isGetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.SET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.SET | CommonFlags.SET;\r\n          isSetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n        flags |= CommonFlags.CONSTRUCTOR;\r\n        isConstructor = true;\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!isConstructor && !tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = isConstructor\r\n      ? Node.createConstructorExpression(tn.range())\r\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      let thisType = this.parseParametersThis;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            implicitFieldDeclaration.parent = parent;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        thisType,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\r\n            tn.range(), name.text\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.QUESTION)) {\r\n        this.error(\r\n          DiagnosticCode.Optional_properties_are_not_supported,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      if (tn.skip(Token.EXCLAMATION)) {\r\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let range = tn.range(startPos, tn.pos);\r\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\r\n        this.error(\r\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n          range\r\n        );\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        range\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let ns = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, ns);\r\n          if (!member) return null;\r\n          member.parent = ns;\r\n          members.push(member);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ns;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    startPos: i32\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    var path: StringLiteralExpression | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseExportMember(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\r\n          let internalPath = assert(ret.internalPath);\r\n          let source = tn.source;\r\n          if (!source.exportPaths) source.exportPaths = new Set();\r\n          source.exportPaths.add(internalPath);\r\n          if (!this.seenlog.has(internalPath)) {\r\n            this.backlog.push(internalPath);\r\n            this.seenlog.add(internalPath);\r\n          }\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"from\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseImportDeclaration(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skipIdentifier()) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        if (tn.token == Token.ENDOFFILE) return null;\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skipIdentifier()) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(IdentifierHandling.PREFER);\r\n    var startPos = tn.tokenPos;\r\n    var precedence = determinePrecedenceStart(token);\r\n    if (precedence != Precedence.NONE) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, precedence);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var expr: Expression | null = null;\r\n    switch (token) {\r\n\r\n      case Token.NULL: return Node.createNullExpression(tn.range());\r\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\r\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            true\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(IdentifierHandling.PREFER)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (\r\n                    !tn.skip(Token.COLON) &&\r\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\r\n                  ) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // optional parameter or parenthesized\r\n                case Token.QUESTION: {\r\n                  if (\r\n                    tn.skip(Token.COLON) ||   // optional parameter with type\r\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\r\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\r\n                  ) {\r\n                    tn.reset(state);\r\n                    return this.parseFunctionExpression(tn);\r\n                  }\r\n                  again = false; // parenthesized\r\n                  break;\r\n                  }\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        while (!tn.skip(Token.CLOSEBRACKET)) {\r\n          if (tn.peek() == Token.COMMA) {\r\n            expr = null; // omitted\r\n          } else {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n          }\r\n          elementExpressions.push(expr);\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACKET)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"]\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // ObjectLiteralExpression\r\n      case Token.OPENBRACE: {\r\n        let startPos = tn.tokenPos;\r\n        let names = new Array<IdentifierExpression>();\r\n        let values = new Array<Expression>();\r\n        let name: IdentifierExpression;\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          if (!tn.skipIdentifier()) {\r\n            if (!tn.skip(Token.STRINGLITERAL)) {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                tn.range(),\r\n              );\r\n              return null;\r\n            }\r\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\r\n            name.set(CommonFlags.QUOTED);\r\n          } else {\r\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          }\r\n          names.push(name);\r\n          if (tn.skip(Token.COLON)) {\r\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!value) return null;\r\n            values.push(value);\r\n          } else if (!name.is(CommonFlags.QUOTED)) {\r\n            values.push(name);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACE)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      case Token.CLASS: {\r\n        return this.parseClassExpression(tn);\r\n      }\r\n      default: {\r\n        if (token == Token.ENDOFFILE) {\r\n          this.error(\r\n            DiagnosticCode.Unexpected_end_of_text,\r\n            tn.range(startPos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Expression_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments = new Array<CommonTypeNode>();\r\n    do {\r\n      if (tn.peek() === Token.GREATERTHAN) {\r\n        break;\r\n      }\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!expr) return null;\r\n      args.push(expr);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = Precedence.COMMA\r\n  ): Expression | null {\r\n    assert(precedence != Precedence.NONE);\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\r\n\r\n    var startPos = expr.range.start;\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn); // reports\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // InstanceOfExpression\r\n        case Token.INSTANCEOF: {\r\n          let isType = this.parseType(tn); // reports\r\n          if (!isType) return null;\r\n          expr = Node.createInstanceOfExpression(\r\n            expr,\r\n            isType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn); // reports\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\r\n            ? Precedence.COMMA + 1\r\n            : Precedence.COMMA\r\n          );\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (tn.skipIdentifier()) {\r\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            } else {\r\n              next = this.parseExpression(tn,\r\n                isRightAssociative(token)\r\n                  ? nextPrecedence\r\n                  : nextPrecedence + 1\r\n              );\r\n              if (!next) return null;\r\n            }\r\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\r\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\r\n              if (!expr) return null;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            next = this.parseExpression(tn,\r\n              isRightAssociative(token)\r\n                ? nextPrecedence\r\n                : nextPrecedence + 1\r\n            );\r\n            if (!next) return null;\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  private joinPropertyCall(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    expr: Expression,\r\n    call: CallExpression\r\n  ): Expression | null {\r\n    var callee = call.expression;\r\n    switch (callee.kind) {\r\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\r\n        call.expression = Node.createPropertyAccessExpression(\r\n          expr,\r\n          <IdentifierExpression>callee,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.CALL: { // join call target und wrap the original call around it\r\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\r\n        if (!inner) return null;\r\n        call.expression = inner;\r\n        call.range = tn.range(startPos, tn.pos);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          call.range\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return call;\r\n  }\r\n\r\n  private maybeParseCallExpression(\r\n    tn: Tokenizer,\r\n    expr: Expression\r\n  ): Expression {\r\n    if (nodeIsCallable(expr.kind)) {\r\n      let typeArguments: CommonTypeNode[] | null = null;\r\n      while (\r\n        tn.skip(Token.OPENPAREN)\r\n        ||\r\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\r\n      ) {\r\n        let args = this.parseArguments(tn);\r\n        if (!args) break;\r\n        expr = Node.createCallExpression( // is again callable\r\n          expr,\r\n          typeArguments,\r\n          args,\r\n          tn.range(expr.range.start, tn.pos)\r\n        );\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.SEMICOLON      // end of the statement for sure\r\n      ) {\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipBlock(tn: Tokenizer): void {\r\n    // at '{': ... '}'\r\n    var depth = 1;\r\n    var again = true;\r\n    do {\r\n      switch (tn.next()) {\r\n        case Token.ENDOFFILE: {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          again = false;\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          ++depth;\r\n          break;\r\n        }\r\n        case Token.CLOSEBRACE: {\r\n          --depth;\r\n          if (!depth) again = false;\r\n          break;\r\n        }\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (again);\r\n  }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  NONE,\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\n/// <reference path=\"./node.d.ts\" />\r\n\r\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\r\nimport \"../../../std/portable/index\";\r\nimport \"./float\";\r\nimport \"./i64\";\r\n\r\nimport { Module } from \"../../module\";\r\n\r\nModule.prototype.toText = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitStackIR();\r\n};\r\n\r\nModule.prototype.toAsmjs = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitAsmjs();\r\n};\r\n","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\nglobal.binaryen = binaryen;\r\n\r\nfor (var key in binaryen) {\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\r\n}\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.__memory_allocate = binaryen._malloc;\r\nglobal.__memory_free = binaryen._free;\r\nglobal.__memory_copy = binaryen._memmove;\r\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\r\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__18__;","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nglobalScope.ASC_TARGET = 0;\r\n\r\nvar F64 = new Float64Array(1);\r\nvar U64 = new Uint32Array(F64.buffer);\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value:  127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value:  32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value:   0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value:     0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value:          0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 1, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\r\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false },\r\n  \"POSITIVE_INFINITY\": { value:  Infinity, writable: false },\r\n  \"NEGATIVE_INFINITY\": { value: -Infinity, writable: false },\r\n  \"NaN\": { value: NaN, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\r\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false },\r\n  \"POSITIVE_INFINITY\": { value:  Infinity, writable: false },\r\n  \"NEGATIVE_INFINITY\": { value: -Infinity, writable: false },\r\n  \"NaN\": { value: NaN, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isReference\"] = function isClass(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\n\r\nglobalScope[\"unchecked\"] = function unchecked(expr) {\r\n  return expr;\r\n};\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nglobalScope[\"JSMath\"] = Math;\r\nglobalScope[\"JSMath\"].signbit = function signbit(x) {\r\n  F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\r\n}\r\n\r\nglobalScope[\"memory\"] = (() => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n  return {\r\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\r\n      if (!(size >>>= 0)) return 0;\r\n      if (HEAP_OFFSET + size > HEAP.length) {\r\n        var oldHeap = HEAP;\r\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n        HEAP.set(oldHeap);\r\n      }\r\n      var ptr = HEAP_OFFSET;\r\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n      return ptr;\r\n    },\r\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\r\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\r\n      HEAP.copyWithin(dest, src, src + size);\r\n    }\r\n  };\r\n})();\r\n\r\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\r\n  HEAP[ptr + (offset | 0)] = value;\r\n};\r\n\r\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\r\n  return HEAP[ptr + (offset | 0)];\r\n};\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_zero = Long.ZERO;\r\n\r\nglobal.i64_one = Long.ONE;\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_eq = function(left, right) {\r\n  return left.eq(right);\r\n};\r\n\r\nglobal.i64_ne = function(left, right) {\r\n  return left.ne(right);\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\n import {\r\n  Compiler,\r\n  ConversionKind,\r\n  WrapMode\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI64High,\r\n  getConstValueI64Low,\r\n  getConstValueI32\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  FunctionPrototype,\r\n  Class,\r\n  Field,\r\n  OperatorKind,\r\n  FlowFlags,\r\n  Global,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  var arg0: ExpressionRef,\r\n      arg1: ExpressionRef,\r\n      arg2: ExpressionRef,\r\n      ret: ExpressionRef;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // types\r\n\r\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.SIGNED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\r\n      }\r\n      return module.createI32(0);\r\n    }\r\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      return classType !== null && classType.lookupOverload(OperatorKind.INDEXED_GET) !== null\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isDefined\": { // isDefined(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let element = compiler.resolver.resolveExpression(operands[0], compiler.currentFunction, ReportMode.SWALLOW);\r\n      return module.createI32(element ? 1 : 0);\r\n    }\r\n    case \"isConstant\": { // isConstant(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      compiler.currentType = Type.bool;\r\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\r\n    }\r\n    case \"isManaged\": { // isManaged<T>() -> bool\r\n      if (!compiler.program.hasGC) {\r\n        compiler.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n\r\n    // math\r\n\r\n    case \"clz\": { // clz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ClzI64\r\n              : UnaryOp.ClzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ctz\": { // ctz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.CtzI64\r\n              : UnaryOp.CtzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.PopcntI64\r\n              : UnaryOp.PopcntI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflows\r\n    }\r\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflowws\r\n    }\r\n    case \"abs\": { // abs<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          // possibly overflows, e.g. abs<i8>(-128) == 128\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\r\n          ret = module.createSelect( // x > 0 ? x : 0-x\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI32, // ifFalse\r\n              module.createI32(0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32)\r\n            ),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              module.createI32(0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              compiler.options.usizeType.toNativeZero(module),\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            ),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\r\n              compiler.options.usizeType.toNativeZero(module)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI64,\r\n              module.createI64(0, 0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n            ),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n              module.createI64(0, 0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"max\": { // max<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"min\": { // min<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ceil\": { // ceil<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"floor\": { // floor<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"nearest\": { // nearest<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\r\n      if (operands.length != 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            compiler.currentType = typeArguments[0];\r\n            return module.createUnreachable();\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          arg0 = compiler.compileExpression(\r\n            operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: { // small integers and void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return ret;\r\n    }\r\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        // case TypeKind.VOID:\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"trunc\": { // trunc<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments && typeArguments.length) {\r\n        compiler.currentType = typeArguments[0];\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // memory access\r\n\r\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createLoad(\r\n        typeArguments[0].byteSize,\r\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset\r\n      );\r\n    }\r\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let type: Type;\r\n      if (\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        (\r\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\r\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n    }\r\n    case \"sizeof\": { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(byteSize);\r\n        } else {\r\n          ret = module.createI64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(byteSize, 0);\r\n        } else {\r\n          ret = module.createI32(byteSize);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"alignof\": { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let alignLog2: i32;\r\n      switch (byteSize) {\r\n        case 1: { alignLog2 = 0; break; }\r\n        case 2: { alignLog2 = 1; break; }\r\n        case 4: { alignLog2 = 2; break; }\r\n        case 8: { alignLog2 = 3; break; }\r\n        default: { assert(false); return module.createUnreachable(); }\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(alignLog2);\r\n        } else {\r\n          ret = module.createI64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(alignLog2, 0);\r\n        } else {\r\n          ret = module.createI32(alignLog2);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length > 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classType = typeArguments[0].classReference;\r\n      if (!classType) {\r\n        compiler.error( // TODO: better error\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.createI32(offset);\r\n        } else {\r\n          return module.createI64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.createI64(offset);\r\n        } else {\r\n          return module.createI32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // control flow\r\n\r\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (operands.length != 3) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n      let type = compiler.currentType;\r\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg2 = compiler.makeIsTrueish(\r\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\r\n        compiler.currentType\r\n      );\r\n      compiler.currentType = type;\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        default: { // any other value type\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unreachable\": { // unreachable() -> *\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // host operations\r\n\r\n    case \"memory.size\": { // memory.size() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.CurrentMemory);\r\n    }\r\n    case \"memory.grow\": { // memory.grow(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        arg0 = module.createUnreachable();\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\r\n    }\r\n    // see: https://github.com/WebAssembly/bulk-memory-operations\r\n    case \"memory.copy\": { // memory.copy(dest: usize, src: usize: n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n    case \"memory.fill\": { // memory.fill(dest: usize, value: u8, n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        Type.u32,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n\r\n    // other\r\n\r\n    case \"changetype\": { // changetype<T!>(value: *) -> T\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(\r\n        operands[0],\r\n        typeArguments[0],\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = typeArguments[0];\r\n      if (compiler.currentType.size != typeArguments[0].size) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\r\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\r\n      return arg0; // any usize to any usize\r\n    }\r\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else if (operands.length > 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\r\n      }\r\n\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) {\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n        compiler.currentType = Type.void;\r\n      } else {\r\n        switch (compiler.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            let flow = compiler.currentFunction.flow;\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\r\n              compiler.currentType,\r\n              !flow.canOverflow(arg0, compiler.currentType)\r\n            );\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32:\r\n          default: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unchecked\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let flow = compiler.currentFunction.flow;\r\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\r\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\r\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\r\n      return ret;\r\n    }\r\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\r\n      if (operands.length < 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let returnType: Type;\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        returnType = typeArguments[0];\r\n      } else {\r\n        returnType = contextualType;\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\r\n      if (compiler.currentType.kind != TypeKind.U32) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let numOperands = operands.length - 1;\r\n      let operandExprs = new Array<ExpressionRef>(numOperands);\r\n      let signatureParts = new Array<string>(numOperands + 1);\r\n      let nativeReturnType = returnType.toNativeType();\r\n      let nativeParamTypes = new Array<NativeType>(numOperands);\r\n      for (let i = 0; i < numOperands; ++i) {\r\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\r\n        let operandType = compiler.currentType;\r\n        signatureParts[i] = operandType.toSignatureString();\r\n        nativeParamTypes[i] = operandType.toNativeType();\r\n      }\r\n      signatureParts[numOperands] = returnType.toSignatureString();\r\n      let typeName = signatureParts.join(\"\");\r\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\r\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\r\n      compiler.currentType = returnType;\r\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\r\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\r\n      return module.createCallIndirect(arg0, operandExprs, typeName);\r\n    }\r\n    case \"instantiate\": {\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classInstance = typeArguments[0].classReference;\r\n      if (!classInstance) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileInstantiate(classInstance, operands, reportNode);\r\n    }\r\n\r\n    // user-defined diagnostic macros\r\n\r\n    case \"ERROR\": {\r\n      compiler.error(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    case \"WARNING\": {\r\n      compiler.warning(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createNop();\r\n    }\r\n    case \"INFO\": {\r\n      compiler.info(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createNop();\r\n    }\r\n\r\n    // conversions\r\n\r\n    case \"i8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"isize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"usize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"bool\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.bool,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"f32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"f64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n\r\n    // gc\r\n\r\n    case \"iterateRoots\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\r\n      let type = compiler.currentType;\r\n      let signatureReference = type.signatureReference;\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        !type.is(TypeFlags.REFERENCE) ||\r\n        !signatureReference ||\r\n        signatureReference.parameterTypes.length != 1 ||\r\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\r\n       ) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      // just emit a call even if the function doesn't yet exist\r\n      compiler.needsIterateRoots = true;\r\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\r\n    }\r\n  }\r\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\r\n  if (expr) {\r\n    if (typeArguments && typeArguments.length) {\r\n      compiler.error(\r\n        DiagnosticCode.Type_0_is_not_generic,\r\n        reportNode.range, prototype.internalName\r\n      );\r\n    }\r\n    return expr;\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\n/** Defers an inline-assembler-like call to a built-in function. */\r\nfunction deferASMCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  switch (prototype.internalName) {\r\n\r\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\r\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\r\n    //   and, or, xor, shl, shr_u, shr_s\r\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\r\n\r\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\r\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\r\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\r\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\r\n\r\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\r\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\r\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\r\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\r\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\r\nfunction deferASM(\r\n  name: string,\r\n  compiler: Compiler,\r\n  typeArgument: Type,\r\n  operands: Expression[],\r\n  valueType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var prototype = assert(compiler.program.elementsLookup.get(name));\r\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\r\n}\r\n\r\n/** Evaluates the constant type of a type argument *or* expression. */\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: Node\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments) {\r\n      if (typeArguments.length == 1) {\r\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        if (typeArguments.length) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return null;\r\n        }\r\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n    } else {\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.range, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\n/** Evaluates a `constantOffset` argument.*/\r\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I64 ||\r\n      getConstValueI64High(expr) != 0 ||\r\n      (value = getConstValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I32 ||\r\n      (value = getConstValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n/** Compiles a memory allocation for an instance of the specified class. */\r\nexport function compileAllocate(\r\n  compiler: Compiler,\r\n  classInstance: Class,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  assert(classInstance.program == program);\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n\r\n  // __gc_allocate(size, markFn)\r\n  if (program.hasGC && classInstance.type.isManaged(program)) {\r\n    let allocateInstance = assert(program.gcAllocateInstance);\r\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\r\n    compiler.currentType = classInstance.type;\r\n    return module.createCall(\r\n      allocateInstance.internalName, [\r\n        options.isWasm64\r\n          ? module.createI64(classInstance.currentMemoryOffset)\r\n          : module.createI32(classInstance.currentMemoryOffset),\r\n        module.createI32(\r\n          ensureGCHook(compiler, classInstance)\r\n        )\r\n      ],\r\n      options.nativeSizeType\r\n    );\r\n\r\n  // memory.allocate(size)\r\n  } else {\r\n    let allocateInstance = program.memoryAllocateInstance;\r\n    if (!allocateInstance) {\r\n      program.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        reportNode.range, \"memory.allocate\"\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\r\n\r\n    compiler.currentType = classInstance.type;\r\n    return module.createCall(\r\n      allocateInstance.internalName, [\r\n        options.isWasm64\r\n          ? module.createI64(classInstance.currentMemoryOffset)\r\n          : module.createI32(classInstance.currentMemoryOffset)\r\n      ],\r\n      options.nativeSizeType\r\n    );\r\n  }\r\n}\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringType = program.typesLookup.get(\"string\");\r\n  if (!stringType) return module.createUnreachable();\r\n\r\n  var abortInstance = program.abortInstance;\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    : stringType.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCall(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n\r\n/** Compiles the iterateRoots function if requires. */\r\nexport function compileIterateRoots(compiler: Compiler): void {\r\n  var module = compiler.module;\r\n  var exprs = new Array<ExpressionRef>();\r\n\r\n  for (let element of compiler.program.elementsLookup.values()) {\r\n    if (element.kind != ElementKind.GLOBAL) continue;\r\n    let global = <Global>element;\r\n    let classReference = global.type.classReference;\r\n    if (\r\n      global.is(CommonFlags.COMPILED) &&\r\n      classReference !== null &&\r\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\r\n    ) {\r\n      if (global.is(CommonFlags.INLINED)) {\r\n        let value = global.constantIntegerValue;\r\n        exprs.push(\r\n          module.createCallIndirect(\r\n            module.createGetLocal(0, NativeType.I32),\r\n            [\r\n              compiler.options.isWasm64\r\n                ? module.createI64(i64_low(value), i64_high(value))\r\n                : module.createI32(i64_low(value))\r\n            ],\r\n            \"iv\"\r\n          )\r\n        );\r\n      } else {\r\n        exprs.push(\r\n          module.createCallIndirect(\r\n            module.createGetLocal(0, NativeType.I32),\r\n            [\r\n              module.createGetGlobal(\r\n                global.internalName,\r\n                compiler.options.nativeSizeType\r\n              )\r\n            ],\r\n            \"iv\"\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\r\n  module.addFunction(\"~iterateRoots\", typeRef, [],\r\n    exprs.length\r\n      ? module.createBlock(null, exprs)\r\n      : module.createNop()\r\n  );\r\n}\r\n\r\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\r\nexport function ensureGCHook(\r\n  compiler: Compiler,\r\n  classInstance: Class\r\n): u32 {\r\n  var program = compiler.program;\r\n  assert(classInstance.type.isManaged(program));\r\n\r\n  // check if the GC hook has already been created\r\n  {\r\n    let existingIndex = classInstance.gcHookIndex;\r\n    if (existingIndex != <u32>-1) return existingIndex;\r\n  }\r\n\r\n  // check if the class implements a custom GC function (only valid for internals)\r\n  var members = classInstance.members;\r\n  if (classInstance.prototype.declaration.range.source.isLibrary) {\r\n    if (members !== null && members.has(\"__gc\")) {\r\n      let gcPrototype = assert(members.get(\"__gc\"));\r\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\r\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\r\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\r\n      assert(gcInstance.signature.parameterTypes.length == 0);\r\n      assert(gcInstance.signature.returnType == Type.void);\r\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\r\n      assert(compiler.compileFunction(gcInstance));\r\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\r\n      classInstance.gcHookIndex = index;\r\n      return index;\r\n    }\r\n  }\r\n\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n  var nativeSizeType = options.nativeSizeType;\r\n  var nativeSizeSize = options.usizeType.byteSize;\r\n  var body = new Array<ExpressionRef>();\r\n\r\n  // nothing to mark if 'this' is null\r\n  body.push(\r\n    module.createIf(\r\n      module.createUnary(\r\n        options.isWasm64\r\n          ? UnaryOp.EqzI64\r\n          : UnaryOp.EqzI32,\r\n        module.createGetLocal(0, nativeSizeType)\r\n      ),\r\n      module.createReturn()\r\n    )\r\n  );\r\n\r\n  // remember the function index so we don't recurse infinitely\r\n  var functionTable = compiler.functionTable;\r\n  var gcHookIndex = functionTable.length;\r\n  functionTable.push(\"<placeholder>\");\r\n  classInstance.gcHookIndex = gcHookIndex;\r\n\r\n  // if the class extends a base class, call its hook first (calls mark)\r\n  var baseInstance = classInstance.base;\r\n  if (baseInstance) {\r\n    assert(baseInstance.type.isManaged(program));\r\n    body.push(\r\n      module.createCallIndirect(\r\n        module.createI32(\r\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\r\n        ),\r\n        [\r\n          module.createGetLocal(0, nativeSizeType)\r\n        ],\r\n        nativeSizeType == NativeType.I64 ? \"Iv\" : \"iv\"\r\n      )\r\n    );\r\n\r\n  // if this class is the top-most base class, mark the instance\r\n  } else {\r\n    body.push(\r\n      module.createCall(assert(program.gcMarkInstance).internalName, [\r\n        module.createGetLocal(0, nativeSizeType)\r\n      ], NativeType.None)\r\n    );\r\n  }\r\n\r\n  // mark instances assigned to own fields that are again references\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      if (member.kind == ElementKind.FIELD) {\r\n        if ((<Field>member).parent === classInstance) {\r\n          let type = (<Field>member).type;\r\n          if (type.isManaged(program)) {\r\n            let offset = (<Field>member).memoryOffset;\r\n            assert(offset >= 0);\r\n            body.push(\r\n              module.createCall(assert(program.gcMarkInstance).internalName, [\r\n                module.createLoad(\r\n                  nativeSizeSize,\r\n                  false,\r\n                  module.createGetLocal(0, nativeSizeType),\r\n                  nativeSizeType,\r\n                  offset\r\n                )\r\n              ], NativeType.None)\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // add the function to the module and return its table index\r\n  var funcName = classInstance.internalName + \"~gc\";\r\n  module.addFunction(\r\n    funcName,\r\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\r\n    null,\r\n    module.createBlock(null, body)\r\n  );\r\n  functionTable[gcHookIndex] = funcName;\r\n  return gcHookIndex;\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + (hi - lo) / 2;\r\n    mid -= mid % 2;\r\n    if (map[mid] <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < map[mid]) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\n/** Reads an 8-bit integer from the specified buffer. */\r\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset];\r\n}\r\n\r\n/** Writes an 8-bit integer to the specified buffer. */\r\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset] = value;\r\n}\r\n\r\n/** Reads a 16-bit integer from the specified buffer. */\r\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8;\r\n}\r\n\r\n/** Writes a 16-bit integer to the specified buffer. */\r\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n}\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  IDLBuilder,\r\n  TSDBuilder\r\n} from \"./definitions\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noTreeShaking` option. */\r\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\r\n  options.noTreeShaking = noTreeShaking;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Sign extension operations. */\r\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\r\n/** Mutable global imports and exports. */\r\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\r\n\r\n/** Enables a specific feature. */\r\nexport function enableFeature(options: Options, feature: Feature): void {\r\n  options.features |= feature;\r\n}\r\n\r\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\r\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\r\n  options.optimizeLevelHint = optimizeLevel;\r\n  options.shrinkLevelHint = shrinkLevel;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX } from \"./common\";\r\n\r\n// Full API\r\nexport * from \"./ast\";\r\n// export * from \"./binary\";\r\nexport * from \"./common\";\r\nexport * from \"./compiler\";\r\nexport * from \"./decompiler\";\r\nexport * from \"./definitions\";\r\nexport * from \"./diagnosticMessages.generated\";\r\nexport * from \"./diagnostics\";\r\nexport * from \"./module\";\r\nexport * from \"./parser\";\r\nexport * from \"./program\";\r\nexport * from \"./resolver\";\r\nexport * from \"./tokenizer\";\r\nexport * from \"./types\";\r\nexport * from \"./util\";\r\n"],"sourceRoot":""}